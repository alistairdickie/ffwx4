
Weather411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000173dc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001bc8  08017580  08017580  00027580  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019148  08019148  0003025c  2**0
                  CONTENTS
  4 .ARM          00000008  08019148  08019148  00029148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019150  08019150  0003025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019150  08019150  00029150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019154  08019154  00029154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000025c  20000000  08019158  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000097ec  20000260  080193b4  00030260  2**3
                  ALLOC
 10 ._user_heap_stack 00002404  20009a4c  080193b4  00039a4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003025c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028e61  00000000  00000000  0003028c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005658  00000000  00000000  000590ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c80  00000000  00000000  0005e748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a78  00000000  00000000  000603c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e8d7  00000000  00000000  00061e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000238a7  00000000  00000000  00080717  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3bdf  00000000  00000000  000a3fbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00147b9d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009318  00000000  00000000  00147bf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000260 	.word	0x20000260
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08017564 	.word	0x08017564

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000264 	.word	0x20000264
 80001dc:	08017564 	.word	0x08017564

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_ldivmod>:
 8000cb8:	b97b      	cbnz	r3, 8000cda <__aeabi_ldivmod+0x22>
 8000cba:	b972      	cbnz	r2, 8000cda <__aeabi_ldivmod+0x22>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bfbe      	ittt	lt
 8000cc0:	2000      	movlt	r0, #0
 8000cc2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cc6:	e006      	blt.n	8000cd6 <__aeabi_ldivmod+0x1e>
 8000cc8:	bf08      	it	eq
 8000cca:	2800      	cmpeq	r0, #0
 8000ccc:	bf1c      	itt	ne
 8000cce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cd2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd6:	f000 b9ef 	b.w	80010b8 <__aeabi_idiv0>
 8000cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	db09      	blt.n	8000cfa <__aeabi_ldivmod+0x42>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db1a      	blt.n	8000d20 <__aeabi_ldivmod+0x68>
 8000cea:	f000 f883 	bl	8000df4 <__udivmoddi4>
 8000cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf6:	b004      	add	sp, #16
 8000cf8:	4770      	bx	lr
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db1b      	blt.n	8000d3c <__aeabi_ldivmod+0x84>
 8000d04:	f000 f876 	bl	8000df4 <__udivmoddi4>
 8000d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d10:	b004      	add	sp, #16
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	4252      	negs	r2, r2
 8000d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f865 	bl	8000df4 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4240      	negs	r0, r0
 8000d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3a:	4770      	bx	lr
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d42:	f000 f857 	bl	8000df4 <__udivmoddi4>
 8000d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d4e:	b004      	add	sp, #16
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_uldivmod>:
 8000d58:	b953      	cbnz	r3, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5a:	b94a      	cbnz	r2, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5c:	2900      	cmp	r1, #0
 8000d5e:	bf08      	it	eq
 8000d60:	2800      	cmpeq	r0, #0
 8000d62:	bf1c      	itt	ne
 8000d64:	f04f 31ff 	movne.w	r1, #4294967295
 8000d68:	f04f 30ff 	movne.w	r0, #4294967295
 8000d6c:	f000 b9a4 	b.w	80010b8 <__aeabi_idiv0>
 8000d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d78:	f000 f83c 	bl	8000df4 <__udivmoddi4>
 8000d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d84:	b004      	add	sp, #16
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_d2lz>:
 8000d88:	b538      	push	{r3, r4, r5, lr}
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	4604      	mov	r4, r0
 8000d90:	460d      	mov	r5, r1
 8000d92:	f7ff febb 	bl	8000b0c <__aeabi_dcmplt>
 8000d96:	b928      	cbnz	r0, 8000da4 <__aeabi_d2lz+0x1c>
 8000d98:	4620      	mov	r0, r4
 8000d9a:	4629      	mov	r1, r5
 8000d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000da0:	f000 b80a 	b.w	8000db8 <__aeabi_d2ulz>
 8000da4:	4620      	mov	r0, r4
 8000da6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000daa:	f000 f805 	bl	8000db8 <__aeabi_d2ulz>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	bd38      	pop	{r3, r4, r5, pc}
 8000db6:	bf00      	nop

08000db8 <__aeabi_d2ulz>:
 8000db8:	b5d0      	push	{r4, r6, r7, lr}
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <__aeabi_d2ulz+0x34>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	4606      	mov	r6, r0
 8000dc0:	460f      	mov	r7, r1
 8000dc2:	f7ff fc31 	bl	8000628 <__aeabi_dmul>
 8000dc6:	f7ff ff07 	bl	8000bd8 <__aeabi_d2uiz>
 8000dca:	4604      	mov	r4, r0
 8000dcc:	f7ff fbb2 	bl	8000534 <__aeabi_ui2d>
 8000dd0:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <__aeabi_d2ulz+0x38>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f7ff fc28 	bl	8000628 <__aeabi_dmul>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4630      	mov	r0, r6
 8000dde:	4639      	mov	r1, r7
 8000de0:	f7ff fa6a 	bl	80002b8 <__aeabi_dsub>
 8000de4:	f7ff fef8 	bl	8000bd8 <__aeabi_d2uiz>
 8000de8:	4621      	mov	r1, r4
 8000dea:	bdd0      	pop	{r4, r6, r7, pc}
 8000dec:	3df00000 	.word	0x3df00000
 8000df0:	41f00000 	.word	0x41f00000

08000df4 <__udivmoddi4>:
 8000df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df8:	9d08      	ldr	r5, [sp, #32]
 8000dfa:	4604      	mov	r4, r0
 8000dfc:	468c      	mov	ip, r1
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	f040 8083 	bne.w	8000f0a <__udivmoddi4+0x116>
 8000e04:	428a      	cmp	r2, r1
 8000e06:	4617      	mov	r7, r2
 8000e08:	d947      	bls.n	8000e9a <__udivmoddi4+0xa6>
 8000e0a:	fab2 f282 	clz	r2, r2
 8000e0e:	b142      	cbz	r2, 8000e22 <__udivmoddi4+0x2e>
 8000e10:	f1c2 0020 	rsb	r0, r2, #32
 8000e14:	fa24 f000 	lsr.w	r0, r4, r0
 8000e18:	4091      	lsls	r1, r2
 8000e1a:	4097      	lsls	r7, r2
 8000e1c:	ea40 0c01 	orr.w	ip, r0, r1
 8000e20:	4094      	lsls	r4, r2
 8000e22:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e26:	0c23      	lsrs	r3, r4, #16
 8000e28:	fbbc f6f8 	udiv	r6, ip, r8
 8000e2c:	fa1f fe87 	uxth.w	lr, r7
 8000e30:	fb08 c116 	mls	r1, r8, r6, ip
 8000e34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e38:	fb06 f10e 	mul.w	r1, r6, lr
 8000e3c:	4299      	cmp	r1, r3
 8000e3e:	d909      	bls.n	8000e54 <__udivmoddi4+0x60>
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e46:	f080 8119 	bcs.w	800107c <__udivmoddi4+0x288>
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	f240 8116 	bls.w	800107c <__udivmoddi4+0x288>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	443b      	add	r3, r7
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e5c:	fb08 3310 	mls	r3, r8, r0, r3
 8000e60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e68:	45a6      	cmp	lr, r4
 8000e6a:	d909      	bls.n	8000e80 <__udivmoddi4+0x8c>
 8000e6c:	193c      	adds	r4, r7, r4
 8000e6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e72:	f080 8105 	bcs.w	8001080 <__udivmoddi4+0x28c>
 8000e76:	45a6      	cmp	lr, r4
 8000e78:	f240 8102 	bls.w	8001080 <__udivmoddi4+0x28c>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	443c      	add	r4, r7
 8000e80:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e84:	eba4 040e 	sub.w	r4, r4, lr
 8000e88:	2600      	movs	r6, #0
 8000e8a:	b11d      	cbz	r5, 8000e94 <__udivmoddi4+0xa0>
 8000e8c:	40d4      	lsrs	r4, r2
 8000e8e:	2300      	movs	r3, #0
 8000e90:	e9c5 4300 	strd	r4, r3, [r5]
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	b902      	cbnz	r2, 8000e9e <__udivmoddi4+0xaa>
 8000e9c:	deff      	udf	#255	; 0xff
 8000e9e:	fab2 f282 	clz	r2, r2
 8000ea2:	2a00      	cmp	r2, #0
 8000ea4:	d150      	bne.n	8000f48 <__udivmoddi4+0x154>
 8000ea6:	1bcb      	subs	r3, r1, r7
 8000ea8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eac:	fa1f f887 	uxth.w	r8, r7
 8000eb0:	2601      	movs	r6, #1
 8000eb2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000eb6:	0c21      	lsrs	r1, r4, #16
 8000eb8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ebc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec0:	fb08 f30c 	mul.w	r3, r8, ip
 8000ec4:	428b      	cmp	r3, r1
 8000ec6:	d907      	bls.n	8000ed8 <__udivmoddi4+0xe4>
 8000ec8:	1879      	adds	r1, r7, r1
 8000eca:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ece:	d202      	bcs.n	8000ed6 <__udivmoddi4+0xe2>
 8000ed0:	428b      	cmp	r3, r1
 8000ed2:	f200 80e9 	bhi.w	80010a8 <__udivmoddi4+0x2b4>
 8000ed6:	4684      	mov	ip, r0
 8000ed8:	1ac9      	subs	r1, r1, r3
 8000eda:	b2a3      	uxth	r3, r4
 8000edc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ee0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ee4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ee8:	fb08 f800 	mul.w	r8, r8, r0
 8000eec:	45a0      	cmp	r8, r4
 8000eee:	d907      	bls.n	8000f00 <__udivmoddi4+0x10c>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ef6:	d202      	bcs.n	8000efe <__udivmoddi4+0x10a>
 8000ef8:	45a0      	cmp	r8, r4
 8000efa:	f200 80d9 	bhi.w	80010b0 <__udivmoddi4+0x2bc>
 8000efe:	4618      	mov	r0, r3
 8000f00:	eba4 0408 	sub.w	r4, r4, r8
 8000f04:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000f08:	e7bf      	b.n	8000e8a <__udivmoddi4+0x96>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d909      	bls.n	8000f22 <__udivmoddi4+0x12e>
 8000f0e:	2d00      	cmp	r5, #0
 8000f10:	f000 80b1 	beq.w	8001076 <__udivmoddi4+0x282>
 8000f14:	2600      	movs	r6, #0
 8000f16:	e9c5 0100 	strd	r0, r1, [r5]
 8000f1a:	4630      	mov	r0, r6
 8000f1c:	4631      	mov	r1, r6
 8000f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f22:	fab3 f683 	clz	r6, r3
 8000f26:	2e00      	cmp	r6, #0
 8000f28:	d14a      	bne.n	8000fc0 <__udivmoddi4+0x1cc>
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	d302      	bcc.n	8000f34 <__udivmoddi4+0x140>
 8000f2e:	4282      	cmp	r2, r0
 8000f30:	f200 80b8 	bhi.w	80010a4 <__udivmoddi4+0x2b0>
 8000f34:	1a84      	subs	r4, r0, r2
 8000f36:	eb61 0103 	sbc.w	r1, r1, r3
 8000f3a:	2001      	movs	r0, #1
 8000f3c:	468c      	mov	ip, r1
 8000f3e:	2d00      	cmp	r5, #0
 8000f40:	d0a8      	beq.n	8000e94 <__udivmoddi4+0xa0>
 8000f42:	e9c5 4c00 	strd	r4, ip, [r5]
 8000f46:	e7a5      	b.n	8000e94 <__udivmoddi4+0xa0>
 8000f48:	f1c2 0320 	rsb	r3, r2, #32
 8000f4c:	fa20 f603 	lsr.w	r6, r0, r3
 8000f50:	4097      	lsls	r7, r2
 8000f52:	fa01 f002 	lsl.w	r0, r1, r2
 8000f56:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f5a:	40d9      	lsrs	r1, r3
 8000f5c:	4330      	orrs	r0, r6
 8000f5e:	0c03      	lsrs	r3, r0, #16
 8000f60:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f64:	fa1f f887 	uxth.w	r8, r7
 8000f68:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f6c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f70:	fb06 f108 	mul.w	r1, r6, r8
 8000f74:	4299      	cmp	r1, r3
 8000f76:	fa04 f402 	lsl.w	r4, r4, r2
 8000f7a:	d909      	bls.n	8000f90 <__udivmoddi4+0x19c>
 8000f7c:	18fb      	adds	r3, r7, r3
 8000f7e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f82:	f080 808d 	bcs.w	80010a0 <__udivmoddi4+0x2ac>
 8000f86:	4299      	cmp	r1, r3
 8000f88:	f240 808a 	bls.w	80010a0 <__udivmoddi4+0x2ac>
 8000f8c:	3e02      	subs	r6, #2
 8000f8e:	443b      	add	r3, r7
 8000f90:	1a5b      	subs	r3, r3, r1
 8000f92:	b281      	uxth	r1, r0
 8000f94:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f98:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f9c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa0:	fb00 f308 	mul.w	r3, r0, r8
 8000fa4:	428b      	cmp	r3, r1
 8000fa6:	d907      	bls.n	8000fb8 <__udivmoddi4+0x1c4>
 8000fa8:	1879      	adds	r1, r7, r1
 8000faa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000fae:	d273      	bcs.n	8001098 <__udivmoddi4+0x2a4>
 8000fb0:	428b      	cmp	r3, r1
 8000fb2:	d971      	bls.n	8001098 <__udivmoddi4+0x2a4>
 8000fb4:	3802      	subs	r0, #2
 8000fb6:	4439      	add	r1, r7
 8000fb8:	1acb      	subs	r3, r1, r3
 8000fba:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000fbe:	e778      	b.n	8000eb2 <__udivmoddi4+0xbe>
 8000fc0:	f1c6 0c20 	rsb	ip, r6, #32
 8000fc4:	fa03 f406 	lsl.w	r4, r3, r6
 8000fc8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000fcc:	431c      	orrs	r4, r3
 8000fce:	fa20 f70c 	lsr.w	r7, r0, ip
 8000fd2:	fa01 f306 	lsl.w	r3, r1, r6
 8000fd6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000fda:	fa21 f10c 	lsr.w	r1, r1, ip
 8000fde:	431f      	orrs	r7, r3
 8000fe0:	0c3b      	lsrs	r3, r7, #16
 8000fe2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe6:	fa1f f884 	uxth.w	r8, r4
 8000fea:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fee:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ff2:	fb09 fa08 	mul.w	sl, r9, r8
 8000ff6:	458a      	cmp	sl, r1
 8000ff8:	fa02 f206 	lsl.w	r2, r2, r6
 8000ffc:	fa00 f306 	lsl.w	r3, r0, r6
 8001000:	d908      	bls.n	8001014 <__udivmoddi4+0x220>
 8001002:	1861      	adds	r1, r4, r1
 8001004:	f109 30ff 	add.w	r0, r9, #4294967295
 8001008:	d248      	bcs.n	800109c <__udivmoddi4+0x2a8>
 800100a:	458a      	cmp	sl, r1
 800100c:	d946      	bls.n	800109c <__udivmoddi4+0x2a8>
 800100e:	f1a9 0902 	sub.w	r9, r9, #2
 8001012:	4421      	add	r1, r4
 8001014:	eba1 010a 	sub.w	r1, r1, sl
 8001018:	b2bf      	uxth	r7, r7
 800101a:	fbb1 f0fe 	udiv	r0, r1, lr
 800101e:	fb0e 1110 	mls	r1, lr, r0, r1
 8001022:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8001026:	fb00 f808 	mul.w	r8, r0, r8
 800102a:	45b8      	cmp	r8, r7
 800102c:	d907      	bls.n	800103e <__udivmoddi4+0x24a>
 800102e:	19e7      	adds	r7, r4, r7
 8001030:	f100 31ff 	add.w	r1, r0, #4294967295
 8001034:	d22e      	bcs.n	8001094 <__udivmoddi4+0x2a0>
 8001036:	45b8      	cmp	r8, r7
 8001038:	d92c      	bls.n	8001094 <__udivmoddi4+0x2a0>
 800103a:	3802      	subs	r0, #2
 800103c:	4427      	add	r7, r4
 800103e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001042:	eba7 0708 	sub.w	r7, r7, r8
 8001046:	fba0 8902 	umull	r8, r9, r0, r2
 800104a:	454f      	cmp	r7, r9
 800104c:	46c6      	mov	lr, r8
 800104e:	4649      	mov	r1, r9
 8001050:	d31a      	bcc.n	8001088 <__udivmoddi4+0x294>
 8001052:	d017      	beq.n	8001084 <__udivmoddi4+0x290>
 8001054:	b15d      	cbz	r5, 800106e <__udivmoddi4+0x27a>
 8001056:	ebb3 020e 	subs.w	r2, r3, lr
 800105a:	eb67 0701 	sbc.w	r7, r7, r1
 800105e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8001062:	40f2      	lsrs	r2, r6
 8001064:	ea4c 0202 	orr.w	r2, ip, r2
 8001068:	40f7      	lsrs	r7, r6
 800106a:	e9c5 2700 	strd	r2, r7, [r5]
 800106e:	2600      	movs	r6, #0
 8001070:	4631      	mov	r1, r6
 8001072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001076:	462e      	mov	r6, r5
 8001078:	4628      	mov	r0, r5
 800107a:	e70b      	b.n	8000e94 <__udivmoddi4+0xa0>
 800107c:	4606      	mov	r6, r0
 800107e:	e6e9      	b.n	8000e54 <__udivmoddi4+0x60>
 8001080:	4618      	mov	r0, r3
 8001082:	e6fd      	b.n	8000e80 <__udivmoddi4+0x8c>
 8001084:	4543      	cmp	r3, r8
 8001086:	d2e5      	bcs.n	8001054 <__udivmoddi4+0x260>
 8001088:	ebb8 0e02 	subs.w	lr, r8, r2
 800108c:	eb69 0104 	sbc.w	r1, r9, r4
 8001090:	3801      	subs	r0, #1
 8001092:	e7df      	b.n	8001054 <__udivmoddi4+0x260>
 8001094:	4608      	mov	r0, r1
 8001096:	e7d2      	b.n	800103e <__udivmoddi4+0x24a>
 8001098:	4660      	mov	r0, ip
 800109a:	e78d      	b.n	8000fb8 <__udivmoddi4+0x1c4>
 800109c:	4681      	mov	r9, r0
 800109e:	e7b9      	b.n	8001014 <__udivmoddi4+0x220>
 80010a0:	4666      	mov	r6, ip
 80010a2:	e775      	b.n	8000f90 <__udivmoddi4+0x19c>
 80010a4:	4630      	mov	r0, r6
 80010a6:	e74a      	b.n	8000f3e <__udivmoddi4+0x14a>
 80010a8:	f1ac 0c02 	sub.w	ip, ip, #2
 80010ac:	4439      	add	r1, r7
 80010ae:	e713      	b.n	8000ed8 <__udivmoddi4+0xe4>
 80010b0:	3802      	subs	r0, #2
 80010b2:	443c      	add	r4, r7
 80010b4:	e724      	b.n	8000f00 <__udivmoddi4+0x10c>
 80010b6:	bf00      	nop

080010b8 <__aeabi_idiv0>:
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop

080010bc <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]

	Uart_SendString(string, pc_uart);
 80010c4:	4903      	ldr	r1, [pc, #12]	; (80010d4 <Send_Uart+0x18>)
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f000 fc5e 	bl	8001988 <Uart_SendString>
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20004094 	.word	0x20004094

080010d8 <Mount_SD>:



FRESULT Mount_SD (const TCHAR* path)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 80010e0:	2201      	movs	r2, #1
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	480b      	ldr	r0, [pc, #44]	; (8001114 <Mount_SD+0x3c>)
 80010e6:	f00e f80f 	bl	800f108 <f_mount>
 80010ea:	4603      	mov	r3, r0
 80010ec:	461a      	mov	r2, r3
 80010ee:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <Mount_SD+0x40>)
 80010f0:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK){
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <Mount_SD+0x40>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d003      	beq.n	8001102 <Mount_SD+0x2a>
		Send_Uart ("ERROR!!! in mounting SD CARD...\r\n");
 80010fa:	4808      	ldr	r0, [pc, #32]	; (800111c <Mount_SD+0x44>)
 80010fc:	f7ff ffde 	bl	80010bc <Send_Uart>
 8001100:	e002      	b.n	8001108 <Mount_SD+0x30>
	}
	else{
		Send_Uart("SD CARD mounted successfully...\r\n");
 8001102:	4807      	ldr	r0, [pc, #28]	; (8001120 <Mount_SD+0x48>)
 8001104:	f7ff ffda 	bl	80010bc <Send_Uart>
	}
	return fresult;
 8001108:	4b03      	ldr	r3, [pc, #12]	; (8001118 <Mount_SD+0x40>)
 800110a:	781b      	ldrb	r3, [r3, #0]
}
 800110c:	4618      	mov	r0, r3
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20000b50 	.word	0x20000b50
 8001118:	20002bc4 	.word	0x20002bc4
 800111c:	08017580 	.word	0x08017580
 8001120:	080175a4 	.word	0x080175a4

08001124 <Unmount_SD>:

FRESULT Unmount_SD (const TCHAR* path)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 800112c:	2201      	movs	r2, #1
 800112e:	6879      	ldr	r1, [r7, #4]
 8001130:	2000      	movs	r0, #0
 8001132:	f00d ffe9 	bl	800f108 <f_mount>
 8001136:	4603      	mov	r3, r0
 8001138:	461a      	mov	r2, r3
 800113a:	4b09      	ldr	r3, [pc, #36]	; (8001160 <Unmount_SD+0x3c>)
 800113c:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK){
 800113e:	4b08      	ldr	r3, [pc, #32]	; (8001160 <Unmount_SD+0x3c>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d103      	bne.n	800114e <Unmount_SD+0x2a>
		Send_Uart ("SD CARD UNMOUNTED successfully...\r\n");
 8001146:	4807      	ldr	r0, [pc, #28]	; (8001164 <Unmount_SD+0x40>)
 8001148:	f7ff ffb8 	bl	80010bc <Send_Uart>
 800114c:	e002      	b.n	8001154 <Unmount_SD+0x30>
	}
	else{
		Send_Uart("ERROR!!! in UNMOUNTING SD CARD\r\n");
 800114e:	4806      	ldr	r0, [pc, #24]	; (8001168 <Unmount_SD+0x44>)
 8001150:	f7ff ffb4 	bl	80010bc <Send_Uart>
	}
	return fresult;
 8001154:	4b02      	ldr	r3, [pc, #8]	; (8001160 <Unmount_SD+0x3c>)
 8001156:	781b      	ldrb	r3, [r3, #0]

}
 8001158:	4618      	mov	r0, r3
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20002bc4 	.word	0x20002bc4
 8001164:	080175c8 	.word	0x080175c8
 8001168:	080175ec 	.word	0x080175ec

0800116c <Format_SD>:
    return fresult;
}

/* Only supports removing files from home directory */
FRESULT Format_SD (void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08e      	sub	sp, #56	; 0x38
 8001170:	af00      	add	r7, sp, #0
    DIR dir;
    char *path = malloc(20*sizeof (char));
 8001172:	2014      	movs	r0, #20
 8001174:	f00f fa80 	bl	8010678 <malloc>
 8001178:	4603      	mov	r3, r0
 800117a:	637b      	str	r3, [r7, #52]	; 0x34
    sprintf (path, "%s","/");
 800117c:	4a28      	ldr	r2, [pc, #160]	; (8001220 <Format_SD+0xb4>)
 800117e:	4929      	ldr	r1, [pc, #164]	; (8001224 <Format_SD+0xb8>)
 8001180:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001182:	f010 fa33 	bl	80115ec <siprintf>

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800118a:	4618      	mov	r0, r3
 800118c:	f00e fd69 	bl	800fc62 <f_opendir>
 8001190:	4603      	mov	r3, r0
 8001192:	461a      	mov	r2, r3
 8001194:	4b24      	ldr	r3, [pc, #144]	; (8001228 <Format_SD+0xbc>)
 8001196:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8001198:	4b23      	ldr	r3, [pc, #140]	; (8001228 <Format_SD+0xbc>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d136      	bne.n	800120e <Format_SD+0xa2>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	4922      	ldr	r1, [pc, #136]	; (800122c <Format_SD+0xc0>)
 80011a4:	4618      	mov	r0, r3
 80011a6:	f00e fdf5 	bl	800fd94 <f_readdir>
 80011aa:	4603      	mov	r3, r0
 80011ac:	461a      	mov	r2, r3
 80011ae:	4b1e      	ldr	r3, [pc, #120]	; (8001228 <Format_SD+0xbc>)
 80011b0:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 80011b2:	4b1d      	ldr	r3, [pc, #116]	; (8001228 <Format_SD+0xbc>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d125      	bne.n	8001206 <Format_SD+0x9a>
 80011ba:	4b1c      	ldr	r3, [pc, #112]	; (800122c <Format_SD+0xc0>)
 80011bc:	7a5b      	ldrb	r3, [r3, #9]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d021      	beq.n	8001206 <Format_SD+0x9a>
            if (fno.fattrib & AM_DIR)     /* It is a directory */
 80011c2:	4b1a      	ldr	r3, [pc, #104]	; (800122c <Format_SD+0xc0>)
 80011c4:	7a1b      	ldrb	r3, [r3, #8]
 80011c6:	f003 0310 	and.w	r3, r3, #16
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d011      	beq.n	80011f2 <Format_SD+0x86>
            {
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 80011ce:	4918      	ldr	r1, [pc, #96]	; (8001230 <Format_SD+0xc4>)
 80011d0:	4818      	ldr	r0, [pc, #96]	; (8001234 <Format_SD+0xc8>)
 80011d2:	f7ff f805 	bl	80001e0 <strcmp>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d012      	beq.n	8001202 <Format_SD+0x96>
            	fresult = f_unlink(fno.fname);
 80011dc:	4814      	ldr	r0, [pc, #80]	; (8001230 <Format_SD+0xc4>)
 80011de:	f00e ff04 	bl	800ffea <f_unlink>
 80011e2:	4603      	mov	r3, r0
 80011e4:	461a      	mov	r2, r3
 80011e6:	4b10      	ldr	r3, [pc, #64]	; (8001228 <Format_SD+0xbc>)
 80011e8:	701a      	strb	r2, [r3, #0]
            	if (fresult == FR_DENIED) continue;
 80011ea:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <Format_SD+0xbc>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	2b07      	cmp	r3, #7
 80011f0:	e7d6      	b.n	80011a0 <Format_SD+0x34>
            }
            else
            {   /* It is a file. */
               fresult = f_unlink(fno.fname);
 80011f2:	480f      	ldr	r0, [pc, #60]	; (8001230 <Format_SD+0xc4>)
 80011f4:	f00e fef9 	bl	800ffea <f_unlink>
 80011f8:	4603      	mov	r3, r0
 80011fa:	461a      	mov	r2, r3
 80011fc:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <Format_SD+0xbc>)
 80011fe:	701a      	strb	r2, [r3, #0]
 8001200:	e7ce      	b.n	80011a0 <Format_SD+0x34>
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 8001202:	bf00      	nop
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 8001204:	e7cc      	b.n	80011a0 <Format_SD+0x34>
            }
        }
        f_closedir(&dir);
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	4618      	mov	r0, r3
 800120a:	f00e fd9d 	bl	800fd48 <f_closedir>
    }
    free(path);
 800120e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001210:	f00f fa3a 	bl	8010688 <free>
    return fresult;
 8001214:	4b04      	ldr	r3, [pc, #16]	; (8001228 <Format_SD+0xbc>)
 8001216:	781b      	ldrb	r3, [r3, #0]
}
 8001218:	4618      	mov	r0, r3
 800121a:	3738      	adds	r7, #56	; 0x38
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	08017640 	.word	0x08017640
 8001224:	08017610 	.word	0x08017610
 8001228:	20002bc4 	.word	0x20002bc4
 800122c:	20000b38 	.word	0x20000b38
 8001230:	20000b41 	.word	0x20000b41
 8001234:	08017614 	.word	0x08017614

08001238 <Update_File>:
	}
    return fresult;
}

FRESULT Update_File (char *name, char *data, uint16_t dataSize)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08a      	sub	sp, #40	; 0x28
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	4613      	mov	r3, r2
 8001244:	80fb      	strh	r3, [r7, #6]
//	}
//
//	else
//	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 8001246:	2232      	movs	r2, #50	; 0x32
 8001248:	68f9      	ldr	r1, [r7, #12]
 800124a:	4844      	ldr	r0, [pc, #272]	; (800135c <Update_File+0x124>)
 800124c:	f00d ffa2 	bl	800f194 <f_open>
 8001250:	4603      	mov	r3, r0
 8001252:	461a      	mov	r2, r3
 8001254:	4b42      	ldr	r3, [pc, #264]	; (8001360 <Update_File+0x128>)
 8001256:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8001258:	4b41      	ldr	r3, [pc, #260]	; (8001360 <Update_File+0x128>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d015      	beq.n	800128c <Update_File+0x54>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001260:	2064      	movs	r0, #100	; 0x64
 8001262:	f00f fa09 	bl	8010678 <malloc>
 8001266:	4603      	mov	r3, r0
 8001268:	617b      	str	r3, [r7, #20]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\r\n", fresult, name);
 800126a:	4b3d      	ldr	r3, [pc, #244]	; (8001360 <Update_File+0x128>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	461a      	mov	r2, r3
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	493c      	ldr	r1, [pc, #240]	; (8001364 <Update_File+0x12c>)
 8001274:	6978      	ldr	r0, [r7, #20]
 8001276:	f010 f9b9 	bl	80115ec <siprintf>
	    	Send_Uart(buf);
 800127a:	6978      	ldr	r0, [r7, #20]
 800127c:	f7ff ff1e 	bl	80010bc <Send_Uart>
	        free(buf);
 8001280:	6978      	ldr	r0, [r7, #20]
 8001282:	f00f fa01 	bl	8010688 <free>
	        return fresult;
 8001286:	4b36      	ldr	r3, [pc, #216]	; (8001360 <Update_File+0x128>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	e062      	b.n	8001352 <Update_File+0x11a>
	    }

	    /* Writing text */
	    fresult = f_write(&fil, data, dataSize, &bw);
 800128c:	88fa      	ldrh	r2, [r7, #6]
 800128e:	4b36      	ldr	r3, [pc, #216]	; (8001368 <Update_File+0x130>)
 8001290:	68b9      	ldr	r1, [r7, #8]
 8001292:	4832      	ldr	r0, [pc, #200]	; (800135c <Update_File+0x124>)
 8001294:	f00e faa9 	bl	800f7ea <f_write>
 8001298:	4603      	mov	r3, r0
 800129a:	461a      	mov	r2, r3
 800129c:	4b30      	ldr	r3, [pc, #192]	; (8001360 <Update_File+0x128>)
 800129e:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80012a0:	4b2f      	ldr	r3, [pc, #188]	; (8001360 <Update_File+0x128>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d013      	beq.n	80012d0 <Update_File+0x98>
	    {
	    	char *buf = malloc(100*sizeof(char));
 80012a8:	2064      	movs	r0, #100	; 0x64
 80012aa:	f00f f9e5 	bl	8010678 <malloc>
 80012ae:	4603      	mov	r3, r0
 80012b0:	623b      	str	r3, [r7, #32]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\r\n", fresult, name);
 80012b2:	4b2b      	ldr	r3, [pc, #172]	; (8001360 <Update_File+0x128>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	461a      	mov	r2, r3
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	492c      	ldr	r1, [pc, #176]	; (800136c <Update_File+0x134>)
 80012bc:	6a38      	ldr	r0, [r7, #32]
 80012be:	f010 f995 	bl	80115ec <siprintf>
	    	Send_Uart(buf);
 80012c2:	6a38      	ldr	r0, [r7, #32]
 80012c4:	f7ff fefa 	bl	80010bc <Send_Uart>
	    	free(buf);
 80012c8:	6a38      	ldr	r0, [r7, #32]
 80012ca:	f00f f9dd 	bl	8010688 <free>
 80012ce:	e00f      	b.n	80012f0 <Update_File+0xb8>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 80012d0:	2064      	movs	r0, #100	; 0x64
 80012d2:	f00f f9d1 	bl	8010678 <malloc>
 80012d6:	4603      	mov	r3, r0
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24
	    	sprintf (buf, "File *%s* UPDATED successfully\r\n", name);
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	4924      	ldr	r1, [pc, #144]	; (8001370 <Update_File+0x138>)
 80012de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80012e0:	f010 f984 	bl	80115ec <siprintf>
	    	Send_Uart(buf);
 80012e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80012e6:	f7ff fee9 	bl	80010bc <Send_Uart>
	    	free(buf);
 80012ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80012ec:	f00f f9cc 	bl	8010688 <free>
	    }

	    /* Close file */
	    fresult = f_close(&fil);
 80012f0:	481a      	ldr	r0, [pc, #104]	; (800135c <Update_File+0x124>)
 80012f2:	f00e fc8c 	bl	800fc0e <f_close>
 80012f6:	4603      	mov	r3, r0
 80012f8:	461a      	mov	r2, r3
 80012fa:	4b19      	ldr	r3, [pc, #100]	; (8001360 <Update_File+0x128>)
 80012fc:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80012fe:	4b18      	ldr	r3, [pc, #96]	; (8001360 <Update_File+0x128>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d013      	beq.n	800132e <Update_File+0xf6>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001306:	2064      	movs	r0, #100	; 0x64
 8001308:	f00f f9b6 	bl	8010678 <malloc>
 800130c:	4603      	mov	r3, r0
 800130e:	61bb      	str	r3, [r7, #24]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\r\n", fresult, name);
 8001310:	4b13      	ldr	r3, [pc, #76]	; (8001360 <Update_File+0x128>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	461a      	mov	r2, r3
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	4916      	ldr	r1, [pc, #88]	; (8001374 <Update_File+0x13c>)
 800131a:	69b8      	ldr	r0, [r7, #24]
 800131c:	f010 f966 	bl	80115ec <siprintf>
	    	Send_Uart(buf);
 8001320:	69b8      	ldr	r0, [r7, #24]
 8001322:	f7ff fecb 	bl	80010bc <Send_Uart>
	    	free(buf);
 8001326:	69b8      	ldr	r0, [r7, #24]
 8001328:	f00f f9ae 	bl	8010688 <free>
 800132c:	e00f      	b.n	800134e <Update_File+0x116>
	    }
	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 800132e:	2064      	movs	r0, #100	; 0x64
 8001330:	f00f f9a2 	bl	8010678 <malloc>
 8001334:	4603      	mov	r3, r0
 8001336:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "File *%s* CLOSED successfully\r\n", name);
 8001338:	68fa      	ldr	r2, [r7, #12]
 800133a:	490f      	ldr	r1, [pc, #60]	; (8001378 <Update_File+0x140>)
 800133c:	69f8      	ldr	r0, [r7, #28]
 800133e:	f010 f955 	bl	80115ec <siprintf>
	    	Send_Uart(buf);
 8001342:	69f8      	ldr	r0, [r7, #28]
 8001344:	f7ff feba 	bl	80010bc <Send_Uart>
	    	free(buf);
 8001348:	69f8      	ldr	r0, [r7, #28]
 800134a:	f00f f99d 	bl	8010688 <free>
	     }
//	}
    return fresult;
 800134e:	4b04      	ldr	r3, [pc, #16]	; (8001360 <Update_File+0x128>)
 8001350:	781b      	ldrb	r3, [r3, #0]
}
 8001352:	4618      	mov	r0, r3
 8001354:	3728      	adds	r7, #40	; 0x28
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20002bcc 	.word	0x20002bcc
 8001360:	20002bc4 	.word	0x20002bc4
 8001364:	08017664 	.word	0x08017664
 8001368:	20002bbc 	.word	0x20002bbc
 800136c:	08017880 	.word	0x08017880
 8001370:	080178a8 	.word	0x080178a8
 8001374:	08017774 	.word	0x08017774
 8001378:	0801779c 	.word	0x0801779c

0800137c <Create_Dir>:
	}
	return fresult;
}

FRESULT Create_Dir (char *name)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
    fresult = f_mkdir(name);
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f00e fedb 	bl	8010140 <f_mkdir>
 800138a:	4603      	mov	r3, r0
 800138c:	461a      	mov	r2, r3
 800138e:	4b18      	ldr	r3, [pc, #96]	; (80013f0 <Create_Dir+0x74>)
 8001390:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8001392:	4b17      	ldr	r3, [pc, #92]	; (80013f0 <Create_Dir+0x74>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d110      	bne.n	80013bc <Create_Dir+0x40>
    {
    	char *buf = malloc(100*sizeof(char));
 800139a:	2064      	movs	r0, #100	; 0x64
 800139c:	f00f f96c 	bl	8010678 <malloc>
 80013a0:	4603      	mov	r3, r0
 80013a2:	60bb      	str	r3, [r7, #8]
    	sprintf (buf, "Dir *%s* has been created successfully\r\n", name);
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	4913      	ldr	r1, [pc, #76]	; (80013f4 <Create_Dir+0x78>)
 80013a8:	68b8      	ldr	r0, [r7, #8]
 80013aa:	f010 f91f 	bl	80115ec <siprintf>
    	Send_Uart (buf);
 80013ae:	68b8      	ldr	r0, [r7, #8]
 80013b0:	f7ff fe84 	bl	80010bc <Send_Uart>
    	free(buf);
 80013b4:	68b8      	ldr	r0, [r7, #8]
 80013b6:	f00f f967 	bl	8010688 <free>
 80013ba:	e012      	b.n	80013e2 <Create_Dir+0x66>
    }
    else
    {
    	char *buf = malloc(100*sizeof(char));
 80013bc:	2064      	movs	r0, #100	; 0x64
 80013be:	f00f f95b 	bl	8010678 <malloc>
 80013c2:	4603      	mov	r3, r0
 80013c4:	60fb      	str	r3, [r7, #12]
    	sprintf (buf, "ERROR No. %d in creating directory *%s*\r\n", fresult,name);
 80013c6:	4b0a      	ldr	r3, [pc, #40]	; (80013f0 <Create_Dir+0x74>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	461a      	mov	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	490a      	ldr	r1, [pc, #40]	; (80013f8 <Create_Dir+0x7c>)
 80013d0:	68f8      	ldr	r0, [r7, #12]
 80013d2:	f010 f90b 	bl	80115ec <siprintf>
    	Send_Uart(buf);
 80013d6:	68f8      	ldr	r0, [r7, #12]
 80013d8:	f7ff fe70 	bl	80010bc <Send_Uart>
    	free(buf);
 80013dc:	68f8      	ldr	r0, [r7, #12]
 80013de:	f00f f953 	bl	8010688 <free>
    }
    return fresult;
 80013e2:	4b03      	ldr	r3, [pc, #12]	; (80013f0 <Create_Dir+0x74>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20002bc4 	.word	0x20002bc4
 80013f4:	08017918 	.word	0x08017918
 80013f8:	08017944 	.word	0x08017944

080013fc <Check_SD_Space>:

FRESULT Check_SD_Space (void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
    /* Check free space */
	fresult = f_getfree("", &fre_clust, &pfs);
 8001402:	4a33      	ldr	r2, [pc, #204]	; (80014d0 <Check_SD_Space+0xd4>)
 8001404:	4933      	ldr	r1, [pc, #204]	; (80014d4 <Check_SD_Space+0xd8>)
 8001406:	4834      	ldr	r0, [pc, #208]	; (80014d8 <Check_SD_Space+0xdc>)
 8001408:	f00e fd3a 	bl	800fe80 <f_getfree>
 800140c:	4603      	mov	r3, r0
 800140e:	461a      	mov	r2, r3
 8001410:	4b32      	ldr	r3, [pc, #200]	; (80014dc <Check_SD_Space+0xe0>)
 8001412:	701a      	strb	r2, [r3, #0]

    total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001414:	4b2e      	ldr	r3, [pc, #184]	; (80014d0 <Check_SD_Space+0xd4>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	699b      	ldr	r3, [r3, #24]
 800141a:	3b02      	subs	r3, #2
 800141c:	4a2c      	ldr	r2, [pc, #176]	; (80014d0 <Check_SD_Space+0xd4>)
 800141e:	6812      	ldr	r2, [r2, #0]
 8001420:	8952      	ldrh	r2, [r2, #10]
 8001422:	fb02 f303 	mul.w	r3, r2, r3
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff f884 	bl	8000534 <__aeabi_ui2d>
 800142c:	f04f 0200 	mov.w	r2, #0
 8001430:	4b2b      	ldr	r3, [pc, #172]	; (80014e0 <Check_SD_Space+0xe4>)
 8001432:	f7ff f8f9 	bl	8000628 <__aeabi_dmul>
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	4610      	mov	r0, r2
 800143c:	4619      	mov	r1, r3
 800143e:	f7ff fbcb 	bl	8000bd8 <__aeabi_d2uiz>
 8001442:	4603      	mov	r3, r0
 8001444:	4a27      	ldr	r2, [pc, #156]	; (80014e4 <Check_SD_Space+0xe8>)
 8001446:	6013      	str	r3, [r2, #0]
    char *buf = malloc(30*sizeof(char));
 8001448:	201e      	movs	r0, #30
 800144a:	f00f f915 	bl	8010678 <malloc>
 800144e:	4603      	mov	r3, r0
 8001450:	607b      	str	r3, [r7, #4]
    sprintf (buf, "SD CARD Total Size: \t%lu\r\n",total);
 8001452:	4b24      	ldr	r3, [pc, #144]	; (80014e4 <Check_SD_Space+0xe8>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	461a      	mov	r2, r3
 8001458:	4923      	ldr	r1, [pc, #140]	; (80014e8 <Check_SD_Space+0xec>)
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f010 f8c6 	bl	80115ec <siprintf>
    Send_Uart(buf);
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f7ff fe2b 	bl	80010bc <Send_Uart>
    free(buf);
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f00f f90e 	bl	8010688 <free>
    free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 800146c:	4b18      	ldr	r3, [pc, #96]	; (80014d0 <Check_SD_Space+0xd4>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	895b      	ldrh	r3, [r3, #10]
 8001472:	461a      	mov	r2, r3
 8001474:	4b17      	ldr	r3, [pc, #92]	; (80014d4 <Check_SD_Space+0xd8>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	fb03 f302 	mul.w	r3, r3, r2
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff f859 	bl	8000534 <__aeabi_ui2d>
 8001482:	f04f 0200 	mov.w	r2, #0
 8001486:	4b16      	ldr	r3, [pc, #88]	; (80014e0 <Check_SD_Space+0xe4>)
 8001488:	f7ff f8ce 	bl	8000628 <__aeabi_dmul>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	4610      	mov	r0, r2
 8001492:	4619      	mov	r1, r3
 8001494:	f7ff fba0 	bl	8000bd8 <__aeabi_d2uiz>
 8001498:	4603      	mov	r3, r0
 800149a:	4a14      	ldr	r2, [pc, #80]	; (80014ec <Check_SD_Space+0xf0>)
 800149c:	6013      	str	r3, [r2, #0]
    buf = malloc(30*sizeof(char));
 800149e:	201e      	movs	r0, #30
 80014a0:	f00f f8ea 	bl	8010678 <malloc>
 80014a4:	4603      	mov	r3, r0
 80014a6:	607b      	str	r3, [r7, #4]
    sprintf (buf, "SD CARD Free Space: \t%lu\r\n",free_space);
 80014a8:	4b10      	ldr	r3, [pc, #64]	; (80014ec <Check_SD_Space+0xf0>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	461a      	mov	r2, r3
 80014ae:	4910      	ldr	r1, [pc, #64]	; (80014f0 <Check_SD_Space+0xf4>)
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f010 f89b 	bl	80115ec <siprintf>
    Send_Uart(buf);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f7ff fe00 	bl	80010bc <Send_Uart>
    free(buf);
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f00f f8e3 	bl	8010688 <free>
    return fresult;
 80014c2:	4b06      	ldr	r3, [pc, #24]	; (80014dc <Check_SD_Space+0xe0>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20002bc0 	.word	0x20002bc0
 80014d4:	20000b34 	.word	0x20000b34
 80014d8:	08017970 	.word	0x08017970
 80014dc:	20002bc4 	.word	0x20002bc4
 80014e0:	3fe00000 	.word	0x3fe00000
 80014e4:	20002bc8 	.word	0x20002bc8
 80014e8:	08017974 	.word	0x08017974
 80014ec:	20002bb8 	.word	0x20002bb8
 80014f0:	08017990 	.word	0x08017990

080014f4 <File_O_Open>:

//Added parts for managing an open file

//opens a file for reading and writing if it exists, if not, creates it and keeps it open for reading and writing
FRESULT File_O_Open (char *name)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]

	fresult = f_open(&open_fil, name, FA_OPEN_ALWAYS|FA_READ|FA_WRITE);
 80014fc:	2213      	movs	r2, #19
 80014fe:	6879      	ldr	r1, [r7, #4]
 8001500:	481a      	ldr	r0, [pc, #104]	; (800156c <File_O_Open+0x78>)
 8001502:	f00d fe47 	bl	800f194 <f_open>
 8001506:	4603      	mov	r3, r0
 8001508:	461a      	mov	r2, r3
 800150a:	4b19      	ldr	r3, [pc, #100]	; (8001570 <File_O_Open+0x7c>)
 800150c:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 800150e:	4b18      	ldr	r3, [pc, #96]	; (8001570 <File_O_Open+0x7c>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d013      	beq.n	800153e <File_O_Open+0x4a>
	{
		char *buf = malloc(100*sizeof(char));
 8001516:	2064      	movs	r0, #100	; 0x64
 8001518:	f00f f8ae 	bl	8010678 <malloc>
 800151c:	4603      	mov	r3, r0
 800151e:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERROR!!! No. %d in opening file *%s*\r\n", fresult, name);
 8001520:	4b13      	ldr	r3, [pc, #76]	; (8001570 <File_O_Open+0x7c>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	461a      	mov	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4912      	ldr	r1, [pc, #72]	; (8001574 <File_O_Open+0x80>)
 800152a:	68b8      	ldr	r0, [r7, #8]
 800152c:	f010 f85e 	bl	80115ec <siprintf>
		Send_Uart(buf);
 8001530:	68b8      	ldr	r0, [r7, #8]
 8001532:	f7ff fdc3 	bl	80010bc <Send_Uart>
		free(buf);
 8001536:	68b8      	ldr	r0, [r7, #8]
 8001538:	f00f f8a6 	bl	8010688 <free>
 800153c:	e00f      	b.n	800155e <File_O_Open+0x6a>
	}
	else
	{
		char *buf = malloc(100*sizeof(char));
 800153e:	2064      	movs	r0, #100	; 0x64
 8001540:	f00f f89a 	bl	8010678 <malloc>
 8001544:	4603      	mov	r3, r0
 8001546:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "File *%s* OPENED successfully\r\n",name);
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	490b      	ldr	r1, [pc, #44]	; (8001578 <File_O_Open+0x84>)
 800154c:	68f8      	ldr	r0, [r7, #12]
 800154e:	f010 f84d 	bl	80115ec <siprintf>
		Send_Uart(buf);
 8001552:	68f8      	ldr	r0, [r7, #12]
 8001554:	f7ff fdb2 	bl	80010bc <Send_Uart>
		free(buf);
 8001558:	68f8      	ldr	r0, [r7, #12]
 800155a:	f00f f895 	bl	8010688 <free>
	}
	return fresult;
 800155e:	4b04      	ldr	r3, [pc, #16]	; (8001570 <File_O_Open+0x7c>)
 8001560:	781b      	ldrb	r3, [r3, #0]
}
 8001562:	4618      	mov	r0, r3
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20001b88 	.word	0x20001b88
 8001570:	20002bc4 	.word	0x20002bc4
 8001574:	08017664 	.word	0x08017664
 8001578:	080179ac 	.word	0x080179ac

0800157c <File_O_Close>:

//closes the file
FRESULT File_O_Close ()
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0

	/* Close file */
	fresult = f_close(&open_fil);
 8001582:	4819      	ldr	r0, [pc, #100]	; (80015e8 <File_O_Close+0x6c>)
 8001584:	f00e fb43 	bl	800fc0e <f_close>
 8001588:	4603      	mov	r3, r0
 800158a:	461a      	mov	r2, r3
 800158c:	4b17      	ldr	r3, [pc, #92]	; (80015ec <File_O_Close+0x70>)
 800158e:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8001590:	4b16      	ldr	r3, [pc, #88]	; (80015ec <File_O_Close+0x70>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d012      	beq.n	80015be <File_O_Close+0x42>
	{
		char *buf = malloc(100*sizeof(char));
 8001598:	2064      	movs	r0, #100	; 0x64
 800159a:	f00f f86d 	bl	8010678 <malloc>
 800159e:	4603      	mov	r3, r0
 80015a0:	603b      	str	r3, [r7, #0]
		sprintf (buf, "ERROR!!! No. %d in closing file\r\n", fresult);
 80015a2:	4b12      	ldr	r3, [pc, #72]	; (80015ec <File_O_Close+0x70>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	461a      	mov	r2, r3
 80015a8:	4911      	ldr	r1, [pc, #68]	; (80015f0 <File_O_Close+0x74>)
 80015aa:	6838      	ldr	r0, [r7, #0]
 80015ac:	f010 f81e 	bl	80115ec <siprintf>
		Send_Uart(buf);
 80015b0:	6838      	ldr	r0, [r7, #0]
 80015b2:	f7ff fd83 	bl	80010bc <Send_Uart>
		free(buf);
 80015b6:	6838      	ldr	r0, [r7, #0]
 80015b8:	f00f f866 	bl	8010688 <free>
 80015bc:	e00e      	b.n	80015dc <File_O_Close+0x60>
	}
	else
	{
		char *buf = malloc(100*sizeof(char));
 80015be:	2064      	movs	r0, #100	; 0x64
 80015c0:	f00f f85a 	bl	8010678 <malloc>
 80015c4:	4603      	mov	r3, r0
 80015c6:	607b      	str	r3, [r7, #4]
		sprintf (buf, "File CLOSED successfully\r\n");
 80015c8:	490a      	ldr	r1, [pc, #40]	; (80015f4 <File_O_Close+0x78>)
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f010 f80e 	bl	80115ec <siprintf>
		Send_Uart(buf);
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f7ff fd73 	bl	80010bc <Send_Uart>
		free(buf);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f00f f856 	bl	8010688 <free>
	 }
	return fresult;
 80015dc:	4b03      	ldr	r3, [pc, #12]	; (80015ec <File_O_Close+0x70>)
 80015de:	781b      	ldrb	r3, [r3, #0]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20001b88 	.word	0x20001b88
 80015ec:	20002bc4 	.word	0x20002bc4
 80015f0:	080179cc 	.word	0x080179cc
 80015f4:	080179f0 	.word	0x080179f0

080015f8 <File_O_Print>:

//prints data to the open file
FRESULT File_O_Print (char *data)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]

	/* Writing text */
	fresult = f_write(&open_fil, data, strlen (data), &bw);
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f7fe fdf7 	bl	80001f4 <strlen>
 8001606:	4602      	mov	r2, r0
 8001608:	4b12      	ldr	r3, [pc, #72]	; (8001654 <File_O_Print+0x5c>)
 800160a:	6879      	ldr	r1, [r7, #4]
 800160c:	4812      	ldr	r0, [pc, #72]	; (8001658 <File_O_Print+0x60>)
 800160e:	f00e f8ec 	bl	800f7ea <f_write>
 8001612:	4603      	mov	r3, r0
 8001614:	461a      	mov	r2, r3
 8001616:	4b11      	ldr	r3, [pc, #68]	; (800165c <File_O_Print+0x64>)
 8001618:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 800161a:	4b10      	ldr	r3, [pc, #64]	; (800165c <File_O_Print+0x64>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d011      	beq.n	8001646 <File_O_Print+0x4e>
	{
		char *buf = malloc(100*sizeof(char));
 8001622:	2064      	movs	r0, #100	; 0x64
 8001624:	f00f f828 	bl	8010678 <malloc>
 8001628:	4603      	mov	r3, r0
 800162a:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! No. %d in writing file\r\n", fresult);
 800162c:	4b0b      	ldr	r3, [pc, #44]	; (800165c <File_O_Print+0x64>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	461a      	mov	r2, r3
 8001632:	490b      	ldr	r1, [pc, #44]	; (8001660 <File_O_Print+0x68>)
 8001634:	68f8      	ldr	r0, [r7, #12]
 8001636:	f00f ffd9 	bl	80115ec <siprintf>
		Send_Uart(buf);
 800163a:	68f8      	ldr	r0, [r7, #12]
 800163c:	f7ff fd3e 	bl	80010bc <Send_Uart>
		free(buf);
 8001640:	68f8      	ldr	r0, [r7, #12]
 8001642:	f00f f821 	bl	8010688 <free>
//		char *buf = malloc(100*sizeof(char));
//		sprintf (buf, "UPDATED successfully\r\n");
//		Send_Uart(buf);
//		free(buf);
	}
	return fresult;
 8001646:	4b05      	ldr	r3, [pc, #20]	; (800165c <File_O_Print+0x64>)
 8001648:	781b      	ldrb	r3, [r3, #0]

}
 800164a:	4618      	mov	r0, r3
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20002bbc 	.word	0x20002bbc
 8001658:	20001b88 	.word	0x20001b88
 800165c:	20002bc4 	.word	0x20002bc4
 8001660:	08017a0c 	.word	0x08017a0c

08001664 <File_O_Read_Line>:

//reads a line from the open file, returns 0 if there is nothing more to read
TCHAR* File_O_Read_Line (char *buffer)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]

	/* Reading line text */
	TCHAR* result;
	result = f_gets (
 800166c:	4a05      	ldr	r2, [pc, #20]	; (8001684 <File_O_Read_Line+0x20>)
 800166e:	21c8      	movs	r1, #200	; 0xc8
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f00e fe72 	bl	801035a <f_gets>
 8001676:	60f8      	str	r0, [r7, #12]
	 buffer, /* [OUT] Read buffer */
	  200,     /* [IN] Size of the read buffer */
	  &open_fil      /* [IN] File object */
	);

	return result;
 8001678:	68fb      	ldr	r3, [r7, #12]

}
 800167a:	4618      	mov	r0, r3
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20001b88 	.word	0x20001b88

08001688 <Ringbuf_Init>:

void store_char (unsigned char c, ring_buffer *buffer);


void Ringbuf_Init(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  _rx_buffer1 = &rx_buffer1;
 800168c:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <Ringbuf_Init+0x68>)
 800168e:	4a19      	ldr	r2, [pc, #100]	; (80016f4 <Ringbuf_Init+0x6c>)
 8001690:	601a      	str	r2, [r3, #0]
  _tx_buffer1 = &tx_buffer1;
 8001692:	4b19      	ldr	r3, [pc, #100]	; (80016f8 <Ringbuf_Init+0x70>)
 8001694:	4a19      	ldr	r2, [pc, #100]	; (80016fc <Ringbuf_Init+0x74>)
 8001696:	601a      	str	r2, [r3, #0]
  _rx_buffer2 = &rx_buffer2;
 8001698:	4b19      	ldr	r3, [pc, #100]	; (8001700 <Ringbuf_Init+0x78>)
 800169a:	4a1a      	ldr	r2, [pc, #104]	; (8001704 <Ringbuf_Init+0x7c>)
 800169c:	601a      	str	r2, [r3, #0]
  _tx_buffer2 = &tx_buffer2;
 800169e:	4b1a      	ldr	r3, [pc, #104]	; (8001708 <Ringbuf_Init+0x80>)
 80016a0:	4a1a      	ldr	r2, [pc, #104]	; (800170c <Ringbuf_Init+0x84>)
 80016a2:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(device_uart, UART_IT_ERR);
 80016a4:	4b1a      	ldr	r3, [pc, #104]	; (8001710 <Ringbuf_Init+0x88>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	695a      	ldr	r2, [r3, #20]
 80016aa:	4b19      	ldr	r3, [pc, #100]	; (8001710 <Ringbuf_Init+0x88>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f042 0201 	orr.w	r2, r2, #1
 80016b2:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(pc_uart, UART_IT_ERR);
 80016b4:	4b17      	ldr	r3, [pc, #92]	; (8001714 <Ringbuf_Init+0x8c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	695a      	ldr	r2, [r3, #20]
 80016ba:	4b16      	ldr	r3, [pc, #88]	; (8001714 <Ringbuf_Init+0x8c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f042 0201 	orr.w	r2, r2, #1
 80016c2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(device_uart, UART_IT_RXNE);
 80016c4:	4b12      	ldr	r3, [pc, #72]	; (8001710 <Ringbuf_Init+0x88>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	68da      	ldr	r2, [r3, #12]
 80016ca:	4b11      	ldr	r3, [pc, #68]	; (8001710 <Ringbuf_Init+0x88>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f042 0220 	orr.w	r2, r2, #32
 80016d2:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(pc_uart, UART_IT_RXNE);
 80016d4:	4b0f      	ldr	r3, [pc, #60]	; (8001714 <Ringbuf_Init+0x8c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	68da      	ldr	r2, [r3, #12]
 80016da:	4b0e      	ldr	r3, [pc, #56]	; (8001714 <Ringbuf_Init+0x8c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f042 0220 	orr.w	r2, r2, #32
 80016e2:	60da      	str	r2, [r3, #12]
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	20003c00 	.word	0x20003c00
 80016f4:	2000027c 	.word	0x2000027c
 80016f8:	20003c04 	.word	0x20003c04
 80016fc:	20000484 	.word	0x20000484
 8001700:	20003c08 	.word	0x20003c08
 8001704:	2000068c 	.word	0x2000068c
 8001708:	20003bfc 	.word	0x20003bfc
 800170c:	20000894 	.word	0x20000894
 8001710:	20003de8 	.word	0x20003de8
 8001714:	20004094 	.word	0x20004094

08001718 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	6039      	str	r1, [r7, #0]
 8001722:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800172a:	3301      	adds	r3, #1
 800172c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001730:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	429a      	cmp	r2, r3
 800173c:	d009      	beq.n	8001752 <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	79f9      	ldrb	r1, [r7, #7]
 8001748:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 8001752:	bf00      	nop
 8001754:	3714      	adds	r7, #20
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
	...

08001760 <Uart_read>:

	return -1;
}

int Uart_read(UART_HandleTypeDef *uart)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4a29      	ldr	r2, [pc, #164]	; (8001810 <Uart_read+0xb0>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d121      	bne.n	80017b4 <Uart_read+0x54>
	{
		  // if the head isn't ahead of the tail, we don't have any characters
		  if(_rx_buffer1->head == _rx_buffer1->tail)
 8001770:	4b28      	ldr	r3, [pc, #160]	; (8001814 <Uart_read+0xb4>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001778:	4b26      	ldr	r3, [pc, #152]	; (8001814 <Uart_read+0xb4>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001780:	429a      	cmp	r2, r3
 8001782:	d102      	bne.n	800178a <Uart_read+0x2a>
		  {
		    return -1;
 8001784:	f04f 33ff 	mov.w	r3, #4294967295
 8001788:	e03c      	b.n	8001804 <Uart_read+0xa4>
		  }
		  else
		  {
		    unsigned char c = _rx_buffer1->buffer[_rx_buffer1->tail];
 800178a:	4b22      	ldr	r3, [pc, #136]	; (8001814 <Uart_read+0xb4>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	4b21      	ldr	r3, [pc, #132]	; (8001814 <Uart_read+0xb4>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001796:	5cd3      	ldrb	r3, [r2, r3]
 8001798:	73bb      	strb	r3, [r7, #14]
		    _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 800179a:	4b1e      	ldr	r3, [pc, #120]	; (8001814 <Uart_read+0xb4>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80017a2:	1c5a      	adds	r2, r3, #1
 80017a4:	4b1b      	ldr	r3, [pc, #108]	; (8001814 <Uart_read+0xb4>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80017ac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		    return c;
 80017b0:	7bbb      	ldrb	r3, [r7, #14]
 80017b2:	e027      	b.n	8001804 <Uart_read+0xa4>
		  }
	}

	else if (uart == pc_uart)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4a18      	ldr	r2, [pc, #96]	; (8001818 <Uart_read+0xb8>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d121      	bne.n	8001800 <Uart_read+0xa0>
	{
		  // if the head isn't ahead of the tail, we don't have any characters
		  if(_rx_buffer2->head == _rx_buffer2->tail)
 80017bc:	4b17      	ldr	r3, [pc, #92]	; (800181c <Uart_read+0xbc>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80017c4:	4b15      	ldr	r3, [pc, #84]	; (800181c <Uart_read+0xbc>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d102      	bne.n	80017d6 <Uart_read+0x76>
		  {
		    return -1;
 80017d0:	f04f 33ff 	mov.w	r3, #4294967295
 80017d4:	e016      	b.n	8001804 <Uart_read+0xa4>
		  }
		  else
		  {
		    unsigned char c = _rx_buffer2->buffer[_rx_buffer2->tail];
 80017d6:	4b11      	ldr	r3, [pc, #68]	; (800181c <Uart_read+0xbc>)
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	4b10      	ldr	r3, [pc, #64]	; (800181c <Uart_read+0xbc>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80017e2:	5cd3      	ldrb	r3, [r2, r3]
 80017e4:	73fb      	strb	r3, [r7, #15]
		    _rx_buffer2->tail = (unsigned int)(_rx_buffer2->tail + 1) % UART_BUFFER_SIZE;
 80017e6:	4b0d      	ldr	r3, [pc, #52]	; (800181c <Uart_read+0xbc>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80017ee:	1c5a      	adds	r2, r3, #1
 80017f0:	4b0a      	ldr	r3, [pc, #40]	; (800181c <Uart_read+0xbc>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80017f8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		    return c;
 80017fc:	7bfb      	ldrb	r3, [r7, #15]
 80017fe:	e001      	b.n	8001804 <Uart_read+0xa4>
		  }
	}

	else return -1;
 8001800:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001804:	4618      	mov	r0, r3
 8001806:	3714      	adds	r7, #20
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	20003de8 	.word	0x20003de8
 8001814:	20003c00 	.word	0x20003c00
 8001818:	20004094 	.word	0x20004094
 800181c:	20003c08 	.word	0x20003c08

08001820 <Uart_write>:

void Uart_write(int c, UART_HandleTypeDef *uart)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
	if (c>=0)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2b00      	cmp	r3, #0
 800182e:	db5f      	blt.n	80018f0 <Uart_write+0xd0>
	{
		if (uart == device_uart){
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	4a31      	ldr	r2, [pc, #196]	; (80018f8 <Uart_write+0xd8>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d126      	bne.n	8001886 <Uart_write+0x66>
		int i = (_tx_buffer1->head + 1) % UART_BUFFER_SIZE;
 8001838:	4b30      	ldr	r3, [pc, #192]	; (80018fc <Uart_write+0xdc>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001840:	3301      	adds	r3, #1
 8001842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001846:	613b      	str	r3, [r7, #16]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer1->tail);
 8001848:	bf00      	nop
 800184a:	4b2c      	ldr	r3, [pc, #176]	; (80018fc <Uart_write+0xdc>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	429a      	cmp	r2, r3
 8001856:	d0f8      	beq.n	800184a <Uart_write+0x2a>

		_tx_buffer1->buffer[_tx_buffer1->head] = (uint8_t)c;
 8001858:	4b28      	ldr	r3, [pc, #160]	; (80018fc <Uart_write+0xdc>)
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	4b27      	ldr	r3, [pc, #156]	; (80018fc <Uart_write+0xdc>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001864:	6879      	ldr	r1, [r7, #4]
 8001866:	b2c9      	uxtb	r1, r1
 8001868:	54d1      	strb	r1, [r2, r3]
		_tx_buffer1->head = i;
 800186a:	4b24      	ldr	r3, [pc, #144]	; (80018fc <Uart_write+0xdc>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

		__HAL_UART_ENABLE_IT(device_uart, UART_IT_TXE); // Enable UART transmission interrupt
 8001874:	4b20      	ldr	r3, [pc, #128]	; (80018f8 <Uart_write+0xd8>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	68da      	ldr	r2, [r3, #12]
 800187a:	4b1f      	ldr	r3, [pc, #124]	; (80018f8 <Uart_write+0xd8>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001882:	60da      	str	r2, [r3, #12]
			_tx_buffer2->head = i;

			__HAL_UART_ENABLE_IT(pc_uart, UART_IT_TXE); // Enable UART transmission interrupt
			}
	}
}
 8001884:	e034      	b.n	80018f0 <Uart_write+0xd0>
		else if (uart == pc_uart){
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	4a1d      	ldr	r2, [pc, #116]	; (8001900 <Uart_write+0xe0>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d130      	bne.n	80018f0 <Uart_write+0xd0>
			buf[0] = c;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	b2db      	uxtb	r3, r3
 8001892:	733b      	strb	r3, [r7, #12]
			buf[1] = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	737b      	strb	r3, [r7, #13]
			Log(buf, 1);
 8001898:	f107 030c 	add.w	r3, r7, #12
 800189c:	2101      	movs	r1, #1
 800189e:	4618      	mov	r0, r3
 80018a0:	f002 fcbc 	bl	800421c <Log>
			int i = (_tx_buffer2->head + 1) % UART_BUFFER_SIZE;
 80018a4:	4b17      	ldr	r3, [pc, #92]	; (8001904 <Uart_write+0xe4>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80018ac:	3301      	adds	r3, #1
 80018ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018b2:	617b      	str	r3, [r7, #20]
			while (i == _tx_buffer2->tail);
 80018b4:	bf00      	nop
 80018b6:	4b13      	ldr	r3, [pc, #76]	; (8001904 <Uart_write+0xe4>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d0f8      	beq.n	80018b6 <Uart_write+0x96>
			_tx_buffer2->buffer[_tx_buffer2->head] = (uint8_t)c;
 80018c4:	4b0f      	ldr	r3, [pc, #60]	; (8001904 <Uart_write+0xe4>)
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	4b0e      	ldr	r3, [pc, #56]	; (8001904 <Uart_write+0xe4>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80018d0:	6879      	ldr	r1, [r7, #4]
 80018d2:	b2c9      	uxtb	r1, r1
 80018d4:	54d1      	strb	r1, [r2, r3]
			_tx_buffer2->head = i;
 80018d6:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <Uart_write+0xe4>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	697a      	ldr	r2, [r7, #20]
 80018dc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			__HAL_UART_ENABLE_IT(pc_uart, UART_IT_TXE); // Enable UART transmission interrupt
 80018e0:	4b07      	ldr	r3, [pc, #28]	; (8001900 <Uart_write+0xe0>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	68da      	ldr	r2, [r3, #12]
 80018e6:	4b06      	ldr	r3, [pc, #24]	; (8001900 <Uart_write+0xe0>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018ee:	60da      	str	r2, [r3, #12]
}
 80018f0:	bf00      	nop
 80018f2:	3718      	adds	r7, #24
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	20003de8 	.word	0x20003de8
 80018fc:	20003c04 	.word	0x20003c04
 8001900:	20004094 	.word	0x20004094
 8001904:	20003bfc 	.word	0x20003bfc

08001908 <IsDataAvailable>:

int IsDataAvailable(UART_HandleTypeDef *uart)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
	if (uart == device_uart) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer1->head - _rx_buffer1->tail) % UART_BUFFER_SIZE;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4a19      	ldr	r2, [pc, #100]	; (8001978 <IsDataAvailable+0x70>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d111      	bne.n	800193c <IsDataAvailable+0x34>
 8001918:	4b18      	ldr	r3, [pc, #96]	; (800197c <IsDataAvailable+0x74>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001920:	b29a      	uxth	r2, r3
 8001922:	4b16      	ldr	r3, [pc, #88]	; (800197c <IsDataAvailable+0x74>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800192a:	b29b      	uxth	r3, r3
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	b29b      	uxth	r3, r3
 8001930:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001934:	b29b      	uxth	r3, r3
 8001936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800193a:	e017      	b.n	800196c <IsDataAvailable+0x64>
	else if (uart == pc_uart) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer2->head - _rx_buffer2->tail) % UART_BUFFER_SIZE;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4a10      	ldr	r2, [pc, #64]	; (8001980 <IsDataAvailable+0x78>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d111      	bne.n	8001968 <IsDataAvailable+0x60>
 8001944:	4b0f      	ldr	r3, [pc, #60]	; (8001984 <IsDataAvailable+0x7c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800194c:	b29a      	uxth	r2, r3
 800194e:	4b0d      	ldr	r3, [pc, #52]	; (8001984 <IsDataAvailable+0x7c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001956:	b29b      	uxth	r3, r3
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	b29b      	uxth	r3, r3
 800195c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001960:	b29b      	uxth	r3, r3
 8001962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001966:	e001      	b.n	800196c <IsDataAvailable+0x64>
	return -1;
 8001968:	f04f 33ff 	mov.w	r3, #4294967295
}
 800196c:	4618      	mov	r0, r3
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	20003de8 	.word	0x20003de8
 800197c:	20003c00 	.word	0x20003c00
 8001980:	20004094 	.word	0x20004094
 8001984:	20003c08 	.word	0x20003c08

08001988 <Uart_SendString>:
	}
	return 1;
}

void Uart_SendString (const char *s, UART_HandleTypeDef *uart)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
	while(*s!='\0') Uart_write(*s++, uart);
 8001992:	e007      	b.n	80019a4 <Uart_SendString+0x1c>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	1c5a      	adds	r2, r3, #1
 8001998:	607a      	str	r2, [r7, #4]
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	6839      	ldr	r1, [r7, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff ff3e 	bl	8001820 <Uart_write>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1f3      	bne.n	8001994 <Uart_SendString+0xc>
}
 80019ac:	bf00      	nop
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
	...

080019b8 <Uart_isr>:
	if (so_far == len) return 1;
	else return -1;
}

void Uart_isr (UART_HandleTypeDef *huart)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	f003 0320 	and.w	r3, r3, #32
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d023      	beq.n	8001a22 <Uart_isr+0x6a>
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	f003 0320 	and.w	r3, r3, #32
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d01e      	beq.n	8001a22 <Uart_isr+0x6a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	73fb      	strb	r3, [r7, #15]
        if (huart == device_uart)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a3f      	ldr	r2, [pc, #252]	; (8001af4 <Uart_isr+0x13c>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d107      	bne.n	8001a0a <Uart_isr+0x52>
        {
        	store_char (c, _rx_buffer1);  // store data in buffer
 80019fa:	4b3f      	ldr	r3, [pc, #252]	; (8001af8 <Uart_isr+0x140>)
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	7bfb      	ldrb	r3, [r7, #15]
 8001a00:	4611      	mov	r1, r2
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff fe88 	bl	8001718 <store_char>
        else if (huart == pc_uart)
        {
           	store_char (c, _rx_buffer2);  // store data in buffer
        }

        return;
 8001a08:	e06d      	b.n	8001ae6 <Uart_isr+0x12e>
        else if (huart == pc_uart)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a3b      	ldr	r2, [pc, #236]	; (8001afc <Uart_isr+0x144>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d169      	bne.n	8001ae6 <Uart_isr+0x12e>
           	store_char (c, _rx_buffer2);  // store data in buffer
 8001a12:	4b3b      	ldr	r3, [pc, #236]	; (8001b00 <Uart_isr+0x148>)
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	7bfb      	ldrb	r3, [r7, #15]
 8001a18:	4611      	mov	r1, r2
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff fe7c 	bl	8001718 <store_char>
        return;
 8001a20:	e061      	b.n	8001ae6 <Uart_isr+0x12e>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d05f      	beq.n	8001aec <Uart_isr+0x134>
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d05a      	beq.n	8001aec <Uart_isr+0x134>
    {
    	if (huart == device_uart){
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a2e      	ldr	r2, [pc, #184]	; (8001af4 <Uart_isr+0x13c>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d127      	bne.n	8001a8e <Uart_isr+0xd6>
    	if(tx_buffer1.head == tx_buffer1.tail)
 8001a3e:	4b31      	ldr	r3, [pc, #196]	; (8001b04 <Uart_isr+0x14c>)
 8001a40:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001a44:	4b2f      	ldr	r3, [pc, #188]	; (8001b04 <Uart_isr+0x14c>)
 8001a46:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d108      	bne.n	8001a60 <Uart_isr+0xa8>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	68da      	ldr	r2, [r3, #12]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a5c:	60da      	str	r2, [r3, #12]
        	      huart->Instance->SR;
        	      huart->Instance->DR = c;

        	    }
        	}
    	return;
 8001a5e:	e044      	b.n	8001aea <Uart_isr+0x132>
    	      unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
 8001a60:	4b28      	ldr	r3, [pc, #160]	; (8001b04 <Uart_isr+0x14c>)
 8001a62:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001a66:	4a27      	ldr	r2, [pc, #156]	; (8001b04 <Uart_isr+0x14c>)
 8001a68:	5cd3      	ldrb	r3, [r2, r3]
 8001a6a:	737b      	strb	r3, [r7, #13]
    	      tx_buffer1.tail = (tx_buffer1.tail + 1) % UART_BUFFER_SIZE;
 8001a6c:	4b25      	ldr	r3, [pc, #148]	; (8001b04 <Uart_isr+0x14c>)
 8001a6e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001a72:	3301      	adds	r3, #1
 8001a74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a78:	4a22      	ldr	r2, [pc, #136]	; (8001b04 <Uart_isr+0x14c>)
 8001a7a:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      huart->Instance->SR;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	7b7a      	ldrb	r2, [r7, #13]
 8001a8a:	605a      	str	r2, [r3, #4]
    	return;
 8001a8c:	e02d      	b.n	8001aea <Uart_isr+0x132>
    	else if (huart == pc_uart){
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a1a      	ldr	r2, [pc, #104]	; (8001afc <Uart_isr+0x144>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d129      	bne.n	8001aea <Uart_isr+0x132>
        	if(tx_buffer2.head == tx_buffer2.tail)
 8001a96:	4b1c      	ldr	r3, [pc, #112]	; (8001b08 <Uart_isr+0x150>)
 8001a98:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001a9c:	4b1a      	ldr	r3, [pc, #104]	; (8001b08 <Uart_isr+0x150>)
 8001a9e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d108      	bne.n	8001ab8 <Uart_isr+0x100>
        	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	68da      	ldr	r2, [r3, #12]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ab4:	60da      	str	r2, [r3, #12]
    	return;
 8001ab6:	e018      	b.n	8001aea <Uart_isr+0x132>
        	      unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
 8001ab8:	4b13      	ldr	r3, [pc, #76]	; (8001b08 <Uart_isr+0x150>)
 8001aba:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001abe:	4a12      	ldr	r2, [pc, #72]	; (8001b08 <Uart_isr+0x150>)
 8001ac0:	5cd3      	ldrb	r3, [r2, r3]
 8001ac2:	73bb      	strb	r3, [r7, #14]
        	      tx_buffer2.tail = (tx_buffer2.tail + 1) % UART_BUFFER_SIZE;
 8001ac4:	4b10      	ldr	r3, [pc, #64]	; (8001b08 <Uart_isr+0x150>)
 8001ac6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001aca:	3301      	adds	r3, #1
 8001acc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ad0:	4a0d      	ldr	r2, [pc, #52]	; (8001b08 <Uart_isr+0x150>)
 8001ad2:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
        	      huart->Instance->SR;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
        	      huart->Instance->DR = c;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	7bba      	ldrb	r2, [r7, #14]
 8001ae2:	605a      	str	r2, [r3, #4]
    	return;
 8001ae4:	e001      	b.n	8001aea <Uart_isr+0x132>
        return;
 8001ae6:	bf00      	nop
 8001ae8:	e000      	b.n	8001aec <Uart_isr+0x134>
    	return;
 8001aea:	bf00      	nop
    }
}
 8001aec:	3718      	adds	r7, #24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20003de8 	.word	0x20003de8
 8001af8:	20003c00 	.word	0x20003c00
 8001afc:	20004094 	.word	0x20004094
 8001b00:	20003c08 	.word	0x20003c08
 8001b04:	20000484 	.word	0x20000484
 8001b08:	20000894 	.word	0x20000894

08001b0c <DHT22_Start>:
uint16_t sum, rh, temp;

uint8_t presence = 0;

void DHT22_Start (void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
	Set_Pin_Output(DHT22_PORT, DHT22_PIN); // set the pin as output
 8001b10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b14:	480e      	ldr	r0, [pc, #56]	; (8001b50 <DHT22_Start+0x44>)
 8001b16:	f000 f8a1 	bl	8001c5c <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 0);   // pull the pin low
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b20:	480b      	ldr	r0, [pc, #44]	; (8001b50 <DHT22_Start+0x44>)
 8001b22:	f006 f8d1 	bl	8007cc8 <HAL_GPIO_WritePin>
	delay_us(1200);   // wait for > 1ms
 8001b26:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8001b2a:	f001 f9d3 	bl	8002ed4 <delay_us>

	HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 1);   // pull the pin high
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b34:	4806      	ldr	r0, [pc, #24]	; (8001b50 <DHT22_Start+0x44>)
 8001b36:	f006 f8c7 	bl	8007cc8 <HAL_GPIO_WritePin>
	delay_us(20);   // wait for 30us
 8001b3a:	2014      	movs	r0, #20
 8001b3c:	f001 f9ca 	bl	8002ed4 <delay_us>

	Set_Pin_Input(DHT22_PORT, DHT22_PIN);   // set as input
 8001b40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b44:	4802      	ldr	r0, [pc, #8]	; (8001b50 <DHT22_Start+0x44>)
 8001b46:	f000 f8a7 	bl	8001c98 <Set_Pin_Input>
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40020400 	.word	0x40020400

08001b54 <DHT22_Check_Response>:

uint8_t DHT22_Check_Response (void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
	Set_Pin_Input(DHT22_PORT, DHT22_PIN);   // set as input
 8001b5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b5e:	4818      	ldr	r0, [pc, #96]	; (8001bc0 <DHT22_Check_Response+0x6c>)
 8001b60:	f000 f89a 	bl	8001c98 <Set_Pin_Input>
	uint8_t Response = 0;
 8001b64:	2300      	movs	r3, #0
 8001b66:	71fb      	strb	r3, [r7, #7]
	delay_us(40);  // wait for 40us
 8001b68:	2028      	movs	r0, #40	; 0x28
 8001b6a:	f001 f9b3 	bl	8002ed4 <delay_us>
	if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))) // if the pin is low
 8001b6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b72:	4813      	ldr	r0, [pc, #76]	; (8001bc0 <DHT22_Check_Response+0x6c>)
 8001b74:	f006 f890 	bl	8007c98 <HAL_GPIO_ReadPin>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d11b      	bne.n	8001bb6 <DHT22_Check_Response+0x62>
	{
		delay_us(80);   // wait for 80us
 8001b7e:	2050      	movs	r0, #80	; 0x50
 8001b80:	f001 f9a8 	bl	8002ed4 <delay_us>

		if ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))){
 8001b84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b88:	480d      	ldr	r0, [pc, #52]	; (8001bc0 <DHT22_Check_Response+0x6c>)
 8001b8a:	f006 f885 	bl	8007c98 <HAL_GPIO_ReadPin>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d00c      	beq.n	8001bae <DHT22_Check_Response+0x5a>
			Response = 1;  // if the pin is high, response is ok
 8001b94:	2301      	movs	r3, #1
 8001b96:	71fb      	strb	r3, [r7, #7]
			while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)));   // wait for the pin to go low
 8001b98:	bf00      	nop
 8001b9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b9e:	4808      	ldr	r0, [pc, #32]	; (8001bc0 <DHT22_Check_Response+0x6c>)
 8001ba0:	f006 f87a 	bl	8007c98 <HAL_GPIO_ReadPin>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1f7      	bne.n	8001b9a <DHT22_Check_Response+0x46>
			return Response;
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	e004      	b.n	8001bb8 <DHT22_Check_Response+0x64>
		}
		else {
			Response = -1;
 8001bae:	23ff      	movs	r3, #255	; 0xff
 8001bb0:	71fb      	strb	r3, [r7, #7]
			return Response;
 8001bb2:	79fb      	ldrb	r3, [r7, #7]
 8001bb4:	e000      	b.n	8001bb8 <DHT22_Check_Response+0x64>
		}
	}


	return Response;
 8001bb6:	79fb      	ldrb	r3, [r7, #7]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	40020400 	.word	0x40020400

08001bc4 <DHT22_Read>:

uint8_t DHT22_Read (void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8001bca:	2300      	movs	r3, #0
 8001bcc:	71bb      	strb	r3, [r7, #6]
 8001bce:	e03a      	b.n	8001c46 <DHT22_Read+0x82>
	{
		while (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)));   // wait for the pin to go high
 8001bd0:	bf00      	nop
 8001bd2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bd6:	4820      	ldr	r0, [pc, #128]	; (8001c58 <DHT22_Read+0x94>)
 8001bd8:	f006 f85e 	bl	8007c98 <HAL_GPIO_ReadPin>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d0f7      	beq.n	8001bd2 <DHT22_Read+0xe>
		delay_us(40);   // wait for 40 us
 8001be2:	2028      	movs	r0, #40	; 0x28
 8001be4:	f001 f976 	bl	8002ed4 <delay_us>

		if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)))   // if the pin is low
 8001be8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bec:	481a      	ldr	r0, [pc, #104]	; (8001c58 <DHT22_Read+0x94>)
 8001bee:	f006 f853 	bl	8007c98 <HAL_GPIO_ReadPin>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d10e      	bne.n	8001c16 <DHT22_Read+0x52>
		{
			i&= ~(1<<(7-j));   // write 0
 8001bf8:	79bb      	ldrb	r3, [r7, #6]
 8001bfa:	f1c3 0307 	rsb	r3, r3, #7
 8001bfe:	2201      	movs	r2, #1
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	b25b      	sxtb	r3, r3
 8001c06:	43db      	mvns	r3, r3
 8001c08:	b25a      	sxtb	r2, r3
 8001c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	b25b      	sxtb	r3, r3
 8001c12:	71fb      	strb	r3, [r7, #7]
 8001c14:	e00b      	b.n	8001c2e <DHT22_Read+0x6a>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8001c16:	79bb      	ldrb	r3, [r7, #6]
 8001c18:	f1c3 0307 	rsb	r3, r3, #7
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	b25a      	sxtb	r2, r3
 8001c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	b25b      	sxtb	r3, r3
 8001c2c:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)));  // wait for the pin to go low
 8001c2e:	bf00      	nop
 8001c30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c34:	4808      	ldr	r0, [pc, #32]	; (8001c58 <DHT22_Read+0x94>)
 8001c36:	f006 f82f 	bl	8007c98 <HAL_GPIO_ReadPin>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d1f7      	bne.n	8001c30 <DHT22_Read+0x6c>
	for (j=0;j<8;j++)
 8001c40:	79bb      	ldrb	r3, [r7, #6]
 8001c42:	3301      	adds	r3, #1
 8001c44:	71bb      	strb	r3, [r7, #6]
 8001c46:	79bb      	ldrb	r3, [r7, #6]
 8001c48:	2b07      	cmp	r3, #7
 8001c4a:	d9c1      	bls.n	8001bd0 <DHT22_Read+0xc>
	}

	return i;
 8001c4c:	79fb      	ldrb	r3, [r7, #7]
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40020400 	.word	0x40020400

08001c5c <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b088      	sub	sp, #32
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	460b      	mov	r3, r1
 8001c66:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c68:	f107 030c 	add.w	r3, r7, #12
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	605a      	str	r2, [r3, #4]
 8001c72:	609a      	str	r2, [r3, #8]
 8001c74:	60da      	str	r2, [r3, #12]
 8001c76:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001c78:	887b      	ldrh	r3, [r7, #2]
 8001c7a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c80:	2300      	movs	r3, #0
 8001c82:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001c84:	f107 030c 	add.w	r3, r7, #12
 8001c88:	4619      	mov	r1, r3
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f005 fe80 	bl	8007990 <HAL_GPIO_Init>
}
 8001c90:	bf00      	nop
 8001c92:	3720      	adds	r7, #32
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b088      	sub	sp, #32
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca4:	f107 030c 	add.w	r3, r7, #12
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	605a      	str	r2, [r3, #4]
 8001cae:	609a      	str	r2, [r3, #8]
 8001cb0:	60da      	str	r2, [r3, #12]
 8001cb2:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001cb4:	887b      	ldrh	r3, [r7, #2]
 8001cb6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001cc0:	f107 030c 	add.w	r3, r7, #12
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f005 fe62 	bl	8007990 <HAL_GPIO_Init>
}
 8001ccc:	bf00      	nop
 8001cce:	3720      	adds	r7, #32
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <get_DHT_Temp_Hum>:

uint8_t get_DHT_Temp_Hum (float *temperature, float *humidity)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
	DHT22_Start();
 8001cde:	f7ff ff15 	bl	8001b0c <DHT22_Start>
	 presence = DHT22_Check_Response();
 8001ce2:	f7ff ff37 	bl	8001b54 <DHT22_Check_Response>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	461a      	mov	r2, r3
 8001cea:	4b34      	ldr	r3, [pc, #208]	; (8001dbc <get_DHT_Temp_Hum+0xe8>)
 8001cec:	701a      	strb	r2, [r3, #0]
	 if(presence){
 8001cee:	4b33      	ldr	r3, [pc, #204]	; (8001dbc <get_DHT_Temp_Hum+0xe8>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d05d      	beq.n	8001db2 <get_DHT_Temp_Hum+0xde>
		 rh_byte1 = DHT22_Read ();
 8001cf6:	f7ff ff65 	bl	8001bc4 <DHT22_Read>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	4b30      	ldr	r3, [pc, #192]	; (8001dc0 <get_DHT_Temp_Hum+0xec>)
 8001d00:	701a      	strb	r2, [r3, #0]
		 rh_byte2 = DHT22_Read ();
 8001d02:	f7ff ff5f 	bl	8001bc4 <DHT22_Read>
 8001d06:	4603      	mov	r3, r0
 8001d08:	461a      	mov	r2, r3
 8001d0a:	4b2e      	ldr	r3, [pc, #184]	; (8001dc4 <get_DHT_Temp_Hum+0xf0>)
 8001d0c:	701a      	strb	r2, [r3, #0]
		 temp_byte1 = DHT22_Read ();
 8001d0e:	f7ff ff59 	bl	8001bc4 <DHT22_Read>
 8001d12:	4603      	mov	r3, r0
 8001d14:	461a      	mov	r2, r3
 8001d16:	4b2c      	ldr	r3, [pc, #176]	; (8001dc8 <get_DHT_Temp_Hum+0xf4>)
 8001d18:	701a      	strb	r2, [r3, #0]
		 temp_byte2 = DHT22_Read ();
 8001d1a:	f7ff ff53 	bl	8001bc4 <DHT22_Read>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	461a      	mov	r2, r3
 8001d22:	4b2a      	ldr	r3, [pc, #168]	; (8001dcc <get_DHT_Temp_Hum+0xf8>)
 8001d24:	701a      	strb	r2, [r3, #0]
		 sum = DHT22_Read();
 8001d26:	f7ff ff4d 	bl	8001bc4 <DHT22_Read>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	4b28      	ldr	r3, [pc, #160]	; (8001dd0 <get_DHT_Temp_Hum+0xfc>)
 8001d30:	801a      	strh	r2, [r3, #0]

		 temp = ((temp_byte1<<8)|temp_byte2);
 8001d32:	4b25      	ldr	r3, [pc, #148]	; (8001dc8 <get_DHT_Temp_Hum+0xf4>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	021b      	lsls	r3, r3, #8
 8001d38:	b21a      	sxth	r2, r3
 8001d3a:	4b24      	ldr	r3, [pc, #144]	; (8001dcc <get_DHT_Temp_Hum+0xf8>)
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	b21b      	sxth	r3, r3
 8001d40:	4313      	orrs	r3, r2
 8001d42:	b21b      	sxth	r3, r3
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	4b23      	ldr	r3, [pc, #140]	; (8001dd4 <get_DHT_Temp_Hum+0x100>)
 8001d48:	801a      	strh	r2, [r3, #0]
		 rh = ((rh_byte1<<8)|rh_byte2);
 8001d4a:	4b1d      	ldr	r3, [pc, #116]	; (8001dc0 <get_DHT_Temp_Hum+0xec>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	021b      	lsls	r3, r3, #8
 8001d50:	b21a      	sxth	r2, r3
 8001d52:	4b1c      	ldr	r3, [pc, #112]	; (8001dc4 <get_DHT_Temp_Hum+0xf0>)
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	b21b      	sxth	r3, r3
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	b21b      	sxth	r3, r3
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	4b1e      	ldr	r3, [pc, #120]	; (8001dd8 <get_DHT_Temp_Hum+0x104>)
 8001d60:	801a      	strh	r2, [r3, #0]

		 *temperature = (float) (temp/10.0);
 8001d62:	4b1c      	ldr	r3, [pc, #112]	; (8001dd4 <get_DHT_Temp_Hum+0x100>)
 8001d64:	881b      	ldrh	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe fbf4 	bl	8000554 <__aeabi_i2d>
 8001d6c:	f04f 0200 	mov.w	r2, #0
 8001d70:	4b1a      	ldr	r3, [pc, #104]	; (8001ddc <get_DHT_Temp_Hum+0x108>)
 8001d72:	f7fe fd83 	bl	800087c <__aeabi_ddiv>
 8001d76:	4602      	mov	r2, r0
 8001d78:	460b      	mov	r3, r1
 8001d7a:	4610      	mov	r0, r2
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	f7fe ff4b 	bl	8000c18 <__aeabi_d2f>
 8001d82:	4602      	mov	r2, r0
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	601a      	str	r2, [r3, #0]
		 *humidity = (float) (rh/10.0);
 8001d88:	4b13      	ldr	r3, [pc, #76]	; (8001dd8 <get_DHT_Temp_Hum+0x104>)
 8001d8a:	881b      	ldrh	r3, [r3, #0]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7fe fbe1 	bl	8000554 <__aeabi_i2d>
 8001d92:	f04f 0200 	mov.w	r2, #0
 8001d96:	4b11      	ldr	r3, [pc, #68]	; (8001ddc <get_DHT_Temp_Hum+0x108>)
 8001d98:	f7fe fd70 	bl	800087c <__aeabi_ddiv>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	4610      	mov	r0, r2
 8001da2:	4619      	mov	r1, r3
 8001da4:	f7fe ff38 	bl	8000c18 <__aeabi_d2f>
 8001da8:	4602      	mov	r2, r0
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	601a      	str	r2, [r3, #0]
		 return 1;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e000      	b.n	8001db4 <get_DHT_Temp_Hum+0xe0>
	 }
	 else{
//		 *temperature = 0;
//		 *humidity = 0;
		 return 0;
 8001db2:	2300      	movs	r3, #0
	 }


}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	20000a9c 	.word	0x20000a9c
 8001dc0:	20003c17 	.word	0x20003c17
 8001dc4:	20003c12 	.word	0x20003c12
 8001dc8:	20003c16 	.word	0x20003c16
 8001dcc:	20003c0c 	.word	0x20003c0c
 8001dd0:	20003c0e 	.word	0x20003c0e
 8001dd4:	20003c10 	.word	0x20003c10
 8001dd8:	20003c14 	.word	0x20003c14
 8001ddc:	40240000 	.word	0x40240000

08001de0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001de0:	b5b0      	push	{r4, r5, r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001de6:	f004 fca7 	bl	8006738 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dea:	f000 f989 	bl	8002100 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dee:	f000 fd4f 	bl	8002890 <MX_GPIO_Init>
  MX_DMA_Init();
 8001df2:	f000 fd1d 	bl	8002830 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 8001df6:	f000 fadb 	bl	80023b0 <MX_SDIO_SD_Init>
  MX_USART1_UART_Init();
 8001dfa:	f000 fcc5 	bl	8002788 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001dfe:	f000 fa03 	bl	8002208 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8001e02:	f000 fceb 	bl	80027dc <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8001e06:	f00b f849 	bl	800ce9c <MX_FATFS_Init>
  MX_SPI1_Init();
 8001e0a:	f000 faf1 	bl	80023f0 <MX_SPI1_Init>
  MX_RTC_Init();
 8001e0e:	f000 fa75 	bl	80022fc <MX_RTC_Init>
  MX_TIM9_Init();
 8001e12:	f000 fc5b 	bl	80026cc <MX_TIM9_Init>
  MX_TIM3_Init();
 8001e16:	f000 fb6f 	bl	80024f8 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001e1a:	f000 fb1f 	bl	800245c <MX_TIM2_Init>
  MX_TIM4_Init();
 8001e1e:	f000 fbb9 	bl	8002594 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001e22:	f000 fc05 	bl	8002630 <MX_TIM5_Init>
  MX_IWDG_Init();
 8001e26:	f000 fa4f 	bl	80022c8 <MX_IWDG_Init>
  MX_TIM10_Init();
 8001e2a:	f000 fc89 	bl	8002740 <MX_TIM10_Init>





	Ringbuf_Init();  // init the ring buffer for UART
 8001e2e:	f7ff fc2b 	bl	8001688 <Ringbuf_Init>

	Uart_SendString("\r\nStarting FreeFlightWX v", pc_uart);
 8001e32:	4997      	ldr	r1, [pc, #604]	; (8002090 <main+0x2b0>)
 8001e34:	4897      	ldr	r0, [pc, #604]	; (8002094 <main+0x2b4>)
 8001e36:	f7ff fda7 	bl	8001988 <Uart_SendString>
	Uart_SendString(MAJOR_VERSION, pc_uart);
 8001e3a:	4995      	ldr	r1, [pc, #596]	; (8002090 <main+0x2b0>)
 8001e3c:	4896      	ldr	r0, [pc, #600]	; (8002098 <main+0x2b8>)
 8001e3e:	f7ff fda3 	bl	8001988 <Uart_SendString>
	Uart_SendString("_", pc_uart);
 8001e42:	4993      	ldr	r1, [pc, #588]	; (8002090 <main+0x2b0>)
 8001e44:	4895      	ldr	r0, [pc, #596]	; (800209c <main+0x2bc>)
 8001e46:	f7ff fd9f 	bl	8001988 <Uart_SendString>
	Uart_SendString(BUILD_NUMBER, pc_uart);
 8001e4a:	4991      	ldr	r1, [pc, #580]	; (8002090 <main+0x2b0>)
 8001e4c:	4894      	ldr	r0, [pc, #592]	; (80020a0 <main+0x2c0>)
 8001e4e:	f7ff fd9b 	bl	8001988 <Uart_SendString>
	Uart_SendString("\r\n", pc_uart);
 8001e52:	498f      	ldr	r1, [pc, #572]	; (8002090 <main+0x2b0>)
 8001e54:	4893      	ldr	r0, [pc, #588]	; (80020a4 <main+0x2c4>)
 8001e56:	f7ff fd97 	bl	8001988 <Uart_SendString>

	initMeasureBuffer();
 8001e5a:	f001 f8cd 	bl	8002ff8 <initMeasureBuffer>

	SDcard_Init();
 8001e5e:	f001 fd87 	bl	8003970 <SDcard_Init>

	openSettingsFromSD();
 8001e62:	f001 fe2d 	bl	8003ac0 <openSettingsFromSD>

	initTime();
 8001e66:	f004 f929 	bl	80060bc <initTime>


	HAL_TIM_Base_Start(&htim9);
 8001e6a:	488f      	ldr	r0, [pc, #572]	; (80020a8 <main+0x2c8>)
 8001e6c:	f009 f885 	bl	800af7a <HAL_TIM_Base_Start>

	HAL_ADC_Start_DMA(&hadc1, adcValues, 2);  // start the adc in dma mode. adcValues is the buffer, where the adc values are going to store
 8001e70:	2202      	movs	r2, #2
 8001e72:	498e      	ldr	r1, [pc, #568]	; (80020ac <main+0x2cc>)
 8001e74:	488e      	ldr	r0, [pc, #568]	; (80020b0 <main+0x2d0>)
 8001e76:	f004 fd39 	bl	80068ec <HAL_ADC_Start_DMA>



	//startup sensors

	MS5611_Init();//ms5611 init
 8001e7a:	f001 fb8f 	bl	800359c <MS5611_Init>

	get_DHT_Temp_Hum(&temperature, &humidity);
 8001e7e:	498d      	ldr	r1, [pc, #564]	; (80020b4 <main+0x2d4>)
 8001e80:	488d      	ldr	r0, [pc, #564]	; (80020b8 <main+0x2d8>)
 8001e82:	f7ff ff27 	bl	8001cd4 <get_DHT_Temp_Hum>
	sprintf(buffer, "Temperature:%.1f Humidity:%.1f ",temperature,humidity);
 8001e86:	4b8c      	ldr	r3, [pc, #560]	; (80020b8 <main+0x2d8>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7fe fb74 	bl	8000578 <__aeabi_f2d>
 8001e90:	4604      	mov	r4, r0
 8001e92:	460d      	mov	r5, r1
 8001e94:	4b87      	ldr	r3, [pc, #540]	; (80020b4 <main+0x2d4>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7fe fb6d 	bl	8000578 <__aeabi_f2d>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	e9cd 2300 	strd	r2, r3, [sp]
 8001ea6:	4622      	mov	r2, r4
 8001ea8:	462b      	mov	r3, r5
 8001eaa:	4984      	ldr	r1, [pc, #528]	; (80020bc <main+0x2dc>)
 8001eac:	4884      	ldr	r0, [pc, #528]	; (80020c0 <main+0x2e0>)
 8001eae:	f00f fb9d 	bl	80115ec <siprintf>
	Uart_SendString(buffer, pc_uart);
 8001eb2:	4977      	ldr	r1, [pc, #476]	; (8002090 <main+0x2b0>)
 8001eb4:	4882      	ldr	r0, [pc, #520]	; (80020c0 <main+0x2e0>)
 8001eb6:	f7ff fd67 	bl	8001988 <Uart_SendString>


	uint32_t pressure = getPressure();
 8001eba:	f001 fd29 	bl	8003910 <getPressure>
 8001ebe:	60f8      	str	r0, [r7, #12]
	sprintf(buffer, "Pressure %X %lu\r\n",(unsigned int) pressure,pressure);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	68fa      	ldr	r2, [r7, #12]
 8001ec4:	497f      	ldr	r1, [pc, #508]	; (80020c4 <main+0x2e4>)
 8001ec6:	487e      	ldr	r0, [pc, #504]	; (80020c0 <main+0x2e0>)
 8001ec8:	f00f fb90 	bl	80115ec <siprintf>
	Uart_SendString(buffer, pc_uart);
 8001ecc:	4970      	ldr	r1, [pc, #448]	; (8002090 <main+0x2b0>)
 8001ece:	487c      	ldr	r0, [pc, #496]	; (80020c0 <main+0x2e0>)
 8001ed0:	f7ff fd5a 	bl	8001988 <Uart_SendString>

	Uart_SendString("Begin 2250 ms timer (htim3)\r\n", pc_uart);
 8001ed4:	496e      	ldr	r1, [pc, #440]	; (8002090 <main+0x2b0>)
 8001ed6:	487c      	ldr	r0, [pc, #496]	; (80020c8 <main+0x2e8>)
 8001ed8:	f7ff fd56 	bl	8001988 <Uart_SendString>
	HAL_TIM_Base_Start_IT(&htim3);
 8001edc:	487b      	ldr	r0, [pc, #492]	; (80020cc <main+0x2ec>)
 8001ede:	f009 f89b 	bl	800b018 <HAL_TIM_Base_Start_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		//1. refresh watchdog timer - the ultimate restart failsafe if something else does not work
		HAL_IWDG_Refresh(&hiwdg);
 8001ee2:	487b      	ldr	r0, [pc, #492]	; (80020d0 <main+0x2f0>)
 8001ee4:	f005 ff5b 	bl	8007d9e <HAL_IWDG_Refresh>

		//2. has a shutdown been scheduled
		checkShutdown();//actually executes the shutdown if scheduled an the timer has expired.
 8001ee8:	f002 fb8e 	bl	8004608 <checkShutdown>

		//3. If the time is ok, save settings to SD (if there are new settings, and check for restart hour.
		if(getTimeState() == TIMESTATE_OK_NITZ || getTimeState() == TIMESTATE_OK_SERVER){
 8001eec:	f004 fac8 	bl	8006480 <getTimeState>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d004      	beq.n	8001f00 <main+0x120>
 8001ef6:	f004 fac3 	bl	8006480 <getTimeState>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d12e      	bne.n	8001f5e <main+0x17e>
			saveSettingsToSD();
 8001f00:	f001 fe3c 	bl	8003b7c <saveSettingsToSD>

			thisHour = getHour();
 8001f04:	f004 fb26 	bl	8006554 <getHour>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	4b71      	ldr	r3, [pc, #452]	; (80020d4 <main+0x2f4>)
 8001f0e:	701a      	strb	r2, [r3, #0]
			if(thisHour == getSettings()->RSH && thisHour!=lastHour && lastHour != H_TEST){//it is the restart hour, and the first time we have seen it.
 8001f10:	f001 ff4c 	bl	8003dac <getSettings>
 8001f14:	4603      	mov	r3, r0
 8001f16:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
 8001f1a:	4b6e      	ldr	r3, [pc, #440]	; (80020d4 <main+0x2f4>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d119      	bne.n	8001f56 <main+0x176>
 8001f22:	4b6c      	ldr	r3, [pc, #432]	; (80020d4 <main+0x2f4>)
 8001f24:	781a      	ldrb	r2, [r3, #0]
 8001f26:	4b6c      	ldr	r3, [pc, #432]	; (80020d8 <main+0x2f8>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d013      	beq.n	8001f56 <main+0x176>
 8001f2e:	4b6a      	ldr	r3, [pc, #424]	; (80020d8 <main+0x2f8>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	2b63      	cmp	r3, #99	; 0x63
 8001f34:	d00f      	beq.n	8001f56 <main+0x176>
				sprintf(buffer, "Restart hour %i reached. Restarting... \r\n\r\n",getSettings()->RSH);
 8001f36:	f001 ff39 	bl	8003dac <getSettings>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8001f40:	461a      	mov	r2, r3
 8001f42:	4966      	ldr	r1, [pc, #408]	; (80020dc <main+0x2fc>)
 8001f44:	485e      	ldr	r0, [pc, #376]	; (80020c0 <main+0x2e0>)
 8001f46:	f00f fb51 	bl	80115ec <siprintf>
				Uart_SendString(buffer, pc_uart);
 8001f4a:	4951      	ldr	r1, [pc, #324]	; (8002090 <main+0x2b0>)
 8001f4c:	485c      	ldr	r0, [pc, #368]	; (80020c0 <main+0x2e0>)
 8001f4e:	f7ff fd1b 	bl	8001988 <Uart_SendString>

				shutdown();
 8001f52:	f002 fb2d 	bl	80045b0 <shutdown>

			}

			lastHour = thisHour;
 8001f56:	4b5f      	ldr	r3, [pc, #380]	; (80020d4 <main+0x2f4>)
 8001f58:	781a      	ldrb	r2, [r3, #0]
 8001f5a:	4b5f      	ldr	r3, [pc, #380]	; (80020d8 <main+0x2f8>)
 8001f5c:	701a      	strb	r2, [r3, #0]
		}

		//4. Do we have a new measurement to deal with? If the time is ok, add time to it and add it to the measurement list ready for sending
		if(newMeasurement ){
 8001f5e:	4b60      	ldr	r3, [pc, #384]	; (80020e0 <main+0x300>)
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d05a      	beq.n	800201c <main+0x23c>
			if(getTimeState() == TIMESTATE_OK_NITZ || getTimeState() == TIMESTATE_OK_SERVER){
 8001f66:	f004 fa8b 	bl	8006480 <getTimeState>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d004      	beq.n	8001f7a <main+0x19a>
 8001f70:	f004 fa86 	bl	8006480 <getTimeState>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d149      	bne.n	800200e <main+0x22e>
				currentMeasurement.index = powerOnIndex++;
 8001f7a:	4b5a      	ldr	r3, [pc, #360]	; (80020e4 <main+0x304>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	1c5a      	adds	r2, r3, #1
 8001f80:	4958      	ldr	r1, [pc, #352]	; (80020e4 <main+0x304>)
 8001f82:	600a      	str	r2, [r1, #0]
 8001f84:	4a58      	ldr	r2, [pc, #352]	; (80020e8 <main+0x308>)
 8001f86:	6013      	str	r3, [r2, #0]
				getEpochTime(&currentMeasurement.unix_time);
 8001f88:	4858      	ldr	r0, [pc, #352]	; (80020ec <main+0x30c>)
 8001f8a:	f004 f9cd 	bl	8006328 <getEpochTime>
				currentMeasurement.pressure = getPressure();
 8001f8e:	f001 fcbf 	bl	8003910 <getPressure>
 8001f92:	4603      	mov	r3, r0
 8001f94:	4a54      	ldr	r2, [pc, #336]	; (80020e8 <main+0x308>)
 8001f96:	6193      	str	r3, [r2, #24]

				uint8_t res;
				res = get_DHT_Temp_Hum(&temperature, &humidity);
 8001f98:	4946      	ldr	r1, [pc, #280]	; (80020b4 <main+0x2d4>)
 8001f9a:	4847      	ldr	r0, [pc, #284]	; (80020b8 <main+0x2d8>)
 8001f9c:	f7ff fe9a 	bl	8001cd4 <get_DHT_Temp_Hum>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	72fb      	strb	r3, [r7, #11]
				if(!res){
 8001fa4:	7afb      	ldrb	r3, [r7, #11]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d103      	bne.n	8001fb2 <main+0x1d2>
					Uart_SendString("\r\nTemperature and Humidity not updated. DHT22 Not Responding", pc_uart);
 8001faa:	4939      	ldr	r1, [pc, #228]	; (8002090 <main+0x2b0>)
 8001fac:	4850      	ldr	r0, [pc, #320]	; (80020f0 <main+0x310>)
 8001fae:	f7ff fceb 	bl	8001988 <Uart_SendString>
				}
				currentMeasurement.temperature = temperature;
 8001fb2:	4b41      	ldr	r3, [pc, #260]	; (80020b8 <main+0x2d8>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a4c      	ldr	r2, [pc, #304]	; (80020e8 <main+0x308>)
 8001fb8:	61d3      	str	r3, [r2, #28]
				currentMeasurement.humidity = humidity;
 8001fba:	4b3e      	ldr	r3, [pc, #248]	; (80020b4 <main+0x2d4>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a4a      	ldr	r2, [pc, #296]	; (80020e8 <main+0x308>)
 8001fc0:	6213      	str	r3, [r2, #32]


				currentMeasurement.csq = 199;
 8001fc2:	4b49      	ldr	r3, [pc, #292]	; (80020e8 <main+0x308>)
 8001fc4:	22c7      	movs	r2, #199	; 0xc7
 8001fc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

				addMeasurement(&currentMeasurement);
 8001fca:	4847      	ldr	r0, [pc, #284]	; (80020e8 <main+0x308>)
 8001fcc:	f001 f82a 	bl	8003024 <addMeasurement>
				newMeasurement = 0;
 8001fd0:	4b43      	ldr	r3, [pc, #268]	; (80020e0 <main+0x300>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	701a      	strb	r2, [r3, #0]

				Uart_SendString("\r\n*  *  *  *  *\r\nNew FFWX measurement recorded at: ", pc_uart);
 8001fd6:	492e      	ldr	r1, [pc, #184]	; (8002090 <main+0x2b0>)
 8001fd8:	4846      	ldr	r0, [pc, #280]	; (80020f4 <main+0x314>)
 8001fda:	f7ff fcd5 	bl	8001988 <Uart_SendString>
				getTimeChar(buffer);
 8001fde:	4838      	ldr	r0, [pc, #224]	; (80020c0 <main+0x2e0>)
 8001fe0:	f004 fad2 	bl	8006588 <getTimeChar>
				Uart_SendString(buffer, pc_uart);
 8001fe4:	492a      	ldr	r1, [pc, #168]	; (8002090 <main+0x2b0>)
 8001fe6:	4836      	ldr	r0, [pc, #216]	; (80020c0 <main+0x2e0>)
 8001fe8:	f7ff fcce 	bl	8001988 <Uart_SendString>
				Uart_SendString("\r\n", pc_uart);
 8001fec:	4928      	ldr	r1, [pc, #160]	; (8002090 <main+0x2b0>)
 8001fee:	482d      	ldr	r0, [pc, #180]	; (80020a4 <main+0x2c4>)
 8001ff0:	f7ff fcca 	bl	8001988 <Uart_SendString>
				measurementToSentance(&currentMeasurement, buffer);
 8001ff4:	4932      	ldr	r1, [pc, #200]	; (80020c0 <main+0x2e0>)
 8001ff6:	483c      	ldr	r0, [pc, #240]	; (80020e8 <main+0x308>)
 8001ff8:	f001 fa74 	bl	80034e4 <measurementToSentance>
				Uart_SendString(buffer, pc_uart);
 8001ffc:	4924      	ldr	r1, [pc, #144]	; (8002090 <main+0x2b0>)
 8001ffe:	4830      	ldr	r0, [pc, #192]	; (80020c0 <main+0x2e0>)
 8002000:	f7ff fcc2 	bl	8001988 <Uart_SendString>
				Log(buffer,1);
 8002004:	2101      	movs	r1, #1
 8002006:	482e      	ldr	r0, [pc, #184]	; (80020c0 <main+0x2e0>)
 8002008:	f002 f908 	bl	800421c <Log>
			if(getTimeState() == TIMESTATE_OK_NITZ || getTimeState() == TIMESTATE_OK_SERVER){
 800200c:	e006      	b.n	800201c <main+0x23c>
			}
			else{
				Uart_SendString("\r\n*  *  *  *  *\r\nNew FFWX measurement discarded - time not set\r\n ", pc_uart);
 800200e:	4920      	ldr	r1, [pc, #128]	; (8002090 <main+0x2b0>)
 8002010:	4839      	ldr	r0, [pc, #228]	; (80020f8 <main+0x318>)
 8002012:	f7ff fcb9 	bl	8001988 <Uart_SendString>
				newMeasurement = 0;
 8002016:	4b32      	ldr	r3, [pc, #200]	; (80020e0 <main+0x300>)
 8002018:	2200      	movs	r2, #0
 800201a:	701a      	strb	r2, [r3, #0]

		//5. Write data to the SD card.
		//Only write to the SD card if it less than 3ms since the last external interrupt cased by the anemometer,
		//or if it is less than 3ms since a 2.25s timer interrupt with 0 measurements.
		//This minimizes the chance of a external interrupt from the anemometer in the middle of SD card writing.
		if(timer10_ms_get() <= 3){
 800201c:	f000 ffd8 	bl	8002fd0 <timer10_ms_get>
 8002020:	4603      	mov	r3, r0
 8002022:	2b03      	cmp	r3, #3
 8002024:	d803      	bhi.n	800202e <main+0x24e>
			checkWriteLogBuffer();
 8002026:	f002 f963 	bl	80042f0 <checkWriteLogBuffer>
			checkSDError();
 800202a:	f001 fceb 	bl	8003a04 <checkSDError>
		}

		//6. Manage sending the sim7600 state machine, if the power is ok, then manage commands (and send measurements)
		if(sim7600_powerProcessor()){
 800202e:	f002 fb0b 	bl	8004648 <sim7600_powerProcessor>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d00f      	beq.n	8002058 <main+0x278>
			sim7600_commandProcessor();
 8002038:	f002 fc72 	bl	8004920 <sim7600_commandProcessor>
		}

		//7. Process data from U2, (and send it to U1)
		while (IsDataAvailable(pc_uart)){
 800203c:	e00c      	b.n	8002058 <main+0x278>
			int data = Uart_read(pc_uart);
 800203e:	4814      	ldr	r0, [pc, #80]	; (8002090 <main+0x2b0>)
 8002040:	f7ff fb8e 	bl	8001760 <Uart_read>
 8002044:	6038      	str	r0, [r7, #0]
			pc_uart_processChar(data);
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	b2db      	uxtb	r3, r3
 800204a:	4618      	mov	r0, r3
 800204c:	f002 f844 	bl	80040d8 <pc_uart_processChar>
			Uart_write(data, device_uart);
 8002050:	492a      	ldr	r1, [pc, #168]	; (80020fc <main+0x31c>)
 8002052:	6838      	ldr	r0, [r7, #0]
 8002054:	f7ff fbe4 	bl	8001820 <Uart_write>
		while (IsDataAvailable(pc_uart)){
 8002058:	480d      	ldr	r0, [pc, #52]	; (8002090 <main+0x2b0>)
 800205a:	f7ff fc55 	bl	8001908 <IsDataAvailable>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1ec      	bne.n	800203e <main+0x25e>
		}

		//8. Process data from U1, (and send it to U2)
		while (IsDataAvailable(device_uart)){
 8002064:	e00c      	b.n	8002080 <main+0x2a0>
			int data = Uart_read(device_uart);
 8002066:	4825      	ldr	r0, [pc, #148]	; (80020fc <main+0x31c>)
 8002068:	f7ff fb7a 	bl	8001760 <Uart_read>
 800206c:	6078      	str	r0, [r7, #4]
			sim7600_processChar(data);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	b2db      	uxtb	r3, r3
 8002072:	4618      	mov	r0, r3
 8002074:	f003 f916 	bl	80052a4 <sim7600_processChar>
			Uart_write(data, pc_uart);
 8002078:	4905      	ldr	r1, [pc, #20]	; (8002090 <main+0x2b0>)
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f7ff fbd0 	bl	8001820 <Uart_write>
		while (IsDataAvailable(device_uart)){
 8002080:	481e      	ldr	r0, [pc, #120]	; (80020fc <main+0x31c>)
 8002082:	f7ff fc41 	bl	8001908 <IsDataAvailable>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d1ec      	bne.n	8002066 <main+0x286>
		HAL_IWDG_Refresh(&hiwdg);
 800208c:	e729      	b.n	8001ee2 <main+0x102>
 800208e:	bf00      	nop
 8002090:	20004094 	.word	0x20004094
 8002094:	08017a30 	.word	0x08017a30
 8002098:	08017a4c 	.word	0x08017a4c
 800209c:	08017a50 	.word	0x08017a50
 80020a0:	08017a54 	.word	0x08017a54
 80020a4:	08017a58 	.word	0x08017a58
 80020a8:	20003f0c 	.word	0x20003f0c
 80020ac:	20003c18 	.word	0x20003c18
 80020b0:	20003d98 	.word	0x20003d98
 80020b4:	20000aa4 	.word	0x20000aa4
 80020b8:	20000aa0 	.word	0x20000aa0
 80020bc:	08017a5c 	.word	0x08017a5c
 80020c0:	20006210 	.word	0x20006210
 80020c4:	08017a7c 	.word	0x08017a7c
 80020c8:	08017a90 	.word	0x08017a90
 80020cc:	20003d54 	.word	0x20003d54
 80020d0:	20003d04 	.word	0x20003d04
 80020d4:	20000007 	.word	0x20000007
 80020d8:	20000006 	.word	0x20000006
 80020dc:	08017ab0 	.word	0x08017ab0
 80020e0:	20000aaa 	.word	0x20000aaa
 80020e4:	20000000 	.word	0x20000000
 80020e8:	20003fd0 	.word	0x20003fd0
 80020ec:	20003fd4 	.word	0x20003fd4
 80020f0:	08017adc 	.word	0x08017adc
 80020f4:	08017b1c 	.word	0x08017b1c
 80020f8:	08017b50 	.word	0x08017b50
 80020fc:	20003de8 	.word	0x20003de8

08002100 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b09a      	sub	sp, #104	; 0x68
 8002104:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002106:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800210a:	2230      	movs	r2, #48	; 0x30
 800210c:	2100      	movs	r1, #0
 800210e:	4618      	mov	r0, r3
 8002110:	f00e fac2 	bl	8010698 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002114:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	605a      	str	r2, [r3, #4]
 800211e:	609a      	str	r2, [r3, #8]
 8002120:	60da      	str	r2, [r3, #12]
 8002122:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002124:	f107 030c 	add.w	r3, r7, #12
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	605a      	str	r2, [r3, #4]
 800212e:	609a      	str	r2, [r3, #8]
 8002130:	60da      	str	r2, [r3, #12]
 8002132:	611a      	str	r2, [r3, #16]
 8002134:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	60bb      	str	r3, [r7, #8]
 800213a:	4b30      	ldr	r3, [pc, #192]	; (80021fc <SystemClock_Config+0xfc>)
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	4a2f      	ldr	r2, [pc, #188]	; (80021fc <SystemClock_Config+0xfc>)
 8002140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002144:	6413      	str	r3, [r2, #64]	; 0x40
 8002146:	4b2d      	ldr	r3, [pc, #180]	; (80021fc <SystemClock_Config+0xfc>)
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800214e:	60bb      	str	r3, [r7, #8]
 8002150:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002152:	2300      	movs	r3, #0
 8002154:	607b      	str	r3, [r7, #4]
 8002156:	4b2a      	ldr	r3, [pc, #168]	; (8002200 <SystemClock_Config+0x100>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a29      	ldr	r2, [pc, #164]	; (8002200 <SystemClock_Config+0x100>)
 800215c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002160:	6013      	str	r3, [r2, #0]
 8002162:	4b27      	ldr	r3, [pc, #156]	; (8002200 <SystemClock_Config+0x100>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800216a:	607b      	str	r3, [r7, #4]
 800216c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800216e:	2309      	movs	r3, #9
 8002170:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002172:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002176:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002178:	2301      	movs	r3, #1
 800217a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800217c:	2302      	movs	r3, #2
 800217e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002180:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002184:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 15;
 8002186:	230f      	movs	r3, #15
 8002188:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 144;
 800218a:	2390      	movs	r3, #144	; 0x90
 800218c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800218e:	2304      	movs	r3, #4
 8002190:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8002192:	2305      	movs	r3, #5
 8002194:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002196:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800219a:	4618      	mov	r0, r3
 800219c:	f005 fe10 	bl	8007dc0 <HAL_RCC_OscConfig>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80021a6:	f000 ff1f 	bl	8002fe8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021aa:	230f      	movs	r3, #15
 80021ac:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021ae:	2302      	movs	r3, #2
 80021b0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021b2:	2300      	movs	r3, #0
 80021b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80021b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021bc:	2300      	movs	r3, #0
 80021be:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80021c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021c4:	2101      	movs	r1, #1
 80021c6:	4618      	mov	r0, r3
 80021c8:	f006 f86a 	bl	80082a0 <HAL_RCC_ClockConfig>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80021d2:	f000 ff09 	bl	8002fe8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80021d6:	2302      	movs	r3, #2
 80021d8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 80021da:	4b0a      	ldr	r3, [pc, #40]	; (8002204 <SystemClock_Config+0x104>)
 80021dc:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021de:	f107 030c 	add.w	r3, r7, #12
 80021e2:	4618      	mov	r0, r3
 80021e4:	f006 fa2c 	bl	8008640 <HAL_RCCEx_PeriphCLKConfig>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80021ee:	f000 fefb 	bl	8002fe8 <Error_Handler>
  }
}
 80021f2:	bf00      	nop
 80021f4:	3768      	adds	r7, #104	; 0x68
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	40023800 	.word	0x40023800
 8002200:	40007000 	.word	0x40007000
 8002204:	00190300 	.word	0x00190300

08002208 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800220e:	463b      	mov	r3, r7
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	605a      	str	r2, [r3, #4]
 8002216:	609a      	str	r2, [r3, #8]
 8002218:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800221a:	4b28      	ldr	r3, [pc, #160]	; (80022bc <MX_ADC1_Init+0xb4>)
 800221c:	4a28      	ldr	r2, [pc, #160]	; (80022c0 <MX_ADC1_Init+0xb8>)
 800221e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002220:	4b26      	ldr	r3, [pc, #152]	; (80022bc <MX_ADC1_Init+0xb4>)
 8002222:	2200      	movs	r2, #0
 8002224:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002226:	4b25      	ldr	r3, [pc, #148]	; (80022bc <MX_ADC1_Init+0xb4>)
 8002228:	2200      	movs	r2, #0
 800222a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800222c:	4b23      	ldr	r3, [pc, #140]	; (80022bc <MX_ADC1_Init+0xb4>)
 800222e:	2201      	movs	r2, #1
 8002230:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002232:	4b22      	ldr	r3, [pc, #136]	; (80022bc <MX_ADC1_Init+0xb4>)
 8002234:	2201      	movs	r2, #1
 8002236:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002238:	4b20      	ldr	r3, [pc, #128]	; (80022bc <MX_ADC1_Init+0xb4>)
 800223a:	2200      	movs	r2, #0
 800223c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002240:	4b1e      	ldr	r3, [pc, #120]	; (80022bc <MX_ADC1_Init+0xb4>)
 8002242:	2200      	movs	r2, #0
 8002244:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002246:	4b1d      	ldr	r3, [pc, #116]	; (80022bc <MX_ADC1_Init+0xb4>)
 8002248:	4a1e      	ldr	r2, [pc, #120]	; (80022c4 <MX_ADC1_Init+0xbc>)
 800224a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800224c:	4b1b      	ldr	r3, [pc, #108]	; (80022bc <MX_ADC1_Init+0xb4>)
 800224e:	2200      	movs	r2, #0
 8002250:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8002252:	4b1a      	ldr	r3, [pc, #104]	; (80022bc <MX_ADC1_Init+0xb4>)
 8002254:	2202      	movs	r2, #2
 8002256:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002258:	4b18      	ldr	r3, [pc, #96]	; (80022bc <MX_ADC1_Init+0xb4>)
 800225a:	2201      	movs	r2, #1
 800225c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002260:	4b16      	ldr	r3, [pc, #88]	; (80022bc <MX_ADC1_Init+0xb4>)
 8002262:	2200      	movs	r2, #0
 8002264:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002266:	4815      	ldr	r0, [pc, #84]	; (80022bc <MX_ADC1_Init+0xb4>)
 8002268:	f004 fafc 	bl	8006864 <HAL_ADC_Init>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002272:	f000 feb9 	bl	8002fe8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002276:	2300      	movs	r3, #0
 8002278:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800227a:	2301      	movs	r3, #1
 800227c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800227e:	2307      	movs	r3, #7
 8002280:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002282:	463b      	mov	r3, r7
 8002284:	4619      	mov	r1, r3
 8002286:	480d      	ldr	r0, [pc, #52]	; (80022bc <MX_ADC1_Init+0xb4>)
 8002288:	f004 fc22 	bl	8006ad0 <HAL_ADC_ConfigChannel>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8002292:	f000 fea9 	bl	8002fe8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002296:	2301      	movs	r3, #1
 8002298:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800229a:	2302      	movs	r3, #2
 800229c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800229e:	463b      	mov	r3, r7
 80022a0:	4619      	mov	r1, r3
 80022a2:	4806      	ldr	r0, [pc, #24]	; (80022bc <MX_ADC1_Init+0xb4>)
 80022a4:	f004 fc14 	bl	8006ad0 <HAL_ADC_ConfigChannel>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80022ae:	f000 fe9b 	bl	8002fe8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80022b2:	bf00      	nop
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	20003d98 	.word	0x20003d98
 80022c0:	40012000 	.word	0x40012000
 80022c4:	0f000001 	.word	0x0f000001

080022c8 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80022cc:	4b09      	ldr	r3, [pc, #36]	; (80022f4 <MX_IWDG_Init+0x2c>)
 80022ce:	4a0a      	ldr	r2, [pc, #40]	; (80022f8 <MX_IWDG_Init+0x30>)
 80022d0:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 80022d2:	4b08      	ldr	r3, [pc, #32]	; (80022f4 <MX_IWDG_Init+0x2c>)
 80022d4:	2206      	movs	r2, #6
 80022d6:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 80022d8:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <MX_IWDG_Init+0x2c>)
 80022da:	f640 72ff 	movw	r2, #4095	; 0xfff
 80022de:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80022e0:	4804      	ldr	r0, [pc, #16]	; (80022f4 <MX_IWDG_Init+0x2c>)
 80022e2:	f005 fd23 	bl	8007d2c <HAL_IWDG_Init>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80022ec:	f000 fe7c 	bl	8002fe8 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80022f0:	bf00      	nop
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	20003d04 	.word	0x20003d04
 80022f8:	40003000 	.word	0x40003000

080022fc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002302:	1d3b      	adds	r3, r7, #4
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	605a      	str	r2, [r3, #4]
 800230a:	609a      	str	r2, [r3, #8]
 800230c:	60da      	str	r2, [r3, #12]
 800230e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002310:	2300      	movs	r3, #0
 8002312:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002314:	4b24      	ldr	r3, [pc, #144]	; (80023a8 <MX_RTC_Init+0xac>)
 8002316:	4a25      	ldr	r2, [pc, #148]	; (80023ac <MX_RTC_Init+0xb0>)
 8002318:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800231a:	4b23      	ldr	r3, [pc, #140]	; (80023a8 <MX_RTC_Init+0xac>)
 800231c:	2200      	movs	r2, #0
 800231e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 125-1;
 8002320:	4b21      	ldr	r3, [pc, #132]	; (80023a8 <MX_RTC_Init+0xac>)
 8002322:	227c      	movs	r2, #124	; 0x7c
 8002324:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 7999-1;
 8002326:	4b20      	ldr	r3, [pc, #128]	; (80023a8 <MX_RTC_Init+0xac>)
 8002328:	f641 723e 	movw	r2, #7998	; 0x1f3e
 800232c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800232e:	4b1e      	ldr	r3, [pc, #120]	; (80023a8 <MX_RTC_Init+0xac>)
 8002330:	2200      	movs	r2, #0
 8002332:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002334:	4b1c      	ldr	r3, [pc, #112]	; (80023a8 <MX_RTC_Init+0xac>)
 8002336:	2200      	movs	r2, #0
 8002338:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800233a:	4b1b      	ldr	r3, [pc, #108]	; (80023a8 <MX_RTC_Init+0xac>)
 800233c:	2200      	movs	r2, #0
 800233e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002340:	4819      	ldr	r0, [pc, #100]	; (80023a8 <MX_RTC_Init+0xac>)
 8002342:	f006 fa6d 	bl	8008820 <HAL_RTC_Init>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 800234c:	f000 fe4c 	bl	8002fe8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8002350:	2300      	movs	r3, #0
 8002352:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8002354:	2300      	movs	r3, #0
 8002356:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8002358:	2300      	movs	r3, #0
 800235a:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800235c:	2300      	movs	r3, #0
 800235e:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002360:	2300      	movs	r3, #0
 8002362:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002364:	1d3b      	adds	r3, r7, #4
 8002366:	2200      	movs	r2, #0
 8002368:	4619      	mov	r1, r3
 800236a:	480f      	ldr	r0, [pc, #60]	; (80023a8 <MX_RTC_Init+0xac>)
 800236c:	f006 fae9 	bl	8008942 <HAL_RTC_SetTime>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 8002376:	f000 fe37 	bl	8002fe8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 800237a:	2306      	movs	r3, #6
 800237c:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_OCTOBER;
 800237e:	2310      	movs	r3, #16
 8002380:	707b      	strb	r3, [r7, #1]
  sDate.Date = 24;
 8002382:	2318      	movs	r3, #24
 8002384:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 20;
 8002386:	2314      	movs	r3, #20
 8002388:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800238a:	463b      	mov	r3, r7
 800238c:	2200      	movs	r2, #0
 800238e:	4619      	mov	r1, r3
 8002390:	4805      	ldr	r0, [pc, #20]	; (80023a8 <MX_RTC_Init+0xac>)
 8002392:	f006 fbf1 	bl	8008b78 <HAL_RTC_SetDate>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 800239c:	f000 fe24 	bl	8002fe8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80023a0:	bf00      	nop
 80023a2:	3718      	adds	r7, #24
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	20003e88 	.word	0x20003e88
 80023ac:	40002800 	.word	0x40002800

080023b0 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80023b4:	4b0c      	ldr	r3, [pc, #48]	; (80023e8 <MX_SDIO_SD_Init+0x38>)
 80023b6:	4a0d      	ldr	r2, [pc, #52]	; (80023ec <MX_SDIO_SD_Init+0x3c>)
 80023b8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80023ba:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <MX_SDIO_SD_Init+0x38>)
 80023bc:	2200      	movs	r2, #0
 80023be:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80023c0:	4b09      	ldr	r3, [pc, #36]	; (80023e8 <MX_SDIO_SD_Init+0x38>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80023c6:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <MX_SDIO_SD_Init+0x38>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80023cc:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <MX_SDIO_SD_Init+0x38>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80023d2:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <MX_SDIO_SD_Init+0x38>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 80023d8:	4b03      	ldr	r3, [pc, #12]	; (80023e8 <MX_SDIO_SD_Init+0x38>)
 80023da:	2202      	movs	r2, #2
 80023dc:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80023de:	bf00      	nop
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	20003f4c 	.word	0x20003f4c
 80023ec:	40012c00 	.word	0x40012c00

080023f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80023f4:	4b17      	ldr	r3, [pc, #92]	; (8002454 <MX_SPI1_Init+0x64>)
 80023f6:	4a18      	ldr	r2, [pc, #96]	; (8002458 <MX_SPI1_Init+0x68>)
 80023f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80023fa:	4b16      	ldr	r3, [pc, #88]	; (8002454 <MX_SPI1_Init+0x64>)
 80023fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002400:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002402:	4b14      	ldr	r3, [pc, #80]	; (8002454 <MX_SPI1_Init+0x64>)
 8002404:	2200      	movs	r2, #0
 8002406:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002408:	4b12      	ldr	r3, [pc, #72]	; (8002454 <MX_SPI1_Init+0x64>)
 800240a:	2200      	movs	r2, #0
 800240c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800240e:	4b11      	ldr	r3, [pc, #68]	; (8002454 <MX_SPI1_Init+0x64>)
 8002410:	2200      	movs	r2, #0
 8002412:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002414:	4b0f      	ldr	r3, [pc, #60]	; (8002454 <MX_SPI1_Init+0x64>)
 8002416:	2200      	movs	r2, #0
 8002418:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800241a:	4b0e      	ldr	r3, [pc, #56]	; (8002454 <MX_SPI1_Init+0x64>)
 800241c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002420:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002422:	4b0c      	ldr	r3, [pc, #48]	; (8002454 <MX_SPI1_Init+0x64>)
 8002424:	2200      	movs	r2, #0
 8002426:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002428:	4b0a      	ldr	r3, [pc, #40]	; (8002454 <MX_SPI1_Init+0x64>)
 800242a:	2200      	movs	r2, #0
 800242c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800242e:	4b09      	ldr	r3, [pc, #36]	; (8002454 <MX_SPI1_Init+0x64>)
 8002430:	2200      	movs	r2, #0
 8002432:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002434:	4b07      	ldr	r3, [pc, #28]	; (8002454 <MX_SPI1_Init+0x64>)
 8002436:	2200      	movs	r2, #0
 8002438:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800243a:	4b06      	ldr	r3, [pc, #24]	; (8002454 <MX_SPI1_Init+0x64>)
 800243c:	220a      	movs	r2, #10
 800243e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002440:	4804      	ldr	r0, [pc, #16]	; (8002454 <MX_SPI1_Init+0x64>)
 8002442:	f008 f81b 	bl	800a47c <HAL_SPI_Init>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800244c:	f000 fdcc 	bl	8002fe8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002450:	bf00      	nop
 8002452:	bd80      	pop	{r7, pc}
 8002454:	20003ffc 	.word	0x20003ffc
 8002458:	40013000 	.word	0x40013000

0800245c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002462:	f107 0308 	add.w	r3, r7, #8
 8002466:	2200      	movs	r2, #0
 8002468:	601a      	str	r2, [r3, #0]
 800246a:	605a      	str	r2, [r3, #4]
 800246c:	609a      	str	r2, [r3, #8]
 800246e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002470:	463b      	mov	r3, r7
 8002472:	2200      	movs	r2, #0
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002478:	4b1e      	ldr	r3, [pc, #120]	; (80024f4 <MX_TIM2_Init+0x98>)
 800247a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800247e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 60000-1;
 8002480:	4b1c      	ldr	r3, [pc, #112]	; (80024f4 <MX_TIM2_Init+0x98>)
 8002482:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8002486:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002488:	4b1a      	ldr	r3, [pc, #104]	; (80024f4 <MX_TIM2_Init+0x98>)
 800248a:	2200      	movs	r2, #0
 800248c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800248e:	4b19      	ldr	r3, [pc, #100]	; (80024f4 <MX_TIM2_Init+0x98>)
 8002490:	f04f 32ff 	mov.w	r2, #4294967295
 8002494:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002496:	4b17      	ldr	r3, [pc, #92]	; (80024f4 <MX_TIM2_Init+0x98>)
 8002498:	2200      	movs	r2, #0
 800249a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800249c:	4b15      	ldr	r3, [pc, #84]	; (80024f4 <MX_TIM2_Init+0x98>)
 800249e:	2200      	movs	r2, #0
 80024a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80024a2:	4814      	ldr	r0, [pc, #80]	; (80024f4 <MX_TIM2_Init+0x98>)
 80024a4:	f008 fd3e 	bl	800af24 <HAL_TIM_Base_Init>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80024ae:	f000 fd9b 	bl	8002fe8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80024b8:	f107 0308 	add.w	r3, r7, #8
 80024bc:	4619      	mov	r1, r3
 80024be:	480d      	ldr	r0, [pc, #52]	; (80024f4 <MX_TIM2_Init+0x98>)
 80024c0:	f008 fed6 	bl	800b270 <HAL_TIM_ConfigClockSource>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80024ca:	f000 fd8d 	bl	8002fe8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024ce:	2300      	movs	r3, #0
 80024d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024d2:	2300      	movs	r3, #0
 80024d4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80024d6:	463b      	mov	r3, r7
 80024d8:	4619      	mov	r1, r3
 80024da:	4806      	ldr	r0, [pc, #24]	; (80024f4 <MX_TIM2_Init+0x98>)
 80024dc:	f009 f8ce 	bl	800b67c <HAL_TIMEx_MasterConfigSynchronization>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80024e6:	f000 fd7f 	bl	8002fe8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80024ea:	bf00      	nop
 80024ec:	3718      	adds	r7, #24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	20004054 	.word	0x20004054

080024f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024fe:	f107 0308 	add.w	r3, r7, #8
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]
 8002506:	605a      	str	r2, [r3, #4]
 8002508:	609a      	str	r2, [r3, #8]
 800250a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800250c:	463b      	mov	r3, r7
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002514:	4b1d      	ldr	r3, [pc, #116]	; (800258c <MX_TIM3_Init+0x94>)
 8002516:	4a1e      	ldr	r2, [pc, #120]	; (8002590 <MX_TIM3_Init+0x98>)
 8002518:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 60000-1;
 800251a:	4b1c      	ldr	r3, [pc, #112]	; (800258c <MX_TIM3_Init+0x94>)
 800251c:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8002520:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002522:	4b1a      	ldr	r3, [pc, #104]	; (800258c <MX_TIM3_Init+0x94>)
 8002524:	2200      	movs	r2, #0
 8002526:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2250-1;
 8002528:	4b18      	ldr	r3, [pc, #96]	; (800258c <MX_TIM3_Init+0x94>)
 800252a:	f640 02c9 	movw	r2, #2249	; 0x8c9
 800252e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002530:	4b16      	ldr	r3, [pc, #88]	; (800258c <MX_TIM3_Init+0x94>)
 8002532:	2200      	movs	r2, #0
 8002534:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002536:	4b15      	ldr	r3, [pc, #84]	; (800258c <MX_TIM3_Init+0x94>)
 8002538:	2280      	movs	r2, #128	; 0x80
 800253a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800253c:	4813      	ldr	r0, [pc, #76]	; (800258c <MX_TIM3_Init+0x94>)
 800253e:	f008 fcf1 	bl	800af24 <HAL_TIM_Base_Init>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002548:	f000 fd4e 	bl	8002fe8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800254c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002550:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002552:	f107 0308 	add.w	r3, r7, #8
 8002556:	4619      	mov	r1, r3
 8002558:	480c      	ldr	r0, [pc, #48]	; (800258c <MX_TIM3_Init+0x94>)
 800255a:	f008 fe89 	bl	800b270 <HAL_TIM_ConfigClockSource>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002564:	f000 fd40 	bl	8002fe8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002568:	2300      	movs	r3, #0
 800256a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800256c:	2300      	movs	r3, #0
 800256e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002570:	463b      	mov	r3, r7
 8002572:	4619      	mov	r1, r3
 8002574:	4805      	ldr	r0, [pc, #20]	; (800258c <MX_TIM3_Init+0x94>)
 8002576:	f009 f881 	bl	800b67c <HAL_TIMEx_MasterConfigSynchronization>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002580:	f000 fd32 	bl	8002fe8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002584:	bf00      	nop
 8002586:	3718      	adds	r7, #24
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	20003d54 	.word	0x20003d54
 8002590:	40000400 	.word	0x40000400

08002594 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800259a:	f107 0308 	add.w	r3, r7, #8
 800259e:	2200      	movs	r2, #0
 80025a0:	601a      	str	r2, [r3, #0]
 80025a2:	605a      	str	r2, [r3, #4]
 80025a4:	609a      	str	r2, [r3, #8]
 80025a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025a8:	463b      	mov	r3, r7
 80025aa:	2200      	movs	r2, #0
 80025ac:	601a      	str	r2, [r3, #0]
 80025ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80025b0:	4b1d      	ldr	r3, [pc, #116]	; (8002628 <MX_TIM4_Init+0x94>)
 80025b2:	4a1e      	ldr	r2, [pc, #120]	; (800262c <MX_TIM4_Init+0x98>)
 80025b4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 60000-1;
 80025b6:	4b1c      	ldr	r3, [pc, #112]	; (8002628 <MX_TIM4_Init+0x94>)
 80025b8:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80025bc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025be:	4b1a      	ldr	r3, [pc, #104]	; (8002628 <MX_TIM4_Init+0x94>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80025c4:	4b18      	ldr	r3, [pc, #96]	; (8002628 <MX_TIM4_Init+0x94>)
 80025c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025ca:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025cc:	4b16      	ldr	r3, [pc, #88]	; (8002628 <MX_TIM4_Init+0x94>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025d2:	4b15      	ldr	r3, [pc, #84]	; (8002628 <MX_TIM4_Init+0x94>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80025d8:	4813      	ldr	r0, [pc, #76]	; (8002628 <MX_TIM4_Init+0x94>)
 80025da:	f008 fca3 	bl	800af24 <HAL_TIM_Base_Init>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80025e4:	f000 fd00 	bl	8002fe8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80025ee:	f107 0308 	add.w	r3, r7, #8
 80025f2:	4619      	mov	r1, r3
 80025f4:	480c      	ldr	r0, [pc, #48]	; (8002628 <MX_TIM4_Init+0x94>)
 80025f6:	f008 fe3b 	bl	800b270 <HAL_TIM_ConfigClockSource>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002600:	f000 fcf2 	bl	8002fe8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002604:	2300      	movs	r3, #0
 8002606:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002608:	2300      	movs	r3, #0
 800260a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800260c:	463b      	mov	r3, r7
 800260e:	4619      	mov	r1, r3
 8002610:	4805      	ldr	r0, [pc, #20]	; (8002628 <MX_TIM4_Init+0x94>)
 8002612:	f009 f833 	bl	800b67c <HAL_TIMEx_MasterConfigSynchronization>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800261c:	f000 fce4 	bl	8002fe8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002620:	bf00      	nop
 8002622:	3718      	adds	r7, #24
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	20003c80 	.word	0x20003c80
 800262c:	40000800 	.word	0x40000800

08002630 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002636:	f107 0308 	add.w	r3, r7, #8
 800263a:	2200      	movs	r2, #0
 800263c:	601a      	str	r2, [r3, #0]
 800263e:	605a      	str	r2, [r3, #4]
 8002640:	609a      	str	r2, [r3, #8]
 8002642:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002644:	463b      	mov	r3, r7
 8002646:	2200      	movs	r2, #0
 8002648:	601a      	str	r2, [r3, #0]
 800264a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800264c:	4b1d      	ldr	r3, [pc, #116]	; (80026c4 <MX_TIM5_Init+0x94>)
 800264e:	4a1e      	ldr	r2, [pc, #120]	; (80026c8 <MX_TIM5_Init+0x98>)
 8002650:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 60000-1;
 8002652:	4b1c      	ldr	r3, [pc, #112]	; (80026c4 <MX_TIM5_Init+0x94>)
 8002654:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8002658:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800265a:	4b1a      	ldr	r3, [pc, #104]	; (80026c4 <MX_TIM5_Init+0x94>)
 800265c:	2200      	movs	r2, #0
 800265e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002660:	4b18      	ldr	r3, [pc, #96]	; (80026c4 <MX_TIM5_Init+0x94>)
 8002662:	f04f 32ff 	mov.w	r2, #4294967295
 8002666:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002668:	4b16      	ldr	r3, [pc, #88]	; (80026c4 <MX_TIM5_Init+0x94>)
 800266a:	2200      	movs	r2, #0
 800266c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800266e:	4b15      	ldr	r3, [pc, #84]	; (80026c4 <MX_TIM5_Init+0x94>)
 8002670:	2200      	movs	r2, #0
 8002672:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002674:	4813      	ldr	r0, [pc, #76]	; (80026c4 <MX_TIM5_Init+0x94>)
 8002676:	f008 fc55 	bl	800af24 <HAL_TIM_Base_Init>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002680:	f000 fcb2 	bl	8002fe8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002684:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002688:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800268a:	f107 0308 	add.w	r3, r7, #8
 800268e:	4619      	mov	r1, r3
 8002690:	480c      	ldr	r0, [pc, #48]	; (80026c4 <MX_TIM5_Init+0x94>)
 8002692:	f008 fded 	bl	800b270 <HAL_TIM_ConfigClockSource>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 800269c:	f000 fca4 	bl	8002fe8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026a0:	2300      	movs	r3, #0
 80026a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026a4:	2300      	movs	r3, #0
 80026a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80026a8:	463b      	mov	r3, r7
 80026aa:	4619      	mov	r1, r3
 80026ac:	4805      	ldr	r0, [pc, #20]	; (80026c4 <MX_TIM5_Init+0x94>)
 80026ae:	f008 ffe5 	bl	800b67c <HAL_TIMEx_MasterConfigSynchronization>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80026b8:	f000 fc96 	bl	8002fe8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80026bc:	bf00      	nop
 80026be:	3718      	adds	r7, #24
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	20003d14 	.word	0x20003d14
 80026c8:	40000c00 	.word	0x40000c00

080026cc <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026d2:	463b      	mov	r3, r7
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	605a      	str	r2, [r3, #4]
 80026da:	609a      	str	r2, [r3, #8]
 80026dc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80026de:	4b16      	ldr	r3, [pc, #88]	; (8002738 <MX_TIM9_Init+0x6c>)
 80026e0:	4a16      	ldr	r2, [pc, #88]	; (800273c <MX_TIM9_Init+0x70>)
 80026e2:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 60-1;
 80026e4:	4b14      	ldr	r3, [pc, #80]	; (8002738 <MX_TIM9_Init+0x6c>)
 80026e6:	223b      	movs	r2, #59	; 0x3b
 80026e8:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026ea:	4b13      	ldr	r3, [pc, #76]	; (8002738 <MX_TIM9_Init+0x6c>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 80026f0:	4b11      	ldr	r3, [pc, #68]	; (8002738 <MX_TIM9_Init+0x6c>)
 80026f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026f6:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026f8:	4b0f      	ldr	r3, [pc, #60]	; (8002738 <MX_TIM9_Init+0x6c>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026fe:	4b0e      	ldr	r3, [pc, #56]	; (8002738 <MX_TIM9_Init+0x6c>)
 8002700:	2200      	movs	r2, #0
 8002702:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002704:	480c      	ldr	r0, [pc, #48]	; (8002738 <MX_TIM9_Init+0x6c>)
 8002706:	f008 fc0d 	bl	800af24 <HAL_TIM_Base_Init>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8002710:	f000 fc6a 	bl	8002fe8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002714:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002718:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800271a:	463b      	mov	r3, r7
 800271c:	4619      	mov	r1, r3
 800271e:	4806      	ldr	r0, [pc, #24]	; (8002738 <MX_TIM9_Init+0x6c>)
 8002720:	f008 fda6 	bl	800b270 <HAL_TIM_ConfigClockSource>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 800272a:	f000 fc5d 	bl	8002fe8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 800272e:	bf00      	nop
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	20003f0c 	.word	0x20003f0c
 800273c:	40014000 	.word	0x40014000

08002740 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002744:	4b0e      	ldr	r3, [pc, #56]	; (8002780 <MX_TIM10_Init+0x40>)
 8002746:	4a0f      	ldr	r2, [pc, #60]	; (8002784 <MX_TIM10_Init+0x44>)
 8002748:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 60000-1;
 800274a:	4b0d      	ldr	r3, [pc, #52]	; (8002780 <MX_TIM10_Init+0x40>)
 800274c:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8002750:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002752:	4b0b      	ldr	r3, [pc, #44]	; (8002780 <MX_TIM10_Init+0x40>)
 8002754:	2200      	movs	r2, #0
 8002756:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8002758:	4b09      	ldr	r3, [pc, #36]	; (8002780 <MX_TIM10_Init+0x40>)
 800275a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800275e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002760:	4b07      	ldr	r3, [pc, #28]	; (8002780 <MX_TIM10_Init+0x40>)
 8002762:	2200      	movs	r2, #0
 8002764:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002766:	4b06      	ldr	r3, [pc, #24]	; (8002780 <MX_TIM10_Init+0x40>)
 8002768:	2200      	movs	r2, #0
 800276a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800276c:	4804      	ldr	r0, [pc, #16]	; (8002780 <MX_TIM10_Init+0x40>)
 800276e:	f008 fbd9 	bl	800af24 <HAL_TIM_Base_Init>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8002778:	f000 fc36 	bl	8002fe8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800277c:	bf00      	nop
 800277e:	bd80      	pop	{r7, pc}
 8002780:	20003cc4 	.word	0x20003cc4
 8002784:	40014400 	.word	0x40014400

08002788 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800278c:	4b11      	ldr	r3, [pc, #68]	; (80027d4 <MX_USART1_UART_Init+0x4c>)
 800278e:	4a12      	ldr	r2, [pc, #72]	; (80027d8 <MX_USART1_UART_Init+0x50>)
 8002790:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002792:	4b10      	ldr	r3, [pc, #64]	; (80027d4 <MX_USART1_UART_Init+0x4c>)
 8002794:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002798:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800279a:	4b0e      	ldr	r3, [pc, #56]	; (80027d4 <MX_USART1_UART_Init+0x4c>)
 800279c:	2200      	movs	r2, #0
 800279e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80027a0:	4b0c      	ldr	r3, [pc, #48]	; (80027d4 <MX_USART1_UART_Init+0x4c>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80027a6:	4b0b      	ldr	r3, [pc, #44]	; (80027d4 <MX_USART1_UART_Init+0x4c>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80027ac:	4b09      	ldr	r3, [pc, #36]	; (80027d4 <MX_USART1_UART_Init+0x4c>)
 80027ae:	220c      	movs	r2, #12
 80027b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80027b2:	4b08      	ldr	r3, [pc, #32]	; (80027d4 <MX_USART1_UART_Init+0x4c>)
 80027b4:	f44f 7240 	mov.w	r2, #768	; 0x300
 80027b8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80027ba:	4b06      	ldr	r3, [pc, #24]	; (80027d4 <MX_USART1_UART_Init+0x4c>)
 80027bc:	2200      	movs	r2, #0
 80027be:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027c0:	4804      	ldr	r0, [pc, #16]	; (80027d4 <MX_USART1_UART_Init+0x4c>)
 80027c2:	f008 ffdd 	bl	800b780 <HAL_UART_Init>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 80027cc:	f000 fc0c 	bl	8002fe8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80027d0:	bf00      	nop
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	20003de8 	.word	0x20003de8
 80027d8:	40011000 	.word	0x40011000

080027dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80027e0:	4b11      	ldr	r3, [pc, #68]	; (8002828 <MX_USART2_UART_Init+0x4c>)
 80027e2:	4a12      	ldr	r2, [pc, #72]	; (800282c <MX_USART2_UART_Init+0x50>)
 80027e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80027e6:	4b10      	ldr	r3, [pc, #64]	; (8002828 <MX_USART2_UART_Init+0x4c>)
 80027e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80027ee:	4b0e      	ldr	r3, [pc, #56]	; (8002828 <MX_USART2_UART_Init+0x4c>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80027f4:	4b0c      	ldr	r3, [pc, #48]	; (8002828 <MX_USART2_UART_Init+0x4c>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80027fa:	4b0b      	ldr	r3, [pc, #44]	; (8002828 <MX_USART2_UART_Init+0x4c>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002800:	4b09      	ldr	r3, [pc, #36]	; (8002828 <MX_USART2_UART_Init+0x4c>)
 8002802:	220c      	movs	r2, #12
 8002804:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002806:	4b08      	ldr	r3, [pc, #32]	; (8002828 <MX_USART2_UART_Init+0x4c>)
 8002808:	2200      	movs	r2, #0
 800280a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800280c:	4b06      	ldr	r3, [pc, #24]	; (8002828 <MX_USART2_UART_Init+0x4c>)
 800280e:	2200      	movs	r2, #0
 8002810:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002812:	4805      	ldr	r0, [pc, #20]	; (8002828 <MX_USART2_UART_Init+0x4c>)
 8002814:	f008 ffb4 	bl	800b780 <HAL_UART_Init>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800281e:	f000 fbe3 	bl	8002fe8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002822:	bf00      	nop
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	20004094 	.word	0x20004094
 800282c:	40004400 	.word	0x40004400

08002830 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002836:	2300      	movs	r3, #0
 8002838:	607b      	str	r3, [r7, #4]
 800283a:	4b14      	ldr	r3, [pc, #80]	; (800288c <MX_DMA_Init+0x5c>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283e:	4a13      	ldr	r2, [pc, #76]	; (800288c <MX_DMA_Init+0x5c>)
 8002840:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002844:	6313      	str	r3, [r2, #48]	; 0x30
 8002846:	4b11      	ldr	r3, [pc, #68]	; (800288c <MX_DMA_Init+0x5c>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800284e:	607b      	str	r3, [r7, #4]
 8002850:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 3, 0);
 8002852:	2200      	movs	r2, #0
 8002854:	2103      	movs	r1, #3
 8002856:	2038      	movs	r0, #56	; 0x38
 8002858:	f004 fcc5 	bl	80071e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800285c:	2038      	movs	r0, #56	; 0x38
 800285e:	f004 fcde 	bl	800721e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8002862:	2200      	movs	r2, #0
 8002864:	2100      	movs	r1, #0
 8002866:	203b      	movs	r0, #59	; 0x3b
 8002868:	f004 fcbd 	bl	80071e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800286c:	203b      	movs	r0, #59	; 0x3b
 800286e:	f004 fcd6 	bl	800721e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8002872:	2200      	movs	r2, #0
 8002874:	2100      	movs	r1, #0
 8002876:	2045      	movs	r0, #69	; 0x45
 8002878:	f004 fcb5 	bl	80071e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800287c:	2045      	movs	r0, #69	; 0x45
 800287e:	f004 fcce 	bl	800721e <HAL_NVIC_EnableIRQ>

}
 8002882:	bf00      	nop
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	40023800 	.word	0x40023800

08002890 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b08a      	sub	sp, #40	; 0x28
 8002894:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002896:	f107 0314 	add.w	r3, r7, #20
 800289a:	2200      	movs	r2, #0
 800289c:	601a      	str	r2, [r3, #0]
 800289e:	605a      	str	r2, [r3, #4]
 80028a0:	609a      	str	r2, [r3, #8]
 80028a2:	60da      	str	r2, [r3, #12]
 80028a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028a6:	2300      	movs	r3, #0
 80028a8:	613b      	str	r3, [r7, #16]
 80028aa:	4b48      	ldr	r3, [pc, #288]	; (80029cc <MX_GPIO_Init+0x13c>)
 80028ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ae:	4a47      	ldr	r2, [pc, #284]	; (80029cc <MX_GPIO_Init+0x13c>)
 80028b0:	f043 0304 	orr.w	r3, r3, #4
 80028b4:	6313      	str	r3, [r2, #48]	; 0x30
 80028b6:	4b45      	ldr	r3, [pc, #276]	; (80029cc <MX_GPIO_Init+0x13c>)
 80028b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ba:	f003 0304 	and.w	r3, r3, #4
 80028be:	613b      	str	r3, [r7, #16]
 80028c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80028c2:	2300      	movs	r3, #0
 80028c4:	60fb      	str	r3, [r7, #12]
 80028c6:	4b41      	ldr	r3, [pc, #260]	; (80029cc <MX_GPIO_Init+0x13c>)
 80028c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ca:	4a40      	ldr	r2, [pc, #256]	; (80029cc <MX_GPIO_Init+0x13c>)
 80028cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028d0:	6313      	str	r3, [r2, #48]	; 0x30
 80028d2:	4b3e      	ldr	r3, [pc, #248]	; (80029cc <MX_GPIO_Init+0x13c>)
 80028d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028da:	60fb      	str	r3, [r7, #12]
 80028dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028de:	2300      	movs	r3, #0
 80028e0:	60bb      	str	r3, [r7, #8]
 80028e2:	4b3a      	ldr	r3, [pc, #232]	; (80029cc <MX_GPIO_Init+0x13c>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e6:	4a39      	ldr	r2, [pc, #228]	; (80029cc <MX_GPIO_Init+0x13c>)
 80028e8:	f043 0301 	orr.w	r3, r3, #1
 80028ec:	6313      	str	r3, [r2, #48]	; 0x30
 80028ee:	4b37      	ldr	r3, [pc, #220]	; (80029cc <MX_GPIO_Init+0x13c>)
 80028f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	60bb      	str	r3, [r7, #8]
 80028f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028fa:	2300      	movs	r3, #0
 80028fc:	607b      	str	r3, [r7, #4]
 80028fe:	4b33      	ldr	r3, [pc, #204]	; (80029cc <MX_GPIO_Init+0x13c>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002902:	4a32      	ldr	r2, [pc, #200]	; (80029cc <MX_GPIO_Init+0x13c>)
 8002904:	f043 0302 	orr.w	r3, r3, #2
 8002908:	6313      	str	r3, [r2, #48]	; 0x30
 800290a:	4b30      	ldr	r3, [pc, #192]	; (80029cc <MX_GPIO_Init+0x13c>)
 800290c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	607b      	str	r3, [r7, #4]
 8002914:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_OUT_4_1EN_GPIO_Port, GPIO_OUT_4_1EN_Pin, GPIO_PIN_RESET);
 8002916:	2200      	movs	r2, #0
 8002918:	2110      	movs	r1, #16
 800291a:	482d      	ldr	r0, [pc, #180]	; (80029d0 <MX_GPIO_Init+0x140>)
 800291c:	f005 f9d4 	bl	8007cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_OUT_DTR_Pin|GPIO_OUT_RESET_Pin|GPIO_OUT_PWRKEY_Pin|GPIO_OUT_LED_Pin
 8002920:	2200      	movs	r2, #0
 8002922:	f247 0142 	movw	r1, #28738	; 0x7042
 8002926:	482b      	ldr	r0, [pc, #172]	; (80029d4 <MX_GPIO_Init+0x144>)
 8002928:	f005 f9ce 	bl	8007cc8 <HAL_GPIO_WritePin>
                          |GPIO_OUT_U_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : GPIO_OUT_4_1EN_Pin */
  GPIO_InitStruct.Pin = GPIO_OUT_4_1EN_Pin;
 800292c:	2310      	movs	r3, #16
 800292e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002930:	2301      	movs	r3, #1
 8002932:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002934:	2300      	movs	r3, #0
 8002936:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002938:	2300      	movs	r3, #0
 800293a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIO_OUT_4_1EN_GPIO_Port, &GPIO_InitStruct);
 800293c:	f107 0314 	add.w	r3, r7, #20
 8002940:	4619      	mov	r1, r3
 8002942:	4823      	ldr	r0, [pc, #140]	; (80029d0 <MX_GPIO_Init+0x140>)
 8002944:	f005 f824 	bl	8007990 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_IN_POWERSTAT_Pin GPIO_IN_RI_Pin GPIO_IN_DCD_Pin GPIO_TH_DATA_Pin */
  GPIO_InitStruct.Pin = GPIO_IN_POWERSTAT_Pin|GPIO_IN_RI_Pin|GPIO_IN_DCD_Pin|GPIO_TH_DATA_Pin;
 8002948:	f240 6305 	movw	r3, #1541	; 0x605
 800294c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800294e:	2300      	movs	r3, #0
 8002950:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002952:	2300      	movs	r3, #0
 8002954:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002956:	f107 0314 	add.w	r3, r7, #20
 800295a:	4619      	mov	r1, r3
 800295c:	481d      	ldr	r0, [pc, #116]	; (80029d4 <MX_GPIO_Init+0x144>)
 800295e:	f005 f817 	bl	8007990 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_OUT_DTR_Pin GPIO_OUT_RESET_Pin GPIO_OUT_PWRKEY_Pin GPIO_OUT_LED_Pin
                           GPIO_OUT_U_CS_Pin */
  GPIO_InitStruct.Pin = GPIO_OUT_DTR_Pin|GPIO_OUT_RESET_Pin|GPIO_OUT_PWRKEY_Pin|GPIO_OUT_LED_Pin
 8002962:	f247 0342 	movw	r3, #28738	; 0x7042
 8002966:	617b      	str	r3, [r7, #20]
                          |GPIO_OUT_U_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002968:	2301      	movs	r3, #1
 800296a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296c:	2300      	movs	r3, #0
 800296e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002970:	2300      	movs	r3, #0
 8002972:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002974:	f107 0314 	add.w	r3, r7, #20
 8002978:	4619      	mov	r1, r3
 800297a:	4816      	ldr	r0, [pc, #88]	; (80029d4 <MX_GPIO_Init+0x144>)
 800297c:	f005 f808 	bl	8007990 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CD_Pin */
  GPIO_InitStruct.Pin = SD_CD_Pin;
 8002980:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002984:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002986:	2300      	movs	r3, #0
 8002988:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298a:	2300      	movs	r3, #0
 800298c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_CD_GPIO_Port, &GPIO_InitStruct);
 800298e:	f107 0314 	add.w	r3, r7, #20
 8002992:	4619      	mov	r1, r3
 8002994:	480e      	ldr	r0, [pc, #56]	; (80029d0 <MX_GPIO_Init+0x140>)
 8002996:	f004 fffb 	bl	8007990 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_IN_WINDCOUNT_Pin */
  GPIO_InitStruct.Pin = GPIO_IN_WINDCOUNT_Pin;
 800299a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800299e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029a0:	4b0d      	ldr	r3, [pc, #52]	; (80029d8 <MX_GPIO_Init+0x148>)
 80029a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a4:	2300      	movs	r3, #0
 80029a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_IN_WINDCOUNT_GPIO_Port, &GPIO_InitStruct);
 80029a8:	f107 0314 	add.w	r3, r7, #20
 80029ac:	4619      	mov	r1, r3
 80029ae:	4809      	ldr	r0, [pc, #36]	; (80029d4 <MX_GPIO_Init+0x144>)
 80029b0:	f004 ffee 	bl	8007990 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 80029b4:	2200      	movs	r2, #0
 80029b6:	2101      	movs	r1, #1
 80029b8:	2017      	movs	r0, #23
 80029ba:	f004 fc14 	bl	80071e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80029be:	2017      	movs	r0, #23
 80029c0:	f004 fc2d 	bl	800721e <HAL_NVIC_EnableIRQ>

}
 80029c4:	bf00      	nop
 80029c6:	3728      	adds	r7, #40	; 0x28
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	40023800 	.word	0x40023800
 80029d0:	40020000 	.word	0x40020000
 80029d4:	40020400 	.word	0x40020400
 80029d8:	10110000 	.word	0x10110000

080029dc <getHRTC>:

/* USER CODE BEGIN 4 */

RTC_HandleTypeDef * getHRTC(void){
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
	return &hrtc;
 80029e0:	4b02      	ldr	r3, [pc, #8]	; (80029ec <getHRTC+0x10>)
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr
 80029ec:	20003e88 	.word	0x20003e88

080029f0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	4603      	mov	r3, r0
 80029f8:	80fb      	strh	r3, [r7, #6]
//	unsigned int timems;
//	char buf[30];
//	timems = (unsigned int)timer10_ms_get();
	if(GPIO_Pin == GPIO_IN_WINDCOUNT_Pin){//this is the windspeed external interrupt occurring on a rising edge; at 200mph = at least 11.25 ms apart
 80029fa:	88fb      	ldrh	r3, [r7, #6]
 80029fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a00:	d10d      	bne.n	8002a1e <HAL_GPIO_EXTI_Callback+0x2e>
//		sprintf(buf, "XTime %u \r\n", timems);
//		Uart_SendString(buf, pc_uart);

//		delay_us(5);//debounce for 5us

		if(HAL_GPIO_ReadPin(GPIO_IN_WINDCOUNT_GPIO_Port, GPIO_IN_WINDCOUNT_Pin)){
 8002a02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a06:	4809      	ldr	r0, [pc, #36]	; (8002a2c <HAL_GPIO_EXTI_Callback+0x3c>)
 8002a08:	f005 f946 	bl	8007c98 <HAL_GPIO_ReadPin>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d005      	beq.n	8002a1e <HAL_GPIO_EXTI_Callback+0x2e>
//			Uart_SendString("O\r\n", pc_uart);
			windCount++;
 8002a12:	4b07      	ldr	r3, [pc, #28]	; (8002a30 <HAL_GPIO_EXTI_Callback+0x40>)
 8002a14:	881b      	ldrh	r3, [r3, #0]
 8002a16:	3301      	adds	r3, #1
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	4b05      	ldr	r3, [pc, #20]	; (8002a30 <HAL_GPIO_EXTI_Callback+0x40>)
 8002a1c:	801a      	strh	r2, [r3, #0]
		}
	}
	timer10_ms_restart();
 8002a1e:	f000 fac7 	bl	8002fb0 <timer10_ms_restart>
}
 8002a22:	bf00      	nop
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	40020400 	.word	0x40020400
 8002a30:	200040d8 	.word	0x200040d8
 8002a34:	00000000 	.word	0x00000000

08002a38 <HAL_TIM_PeriodElapsedCallback>:

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a38:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002a3c:	ed2d 8b02 	vpush	{d8}
 8002a40:	b084      	sub	sp, #16
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
	// Check which version of the timer triggered this callback and toggle LED
	if (htim == &htim3 )
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4abd      	ldr	r2, [pc, #756]	; (8002d40 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	f040 81ce 	bne.w	8002dec <HAL_TIM_PeriodElapsedCallback+0x3b4>
	{
//		HAL_GPIO_TogglePin(GPIO_OUT_LED_GPIO_Port, GPIO_OUT_LED_Pin);

		uint16_t p = windCount;
 8002a50:	4bbc      	ldr	r3, [pc, #752]	; (8002d44 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8002a52:	881b      	ldrh	r3, [r3, #0]
 8002a54:	81fb      	strh	r3, [r7, #14]
		windCount = 0;
 8002a56:	4bbb      	ldr	r3, [pc, #748]	; (8002d44 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	801a      	strh	r2, [r3, #0]

//	    mph = p * (2.25/PERIOD);

		if(p == 0){
 8002a5c:	89fb      	ldrh	r3, [r7, #14]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <HAL_TIM_PeriodElapsedCallback+0x2e>
			timer10_ms_restart();
 8002a62:	f000 faa5 	bl	8002fb0 <timer10_ms_restart>
		}

		mph = p;
 8002a66:	4ab8      	ldr	r2, [pc, #736]	; (8002d48 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8002a68:	89fb      	ldrh	r3, [r7, #14]
 8002a6a:	8013      	strh	r3, [r2, #0]
	    direction = 0.087890625 * adcValues[0];
 8002a6c:	4bb7      	ldr	r3, [pc, #732]	; (8002d4c <HAL_TIM_PeriodElapsedCallback+0x314>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7fd fd5f 	bl	8000534 <__aeabi_ui2d>
 8002a76:	f04f 0200 	mov.w	r2, #0
 8002a7a:	4bb5      	ldr	r3, [pc, #724]	; (8002d50 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8002a7c:	f7fd fdd4 	bl	8000628 <__aeabi_dmul>
 8002a80:	4602      	mov	r2, r0
 8002a82:	460b      	mov	r3, r1
 8002a84:	4610      	mov	r0, r2
 8002a86:	4619      	mov	r1, r3
 8002a88:	f7fe f8c6 	bl	8000c18 <__aeabi_d2f>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	4ab1      	ldr	r2, [pc, #708]	; (8002d54 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8002a90:	6013      	str	r3, [r2, #0]
//	    sprintf(buffer, "$FFWX,0,%i,%.0f\r\n",mph,direction);
//	   	Uart_SendString(buffer, pc_uart);

//	   	getEpochTime();

	    vectorX += mph * sin(deg2rad * direction);
 8002a92:	4bb1      	ldr	r3, [pc, #708]	; (8002d58 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7fd fd6e 	bl	8000578 <__aeabi_f2d>
 8002a9c:	4604      	mov	r4, r0
 8002a9e:	460d      	mov	r5, r1
 8002aa0:	4ba9      	ldr	r3, [pc, #676]	; (8002d48 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8002aa2:	881b      	ldrh	r3, [r3, #0]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7fd fd55 	bl	8000554 <__aeabi_i2d>
 8002aaa:	4680      	mov	r8, r0
 8002aac:	4689      	mov	r9, r1
 8002aae:	4ba9      	ldr	r3, [pc, #676]	; (8002d54 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7fd fd60 	bl	8000578 <__aeabi_f2d>
 8002ab8:	a39b      	add	r3, pc, #620	; (adr r3, 8002d28 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8002aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002abe:	f7fd fdb3 	bl	8000628 <__aeabi_dmul>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	ec43 2b17 	vmov	d7, r2, r3
 8002aca:	eeb0 0a47 	vmov.f32	s0, s14
 8002ace:	eef0 0a67 	vmov.f32	s1, s15
 8002ad2:	f013 f9b5 	bl	8015e40 <sin>
 8002ad6:	ec53 2b10 	vmov	r2, r3, d0
 8002ada:	4640      	mov	r0, r8
 8002adc:	4649      	mov	r1, r9
 8002ade:	f7fd fda3 	bl	8000628 <__aeabi_dmul>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	4620      	mov	r0, r4
 8002ae8:	4629      	mov	r1, r5
 8002aea:	f7fd fbe7 	bl	80002bc <__adddf3>
 8002aee:	4602      	mov	r2, r0
 8002af0:	460b      	mov	r3, r1
 8002af2:	4610      	mov	r0, r2
 8002af4:	4619      	mov	r1, r3
 8002af6:	f7fe f88f 	bl	8000c18 <__aeabi_d2f>
 8002afa:	4603      	mov	r3, r0
 8002afc:	4a96      	ldr	r2, [pc, #600]	; (8002d58 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8002afe:	6013      	str	r3, [r2, #0]
	    vectorY += mph * cos(deg2rad * direction);
 8002b00:	4b96      	ldr	r3, [pc, #600]	; (8002d5c <HAL_TIM_PeriodElapsedCallback+0x324>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7fd fd37 	bl	8000578 <__aeabi_f2d>
 8002b0a:	4604      	mov	r4, r0
 8002b0c:	460d      	mov	r5, r1
 8002b0e:	4b8e      	ldr	r3, [pc, #568]	; (8002d48 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8002b10:	881b      	ldrh	r3, [r3, #0]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7fd fd1e 	bl	8000554 <__aeabi_i2d>
 8002b18:	4680      	mov	r8, r0
 8002b1a:	4689      	mov	r9, r1
 8002b1c:	4b8d      	ldr	r3, [pc, #564]	; (8002d54 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7fd fd29 	bl	8000578 <__aeabi_f2d>
 8002b26:	a380      	add	r3, pc, #512	; (adr r3, 8002d28 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8002b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b2c:	f7fd fd7c 	bl	8000628 <__aeabi_dmul>
 8002b30:	4602      	mov	r2, r0
 8002b32:	460b      	mov	r3, r1
 8002b34:	ec43 2b17 	vmov	d7, r2, r3
 8002b38:	eeb0 0a47 	vmov.f32	s0, s14
 8002b3c:	eef0 0a67 	vmov.f32	s1, s15
 8002b40:	f013 f92e 	bl	8015da0 <cos>
 8002b44:	ec53 2b10 	vmov	r2, r3, d0
 8002b48:	4640      	mov	r0, r8
 8002b4a:	4649      	mov	r1, r9
 8002b4c:	f7fd fd6c 	bl	8000628 <__aeabi_dmul>
 8002b50:	4602      	mov	r2, r0
 8002b52:	460b      	mov	r3, r1
 8002b54:	4620      	mov	r0, r4
 8002b56:	4629      	mov	r1, r5
 8002b58:	f7fd fbb0 	bl	80002bc <__adddf3>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	460b      	mov	r3, r1
 8002b60:	4610      	mov	r0, r2
 8002b62:	4619      	mov	r1, r3
 8002b64:	f7fe f858 	bl	8000c18 <__aeabi_d2f>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	4a7c      	ldr	r2, [pc, #496]	; (8002d5c <HAL_TIM_PeriodElapsedCallback+0x324>)
 8002b6c:	6013      	str	r3, [r2, #0]

	    if(mph < minSpeed){
 8002b6e:	4b76      	ldr	r3, [pc, #472]	; (8002d48 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8002b70:	881a      	ldrh	r2, [r3, #0]
 8002b72:	4b7b      	ldr	r3, [pc, #492]	; (8002d60 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8002b74:	881b      	ldrh	r3, [r3, #0]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d203      	bcs.n	8002b82 <HAL_TIM_PeriodElapsedCallback+0x14a>
	        minSpeed = mph;
 8002b7a:	4b73      	ldr	r3, [pc, #460]	; (8002d48 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8002b7c:	881a      	ldrh	r2, [r3, #0]
 8002b7e:	4b78      	ldr	r3, [pc, #480]	; (8002d60 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8002b80:	801a      	strh	r2, [r3, #0]
	    }
	    if(mph > maxSpeed){
 8002b82:	4b71      	ldr	r3, [pc, #452]	; (8002d48 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8002b84:	881a      	ldrh	r2, [r3, #0]
 8002b86:	4b77      	ldr	r3, [pc, #476]	; (8002d64 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8002b88:	881b      	ldrh	r3, [r3, #0]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d903      	bls.n	8002b96 <HAL_TIM_PeriodElapsedCallback+0x15e>
	        maxSpeed = mph;
 8002b8e:	4b6e      	ldr	r3, [pc, #440]	; (8002d48 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8002b90:	881a      	ldrh	r2, [r3, #0]
 8002b92:	4b74      	ldr	r3, [pc, #464]	; (8002d64 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8002b94:	801a      	strh	r2, [r3, #0]
	    }

	    batSum += adcValues[1]*getSettings()->BCL;
 8002b96:	4b6d      	ldr	r3, [pc, #436]	; (8002d4c <HAL_TIM_PeriodElapsedCallback+0x314>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	ee07 3a90 	vmov	s15, r3
 8002b9e:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8002ba2:	f001 f903 	bl	8003dac <getSettings>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8002bac:	ee28 7a27 	vmul.f32	s14, s16, s15
 8002bb0:	4b6d      	ldr	r3, [pc, #436]	; (8002d68 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8002bb2:	edd3 7a00 	vldr	s15, [r3]
 8002bb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bba:	4b6b      	ldr	r3, [pc, #428]	; (8002d68 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8002bbc:	edc3 7a00 	vstr	s15, [r3]

	    avgCount++;
 8002bc0:	4b6a      	ldr	r3, [pc, #424]	; (8002d6c <HAL_TIM_PeriodElapsedCallback+0x334>)
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	b2da      	uxtb	r2, r3
 8002bc8:	4b68      	ldr	r3, [pc, #416]	; (8002d6c <HAL_TIM_PeriodElapsedCallback+0x334>)
 8002bca:	701a      	strb	r2, [r3, #0]

	    avgNum = getSettings()->AVN;
 8002bcc:	f001 f8ee 	bl	8003dac <getSettings>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	f8b3 20be 	ldrh.w	r2, [r3, #190]	; 0xbe
 8002bd6:	4b66      	ldr	r3, [pc, #408]	; (8002d70 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8002bd8:	801a      	strh	r2, [r3, #0]

	    if(avgCount >= avgNum){
 8002bda:	4b64      	ldr	r3, [pc, #400]	; (8002d6c <HAL_TIM_PeriodElapsedCallback+0x334>)
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	4b63      	ldr	r3, [pc, #396]	; (8002d70 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8002be2:	881b      	ldrh	r3, [r3, #0]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	f0c0 80f7 	bcc.w	8002dd8 <HAL_TIM_PeriodElapsedCallback+0x3a0>

	        vectorX = vectorX/avgNum;
 8002bea:	4b5b      	ldr	r3, [pc, #364]	; (8002d58 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8002bec:	edd3 6a00 	vldr	s13, [r3]
 8002bf0:	4b5f      	ldr	r3, [pc, #380]	; (8002d70 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8002bf2:	881b      	ldrh	r3, [r3, #0]
 8002bf4:	ee07 3a90 	vmov	s15, r3
 8002bf8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c00:	4b55      	ldr	r3, [pc, #340]	; (8002d58 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8002c02:	edc3 7a00 	vstr	s15, [r3]
	        vectorY = vectorY/avgNum;
 8002c06:	4b55      	ldr	r3, [pc, #340]	; (8002d5c <HAL_TIM_PeriodElapsedCallback+0x324>)
 8002c08:	edd3 6a00 	vldr	s13, [r3]
 8002c0c:	4b58      	ldr	r3, [pc, #352]	; (8002d70 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8002c0e:	881b      	ldrh	r3, [r3, #0]
 8002c10:	ee07 3a90 	vmov	s15, r3
 8002c14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c1c:	4b4f      	ldr	r3, [pc, #316]	; (8002d5c <HAL_TIM_PeriodElapsedCallback+0x324>)
 8002c1e:	edc3 7a00 	vstr	s15, [r3]

	        avgSpeed = sqrt(vectorX * vectorX + vectorY * vectorY);
 8002c22:	4b4d      	ldr	r3, [pc, #308]	; (8002d58 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8002c24:	ed93 7a00 	vldr	s14, [r3]
 8002c28:	4b4b      	ldr	r3, [pc, #300]	; (8002d58 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8002c2a:	edd3 7a00 	vldr	s15, [r3]
 8002c2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c32:	4b4a      	ldr	r3, [pc, #296]	; (8002d5c <HAL_TIM_PeriodElapsedCallback+0x324>)
 8002c34:	edd3 6a00 	vldr	s13, [r3]
 8002c38:	4b48      	ldr	r3, [pc, #288]	; (8002d5c <HAL_TIM_PeriodElapsedCallback+0x324>)
 8002c3a:	edd3 7a00 	vldr	s15, [r3]
 8002c3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c46:	ee17 0a90 	vmov	r0, s15
 8002c4a:	f7fd fc95 	bl	8000578 <__aeabi_f2d>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	460b      	mov	r3, r1
 8002c52:	ec43 2b10 	vmov	d0, r2, r3
 8002c56:	f013 f949 	bl	8015eec <sqrt>
 8002c5a:	ec53 2b10 	vmov	r2, r3, d0
 8002c5e:	4610      	mov	r0, r2
 8002c60:	4619      	mov	r1, r3
 8002c62:	f7fd ffd9 	bl	8000c18 <__aeabi_d2f>
 8002c66:	4603      	mov	r3, r0
 8002c68:	4a42      	ldr	r2, [pc, #264]	; (8002d74 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8002c6a:	6013      	str	r3, [r2, #0]
	        avgDirection =  rad2deg * atan2(vectorX, vectorY);
 8002c6c:	4b3a      	ldr	r3, [pc, #232]	; (8002d58 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7fd fc81 	bl	8000578 <__aeabi_f2d>
 8002c76:	4604      	mov	r4, r0
 8002c78:	460d      	mov	r5, r1
 8002c7a:	4b38      	ldr	r3, [pc, #224]	; (8002d5c <HAL_TIM_PeriodElapsedCallback+0x324>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7fd fc7a 	bl	8000578 <__aeabi_f2d>
 8002c84:	4602      	mov	r2, r0
 8002c86:	460b      	mov	r3, r1
 8002c88:	ec43 2b11 	vmov	d1, r2, r3
 8002c8c:	ec45 4b10 	vmov	d0, r4, r5
 8002c90:	f013 f92a 	bl	8015ee8 <atan2>
 8002c94:	ec51 0b10 	vmov	r0, r1, d0
 8002c98:	a325      	add	r3, pc, #148	; (adr r3, 8002d30 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8002c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c9e:	f7fd fcc3 	bl	8000628 <__aeabi_dmul>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	4610      	mov	r0, r2
 8002ca8:	4619      	mov	r1, r3
 8002caa:	f7fd ffb5 	bl	8000c18 <__aeabi_d2f>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	4a31      	ldr	r2, [pc, #196]	; (8002d78 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8002cb2:	6013      	str	r3, [r2, #0]

	        if(avgDirection < 0){
 8002cb4:	4b30      	ldr	r3, [pc, #192]	; (8002d78 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8002cb6:	edd3 7a00 	vldr	s15, [r3]
 8002cba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cc2:	d509      	bpl.n	8002cd8 <HAL_TIM_PeriodElapsedCallback+0x2a0>
	            avgDirection += 360;
 8002cc4:	4b2c      	ldr	r3, [pc, #176]	; (8002d78 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8002cc6:	edd3 7a00 	vldr	s15, [r3]
 8002cca:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8002d7c <HAL_TIM_PeriodElapsedCallback+0x344>
 8002cce:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002cd2:	4b29      	ldr	r3, [pc, #164]	; (8002d78 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8002cd4:	edc3 7a00 	vstr	s15, [r3]
	        }

	        if(avgSpeed < 0.001){
 8002cd8:	4b26      	ldr	r3, [pc, #152]	; (8002d74 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7fd fc4b 	bl	8000578 <__aeabi_f2d>
 8002ce2:	a315      	add	r3, pc, #84	; (adr r3, 8002d38 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce8:	f7fd ff10 	bl	8000b0c <__aeabi_dcmplt>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d003      	beq.n	8002cfa <HAL_TIM_PeriodElapsedCallback+0x2c2>
	            avgDirection = direction;
 8002cf2:	4b18      	ldr	r3, [pc, #96]	; (8002d54 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a20      	ldr	r2, [pc, #128]	; (8002d78 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8002cf8:	6013      	str	r3, [r2, #0]
	        }


	        currentMeasurement.direction = avgDirection;
 8002cfa:	4b1f      	ldr	r3, [pc, #124]	; (8002d78 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a20      	ldr	r2, [pc, #128]	; (8002d80 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8002d00:	6113      	str	r3, [r2, #16]
	        currentMeasurement.mph = avgSpeed;
 8002d02:	4b1c      	ldr	r3, [pc, #112]	; (8002d74 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a1e      	ldr	r2, [pc, #120]	; (8002d80 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8002d08:	60d3      	str	r3, [r2, #12]
	        currentMeasurement.mphMax = maxSpeed;
 8002d0a:	4b16      	ldr	r3, [pc, #88]	; (8002d64 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8002d0c:	881a      	ldrh	r2, [r3, #0]
 8002d0e:	4b1c      	ldr	r3, [pc, #112]	; (8002d80 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8002d10:	82da      	strh	r2, [r3, #22]
	        currentMeasurement.mphMin = minSpeed;
 8002d12:	4b13      	ldr	r3, [pc, #76]	; (8002d60 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8002d14:	881a      	ldrh	r2, [r3, #0]
 8002d16:	4b1a      	ldr	r3, [pc, #104]	; (8002d80 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8002d18:	829a      	strh	r2, [r3, #20]
	        currentMeasurement.battery = batSum/avgNum;
 8002d1a:	4b13      	ldr	r3, [pc, #76]	; (8002d68 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8002d1c:	edd3 6a00 	vldr	s13, [r3]
 8002d20:	e030      	b.n	8002d84 <HAL_TIM_PeriodElapsedCallback+0x34c>
 8002d22:	bf00      	nop
 8002d24:	f3af 8000 	nop.w
 8002d28:	a1fae711 	.word	0xa1fae711
 8002d2c:	3f91df46 	.word	0x3f91df46
 8002d30:	1a47a9e3 	.word	0x1a47a9e3
 8002d34:	404ca5dc 	.word	0x404ca5dc
 8002d38:	d2f1a9fc 	.word	0xd2f1a9fc
 8002d3c:	3f50624d 	.word	0x3f50624d
 8002d40:	20003d54 	.word	0x20003d54
 8002d44:	200040d8 	.word	0x200040d8
 8002d48:	20003f08 	.word	0x20003f08
 8002d4c:	20003c18 	.word	0x20003c18
 8002d50:	3fb68000 	.word	0x3fb68000
 8002d54:	20003d94 	.word	0x20003d94
 8002d58:	20003cc0 	.word	0x20003cc0
 8002d5c:	200040dc 	.word	0x200040dc
 8002d60:	20000004 	.word	0x20000004
 8002d64:	20000aa8 	.word	0x20000aa8
 8002d68:	20003de0 	.word	0x20003de0
 8002d6c:	20003de4 	.word	0x20003de4
 8002d70:	20000008 	.word	0x20000008
 8002d74:	200040e4 	.word	0x200040e4
 8002d78:	20003d10 	.word	0x20003d10
 8002d7c:	43b40000 	.word	0x43b40000
 8002d80:	20003fd0 	.word	0x20003fd0
 8002d84:	4b1d      	ldr	r3, [pc, #116]	; (8002dfc <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8002d86:	881b      	ldrh	r3, [r3, #0]
 8002d88:	ee07 3a90 	vmov	s15, r3
 8002d8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d94:	4b1a      	ldr	r3, [pc, #104]	; (8002e00 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8002d96:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	        newMeasurement = 1;
 8002d9a:	4b1a      	ldr	r3, [pc, #104]	; (8002e04 <HAL_TIM_PeriodElapsedCallback+0x3cc>)
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	701a      	strb	r2, [r3, #0]

	        HAL_GPIO_WritePin(GPIO_OUT_LED_GPIO_Port, GPIO_OUT_LED_Pin,GPIO_PIN_SET);
 8002da0:	2201      	movs	r2, #1
 8002da2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002da6:	4818      	ldr	r0, [pc, #96]	; (8002e08 <HAL_TIM_PeriodElapsedCallback+0x3d0>)
 8002da8:	f004 ff8e 	bl	8007cc8 <HAL_GPIO_WritePin>


	        avgCount = 0;
 8002dac:	4b17      	ldr	r3, [pc, #92]	; (8002e0c <HAL_TIM_PeriodElapsedCallback+0x3d4>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	701a      	strb	r2, [r3, #0]
	        vectorX = 0;
 8002db2:	4b17      	ldr	r3, [pc, #92]	; (8002e10 <HAL_TIM_PeriodElapsedCallback+0x3d8>)
 8002db4:	f04f 0200 	mov.w	r2, #0
 8002db8:	601a      	str	r2, [r3, #0]
	        vectorY = 0;
 8002dba:	4b16      	ldr	r3, [pc, #88]	; (8002e14 <HAL_TIM_PeriodElapsedCallback+0x3dc>)
 8002dbc:	f04f 0200 	mov.w	r2, #0
 8002dc0:	601a      	str	r2, [r3, #0]
	        minSpeed = 1000;
 8002dc2:	4b15      	ldr	r3, [pc, #84]	; (8002e18 <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 8002dc4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002dc8:	801a      	strh	r2, [r3, #0]
	        maxSpeed = 0;
 8002dca:	4b14      	ldr	r3, [pc, #80]	; (8002e1c <HAL_TIM_PeriodElapsedCallback+0x3e4>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	801a      	strh	r2, [r3, #0]
	        batSum = 0;
 8002dd0:	4b13      	ldr	r3, [pc, #76]	; (8002e20 <HAL_TIM_PeriodElapsedCallback+0x3e8>)
 8002dd2:	f04f 0200 	mov.w	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]

	    }

	    if(avgCount == 1){
 8002dd8:	4b0c      	ldr	r3, [pc, #48]	; (8002e0c <HAL_TIM_PeriodElapsedCallback+0x3d4>)
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d105      	bne.n	8002dec <HAL_TIM_PeriodElapsedCallback+0x3b4>
	    	HAL_GPIO_WritePin(GPIO_OUT_LED_GPIO_Port, GPIO_OUT_LED_Pin,GPIO_PIN_RESET);
 8002de0:	2200      	movs	r2, #0
 8002de2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002de6:	4808      	ldr	r0, [pc, #32]	; (8002e08 <HAL_TIM_PeriodElapsedCallback+0x3d0>)
 8002de8:	f004 ff6e 	bl	8007cc8 <HAL_GPIO_WritePin>
	    }
	}
}
 8002dec:	bf00      	nop
 8002dee:	3710      	adds	r7, #16
 8002df0:	46bd      	mov	sp, r7
 8002df2:	ecbd 8b02 	vpop	{d8}
 8002df6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002dfa:	bf00      	nop
 8002dfc:	20000008 	.word	0x20000008
 8002e00:	20003fd0 	.word	0x20003fd0
 8002e04:	20000aaa 	.word	0x20000aaa
 8002e08:	40020400 	.word	0x40020400
 8002e0c:	20003de4 	.word	0x20003de4
 8002e10:	20003cc0 	.word	0x20003cc0
 8002e14:	200040dc 	.word	0x200040dc
 8002e18:	20000004 	.word	0x20000004
 8002e1c:	20000aa8 	.word	0x20000aa8
 8002e20:	20003de0 	.word	0x20003de0

08002e24 <user_spi_read>:

int8_t user_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint16_t len){
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	6039      	str	r1, [r7, #0]
 8002e2e:	71fb      	strb	r3, [r7, #7]
 8002e30:	4613      	mov	r3, r2
 8002e32:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(GPIO_OUT_U_CS_GPIO_Port, GPIO_OUT_U_CS_Pin, GPIO_PIN_RESET);
 8002e34:	2200      	movs	r2, #0
 8002e36:	2140      	movs	r1, #64	; 0x40
 8002e38:	480d      	ldr	r0, [pc, #52]	; (8002e70 <user_spi_read+0x4c>)
 8002e3a:	f004 ff45 	bl	8007cc8 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, &reg_addr , 1,1);
 8002e3e:	1df9      	adds	r1, r7, #7
 8002e40:	2301      	movs	r3, #1
 8002e42:	2201      	movs	r2, #1
 8002e44:	480b      	ldr	r0, [pc, #44]	; (8002e74 <user_spi_read+0x50>)
 8002e46:	f007 fb7d 	bl	800a544 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, reg_data, len,1);
 8002e4a:	88ba      	ldrh	r2, [r7, #4]
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	6839      	ldr	r1, [r7, #0]
 8002e50:	4808      	ldr	r0, [pc, #32]	; (8002e74 <user_spi_read+0x50>)
 8002e52:	f007 fcab 	bl	800a7ac <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIO_OUT_U_CS_GPIO_Port, GPIO_OUT_U_CS_Pin, GPIO_PIN_SET);
 8002e56:	2201      	movs	r2, #1
 8002e58:	2140      	movs	r1, #64	; 0x40
 8002e5a:	4805      	ldr	r0, [pc, #20]	; (8002e70 <user_spi_read+0x4c>)
 8002e5c:	f004 ff34 	bl	8007cc8 <HAL_GPIO_WritePin>

	int8_t rslt = 0;				// fake goodness
 8002e60:	2300      	movs	r3, #0
 8002e62:	73fb      	strb	r3, [r7, #15]


	return(rslt);
 8002e64:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3710      	adds	r7, #16
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	40020400 	.word	0x40020400
 8002e74:	20003ffc 	.word	0x20003ffc

08002e78 <user_spi_write>:

int8_t user_spi_write(uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	4603      	mov	r3, r0
 8002e80:	6039      	str	r1, [r7, #0]
 8002e82:	71fb      	strb	r3, [r7, #7]
 8002e84:	4613      	mov	r3, r2
 8002e86:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(GPIO_OUT_U_CS_GPIO_Port, GPIO_OUT_U_CS_Pin, GPIO_PIN_RESET);
 8002e88:	2200      	movs	r2, #0
 8002e8a:	2140      	movs	r1, #64	; 0x40
 8002e8c:	480f      	ldr	r0, [pc, #60]	; (8002ecc <user_spi_write+0x54>)
 8002e8e:	f004 ff1b 	bl	8007cc8 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, &reg_addr , 1,1);
 8002e92:	1df9      	adds	r1, r7, #7
 8002e94:	2301      	movs	r3, #1
 8002e96:	2201      	movs	r2, #1
 8002e98:	480d      	ldr	r0, [pc, #52]	; (8002ed0 <user_spi_write+0x58>)
 8002e9a:	f007 fb53 	bl	800a544 <HAL_SPI_Transmit>
	if(len > 0){
 8002e9e:	88bb      	ldrh	r3, [r7, #4]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d005      	beq.n	8002eb0 <user_spi_write+0x38>
		HAL_SPI_Transmit(&hspi1, reg_data, len,1);
 8002ea4:	88ba      	ldrh	r2, [r7, #4]
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	6839      	ldr	r1, [r7, #0]
 8002eaa:	4809      	ldr	r0, [pc, #36]	; (8002ed0 <user_spi_write+0x58>)
 8002eac:	f007 fb4a 	bl	800a544 <HAL_SPI_Transmit>
	}


	HAL_GPIO_WritePin(GPIO_OUT_U_CS_GPIO_Port, GPIO_OUT_U_CS_Pin, GPIO_PIN_SET);
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	2140      	movs	r1, #64	; 0x40
 8002eb4:	4805      	ldr	r0, [pc, #20]	; (8002ecc <user_spi_write+0x54>)
 8002eb6:	f004 ff07 	bl	8007cc8 <HAL_GPIO_WritePin>

	int8_t rslt = 0; // fake goodness
 8002eba:	2300      	movs	r3, #0
 8002ebc:	73fb      	strb	r3, [r7, #15]


	return(rslt);
 8002ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	40020400 	.word	0x40020400
 8002ed0:	20003ffc 	.word	0x20003ffc

08002ed4 <delay_us>:

void delay_us (uint16_t us)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	4603      	mov	r3, r0
 8002edc:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim9,0);  // set the counter value a 0
 8002ede:	4b09      	ldr	r3, [pc, #36]	; (8002f04 <delay_us+0x30>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim9) < us);  // wait for the counter to reach the us input in the parameter
 8002ee6:	bf00      	nop
 8002ee8:	4b06      	ldr	r3, [pc, #24]	; (8002f04 <delay_us+0x30>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002eee:	88fb      	ldrh	r3, [r7, #6]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d3f9      	bcc.n	8002ee8 <delay_us+0x14>
}
 8002ef4:	bf00      	nop
 8002ef6:	bf00      	nop
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	20003f0c 	.word	0x20003f0c

08002f08 <timer2_ms_restart>:

void timer2_ms_restart(void){
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop(&htim2);
 8002f0c:	4805      	ldr	r0, [pc, #20]	; (8002f24 <timer2_ms_restart+0x1c>)
 8002f0e:	f008 f858 	bl	800afc2 <HAL_TIM_Base_Stop>
	__HAL_TIM_SET_COUNTER(&htim2,0);  // set the counter value a 0
 8002f12:	4b04      	ldr	r3, [pc, #16]	; (8002f24 <timer2_ms_restart+0x1c>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2200      	movs	r2, #0
 8002f18:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start(&htim2);
 8002f1a:	4802      	ldr	r0, [pc, #8]	; (8002f24 <timer2_ms_restart+0x1c>)
 8002f1c:	f008 f82d 	bl	800af7a <HAL_TIM_Base_Start>
}
 8002f20:	bf00      	nop
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	20004054 	.word	0x20004054

08002f28 <timer2_ms_get>:

uint32_t timer2_ms_get(void){
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim2);
 8002f2c:	4b03      	ldr	r3, [pc, #12]	; (8002f3c <timer2_ms_get+0x14>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr
 8002f3c:	20004054 	.word	0x20004054

08002f40 <timer4_ms_restart>:

void timer4_ms_restart(void){
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop(&htim4);
 8002f44:	4805      	ldr	r0, [pc, #20]	; (8002f5c <timer4_ms_restart+0x1c>)
 8002f46:	f008 f83c 	bl	800afc2 <HAL_TIM_Base_Stop>
	__HAL_TIM_SET_COUNTER(&htim4,0);  // set the counter value a 0
 8002f4a:	4b04      	ldr	r3, [pc, #16]	; (8002f5c <timer4_ms_restart+0x1c>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start(&htim4);
 8002f52:	4802      	ldr	r0, [pc, #8]	; (8002f5c <timer4_ms_restart+0x1c>)
 8002f54:	f008 f811 	bl	800af7a <HAL_TIM_Base_Start>
}
 8002f58:	bf00      	nop
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	20003c80 	.word	0x20003c80

08002f60 <timer4_ms_get>:

uint32_t timer4_ms_get(void){
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim4);
 8002f64:	4b03      	ldr	r3, [pc, #12]	; (8002f74 <timer4_ms_get+0x14>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr
 8002f74:	20003c80 	.word	0x20003c80

08002f78 <timer5_ms_restart>:

void timer5_ms_restart(void){
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop(&htim5);
 8002f7c:	4805      	ldr	r0, [pc, #20]	; (8002f94 <timer5_ms_restart+0x1c>)
 8002f7e:	f008 f820 	bl	800afc2 <HAL_TIM_Base_Stop>
	__HAL_TIM_SET_COUNTER(&htim5,0);  // set the counter value a 0
 8002f82:	4b04      	ldr	r3, [pc, #16]	; (8002f94 <timer5_ms_restart+0x1c>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2200      	movs	r2, #0
 8002f88:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start(&htim5);
 8002f8a:	4802      	ldr	r0, [pc, #8]	; (8002f94 <timer5_ms_restart+0x1c>)
 8002f8c:	f007 fff5 	bl	800af7a <HAL_TIM_Base_Start>
}
 8002f90:	bf00      	nop
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	20003d14 	.word	0x20003d14

08002f98 <timer5_ms_get>:

uint32_t timer5_ms_get(void){
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5);
 8002f9c:	4b03      	ldr	r3, [pc, #12]	; (8002fac <timer5_ms_get+0x14>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr
 8002fac:	20003d14 	.word	0x20003d14

08002fb0 <timer10_ms_restart>:

void timer10_ms_restart(void){
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop(&htim10);
 8002fb4:	4805      	ldr	r0, [pc, #20]	; (8002fcc <timer10_ms_restart+0x1c>)
 8002fb6:	f008 f804 	bl	800afc2 <HAL_TIM_Base_Stop>
	__HAL_TIM_SET_COUNTER(&htim10,0);  // set the counter value a 0
 8002fba:	4b04      	ldr	r3, [pc, #16]	; (8002fcc <timer10_ms_restart+0x1c>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start(&htim10);
 8002fc2:	4802      	ldr	r0, [pc, #8]	; (8002fcc <timer10_ms_restart+0x1c>)
 8002fc4:	f007 ffd9 	bl	800af7a <HAL_TIM_Base_Start>
}
 8002fc8:	bf00      	nop
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	20003cc4 	.word	0x20003cc4

08002fd0 <timer10_ms_get>:

uint32_t timer10_ms_get(void){
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim10);
 8002fd4:	4b03      	ldr	r3, [pc, #12]	; (8002fe4 <timer10_ms_get+0x14>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr
 8002fe4:	20003cc4 	.word	0x20003cc4

08002fe8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002fec:	bf00      	nop
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
	...

08002ff8 <initMeasureBuffer>:
//uint8_t storeIndex=0;

uint8_t numToSend;
//uint8_t numToStore=0;

void initMeasureBuffer(){
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
	addIndex = 0;
 8002ffc:	4b06      	ldr	r3, [pc, #24]	; (8003018 <initMeasureBuffer+0x20>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	701a      	strb	r2, [r3, #0]
	sendIndex = 0;
 8003002:	4b06      	ldr	r3, [pc, #24]	; (800301c <initMeasureBuffer+0x24>)
 8003004:	2200      	movs	r2, #0
 8003006:	701a      	strb	r2, [r3, #0]
	numToSend = 0;
 8003008:	4b05      	ldr	r3, [pc, #20]	; (8003020 <initMeasureBuffer+0x28>)
 800300a:	2200      	movs	r2, #0
 800300c:	701a      	strb	r2, [r3, #0]
}
 800300e:	bf00      	nop
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr
 8003018:	200040e8 	.word	0x200040e8
 800301c:	200040ea 	.word	0x200040ea
 8003020:	200040e9 	.word	0x200040e9

08003024 <addMeasurement>:



void addMeasurement(FFWX_Measurement * newMeasurement){
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]



	if(numToSend >= measureBufferSize){
 800302c:	4b6d      	ldr	r3, [pc, #436]	; (80031e4 <addMeasurement+0x1c0>)
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	2b3f      	cmp	r3, #63	; 0x3f
 8003032:	d91e      	bls.n	8003072 <addMeasurement+0x4e>


		//adjust the number still to store/send based on what has happened with the oldest one.
		if(measurement[sendIndex].sentStatus != 2){//we have not send the oldest one, so overwrite it and increase the send index to the next one
 8003034:	4b6c      	ldr	r3, [pc, #432]	; (80031e8 <addMeasurement+0x1c4>)
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	4619      	mov	r1, r3
 800303a:	4a6c      	ldr	r2, [pc, #432]	; (80031ec <addMeasurement+0x1c8>)
 800303c:	232c      	movs	r3, #44	; 0x2c
 800303e:	fb03 f301 	mul.w	r3, r3, r1
 8003042:	4413      	add	r3, r2
 8003044:	3329      	adds	r3, #41	; 0x29
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	2b02      	cmp	r3, #2
 800304a:	d00b      	beq.n	8003064 <addMeasurement+0x40>
			numToSend--;
 800304c:	4b65      	ldr	r3, [pc, #404]	; (80031e4 <addMeasurement+0x1c0>)
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	3b01      	subs	r3, #1
 8003052:	b2da      	uxtb	r2, r3
 8003054:	4b63      	ldr	r3, [pc, #396]	; (80031e4 <addMeasurement+0x1c0>)
 8003056:	701a      	strb	r2, [r3, #0]
			sendIndex++;
 8003058:	4b63      	ldr	r3, [pc, #396]	; (80031e8 <addMeasurement+0x1c4>)
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	3301      	adds	r3, #1
 800305e:	b2da      	uxtb	r2, r3
 8003060:	4b61      	ldr	r3, [pc, #388]	; (80031e8 <addMeasurement+0x1c4>)
 8003062:	701a      	strb	r2, [r3, #0]
//		oldestIndex++;
//		if(oldestIndex > measureBufferSize){
//			oldestIndex = 0;
//		}

		if(sendIndex >= measureBufferSize){
 8003064:	4b60      	ldr	r3, [pc, #384]	; (80031e8 <addMeasurement+0x1c4>)
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	2b3f      	cmp	r3, #63	; 0x3f
 800306a:	d902      	bls.n	8003072 <addMeasurement+0x4e>
			sendIndex = 0;
 800306c:	4b5e      	ldr	r3, [pc, #376]	; (80031e8 <addMeasurement+0x1c4>)
 800306e:	2200      	movs	r2, #0
 8003070:	701a      	strb	r2, [r3, #0]


	}


	measurement[addIndex].index = newMeasurement->index;
 8003072:	4b5f      	ldr	r3, [pc, #380]	; (80031f0 <addMeasurement+0x1cc>)
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	4618      	mov	r0, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	495b      	ldr	r1, [pc, #364]	; (80031ec <addMeasurement+0x1c8>)
 800307e:	232c      	movs	r3, #44	; 0x2c
 8003080:	fb03 f300 	mul.w	r3, r3, r0
 8003084:	440b      	add	r3, r1
 8003086:	601a      	str	r2, [r3, #0]
	measurement[addIndex].unix_time.seconds = newMeasurement->unix_time.seconds;
 8003088:	4b59      	ldr	r3, [pc, #356]	; (80031f0 <addMeasurement+0x1cc>)
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	4618      	mov	r0, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685a      	ldr	r2, [r3, #4]
 8003092:	4956      	ldr	r1, [pc, #344]	; (80031ec <addMeasurement+0x1c8>)
 8003094:	232c      	movs	r3, #44	; 0x2c
 8003096:	fb03 f300 	mul.w	r3, r3, r0
 800309a:	440b      	add	r3, r1
 800309c:	3304      	adds	r3, #4
 800309e:	601a      	str	r2, [r3, #0]
	measurement[addIndex].unix_time.ms = newMeasurement->unix_time.ms;
 80030a0:	4b53      	ldr	r3, [pc, #332]	; (80031f0 <addMeasurement+0x1cc>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	4618      	mov	r0, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	8919      	ldrh	r1, [r3, #8]
 80030aa:	4a50      	ldr	r2, [pc, #320]	; (80031ec <addMeasurement+0x1c8>)
 80030ac:	232c      	movs	r3, #44	; 0x2c
 80030ae:	fb03 f300 	mul.w	r3, r3, r0
 80030b2:	4413      	add	r3, r2
 80030b4:	3308      	adds	r3, #8
 80030b6:	460a      	mov	r2, r1
 80030b8:	801a      	strh	r2, [r3, #0]
	measurement[addIndex].mph = newMeasurement->mph;
 80030ba:	4b4d      	ldr	r3, [pc, #308]	; (80031f0 <addMeasurement+0x1cc>)
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	4618      	mov	r0, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	68da      	ldr	r2, [r3, #12]
 80030c4:	4949      	ldr	r1, [pc, #292]	; (80031ec <addMeasurement+0x1c8>)
 80030c6:	232c      	movs	r3, #44	; 0x2c
 80030c8:	fb03 f300 	mul.w	r3, r3, r0
 80030cc:	440b      	add	r3, r1
 80030ce:	330c      	adds	r3, #12
 80030d0:	601a      	str	r2, [r3, #0]
	measurement[addIndex].direction = newMeasurement->direction;
 80030d2:	4b47      	ldr	r3, [pc, #284]	; (80031f0 <addMeasurement+0x1cc>)
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	4618      	mov	r0, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	691a      	ldr	r2, [r3, #16]
 80030dc:	4943      	ldr	r1, [pc, #268]	; (80031ec <addMeasurement+0x1c8>)
 80030de:	232c      	movs	r3, #44	; 0x2c
 80030e0:	fb03 f300 	mul.w	r3, r3, r0
 80030e4:	440b      	add	r3, r1
 80030e6:	3310      	adds	r3, #16
 80030e8:	601a      	str	r2, [r3, #0]
	measurement[addIndex].mphMax = newMeasurement->mphMax;
 80030ea:	4b41      	ldr	r3, [pc, #260]	; (80031f0 <addMeasurement+0x1cc>)
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	4618      	mov	r0, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	8ad9      	ldrh	r1, [r3, #22]
 80030f4:	4a3d      	ldr	r2, [pc, #244]	; (80031ec <addMeasurement+0x1c8>)
 80030f6:	232c      	movs	r3, #44	; 0x2c
 80030f8:	fb03 f300 	mul.w	r3, r3, r0
 80030fc:	4413      	add	r3, r2
 80030fe:	3316      	adds	r3, #22
 8003100:	460a      	mov	r2, r1
 8003102:	801a      	strh	r2, [r3, #0]
	measurement[addIndex].mphMin = newMeasurement->mphMin;
 8003104:	4b3a      	ldr	r3, [pc, #232]	; (80031f0 <addMeasurement+0x1cc>)
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	4618      	mov	r0, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	8a99      	ldrh	r1, [r3, #20]
 800310e:	4a37      	ldr	r2, [pc, #220]	; (80031ec <addMeasurement+0x1c8>)
 8003110:	232c      	movs	r3, #44	; 0x2c
 8003112:	fb03 f300 	mul.w	r3, r3, r0
 8003116:	4413      	add	r3, r2
 8003118:	3314      	adds	r3, #20
 800311a:	460a      	mov	r2, r1
 800311c:	801a      	strh	r2, [r3, #0]
	measurement[addIndex].pressure = newMeasurement->pressure;
 800311e:	4b34      	ldr	r3, [pc, #208]	; (80031f0 <addMeasurement+0x1cc>)
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	699a      	ldr	r2, [r3, #24]
 8003128:	4930      	ldr	r1, [pc, #192]	; (80031ec <addMeasurement+0x1c8>)
 800312a:	232c      	movs	r3, #44	; 0x2c
 800312c:	fb03 f300 	mul.w	r3, r3, r0
 8003130:	440b      	add	r3, r1
 8003132:	3318      	adds	r3, #24
 8003134:	601a      	str	r2, [r3, #0]
	measurement[addIndex].temperature = newMeasurement->temperature;
 8003136:	4b2e      	ldr	r3, [pc, #184]	; (80031f0 <addMeasurement+0x1cc>)
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	4618      	mov	r0, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	69da      	ldr	r2, [r3, #28]
 8003140:	492a      	ldr	r1, [pc, #168]	; (80031ec <addMeasurement+0x1c8>)
 8003142:	232c      	movs	r3, #44	; 0x2c
 8003144:	fb03 f300 	mul.w	r3, r3, r0
 8003148:	440b      	add	r3, r1
 800314a:	331c      	adds	r3, #28
 800314c:	601a      	str	r2, [r3, #0]
	measurement[addIndex].humidity = newMeasurement->humidity;
 800314e:	4b28      	ldr	r3, [pc, #160]	; (80031f0 <addMeasurement+0x1cc>)
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	4618      	mov	r0, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a1a      	ldr	r2, [r3, #32]
 8003158:	4924      	ldr	r1, [pc, #144]	; (80031ec <addMeasurement+0x1c8>)
 800315a:	232c      	movs	r3, #44	; 0x2c
 800315c:	fb03 f300 	mul.w	r3, r3, r0
 8003160:	440b      	add	r3, r1
 8003162:	3320      	adds	r3, #32
 8003164:	601a      	str	r2, [r3, #0]
	measurement[addIndex].battery = newMeasurement->battery;
 8003166:	4b22      	ldr	r3, [pc, #136]	; (80031f0 <addMeasurement+0x1cc>)
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	4618      	mov	r0, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003170:	491e      	ldr	r1, [pc, #120]	; (80031ec <addMeasurement+0x1c8>)
 8003172:	232c      	movs	r3, #44	; 0x2c
 8003174:	fb03 f300 	mul.w	r3, r3, r0
 8003178:	440b      	add	r3, r1
 800317a:	3324      	adds	r3, #36	; 0x24
 800317c:	601a      	str	r2, [r3, #0]
	measurement[addIndex].csq = newMeasurement->csq;
 800317e:	4b1c      	ldr	r3, [pc, #112]	; (80031f0 <addMeasurement+0x1cc>)
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	4618      	mov	r0, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 800318a:	4a18      	ldr	r2, [pc, #96]	; (80031ec <addMeasurement+0x1c8>)
 800318c:	232c      	movs	r3, #44	; 0x2c
 800318e:	fb03 f300 	mul.w	r3, r3, r0
 8003192:	4413      	add	r3, r2
 8003194:	3328      	adds	r3, #40	; 0x28
 8003196:	460a      	mov	r2, r1
 8003198:	701a      	strb	r2, [r3, #0]
	measurement[addIndex].sentStatus = 0;
 800319a:	4b15      	ldr	r3, [pc, #84]	; (80031f0 <addMeasurement+0x1cc>)
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	4619      	mov	r1, r3
 80031a0:	4a12      	ldr	r2, [pc, #72]	; (80031ec <addMeasurement+0x1c8>)
 80031a2:	232c      	movs	r3, #44	; 0x2c
 80031a4:	fb03 f301 	mul.w	r3, r3, r1
 80031a8:	4413      	add	r3, r2
 80031aa:	3329      	adds	r3, #41	; 0x29
 80031ac:	2200      	movs	r2, #0
 80031ae:	701a      	strb	r2, [r3, #0]
//	measurement[addIndex].stored = 0;
	numToSend++;
 80031b0:	4b0c      	ldr	r3, [pc, #48]	; (80031e4 <addMeasurement+0x1c0>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	3301      	adds	r3, #1
 80031b6:	b2da      	uxtb	r2, r3
 80031b8:	4b0a      	ldr	r3, [pc, #40]	; (80031e4 <addMeasurement+0x1c0>)
 80031ba:	701a      	strb	r2, [r3, #0]
//	numToStore++;

	//add a the next new one to the next position
	addIndex++;
 80031bc:	4b0c      	ldr	r3, [pc, #48]	; (80031f0 <addMeasurement+0x1cc>)
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	3301      	adds	r3, #1
 80031c2:	b2da      	uxtb	r2, r3
 80031c4:	4b0a      	ldr	r3, [pc, #40]	; (80031f0 <addMeasurement+0x1cc>)
 80031c6:	701a      	strb	r2, [r3, #0]
	if(addIndex >= measureBufferSize){
 80031c8:	4b09      	ldr	r3, [pc, #36]	; (80031f0 <addMeasurement+0x1cc>)
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	2b3f      	cmp	r3, #63	; 0x3f
 80031ce:	d902      	bls.n	80031d6 <addMeasurement+0x1b2>
		addIndex = 0;
 80031d0:	4b07      	ldr	r3, [pc, #28]	; (80031f0 <addMeasurement+0x1cc>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	701a      	strb	r2, [r3, #0]
	}
}
 80031d6:	bf00      	nop
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	200040e9 	.word	0x200040e9
 80031e8:	200040ea 	.word	0x200040ea
 80031ec:	200040ec 	.word	0x200040ec
 80031f0:	200040e8 	.word	0x200040e8

080031f4 <numMeasurementsToSend>:

uint8_t numMeasurementsToSend(void){
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
	return numToSend;
 80031f8:	4b03      	ldr	r3, [pc, #12]	; (8003208 <numMeasurementsToSend+0x14>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	200040e9 	.word	0x200040e9

0800320c <getMeasurementToSend>:

void getMeasurementToSend(FFWX_Measurement * measure){
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
	if(numToSend && measurement[sendIndex].sentStatus != 2){
 8003214:	4b5f      	ldr	r3, [pc, #380]	; (8003394 <getMeasurementToSend+0x188>)
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	2b00      	cmp	r3, #0
 800321a:	f000 80b5 	beq.w	8003388 <getMeasurementToSend+0x17c>
 800321e:	4b5e      	ldr	r3, [pc, #376]	; (8003398 <getMeasurementToSend+0x18c>)
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	4619      	mov	r1, r3
 8003224:	4a5d      	ldr	r2, [pc, #372]	; (800339c <getMeasurementToSend+0x190>)
 8003226:	232c      	movs	r3, #44	; 0x2c
 8003228:	fb03 f301 	mul.w	r3, r3, r1
 800322c:	4413      	add	r3, r2
 800322e:	3329      	adds	r3, #41	; 0x29
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	2b02      	cmp	r3, #2
 8003234:	f000 80a8 	beq.w	8003388 <getMeasurementToSend+0x17c>
		measure->index = measurement[sendIndex].index;
 8003238:	4b57      	ldr	r3, [pc, #348]	; (8003398 <getMeasurementToSend+0x18c>)
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	4619      	mov	r1, r3
 800323e:	4a57      	ldr	r2, [pc, #348]	; (800339c <getMeasurementToSend+0x190>)
 8003240:	232c      	movs	r3, #44	; 0x2c
 8003242:	fb03 f301 	mul.w	r3, r3, r1
 8003246:	4413      	add	r3, r2
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	601a      	str	r2, [r3, #0]
		measure->unix_time.seconds = measurement[sendIndex].unix_time.seconds;
 800324e:	4b52      	ldr	r3, [pc, #328]	; (8003398 <getMeasurementToSend+0x18c>)
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	4619      	mov	r1, r3
 8003254:	4a51      	ldr	r2, [pc, #324]	; (800339c <getMeasurementToSend+0x190>)
 8003256:	232c      	movs	r3, #44	; 0x2c
 8003258:	fb03 f301 	mul.w	r3, r3, r1
 800325c:	4413      	add	r3, r2
 800325e:	3304      	adds	r3, #4
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	605a      	str	r2, [r3, #4]
		measure->unix_time.ms = measurement[sendIndex].unix_time.ms;
 8003266:	4b4c      	ldr	r3, [pc, #304]	; (8003398 <getMeasurementToSend+0x18c>)
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	4619      	mov	r1, r3
 800326c:	4a4b      	ldr	r2, [pc, #300]	; (800339c <getMeasurementToSend+0x190>)
 800326e:	232c      	movs	r3, #44	; 0x2c
 8003270:	fb03 f301 	mul.w	r3, r3, r1
 8003274:	4413      	add	r3, r2
 8003276:	3308      	adds	r3, #8
 8003278:	881a      	ldrh	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	811a      	strh	r2, [r3, #8]
		measure->mph = measurement[sendIndex].mph;
 800327e:	4b46      	ldr	r3, [pc, #280]	; (8003398 <getMeasurementToSend+0x18c>)
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	4619      	mov	r1, r3
 8003284:	4a45      	ldr	r2, [pc, #276]	; (800339c <getMeasurementToSend+0x190>)
 8003286:	232c      	movs	r3, #44	; 0x2c
 8003288:	fb03 f301 	mul.w	r3, r3, r1
 800328c:	4413      	add	r3, r2
 800328e:	330c      	adds	r3, #12
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	60da      	str	r2, [r3, #12]
		measure->direction = measurement[sendIndex].direction;
 8003296:	4b40      	ldr	r3, [pc, #256]	; (8003398 <getMeasurementToSend+0x18c>)
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	4619      	mov	r1, r3
 800329c:	4a3f      	ldr	r2, [pc, #252]	; (800339c <getMeasurementToSend+0x190>)
 800329e:	232c      	movs	r3, #44	; 0x2c
 80032a0:	fb03 f301 	mul.w	r3, r3, r1
 80032a4:	4413      	add	r3, r2
 80032a6:	3310      	adds	r3, #16
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	611a      	str	r2, [r3, #16]
		measure->mphMax = measurement[sendIndex].mphMax;
 80032ae:	4b3a      	ldr	r3, [pc, #232]	; (8003398 <getMeasurementToSend+0x18c>)
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	4619      	mov	r1, r3
 80032b4:	4a39      	ldr	r2, [pc, #228]	; (800339c <getMeasurementToSend+0x190>)
 80032b6:	232c      	movs	r3, #44	; 0x2c
 80032b8:	fb03 f301 	mul.w	r3, r3, r1
 80032bc:	4413      	add	r3, r2
 80032be:	3316      	adds	r3, #22
 80032c0:	881a      	ldrh	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	82da      	strh	r2, [r3, #22]
		measure->mphMin = measurement[sendIndex].mphMin;
 80032c6:	4b34      	ldr	r3, [pc, #208]	; (8003398 <getMeasurementToSend+0x18c>)
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	4619      	mov	r1, r3
 80032cc:	4a33      	ldr	r2, [pc, #204]	; (800339c <getMeasurementToSend+0x190>)
 80032ce:	232c      	movs	r3, #44	; 0x2c
 80032d0:	fb03 f301 	mul.w	r3, r3, r1
 80032d4:	4413      	add	r3, r2
 80032d6:	3314      	adds	r3, #20
 80032d8:	881a      	ldrh	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	829a      	strh	r2, [r3, #20]
		measure->pressure = measurement[sendIndex].pressure;
 80032de:	4b2e      	ldr	r3, [pc, #184]	; (8003398 <getMeasurementToSend+0x18c>)
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	4619      	mov	r1, r3
 80032e4:	4a2d      	ldr	r2, [pc, #180]	; (800339c <getMeasurementToSend+0x190>)
 80032e6:	232c      	movs	r3, #44	; 0x2c
 80032e8:	fb03 f301 	mul.w	r3, r3, r1
 80032ec:	4413      	add	r3, r2
 80032ee:	3318      	adds	r3, #24
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	619a      	str	r2, [r3, #24]
		measure->temperature = measurement[sendIndex].temperature;
 80032f6:	4b28      	ldr	r3, [pc, #160]	; (8003398 <getMeasurementToSend+0x18c>)
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	4619      	mov	r1, r3
 80032fc:	4a27      	ldr	r2, [pc, #156]	; (800339c <getMeasurementToSend+0x190>)
 80032fe:	232c      	movs	r3, #44	; 0x2c
 8003300:	fb03 f301 	mul.w	r3, r3, r1
 8003304:	4413      	add	r3, r2
 8003306:	331c      	adds	r3, #28
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	61da      	str	r2, [r3, #28]
		measure->humidity = measurement[sendIndex].humidity;
 800330e:	4b22      	ldr	r3, [pc, #136]	; (8003398 <getMeasurementToSend+0x18c>)
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	4619      	mov	r1, r3
 8003314:	4a21      	ldr	r2, [pc, #132]	; (800339c <getMeasurementToSend+0x190>)
 8003316:	232c      	movs	r3, #44	; 0x2c
 8003318:	fb03 f301 	mul.w	r3, r3, r1
 800331c:	4413      	add	r3, r2
 800331e:	3320      	adds	r3, #32
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	621a      	str	r2, [r3, #32]
		measure->battery = measurement[sendIndex].battery;
 8003326:	4b1c      	ldr	r3, [pc, #112]	; (8003398 <getMeasurementToSend+0x18c>)
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	4619      	mov	r1, r3
 800332c:	4a1b      	ldr	r2, [pc, #108]	; (800339c <getMeasurementToSend+0x190>)
 800332e:	232c      	movs	r3, #44	; 0x2c
 8003330:	fb03 f301 	mul.w	r3, r3, r1
 8003334:	4413      	add	r3, r2
 8003336:	3324      	adds	r3, #36	; 0x24
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	625a      	str	r2, [r3, #36]	; 0x24
		measure->csq = measurement[sendIndex].csq;
 800333e:	4b16      	ldr	r3, [pc, #88]	; (8003398 <getMeasurementToSend+0x18c>)
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	4619      	mov	r1, r3
 8003344:	4a15      	ldr	r2, [pc, #84]	; (800339c <getMeasurementToSend+0x190>)
 8003346:	232c      	movs	r3, #44	; 0x2c
 8003348:	fb03 f301 	mul.w	r3, r3, r1
 800334c:	4413      	add	r3, r2
 800334e:	3328      	adds	r3, #40	; 0x28
 8003350:	781a      	ldrb	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		measure->sentStatus = measurement[sendIndex].sentStatus;
 8003358:	4b0f      	ldr	r3, [pc, #60]	; (8003398 <getMeasurementToSend+0x18c>)
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	4619      	mov	r1, r3
 800335e:	4a0f      	ldr	r2, [pc, #60]	; (800339c <getMeasurementToSend+0x190>)
 8003360:	232c      	movs	r3, #44	; 0x2c
 8003362:	fb03 f301 	mul.w	r3, r3, r1
 8003366:	4413      	add	r3, r2
 8003368:	3329      	adds	r3, #41	; 0x29
 800336a:	781a      	ldrb	r2, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		measurement[sendIndex].sentStatus = 1;
 8003372:	4b09      	ldr	r3, [pc, #36]	; (8003398 <getMeasurementToSend+0x18c>)
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	4619      	mov	r1, r3
 8003378:	4a08      	ldr	r2, [pc, #32]	; (800339c <getMeasurementToSend+0x190>)
 800337a:	232c      	movs	r3, #44	; 0x2c
 800337c:	fb03 f301 	mul.w	r3, r3, r1
 8003380:	4413      	add	r3, r2
 8003382:	3329      	adds	r3, #41	; 0x29
 8003384:	2201      	movs	r2, #1
 8003386:	701a      	strb	r2, [r3, #0]
//		measure->stored = measurement[sendIndex].stored;
	}


}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr
 8003394:	200040e9 	.word	0x200040e9
 8003398:	200040ea 	.word	0x200040ea
 800339c:	200040ec 	.word	0x200040ec

080033a0 <confirmSent>:
//	}
//
//	return numToStore;
//}

uint8_t confirmSent(uint32_t index){
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
	if(index == measurement[sendIndex].index){
 80033a8:	4b19      	ldr	r3, [pc, #100]	; (8003410 <confirmSent+0x70>)
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	4619      	mov	r1, r3
 80033ae:	4a19      	ldr	r2, [pc, #100]	; (8003414 <confirmSent+0x74>)
 80033b0:	232c      	movs	r3, #44	; 0x2c
 80033b2:	fb03 f301 	mul.w	r3, r3, r1
 80033b6:	4413      	add	r3, r2
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d11f      	bne.n	8003400 <confirmSent+0x60>
		measurement[sendIndex].sentStatus = 2;
 80033c0:	4b13      	ldr	r3, [pc, #76]	; (8003410 <confirmSent+0x70>)
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	4619      	mov	r1, r3
 80033c6:	4a13      	ldr	r2, [pc, #76]	; (8003414 <confirmSent+0x74>)
 80033c8:	232c      	movs	r3, #44	; 0x2c
 80033ca:	fb03 f301 	mul.w	r3, r3, r1
 80033ce:	4413      	add	r3, r2
 80033d0:	3329      	adds	r3, #41	; 0x29
 80033d2:	2202      	movs	r2, #2
 80033d4:	701a      	strb	r2, [r3, #0]
//		if(measurement[sendIndex].stored){
//			oldestIndex++;
//		}


		sendIndex++;
 80033d6:	4b0e      	ldr	r3, [pc, #56]	; (8003410 <confirmSent+0x70>)
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	3301      	adds	r3, #1
 80033dc:	b2da      	uxtb	r2, r3
 80033de:	4b0c      	ldr	r3, [pc, #48]	; (8003410 <confirmSent+0x70>)
 80033e0:	701a      	strb	r2, [r3, #0]
		numToSend--;
 80033e2:	4b0d      	ldr	r3, [pc, #52]	; (8003418 <confirmSent+0x78>)
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	3b01      	subs	r3, #1
 80033e8:	b2da      	uxtb	r2, r3
 80033ea:	4b0b      	ldr	r3, [pc, #44]	; (8003418 <confirmSent+0x78>)
 80033ec:	701a      	strb	r2, [r3, #0]

		if(sendIndex >= measureBufferSize){
 80033ee:	4b08      	ldr	r3, [pc, #32]	; (8003410 <confirmSent+0x70>)
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	2b3f      	cmp	r3, #63	; 0x3f
 80033f4:	d902      	bls.n	80033fc <confirmSent+0x5c>
			sendIndex = 0;
 80033f6:	4b06      	ldr	r3, [pc, #24]	; (8003410 <confirmSent+0x70>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	701a      	strb	r2, [r3, #0]
		}
//		if(oldestIndex >= measureBufferSize){
//			oldestIndex = 0;
//		}
		return 1;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e000      	b.n	8003402 <confirmSent+0x62>

	}
	return 0;
 8003400:	2300      	movs	r3, #0

}
 8003402:	4618      	mov	r0, r3
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	200040ea 	.word	0x200040ea
 8003414:	200040ec 	.word	0x200040ec
 8003418:	200040e9 	.word	0x200040e9

0800341c <measurementToParams>:
//	}
//	return 0;
//}


void measurementToParams(FFWX_Measurement * measurement, char * buffer){
 800341c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003420:	b09d      	sub	sp, #116	; 0x74
 8003422:	af12      	add	r7, sp, #72	; 0x48
 8003424:	6278      	str	r0, [r7, #36]	; 0x24
 8003426:	6239      	str	r1, [r7, #32]
			"&q=%lu"
			"&t=%.1f"
			"&h=%.1f"
			"&b=%.2f"
			"&c=%u",
			getSettings()->SID,
 8003428:	f000 fcc0 	bl	8003dac <getSettings>
 800342c:	4603      	mov	r3, r0
 800342e:	8a9b      	ldrh	r3, [r3, #20]
		sprintf(buffer,
 8003430:	61fb      	str	r3, [r7, #28]
 8003432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003434:	6819      	ldr	r1, [r3, #0]
 8003436:	61b9      	str	r1, [r7, #24]
 8003438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343a:	685e      	ldr	r6, [r3, #4]
			measurement->index,
			measurement->unix_time.seconds,measurement->unix_time.ms,
 800343c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343e:	891b      	ldrh	r3, [r3, #8]
		sprintf(buffer,
 8003440:	617b      	str	r3, [r7, #20]
			measurement->mph,
 8003442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003444:	68db      	ldr	r3, [r3, #12]
		sprintf(buffer,
 8003446:	4618      	mov	r0, r3
 8003448:	f7fd f896 	bl	8000578 <__aeabi_f2d>
 800344c:	4682      	mov	sl, r0
 800344e:	468b      	mov	fp, r1
			measurement->direction,
 8003450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003452:	691b      	ldr	r3, [r3, #16]
		sprintf(buffer,
 8003454:	4618      	mov	r0, r3
 8003456:	f7fd f88f 	bl	8000578 <__aeabi_f2d>
 800345a:	e9c7 0102 	strd	r0, r1, [r7, #8]
			measurement->mphMax,
 800345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003460:	8adb      	ldrh	r3, [r3, #22]
		sprintf(buffer,
 8003462:	613b      	str	r3, [r7, #16]
			measurement->mphMin,
 8003464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003466:	8a9b      	ldrh	r3, [r3, #20]
		sprintf(buffer,
 8003468:	607b      	str	r3, [r7, #4]
 800346a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346c:	699c      	ldr	r4, [r3, #24]
 800346e:	603c      	str	r4, [r7, #0]
			measurement->pressure,
			measurement->temperature,
 8003470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003472:	69db      	ldr	r3, [r3, #28]
		sprintf(buffer,
 8003474:	4618      	mov	r0, r3
 8003476:	f7fd f87f 	bl	8000578 <__aeabi_f2d>
 800347a:	4680      	mov	r8, r0
 800347c:	4689      	mov	r9, r1
			measurement->humidity,
 800347e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003480:	6a1b      	ldr	r3, [r3, #32]
		sprintf(buffer,
 8003482:	4618      	mov	r0, r3
 8003484:	f7fd f878 	bl	8000578 <__aeabi_f2d>
 8003488:	4604      	mov	r4, r0
 800348a:	460d      	mov	r5, r1
			measurement->battery,
 800348c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		sprintf(buffer,
 8003490:	4618      	mov	r0, r3
 8003492:	f7fd f871 	bl	8000578 <__aeabi_f2d>
			measurement->csq
 8003496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003498:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
		sprintf(buffer,
 800349c:	9310      	str	r3, [sp, #64]	; 0x40
 800349e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80034a2:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
 80034a6:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 80034aa:	683c      	ldr	r4, [r7, #0]
 80034ac:	9408      	str	r4, [sp, #32]
 80034ae:	687c      	ldr	r4, [r7, #4]
 80034b0:	9407      	str	r4, [sp, #28]
 80034b2:	693c      	ldr	r4, [r7, #16]
 80034b4:	9406      	str	r4, [sp, #24]
 80034b6:	ed97 7b02 	vldr	d7, [r7, #8]
 80034ba:	ed8d 7b04 	vstr	d7, [sp, #16]
 80034be:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80034c2:	6978      	ldr	r0, [r7, #20]
 80034c4:	9001      	str	r0, [sp, #4]
 80034c6:	9600      	str	r6, [sp, #0]
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	69fa      	ldr	r2, [r7, #28]
 80034cc:	4904      	ldr	r1, [pc, #16]	; (80034e0 <measurementToParams+0xc4>)
 80034ce:	6a38      	ldr	r0, [r7, #32]
 80034d0:	f00e f88c 	bl	80115ec <siprintf>
			);
}
 80034d4:	bf00      	nop
 80034d6:	372c      	adds	r7, #44	; 0x2c
 80034d8:	46bd      	mov	sp, r7
 80034da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034de:	bf00      	nop
 80034e0:	08017b94 	.word	0x08017b94

080034e4 <measurementToSentance>:

void measurementToSentance(FFWX_Measurement * measurement, char * buffer){
 80034e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034e8:	b09d      	sub	sp, #116	; 0x74
 80034ea:	af12      	add	r7, sp, #72	; 0x48
 80034ec:	6278      	str	r0, [r7, #36]	; 0x24
 80034ee:	6239      	str	r1, [r7, #32]
	sprintf(buffer, "$FFWX,1,"
 80034f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	61fb      	str	r3, [r7, #28]
 80034f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f8:	6859      	ldr	r1, [r3, #4]
 80034fa:	61b9      	str	r1, [r7, #24]
			"%.2f,"
			"%u"
			"\r\n",
			measurement->index,
			measurement->unix_time.seconds,
			measurement->unix_time.ms,
 80034fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fe:	891b      	ldrh	r3, [r3, #8]
	sprintf(buffer, "$FFWX,1,"
 8003500:	617b      	str	r3, [r7, #20]
			measurement->mph,
 8003502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003504:	68db      	ldr	r3, [r3, #12]
	sprintf(buffer, "$FFWX,1,"
 8003506:	4618      	mov	r0, r3
 8003508:	f7fd f836 	bl	8000578 <__aeabi_f2d>
 800350c:	4682      	mov	sl, r0
 800350e:	468b      	mov	fp, r1
			measurement->direction,
 8003510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003512:	691b      	ldr	r3, [r3, #16]
	sprintf(buffer, "$FFWX,1,"
 8003514:	4618      	mov	r0, r3
 8003516:	f7fd f82f 	bl	8000578 <__aeabi_f2d>
 800351a:	e9c7 0102 	strd	r0, r1, [r7, #8]
			measurement->mphMax,
 800351e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003520:	8adb      	ldrh	r3, [r3, #22]
	sprintf(buffer, "$FFWX,1,"
 8003522:	613b      	str	r3, [r7, #16]
			measurement->mphMin,
 8003524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003526:	8a9b      	ldrh	r3, [r3, #20]
	sprintf(buffer, "$FFWX,1,"
 8003528:	607b      	str	r3, [r7, #4]
 800352a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352c:	699e      	ldr	r6, [r3, #24]
			measurement->pressure,
			measurement->temperature,
 800352e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003530:	69db      	ldr	r3, [r3, #28]
	sprintf(buffer, "$FFWX,1,"
 8003532:	4618      	mov	r0, r3
 8003534:	f7fd f820 	bl	8000578 <__aeabi_f2d>
 8003538:	4680      	mov	r8, r0
 800353a:	4689      	mov	r9, r1
			measurement->humidity,
 800353c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353e:	6a1b      	ldr	r3, [r3, #32]
	sprintf(buffer, "$FFWX,1,"
 8003540:	4618      	mov	r0, r3
 8003542:	f7fd f819 	bl	8000578 <__aeabi_f2d>
 8003546:	4604      	mov	r4, r0
 8003548:	460d      	mov	r5, r1
			measurement->battery,
 800354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	sprintf(buffer, "$FFWX,1,"
 800354e:	4618      	mov	r0, r3
 8003550:	f7fd f812 	bl	8000578 <__aeabi_f2d>
			measurement->csq);
 8003554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003556:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	sprintf(buffer, "$FFWX,1,"
 800355a:	9310      	str	r3, [sp, #64]	; 0x40
 800355c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8003560:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
 8003564:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8003568:	9608      	str	r6, [sp, #32]
 800356a:	687c      	ldr	r4, [r7, #4]
 800356c:	9407      	str	r4, [sp, #28]
 800356e:	693c      	ldr	r4, [r7, #16]
 8003570:	9406      	str	r4, [sp, #24]
 8003572:	ed97 7b02 	vldr	d7, [r7, #8]
 8003576:	ed8d 7b04 	vstr	d7, [sp, #16]
 800357a:	e9cd ab02 	strd	sl, fp, [sp, #8]
 800357e:	6978      	ldr	r0, [r7, #20]
 8003580:	9000      	str	r0, [sp, #0]
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	69fa      	ldr	r2, [r7, #28]
 8003586:	4904      	ldr	r1, [pc, #16]	; (8003598 <measurementToSentance+0xb4>)
 8003588:	6a38      	ldr	r0, [r7, #32]
 800358a:	f00e f82f 	bl	80115ec <siprintf>
}
 800358e:	bf00      	nop
 8003590:	372c      	adds	r7, #44	; 0x2c
 8003592:	46bd      	mov	sp, r7
 8003594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003598:	08017be4 	.word	0x08017be4

0800359c <MS5611_Init>:



//MS5611 sensor

void MS5611_Init(void) {
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0




    sns_Reset();
 80035a0:	f000 f856 	bl	8003650 <sns_Reset>

    sns_ReadCoeffs();
 80035a4:	f000 f804 	bl	80035b0 <sns_ReadCoeffs>

    sns_TriggerTemperatureSample();
 80035a8:	f000 f86c 	bl	8003684 <sns_TriggerTemperatureSample>

}
 80035ac:	bf00      	nop
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <sns_ReadCoeffs>:



/// Read the calibration coefficients from the MS5611 pressure sensor

void sns_ReadCoeffs(void) {
 80035b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035b2:	b08b      	sub	sp, #44	; 0x2c
 80035b4:	af06      	add	r7, sp, #24
    unsigned char cnt;
    for (cnt = 0; cnt < 8; cnt++) {
 80035b6:	2300      	movs	r3, #0
 80035b8:	73fb      	strb	r3, [r7, #15]
 80035ba:	e017      	b.n	80035ec <sns_ReadCoeffs+0x3c>

    	user_spi_read(0xA0 + cnt * 2, bytes, 2);
 80035bc:	7bfb      	ldrb	r3, [r7, #15]
 80035be:	3350      	adds	r3, #80	; 0x50
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	005b      	lsls	r3, r3, #1
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2202      	movs	r2, #2
 80035c8:	491c      	ldr	r1, [pc, #112]	; (800363c <sns_ReadCoeffs+0x8c>)
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7ff fc2a 	bl	8002e24 <user_spi_read>

    	gC[cnt] = bytes[0] << 8 | bytes[1];
 80035d0:	4b1a      	ldr	r3, [pc, #104]	; (800363c <sns_ReadCoeffs+0x8c>)
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	021b      	lsls	r3, r3, #8
 80035d6:	4a19      	ldr	r2, [pc, #100]	; (800363c <sns_ReadCoeffs+0x8c>)
 80035d8:	7852      	ldrb	r2, [r2, #1]
 80035da:	431a      	orrs	r2, r3
 80035dc:	7bfb      	ldrb	r3, [r7, #15]
 80035de:	4611      	mov	r1, r2
 80035e0:	4a17      	ldr	r2, [pc, #92]	; (8003640 <sns_ReadCoeffs+0x90>)
 80035e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (cnt = 0; cnt < 8; cnt++) {
 80035e6:	7bfb      	ldrb	r3, [r7, #15]
 80035e8:	3301      	adds	r3, #1
 80035ea:	73fb      	strb	r3, [r7, #15]
 80035ec:	7bfb      	ldrb	r3, [r7, #15]
 80035ee:	2b07      	cmp	r3, #7
 80035f0:	d9e4      	bls.n	80035bc <sns_ReadCoeffs+0xc>



    }

    sprintf(buffer, "MS5611 Calibration: %i %i %i %i %i %i %i %i\r\n",
 80035f2:	4b13      	ldr	r3, [pc, #76]	; (8003640 <sns_ReadCoeffs+0x90>)
 80035f4:	681e      	ldr	r6, [r3, #0]
 80035f6:	4b12      	ldr	r3, [pc, #72]	; (8003640 <sns_ReadCoeffs+0x90>)
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	607b      	str	r3, [r7, #4]
 80035fc:	4b10      	ldr	r3, [pc, #64]	; (8003640 <sns_ReadCoeffs+0x90>)
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	4a0f      	ldr	r2, [pc, #60]	; (8003640 <sns_ReadCoeffs+0x90>)
 8003602:	68d2      	ldr	r2, [r2, #12]
 8003604:	490e      	ldr	r1, [pc, #56]	; (8003640 <sns_ReadCoeffs+0x90>)
 8003606:	6909      	ldr	r1, [r1, #16]
 8003608:	480d      	ldr	r0, [pc, #52]	; (8003640 <sns_ReadCoeffs+0x90>)
 800360a:	6940      	ldr	r0, [r0, #20]
 800360c:	4c0c      	ldr	r4, [pc, #48]	; (8003640 <sns_ReadCoeffs+0x90>)
 800360e:	69a4      	ldr	r4, [r4, #24]
 8003610:	4d0b      	ldr	r5, [pc, #44]	; (8003640 <sns_ReadCoeffs+0x90>)
 8003612:	69ed      	ldr	r5, [r5, #28]
 8003614:	9505      	str	r5, [sp, #20]
 8003616:	9404      	str	r4, [sp, #16]
 8003618:	9003      	str	r0, [sp, #12]
 800361a:	9102      	str	r1, [sp, #8]
 800361c:	9201      	str	r2, [sp, #4]
 800361e:	9300      	str	r3, [sp, #0]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4632      	mov	r2, r6
 8003624:	4907      	ldr	r1, [pc, #28]	; (8003644 <sns_ReadCoeffs+0x94>)
 8003626:	4808      	ldr	r0, [pc, #32]	; (8003648 <sns_ReadCoeffs+0x98>)
 8003628:	f00d ffe0 	bl	80115ec <siprintf>
			gC[5],
			gC[6],
			gC[7]);


	  Uart_SendString(buffer, pc_uart);
 800362c:	4907      	ldr	r1, [pc, #28]	; (800364c <sns_ReadCoeffs+0x9c>)
 800362e:	4806      	ldr	r0, [pc, #24]	; (8003648 <sns_ReadCoeffs+0x98>)
 8003630:	f7fe f9aa 	bl	8001988 <Uart_SendString>
}
 8003634:	bf00      	nop
 8003636:	3714      	adds	r7, #20
 8003638:	46bd      	mov	sp, r7
 800363a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800363c:	20004c24 	.word	0x20004c24
 8003640:	20004c04 	.word	0x20004c04
 8003644:	08017c20 	.word	0x08017c20
 8003648:	20006210 	.word	0x20006210
 800364c:	20004094 	.word	0x20004094

08003650 <sns_Reset>:

void sns_Reset(void) {
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0

//    spi_Send8(0x1E);
    user_spi_write(0x1E, bytes, 0);
 8003654:	2200      	movs	r2, #0
 8003656:	4904      	ldr	r1, [pc, #16]	; (8003668 <sns_Reset+0x18>)
 8003658:	201e      	movs	r0, #30
 800365a:	f7ff fc0d 	bl	8002e78 <user_spi_write>

    HAL_Delay(100);
 800365e:	2064      	movs	r0, #100	; 0x64
 8003660:	f003 f8dc 	bl	800681c <HAL_Delay>



}
 8003664:	bf00      	nop
 8003666:	bd80      	pop	{r7, pc}
 8003668:	20004c24 	.word	0x20004c24

0800366c <sns_TriggerPressureSample>:


// Trigger a pressure sample with max oversampling rate

void sns_TriggerPressureSample(void) {
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0

//    spi_Send8(0x48);
    user_spi_write(0x48, bytes, 0);
 8003670:	2200      	movs	r2, #0
 8003672:	4903      	ldr	r1, [pc, #12]	; (8003680 <sns_TriggerPressureSample+0x14>)
 8003674:	2048      	movs	r0, #72	; 0x48
 8003676:	f7ff fbff 	bl	8002e78 <user_spi_write>


}
 800367a:	bf00      	nop
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	20004c24 	.word	0x20004c24

08003684 <sns_TriggerTemperatureSample>:

// Trigger a temperature sample with max oversampling rate

void sns_TriggerTemperatureSample(void) {
 8003684:	b580      	push	{r7, lr}
 8003686:	af00      	add	r7, sp, #0

//    spi_Send8(0x58);
    user_spi_write(0x58, bytes, 0);
 8003688:	2200      	movs	r2, #0
 800368a:	4903      	ldr	r1, [pc, #12]	; (8003698 <sns_TriggerTemperatureSample+0x14>)
 800368c:	2058      	movs	r0, #88	; 0x58
 800368e:	f7ff fbf3 	bl	8002e78 <user_spi_write>


}
 8003692:	bf00      	nop
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	20004c24 	.word	0x20004c24

0800369c <sns_ReadTemperatureSample>:


// Read a raw temperature sample

unsigned long sns_ReadTemperatureSample(void) {
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
    unsigned long w;

//    spi_Send8(0x00);
//    w = spi_Receive24();

    user_spi_read(0x00, bytes, 3);
 80036a2:	2203      	movs	r2, #3
 80036a4:	490b      	ldr	r1, [pc, #44]	; (80036d4 <sns_ReadTemperatureSample+0x38>)
 80036a6:	2000      	movs	r0, #0
 80036a8:	f7ff fbbc 	bl	8002e24 <user_spi_read>
    w = bytes[0] << 16 | bytes[1] << 8 | bytes[2];
 80036ac:	4b09      	ldr	r3, [pc, #36]	; (80036d4 <sns_ReadTemperatureSample+0x38>)
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	041a      	lsls	r2, r3, #16
 80036b2:	4b08      	ldr	r3, [pc, #32]	; (80036d4 <sns_ReadTemperatureSample+0x38>)
 80036b4:	785b      	ldrb	r3, [r3, #1]
 80036b6:	021b      	lsls	r3, r3, #8
 80036b8:	4313      	orrs	r3, r2
 80036ba:	4a06      	ldr	r2, [pc, #24]	; (80036d4 <sns_ReadTemperatureSample+0x38>)
 80036bc:	7892      	ldrb	r2, [r2, #2]
 80036be:	4313      	orrs	r3, r2
 80036c0:	607b      	str	r3, [r7, #4]

    gD2 = w;
 80036c2:	4a05      	ldr	r2, [pc, #20]	; (80036d8 <sns_ReadTemperatureSample+0x3c>)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6013      	str	r3, [r2, #0]
    return w;
 80036c8:	687b      	ldr	r3, [r7, #4]
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3708      	adds	r7, #8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	20004c24 	.word	0x20004c24
 80036d8:	20004c28 	.word	0x20004c28

080036dc <sns_ReadPressureSample>:



// Read a raw pressure sample

unsigned long sns_ReadPressureSample(void) {
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0

    unsigned long w;

//    spi_Send8(0x00);
//    w = spi_Receive24();
    user_spi_read(0x00, bytes, 3);
 80036e2:	2203      	movs	r2, #3
 80036e4:	490b      	ldr	r1, [pc, #44]	; (8003714 <sns_ReadPressureSample+0x38>)
 80036e6:	2000      	movs	r0, #0
 80036e8:	f7ff fb9c 	bl	8002e24 <user_spi_read>
    w = bytes[0] << 16 | bytes[1] << 8 | bytes[2];
 80036ec:	4b09      	ldr	r3, [pc, #36]	; (8003714 <sns_ReadPressureSample+0x38>)
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	041a      	lsls	r2, r3, #16
 80036f2:	4b08      	ldr	r3, [pc, #32]	; (8003714 <sns_ReadPressureSample+0x38>)
 80036f4:	785b      	ldrb	r3, [r3, #1]
 80036f6:	021b      	lsls	r3, r3, #8
 80036f8:	4313      	orrs	r3, r2
 80036fa:	4a06      	ldr	r2, [pc, #24]	; (8003714 <sns_ReadPressureSample+0x38>)
 80036fc:	7892      	ldrb	r2, [r2, #2]
 80036fe:	4313      	orrs	r3, r2
 8003700:	607b      	str	r3, [r7, #4]

    gD1 = w;
 8003702:	4a05      	ldr	r2, [pc, #20]	; (8003718 <sns_ReadPressureSample+0x3c>)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6013      	str	r3, [r2, #0]
    return w;
 8003708:	687b      	ldr	r3, [r7, #4]
}
 800370a:	4618      	mov	r0, r3
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	20004c24 	.word	0x20004c24
 8003718:	20004c38 	.word	0x20004c38

0800371c <sns_CalculateTemperatureCx10>:

long sns_CalculateTemperatureCx10(void) {
 800371c:	b4b0      	push	{r4, r5, r7}
 800371e:	af00      	add	r7, sp, #0

    gdT = (long) gD2 - (((long) gC[5]) << 8);
 8003720:	4b24      	ldr	r3, [pc, #144]	; (80037b4 <sns_CalculateTemperatureCx10+0x98>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	461a      	mov	r2, r3
 8003726:	4b24      	ldr	r3, [pc, #144]	; (80037b8 <sns_CalculateTemperatureCx10+0x9c>)
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	021b      	lsls	r3, r3, #8
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	4a23      	ldr	r2, [pc, #140]	; (80037bc <sns_CalculateTemperatureCx10+0xa0>)
 8003730:	6013      	str	r3, [r2, #0]
    t = 2000 + ((gdT * ((long long) gC[6])) >> 23);
 8003732:	4b22      	ldr	r3, [pc, #136]	; (80037bc <sns_CalculateTemperatureCx10+0xa0>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4618      	mov	r0, r3
 8003738:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800373c:	4b1e      	ldr	r3, [pc, #120]	; (80037b8 <sns_CalculateTemperatureCx10+0x9c>)
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	461a      	mov	r2, r3
 8003742:	f04f 0300 	mov.w	r3, #0
 8003746:	fb02 f501 	mul.w	r5, r2, r1
 800374a:	fb00 f403 	mul.w	r4, r0, r3
 800374e:	442c      	add	r4, r5
 8003750:	fba0 2302 	umull	r2, r3, r0, r2
 8003754:	18e1      	adds	r1, r4, r3
 8003756:	460b      	mov	r3, r1
 8003758:	f04f 0000 	mov.w	r0, #0
 800375c:	f04f 0100 	mov.w	r1, #0
 8003760:	0dd0      	lsrs	r0, r2, #23
 8003762:	ea40 2043 	orr.w	r0, r0, r3, lsl #9
 8003766:	15d9      	asrs	r1, r3, #23
 8003768:	4603      	mov	r3, r0
 800376a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800376e:	461a      	mov	r2, r3
 8003770:	4b13      	ldr	r3, [pc, #76]	; (80037c0 <sns_CalculateTemperatureCx10+0xa4>)
 8003772:	601a      	str	r2, [r3, #0]

    gnTempC = (t >= 0 ? (t + 5) / 10 : (t - 5) / 10);
 8003774:	4b12      	ldr	r3, [pc, #72]	; (80037c0 <sns_CalculateTemperatureCx10+0xa4>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2b00      	cmp	r3, #0
 800377a:	db09      	blt.n	8003790 <sns_CalculateTemperatureCx10+0x74>
 800377c:	4b10      	ldr	r3, [pc, #64]	; (80037c0 <sns_CalculateTemperatureCx10+0xa4>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	3305      	adds	r3, #5
 8003782:	4a10      	ldr	r2, [pc, #64]	; (80037c4 <sns_CalculateTemperatureCx10+0xa8>)
 8003784:	fb82 1203 	smull	r1, r2, r2, r3
 8003788:	1092      	asrs	r2, r2, #2
 800378a:	17db      	asrs	r3, r3, #31
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	e008      	b.n	80037a2 <sns_CalculateTemperatureCx10+0x86>
 8003790:	4b0b      	ldr	r3, [pc, #44]	; (80037c0 <sns_CalculateTemperatureCx10+0xa4>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	3b05      	subs	r3, #5
 8003796:	4a0b      	ldr	r2, [pc, #44]	; (80037c4 <sns_CalculateTemperatureCx10+0xa8>)
 8003798:	fb82 1203 	smull	r1, r2, r2, r3
 800379c:	1092      	asrs	r2, r2, #2
 800379e:	17db      	asrs	r3, r3, #31
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	4a09      	ldr	r2, [pc, #36]	; (80037c8 <sns_CalculateTemperatureCx10+0xac>)
 80037a4:	6013      	str	r3, [r2, #0]
    return gnTempC;
 80037a6:	4b08      	ldr	r3, [pc, #32]	; (80037c8 <sns_CalculateTemperatureCx10+0xac>)
 80037a8:	681b      	ldr	r3, [r3, #0]
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bcb0      	pop	{r4, r5, r7}
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	20004c28 	.word	0x20004c28
 80037b8:	20004c04 	.word	0x20004c04
 80037bc:	20004bf4 	.word	0x20004bf4
 80037c0:	20004bf0 	.word	0x20004bf0
 80037c4:	66666667 	.word	0x66666667
 80037c8:	20004c00 	.word	0x20004c00

080037cc <sns_CalculatePressurePa>:

long sns_CalculatePressurePa(void) {
 80037cc:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80037d0:	b086      	sub	sp, #24
 80037d2:	af00      	add	r7, sp, #0
    long pa;

    gOFF = (((long long) gC[2]) << 16) + ((((long long) gC[4])*(long long) gdT) >> 7);
 80037d4:	4b48      	ldr	r3, [pc, #288]	; (80038f8 <sns_CalculatePressurePa+0x12c>)
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	461a      	mov	r2, r3
 80037da:	f04f 0300 	mov.w	r3, #0
 80037de:	0c16      	lsrs	r6, r2, #16
 80037e0:	0415      	lsls	r5, r2, #16
 80037e2:	4b45      	ldr	r3, [pc, #276]	; (80038f8 <sns_CalculatePressurePa+0x12c>)
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	461a      	mov	r2, r3
 80037e8:	f04f 0300 	mov.w	r3, #0
 80037ec:	4943      	ldr	r1, [pc, #268]	; (80038fc <sns_CalculatePressurePa+0x130>)
 80037ee:	6809      	ldr	r1, [r1, #0]
 80037f0:	4608      	mov	r0, r1
 80037f2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80037f6:	fb00 fc03 	mul.w	ip, r0, r3
 80037fa:	fb02 f401 	mul.w	r4, r2, r1
 80037fe:	4464      	add	r4, ip
 8003800:	fba2 0100 	umull	r0, r1, r2, r0
 8003804:	1863      	adds	r3, r4, r1
 8003806:	4619      	mov	r1, r3
 8003808:	f04f 0200 	mov.w	r2, #0
 800380c:	f04f 0300 	mov.w	r3, #0
 8003810:	09c2      	lsrs	r2, r0, #7
 8003812:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
 8003816:	11cb      	asrs	r3, r1, #7
 8003818:	18a9      	adds	r1, r5, r2
 800381a:	60b9      	str	r1, [r7, #8]
 800381c:	eb46 0303 	adc.w	r3, r6, r3
 8003820:	60fb      	str	r3, [r7, #12]
 8003822:	4b37      	ldr	r3, [pc, #220]	; (8003900 <sns_CalculatePressurePa+0x134>)
 8003824:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003828:	e9c3 1200 	strd	r1, r2, [r3]
    gSENS = (((long long) gC[1]) << 15) + ((((long long) gC[3])*(long long) gdT) >> 8);
 800382c:	4b32      	ldr	r3, [pc, #200]	; (80038f8 <sns_CalculatePressurePa+0x12c>)
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	461a      	mov	r2, r3
 8003832:	f04f 0300 	mov.w	r3, #0
 8003836:	ea4f 4b52 	mov.w	fp, r2, lsr #17
 800383a:	ea4f 3ac2 	mov.w	sl, r2, lsl #15
 800383e:	4b2e      	ldr	r3, [pc, #184]	; (80038f8 <sns_CalculatePressurePa+0x12c>)
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	4618      	mov	r0, r3
 8003844:	f04f 0100 	mov.w	r1, #0
 8003848:	4b2c      	ldr	r3, [pc, #176]	; (80038fc <sns_CalculatePressurePa+0x130>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	461a      	mov	r2, r3
 800384e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003852:	fb02 f501 	mul.w	r5, r2, r1
 8003856:	fb00 f403 	mul.w	r4, r0, r3
 800385a:	442c      	add	r4, r5
 800385c:	fba0 0102 	umull	r0, r1, r0, r2
 8003860:	1863      	adds	r3, r4, r1
 8003862:	4619      	mov	r1, r3
 8003864:	f04f 0200 	mov.w	r2, #0
 8003868:	f04f 0300 	mov.w	r3, #0
 800386c:	0a02      	lsrs	r2, r0, #8
 800386e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003872:	120b      	asrs	r3, r1, #8
 8003874:	eb1a 0102 	adds.w	r1, sl, r2
 8003878:	6039      	str	r1, [r7, #0]
 800387a:	eb4b 0303 	adc.w	r3, fp, r3
 800387e:	607b      	str	r3, [r7, #4]
 8003880:	4b20      	ldr	r3, [pc, #128]	; (8003904 <sns_CalculatePressurePa+0x138>)
 8003882:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003886:	e9c3 1200 	strd	r1, r2, [r3]
    pa = (long) ((((((long long) gD1) * gSENS) >> 21) - gOFF) >> 15);
 800388a:	4b1f      	ldr	r3, [pc, #124]	; (8003908 <sns_CalculatePressurePa+0x13c>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4618      	mov	r0, r3
 8003890:	f04f 0100 	mov.w	r1, #0
 8003894:	4b1b      	ldr	r3, [pc, #108]	; (8003904 <sns_CalculatePressurePa+0x138>)
 8003896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800389a:	fb02 f501 	mul.w	r5, r2, r1
 800389e:	fb00 f403 	mul.w	r4, r0, r3
 80038a2:	442c      	add	r4, r5
 80038a4:	fba0 0102 	umull	r0, r1, r0, r2
 80038a8:	1863      	adds	r3, r4, r1
 80038aa:	4619      	mov	r1, r3
 80038ac:	f04f 0200 	mov.w	r2, #0
 80038b0:	f04f 0300 	mov.w	r3, #0
 80038b4:	0d42      	lsrs	r2, r0, #21
 80038b6:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 80038ba:	154b      	asrs	r3, r1, #21
 80038bc:	4910      	ldr	r1, [pc, #64]	; (8003900 <sns_CalculatePressurePa+0x134>)
 80038be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80038c2:	ebb2 0800 	subs.w	r8, r2, r0
 80038c6:	eb63 0901 	sbc.w	r9, r3, r1
 80038ca:	f04f 0200 	mov.w	r2, #0
 80038ce:	f04f 0300 	mov.w	r3, #0
 80038d2:	ea4f 32d8 	mov.w	r2, r8, lsr #15
 80038d6:	ea42 4249 	orr.w	r2, r2, r9, lsl #17
 80038da:	ea4f 33e9 	mov.w	r3, r9, asr #15
 80038de:	4613      	mov	r3, r2
 80038e0:	617b      	str	r3, [r7, #20]
    gP = pa;
 80038e2:	4a0a      	ldr	r2, [pc, #40]	; (800390c <sns_CalculatePressurePa+0x140>)
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	6013      	str	r3, [r2, #0]
    return pa;
 80038e8:	697b      	ldr	r3, [r7, #20]
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3718      	adds	r7, #24
 80038ee:	46bd      	mov	sp, r7
 80038f0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	20004c04 	.word	0x20004c04
 80038fc:	20004bf4 	.word	0x20004bf4
 8003900:	20004c40 	.word	0x20004c40
 8003904:	20004c30 	.word	0x20004c30
 8003908:	20004c38 	.word	0x20004c38
 800390c:	20004bf8 	.word	0x20004bf8

08003910 <getPressure>:



uint32_t getPressure(void){
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0

	sns_TriggerTemperatureSample();
 8003914:	f7ff feb6 	bl	8003684 <sns_TriggerTemperatureSample>
	HAL_Delay(10);
 8003918:	200a      	movs	r0, #10
 800391a:	f002 ff7f 	bl	800681c <HAL_Delay>
	sns_ReadTemperatureSample();
 800391e:	f7ff febd 	bl	800369c <sns_ReadTemperatureSample>
	sns_CalculateTemperatureCx10();
 8003922:	f7ff fefb 	bl	800371c <sns_CalculateTemperatureCx10>

    sns_TriggerPressureSample();
 8003926:	f7ff fea1 	bl	800366c <sns_TriggerPressureSample>
	HAL_Delay(10);
 800392a:	200a      	movs	r0, #10
 800392c:	f002 ff76 	bl	800681c <HAL_Delay>
	sns_ReadPressureSample();
 8003930:	f7ff fed4 	bl	80036dc <sns_ReadPressureSample>
	sns_CalculatePressurePa();
 8003934:	f7ff ff4a 	bl	80037cc <sns_CalculatePressurePa>

	return (uint32_t)gP;
 8003938:	4b01      	ldr	r3, [pc, #4]	; (8003940 <getPressure+0x30>)
 800393a:	681b      	ldr	r3, [r3, #0]

}
 800393c:	4618      	mov	r0, r3
 800393e:	bd80      	pop	{r7, pc}
 8003940:	20004bf8 	.word	0x20004bf8

08003944 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003944:	b480      	push	{r7}
 8003946:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003948:	f3bf 8f4f 	dsb	sy
}
 800394c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800394e:	4b06      	ldr	r3, [pc, #24]	; (8003968 <__NVIC_SystemReset+0x24>)
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003956:	4904      	ldr	r1, [pc, #16]	; (8003968 <__NVIC_SystemReset+0x24>)
 8003958:	4b04      	ldr	r3, [pc, #16]	; (800396c <__NVIC_SystemReset+0x28>)
 800395a:	4313      	orrs	r3, r2
 800395c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800395e:	f3bf 8f4f 	dsb	sy
}
 8003962:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003964:	bf00      	nop
 8003966:	e7fd      	b.n	8003964 <__NVIC_SystemReset+0x20>
 8003968:	e000ed00 	.word	0xe000ed00
 800396c:	05fa0004 	.word	0x05fa0004

08003970 <SDcard_Init>:
uint8_t logBufferReady;




void SDcard_Init(void){
 8003970:	b580      	push	{r7, lr}
 8003972:	af00      	add	r7, sp, #0

	sdState = SDSTATE_INIT;
 8003974:	4b1b      	ldr	r3, [pc, #108]	; (80039e4 <SDcard_Init+0x74>)
 8003976:	2200      	movs	r2, #0
 8003978:	701a      	strb	r2, [r3, #0]
	settings.URL[0] = 0;
 800397a:	4b1b      	ldr	r3, [pc, #108]	; (80039e8 <SDcard_Init+0x78>)
 800397c:	2200      	movs	r2, #0
 800397e:	759a      	strb	r2, [r3, #22]
	settings.SID = 0;
 8003980:	4b19      	ldr	r3, [pc, #100]	; (80039e8 <SDcard_Init+0x78>)
 8003982:	2200      	movs	r2, #0
 8003984:	829a      	strh	r2, [r3, #20]
	saveFlag = 0;
 8003986:	4b19      	ldr	r3, [pc, #100]	; (80039ec <SDcard_Init+0x7c>)
 8003988:	2200      	movs	r2, #0
 800398a:	701a      	strb	r2, [r3, #0]
	settingsValid = 0;
 800398c:	4b18      	ldr	r3, [pc, #96]	; (80039f0 <SDcard_Init+0x80>)
 800398e:	2200      	movs	r2, #0
 8003990:	701a      	strb	r2, [r3, #0]


	Uart_SendString("Mounting SD Card...\r\n", pc_uart);
 8003992:	4918      	ldr	r1, [pc, #96]	; (80039f4 <SDcard_Init+0x84>)
 8003994:	4818      	ldr	r0, [pc, #96]	; (80039f8 <SDcard_Init+0x88>)
 8003996:	f7fd fff7 	bl	8001988 <Uart_SendString>
	fresult = Mount_SD("/");
 800399a:	4818      	ldr	r0, [pc, #96]	; (80039fc <SDcard_Init+0x8c>)
 800399c:	f7fd fb9c 	bl	80010d8 <Mount_SD>
 80039a0:	4603      	mov	r3, r0
 80039a2:	461a      	mov	r2, r3
 80039a4:	4b16      	ldr	r3, [pc, #88]	; (8003a00 <SDcard_Init+0x90>)
 80039a6:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK){
 80039a8:	4b15      	ldr	r3, [pc, #84]	; (8003a00 <SDcard_Init+0x90>)
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d005      	beq.n	80039bc <SDcard_Init+0x4c>
		sdState = SDSTATE_ERR;
 80039b0:	4b0c      	ldr	r3, [pc, #48]	; (80039e4 <SDcard_Init+0x74>)
 80039b2:	2202      	movs	r2, #2
 80039b4:	701a      	strb	r2, [r3, #0]
		defaultSettings();
 80039b6:	f000 f82d 	bl	8003a14 <defaultSettings>
		return;
 80039ba:	e012      	b.n	80039e2 <SDcard_Init+0x72>

	}
	fresult = Check_SD_Space();
 80039bc:	f7fd fd1e 	bl	80013fc <Check_SD_Space>
 80039c0:	4603      	mov	r3, r0
 80039c2:	461a      	mov	r2, r3
 80039c4:	4b0e      	ldr	r3, [pc, #56]	; (8003a00 <SDcard_Init+0x90>)
 80039c6:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK){
 80039c8:	4b0d      	ldr	r3, [pc, #52]	; (8003a00 <SDcard_Init+0x90>)
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d005      	beq.n	80039dc <SDcard_Init+0x6c>
		sdState = SDSTATE_ERR;
 80039d0:	4b04      	ldr	r3, [pc, #16]	; (80039e4 <SDcard_Init+0x74>)
 80039d2:	2202      	movs	r2, #2
 80039d4:	701a      	strb	r2, [r3, #0]
		defaultSettings();
 80039d6:	f000 f81d 	bl	8003a14 <defaultSettings>
		return;
 80039da:	e002      	b.n	80039e2 <SDcard_Init+0x72>
	}

	sdState = SDSTATE_OK;
 80039dc:	4b01      	ldr	r3, [pc, #4]	; (80039e4 <SDcard_Init+0x74>)
 80039de:	2201      	movs	r2, #1
 80039e0:	701a      	strb	r2, [r3, #0]


}
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	200072dc 	.word	0x200072dc
 80039e8:	20004c50 	.word	0x20004c50
 80039ec:	200072dd 	.word	0x200072dd
 80039f0:	200062d8 	.word	0x200062d8
 80039f4:	20004094 	.word	0x20004094
 80039f8:	08017c60 	.word	0x08017c60
 80039fc:	08017c78 	.word	0x08017c78
 8003a00:	20002bc4 	.word	0x20002bc4

08003a04 <checkSDError>:

void checkSDError(void){
 8003a04:	b480      	push	{r7}
 8003a06:	af00      	add	r7, sp, #0
//			MX_FATFS_Init();
//			sdState = SDSTATE_INIT;
//			break;
//
//	}
}
 8003a08:	bf00      	nop
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
	...

08003a14 <defaultSettings>:

void defaultSettings(void){
 8003a14:	b5b0      	push	{r4, r5, r7, lr}
 8003a16:	af00      	add	r7, sp, #0
	//check if all key settings are set. If not, set to defaults.
	if(strlen(settings.URL) < 8){
 8003a18:	4825      	ldr	r0, [pc, #148]	; (8003ab0 <defaultSettings+0x9c>)
 8003a1a:	f7fc fbeb 	bl	80001f4 <strlen>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b07      	cmp	r3, #7
 8003a22:	d811      	bhi.n	8003a48 <defaultSettings+0x34>
		strcpy(settings.URL, "freeflightwx.com/test/up4.php");
 8003a24:	4a22      	ldr	r2, [pc, #136]	; (8003ab0 <defaultSettings+0x9c>)
 8003a26:	4b23      	ldr	r3, [pc, #140]	; (8003ab4 <defaultSettings+0xa0>)
 8003a28:	4615      	mov	r5, r2
 8003a2a:	461c      	mov	r4, r3
 8003a2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a2e:	6028      	str	r0, [r5, #0]
 8003a30:	6069      	str	r1, [r5, #4]
 8003a32:	60aa      	str	r2, [r5, #8]
 8003a34:	60eb      	str	r3, [r5, #12]
 8003a36:	cc07      	ldmia	r4!, {r0, r1, r2}
 8003a38:	6128      	str	r0, [r5, #16]
 8003a3a:	6169      	str	r1, [r5, #20]
 8003a3c:	61aa      	str	r2, [r5, #24]
 8003a3e:	8823      	ldrh	r3, [r4, #0]
 8003a40:	83ab      	strh	r3, [r5, #28]
		setSaveFlag(1);
 8003a42:	2001      	movs	r0, #1
 8003a44:	f000 f88a 	bl	8003b5c <setSaveFlag>
		//setUpdateStationListFlag(1);

	}

	if(!settings.SID){
 8003a48:	4b1b      	ldr	r3, [pc, #108]	; (8003ab8 <defaultSettings+0xa4>)
 8003a4a:	8a9b      	ldrh	r3, [r3, #20]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d106      	bne.n	8003a5e <defaultSettings+0x4a>
		settings.SID = 1234;
 8003a50:	4b19      	ldr	r3, [pc, #100]	; (8003ab8 <defaultSettings+0xa4>)
 8003a52:	f240 42d2 	movw	r2, #1234	; 0x4d2
 8003a56:	829a      	strh	r2, [r3, #20]
		setSaveFlag(1);
 8003a58:	2001      	movs	r0, #1
 8003a5a:	f000 f87f 	bl	8003b5c <setSaveFlag>
		//setUpdateStationListFlag(1);

	}

	if(!settings.BCL){
 8003a5e:	4b16      	ldr	r3, [pc, #88]	; (8003ab8 <defaultSettings+0xa4>)
 8003a60:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8003a64:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a6c:	d106      	bne.n	8003a7c <defaultSettings+0x68>
		settings.BCL = 0.0039487; //Volts in = ADCValue * BCL Multiplier ::: BCL Multiplier Default = 3.3V full value/4095 ADC full value * (39ohm + 10ohm ) / 10ohm
 8003a6e:	4b12      	ldr	r3, [pc, #72]	; (8003ab8 <defaultSettings+0xa4>)
 8003a70:	4a12      	ldr	r2, [pc, #72]	; (8003abc <defaultSettings+0xa8>)
 8003a72:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		setSaveFlag(1);
 8003a76:	2001      	movs	r0, #1
 8003a78:	f000 f870 	bl	8003b5c <setSaveFlag>
		//setUpdateStationListFlag(1);

	}

	if(!settings.RSH){
 8003a7c:	4b0e      	ldr	r3, [pc, #56]	; (8003ab8 <defaultSettings+0xa4>)
 8003a7e:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d106      	bne.n	8003a94 <defaultSettings+0x80>
		settings.RSH = 9;
 8003a86:	4b0c      	ldr	r3, [pc, #48]	; (8003ab8 <defaultSettings+0xa4>)
 8003a88:	2209      	movs	r2, #9
 8003a8a:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
		setSaveFlag(1);
 8003a8e:	2001      	movs	r0, #1
 8003a90:	f000 f864 	bl	8003b5c <setSaveFlag>
		//setUpdateStationListFlag(1);

	}

	if(!settings.AVN){
 8003a94:	4b08      	ldr	r3, [pc, #32]	; (8003ab8 <defaultSettings+0xa4>)
 8003a96:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d106      	bne.n	8003aac <defaultSettings+0x98>
		settings.AVN = 5;
 8003a9e:	4b06      	ldr	r3, [pc, #24]	; (8003ab8 <defaultSettings+0xa4>)
 8003aa0:	2205      	movs	r2, #5
 8003aa2:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
		setSaveFlag(1);
 8003aa6:	2001      	movs	r0, #1
 8003aa8:	f000 f858 	bl	8003b5c <setSaveFlag>
		//setUpdateStationListFlag(1);

	}

}
 8003aac:	bf00      	nop
 8003aae:	bdb0      	pop	{r4, r5, r7, pc}
 8003ab0:	20004c66 	.word	0x20004c66
 8003ab4:	08017c7c 	.word	0x08017c7c
 8003ab8:	20004c50 	.word	0x20004c50
 8003abc:	3b816419 	.word	0x3b816419

08003ac0 <openSettingsFromSD>:

void openSettingsFromSD(void){
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0


	Uart_SendString("Opening Settings\r\n", pc_uart);
 8003ac6:	491e      	ldr	r1, [pc, #120]	; (8003b40 <openSettingsFromSD+0x80>)
 8003ac8:	481e      	ldr	r0, [pc, #120]	; (8003b44 <openSettingsFromSD+0x84>)
 8003aca:	f7fd ff5d 	bl	8001988 <Uart_SendString>

	fresult = File_O_Open(settingsFile);
 8003ace:	4b1e      	ldr	r3, [pc, #120]	; (8003b48 <openSettingsFromSD+0x88>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7fd fd0e 	bl	80014f4 <File_O_Open>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	461a      	mov	r2, r3
 8003adc:	4b1b      	ldr	r3, [pc, #108]	; (8003b4c <openSettingsFromSD+0x8c>)
 8003ade:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK){
 8003ae0:	4b1a      	ldr	r3, [pc, #104]	; (8003b4c <openSettingsFromSD+0x8c>)
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00a      	beq.n	8003afe <openSettingsFromSD+0x3e>
		sdState = SDSTATE_ERR;
 8003ae8:	4b19      	ldr	r3, [pc, #100]	; (8003b50 <openSettingsFromSD+0x90>)
 8003aea:	2202      	movs	r2, #2
 8003aec:	701a      	strb	r2, [r3, #0]
		defaultSettings();
 8003aee:	f7ff ff91 	bl	8003a14 <defaultSettings>
		return;
 8003af2:	e022      	b.n	8003b3a <openSettingsFromSD+0x7a>


	TCHAR * result;

	while((result = File_O_Read_Line(buffer))){
		settingsLineProcessor(buffer, 0, 0);
 8003af4:	2200      	movs	r2, #0
 8003af6:	2100      	movs	r1, #0
 8003af8:	4816      	ldr	r0, [pc, #88]	; (8003b54 <openSettingsFromSD+0x94>)
 8003afa:	f000 f97d 	bl	8003df8 <settingsLineProcessor>
	while((result = File_O_Read_Line(buffer))){
 8003afe:	4815      	ldr	r0, [pc, #84]	; (8003b54 <openSettingsFromSD+0x94>)
 8003b00:	f7fd fdb0 	bl	8001664 <File_O_Read_Line>
 8003b04:	6078      	str	r0, [r7, #4]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1f3      	bne.n	8003af4 <openSettingsFromSD+0x34>
	}
	fresult = File_O_Close();
 8003b0c:	f7fd fd36 	bl	800157c <File_O_Close>
 8003b10:	4603      	mov	r3, r0
 8003b12:	461a      	mov	r2, r3
 8003b14:	4b0d      	ldr	r3, [pc, #52]	; (8003b4c <openSettingsFromSD+0x8c>)
 8003b16:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK){
 8003b18:	4b0c      	ldr	r3, [pc, #48]	; (8003b4c <openSettingsFromSD+0x8c>)
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d005      	beq.n	8003b2c <openSettingsFromSD+0x6c>
		sdState = SDSTATE_ERR;
 8003b20:	4b0b      	ldr	r3, [pc, #44]	; (8003b50 <openSettingsFromSD+0x90>)
 8003b22:	2202      	movs	r2, #2
 8003b24:	701a      	strb	r2, [r3, #0]
		defaultSettings();
 8003b26:	f7ff ff75 	bl	8003a14 <defaultSettings>
		return;
 8003b2a:	e006      	b.n	8003b3a <openSettingsFromSD+0x7a>

	}

//	printSettings();

	defaultSettings();
 8003b2c:	f7ff ff72 	bl	8003a14 <defaultSettings>

	printSettings();
 8003b30:	f000 f8c4 	bl	8003cbc <printSettings>
	settingsValid = 1;//prevents calling for settings from the station server.
 8003b34:	4b08      	ldr	r3, [pc, #32]	; (8003b58 <openSettingsFromSD+0x98>)
 8003b36:	2201      	movs	r2, #1
 8003b38:	701a      	strb	r2, [r3, #0]

}
 8003b3a:	3708      	adds	r7, #8
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	20004094 	.word	0x20004094
 8003b44:	08017c9c 	.word	0x08017c9c
 8003b48:	2000000c 	.word	0x2000000c
 8003b4c:	20002bc4 	.word	0x20002bc4
 8003b50:	200072dc 	.word	0x200072dc
 8003b54:	20006210 	.word	0x20006210
 8003b58:	200062d8 	.word	0x200062d8

08003b5c <setSaveFlag>:

void setSaveFlag(uint8_t flag){
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	4603      	mov	r3, r0
 8003b64:	71fb      	strb	r3, [r7, #7]
	saveFlag = flag;
 8003b66:	4a04      	ldr	r2, [pc, #16]	; (8003b78 <setSaveFlag+0x1c>)
 8003b68:	79fb      	ldrb	r3, [r7, #7]
 8003b6a:	7013      	strb	r3, [r2, #0]

}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr
 8003b78:	200072dd 	.word	0x200072dd

08003b7c <saveSettingsToSD>:
	return sdState;
}



void saveSettingsToSD(void){
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	af00      	add	r7, sp, #0

	if(saveFlag){
 8003b80:	4b3d      	ldr	r3, [pc, #244]	; (8003c78 <saveSettingsToSD+0xfc>)
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d074      	beq.n	8003c72 <saveSettingsToSD+0xf6>


		if(sdState == SDSTATE_OK){
 8003b88:	4b3c      	ldr	r3, [pc, #240]	; (8003c7c <saveSettingsToSD+0x100>)
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d16d      	bne.n	8003c6c <saveSettingsToSD+0xf0>

			Uart_SendString("Saving Settings to SD Card\r\n", pc_uart);
 8003b90:	493b      	ldr	r1, [pc, #236]	; (8003c80 <saveSettingsToSD+0x104>)
 8003b92:	483c      	ldr	r0, [pc, #240]	; (8003c84 <saveSettingsToSD+0x108>)
 8003b94:	f7fd fef8 	bl	8001988 <Uart_SendString>


			fresult = File_O_Open(settingsFile);
 8003b98:	4b3b      	ldr	r3, [pc, #236]	; (8003c88 <saveSettingsToSD+0x10c>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7fd fca9 	bl	80014f4 <File_O_Open>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	4b39      	ldr	r3, [pc, #228]	; (8003c8c <saveSettingsToSD+0x110>)
 8003ba8:	701a      	strb	r2, [r3, #0]

			if (fresult != FR_OK){
 8003baa:	4b38      	ldr	r3, [pc, #224]	; (8003c8c <saveSettingsToSD+0x110>)
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d002      	beq.n	8003bb8 <saveSettingsToSD+0x3c>
				sdState = SDSTATE_ERR;
 8003bb2:	4b32      	ldr	r3, [pc, #200]	; (8003c7c <saveSettingsToSD+0x100>)
 8003bb4:	2202      	movs	r2, #2
 8003bb6:	701a      	strb	r2, [r3, #0]
			}

			File_O_Print("#FreeFlightWx Settings\r\n");
 8003bb8:	4835      	ldr	r0, [pc, #212]	; (8003c90 <saveSettingsToSD+0x114>)
 8003bba:	f7fd fd1d 	bl	80015f8 <File_O_Print>
			sprintf(buffer, "MEI=%s\r\n", settings.MEI);
 8003bbe:	4a35      	ldr	r2, [pc, #212]	; (8003c94 <saveSettingsToSD+0x118>)
 8003bc0:	4935      	ldr	r1, [pc, #212]	; (8003c98 <saveSettingsToSD+0x11c>)
 8003bc2:	4836      	ldr	r0, [pc, #216]	; (8003c9c <saveSettingsToSD+0x120>)
 8003bc4:	f00d fd12 	bl	80115ec <siprintf>
			File_O_Print(buffer);
 8003bc8:	4834      	ldr	r0, [pc, #208]	; (8003c9c <saveSettingsToSD+0x120>)
 8003bca:	f7fd fd15 	bl	80015f8 <File_O_Print>
			sprintf(buffer, "SID=%i\r\n", settings.SID);
 8003bce:	4b31      	ldr	r3, [pc, #196]	; (8003c94 <saveSettingsToSD+0x118>)
 8003bd0:	8a9b      	ldrh	r3, [r3, #20]
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	4932      	ldr	r1, [pc, #200]	; (8003ca0 <saveSettingsToSD+0x124>)
 8003bd6:	4831      	ldr	r0, [pc, #196]	; (8003c9c <saveSettingsToSD+0x120>)
 8003bd8:	f00d fd08 	bl	80115ec <siprintf>
			File_O_Print(buffer);
 8003bdc:	482f      	ldr	r0, [pc, #188]	; (8003c9c <saveSettingsToSD+0x120>)
 8003bde:	f7fd fd0b 	bl	80015f8 <File_O_Print>
			sprintf(buffer, "URL=%s\r\n", settings.URL);
 8003be2:	4a30      	ldr	r2, [pc, #192]	; (8003ca4 <saveSettingsToSD+0x128>)
 8003be4:	4930      	ldr	r1, [pc, #192]	; (8003ca8 <saveSettingsToSD+0x12c>)
 8003be6:	482d      	ldr	r0, [pc, #180]	; (8003c9c <saveSettingsToSD+0x120>)
 8003be8:	f00d fd00 	bl	80115ec <siprintf>
			File_O_Print(buffer);
 8003bec:	482b      	ldr	r0, [pc, #172]	; (8003c9c <saveSettingsToSD+0x120>)
 8003bee:	f7fd fd03 	bl	80015f8 <File_O_Print>
			sprintf(buffer, "LOG=%i\r\n", settings.LOG);
 8003bf2:	4b28      	ldr	r3, [pc, #160]	; (8003c94 <saveSettingsToSD+0x118>)
 8003bf4:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	492c      	ldr	r1, [pc, #176]	; (8003cac <saveSettingsToSD+0x130>)
 8003bfc:	4827      	ldr	r0, [pc, #156]	; (8003c9c <saveSettingsToSD+0x120>)
 8003bfe:	f00d fcf5 	bl	80115ec <siprintf>
			File_O_Print(buffer);
 8003c02:	4826      	ldr	r0, [pc, #152]	; (8003c9c <saveSettingsToSD+0x120>)
 8003c04:	f7fd fcf8 	bl	80015f8 <File_O_Print>
			sprintf(buffer, "BCL=%.7f\r\n", settings.BCL);
 8003c08:	4b22      	ldr	r3, [pc, #136]	; (8003c94 <saveSettingsToSD+0x118>)
 8003c0a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7fc fcb2 	bl	8000578 <__aeabi_f2d>
 8003c14:	4602      	mov	r2, r0
 8003c16:	460b      	mov	r3, r1
 8003c18:	4925      	ldr	r1, [pc, #148]	; (8003cb0 <saveSettingsToSD+0x134>)
 8003c1a:	4820      	ldr	r0, [pc, #128]	; (8003c9c <saveSettingsToSD+0x120>)
 8003c1c:	f00d fce6 	bl	80115ec <siprintf>
			File_O_Print(buffer);
 8003c20:	481e      	ldr	r0, [pc, #120]	; (8003c9c <saveSettingsToSD+0x120>)
 8003c22:	f7fd fce9 	bl	80015f8 <File_O_Print>
			sprintf(buffer, "RSH=%i\r\n", settings.RSH);
 8003c26:	4b1b      	ldr	r3, [pc, #108]	; (8003c94 <saveSettingsToSD+0x118>)
 8003c28:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	4921      	ldr	r1, [pc, #132]	; (8003cb4 <saveSettingsToSD+0x138>)
 8003c30:	481a      	ldr	r0, [pc, #104]	; (8003c9c <saveSettingsToSD+0x120>)
 8003c32:	f00d fcdb 	bl	80115ec <siprintf>
			File_O_Print(buffer);
 8003c36:	4819      	ldr	r0, [pc, #100]	; (8003c9c <saveSettingsToSD+0x120>)
 8003c38:	f7fd fcde 	bl	80015f8 <File_O_Print>
			sprintf(buffer, "AVN=%i\r\n", settings.AVN);
 8003c3c:	4b15      	ldr	r3, [pc, #84]	; (8003c94 <saveSettingsToSD+0x118>)
 8003c3e:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 8003c42:	461a      	mov	r2, r3
 8003c44:	491c      	ldr	r1, [pc, #112]	; (8003cb8 <saveSettingsToSD+0x13c>)
 8003c46:	4815      	ldr	r0, [pc, #84]	; (8003c9c <saveSettingsToSD+0x120>)
 8003c48:	f00d fcd0 	bl	80115ec <siprintf>
			File_O_Print(buffer);
 8003c4c:	4813      	ldr	r0, [pc, #76]	; (8003c9c <saveSettingsToSD+0x120>)
 8003c4e:	f7fd fcd3 	bl	80015f8 <File_O_Print>
			fresult = File_O_Close();
 8003c52:	f7fd fc93 	bl	800157c <File_O_Close>
 8003c56:	4603      	mov	r3, r0
 8003c58:	461a      	mov	r2, r3
 8003c5a:	4b0c      	ldr	r3, [pc, #48]	; (8003c8c <saveSettingsToSD+0x110>)
 8003c5c:	701a      	strb	r2, [r3, #0]

			if (fresult != FR_OK){
 8003c5e:	4b0b      	ldr	r3, [pc, #44]	; (8003c8c <saveSettingsToSD+0x110>)
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d002      	beq.n	8003c6c <saveSettingsToSD+0xf0>
				sdState = SDSTATE_ERR;
 8003c66:	4b05      	ldr	r3, [pc, #20]	; (8003c7c <saveSettingsToSD+0x100>)
 8003c68:	2202      	movs	r2, #2
 8003c6a:	701a      	strb	r2, [r3, #0]
			}
		}

		saveFlag = 0;
 8003c6c:	4b02      	ldr	r3, [pc, #8]	; (8003c78 <saveSettingsToSD+0xfc>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	701a      	strb	r2, [r3, #0]
	}



}
 8003c72:	bf00      	nop
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	200072dd 	.word	0x200072dd
 8003c7c:	200072dc 	.word	0x200072dc
 8003c80:	20004094 	.word	0x20004094
 8003c84:	08017cb0 	.word	0x08017cb0
 8003c88:	2000000c 	.word	0x2000000c
 8003c8c:	20002bc4 	.word	0x20002bc4
 8003c90:	08017cd0 	.word	0x08017cd0
 8003c94:	20004c50 	.word	0x20004c50
 8003c98:	08017cec 	.word	0x08017cec
 8003c9c:	20006210 	.word	0x20006210
 8003ca0:	08017cf8 	.word	0x08017cf8
 8003ca4:	20004c66 	.word	0x20004c66
 8003ca8:	08017d04 	.word	0x08017d04
 8003cac:	08017d10 	.word	0x08017d10
 8003cb0:	08017d1c 	.word	0x08017d1c
 8003cb4:	08017d28 	.word	0x08017d28
 8003cb8:	08017d34 	.word	0x08017d34

08003cbc <printSettings>:
void printSettings(void){
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	af00      	add	r7, sp, #0

	Uart_SendString("Print Settings ...\r\n", pc_uart);
 8003cc0:	492d      	ldr	r1, [pc, #180]	; (8003d78 <printSettings+0xbc>)
 8003cc2:	482e      	ldr	r0, [pc, #184]	; (8003d7c <printSettings+0xc0>)
 8003cc4:	f7fd fe60 	bl	8001988 <Uart_SendString>

	Uart_SendString("#FreeFlightWx Settings\r\n", pc_uart);
 8003cc8:	492b      	ldr	r1, [pc, #172]	; (8003d78 <printSettings+0xbc>)
 8003cca:	482d      	ldr	r0, [pc, #180]	; (8003d80 <printSettings+0xc4>)
 8003ccc:	f7fd fe5c 	bl	8001988 <Uart_SendString>
	sprintf(buffer, "MEI=%s\r\n", settings.MEI);
 8003cd0:	4a2c      	ldr	r2, [pc, #176]	; (8003d84 <printSettings+0xc8>)
 8003cd2:	492d      	ldr	r1, [pc, #180]	; (8003d88 <printSettings+0xcc>)
 8003cd4:	482d      	ldr	r0, [pc, #180]	; (8003d8c <printSettings+0xd0>)
 8003cd6:	f00d fc89 	bl	80115ec <siprintf>
	Uart_SendString(buffer, pc_uart);
 8003cda:	4927      	ldr	r1, [pc, #156]	; (8003d78 <printSettings+0xbc>)
 8003cdc:	482b      	ldr	r0, [pc, #172]	; (8003d8c <printSettings+0xd0>)
 8003cde:	f7fd fe53 	bl	8001988 <Uart_SendString>
	sprintf(buffer, "SID=%i\r\n", settings.SID);
 8003ce2:	4b28      	ldr	r3, [pc, #160]	; (8003d84 <printSettings+0xc8>)
 8003ce4:	8a9b      	ldrh	r3, [r3, #20]
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	4929      	ldr	r1, [pc, #164]	; (8003d90 <printSettings+0xd4>)
 8003cea:	4828      	ldr	r0, [pc, #160]	; (8003d8c <printSettings+0xd0>)
 8003cec:	f00d fc7e 	bl	80115ec <siprintf>
	Uart_SendString(buffer, pc_uart);
 8003cf0:	4921      	ldr	r1, [pc, #132]	; (8003d78 <printSettings+0xbc>)
 8003cf2:	4826      	ldr	r0, [pc, #152]	; (8003d8c <printSettings+0xd0>)
 8003cf4:	f7fd fe48 	bl	8001988 <Uart_SendString>
	sprintf(buffer, "URL=%s\r\n", settings.URL);
 8003cf8:	4a26      	ldr	r2, [pc, #152]	; (8003d94 <printSettings+0xd8>)
 8003cfa:	4927      	ldr	r1, [pc, #156]	; (8003d98 <printSettings+0xdc>)
 8003cfc:	4823      	ldr	r0, [pc, #140]	; (8003d8c <printSettings+0xd0>)
 8003cfe:	f00d fc75 	bl	80115ec <siprintf>
	Uart_SendString(buffer, pc_uart);
 8003d02:	491d      	ldr	r1, [pc, #116]	; (8003d78 <printSettings+0xbc>)
 8003d04:	4821      	ldr	r0, [pc, #132]	; (8003d8c <printSettings+0xd0>)
 8003d06:	f7fd fe3f 	bl	8001988 <Uart_SendString>
	sprintf(buffer, "LOG=%i\r\n", settings.LOG);
 8003d0a:	4b1e      	ldr	r3, [pc, #120]	; (8003d84 <printSettings+0xc8>)
 8003d0c:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 8003d10:	461a      	mov	r2, r3
 8003d12:	4922      	ldr	r1, [pc, #136]	; (8003d9c <printSettings+0xe0>)
 8003d14:	481d      	ldr	r0, [pc, #116]	; (8003d8c <printSettings+0xd0>)
 8003d16:	f00d fc69 	bl	80115ec <siprintf>
	Uart_SendString(buffer, pc_uart);
 8003d1a:	4917      	ldr	r1, [pc, #92]	; (8003d78 <printSettings+0xbc>)
 8003d1c:	481b      	ldr	r0, [pc, #108]	; (8003d8c <printSettings+0xd0>)
 8003d1e:	f7fd fe33 	bl	8001988 <Uart_SendString>
	sprintf(buffer, "BCL=%.7f\r\n", settings.BCL);
 8003d22:	4b18      	ldr	r3, [pc, #96]	; (8003d84 <printSettings+0xc8>)
 8003d24:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7fc fc25 	bl	8000578 <__aeabi_f2d>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	460b      	mov	r3, r1
 8003d32:	491b      	ldr	r1, [pc, #108]	; (8003da0 <printSettings+0xe4>)
 8003d34:	4815      	ldr	r0, [pc, #84]	; (8003d8c <printSettings+0xd0>)
 8003d36:	f00d fc59 	bl	80115ec <siprintf>
	Uart_SendString(buffer, pc_uart);
 8003d3a:	490f      	ldr	r1, [pc, #60]	; (8003d78 <printSettings+0xbc>)
 8003d3c:	4813      	ldr	r0, [pc, #76]	; (8003d8c <printSettings+0xd0>)
 8003d3e:	f7fd fe23 	bl	8001988 <Uart_SendString>
	sprintf(buffer, "RSH=%i\r\n", settings.RSH);
 8003d42:	4b10      	ldr	r3, [pc, #64]	; (8003d84 <printSettings+0xc8>)
 8003d44:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8003d48:	461a      	mov	r2, r3
 8003d4a:	4916      	ldr	r1, [pc, #88]	; (8003da4 <printSettings+0xe8>)
 8003d4c:	480f      	ldr	r0, [pc, #60]	; (8003d8c <printSettings+0xd0>)
 8003d4e:	f00d fc4d 	bl	80115ec <siprintf>
	Uart_SendString(buffer, pc_uart);
 8003d52:	4909      	ldr	r1, [pc, #36]	; (8003d78 <printSettings+0xbc>)
 8003d54:	480d      	ldr	r0, [pc, #52]	; (8003d8c <printSettings+0xd0>)
 8003d56:	f7fd fe17 	bl	8001988 <Uart_SendString>
	sprintf(buffer, "AVN=%i\r\n", settings.AVN);
 8003d5a:	4b0a      	ldr	r3, [pc, #40]	; (8003d84 <printSettings+0xc8>)
 8003d5c:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 8003d60:	461a      	mov	r2, r3
 8003d62:	4911      	ldr	r1, [pc, #68]	; (8003da8 <printSettings+0xec>)
 8003d64:	4809      	ldr	r0, [pc, #36]	; (8003d8c <printSettings+0xd0>)
 8003d66:	f00d fc41 	bl	80115ec <siprintf>
	Uart_SendString(buffer, pc_uart);
 8003d6a:	4903      	ldr	r1, [pc, #12]	; (8003d78 <printSettings+0xbc>)
 8003d6c:	4807      	ldr	r0, [pc, #28]	; (8003d8c <printSettings+0xd0>)
 8003d6e:	f7fd fe0b 	bl	8001988 <Uart_SendString>


}
 8003d72:	bf00      	nop
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	20004094 	.word	0x20004094
 8003d7c:	08017d40 	.word	0x08017d40
 8003d80:	08017cd0 	.word	0x08017cd0
 8003d84:	20004c50 	.word	0x20004c50
 8003d88:	08017cec 	.word	0x08017cec
 8003d8c:	20006210 	.word	0x20006210
 8003d90:	08017cf8 	.word	0x08017cf8
 8003d94:	20004c66 	.word	0x20004c66
 8003d98:	08017d04 	.word	0x08017d04
 8003d9c:	08017d10 	.word	0x08017d10
 8003da0:	08017d1c 	.word	0x08017d1c
 8003da4:	08017d28 	.word	0x08017d28
 8003da8:	08017d34 	.word	0x08017d34

08003dac <getSettings>:


SETTINGS * getSettings(void){
 8003dac:	b480      	push	{r7}
 8003dae:	af00      	add	r7, sp, #0
	return &settings;
 8003db0:	4b02      	ldr	r3, [pc, #8]	; (8003dbc <getSettings+0x10>)
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr
 8003dbc:	20004c50 	.word	0x20004c50

08003dc0 <getUpdateStationListFlag>:

uint8_t getUpdateStationListFlag(void){
 8003dc0:	b480      	push	{r7}
 8003dc2:	af00      	add	r7, sp, #0
	return updateStationListFlag;
 8003dc4:	4b03      	ldr	r3, [pc, #12]	; (8003dd4 <getUpdateStationListFlag+0x14>)
 8003dc6:	781b      	ldrb	r3, [r3, #0]
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	20004c4a 	.word	0x20004c4a

08003dd8 <setUpdateStationListFlag>:

void setUpdateStationListFlag(uint8_t flag){
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	4603      	mov	r3, r0
 8003de0:	71fb      	strb	r3, [r7, #7]
	updateStationListFlag = flag;
 8003de2:	4a04      	ldr	r2, [pc, #16]	; (8003df4 <setUpdateStationListFlag+0x1c>)
 8003de4:	79fb      	ldrb	r3, [r7, #7]
 8003de6:	7013      	strb	r3, [r2, #0]
//	scheduleSendParamsToUp();
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr
 8003df4:	20004c4a 	.word	0x20004c4a

08003df8 <settingsLineProcessor>:


void settingsLineProcessor(char * line, uint8_t saveSD, uint8_t saveServer){
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	460b      	mov	r3, r1
 8003e02:	70fb      	strb	r3, [r7, #3]
 8003e04:	4613      	mov	r3, r2
 8003e06:	70bb      	strb	r3, [r7, #2]

//	Uart_sendstring("X\r\n", pc_uart);
//	Uart_SendString(line, pc_uart);

    if(line[0] == '#') {
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	2b23      	cmp	r3, #35	; 0x23
 8003e0e:	f000 8139 	beq.w	8004084 <settingsLineProcessor+0x28c>
    	return;
    }

    else if(!strncmp(line, "URL=", 4)){
 8003e12:	2204      	movs	r2, #4
 8003e14:	499e      	ldr	r1, [pc, #632]	; (8004090 <settingsLineProcessor+0x298>)
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f00d fc08 	bl	801162c <strncmp>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d130      	bne.n	8003e84 <settingsLineProcessor+0x8c>
//    	Uart_sendstring("TEST", pc_uart);
    	uint8_t i = 4;
 8003e22:	2304      	movs	r3, #4
 8003e24:	73fb      	strb	r3, [r7, #15]

    	//do a special copy
    	while (line[i] && line[i] != '\r' && line[i] != '\n'){
 8003e26:	e00c      	b.n	8003e42 <settingsLineProcessor+0x4a>
    		settings.URL[i-4] = line[i];
 8003e28:	7bfb      	ldrb	r3, [r7, #15]
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	441a      	add	r2, r3
 8003e2e:	7bfb      	ldrb	r3, [r7, #15]
 8003e30:	3b04      	subs	r3, #4
 8003e32:	7811      	ldrb	r1, [r2, #0]
 8003e34:	4a97      	ldr	r2, [pc, #604]	; (8004094 <settingsLineProcessor+0x29c>)
 8003e36:	4413      	add	r3, r2
 8003e38:	460a      	mov	r2, r1
 8003e3a:	759a      	strb	r2, [r3, #22]
    		i++;
 8003e3c:	7bfb      	ldrb	r3, [r7, #15]
 8003e3e:	3301      	adds	r3, #1
 8003e40:	73fb      	strb	r3, [r7, #15]
    	while (line[i] && line[i] != '\r' && line[i] != '\n'){
 8003e42:	7bfb      	ldrb	r3, [r7, #15]
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	4413      	add	r3, r2
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00b      	beq.n	8003e66 <settingsLineProcessor+0x6e>
 8003e4e:	7bfb      	ldrb	r3, [r7, #15]
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	4413      	add	r3, r2
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	2b0d      	cmp	r3, #13
 8003e58:	d005      	beq.n	8003e66 <settingsLineProcessor+0x6e>
 8003e5a:	7bfb      	ldrb	r3, [r7, #15]
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	4413      	add	r3, r2
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	2b0a      	cmp	r3, #10
 8003e64:	d1e0      	bne.n	8003e28 <settingsLineProcessor+0x30>
    	}
    	settings.URL[i-4] = 0;//add a null character
 8003e66:	7bfb      	ldrb	r3, [r7, #15]
 8003e68:	3b04      	subs	r3, #4
 8003e6a:	4a8a      	ldr	r2, [pc, #552]	; (8004094 <settingsLineProcessor+0x29c>)
 8003e6c:	4413      	add	r3, r2
 8003e6e:	2200      	movs	r2, #0
 8003e70:	759a      	strb	r2, [r3, #22]

    	setSaveFlag(saveSD);
 8003e72:	78fb      	ldrb	r3, [r7, #3]
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7ff fe71 	bl	8003b5c <setSaveFlag>
    	setUpdateStationListFlag(saveServer);
 8003e7a:	78bb      	ldrb	r3, [r7, #2]
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7ff ffab 	bl	8003dd8 <setUpdateStationListFlag>

   	}



    return;
 8003e82:	e101      	b.n	8004088 <settingsLineProcessor+0x290>
    else if(!strncmp(line, "SID=", 4)){
 8003e84:	2204      	movs	r2, #4
 8003e86:	4984      	ldr	r1, [pc, #528]	; (8004098 <settingsLineProcessor+0x2a0>)
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f00d fbcf 	bl	801162c <strncmp>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d112      	bne.n	8003eba <settingsLineProcessor+0xc2>
    	settings.SID=util_atoi_n(line + 4 ,20);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	3304      	adds	r3, #4
 8003e98:	2114      	movs	r1, #20
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f002 fba0 	bl	80065e0 <util_atoi_n>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	b29a      	uxth	r2, r3
 8003ea4:	4b7b      	ldr	r3, [pc, #492]	; (8004094 <settingsLineProcessor+0x29c>)
 8003ea6:	829a      	strh	r2, [r3, #20]
    	setSaveFlag(saveSD);
 8003ea8:	78fb      	ldrb	r3, [r7, #3]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7ff fe56 	bl	8003b5c <setSaveFlag>
    	setUpdateStationListFlag(saveServer);
 8003eb0:	78bb      	ldrb	r3, [r7, #2]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7ff ff90 	bl	8003dd8 <setUpdateStationListFlag>
    return;
 8003eb8:	e0e6      	b.n	8004088 <settingsLineProcessor+0x290>
    else if(!strncmp(line, "BCL=", 4)){
 8003eba:	2204      	movs	r2, #4
 8003ebc:	4977      	ldr	r1, [pc, #476]	; (800409c <settingsLineProcessor+0x2a4>)
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f00d fbb4 	bl	801162c <strncmp>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d117      	bne.n	8003efa <settingsLineProcessor+0x102>
		settings.BCL=(float)(atof(line + 4));
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	3304      	adds	r3, #4
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f00c fad7 	bl	8010482 <atof>
 8003ed4:	ec53 2b10 	vmov	r2, r3, d0
 8003ed8:	4610      	mov	r0, r2
 8003eda:	4619      	mov	r1, r3
 8003edc:	f7fc fe9c 	bl	8000c18 <__aeabi_d2f>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	4a6c      	ldr	r2, [pc, #432]	; (8004094 <settingsLineProcessor+0x29c>)
 8003ee4:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
		setSaveFlag(saveSD);
 8003ee8:	78fb      	ldrb	r3, [r7, #3]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7ff fe36 	bl	8003b5c <setSaveFlag>
		setUpdateStationListFlag(saveServer);
 8003ef0:	78bb      	ldrb	r3, [r7, #2]
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7ff ff70 	bl	8003dd8 <setUpdateStationListFlag>
    return;
 8003ef8:	e0c6      	b.n	8004088 <settingsLineProcessor+0x290>
    else if(!strncmp(line, "LOG=", 4)){
 8003efa:	2204      	movs	r2, #4
 8003efc:	4968      	ldr	r1, [pc, #416]	; (80040a0 <settingsLineProcessor+0x2a8>)
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f00d fb94 	bl	801162c <strncmp>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d113      	bne.n	8003f32 <settingsLineProcessor+0x13a>
		settings.LOG=util_atoi_n(line + 4 ,20);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	3304      	adds	r3, #4
 8003f0e:	2114      	movs	r1, #20
 8003f10:	4618      	mov	r0, r3
 8003f12:	f002 fb65 	bl	80065e0 <util_atoi_n>
 8003f16:	4603      	mov	r3, r0
 8003f18:	b2da      	uxtb	r2, r3
 8003f1a:	4b5e      	ldr	r3, [pc, #376]	; (8004094 <settingsLineProcessor+0x29c>)
 8003f1c:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
		setSaveFlag(saveSD);
 8003f20:	78fb      	ldrb	r3, [r7, #3]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7ff fe1a 	bl	8003b5c <setSaveFlag>
		setUpdateStationListFlag(saveServer);
 8003f28:	78bb      	ldrb	r3, [r7, #2]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7ff ff54 	bl	8003dd8 <setUpdateStationListFlag>
    return;
 8003f30:	e0aa      	b.n	8004088 <settingsLineProcessor+0x290>
    else if(!strncmp(line, "RSH=", 4)){
 8003f32:	2204      	movs	r2, #4
 8003f34:	495b      	ldr	r1, [pc, #364]	; (80040a4 <settingsLineProcessor+0x2ac>)
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f00d fb78 	bl	801162c <strncmp>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d113      	bne.n	8003f6a <settingsLineProcessor+0x172>
		settings.RSH=util_atoi_n(line + 4 ,20);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	3304      	adds	r3, #4
 8003f46:	2114      	movs	r1, #20
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f002 fb49 	bl	80065e0 <util_atoi_n>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	b2da      	uxtb	r2, r3
 8003f52:	4b50      	ldr	r3, [pc, #320]	; (8004094 <settingsLineProcessor+0x29c>)
 8003f54:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
		setSaveFlag(saveSD);
 8003f58:	78fb      	ldrb	r3, [r7, #3]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7ff fdfe 	bl	8003b5c <setSaveFlag>
		setUpdateStationListFlag(saveServer);
 8003f60:	78bb      	ldrb	r3, [r7, #2]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7ff ff38 	bl	8003dd8 <setUpdateStationListFlag>
    return;
 8003f68:	e08e      	b.n	8004088 <settingsLineProcessor+0x290>
    else if(!strncmp(line, "AVN=", 4)){
 8003f6a:	2204      	movs	r2, #4
 8003f6c:	494e      	ldr	r1, [pc, #312]	; (80040a8 <settingsLineProcessor+0x2b0>)
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f00d fb5c 	bl	801162c <strncmp>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d113      	bne.n	8003fa2 <settingsLineProcessor+0x1aa>
		settings.AVN=util_atoi_n(line + 4 ,20);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	3304      	adds	r3, #4
 8003f7e:	2114      	movs	r1, #20
 8003f80:	4618      	mov	r0, r3
 8003f82:	f002 fb2d 	bl	80065e0 <util_atoi_n>
 8003f86:	4603      	mov	r3, r0
 8003f88:	b29a      	uxth	r2, r3
 8003f8a:	4b42      	ldr	r3, [pc, #264]	; (8004094 <settingsLineProcessor+0x29c>)
 8003f8c:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
		setSaveFlag(saveSD);
 8003f90:	78fb      	ldrb	r3, [r7, #3]
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7ff fde2 	bl	8003b5c <setSaveFlag>
		setUpdateStationListFlag(saveServer);
 8003f98:	78bb      	ldrb	r3, [r7, #2]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7ff ff1c 	bl	8003dd8 <setUpdateStationListFlag>
    return;
 8003fa0:	e072      	b.n	8004088 <settingsLineProcessor+0x290>
    else if(!strncmp(line, "VLD=", 4)){
 8003fa2:	2204      	movs	r2, #4
 8003fa4:	4941      	ldr	r1, [pc, #260]	; (80040ac <settingsLineProcessor+0x2b4>)
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f00d fb40 	bl	801162c <strncmp>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d10a      	bne.n	8003fc8 <settingsLineProcessor+0x1d0>
    	settingsValid=util_atoi_n(line + 4 ,20);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	3304      	adds	r3, #4
 8003fb6:	2114      	movs	r1, #20
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f002 fb11 	bl	80065e0 <util_atoi_n>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	b2da      	uxtb	r2, r3
 8003fc2:	4b3b      	ldr	r3, [pc, #236]	; (80040b0 <settingsLineProcessor+0x2b8>)
 8003fc4:	701a      	strb	r2, [r3, #0]
    return;
 8003fc6:	e05f      	b.n	8004088 <settingsLineProcessor+0x290>
    else if(!strncmp(line, "CLK=", 4)){
 8003fc8:	2204      	movs	r2, #4
 8003fca:	493a      	ldr	r1, [pc, #232]	; (80040b4 <settingsLineProcessor+0x2bc>)
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f00d fb2d 	bl	801162c <strncmp>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d106      	bne.n	8003fe6 <settingsLineProcessor+0x1ee>
		setTime(line + 4, TIMESTATE_OK_SERVER);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	3304      	adds	r3, #4
 8003fdc:	2102      	movs	r1, #2
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f002 f87c 	bl	80060dc <setTime>
    return;
 8003fe4:	e050      	b.n	8004088 <settingsLineProcessor+0x290>
    else if(!strncmp(line, "GET", 3 )){
 8003fe6:	2203      	movs	r2, #3
 8003fe8:	4933      	ldr	r1, [pc, #204]	; (80040b8 <settingsLineProcessor+0x2c0>)
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f00d fb1e 	bl	801162c <strncmp>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d102      	bne.n	8003ffc <settingsLineProcessor+0x204>
		printSettings();
 8003ff6:	f7ff fe61 	bl	8003cbc <printSettings>
    return;
 8003ffa:	e045      	b.n	8004088 <settingsLineProcessor+0x290>
    else if(!strncmp(line, "SAV", 3 )){
 8003ffc:	2203      	movs	r2, #3
 8003ffe:	492f      	ldr	r1, [pc, #188]	; (80040bc <settingsLineProcessor+0x2c4>)
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f00d fb13 	bl	801162c <strncmp>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d108      	bne.n	800401e <settingsLineProcessor+0x226>
    	setSaveFlag(saveSD);
 800400c:	78fb      	ldrb	r3, [r7, #3]
 800400e:	4618      	mov	r0, r3
 8004010:	f7ff fda4 	bl	8003b5c <setSaveFlag>
		setUpdateStationListFlag(saveServer);
 8004014:	78bb      	ldrb	r3, [r7, #2]
 8004016:	4618      	mov	r0, r3
 8004018:	f7ff fede 	bl	8003dd8 <setUpdateStationListFlag>
    return;
 800401c:	e034      	b.n	8004088 <settingsLineProcessor+0x290>
    else if(!strncmp(line, "RST", 3 )){
 800401e:	2203      	movs	r2, #3
 8004020:	4927      	ldr	r1, [pc, #156]	; (80040c0 <settingsLineProcessor+0x2c8>)
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f00d fb02 	bl	801162c <strncmp>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d104      	bne.n	8004038 <settingsLineProcessor+0x240>
		scheduleShutdown(20000);
 800402e:	f644 6020 	movw	r0, #20000	; 0x4e20
 8004032:	f000 facb 	bl	80045cc <scheduleShutdown>
    return;
 8004036:	e027      	b.n	8004088 <settingsLineProcessor+0x290>
    else if(!strncmp(line, "HOLD", 4 )){
 8004038:	2204      	movs	r2, #4
 800403a:	4922      	ldr	r1, [pc, #136]	; (80040c4 <settingsLineProcessor+0x2cc>)
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f00d faf5 	bl	801162c <strncmp>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d102      	bne.n	800404e <settingsLineProcessor+0x256>
		toggleHold();
 8004048:	f001 fb32 	bl	80056b0 <toggleHold>
    return;
 800404c:	e01c      	b.n	8004088 <settingsLineProcessor+0x290>
    else if(!strncmp(line, "FMT", 3 )){
 800404e:	2203      	movs	r2, #3
 8004050:	491d      	ldr	r1, [pc, #116]	; (80040c8 <settingsLineProcessor+0x2d0>)
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f00d faea 	bl	801162c <strncmp>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d114      	bne.n	8004088 <settingsLineProcessor+0x290>
    	Uart_SendString("Formatting SD Card...\r\n", pc_uart);
 800405e:	491b      	ldr	r1, [pc, #108]	; (80040cc <settingsLineProcessor+0x2d4>)
 8004060:	481b      	ldr	r0, [pc, #108]	; (80040d0 <settingsLineProcessor+0x2d8>)
 8004062:	f7fd fc91 	bl	8001988 <Uart_SendString>
    	Unmount_SD("/");
 8004066:	481b      	ldr	r0, [pc, #108]	; (80040d4 <settingsLineProcessor+0x2dc>)
 8004068:	f7fd f85c 	bl	8001124 <Unmount_SD>
    	Mount_SD("/");
 800406c:	4819      	ldr	r0, [pc, #100]	; (80040d4 <settingsLineProcessor+0x2dc>)
 800406e:	f7fd f833 	bl	80010d8 <Mount_SD>
    	Format_SD();
 8004072:	f7fd f87b 	bl	800116c <Format_SD>
    	Check_SD_Space();
 8004076:	f7fd f9c1 	bl	80013fc <Check_SD_Space>
    	scheduleShutdown(20000);
 800407a:	f644 6020 	movw	r0, #20000	; 0x4e20
 800407e:	f000 faa5 	bl	80045cc <scheduleShutdown>
    return;
 8004082:	e001      	b.n	8004088 <settingsLineProcessor+0x290>
    	return;
 8004084:	bf00      	nop
 8004086:	e000      	b.n	800408a <settingsLineProcessor+0x292>
    return;
 8004088:	bf00      	nop
}
 800408a:	3710      	adds	r7, #16
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	08017d58 	.word	0x08017d58
 8004094:	20004c50 	.word	0x20004c50
 8004098:	08017d60 	.word	0x08017d60
 800409c:	08017d68 	.word	0x08017d68
 80040a0:	08017d70 	.word	0x08017d70
 80040a4:	08017d78 	.word	0x08017d78
 80040a8:	08017d80 	.word	0x08017d80
 80040ac:	08017d88 	.word	0x08017d88
 80040b0:	200062d8 	.word	0x200062d8
 80040b4:	08017d90 	.word	0x08017d90
 80040b8:	08017d98 	.word	0x08017d98
 80040bc:	08017d9c 	.word	0x08017d9c
 80040c0:	08017da0 	.word	0x08017da0
 80040c4:	08017da4 	.word	0x08017da4
 80040c8:	08017dac 	.word	0x08017dac
 80040cc:	20004094 	.word	0x20004094
 80040d0:	08017db0 	.word	0x08017db0
 80040d4:	08017c78 	.word	0x08017c78

080040d8 <pc_uart_processChar>:


void pc_uart_processChar(char c){
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	4603      	mov	r3, r0
 80040e0:	71fb      	strb	r3, [r7, #7]
	UART_lineBufferAdd(&uart_lineBuffer, c);
 80040e2:	79fb      	ldrb	r3, [r7, #7]
 80040e4:	4619      	mov	r1, r3
 80040e6:	4804      	ldr	r0, [pc, #16]	; (80040f8 <pc_uart_processChar+0x20>)
 80040e8:	f000 f808 	bl	80040fc <UART_lineBufferAdd>
	UART_processLines();
 80040ec:	f000 f87c 	bl	80041e8 <UART_processLines>
}
 80040f0:	bf00      	nop
 80040f2:	3708      	adds	r7, #8
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	20005e08 	.word	0x20005e08

080040fc <UART_lineBufferAdd>:

void UART_lineBufferAdd(UART_LineBuffer *uLineBuffer, char c){
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	460b      	mov	r3, r1
 8004106:	70fb      	strb	r3, [r7, #3]
	if(!(uLineBuffer->numLines && uLineBuffer->lineWriteIndex == uLineBuffer->lineReadIndex)){//buffer is not full (assuming that there is at least one end line in there)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800410e:	2b00      	cmp	r3, #0
 8004110:	d007      	beq.n	8004122 <UART_lineBufferAdd+0x26>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f893 2401 	ldrb.w	r2, [r3, #1025]	; 0x401
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800411e:	429a      	cmp	r2, r3
 8004120:	d016      	beq.n	8004150 <UART_lineBufferAdd+0x54>
		uLineBuffer->line[uLineBuffer->lineWriteIndex++] = c;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8004128:	1c5a      	adds	r2, r3, #1
 800412a:	b2d1      	uxtb	r1, r2
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	f882 1401 	strb.w	r1, [r2, #1025]	; 0x401
 8004132:	4619      	mov	r1, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	78fa      	ldrb	r2, [r7, #3]
 8004138:	545a      	strb	r2, [r3, r1]
		if (uLineBuffer->lineWriteIndex == LINE_BUFFER_DIM) {
			uLineBuffer->lineWriteIndex = 0;
		}
		if(c == '\n'){
 800413a:	78fb      	ldrb	r3, [r7, #3]
 800413c:	2b0a      	cmp	r3, #10
 800413e:	d107      	bne.n	8004150 <UART_lineBufferAdd+0x54>
			uLineBuffer->numLines++;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8004146:	3301      	adds	r3, #1
 8004148:	b2da      	uxtb	r2, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
		}
	}
}
 8004150:	bf00      	nop
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <UART_lineBufferNumLines>:

uint8_t UART_lineBufferNumLines(UART_LineBuffer *uLineBuffer){
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
	return uLineBuffer->numLines;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400

}
 800416a:	4618      	mov	r0, r3
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr

08004176 <UART_lineBufferGetLine>:

void UART_lineBufferGetLine(UART_LineBuffer *uLineBuffer, char * line){
 8004176:	b480      	push	{r7}
 8004178:	b085      	sub	sp, #20
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
 800417e:	6039      	str	r1, [r7, #0]
	if(uLineBuffer->numLines){
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8004186:	2b00      	cmp	r3, #0
 8004188:	d028      	beq.n	80041dc <UART_lineBufferGetLine+0x66>

		char c = 0;
 800418a:	2300      	movs	r3, #0
 800418c:	73fb      	strb	r3, [r7, #15]
		int i = 0;
 800418e:	2300      	movs	r3, #0
 8004190:	60bb      	str	r3, [r7, #8]
		while(c != '\n'){
 8004192:	e013      	b.n	80041bc <UART_lineBufferGetLine+0x46>
			c = uLineBuffer->line[uLineBuffer->lineReadIndex++];
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800419a:	1c5a      	adds	r2, r3, #1
 800419c:	b2d1      	uxtb	r1, r2
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	f882 1402 	strb.w	r1, [r2, #1026]	; 0x402
 80041a4:	461a      	mov	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	5c9b      	ldrb	r3, [r3, r2]
 80041aa:	73fb      	strb	r3, [r7, #15]
			line[i] = c;
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	683a      	ldr	r2, [r7, #0]
 80041b0:	4413      	add	r3, r2
 80041b2:	7bfa      	ldrb	r2, [r7, #15]
 80041b4:	701a      	strb	r2, [r3, #0]
			i++;
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	3301      	adds	r3, #1
 80041ba:	60bb      	str	r3, [r7, #8]
		while(c != '\n'){
 80041bc:	7bfb      	ldrb	r3, [r7, #15]
 80041be:	2b0a      	cmp	r3, #10
 80041c0:	d1e8      	bne.n	8004194 <UART_lineBufferGetLine+0x1e>
			if (uLineBuffer->lineReadIndex == LINE_BUFFER_DIM) {
				uLineBuffer->lineReadIndex = 0;
			}
		}

		uLineBuffer->numLines--;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 80041c8:	3b01      	subs	r3, #1
 80041ca:	b2da      	uxtb	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
		line[i] = 0;//add eol char
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	4413      	add	r3, r2
 80041d8:	2200      	movs	r2, #0
 80041da:	701a      	strb	r2, [r3, #0]
	}
}
 80041dc:	bf00      	nop
 80041de:	3714      	adds	r7, #20
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <UART_processLines>:



void UART_processLines(void)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	af00      	add	r7, sp, #0


    if(UART_lineBufferNumLines(&uart_lineBuffer)){//we have a line ready to read
 80041ec:	4809      	ldr	r0, [pc, #36]	; (8004214 <UART_processLines+0x2c>)
 80041ee:	f7ff ffb5 	bl	800415c <UART_lineBufferNumLines>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00a      	beq.n	800420e <UART_processLines+0x26>


    	UART_lineBufferGetLine(&uart_lineBuffer, line);
 80041f8:	4907      	ldr	r1, [pc, #28]	; (8004218 <UART_processLines+0x30>)
 80041fa:	4806      	ldr	r0, [pc, #24]	; (8004214 <UART_processLines+0x2c>)
 80041fc:	f7ff ffbb 	bl	8004176 <UART_lineBufferGetLine>

       if(line[0] == '$') {
 8004200:	4b05      	ldr	r3, [pc, #20]	; (8004218 <UART_processLines+0x30>)
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	2b24      	cmp	r3, #36	; 0x24
 8004206:	d102      	bne.n	800420e <UART_processLines+0x26>
    	   NMEAProcessor(line);
 8004208:	4803      	ldr	r0, [pc, #12]	; (8004218 <UART_processLines+0x30>)
 800420a:	f001 f98f 	bl	800552c <NMEAProcessor>
       }



    }
}
 800420e:	bf00      	nop
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	20005e08 	.word	0x20005e08
 8004218:	20005d3c 	.word	0x20005d3c

0800421c <Log>:

void Log(char * line, uint8_t logType){
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	460b      	mov	r3, r1
 8004226:	70fb      	strb	r3, [r7, #3]
//	unsigned int t1,t2;

	uint16_t lineIndex = 0;
 8004228:	2300      	movs	r3, #0
 800422a:	81fb      	strh	r3, [r7, #14]


	if(logType <= settings.LOG){
 800422c:	4b29      	ldr	r3, [pc, #164]	; (80042d4 <Log+0xb8>)
 800422e:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 8004232:	78fa      	ldrb	r2, [r7, #3]
 8004234:	429a      	cmp	r2, r3
 8004236:	d846      	bhi.n	80042c6 <Log+0xaa>
		while(line[lineIndex]){
 8004238:	e03f      	b.n	80042ba <Log+0x9e>
			if(currentLogBuffer){//addtobufferB
 800423a:	4b27      	ldr	r3, [pc, #156]	; (80042d8 <Log+0xbc>)
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d01c      	beq.n	800427c <Log+0x60>
				logBufferB[logBufferB_position] = line[lineIndex];
 8004242:	89fb      	ldrh	r3, [r7, #14]
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	4413      	add	r3, r2
 8004248:	4a24      	ldr	r2, [pc, #144]	; (80042dc <Log+0xc0>)
 800424a:	8812      	ldrh	r2, [r2, #0]
 800424c:	7819      	ldrb	r1, [r3, #0]
 800424e:	4b24      	ldr	r3, [pc, #144]	; (80042e0 <Log+0xc4>)
 8004250:	5499      	strb	r1, [r3, r2]
				logBufferB_position++;
 8004252:	4b22      	ldr	r3, [pc, #136]	; (80042dc <Log+0xc0>)
 8004254:	881b      	ldrh	r3, [r3, #0]
 8004256:	3301      	adds	r3, #1
 8004258:	b29a      	uxth	r2, r3
 800425a:	4b20      	ldr	r3, [pc, #128]	; (80042dc <Log+0xc0>)
 800425c:	801a      	strh	r2, [r3, #0]
				if(logBufferB_position == LOG_BUFFER_SIZE){
 800425e:	4b1f      	ldr	r3, [pc, #124]	; (80042dc <Log+0xc0>)
 8004260:	881b      	ldrh	r3, [r3, #0]
 8004262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004266:	d125      	bne.n	80042b4 <Log+0x98>
					currentLogBuffer = 0;//switch to A for the next char
 8004268:	4b1b      	ldr	r3, [pc, #108]	; (80042d8 <Log+0xbc>)
 800426a:	2200      	movs	r2, #0
 800426c:	701a      	strb	r2, [r3, #0]
					logBufferReady = 1;//ready to empty the not current one;
 800426e:	4b1d      	ldr	r3, [pc, #116]	; (80042e4 <Log+0xc8>)
 8004270:	2201      	movs	r2, #1
 8004272:	701a      	strb	r2, [r3, #0]
					logBufferB_position = 0; //reset for B for next time
 8004274:	4b19      	ldr	r3, [pc, #100]	; (80042dc <Log+0xc0>)
 8004276:	2200      	movs	r2, #0
 8004278:	801a      	strh	r2, [r3, #0]
 800427a:	e01b      	b.n	80042b4 <Log+0x98>
				}

			}
			else{//addtoBufferA
				logBufferA[logBufferA_position] = line[lineIndex];
 800427c:	89fb      	ldrh	r3, [r7, #14]
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	4413      	add	r3, r2
 8004282:	4a19      	ldr	r2, [pc, #100]	; (80042e8 <Log+0xcc>)
 8004284:	8812      	ldrh	r2, [r2, #0]
 8004286:	7819      	ldrb	r1, [r3, #0]
 8004288:	4b18      	ldr	r3, [pc, #96]	; (80042ec <Log+0xd0>)
 800428a:	5499      	strb	r1, [r3, r2]
				logBufferA_position++;
 800428c:	4b16      	ldr	r3, [pc, #88]	; (80042e8 <Log+0xcc>)
 800428e:	881b      	ldrh	r3, [r3, #0]
 8004290:	3301      	adds	r3, #1
 8004292:	b29a      	uxth	r2, r3
 8004294:	4b14      	ldr	r3, [pc, #80]	; (80042e8 <Log+0xcc>)
 8004296:	801a      	strh	r2, [r3, #0]
				if(logBufferA_position == LOG_BUFFER_SIZE){
 8004298:	4b13      	ldr	r3, [pc, #76]	; (80042e8 <Log+0xcc>)
 800429a:	881b      	ldrh	r3, [r3, #0]
 800429c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042a0:	d108      	bne.n	80042b4 <Log+0x98>
					currentLogBuffer = 1;//switch to B for the next char
 80042a2:	4b0d      	ldr	r3, [pc, #52]	; (80042d8 <Log+0xbc>)
 80042a4:	2201      	movs	r2, #1
 80042a6:	701a      	strb	r2, [r3, #0]
					logBufferReady = 1;//ready to empty the not current one;
 80042a8:	4b0e      	ldr	r3, [pc, #56]	; (80042e4 <Log+0xc8>)
 80042aa:	2201      	movs	r2, #1
 80042ac:	701a      	strb	r2, [r3, #0]
					logBufferA_position = 0;//rest for A next time
 80042ae:	4b0e      	ldr	r3, [pc, #56]	; (80042e8 <Log+0xcc>)
 80042b0:	2200      	movs	r2, #0
 80042b2:	801a      	strh	r2, [r3, #0]
				}


			}
			lineIndex++;
 80042b4:	89fb      	ldrh	r3, [r7, #14]
 80042b6:	3301      	adds	r3, #1
 80042b8:	81fb      	strh	r3, [r7, #14]
		while(line[lineIndex]){
 80042ba:	89fb      	ldrh	r3, [r7, #14]
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	4413      	add	r3, r2
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1b9      	bne.n	800423a <Log+0x1e>
	}
	else{
//		Uart_SendString("LOG setting prevents logging\r\n", pc_uart);
	}

}
 80042c6:	bf00      	nop
 80042c8:	3714      	adds	r7, #20
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	20004c50 	.word	0x20004c50
 80042d8:	200062d9 	.word	0x200062d9
 80042dc:	20004c48 	.word	0x20004c48
 80042e0:	20004d10 	.word	0x20004d10
 80042e4:	20005e04 	.word	0x20005e04
 80042e8:	2000620c 	.word	0x2000620c
 80042ec:	200062dc 	.word	0x200062dc

080042f0 <checkWriteLogBuffer>:

void checkWriteLogBuffer(void){
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b086      	sub	sp, #24
 80042f4:	af00      	add	r7, sp, #0
	if(logBufferReady){
 80042f6:	4b37      	ldr	r3, [pc, #220]	; (80043d4 <checkWriteLogBuffer+0xe4>)
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d065      	beq.n	80043ca <checkWriteLogBuffer+0xda>
		if(sdState == SDSTATE_OK){
 80042fe:	4b36      	ldr	r3, [pc, #216]	; (80043d8 <checkWriteLogBuffer+0xe8>)
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	2b01      	cmp	r3, #1
 8004304:	d15a      	bne.n	80043bc <checkWriteLogBuffer+0xcc>


//			timer5_ms_restart();


			getDateCharFileName(logfile);
 8004306:	4835      	ldr	r0, [pc, #212]	; (80043dc <checkWriteLogBuffer+0xec>)
 8004308:	f002 f8ee 	bl	80064e8 <getDateCharFileName>
			getYearCharDirName(logdir);
 800430c:	4834      	ldr	r0, [pc, #208]	; (80043e0 <checkWriteLogBuffer+0xf0>)
 800430e:	f002 f8c3 	bl	8006498 <getYearCharDirName>

			/**** check whether the dir exists or not ****/
			FILINFO fno;
			fresult = f_stat (logdir, &fno);
 8004312:	463b      	mov	r3, r7
 8004314:	4619      	mov	r1, r3
 8004316:	4832      	ldr	r0, [pc, #200]	; (80043e0 <checkWriteLogBuffer+0xf0>)
 8004318:	f00b fd79 	bl	800fe0e <f_stat>
 800431c:	4603      	mov	r3, r0
 800431e:	461a      	mov	r2, r3
 8004320:	4b30      	ldr	r3, [pc, #192]	; (80043e4 <checkWriteLogBuffer+0xf4>)
 8004322:	701a      	strb	r2, [r3, #0]
			if (fresult != FR_OK){
 8004324:	4b2f      	ldr	r3, [pc, #188]	; (80043e4 <checkWriteLogBuffer+0xf4>)
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00d      	beq.n	8004348 <checkWriteLogBuffer+0x58>
				fresult = Create_Dir(logdir);
 800432c:	482c      	ldr	r0, [pc, #176]	; (80043e0 <checkWriteLogBuffer+0xf0>)
 800432e:	f7fd f825 	bl	800137c <Create_Dir>
 8004332:	4603      	mov	r3, r0
 8004334:	461a      	mov	r2, r3
 8004336:	4b2b      	ldr	r3, [pc, #172]	; (80043e4 <checkWriteLogBuffer+0xf4>)
 8004338:	701a      	strb	r2, [r3, #0]
				if (fresult != FR_OK){
 800433a:	4b2a      	ldr	r3, [pc, #168]	; (80043e4 <checkWriteLogBuffer+0xf4>)
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d002      	beq.n	8004348 <checkWriteLogBuffer+0x58>
					sdState = SDSTATE_ERR;
 8004342:	4b25      	ldr	r3, [pc, #148]	; (80043d8 <checkWriteLogBuffer+0xe8>)
 8004344:	2202      	movs	r2, #2
 8004346:	701a      	strb	r2, [r3, #0]
				}
			}
	//			t1 = (unsigned int) timer5_ms_get();

			if(currentLogBuffer){//buffering into B, so A must be ready
 8004348:	4b27      	ldr	r3, [pc, #156]	; (80043e8 <checkWriteLogBuffer+0xf8>)
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d01a      	beq.n	8004386 <checkWriteLogBuffer+0x96>
				fresult = Update_File (logfile, logBufferA, LOG_BUFFER_SIZE );
 8004350:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004354:	4925      	ldr	r1, [pc, #148]	; (80043ec <checkWriteLogBuffer+0xfc>)
 8004356:	4821      	ldr	r0, [pc, #132]	; (80043dc <checkWriteLogBuffer+0xec>)
 8004358:	f7fc ff6e 	bl	8001238 <Update_File>
 800435c:	4603      	mov	r3, r0
 800435e:	461a      	mov	r2, r3
 8004360:	4b20      	ldr	r3, [pc, #128]	; (80043e4 <checkWriteLogBuffer+0xf4>)
 8004362:	701a      	strb	r2, [r3, #0]
				if (fresult == FR_OK){
 8004364:	4b1f      	ldr	r3, [pc, #124]	; (80043e4 <checkWriteLogBuffer+0xf4>)
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d104      	bne.n	8004376 <checkWriteLogBuffer+0x86>
					Uart_SendString("Wrote Log Buffer A\r\n", pc_uart);
 800436c:	4920      	ldr	r1, [pc, #128]	; (80043f0 <checkWriteLogBuffer+0x100>)
 800436e:	4821      	ldr	r0, [pc, #132]	; (80043f4 <checkWriteLogBuffer+0x104>)
 8004370:	f7fd fb0a 	bl	8001988 <Uart_SendString>
 8004374:	e026      	b.n	80043c4 <checkWriteLogBuffer+0xd4>
//					Uart_SendString("###\r\n", pc_uart);
//					Uart_SendString(logBufferA, pc_uart);
//					Uart_SendString("\r\n###\r\n", pc_uart);
				}
				else{
					Uart_SendString("SD Card Write Error A\r\n", pc_uart);
 8004376:	491e      	ldr	r1, [pc, #120]	; (80043f0 <checkWriteLogBuffer+0x100>)
 8004378:	481f      	ldr	r0, [pc, #124]	; (80043f8 <checkWriteLogBuffer+0x108>)
 800437a:	f7fd fb05 	bl	8001988 <Uart_SendString>

					sdState = SDSTATE_ERR;
 800437e:	4b16      	ldr	r3, [pc, #88]	; (80043d8 <checkWriteLogBuffer+0xe8>)
 8004380:	2202      	movs	r2, #2
 8004382:	701a      	strb	r2, [r3, #0]
 8004384:	e01e      	b.n	80043c4 <checkWriteLogBuffer+0xd4>
				}


			}
			else{
				fresult = Update_File (logfile, logBufferB, LOG_BUFFER_SIZE );
 8004386:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800438a:	491c      	ldr	r1, [pc, #112]	; (80043fc <checkWriteLogBuffer+0x10c>)
 800438c:	4813      	ldr	r0, [pc, #76]	; (80043dc <checkWriteLogBuffer+0xec>)
 800438e:	f7fc ff53 	bl	8001238 <Update_File>
 8004392:	4603      	mov	r3, r0
 8004394:	461a      	mov	r2, r3
 8004396:	4b13      	ldr	r3, [pc, #76]	; (80043e4 <checkWriteLogBuffer+0xf4>)
 8004398:	701a      	strb	r2, [r3, #0]
				if (fresult == FR_OK){
 800439a:	4b12      	ldr	r3, [pc, #72]	; (80043e4 <checkWriteLogBuffer+0xf4>)
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d104      	bne.n	80043ac <checkWriteLogBuffer+0xbc>
					Uart_SendString("Wrote Log Buffer B\r\n", pc_uart);
 80043a2:	4913      	ldr	r1, [pc, #76]	; (80043f0 <checkWriteLogBuffer+0x100>)
 80043a4:	4816      	ldr	r0, [pc, #88]	; (8004400 <checkWriteLogBuffer+0x110>)
 80043a6:	f7fd faef 	bl	8001988 <Uart_SendString>
 80043aa:	e00b      	b.n	80043c4 <checkWriteLogBuffer+0xd4>
//					Uart_SendString("###\r\n", pc_uart);
//					Uart_SendString(logBufferB, pc_uart);
//					Uart_SendString("\r\n###\r\n", pc_uart);
				}
				else{
					Uart_SendString("SD Card Write Error B\r\n", pc_uart);
 80043ac:	4910      	ldr	r1, [pc, #64]	; (80043f0 <checkWriteLogBuffer+0x100>)
 80043ae:	4815      	ldr	r0, [pc, #84]	; (8004404 <checkWriteLogBuffer+0x114>)
 80043b0:	f7fd faea 	bl	8001988 <Uart_SendString>
					sdState = SDSTATE_ERR;
 80043b4:	4b08      	ldr	r3, [pc, #32]	; (80043d8 <checkWriteLogBuffer+0xe8>)
 80043b6:	2202      	movs	r2, #2
 80043b8:	701a      	strb	r2, [r3, #0]
 80043ba:	e003      	b.n	80043c4 <checkWriteLogBuffer+0xd4>



		}
		else{
			Uart_SendString("Logging disabled - SD Card Error\r\n", pc_uart);
 80043bc:	490c      	ldr	r1, [pc, #48]	; (80043f0 <checkWriteLogBuffer+0x100>)
 80043be:	4812      	ldr	r0, [pc, #72]	; (8004408 <checkWriteLogBuffer+0x118>)
 80043c0:	f7fd fae2 	bl	8001988 <Uart_SendString>

		}
		logBufferReady = 0;
 80043c4:	4b03      	ldr	r3, [pc, #12]	; (80043d4 <checkWriteLogBuffer+0xe4>)
 80043c6:	2200      	movs	r2, #0
 80043c8:	701a      	strb	r2, [r3, #0]
	}
}
 80043ca:	bf00      	nop
 80043cc:	3718      	adds	r7, #24
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	20005e04 	.word	0x20005e04
 80043d8:	200072dc 	.word	0x200072dc
 80043dc:	20005d1c 	.word	0x20005d1c
 80043e0:	20005d10 	.word	0x20005d10
 80043e4:	20002bc4 	.word	0x20002bc4
 80043e8:	200062d9 	.word	0x200062d9
 80043ec:	200062dc 	.word	0x200062dc
 80043f0:	20004094 	.word	0x20004094
 80043f4:	08017dc8 	.word	0x08017dc8
 80043f8:	08017de0 	.word	0x08017de0
 80043fc:	20004d10 	.word	0x20004d10
 8004400:	08017df8 	.word	0x08017df8
 8004404:	08017e10 	.word	0x08017e10
 8004408:	08017e28 	.word	0x08017e28

0800440c <forceWriteLogBuffer>:

void forceWriteLogBuffer(void){
 800440c:	b580      	push	{r7, lr}
 800440e:	b086      	sub	sp, #24
 8004410:	af00      	add	r7, sp, #0

	if(sdState == SDSTATE_OK){
 8004412:	4b36      	ldr	r3, [pc, #216]	; (80044ec <forceWriteLogBuffer+0xe0>)
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d15c      	bne.n	80044d4 <forceWriteLogBuffer+0xc8>


//			timer5_ms_restart();


		getDateCharFileName(logfile);
 800441a:	4835      	ldr	r0, [pc, #212]	; (80044f0 <forceWriteLogBuffer+0xe4>)
 800441c:	f002 f864 	bl	80064e8 <getDateCharFileName>
		getYearCharDirName(logdir);
 8004420:	4834      	ldr	r0, [pc, #208]	; (80044f4 <forceWriteLogBuffer+0xe8>)
 8004422:	f002 f839 	bl	8006498 <getYearCharDirName>

		/**** check whether the dir exists or not ****/
		FILINFO fno;
		fresult = f_stat (logdir, &fno);
 8004426:	463b      	mov	r3, r7
 8004428:	4619      	mov	r1, r3
 800442a:	4832      	ldr	r0, [pc, #200]	; (80044f4 <forceWriteLogBuffer+0xe8>)
 800442c:	f00b fcef 	bl	800fe0e <f_stat>
 8004430:	4603      	mov	r3, r0
 8004432:	461a      	mov	r2, r3
 8004434:	4b30      	ldr	r3, [pc, #192]	; (80044f8 <forceWriteLogBuffer+0xec>)
 8004436:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK){
 8004438:	4b2f      	ldr	r3, [pc, #188]	; (80044f8 <forceWriteLogBuffer+0xec>)
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00d      	beq.n	800445c <forceWriteLogBuffer+0x50>
			fresult = Create_Dir(logdir);
 8004440:	482c      	ldr	r0, [pc, #176]	; (80044f4 <forceWriteLogBuffer+0xe8>)
 8004442:	f7fc ff9b 	bl	800137c <Create_Dir>
 8004446:	4603      	mov	r3, r0
 8004448:	461a      	mov	r2, r3
 800444a:	4b2b      	ldr	r3, [pc, #172]	; (80044f8 <forceWriteLogBuffer+0xec>)
 800444c:	701a      	strb	r2, [r3, #0]
			if (fresult != FR_OK){
 800444e:	4b2a      	ldr	r3, [pc, #168]	; (80044f8 <forceWriteLogBuffer+0xec>)
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d002      	beq.n	800445c <forceWriteLogBuffer+0x50>
				sdState = SDSTATE_ERR;
 8004456:	4b25      	ldr	r3, [pc, #148]	; (80044ec <forceWriteLogBuffer+0xe0>)
 8004458:	2202      	movs	r2, #2
 800445a:	701a      	strb	r2, [r3, #0]
			}
		}
//			t1 = (unsigned int) timer5_ms_get();

		if(currentLogBuffer){//buffering into B, so use that one
 800445c:	4b27      	ldr	r3, [pc, #156]	; (80044fc <forceWriteLogBuffer+0xf0>)
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d01b      	beq.n	800449c <forceWriteLogBuffer+0x90>
			fresult = Update_File (logfile, logBufferB, logBufferB_position );
 8004464:	4b26      	ldr	r3, [pc, #152]	; (8004500 <forceWriteLogBuffer+0xf4>)
 8004466:	881b      	ldrh	r3, [r3, #0]
 8004468:	461a      	mov	r2, r3
 800446a:	4926      	ldr	r1, [pc, #152]	; (8004504 <forceWriteLogBuffer+0xf8>)
 800446c:	4820      	ldr	r0, [pc, #128]	; (80044f0 <forceWriteLogBuffer+0xe4>)
 800446e:	f7fc fee3 	bl	8001238 <Update_File>
 8004472:	4603      	mov	r3, r0
 8004474:	461a      	mov	r2, r3
 8004476:	4b20      	ldr	r3, [pc, #128]	; (80044f8 <forceWriteLogBuffer+0xec>)
 8004478:	701a      	strb	r2, [r3, #0]
			if (fresult == FR_OK){
 800447a:	4b1f      	ldr	r3, [pc, #124]	; (80044f8 <forceWriteLogBuffer+0xec>)
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d104      	bne.n	800448c <forceWriteLogBuffer+0x80>
				Uart_SendString("Flush Log Buffer B\r\n", pc_uart);
 8004482:	4921      	ldr	r1, [pc, #132]	; (8004508 <forceWriteLogBuffer+0xfc>)
 8004484:	4821      	ldr	r0, [pc, #132]	; (800450c <forceWriteLogBuffer+0x100>)
 8004486:	f7fd fa7f 	bl	8001988 <Uart_SendString>
 800448a:	e027      	b.n	80044dc <forceWriteLogBuffer+0xd0>
//					Uart_SendString("###\r\n", pc_uart);
//					Uart_SendString(logBufferA, pc_uart);
//					Uart_SendString("\r\n###\r\n", pc_uart);
			}
			else{
				Uart_SendString("SD Card Write Error B\r\n", pc_uart);
 800448c:	491e      	ldr	r1, [pc, #120]	; (8004508 <forceWriteLogBuffer+0xfc>)
 800448e:	4820      	ldr	r0, [pc, #128]	; (8004510 <forceWriteLogBuffer+0x104>)
 8004490:	f7fd fa7a 	bl	8001988 <Uart_SendString>

				sdState = SDSTATE_ERR;
 8004494:	4b15      	ldr	r3, [pc, #84]	; (80044ec <forceWriteLogBuffer+0xe0>)
 8004496:	2202      	movs	r2, #2
 8004498:	701a      	strb	r2, [r3, #0]
 800449a:	e01f      	b.n	80044dc <forceWriteLogBuffer+0xd0>
			}


		}
		else{
			fresult = Update_File (logfile, logBufferA, logBufferA_position );
 800449c:	4b1d      	ldr	r3, [pc, #116]	; (8004514 <forceWriteLogBuffer+0x108>)
 800449e:	881b      	ldrh	r3, [r3, #0]
 80044a0:	461a      	mov	r2, r3
 80044a2:	491d      	ldr	r1, [pc, #116]	; (8004518 <forceWriteLogBuffer+0x10c>)
 80044a4:	4812      	ldr	r0, [pc, #72]	; (80044f0 <forceWriteLogBuffer+0xe4>)
 80044a6:	f7fc fec7 	bl	8001238 <Update_File>
 80044aa:	4603      	mov	r3, r0
 80044ac:	461a      	mov	r2, r3
 80044ae:	4b12      	ldr	r3, [pc, #72]	; (80044f8 <forceWriteLogBuffer+0xec>)
 80044b0:	701a      	strb	r2, [r3, #0]
			if (fresult == FR_OK){
 80044b2:	4b11      	ldr	r3, [pc, #68]	; (80044f8 <forceWriteLogBuffer+0xec>)
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d104      	bne.n	80044c4 <forceWriteLogBuffer+0xb8>
				Uart_SendString("Wrote Log Buffer A\r\n", pc_uart);
 80044ba:	4913      	ldr	r1, [pc, #76]	; (8004508 <forceWriteLogBuffer+0xfc>)
 80044bc:	4817      	ldr	r0, [pc, #92]	; (800451c <forceWriteLogBuffer+0x110>)
 80044be:	f7fd fa63 	bl	8001988 <Uart_SendString>
 80044c2:	e00b      	b.n	80044dc <forceWriteLogBuffer+0xd0>
//					Uart_SendString("###\r\n", pc_uart);
//					Uart_SendString(logBufferB, pc_uart);
//					Uart_SendString("\r\n###\r\n", pc_uart);
			}
			else{
				Uart_SendString("SD Card Write Error A\r\n", pc_uart);
 80044c4:	4910      	ldr	r1, [pc, #64]	; (8004508 <forceWriteLogBuffer+0xfc>)
 80044c6:	4816      	ldr	r0, [pc, #88]	; (8004520 <forceWriteLogBuffer+0x114>)
 80044c8:	f7fd fa5e 	bl	8001988 <Uart_SendString>
				sdState = SDSTATE_ERR;
 80044cc:	4b07      	ldr	r3, [pc, #28]	; (80044ec <forceWriteLogBuffer+0xe0>)
 80044ce:	2202      	movs	r2, #2
 80044d0:	701a      	strb	r2, [r3, #0]
 80044d2:	e003      	b.n	80044dc <forceWriteLogBuffer+0xd0>



	}
	else{
		Uart_SendString("Logging disabled - SD Card Error\r\n", pc_uart);
 80044d4:	490c      	ldr	r1, [pc, #48]	; (8004508 <forceWriteLogBuffer+0xfc>)
 80044d6:	4813      	ldr	r0, [pc, #76]	; (8004524 <forceWriteLogBuffer+0x118>)
 80044d8:	f7fd fa56 	bl	8001988 <Uart_SendString>

	}
	logBufferReady = 0;
 80044dc:	4b12      	ldr	r3, [pc, #72]	; (8004528 <forceWriteLogBuffer+0x11c>)
 80044de:	2200      	movs	r2, #0
 80044e0:	701a      	strb	r2, [r3, #0]

}
 80044e2:	bf00      	nop
 80044e4:	3718      	adds	r7, #24
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	200072dc 	.word	0x200072dc
 80044f0:	20005d1c 	.word	0x20005d1c
 80044f4:	20005d10 	.word	0x20005d10
 80044f8:	20002bc4 	.word	0x20002bc4
 80044fc:	200062d9 	.word	0x200062d9
 8004500:	20004c48 	.word	0x20004c48
 8004504:	20004d10 	.word	0x20004d10
 8004508:	20004094 	.word	0x20004094
 800450c:	08017e4c 	.word	0x08017e4c
 8004510:	08017e10 	.word	0x08017e10
 8004514:	2000620c 	.word	0x2000620c
 8004518:	200062dc 	.word	0x200062dc
 800451c:	08017dc8 	.word	0x08017dc8
 8004520:	08017de0 	.word	0x08017de0
 8004524:	08017e28 	.word	0x08017e28
 8004528:	20005e04 	.word	0x20005e04

0800452c <settingsToParams>:

void settingsToParams(char * buffer){
 800452c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004530:	b08c      	sub	sp, #48	; 0x30
 8004532:	af0a      	add	r7, sp, #40	; 0x28
 8004534:	6078      	str	r0, [r7, #4]
			"&RSH=%u"
			"&AVN=%u"
			"&VLD=%u"
			"&VER=%s_%s",
			settings.MEI,
			settings.SID,
 8004536:	4b18      	ldr	r3, [pc, #96]	; (8004598 <settingsToParams+0x6c>)
 8004538:	8a9b      	ldrh	r3, [r3, #20]
		sprintf(buffer,
 800453a:	4698      	mov	r8, r3
			settings.URL,
			settings.LOG,
 800453c:	4b16      	ldr	r3, [pc, #88]	; (8004598 <settingsToParams+0x6c>)
 800453e:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
		sprintf(buffer,
 8004542:	461c      	mov	r4, r3
			settings.BCL,
 8004544:	4b14      	ldr	r3, [pc, #80]	; (8004598 <settingsToParams+0x6c>)
 8004546:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
		sprintf(buffer,
 800454a:	4618      	mov	r0, r3
 800454c:	f7fc f814 	bl	8000578 <__aeabi_f2d>
 8004550:	4602      	mov	r2, r0
 8004552:	460b      	mov	r3, r1
			settings.RSH,
 8004554:	4910      	ldr	r1, [pc, #64]	; (8004598 <settingsToParams+0x6c>)
 8004556:	f891 10bc 	ldrb.w	r1, [r1, #188]	; 0xbc
		sprintf(buffer,
 800455a:	4608      	mov	r0, r1
			settings.AVN,
 800455c:	490e      	ldr	r1, [pc, #56]	; (8004598 <settingsToParams+0x6c>)
 800455e:	f8b1 10be 	ldrh.w	r1, [r1, #190]	; 0xbe
		sprintf(buffer,
 8004562:	460d      	mov	r5, r1
 8004564:	490d      	ldr	r1, [pc, #52]	; (800459c <settingsToParams+0x70>)
 8004566:	7809      	ldrb	r1, [r1, #0]
 8004568:	460e      	mov	r6, r1
 800456a:	490d      	ldr	r1, [pc, #52]	; (80045a0 <settingsToParams+0x74>)
 800456c:	9108      	str	r1, [sp, #32]
 800456e:	490d      	ldr	r1, [pc, #52]	; (80045a4 <settingsToParams+0x78>)
 8004570:	9107      	str	r1, [sp, #28]
 8004572:	9606      	str	r6, [sp, #24]
 8004574:	9505      	str	r5, [sp, #20]
 8004576:	9004      	str	r0, [sp, #16]
 8004578:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800457c:	9401      	str	r4, [sp, #4]
 800457e:	4b0a      	ldr	r3, [pc, #40]	; (80045a8 <settingsToParams+0x7c>)
 8004580:	9300      	str	r3, [sp, #0]
 8004582:	4643      	mov	r3, r8
 8004584:	4a04      	ldr	r2, [pc, #16]	; (8004598 <settingsToParams+0x6c>)
 8004586:	4909      	ldr	r1, [pc, #36]	; (80045ac <settingsToParams+0x80>)
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f00d f82f 	bl	80115ec <siprintf>
			settingsValid,
			MAJOR_VERSION,BUILD_NUMBER
			);
}
 800458e:	bf00      	nop
 8004590:	3708      	adds	r7, #8
 8004592:	46bd      	mov	sp, r7
 8004594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004598:	20004c50 	.word	0x20004c50
 800459c:	200062d8 	.word	0x200062d8
 80045a0:	08017eac 	.word	0x08017eac
 80045a4:	08017eb0 	.word	0x08017eb0
 80045a8:	20004c66 	.word	0x20004c66
 80045ac:	08017e64 	.word	0x08017e64

080045b0 <shutdown>:

void shutdown(){
 80045b0:	b580      	push	{r7, lr}
 80045b2:	af00      	add	r7, sp, #0
	Uart_SendString("Shutdown...\r\n", pc_uart);
 80045b4:	4903      	ldr	r1, [pc, #12]	; (80045c4 <shutdown+0x14>)
 80045b6:	4804      	ldr	r0, [pc, #16]	; (80045c8 <shutdown+0x18>)
 80045b8:	f7fd f9e6 	bl	8001988 <Uart_SendString>
	forceWriteLogBuffer();
 80045bc:	f7ff ff26 	bl	800440c <forceWriteLogBuffer>
	//todo - more shutdown stuff
	NVIC_SystemReset();
 80045c0:	f7ff f9c0 	bl	8003944 <__NVIC_SystemReset>
 80045c4:	20004094 	.word	0x20004094
 80045c8:	08017eb4 	.word	0x08017eb4

080045cc <scheduleShutdown>:
}

void scheduleShutdown(uint16_t ms){
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	4603      	mov	r3, r0
 80045d4:	80fb      	strh	r3, [r7, #6]
	Uart_SendString("Shutdown scheduled\r\n", pc_uart);
 80045d6:	4908      	ldr	r1, [pc, #32]	; (80045f8 <scheduleShutdown+0x2c>)
 80045d8:	4808      	ldr	r0, [pc, #32]	; (80045fc <scheduleShutdown+0x30>)
 80045da:	f7fd f9d5 	bl	8001988 <Uart_SendString>
	shutdownScheduledFlag = 1;
 80045de:	4b08      	ldr	r3, [pc, #32]	; (8004600 <scheduleShutdown+0x34>)
 80045e0:	2201      	movs	r2, #1
 80045e2:	701a      	strb	r2, [r3, #0]
	timer4_ms_restart();
 80045e4:	f7fe fcac 	bl	8002f40 <timer4_ms_restart>
	shutdownScheduledTimeout = ms;
 80045e8:	4a06      	ldr	r2, [pc, #24]	; (8004604 <scheduleShutdown+0x38>)
 80045ea:	88fb      	ldrh	r3, [r7, #6]
 80045ec:	8013      	strh	r3, [r2, #0]

}
 80045ee:	bf00      	nop
 80045f0:	3708      	adds	r7, #8
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	20004094 	.word	0x20004094
 80045fc:	08017ec4 	.word	0x08017ec4
 8004600:	200062da 	.word	0x200062da
 8004604:	20004c4c 	.word	0x20004c4c

08004608 <checkShutdown>:

uint8_t checkShutdown(void){
 8004608:	b580      	push	{r7, lr}
 800460a:	af00      	add	r7, sp, #0
	if(shutdownScheduledFlag && timer4_ms_get() >= shutdownScheduledTimeout){
 800460c:	4b0a      	ldr	r3, [pc, #40]	; (8004638 <checkShutdown+0x30>)
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00c      	beq.n	800462e <checkShutdown+0x26>
 8004614:	f7fe fca4 	bl	8002f60 <timer4_ms_get>
 8004618:	4603      	mov	r3, r0
 800461a:	4a08      	ldr	r2, [pc, #32]	; (800463c <checkShutdown+0x34>)
 800461c:	8812      	ldrh	r2, [r2, #0]
 800461e:	4293      	cmp	r3, r2
 8004620:	d305      	bcc.n	800462e <checkShutdown+0x26>
		Uart_SendString("Shutdown timer reached\r\n", pc_uart);
 8004622:	4907      	ldr	r1, [pc, #28]	; (8004640 <checkShutdown+0x38>)
 8004624:	4807      	ldr	r0, [pc, #28]	; (8004644 <checkShutdown+0x3c>)
 8004626:	f7fd f9af 	bl	8001988 <Uart_SendString>
		shutdown();
 800462a:	f7ff ffc1 	bl	80045b0 <shutdown>
	}

	return shutdownScheduledFlag;
 800462e:	4b02      	ldr	r3, [pc, #8]	; (8004638 <checkShutdown+0x30>)
 8004630:	781b      	ldrb	r3, [r3, #0]

}
 8004632:	4618      	mov	r0, r3
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	200062da 	.word	0x200062da
 800463c:	20004c4c 	.word	0x20004c4c
 8004640:	20004094 	.word	0x20004094
 8004644:	08017edc 	.word	0x08017edc

08004648 <sim7600_powerProcessor>:


}


uint8_t sim7600_powerProcessor(void){
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
	//check power state - does the sim7600 have main power and is RDY?
	//returns 1 if all is ready, 0 if it is managing power state

	uint8_t result = 0;
 800464e:	2300      	movs	r3, #0
 8004650:	71fb      	strb	r3, [r7, #7]
	switch (powerState) {
 8004652:	4b9e      	ldr	r3, [pc, #632]	; (80048cc <sim7600_powerProcessor+0x284>)
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	2b09      	cmp	r3, #9
 8004658:	f200 8133 	bhi.w	80048c2 <sim7600_powerProcessor+0x27a>
 800465c:	a201      	add	r2, pc, #4	; (adr r2, 8004664 <sim7600_powerProcessor+0x1c>)
 800465e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004662:	bf00      	nop
 8004664:	0800468d 	.word	0x0800468d
 8004668:	08004703 	.word	0x08004703
 800466c:	08004735 	.word	0x08004735
 8004670:	08004771 	.word	0x08004771
 8004674:	080047db 	.word	0x080047db
 8004678:	08004803 	.word	0x08004803
 800467c:	08004827 	.word	0x08004827
 8004680:	0800487b 	.word	0x0800487b
 8004684:	08004893 	.word	0x08004893
 8004688:	080048af 	.word	0x080048af
		case POWER_INIT:

			readyState = STATE_INIT;
 800468c:	4b90      	ldr	r3, [pc, #576]	; (80048d0 <sim7600_powerProcessor+0x288>)
 800468e:	2200      	movs	r2, #0
 8004690:	701a      	strb	r2, [r3, #0]
			cpinState = STATE_INIT;
 8004692:	4b90      	ldr	r3, [pc, #576]	; (80048d4 <sim7600_powerProcessor+0x28c>)
 8004694:	2200      	movs	r2, #0
 8004696:	701a      	strb	r2, [r3, #0]


			httpResponseState = STATE_INIT;
 8004698:	4b8f      	ldr	r3, [pc, #572]	; (80048d8 <sim7600_powerProcessor+0x290>)
 800469a:	2200      	movs	r2, #0
 800469c:	701a      	strb	r2, [r3, #0]

			cmdState = CMD_INIT;
 800469e:	4b8f      	ldr	r3, [pc, #572]	; (80048dc <sim7600_powerProcessor+0x294>)
 80046a0:	2200      	movs	r2, #0
 80046a2:	701a      	strb	r2, [r3, #0]

			csq = 99;
 80046a4:	4b8e      	ldr	r3, [pc, #568]	; (80048e0 <sim7600_powerProcessor+0x298>)
 80046a6:	2263      	movs	r2, #99	; 0x63
 80046a8:	801a      	strh	r2, [r3, #0]

			//LED On
			HAL_GPIO_WritePin(GPIO_OUT_LED_GPIO_Port, GPIO_OUT_LED_Pin,GPIO_PIN_SET);
 80046aa:	2201      	movs	r2, #1
 80046ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80046b0:	488c      	ldr	r0, [pc, #560]	; (80048e4 <sim7600_powerProcessor+0x29c>)
 80046b2:	f003 fb09 	bl	8007cc8 <HAL_GPIO_WritePin>

			//set DTR
			Uart_SendString("SIM7600 Set DTR\r\n", pc_uart);
 80046b6:	498c      	ldr	r1, [pc, #560]	; (80048e8 <sim7600_powerProcessor+0x2a0>)
 80046b8:	488c      	ldr	r0, [pc, #560]	; (80048ec <sim7600_powerProcessor+0x2a4>)
 80046ba:	f7fd f965 	bl	8001988 <Uart_SendString>
			HAL_GPIO_WritePin(GPIO_OUT_DTR_GPIO_Port, GPIO_OUT_DTR_Pin, GPIO_PIN_SET);
 80046be:	2201      	movs	r2, #1
 80046c0:	2102      	movs	r1, #2
 80046c2:	4888      	ldr	r0, [pc, #544]	; (80048e4 <sim7600_powerProcessor+0x29c>)
 80046c4:	f003 fb00 	bl	8007cc8 <HAL_GPIO_WritePin>


			Uart_SendString("SIM7600 Power Start \r\n", pc_uart);
 80046c8:	4987      	ldr	r1, [pc, #540]	; (80048e8 <sim7600_powerProcessor+0x2a0>)
 80046ca:	4889      	ldr	r0, [pc, #548]	; (80048f0 <sim7600_powerProcessor+0x2a8>)
 80046cc:	f7fd f95c 	bl	8001988 <Uart_SendString>
			HAL_GPIO_WritePin(GPIO_OUT_RESET_GPIO_Port, GPIO_OUT_RESET_Pin, GPIO_PIN_SET);
 80046d0:	2201      	movs	r2, #1
 80046d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80046d6:	4883      	ldr	r0, [pc, #524]	; (80048e4 <sim7600_powerProcessor+0x29c>)
 80046d8:	f003 faf6 	bl	8007cc8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_OUT_PWRKEY_GPIO_Port, GPIO_OUT_PWRKEY_Pin, GPIO_PIN_SET);
 80046dc:	2201      	movs	r2, #1
 80046de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80046e2:	4880      	ldr	r0, [pc, #512]	; (80048e4 <sim7600_powerProcessor+0x29c>)
 80046e4:	f003 faf0 	bl	8007cc8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_OUT_4_1EN_GPIO_Port, GPIO_OUT_4_1EN_Pin, GPIO_PIN_SET);
 80046e8:	2201      	movs	r2, #1
 80046ea:	2110      	movs	r1, #16
 80046ec:	4881      	ldr	r0, [pc, #516]	; (80048f4 <sim7600_powerProcessor+0x2ac>)
 80046ee:	f003 faeb 	bl	8007cc8 <HAL_GPIO_WritePin>

			timer5_ms_restart();
 80046f2:	f7fe fc41 	bl	8002f78 <timer5_ms_restart>
			powerState = POWER_KEY;
 80046f6:	4b75      	ldr	r3, [pc, #468]	; (80048cc <sim7600_powerProcessor+0x284>)
 80046f8:	2201      	movs	r2, #1
 80046fa:	701a      	strb	r2, [r3, #0]
			result = 0;
 80046fc:	2300      	movs	r3, #0
 80046fe:	71fb      	strb	r3, [r7, #7]
			break;
 8004700:	e0df      	b.n	80048c2 <sim7600_powerProcessor+0x27a>

		case POWER_KEY:
			if(timer5_ms_get() > 500){
 8004702:	f7fe fc49 	bl	8002f98 <timer5_ms_get>
 8004706:	4603      	mov	r3, r0
 8004708:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800470c:	f240 80d2 	bls.w	80048b4 <sim7600_powerProcessor+0x26c>
				Uart_SendString("SIM7600 Power Key Down \r\n", pc_uart);
 8004710:	4975      	ldr	r1, [pc, #468]	; (80048e8 <sim7600_powerProcessor+0x2a0>)
 8004712:	4879      	ldr	r0, [pc, #484]	; (80048f8 <sim7600_powerProcessor+0x2b0>)
 8004714:	f7fd f938 	bl	8001988 <Uart_SendString>
				HAL_GPIO_WritePin(GPIO_OUT_PWRKEY_GPIO_Port, GPIO_OUT_PWRKEY_Pin, GPIO_PIN_RESET);
 8004718:	2200      	movs	r2, #0
 800471a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800471e:	4871      	ldr	r0, [pc, #452]	; (80048e4 <sim7600_powerProcessor+0x29c>)
 8004720:	f003 fad2 	bl	8007cc8 <HAL_GPIO_WritePin>
				timer5_ms_restart();
 8004724:	f7fe fc28 	bl	8002f78 <timer5_ms_restart>
				powerState = POWER_KEY2;
 8004728:	4b68      	ldr	r3, [pc, #416]	; (80048cc <sim7600_powerProcessor+0x284>)
 800472a:	2202      	movs	r2, #2
 800472c:	701a      	strb	r2, [r3, #0]
				result = 0;
 800472e:	2300      	movs	r3, #0
 8004730:	71fb      	strb	r3, [r7, #7]
			}
			break;
 8004732:	e0bf      	b.n	80048b4 <sim7600_powerProcessor+0x26c>

		case POWER_KEY2:
			if(timer5_ms_get() > 500){
 8004734:	f7fe fc30 	bl	8002f98 <timer5_ms_get>
 8004738:	4603      	mov	r3, r0
 800473a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800473e:	f240 80bb 	bls.w	80048b8 <sim7600_powerProcessor+0x270>
				Uart_SendString("SIM7600 Power Key Up \r\n", pc_uart);
 8004742:	4969      	ldr	r1, [pc, #420]	; (80048e8 <sim7600_powerProcessor+0x2a0>)
 8004744:	486d      	ldr	r0, [pc, #436]	; (80048fc <sim7600_powerProcessor+0x2b4>)
 8004746:	f7fd f91f 	bl	8001988 <Uart_SendString>
				HAL_GPIO_WritePin(GPIO_OUT_PWRKEY_GPIO_Port, GPIO_OUT_PWRKEY_Pin, GPIO_PIN_SET);
 800474a:	2201      	movs	r2, #1
 800474c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004750:	4864      	ldr	r0, [pc, #400]	; (80048e4 <sim7600_powerProcessor+0x29c>)
 8004752:	f003 fab9 	bl	8007cc8 <HAL_GPIO_WritePin>
				powerState = POWER_SET;
 8004756:	4b5d      	ldr	r3, [pc, #372]	; (80048cc <sim7600_powerProcessor+0x284>)
 8004758:	2203      	movs	r2, #3
 800475a:	701a      	strb	r2, [r3, #0]
				//LED Off
				HAL_GPIO_WritePin(GPIO_OUT_LED_GPIO_Port, GPIO_OUT_LED_Pin,GPIO_PIN_RESET);
 800475c:	2200      	movs	r2, #0
 800475e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004762:	4860      	ldr	r0, [pc, #384]	; (80048e4 <sim7600_powerProcessor+0x29c>)
 8004764:	f003 fab0 	bl	8007cc8 <HAL_GPIO_WritePin>
				timer5_ms_restart();
 8004768:	f7fe fc06 	bl	8002f78 <timer5_ms_restart>
				return 0;
 800476c:	2300      	movs	r3, #0
 800476e:	e0a9      	b.n	80048c4 <sim7600_powerProcessor+0x27c>
			}
			break;

		case POWER_SET:
			elapsedTime = timer5_ms_get();
 8004770:	f7fe fc12 	bl	8002f98 <timer5_ms_get>
 8004774:	4603      	mov	r3, r0
 8004776:	4a62      	ldr	r2, [pc, #392]	; (8004900 <sim7600_powerProcessor+0x2b8>)
 8004778:	6013      	str	r3, [r2, #0]
			if (HAL_GPIO_ReadPin(GPIO_IN_POWERSTAT_GPIO_Port, GPIO_IN_POWERSTAT_Pin)) {
 800477a:	2101      	movs	r1, #1
 800477c:	4859      	ldr	r0, [pc, #356]	; (80048e4 <sim7600_powerProcessor+0x29c>)
 800477e:	f003 fa8b 	bl	8007c98 <HAL_GPIO_ReadPin>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00f      	beq.n	80047a8 <sim7600_powerProcessor+0x160>
				powerState = POWER_OK;
 8004788:	4b50      	ldr	r3, [pc, #320]	; (80048cc <sim7600_powerProcessor+0x284>)
 800478a:	2204      	movs	r2, #4
 800478c:	701a      	strb	r2, [r3, #0]
				sprintf(pbuffer, "SIM7600 Power Status OK after %lu ms\r\n", elapsedTime);
 800478e:	4b5c      	ldr	r3, [pc, #368]	; (8004900 <sim7600_powerProcessor+0x2b8>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	461a      	mov	r2, r3
 8004794:	495b      	ldr	r1, [pc, #364]	; (8004904 <sim7600_powerProcessor+0x2bc>)
 8004796:	485c      	ldr	r0, [pc, #368]	; (8004908 <sim7600_powerProcessor+0x2c0>)
 8004798:	f00c ff28 	bl	80115ec <siprintf>
				Uart_SendString(pbuffer, pc_uart);
 800479c:	4952      	ldr	r1, [pc, #328]	; (80048e8 <sim7600_powerProcessor+0x2a0>)
 800479e:	485a      	ldr	r0, [pc, #360]	; (8004908 <sim7600_powerProcessor+0x2c0>)
 80047a0:	f7fd f8f2 	bl	8001988 <Uart_SendString>
				result = 1;
 80047a4:	2301      	movs	r3, #1
 80047a6:	71fb      	strb	r3, [r7, #7]

			}

			if(timer5_ms_get() > 20000){
 80047a8:	f7fe fbf6 	bl	8002f98 <timer5_ms_get>
 80047ac:	4603      	mov	r3, r0
 80047ae:	f644 6220 	movw	r2, #20000	; 0x4e20
 80047b2:	4293      	cmp	r3, r2
 80047b4:	f240 8082 	bls.w	80048bc <sim7600_powerProcessor+0x274>
				sprintf(pbuffer, "SIM7600 Power Status Timeout after %lu ms\r\n", elapsedTime);
 80047b8:	4b51      	ldr	r3, [pc, #324]	; (8004900 <sim7600_powerProcessor+0x2b8>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	461a      	mov	r2, r3
 80047be:	4953      	ldr	r1, [pc, #332]	; (800490c <sim7600_powerProcessor+0x2c4>)
 80047c0:	4851      	ldr	r0, [pc, #324]	; (8004908 <sim7600_powerProcessor+0x2c0>)
 80047c2:	f00c ff13 	bl	80115ec <siprintf>
				Uart_SendString(pbuffer, pc_uart);
 80047c6:	4948      	ldr	r1, [pc, #288]	; (80048e8 <sim7600_powerProcessor+0x2a0>)
 80047c8:	484f      	ldr	r0, [pc, #316]	; (8004908 <sim7600_powerProcessor+0x2c0>)
 80047ca:	f7fd f8dd 	bl	8001988 <Uart_SendString>
				powerState = POWER_ERR;
 80047ce:	4b3f      	ldr	r3, [pc, #252]	; (80048cc <sim7600_powerProcessor+0x284>)
 80047d0:	2205      	movs	r2, #5
 80047d2:	701a      	strb	r2, [r3, #0]
				result = 0;
 80047d4:	2300      	movs	r3, #0
 80047d6:	71fb      	strb	r3, [r7, #7]
			}
			break;
 80047d8:	e070      	b.n	80048bc <sim7600_powerProcessor+0x274>

		case POWER_OK:
			if (!HAL_GPIO_ReadPin(GPIO_IN_POWERSTAT_GPIO_Port,GPIO_IN_POWERSTAT_Pin)) {
 80047da:	2101      	movs	r1, #1
 80047dc:	4841      	ldr	r0, [pc, #260]	; (80048e4 <sim7600_powerProcessor+0x29c>)
 80047de:	f003 fa5b 	bl	8007c98 <HAL_GPIO_ReadPin>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d109      	bne.n	80047fc <sim7600_powerProcessor+0x1b4>
				Uart_SendString("SIM7600 Power Status Lost\r\n", pc_uart);
 80047e8:	493f      	ldr	r1, [pc, #252]	; (80048e8 <sim7600_powerProcessor+0x2a0>)
 80047ea:	4849      	ldr	r0, [pc, #292]	; (8004910 <sim7600_powerProcessor+0x2c8>)
 80047ec:	f7fd f8cc 	bl	8001988 <Uart_SendString>
				powerState = POWER_ERR;
 80047f0:	4b36      	ldr	r3, [pc, #216]	; (80048cc <sim7600_powerProcessor+0x284>)
 80047f2:	2205      	movs	r2, #5
 80047f4:	701a      	strb	r2, [r3, #0]
				result = 0;
 80047f6:	2300      	movs	r3, #0
 80047f8:	71fb      	strb	r3, [r7, #7]
				break;
 80047fa:	e062      	b.n	80048c2 <sim7600_powerProcessor+0x27a>
			}
			else{
				result = 1;
 80047fc:	2301      	movs	r3, #1
 80047fe:	71fb      	strb	r3, [r7, #7]
			}


			break;
 8004800:	e05f      	b.n	80048c2 <sim7600_powerProcessor+0x27a>

		case POWER_ERR:
			powerState = POWER_OFF;
 8004802:	4b32      	ldr	r3, [pc, #200]	; (80048cc <sim7600_powerProcessor+0x284>)
 8004804:	2206      	movs	r2, #6
 8004806:	701a      	strb	r2, [r3, #0]
			readyState = STATE_INIT;
 8004808:	4b31      	ldr	r3, [pc, #196]	; (80048d0 <sim7600_powerProcessor+0x288>)
 800480a:	2200      	movs	r2, #0
 800480c:	701a      	strb	r2, [r3, #0]
			cpinState = STATE_INIT;
 800480e:	4b31      	ldr	r3, [pc, #196]	; (80048d4 <sim7600_powerProcessor+0x28c>)
 8004810:	2200      	movs	r2, #0
 8004812:	701a      	strb	r2, [r3, #0]
			httpResponseState = STATE_INIT;
 8004814:	4b30      	ldr	r3, [pc, #192]	; (80048d8 <sim7600_powerProcessor+0x290>)
 8004816:	2200      	movs	r2, #0
 8004818:	701a      	strb	r2, [r3, #0]
			cmdState = CMD_INIT;
 800481a:	4b30      	ldr	r3, [pc, #192]	; (80048dc <sim7600_powerProcessor+0x294>)
 800481c:	2200      	movs	r2, #0
 800481e:	701a      	strb	r2, [r3, #0]
			result = 0;
 8004820:	2300      	movs	r3, #0
 8004822:	71fb      	strb	r3, [r7, #7]
			break;
 8004824:	e04d      	b.n	80048c2 <sim7600_powerProcessor+0x27a>

		case POWER_OFF:
			powerOffCount++;
 8004826:	4b3b      	ldr	r3, [pc, #236]	; (8004914 <sim7600_powerProcessor+0x2cc>)
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	3301      	adds	r3, #1
 800482c:	b2da      	uxtb	r2, r3
 800482e:	4b39      	ldr	r3, [pc, #228]	; (8004914 <sim7600_powerProcessor+0x2cc>)
 8004830:	701a      	strb	r2, [r3, #0]
			sprintf(pbuffer, "SIM7600 Main Power Off %lu \r\n", powerOffCount);
 8004832:	4b38      	ldr	r3, [pc, #224]	; (8004914 <sim7600_powerProcessor+0x2cc>)
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	461a      	mov	r2, r3
 8004838:	4937      	ldr	r1, [pc, #220]	; (8004918 <sim7600_powerProcessor+0x2d0>)
 800483a:	4833      	ldr	r0, [pc, #204]	; (8004908 <sim7600_powerProcessor+0x2c0>)
 800483c:	f00c fed6 	bl	80115ec <siprintf>
			Uart_SendString(pbuffer, pc_uart);
 8004840:	4929      	ldr	r1, [pc, #164]	; (80048e8 <sim7600_powerProcessor+0x2a0>)
 8004842:	4831      	ldr	r0, [pc, #196]	; (8004908 <sim7600_powerProcessor+0x2c0>)
 8004844:	f7fd f8a0 	bl	8001988 <Uart_SendString>
			HAL_GPIO_WritePin(GPIO_OUT_4_1EN_GPIO_Port, GPIO_OUT_4_1EN_Pin, GPIO_PIN_RESET);
 8004848:	2200      	movs	r2, #0
 800484a:	2110      	movs	r1, #16
 800484c:	4829      	ldr	r0, [pc, #164]	; (80048f4 <sim7600_powerProcessor+0x2ac>)
 800484e:	f003 fa3b 	bl	8007cc8 <HAL_GPIO_WritePin>
			timer5_ms_restart();
 8004852:	f7fe fb91 	bl	8002f78 <timer5_ms_restart>

			if(powerOffCount >= 5){
 8004856:	4b2f      	ldr	r3, [pc, #188]	; (8004914 <sim7600_powerProcessor+0x2cc>)
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	2b04      	cmp	r3, #4
 800485c:	d907      	bls.n	800486e <sim7600_powerProcessor+0x226>
				Uart_SendString("SIM7600 Main Power Off > 5 - Goto Shutdown\r\n", pc_uart);
 800485e:	4922      	ldr	r1, [pc, #136]	; (80048e8 <sim7600_powerProcessor+0x2a0>)
 8004860:	482e      	ldr	r0, [pc, #184]	; (800491c <sim7600_powerProcessor+0x2d4>)
 8004862:	f7fd f891 	bl	8001988 <Uart_SendString>
				powerState = POWER_SCHEDULE_SHUTDOWN;
 8004866:	4b19      	ldr	r3, [pc, #100]	; (80048cc <sim7600_powerProcessor+0x284>)
 8004868:	2208      	movs	r2, #8
 800486a:	701a      	strb	r2, [r3, #0]
			else{
				powerState = POWER_RESTART;
				result = 0;
			}

			break;
 800486c:	e029      	b.n	80048c2 <sim7600_powerProcessor+0x27a>
				powerState = POWER_RESTART;
 800486e:	4b17      	ldr	r3, [pc, #92]	; (80048cc <sim7600_powerProcessor+0x284>)
 8004870:	2207      	movs	r2, #7
 8004872:	701a      	strb	r2, [r3, #0]
				result = 0;
 8004874:	2300      	movs	r3, #0
 8004876:	71fb      	strb	r3, [r7, #7]
			break;
 8004878:	e023      	b.n	80048c2 <sim7600_powerProcessor+0x27a>

		case POWER_RESTART:
			if(timer5_ms_get() > 1000){
 800487a:	f7fe fb8d 	bl	8002f98 <timer5_ms_get>
 800487e:	4603      	mov	r3, r0
 8004880:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004884:	d91c      	bls.n	80048c0 <sim7600_powerProcessor+0x278>
				powerState = POWER_INIT;
 8004886:	4b11      	ldr	r3, [pc, #68]	; (80048cc <sim7600_powerProcessor+0x284>)
 8004888:	2200      	movs	r2, #0
 800488a:	701a      	strb	r2, [r3, #0]
				result = 0;
 800488c:	2300      	movs	r3, #0
 800488e:	71fb      	strb	r3, [r7, #7]
			}
			break;
 8004890:	e016      	b.n	80048c0 <sim7600_powerProcessor+0x278>

		case POWER_SCHEDULE_SHUTDOWN:
			scheduleShutdown(5000);
 8004892:	f241 3088 	movw	r0, #5000	; 0x1388
 8004896:	f7ff fe99 	bl	80045cc <scheduleShutdown>
			powerState = POWER_WAIT_SHUTDOWN;
 800489a:	4b0c      	ldr	r3, [pc, #48]	; (80048cc <sim7600_powerProcessor+0x284>)
 800489c:	2209      	movs	r2, #9
 800489e:	701a      	strb	r2, [r3, #0]
			scheduleShutdown(5000);
 80048a0:	f241 3088 	movw	r0, #5000	; 0x1388
 80048a4:	f7ff fe92 	bl	80045cc <scheduleShutdown>
			result = 0;
 80048a8:	2300      	movs	r3, #0
 80048aa:	71fb      	strb	r3, [r7, #7]
			break;
 80048ac:	e009      	b.n	80048c2 <sim7600_powerProcessor+0x27a>
		case POWER_WAIT_SHUTDOWN:
			result = 0;
 80048ae:	2300      	movs	r3, #0
 80048b0:	71fb      	strb	r3, [r7, #7]
			break;
 80048b2:	e006      	b.n	80048c2 <sim7600_powerProcessor+0x27a>
			break;
 80048b4:	bf00      	nop
 80048b6:	e004      	b.n	80048c2 <sim7600_powerProcessor+0x27a>
			break;
 80048b8:	bf00      	nop
 80048ba:	e002      	b.n	80048c2 <sim7600_powerProcessor+0x27a>
			break;
 80048bc:	bf00      	nop
 80048be:	e000      	b.n	80048c2 <sim7600_powerProcessor+0x27a>
			break;
 80048c0:	bf00      	nop

	}


	return result;
 80048c2:	79fb      	ldrb	r3, [r7, #7]

}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3708      	adds	r7, #8
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	20000aaf 	.word	0x20000aaf
 80048d0:	20000aab 	.word	0x20000aab
 80048d4:	20000aac 	.word	0x20000aac
 80048d8:	20000aad 	.word	0x20000aad
 80048dc:	20000aae 	.word	0x20000aae
 80048e0:	200078de 	.word	0x200078de
 80048e4:	40020400 	.word	0x40020400
 80048e8:	20004094 	.word	0x20004094
 80048ec:	08017ef8 	.word	0x08017ef8
 80048f0:	08017f0c 	.word	0x08017f0c
 80048f4:	40020000 	.word	0x40020000
 80048f8:	08017f24 	.word	0x08017f24
 80048fc:	08017f40 	.word	0x08017f40
 8004900:	200072e4 	.word	0x200072e4
 8004904:	08017f58 	.word	0x08017f58
 8004908:	200078e4 	.word	0x200078e4
 800490c:	08017f80 	.word	0x08017f80
 8004910:	08017fac 	.word	0x08017fac
 8004914:	20000ab6 	.word	0x20000ab6
 8004918:	08017fc8 	.word	0x08017fc8
 800491c:	08017fe8 	.word	0x08017fe8

08004920 <sim7600_commandProcessor>:

void sim7600_commandProcessor(void){
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af02      	add	r7, sp, #8
	switch (cmdState){
 8004926:	4bba      	ldr	r3, [pc, #744]	; (8004c10 <sim7600_commandProcessor+0x2f0>)
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	2b20      	cmp	r3, #32
 800492c:	f200 843a 	bhi.w	80051a4 <sim7600_commandProcessor+0x884>
 8004930:	a201      	add	r2, pc, #4	; (adr r2, 8004938 <sim7600_commandProcessor+0x18>)
 8004932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004936:	bf00      	nop
 8004938:	080049bd 	.word	0x080049bd
 800493c:	08004a31 	.word	0x08004a31
 8004940:	080051a5 	.word	0x080051a5
 8004944:	08004a89 	.word	0x08004a89
 8004948:	08004af7 	.word	0x08004af7
 800494c:	08004b31 	.word	0x08004b31
 8004950:	08005157 	.word	0x08005157
 8004954:	08004a61 	.word	0x08004a61
 8004958:	08004a6d 	.word	0x08004a6d
 800495c:	08004b6d 	.word	0x08004b6d
 8004960:	08004b81 	.word	0x08004b81
 8004964:	08004baf 	.word	0x08004baf
 8004968:	08004beb 	.word	0x08004beb
 800496c:	08004ca1 	.word	0x08004ca1
 8004970:	08004cc1 	.word	0x08004cc1
 8004974:	08004ce1 	.word	0x08004ce1
 8004978:	08004d01 	.word	0x08004d01
 800497c:	08004de5 	.word	0x08004de5
 8004980:	08004e8b 	.word	0x08004e8b
 8004984:	08004eaf 	.word	0x08004eaf
 8004988:	08004f29 	.word	0x08004f29
 800498c:	08005077 	.word	0x08005077
 8004990:	080050e3 	.word	0x080050e3
 8004994:	08005123 	.word	0x08005123
 8004998:	08005091 	.word	0x08005091
 800499c:	080050c5 	.word	0x080050c5
 80049a0:	08004ac7 	.word	0x08004ac7
 80049a4:	08004adf 	.word	0x08004adf
 80049a8:	08004aa9 	.word	0x08004aa9
 80049ac:	08005167 	.word	0x08005167
 80049b0:	0800518d 	.word	0x0800518d
 80049b4:	08004fed 	.word	0x08004fed
 80049b8:	08004da5 	.word	0x08004da5
		case CMD_INIT:
			if(readyState == STATE_OK){
 80049bc:	4b95      	ldr	r3, [pc, #596]	; (8004c14 <sim7600_commandProcessor+0x2f4>)
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d114      	bne.n	80049ee <sim7600_commandProcessor+0xce>
				Uart_SendString("RDY State OK\r\n", pc_uart);
 80049c4:	4994      	ldr	r1, [pc, #592]	; (8004c18 <sim7600_commandProcessor+0x2f8>)
 80049c6:	4895      	ldr	r0, [pc, #596]	; (8004c1c <sim7600_commandProcessor+0x2fc>)
 80049c8:	f7fc ffde 	bl	8001988 <Uart_SendString>
				pauseTimeout = 1000;
 80049cc:	4b94      	ldr	r3, [pc, #592]	; (8004c20 <sim7600_commandProcessor+0x300>)
 80049ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80049d2:	801a      	strh	r2, [r3, #0]
				pauseNextState = CMD_AT;
 80049d4:	4b93      	ldr	r3, [pc, #588]	; (8004c24 <sim7600_commandProcessor+0x304>)
 80049d6:	2203      	movs	r2, #3
 80049d8:	701a      	strb	r2, [r3, #0]
				cmdState = CMD_PAUSE;
 80049da:	4b8d      	ldr	r3, [pc, #564]	; (8004c10 <sim7600_commandProcessor+0x2f0>)
 80049dc:	2207      	movs	r2, #7
 80049de:	701a      	strb	r2, [r3, #0]
				cgsn_flag = 0;
 80049e0:	4b91      	ldr	r3, [pc, #580]	; (8004c28 <sim7600_commandProcessor+0x308>)
 80049e2:	2200      	movs	r2, #0
 80049e4:	701a      	strb	r2, [r3, #0]
				setUpdateStationListFlag(1);
 80049e6:	2001      	movs	r0, #1
 80049e8:	f7ff f9f6 	bl	8003dd8 <setUpdateStationListFlag>
				powerState = POWER_ERR;
			}



			break;
 80049ec:	e3da      	b.n	80051a4 <sim7600_commandProcessor+0x884>
			else if(pauseRDYCount < 10){
 80049ee:	4b8f      	ldr	r3, [pc, #572]	; (8004c2c <sim7600_commandProcessor+0x30c>)
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	2b09      	cmp	r3, #9
 80049f4:	d814      	bhi.n	8004a20 <sim7600_commandProcessor+0x100>
				Uart_SendString("Waiting for RDY\r\n", pc_uart);
 80049f6:	4988      	ldr	r1, [pc, #544]	; (8004c18 <sim7600_commandProcessor+0x2f8>)
 80049f8:	488d      	ldr	r0, [pc, #564]	; (8004c30 <sim7600_commandProcessor+0x310>)
 80049fa:	f7fc ffc5 	bl	8001988 <Uart_SendString>
				pauseTimeout = 1000;
 80049fe:	4b88      	ldr	r3, [pc, #544]	; (8004c20 <sim7600_commandProcessor+0x300>)
 8004a00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a04:	801a      	strh	r2, [r3, #0]
				pauseNextState = CMD_INIT;
 8004a06:	4b87      	ldr	r3, [pc, #540]	; (8004c24 <sim7600_commandProcessor+0x304>)
 8004a08:	2200      	movs	r2, #0
 8004a0a:	701a      	strb	r2, [r3, #0]
				cmdState = CMD_PAUSE;
 8004a0c:	4b80      	ldr	r3, [pc, #512]	; (8004c10 <sim7600_commandProcessor+0x2f0>)
 8004a0e:	2207      	movs	r2, #7
 8004a10:	701a      	strb	r2, [r3, #0]
				pauseRDYCount++;
 8004a12:	4b86      	ldr	r3, [pc, #536]	; (8004c2c <sim7600_commandProcessor+0x30c>)
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	3301      	adds	r3, #1
 8004a18:	b2da      	uxtb	r2, r3
 8004a1a:	4b84      	ldr	r3, [pc, #528]	; (8004c2c <sim7600_commandProcessor+0x30c>)
 8004a1c:	701a      	strb	r2, [r3, #0]
			break;
 8004a1e:	e3c1      	b.n	80051a4 <sim7600_commandProcessor+0x884>
				Uart_SendString("Waiting for RDY Timed Out - Switching to Power Error\r\n", pc_uart);
 8004a20:	497d      	ldr	r1, [pc, #500]	; (8004c18 <sim7600_commandProcessor+0x2f8>)
 8004a22:	4884      	ldr	r0, [pc, #528]	; (8004c34 <sim7600_commandProcessor+0x314>)
 8004a24:	f7fc ffb0 	bl	8001988 <Uart_SendString>
				powerState = POWER_ERR;
 8004a28:	4b83      	ldr	r3, [pc, #524]	; (8004c38 <sim7600_commandProcessor+0x318>)
 8004a2a:	2205      	movs	r2, #5
 8004a2c:	701a      	strb	r2, [r3, #0]
			break;
 8004a2e:	e3b9      	b.n	80051a4 <sim7600_commandProcessor+0x884>

		case CMD_WAIT:
			if(!wait.waiting){
 8004a30:	4b82      	ldr	r3, [pc, #520]	; (8004c3c <sim7600_commandProcessor+0x31c>)
 8004a32:	7c1b      	ldrb	r3, [r3, #16]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d105      	bne.n	8004a44 <sim7600_commandProcessor+0x124>
				setCommandState(wait.nextState_success);
 8004a38:	4b80      	ldr	r3, [pc, #512]	; (8004c3c <sim7600_commandProcessor+0x31c>)
 8004a3a:	799b      	ldrb	r3, [r3, #6]
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f000 fe65 	bl	800570c <setCommandState>
			}
			else if(timer2_ms_get() > wait.timeout){//we have timed out
				setCommandState(wait.nextState_timeout);
//				Debug("Wait Timeout\r\n");
			}
			break;
 8004a42:	e3a8      	b.n	8005196 <sim7600_commandProcessor+0x876>
			else if(timer2_ms_get() > wait.timeout){//we have timed out
 8004a44:	f7fe fa70 	bl	8002f28 <timer2_ms_get>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	4b7c      	ldr	r3, [pc, #496]	; (8004c3c <sim7600_commandProcessor+0x31c>)
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	f240 83a1 	bls.w	8005196 <sim7600_commandProcessor+0x876>
				setCommandState(wait.nextState_timeout);
 8004a54:	4b79      	ldr	r3, [pc, #484]	; (8004c3c <sim7600_commandProcessor+0x31c>)
 8004a56:	7a1b      	ldrb	r3, [r3, #8]
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f000 fe57 	bl	800570c <setCommandState>
			break;
 8004a5e:	e39a      	b.n	8005196 <sim7600_commandProcessor+0x876>

		case CMD_PAUSE:
			timer2_ms_restart();
 8004a60:	f7fe fa52 	bl	8002f08 <timer2_ms_restart>
//			Debug("Pause\r\n");
			setCommandState(CMD_PAUSE_WAIT);
 8004a64:	2008      	movs	r0, #8
 8004a66:	f000 fe51 	bl	800570c <setCommandState>
			break;
 8004a6a:	e39b      	b.n	80051a4 <sim7600_commandProcessor+0x884>

		case CMD_PAUSE_WAIT:
			if(timer2_ms_get() > pauseTimeout){//we have timed out
 8004a6c:	f7fe fa5c 	bl	8002f28 <timer2_ms_get>
 8004a70:	4603      	mov	r3, r0
 8004a72:	4a6b      	ldr	r2, [pc, #428]	; (8004c20 <sim7600_commandProcessor+0x300>)
 8004a74:	8812      	ldrh	r2, [r2, #0]
 8004a76:	4293      	cmp	r3, r2
 8004a78:	f240 838f 	bls.w	800519a <sim7600_commandProcessor+0x87a>
//				Debug("Pause Timeout\r\n");
				setCommandState(pauseNextState);
 8004a7c:	4b69      	ldr	r3, [pc, #420]	; (8004c24 <sim7600_commandProcessor+0x304>)
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	4618      	mov	r0, r3
 8004a82:	f000 fe43 	bl	800570c <setCommandState>
			}
			break;
 8004a86:	e388      	b.n	800519a <sim7600_commandProcessor+0x87a>

		case CMD_AT:
			Uart_SendString("Sending AT\r\n", pc_uart);
 8004a88:	4963      	ldr	r1, [pc, #396]	; (8004c18 <sim7600_commandProcessor+0x2f8>)
 8004a8a:	486d      	ldr	r0, [pc, #436]	; (8004c40 <sim7600_commandProcessor+0x320>)
 8004a8c:	f7fc ff7c 	bl	8001988 <Uart_SendString>
			sim7600_command_pause_wait("AT\r\n", 1000, "OK", CMD_CGSN, CMD_ERR, 10);
 8004a90:	230a      	movs	r3, #10
 8004a92:	9301      	str	r3, [sp, #4]
 8004a94:	2306      	movs	r3, #6
 8004a96:	9300      	str	r3, [sp, #0]
 8004a98:	231c      	movs	r3, #28
 8004a9a:	4a6a      	ldr	r2, [pc, #424]	; (8004c44 <sim7600_commandProcessor+0x324>)
 8004a9c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004aa0:	4869      	ldr	r0, [pc, #420]	; (8004c48 <sim7600_commandProcessor+0x328>)
 8004aa2:	f000 fbb3 	bl	800520c <sim7600_command_pause_wait>
			break;
 8004aa6:	e37d      	b.n	80051a4 <sim7600_commandProcessor+0x884>

		case CMD_CGSN:
			//get imei
			cgsn_flag = 1;
 8004aa8:	4b5f      	ldr	r3, [pc, #380]	; (8004c28 <sim7600_commandProcessor+0x308>)
 8004aaa:	2201      	movs	r2, #1
 8004aac:	701a      	strb	r2, [r3, #0]
			sim7600_command_pause_wait("AT+CGSN\r\n", 1000, "OK", CMD_CONFIG_CTZU, CMD_ERR, 10);
 8004aae:	230a      	movs	r3, #10
 8004ab0:	9301      	str	r3, [sp, #4]
 8004ab2:	2306      	movs	r3, #6
 8004ab4:	9300      	str	r3, [sp, #0]
 8004ab6:	231a      	movs	r3, #26
 8004ab8:	4a62      	ldr	r2, [pc, #392]	; (8004c44 <sim7600_commandProcessor+0x324>)
 8004aba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004abe:	4863      	ldr	r0, [pc, #396]	; (8004c4c <sim7600_commandProcessor+0x32c>)
 8004ac0:	f000 fba4 	bl	800520c <sim7600_command_pause_wait>
			break;
 8004ac4:	e36e      	b.n	80051a4 <sim7600_commandProcessor+0x884>

		case CMD_CONFIG_CTZU:
			//	AT+CTZU=1 set automatic time update from network so AT_CCLK works
			sim7600_command_pause_wait("AT+CTZU=1\r\n", 1000, "OK", CMD_CONFIG_CMGF, CMD_ERR, 10);
 8004ac6:	230a      	movs	r3, #10
 8004ac8:	9301      	str	r3, [sp, #4]
 8004aca:	2306      	movs	r3, #6
 8004acc:	9300      	str	r3, [sp, #0]
 8004ace:	231b      	movs	r3, #27
 8004ad0:	4a5c      	ldr	r2, [pc, #368]	; (8004c44 <sim7600_commandProcessor+0x324>)
 8004ad2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004ad6:	485e      	ldr	r0, [pc, #376]	; (8004c50 <sim7600_commandProcessor+0x330>)
 8004ad8:	f000 fb98 	bl	800520c <sim7600_command_pause_wait>
			break;
 8004adc:	e362      	b.n	80051a4 <sim7600_commandProcessor+0x884>

		case CMD_CONFIG_CMGF:
			//	AT+CMGF=1 SMS in text mode

//			sim7600_command_pause_wait("AT+CMGF=1\r\n", 1000, "OK", CMD_CCLK, CMD_ERR, 10);
			sim7600_command_pause_wait("AT+CMGF=1\r\n", 1000, "OK", CMD_CPIN, CMD_ERR, 10);
 8004ade:	230a      	movs	r3, #10
 8004ae0:	9301      	str	r3, [sp, #4]
 8004ae2:	2306      	movs	r3, #6
 8004ae4:	9300      	str	r3, [sp, #0]
 8004ae6:	2309      	movs	r3, #9
 8004ae8:	4a56      	ldr	r2, [pc, #344]	; (8004c44 <sim7600_commandProcessor+0x324>)
 8004aea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004aee:	4859      	ldr	r0, [pc, #356]	; (8004c54 <sim7600_commandProcessor+0x334>)
 8004af0:	f000 fb8c 	bl	800520c <sim7600_command_pause_wait>
//			pauseCommmandSate(CMD_CPIN, 10);
			break;
 8004af4:	e356      	b.n	80051a4 <sim7600_commandProcessor+0x884>

//skip over getting time from network. Next two states not used...
		case CMD_CCLK:

			if(cclkAttempts >= 5){
 8004af6:	4b58      	ldr	r3, [pc, #352]	; (8004c58 <sim7600_commandProcessor+0x338>)
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	2b04      	cmp	r3, #4
 8004afc:	d90b      	bls.n	8004b16 <sim7600_commandProcessor+0x1f6>
				Uart_SendString("Timestate from network attempts > 5. Continuing regardless. Will try for server time.\r\n", pc_uart);
 8004afe:	4946      	ldr	r1, [pc, #280]	; (8004c18 <sim7600_commandProcessor+0x2f8>)
 8004b00:	4856      	ldr	r0, [pc, #344]	; (8004c5c <sim7600_commandProcessor+0x33c>)
 8004b02:	f7fc ff41 	bl	8001988 <Uart_SendString>
				pauseCommmandSate(CMD_CPIN, 10);
 8004b06:	210a      	movs	r1, #10
 8004b08:	2009      	movs	r0, #9
 8004b0a:	f000 fe0f 	bl	800572c <pauseCommmandSate>
				cclkAttempts = 0;
 8004b0e:	4b52      	ldr	r3, [pc, #328]	; (8004c58 <sim7600_commandProcessor+0x338>)
 8004b10:	2200      	movs	r2, #0
 8004b12:	701a      	strb	r2, [r3, #0]
				break;
 8004b14:	e346      	b.n	80051a4 <sim7600_commandProcessor+0x884>
			}

			sim7600_command_pause_wait("AT+CCLK?\r\n", 1000, "OK", CMD_CCLK_CHECK, CMD_ERR, 1000);
 8004b16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b1a:	9301      	str	r3, [sp, #4]
 8004b1c:	2306      	movs	r3, #6
 8004b1e:	9300      	str	r3, [sp, #0]
 8004b20:	2305      	movs	r3, #5
 8004b22:	4a48      	ldr	r2, [pc, #288]	; (8004c44 <sim7600_commandProcessor+0x324>)
 8004b24:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004b28:	484d      	ldr	r0, [pc, #308]	; (8004c60 <sim7600_commandProcessor+0x340>)
 8004b2a:	f000 fb6f 	bl	800520c <sim7600_command_pause_wait>

			break;
 8004b2e:	e339      	b.n	80051a4 <sim7600_commandProcessor+0x884>

		case CMD_CCLK_CHECK:

			if(getTimeState() == TIMESTATE_OK_NITZ){
 8004b30:	f001 fca6 	bl	8006480 <getTimeState>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d108      	bne.n	8004b4c <sim7600_commandProcessor+0x22c>
				Uart_SendString("Timestate from network success\r\n", pc_uart);
 8004b3a:	4937      	ldr	r1, [pc, #220]	; (8004c18 <sim7600_commandProcessor+0x2f8>)
 8004b3c:	4849      	ldr	r0, [pc, #292]	; (8004c64 <sim7600_commandProcessor+0x344>)
 8004b3e:	f7fc ff23 	bl	8001988 <Uart_SendString>
				pauseCommmandSate(CMD_CPIN, 10);
 8004b42:	210a      	movs	r1, #10
 8004b44:	2009      	movs	r0, #9
 8004b46:	f000 fdf1 	bl	800572c <pauseCommmandSate>
				Uart_SendString("Timestate from network not received. Trying again\r\n", pc_uart);
				cclkAttempts ++;
				pauseCommmandSate(CMD_CCLK, 2000);
			}

			break;
 8004b4a:	e32b      	b.n	80051a4 <sim7600_commandProcessor+0x884>
				Uart_SendString("Timestate from network not received. Trying again\r\n", pc_uart);
 8004b4c:	4932      	ldr	r1, [pc, #200]	; (8004c18 <sim7600_commandProcessor+0x2f8>)
 8004b4e:	4846      	ldr	r0, [pc, #280]	; (8004c68 <sim7600_commandProcessor+0x348>)
 8004b50:	f7fc ff1a 	bl	8001988 <Uart_SendString>
				cclkAttempts ++;
 8004b54:	4b40      	ldr	r3, [pc, #256]	; (8004c58 <sim7600_commandProcessor+0x338>)
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	3301      	adds	r3, #1
 8004b5a:	b2da      	uxtb	r2, r3
 8004b5c:	4b3e      	ldr	r3, [pc, #248]	; (8004c58 <sim7600_commandProcessor+0x338>)
 8004b5e:	701a      	strb	r2, [r3, #0]
				pauseCommmandSate(CMD_CCLK, 2000);
 8004b60:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8004b64:	2004      	movs	r0, #4
 8004b66:	f000 fde1 	bl	800572c <pauseCommmandSate>
			break;
 8004b6a:	e31b      	b.n	80051a4 <sim7600_commandProcessor+0x884>

//			skip to here

		case CMD_CPIN:
			sim7600_command_wait("AT+CPIN?\r\n", 1000, "OK", CMD_CPIN_CHECK, CMD_ERR);
 8004b6c:	2306      	movs	r3, #6
 8004b6e:	9300      	str	r3, [sp, #0]
 8004b70:	230a      	movs	r3, #10
 8004b72:	4a34      	ldr	r2, [pc, #208]	; (8004c44 <sim7600_commandProcessor+0x324>)
 8004b74:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004b78:	483c      	ldr	r0, [pc, #240]	; (8004c6c <sim7600_commandProcessor+0x34c>)
 8004b7a:	f000 fb65 	bl	8005248 <sim7600_command_wait>
			break;
 8004b7e:	e311      	b.n	80051a4 <sim7600_commandProcessor+0x884>

		case CMD_CPIN_CHECK:
			if(cpinState == STATE_OK){
 8004b80:	4b3b      	ldr	r3, [pc, #236]	; (8004c70 <sim7600_commandProcessor+0x350>)
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d108      	bne.n	8004b9a <sim7600_commandProcessor+0x27a>
				csqCheckCount = 0;
 8004b88:	4b3a      	ldr	r3, [pc, #232]	; (8004c74 <sim7600_commandProcessor+0x354>)
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	701a      	strb	r2, [r3, #0]
				pauseCommmandSate(CMD_CSQ, 1000);
 8004b8e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004b92:	200b      	movs	r0, #11
 8004b94:	f000 fdca 	bl	800572c <pauseCommmandSate>
			else{
				Uart_SendString("CPIN not ok. Check SIM Card is properly inserted\r\n", pc_uart);
				pauseCommmandSate(CMD_ERR, 2000);
			}

			break;
 8004b98:	e304      	b.n	80051a4 <sim7600_commandProcessor+0x884>
				Uart_SendString("CPIN not ok. Check SIM Card is properly inserted\r\n", pc_uart);
 8004b9a:	491f      	ldr	r1, [pc, #124]	; (8004c18 <sim7600_commandProcessor+0x2f8>)
 8004b9c:	4836      	ldr	r0, [pc, #216]	; (8004c78 <sim7600_commandProcessor+0x358>)
 8004b9e:	f7fc fef3 	bl	8001988 <Uart_SendString>
				pauseCommmandSate(CMD_ERR, 2000);
 8004ba2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8004ba6:	2006      	movs	r0, #6
 8004ba8:	f000 fdc0 	bl	800572c <pauseCommmandSate>
			break;
 8004bac:	e2fa      	b.n	80051a4 <sim7600_commandProcessor+0x884>

		case CMD_CSQ:
			if(csqCheckCount > CSQ_CHECK_COUNTS){
 8004bae:	4b31      	ldr	r3, [pc, #196]	; (8004c74 <sim7600_commandProcessor+0x354>)
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	2b3c      	cmp	r3, #60	; 0x3c
 8004bb4:	d909      	bls.n	8004bca <sim7600_commandProcessor+0x2aa>
				Uart_SendString("CSQ Check Counts exceeded, try to restart modem.\r\n", pc_uart);
 8004bb6:	4918      	ldr	r1, [pc, #96]	; (8004c18 <sim7600_commandProcessor+0x2f8>)
 8004bb8:	4830      	ldr	r0, [pc, #192]	; (8004c7c <sim7600_commandProcessor+0x35c>)
 8004bba:	f7fc fee5 	bl	8001988 <Uart_SendString>
				pauseCommmandSate(CMD_ERR, 2000);
 8004bbe:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8004bc2:	2006      	movs	r0, #6
 8004bc4:	f000 fdb2 	bl	800572c <pauseCommmandSate>
				sim7600_command_wait("AT+CSQ\r\n", 1000, "OK\r\n", CMD_CSQ_CHECK, CMD_ERR);
				csqCheckCount++;
			}


			break;
 8004bc8:	e2ec      	b.n	80051a4 <sim7600_commandProcessor+0x884>
				sim7600_command_wait("AT+CSQ\r\n", 1000, "OK\r\n", CMD_CSQ_CHECK, CMD_ERR);
 8004bca:	2306      	movs	r3, #6
 8004bcc:	9300      	str	r3, [sp, #0]
 8004bce:	230c      	movs	r3, #12
 8004bd0:	4a2b      	ldr	r2, [pc, #172]	; (8004c80 <sim7600_commandProcessor+0x360>)
 8004bd2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004bd6:	482b      	ldr	r0, [pc, #172]	; (8004c84 <sim7600_commandProcessor+0x364>)
 8004bd8:	f000 fb36 	bl	8005248 <sim7600_command_wait>
				csqCheckCount++;
 8004bdc:	4b25      	ldr	r3, [pc, #148]	; (8004c74 <sim7600_commandProcessor+0x354>)
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	3301      	adds	r3, #1
 8004be2:	b2da      	uxtb	r2, r3
 8004be4:	4b23      	ldr	r3, [pc, #140]	; (8004c74 <sim7600_commandProcessor+0x354>)
 8004be6:	701a      	strb	r2, [r3, #0]
			break;
 8004be8:	e2dc      	b.n	80051a4 <sim7600_commandProcessor+0x884>

		case CMD_CSQ_CHECK:
			if(csq == 99 || csq == 199){
 8004bea:	4b27      	ldr	r3, [pc, #156]	; (8004c88 <sim7600_commandProcessor+0x368>)
 8004bec:	881b      	ldrh	r3, [r3, #0]
 8004bee:	2b63      	cmp	r3, #99	; 0x63
 8004bf0:	d003      	beq.n	8004bfa <sim7600_commandProcessor+0x2da>
 8004bf2:	4b25      	ldr	r3, [pc, #148]	; (8004c88 <sim7600_commandProcessor+0x368>)
 8004bf4:	881b      	ldrh	r3, [r3, #0]
 8004bf6:	2bc7      	cmp	r3, #199	; 0xc7
 8004bf8:	d14a      	bne.n	8004c90 <sim7600_commandProcessor+0x370>
				Uart_SendString("Signal Strength not known or not detectable (CSQ equals 99/199). Check 4G antenna\r\n", pc_uart);
 8004bfa:	4907      	ldr	r1, [pc, #28]	; (8004c18 <sim7600_commandProcessor+0x2f8>)
 8004bfc:	4823      	ldr	r0, [pc, #140]	; (8004c8c <sim7600_commandProcessor+0x36c>)
 8004bfe:	f7fc fec3 	bl	8001988 <Uart_SendString>
				pauseCommmandSate(CMD_CSQ, 2000);
 8004c02:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8004c06:	200b      	movs	r0, #11
 8004c08:	f000 fd90 	bl	800572c <pauseCommmandSate>
			else{
				pauseCommmandSate(CMD_CGREG, 10);
				csqCheckCount = 0;
			}

			break;
 8004c0c:	e2ca      	b.n	80051a4 <sim7600_commandProcessor+0x884>
 8004c0e:	bf00      	nop
 8004c10:	20000aae 	.word	0x20000aae
 8004c14:	20000aab 	.word	0x20000aab
 8004c18:	20004094 	.word	0x20004094
 8004c1c:	08018018 	.word	0x08018018
 8004c20:	20000ab0 	.word	0x20000ab0
 8004c24:	20007884 	.word	0x20007884
 8004c28:	200072e8 	.word	0x200072e8
 8004c2c:	20000ab3 	.word	0x20000ab3
 8004c30:	08018028 	.word	0x08018028
 8004c34:	0801803c 	.word	0x0801803c
 8004c38:	20000aaf 	.word	0x20000aaf
 8004c3c:	200078b4 	.word	0x200078b4
 8004c40:	08018074 	.word	0x08018074
 8004c44:	08018084 	.word	0x08018084
 8004c48:	08018088 	.word	0x08018088
 8004c4c:	08018090 	.word	0x08018090
 8004c50:	0801809c 	.word	0x0801809c
 8004c54:	080180a8 	.word	0x080180a8
 8004c58:	20000ab2 	.word	0x20000ab2
 8004c5c:	080180b4 	.word	0x080180b4
 8004c60:	0801810c 	.word	0x0801810c
 8004c64:	08018118 	.word	0x08018118
 8004c68:	0801813c 	.word	0x0801813c
 8004c6c:	08018170 	.word	0x08018170
 8004c70:	20000aac 	.word	0x20000aac
 8004c74:	200078e0 	.word	0x200078e0
 8004c78:	0801817c 	.word	0x0801817c
 8004c7c:	080181b0 	.word	0x080181b0
 8004c80:	080181e4 	.word	0x080181e4
 8004c84:	080181ec 	.word	0x080181ec
 8004c88:	200078de 	.word	0x200078de
 8004c8c:	080181f8 	.word	0x080181f8
				pauseCommmandSate(CMD_CGREG, 10);
 8004c90:	210a      	movs	r1, #10
 8004c92:	200d      	movs	r0, #13
 8004c94:	f000 fd4a 	bl	800572c <pauseCommmandSate>
				csqCheckCount = 0;
 8004c98:	4bae      	ldr	r3, [pc, #696]	; (8004f54 <sim7600_commandProcessor+0x634>)
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	701a      	strb	r2, [r3, #0]
			break;
 8004c9e:	e281      	b.n	80051a4 <sim7600_commandProcessor+0x884>

		case CMD_CGREG:
			Uart_SendString("Send CGREG\r\n", pc_uart);
 8004ca0:	49ad      	ldr	r1, [pc, #692]	; (8004f58 <sim7600_commandProcessor+0x638>)
 8004ca2:	48ae      	ldr	r0, [pc, #696]	; (8004f5c <sim7600_commandProcessor+0x63c>)
 8004ca4:	f7fc fe70 	bl	8001988 <Uart_SendString>
			sim7600_command_pause_wait("AT+CGREG?\r\n", 1000, "OK", CMD_COPS, CMD_ERR,100);
 8004ca8:	2364      	movs	r3, #100	; 0x64
 8004caa:	9301      	str	r3, [sp, #4]
 8004cac:	2306      	movs	r3, #6
 8004cae:	9300      	str	r3, [sp, #0]
 8004cb0:	230e      	movs	r3, #14
 8004cb2:	4aab      	ldr	r2, [pc, #684]	; (8004f60 <sim7600_commandProcessor+0x640>)
 8004cb4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004cb8:	48aa      	ldr	r0, [pc, #680]	; (8004f64 <sim7600_commandProcessor+0x644>)
 8004cba:	f000 faa7 	bl	800520c <sim7600_command_pause_wait>
			break;
 8004cbe:	e271      	b.n	80051a4 <sim7600_commandProcessor+0x884>

		case CMD_COPS:
			Uart_SendString("Send COPS\r\n", pc_uart);
 8004cc0:	49a5      	ldr	r1, [pc, #660]	; (8004f58 <sim7600_commandProcessor+0x638>)
 8004cc2:	48a9      	ldr	r0, [pc, #676]	; (8004f68 <sim7600_commandProcessor+0x648>)
 8004cc4:	f7fc fe60 	bl	8001988 <Uart_SendString>
			sim7600_command_pause_wait("AT+COPS?\r\n", 1000, "OK", CMD_CGACT, CMD_ERR,100);
 8004cc8:	2364      	movs	r3, #100	; 0x64
 8004cca:	9301      	str	r3, [sp, #4]
 8004ccc:	2306      	movs	r3, #6
 8004cce:	9300      	str	r3, [sp, #0]
 8004cd0:	230f      	movs	r3, #15
 8004cd2:	4aa3      	ldr	r2, [pc, #652]	; (8004f60 <sim7600_commandProcessor+0x640>)
 8004cd4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004cd8:	48a4      	ldr	r0, [pc, #656]	; (8004f6c <sim7600_commandProcessor+0x64c>)
 8004cda:	f000 fa97 	bl	800520c <sim7600_command_pause_wait>
			break;
 8004cde:	e261      	b.n	80051a4 <sim7600_commandProcessor+0x884>

		case CMD_CGACT:
			Uart_SendString("Send CGACT\r\n", pc_uart);
 8004ce0:	499d      	ldr	r1, [pc, #628]	; (8004f58 <sim7600_commandProcessor+0x638>)
 8004ce2:	48a3      	ldr	r0, [pc, #652]	; (8004f70 <sim7600_commandProcessor+0x650>)
 8004ce4:	f7fc fe50 	bl	8001988 <Uart_SendString>
			sim7600_command_pause_wait("AT+CGACT=1,1\r\n", 10000, "OK", CMD_CMGR, CMD_ERR,100);
 8004ce8:	2364      	movs	r3, #100	; 0x64
 8004cea:	9301      	str	r3, [sp, #4]
 8004cec:	2306      	movs	r3, #6
 8004cee:	9300      	str	r3, [sp, #0]
 8004cf0:	2318      	movs	r3, #24
 8004cf2:	4a9b      	ldr	r2, [pc, #620]	; (8004f60 <sim7600_commandProcessor+0x640>)
 8004cf4:	f242 7110 	movw	r1, #10000	; 0x2710
 8004cf8:	489e      	ldr	r0, [pc, #632]	; (8004f74 <sim7600_commandProcessor+0x654>)
 8004cfa:	f000 fa87 	bl	800520c <sim7600_command_pause_wait>
			break;
 8004cfe:	e251      	b.n	80051a4 <sim7600_commandProcessor+0x884>

		case CMD_HTTP_INIT:

			numToSend = numMeasurementsToSend();
 8004d00:	f7fe fa78 	bl	80031f4 <numMeasurementsToSend>
 8004d04:	4603      	mov	r3, r0
 8004d06:	461a      	mov	r2, r3
 8004d08:	4b9b      	ldr	r3, [pc, #620]	; (8004f78 <sim7600_commandProcessor+0x658>)
 8004d0a:	701a      	strb	r2, [r3, #0]
//			if(getUpdateStationListFlag() || sendParamsToUpFlag == 1){
			if(getUpdateStationListFlag()){
 8004d0c:	f7ff f858 	bl	8003dc0 <getUpdateStationListFlag>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d014      	beq.n	8004d40 <sim7600_commandProcessor+0x420>

				settingsToParams(urlParamBuffer);
 8004d16:	4899      	ldr	r0, [pc, #612]	; (8004f7c <sim7600_commandProcessor+0x65c>)
 8004d18:	f7ff fc08 	bl	800452c <settingsToParams>
				Uart_SendString("Send HTTPINIT for settings\r\n", pc_uart);
 8004d1c:	498e      	ldr	r1, [pc, #568]	; (8004f58 <sim7600_commandProcessor+0x638>)
 8004d1e:	4898      	ldr	r0, [pc, #608]	; (8004f80 <sim7600_commandProcessor+0x660>)
 8004d20:	f7fc fe32 	bl	8001988 <Uart_SendString>
				timer5_ms_restart();//start http timer
 8004d24:	f7fe f928 	bl	8002f78 <timer5_ms_restart>
				sim7600_command_pause_wait("AT+HTTPINIT\r\n", 1000, "OK", CMD_HTTP_PARA, CMD_ERR,100);
 8004d28:	2364      	movs	r3, #100	; 0x64
 8004d2a:	9301      	str	r3, [sp, #4]
 8004d2c:	2306      	movs	r3, #6
 8004d2e:	9300      	str	r3, [sp, #0]
 8004d30:	2311      	movs	r3, #17
 8004d32:	4a8b      	ldr	r2, [pc, #556]	; (8004f60 <sim7600_commandProcessor+0x640>)
 8004d34:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004d38:	4892      	ldr	r0, [pc, #584]	; (8004f84 <sim7600_commandProcessor+0x664>)
 8004d3a:	f000 fa67 	bl	800520c <sim7600_command_pause_wait>
				sprintf(pbuffer, "Number of Measurements To Send = %u\r\n",numToSend);
				Uart_SendString(pbuffer, pc_uart);
				pauseCommmandSate(CMD_CMGR, 1000);

			}
			break;
 8004d3e:	e22e      	b.n	800519e <sim7600_commandProcessor+0x87e>
			else if(numToSend >= 1){
 8004d40:	4b8d      	ldr	r3, [pc, #564]	; (8004f78 <sim7600_commandProcessor+0x658>)
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d011      	beq.n	8004d6c <sim7600_commandProcessor+0x44c>
				Uart_SendString("Send HTTPINIT for measurements\r\n", pc_uart);
 8004d48:	4983      	ldr	r1, [pc, #524]	; (8004f58 <sim7600_commandProcessor+0x638>)
 8004d4a:	488f      	ldr	r0, [pc, #572]	; (8004f88 <sim7600_commandProcessor+0x668>)
 8004d4c:	f7fc fe1c 	bl	8001988 <Uart_SendString>
				timer5_ms_restart();//start http timer
 8004d50:	f7fe f912 	bl	8002f78 <timer5_ms_restart>
				sim7600_command_pause_wait("AT+HTTPINIT\r\n", 1000, "OK", CMD_NEXT_MEASUREMENT, CMD_ERR,10);
 8004d54:	230a      	movs	r3, #10
 8004d56:	9301      	str	r3, [sp, #4]
 8004d58:	2306      	movs	r3, #6
 8004d5a:	9300      	str	r3, [sp, #0]
 8004d5c:	2320      	movs	r3, #32
 8004d5e:	4a80      	ldr	r2, [pc, #512]	; (8004f60 <sim7600_commandProcessor+0x640>)
 8004d60:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004d64:	4887      	ldr	r0, [pc, #540]	; (8004f84 <sim7600_commandProcessor+0x664>)
 8004d66:	f000 fa51 	bl	800520c <sim7600_command_pause_wait>
			break;
 8004d6a:	e218      	b.n	800519e <sim7600_commandProcessor+0x87e>
			else if(timer5_ms_get() > 120000){//we have tried for two minutes, check for sms
 8004d6c:	f7fe f914 	bl	8002f98 <timer5_ms_get>
 8004d70:	4603      	mov	r3, r0
 8004d72:	4a86      	ldr	r2, [pc, #536]	; (8004f8c <sim7600_commandProcessor+0x66c>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	f240 8212 	bls.w	800519e <sim7600_commandProcessor+0x87e>
				Uart_SendString("Waiting for a long time in http init - jumping to check for sms. \r\n", pc_uart);
 8004d7a:	4977      	ldr	r1, [pc, #476]	; (8004f58 <sim7600_commandProcessor+0x638>)
 8004d7c:	4884      	ldr	r0, [pc, #528]	; (8004f90 <sim7600_commandProcessor+0x670>)
 8004d7e:	f7fc fe03 	bl	8001988 <Uart_SendString>
				sprintf(pbuffer, "Number of Measurements To Send = %u\r\n",numToSend);
 8004d82:	4b7d      	ldr	r3, [pc, #500]	; (8004f78 <sim7600_commandProcessor+0x658>)
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	461a      	mov	r2, r3
 8004d88:	4982      	ldr	r1, [pc, #520]	; (8004f94 <sim7600_commandProcessor+0x674>)
 8004d8a:	4883      	ldr	r0, [pc, #524]	; (8004f98 <sim7600_commandProcessor+0x678>)
 8004d8c:	f00c fc2e 	bl	80115ec <siprintf>
				Uart_SendString(pbuffer, pc_uart);
 8004d90:	4971      	ldr	r1, [pc, #452]	; (8004f58 <sim7600_commandProcessor+0x638>)
 8004d92:	4881      	ldr	r0, [pc, #516]	; (8004f98 <sim7600_commandProcessor+0x678>)
 8004d94:	f7fc fdf8 	bl	8001988 <Uart_SendString>
				pauseCommmandSate(CMD_CMGR, 1000);
 8004d98:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004d9c:	2018      	movs	r0, #24
 8004d9e:	f000 fcc5 	bl	800572c <pauseCommmandSate>
			break;
 8004da2:	e1fc      	b.n	800519e <sim7600_commandProcessor+0x87e>




		case CMD_NEXT_MEASUREMENT:
			sprintf(pbuffer, "Number of Measurements To Send = %u\r\n",numToSend);
 8004da4:	4b74      	ldr	r3, [pc, #464]	; (8004f78 <sim7600_commandProcessor+0x658>)
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	461a      	mov	r2, r3
 8004daa:	497a      	ldr	r1, [pc, #488]	; (8004f94 <sim7600_commandProcessor+0x674>)
 8004dac:	487a      	ldr	r0, [pc, #488]	; (8004f98 <sim7600_commandProcessor+0x678>)
 8004dae:	f00c fc1d 	bl	80115ec <siprintf>
			Uart_SendString(pbuffer, pc_uart);
 8004db2:	4969      	ldr	r1, [pc, #420]	; (8004f58 <sim7600_commandProcessor+0x638>)
 8004db4:	4878      	ldr	r0, [pc, #480]	; (8004f98 <sim7600_commandProcessor+0x678>)
 8004db6:	f7fc fde7 	bl	8001988 <Uart_SendString>
			getMeasurementToSend(&measure);
 8004dba:	4878      	ldr	r0, [pc, #480]	; (8004f9c <sim7600_commandProcessor+0x67c>)
 8004dbc:	f7fe fa26 	bl	800320c <getMeasurementToSend>
			measure.csq = csq;
 8004dc0:	4b77      	ldr	r3, [pc, #476]	; (8004fa0 <sim7600_commandProcessor+0x680>)
 8004dc2:	881b      	ldrh	r3, [r3, #0]
 8004dc4:	b2da      	uxtb	r2, r3
 8004dc6:	4b75      	ldr	r3, [pc, #468]	; (8004f9c <sim7600_commandProcessor+0x67c>)
 8004dc8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			measurementToParams(&measure, urlParamBuffer);
 8004dcc:	496b      	ldr	r1, [pc, #428]	; (8004f7c <sim7600_commandProcessor+0x65c>)
 8004dce:	4873      	ldr	r0, [pc, #460]	; (8004f9c <sim7600_commandProcessor+0x67c>)
 8004dd0:	f7fe fb24 	bl	800341c <measurementToParams>
			returnIndex = 0;
 8004dd4:	4b73      	ldr	r3, [pc, #460]	; (8004fa4 <sim7600_commandProcessor+0x684>)
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	601a      	str	r2, [r3, #0]
			pauseCommmandSate(CMD_HTTP_PARA, 10);
 8004dda:	210a      	movs	r1, #10
 8004ddc:	2011      	movs	r0, #17
 8004dde:	f000 fca5 	bl	800572c <pauseCommmandSate>
			break;
 8004de2:	e1df      	b.n	80051a4 <sim7600_commandProcessor+0x884>

		case CMD_HTTP_PARA:

			pos = 0;
 8004de4:	4b70      	ldr	r3, [pc, #448]	; (8004fa8 <sim7600_commandProcessor+0x688>)
 8004de6:	2200      	movs	r2, #0
 8004de8:	601a      	str	r2, [r3, #0]
			pos = appendStr(cmdBuffer, "AT+HTTPPARA=\"URL\",\"http://", pos);
 8004dea:	4b6f      	ldr	r3, [pc, #444]	; (8004fa8 <sim7600_commandProcessor+0x688>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	461a      	mov	r2, r3
 8004df0:	496e      	ldr	r1, [pc, #440]	; (8004fac <sim7600_commandProcessor+0x68c>)
 8004df2:	486f      	ldr	r0, [pc, #444]	; (8004fb0 <sim7600_commandProcessor+0x690>)
 8004df4:	f001 fc4b 	bl	800668e <appendStr>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	4a6b      	ldr	r2, [pc, #428]	; (8004fa8 <sim7600_commandProcessor+0x688>)
 8004dfc:	6013      	str	r3, [r2, #0]
			if(getUpdateStationListFlag()){//send the settings to the station.php
 8004dfe:	f7fe ffdf 	bl	8003dc0 <getUpdateStationListFlag>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d010      	beq.n	8004e2a <sim7600_commandProcessor+0x50a>

				pos = appendStr(cmdBuffer, STATION_URL,pos);
 8004e08:	4b67      	ldr	r3, [pc, #412]	; (8004fa8 <sim7600_commandProcessor+0x688>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	4969      	ldr	r1, [pc, #420]	; (8004fb4 <sim7600_commandProcessor+0x694>)
 8004e10:	4867      	ldr	r0, [pc, #412]	; (8004fb0 <sim7600_commandProcessor+0x690>)
 8004e12:	f001 fc3c 	bl	800668e <appendStr>
 8004e16:	4603      	mov	r3, r0
 8004e18:	4a63      	ldr	r2, [pc, #396]	; (8004fa8 <sim7600_commandProcessor+0x688>)
 8004e1a:	6013      	str	r3, [r2, #0]
				setUpdateStationListFlag(0);
 8004e1c:	2000      	movs	r0, #0
 8004e1e:	f7fe ffdb 	bl	8003dd8 <setUpdateStationListFlag>
				sendMeasureFlag = 0;
 8004e22:	4b65      	ldr	r3, [pc, #404]	; (8004fb8 <sim7600_commandProcessor+0x698>)
 8004e24:	2200      	movs	r2, #0
 8004e26:	701a      	strb	r2, [r3, #0]
 8004e28:	e00f      	b.n	8004e4a <sim7600_commandProcessor+0x52a>
//				pos = appendStr(cmdBuffer, getSettings()->URL,pos);
//				sendParamsToUpFlag = 2;//we are done, and do not need to do it again until it equals 1
//				sendMeasureFlag = 0;
//			}
			else{//send the currently loaded measure to the up.php
				pos = appendStr(cmdBuffer, getSettings()->URL,pos);
 8004e2a:	f7fe ffbf 	bl	8003dac <getSettings>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	3316      	adds	r3, #22
 8004e32:	4a5d      	ldr	r2, [pc, #372]	; (8004fa8 <sim7600_commandProcessor+0x688>)
 8004e34:	6812      	ldr	r2, [r2, #0]
 8004e36:	4619      	mov	r1, r3
 8004e38:	485d      	ldr	r0, [pc, #372]	; (8004fb0 <sim7600_commandProcessor+0x690>)
 8004e3a:	f001 fc28 	bl	800668e <appendStr>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	4a59      	ldr	r2, [pc, #356]	; (8004fa8 <sim7600_commandProcessor+0x688>)
 8004e42:	6013      	str	r3, [r2, #0]
				sendMeasureFlag = 1;
 8004e44:	4b5c      	ldr	r3, [pc, #368]	; (8004fb8 <sim7600_commandProcessor+0x698>)
 8004e46:	2201      	movs	r2, #1
 8004e48:	701a      	strb	r2, [r3, #0]

			}

			pos = appendStr(cmdBuffer, urlParamBuffer,pos);
 8004e4a:	4b57      	ldr	r3, [pc, #348]	; (8004fa8 <sim7600_commandProcessor+0x688>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	461a      	mov	r2, r3
 8004e50:	494a      	ldr	r1, [pc, #296]	; (8004f7c <sim7600_commandProcessor+0x65c>)
 8004e52:	4857      	ldr	r0, [pc, #348]	; (8004fb0 <sim7600_commandProcessor+0x690>)
 8004e54:	f001 fc1b 	bl	800668e <appendStr>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	4a53      	ldr	r2, [pc, #332]	; (8004fa8 <sim7600_commandProcessor+0x688>)
 8004e5c:	6013      	str	r3, [r2, #0]
			pos = appendStr(cmdBuffer, "\"\r\n",pos);
 8004e5e:	4b52      	ldr	r3, [pc, #328]	; (8004fa8 <sim7600_commandProcessor+0x688>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	461a      	mov	r2, r3
 8004e64:	4955      	ldr	r1, [pc, #340]	; (8004fbc <sim7600_commandProcessor+0x69c>)
 8004e66:	4852      	ldr	r0, [pc, #328]	; (8004fb0 <sim7600_commandProcessor+0x690>)
 8004e68:	f001 fc11 	bl	800668e <appendStr>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	4a4e      	ldr	r2, [pc, #312]	; (8004fa8 <sim7600_commandProcessor+0x688>)
 8004e70:	6013      	str	r3, [r2, #0]
//			hasURLParams=0;



			sim7600_command_pause_wait(cmdBuffer, 1000, "OK", CMD_HTTP_ACTION, CMD_ERR,10);
 8004e72:	230a      	movs	r3, #10
 8004e74:	9301      	str	r3, [sp, #4]
 8004e76:	2306      	movs	r3, #6
 8004e78:	9300      	str	r3, [sp, #0]
 8004e7a:	2312      	movs	r3, #18
 8004e7c:	4a38      	ldr	r2, [pc, #224]	; (8004f60 <sim7600_commandProcessor+0x640>)
 8004e7e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004e82:	484b      	ldr	r0, [pc, #300]	; (8004fb0 <sim7600_commandProcessor+0x690>)
 8004e84:	f000 f9c2 	bl	800520c <sim7600_command_pause_wait>


			break;
 8004e88:	e18c      	b.n	80051a4 <sim7600_commandProcessor+0x884>
//			sim7600_command_pause_wait("AT+IPADDR\r\n", 1000, "OK", CMD_NEXT_MEASUREMENT, CMD_ERR,10);
//			break;

		case CMD_HTTP_ACTION:

			httpDataLen = 0;
 8004e8a:	4b4d      	ldr	r3, [pc, #308]	; (8004fc0 <sim7600_commandProcessor+0x6a0>)
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	601a      	str	r2, [r3, #0]
			httpStatusCode = 0;
 8004e90:	4b4c      	ldr	r3, [pc, #304]	; (8004fc4 <sim7600_commandProcessor+0x6a4>)
 8004e92:	2200      	movs	r2, #0
 8004e94:	601a      	str	r2, [r3, #0]
			errorMonitorFlag = 0;
 8004e96:	4b4c      	ldr	r3, [pc, #304]	; (8004fc8 <sim7600_commandProcessor+0x6a8>)
 8004e98:	2200      	movs	r2, #0
 8004e9a:	701a      	strb	r2, [r3, #0]
			sim7600_command_wait("AT+HTTPACTION=0\r\n", 120000, "OK", CMD_HTTP_ACTION_WAIT, CMD_ERR);
 8004e9c:	2306      	movs	r3, #6
 8004e9e:	9300      	str	r3, [sp, #0]
 8004ea0:	2313      	movs	r3, #19
 8004ea2:	4a2f      	ldr	r2, [pc, #188]	; (8004f60 <sim7600_commandProcessor+0x640>)
 8004ea4:	4939      	ldr	r1, [pc, #228]	; (8004f8c <sim7600_commandProcessor+0x66c>)
 8004ea6:	4849      	ldr	r0, [pc, #292]	; (8004fcc <sim7600_commandProcessor+0x6ac>)
 8004ea8:	f000 f9ce 	bl	8005248 <sim7600_command_wait>
			break;
 8004eac:	e17a      	b.n	80051a4 <sim7600_commandProcessor+0x884>

		case CMD_HTTP_ACTION_WAIT:
			if(httpStatusCode == 200 && httpDataLen > 0){
 8004eae:	4b45      	ldr	r3, [pc, #276]	; (8004fc4 <sim7600_commandProcessor+0x6a4>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2bc8      	cmp	r3, #200	; 0xc8
 8004eb4:	d108      	bne.n	8004ec8 <sim7600_commandProcessor+0x5a8>
 8004eb6:	4b42      	ldr	r3, [pc, #264]	; (8004fc0 <sim7600_commandProcessor+0x6a0>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d004      	beq.n	8004ec8 <sim7600_commandProcessor+0x5a8>
				pauseCommmandSate(CMD_HTTP_READ, 10);
 8004ebe:	210a      	movs	r1, #10
 8004ec0:	2014      	movs	r0, #20
 8004ec2:	f000 fc33 	bl	800572c <pauseCommmandSate>
			else if(timer5_ms_get() > 110000){
				Uart_SendString("Error in HTTP Action - No server response after 110 seconds - Restart SIM7600\r\n", pc_uart);
				pauseCommmandSate(CMD_ERR, 1000);
			}

			break;
 8004ec6:	e16c      	b.n	80051a2 <sim7600_commandProcessor+0x882>
			else if(httpStatusCode > 0){
 8004ec8:	4b3e      	ldr	r3, [pc, #248]	; (8004fc4 <sim7600_commandProcessor+0x6a4>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d009      	beq.n	8004ee4 <sim7600_commandProcessor+0x5c4>
				Uart_SendString("HTTP Status Code Not 200 - Restart SIM7600\r\n", pc_uart);
 8004ed0:	4921      	ldr	r1, [pc, #132]	; (8004f58 <sim7600_commandProcessor+0x638>)
 8004ed2:	483f      	ldr	r0, [pc, #252]	; (8004fd0 <sim7600_commandProcessor+0x6b0>)
 8004ed4:	f7fc fd58 	bl	8001988 <Uart_SendString>
				pauseCommmandSate(CMD_ERR, 1000);
 8004ed8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004edc:	2006      	movs	r0, #6
 8004ede:	f000 fc25 	bl	800572c <pauseCommmandSate>
			break;
 8004ee2:	e15e      	b.n	80051a2 <sim7600_commandProcessor+0x882>
			else if(errorMonitorFlag){
 8004ee4:	4b38      	ldr	r3, [pc, #224]	; (8004fc8 <sim7600_commandProcessor+0x6a8>)
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d00c      	beq.n	8004f06 <sim7600_commandProcessor+0x5e6>
				Uart_SendString("Error in HTTP Action - Perhaps invalid URL - Restart SIM7600\r\n", pc_uart);
 8004eec:	491a      	ldr	r1, [pc, #104]	; (8004f58 <sim7600_commandProcessor+0x638>)
 8004eee:	4839      	ldr	r0, [pc, #228]	; (8004fd4 <sim7600_commandProcessor+0x6b4>)
 8004ef0:	f7fc fd4a 	bl	8001988 <Uart_SendString>
				pauseCommmandSate(CMD_ERR, 1000);
 8004ef4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004ef8:	2006      	movs	r0, #6
 8004efa:	f000 fc17 	bl	800572c <pauseCommmandSate>
				errorMonitorFlag = 0;
 8004efe:	4b32      	ldr	r3, [pc, #200]	; (8004fc8 <sim7600_commandProcessor+0x6a8>)
 8004f00:	2200      	movs	r2, #0
 8004f02:	701a      	strb	r2, [r3, #0]
			break;
 8004f04:	e14d      	b.n	80051a2 <sim7600_commandProcessor+0x882>
			else if(timer5_ms_get() > 110000){
 8004f06:	f7fe f847 	bl	8002f98 <timer5_ms_get>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	4a32      	ldr	r2, [pc, #200]	; (8004fd8 <sim7600_commandProcessor+0x6b8>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	f240 8147 	bls.w	80051a2 <sim7600_commandProcessor+0x882>
				Uart_SendString("Error in HTTP Action - No server response after 110 seconds - Restart SIM7600\r\n", pc_uart);
 8004f14:	4910      	ldr	r1, [pc, #64]	; (8004f58 <sim7600_commandProcessor+0x638>)
 8004f16:	4831      	ldr	r0, [pc, #196]	; (8004fdc <sim7600_commandProcessor+0x6bc>)
 8004f18:	f7fc fd36 	bl	8001988 <Uart_SendString>
				pauseCommmandSate(CMD_ERR, 1000);
 8004f1c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004f20:	2006      	movs	r0, #6
 8004f22:	f000 fc03 	bl	800572c <pauseCommmandSate>
			break;
 8004f26:	e13c      	b.n	80051a2 <sim7600_commandProcessor+0x882>

		case CMD_HTTP_READ:

			sprintf(pbuffer, "AT+HTTPREAD=0,%u\r\n",httpDataLen);
 8004f28:	4b25      	ldr	r3, [pc, #148]	; (8004fc0 <sim7600_commandProcessor+0x6a0>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	492c      	ldr	r1, [pc, #176]	; (8004fe0 <sim7600_commandProcessor+0x6c0>)
 8004f30:	4819      	ldr	r0, [pc, #100]	; (8004f98 <sim7600_commandProcessor+0x678>)
 8004f32:	f00c fb5b 	bl	80115ec <siprintf>
			httpReadSuccessFlag = 0;
 8004f36:	4b2b      	ldr	r3, [pc, #172]	; (8004fe4 <sim7600_commandProcessor+0x6c4>)
 8004f38:	2200      	movs	r2, #0
 8004f3a:	701a      	strb	r2, [r3, #0]
			httpReadWaitCount = 0;
 8004f3c:	4b2a      	ldr	r3, [pc, #168]	; (8004fe8 <sim7600_commandProcessor+0x6c8>)
 8004f3e:	2200      	movs	r2, #0
 8004f40:	701a      	strb	r2, [r3, #0]
			sim7600_command_wait(pbuffer, 120000, "OK", CMD_HTTP_READ_WAIT, CMD_ERR);
 8004f42:	2306      	movs	r3, #6
 8004f44:	9300      	str	r3, [sp, #0]
 8004f46:	231f      	movs	r3, #31
 8004f48:	4a05      	ldr	r2, [pc, #20]	; (8004f60 <sim7600_commandProcessor+0x640>)
 8004f4a:	4910      	ldr	r1, [pc, #64]	; (8004f8c <sim7600_commandProcessor+0x66c>)
 8004f4c:	4812      	ldr	r0, [pc, #72]	; (8004f98 <sim7600_commandProcessor+0x678>)
 8004f4e:	f000 f97b 	bl	8005248 <sim7600_command_wait>


			break;
 8004f52:	e127      	b.n	80051a4 <sim7600_commandProcessor+0x884>
 8004f54:	200078e0 	.word	0x200078e0
 8004f58:	20004094 	.word	0x20004094
 8004f5c:	0801824c 	.word	0x0801824c
 8004f60:	08018084 	.word	0x08018084
 8004f64:	0801825c 	.word	0x0801825c
 8004f68:	08018268 	.word	0x08018268
 8004f6c:	08018274 	.word	0x08018274
 8004f70:	08018280 	.word	0x08018280
 8004f74:	08018290 	.word	0x08018290
 8004f78:	200040e9 	.word	0x200040e9
 8004f7c:	200077bc 	.word	0x200077bc
 8004f80:	080182a0 	.word	0x080182a0
 8004f84:	080182c0 	.word	0x080182c0
 8004f88:	080182d0 	.word	0x080182d0
 8004f8c:	0001d4c0 	.word	0x0001d4c0
 8004f90:	080182f4 	.word	0x080182f4
 8004f94:	08018338 	.word	0x08018338
 8004f98:	200078e4 	.word	0x200078e4
 8004f9c:	20007888 	.word	0x20007888
 8004fa0:	200078de 	.word	0x200078de
 8004fa4:	200078cc 	.word	0x200078cc
 8004fa8:	200076f0 	.word	0x200076f0
 8004fac:	08018360 	.word	0x08018360
 8004fb0:	200076f4 	.word	0x200076f4
 8004fb4:	0801837c 	.word	0x0801837c
 8004fb8:	20007948 	.word	0x20007948
 8004fbc:	080183a0 	.word	0x080183a0
 8004fc0:	200078d8 	.word	0x200078d8
 8004fc4:	200078d4 	.word	0x200078d4
 8004fc8:	200078dc 	.word	0x200078dc
 8004fcc:	080183a4 	.word	0x080183a4
 8004fd0:	080183b8 	.word	0x080183b8
 8004fd4:	080183e8 	.word	0x080183e8
 8004fd8:	0001adb0 	.word	0x0001adb0
 8004fdc:	08018428 	.word	0x08018428
 8004fe0:	08018478 	.word	0x08018478
 8004fe4:	20000ab4 	.word	0x20000ab4
 8004fe8:	20000ab5 	.word	0x20000ab5

		case CMD_HTTP_READ_WAIT:
			if(httpReadSuccessFlag){
 8004fec:	4b6f      	ldr	r3, [pc, #444]	; (80051ac <sim7600_commandProcessor+0x88c>)
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d028      	beq.n	8005046 <sim7600_commandProcessor+0x726>
				Uart_SendString("HTTPRead Success\r\n", pc_uart);
 8004ff4:	496e      	ldr	r1, [pc, #440]	; (80051b0 <sim7600_commandProcessor+0x890>)
 8004ff6:	486f      	ldr	r0, [pc, #444]	; (80051b4 <sim7600_commandProcessor+0x894>)
 8004ff8:	f7fc fcc6 	bl	8001988 <Uart_SendString>

				pause = 2250;//slow down unless we confirm sent
 8004ffc:	4b6e      	ldr	r3, [pc, #440]	; (80051b8 <sim7600_commandProcessor+0x898>)
 8004ffe:	f640 02ca 	movw	r2, #2250	; 0x8ca
 8005002:	801a      	strh	r2, [r3, #0]
				if(sendMeasureFlag){
 8005004:	4b6d      	ldr	r3, [pc, #436]	; (80051bc <sim7600_commandProcessor+0x89c>)
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00d      	beq.n	8005028 <sim7600_commandProcessor+0x708>
					if(confirmSent(returnIndex)){
 800500c:	4b6c      	ldr	r3, [pc, #432]	; (80051c0 <sim7600_commandProcessor+0x8a0>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4618      	mov	r0, r3
 8005012:	f7fe f9c5 	bl	80033a0 <confirmSent>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d002      	beq.n	8005022 <sim7600_commandProcessor+0x702>
//						if(sendParamsToUpFlag == 0){//if it = 0, and we have sent a measure successfully, the schedule a params send
//							sendParamsToUpFlag = 1;
//						}
						pause = 10;
 800501c:	4b66      	ldr	r3, [pc, #408]	; (80051b8 <sim7600_commandProcessor+0x898>)
 800501e:	220a      	movs	r2, #10
 8005020:	801a      	strh	r2, [r3, #0]

					}
					sendMeasureFlag = 0;
 8005022:	4b66      	ldr	r3, [pc, #408]	; (80051bc <sim7600_commandProcessor+0x89c>)
 8005024:	2200      	movs	r2, #0
 8005026:	701a      	strb	r2, [r3, #0]

				}


				if(numMeasurementsToSend()){
 8005028:	f7fe f8e4 	bl	80031f4 <numMeasurementsToSend>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d004      	beq.n	800503c <sim7600_commandProcessor+0x71c>
					pauseCommmandSate(CMD_NEXT_MEASUREMENT, 10);
 8005032:	210a      	movs	r1, #10
 8005034:	2020      	movs	r0, #32
 8005036:	f000 fb79 	bl	800572c <pauseCommmandSate>
					pauseCommmandSate(CMD_HTTP_READ_WAIT, 10);
				}

			}

			break;
 800503a:	e0b3      	b.n	80051a4 <sim7600_commandProcessor+0x884>
					pauseCommmandSate(CMD_HTTP_TERM, 10);
 800503c:	210a      	movs	r1, #10
 800503e:	2015      	movs	r0, #21
 8005040:	f000 fb74 	bl	800572c <pauseCommmandSate>
			break;
 8005044:	e0ae      	b.n	80051a4 <sim7600_commandProcessor+0x884>
				httpReadWaitCount++;
 8005046:	4b5f      	ldr	r3, [pc, #380]	; (80051c4 <sim7600_commandProcessor+0x8a4>)
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	3301      	adds	r3, #1
 800504c:	b2da      	uxtb	r2, r3
 800504e:	4b5d      	ldr	r3, [pc, #372]	; (80051c4 <sim7600_commandProcessor+0x8a4>)
 8005050:	701a      	strb	r2, [r3, #0]
				if(httpReadWaitCount > 25){
 8005052:	4b5c      	ldr	r3, [pc, #368]	; (80051c4 <sim7600_commandProcessor+0x8a4>)
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	2b19      	cmp	r3, #25
 8005058:	d908      	bls.n	800506c <sim7600_commandProcessor+0x74c>
					Uart_SendString("HTTPRead Failure\r\n", pc_uart);
 800505a:	4955      	ldr	r1, [pc, #340]	; (80051b0 <sim7600_commandProcessor+0x890>)
 800505c:	485a      	ldr	r0, [pc, #360]	; (80051c8 <sim7600_commandProcessor+0x8a8>)
 800505e:	f7fc fc93 	bl	8001988 <Uart_SendString>
					pauseCommmandSate(CMD_ERR, 10);
 8005062:	210a      	movs	r1, #10
 8005064:	2006      	movs	r0, #6
 8005066:	f000 fb61 	bl	800572c <pauseCommmandSate>
			break;
 800506a:	e09b      	b.n	80051a4 <sim7600_commandProcessor+0x884>
					pauseCommmandSate(CMD_HTTP_READ_WAIT, 10);
 800506c:	210a      	movs	r1, #10
 800506e:	201f      	movs	r0, #31
 8005070:	f000 fb5c 	bl	800572c <pauseCommmandSate>
			break;
 8005074:	e096      	b.n	80051a4 <sim7600_commandProcessor+0x884>
		case CMD_HTTP_TERM:



//			pauseCommmandSate(CMD_CMGR, pause);
			sim7600_command_pause_wait("AT+HTTPTERM\r\n", 1000, "OK", CMD_CMGR, CMD_ERR,pause);
 8005076:	4b50      	ldr	r3, [pc, #320]	; (80051b8 <sim7600_commandProcessor+0x898>)
 8005078:	881b      	ldrh	r3, [r3, #0]
 800507a:	9301      	str	r3, [sp, #4]
 800507c:	2306      	movs	r3, #6
 800507e:	9300      	str	r3, [sp, #0]
 8005080:	2318      	movs	r3, #24
 8005082:	4a52      	ldr	r2, [pc, #328]	; (80051cc <sim7600_commandProcessor+0x8ac>)
 8005084:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005088:	4851      	ldr	r0, [pc, #324]	; (80051d0 <sim7600_commandProcessor+0x8b0>)
 800508a:	f000 f8bf 	bl	800520c <sim7600_command_pause_wait>

			break;
 800508e:	e089      	b.n	80051a4 <sim7600_commandProcessor+0x884>



		case CMD_CMGR:

			sprintf(pbuffer, "HTTP Time = %lu ms\r\n",timer5_ms_get());
 8005090:	f7fd ff82 	bl	8002f98 <timer5_ms_get>
 8005094:	4603      	mov	r3, r0
 8005096:	461a      	mov	r2, r3
 8005098:	494e      	ldr	r1, [pc, #312]	; (80051d4 <sim7600_commandProcessor+0x8b4>)
 800509a:	484f      	ldr	r0, [pc, #316]	; (80051d8 <sim7600_commandProcessor+0x8b8>)
 800509c:	f00c faa6 	bl	80115ec <siprintf>
			Uart_SendString(pbuffer, pc_uart);
 80050a0:	4943      	ldr	r1, [pc, #268]	; (80051b0 <sim7600_commandProcessor+0x890>)
 80050a2:	484d      	ldr	r0, [pc, #308]	; (80051d8 <sim7600_commandProcessor+0x8b8>)
 80050a4:	f7fc fc70 	bl	8001988 <Uart_SendString>

			timer5_ms_restart();//start http timer again, so we can time out and come back here if needed from httpinit
 80050a8:	f7fd ff66 	bl	8002f78 <timer5_ms_restart>

			sim7600_command_pause_wait("AT+CMGL=\"ALL\"\r\n", 1000, "OK", CMD_CMGD, CMD_ERR,100);
 80050ac:	2364      	movs	r3, #100	; 0x64
 80050ae:	9301      	str	r3, [sp, #4]
 80050b0:	2306      	movs	r3, #6
 80050b2:	9300      	str	r3, [sp, #0]
 80050b4:	2319      	movs	r3, #25
 80050b6:	4a45      	ldr	r2, [pc, #276]	; (80051cc <sim7600_commandProcessor+0x8ac>)
 80050b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80050bc:	4847      	ldr	r0, [pc, #284]	; (80051dc <sim7600_commandProcessor+0x8bc>)
 80050be:	f000 f8a5 	bl	800520c <sim7600_command_pause_wait>
			break;
 80050c2:	e06f      	b.n	80051a4 <sim7600_commandProcessor+0x884>

		case CMD_CMGD:
			sim7600_command_pause_wait("AT+CMGD=,3\r\n", 1000, "OK", CMD_CSQ2, CMD_ERR,100);
 80050c4:	2364      	movs	r3, #100	; 0x64
 80050c6:	9301      	str	r3, [sp, #4]
 80050c8:	2306      	movs	r3, #6
 80050ca:	9300      	str	r3, [sp, #0]
 80050cc:	2316      	movs	r3, #22
 80050ce:	4a3f      	ldr	r2, [pc, #252]	; (80051cc <sim7600_commandProcessor+0x8ac>)
 80050d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80050d4:	4842      	ldr	r0, [pc, #264]	; (80051e0 <sim7600_commandProcessor+0x8c0>)
 80050d6:	f000 f899 	bl	800520c <sim7600_command_pause_wait>
			csqCheckCount = 0;
 80050da:	4b42      	ldr	r3, [pc, #264]	; (80051e4 <sim7600_commandProcessor+0x8c4>)
 80050dc:	2200      	movs	r2, #0
 80050de:	701a      	strb	r2, [r3, #0]
			break;
 80050e0:	e060      	b.n	80051a4 <sim7600_commandProcessor+0x884>

		case CMD_CSQ2:
			if(csqCheckCount > CSQ_CHECK_COUNTS){
 80050e2:	4b40      	ldr	r3, [pc, #256]	; (80051e4 <sim7600_commandProcessor+0x8c4>)
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	2b3c      	cmp	r3, #60	; 0x3c
 80050e8:	d909      	bls.n	80050fe <sim7600_commandProcessor+0x7de>
				Uart_SendString("CSQ2 Check Counts exceeded, try to restart modem.\r\n", pc_uart);
 80050ea:	4931      	ldr	r1, [pc, #196]	; (80051b0 <sim7600_commandProcessor+0x890>)
 80050ec:	483e      	ldr	r0, [pc, #248]	; (80051e8 <sim7600_commandProcessor+0x8c8>)
 80050ee:	f7fc fc4b 	bl	8001988 <Uart_SendString>
				pauseCommmandSate(CMD_ERR, 2000);
 80050f2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80050f6:	2006      	movs	r0, #6
 80050f8:	f000 fb18 	bl	800572c <pauseCommmandSate>
			}
			else{
				sim7600_command_pause_wait("AT+CSQ\r\n", 1000, "OK\r\n", CMD_CSQ_CHECK2, CMD_ERR,100);
				csqCheckCount++;
			}
			break;
 80050fc:	e052      	b.n	80051a4 <sim7600_commandProcessor+0x884>
				sim7600_command_pause_wait("AT+CSQ\r\n", 1000, "OK\r\n", CMD_CSQ_CHECK2, CMD_ERR,100);
 80050fe:	2364      	movs	r3, #100	; 0x64
 8005100:	9301      	str	r3, [sp, #4]
 8005102:	2306      	movs	r3, #6
 8005104:	9300      	str	r3, [sp, #0]
 8005106:	2317      	movs	r3, #23
 8005108:	4a38      	ldr	r2, [pc, #224]	; (80051ec <sim7600_commandProcessor+0x8cc>)
 800510a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800510e:	4838      	ldr	r0, [pc, #224]	; (80051f0 <sim7600_commandProcessor+0x8d0>)
 8005110:	f000 f87c 	bl	800520c <sim7600_command_pause_wait>
				csqCheckCount++;
 8005114:	4b33      	ldr	r3, [pc, #204]	; (80051e4 <sim7600_commandProcessor+0x8c4>)
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	3301      	adds	r3, #1
 800511a:	b2da      	uxtb	r2, r3
 800511c:	4b31      	ldr	r3, [pc, #196]	; (80051e4 <sim7600_commandProcessor+0x8c4>)
 800511e:	701a      	strb	r2, [r3, #0]
			break;
 8005120:	e040      	b.n	80051a4 <sim7600_commandProcessor+0x884>

		case CMD_CSQ_CHECK2:
			if(csq == 99 || csq == 199){
 8005122:	4b34      	ldr	r3, [pc, #208]	; (80051f4 <sim7600_commandProcessor+0x8d4>)
 8005124:	881b      	ldrh	r3, [r3, #0]
 8005126:	2b63      	cmp	r3, #99	; 0x63
 8005128:	d003      	beq.n	8005132 <sim7600_commandProcessor+0x812>
 800512a:	4b32      	ldr	r3, [pc, #200]	; (80051f4 <sim7600_commandProcessor+0x8d4>)
 800512c:	881b      	ldrh	r3, [r3, #0]
 800512e:	2bc7      	cmp	r3, #199	; 0xc7
 8005130:	d109      	bne.n	8005146 <sim7600_commandProcessor+0x826>
				Uart_SendString("Signal Strength not known or not detectable (CSQ2 equals 99/199). Check 4G antenna\r\n", pc_uart);
 8005132:	491f      	ldr	r1, [pc, #124]	; (80051b0 <sim7600_commandProcessor+0x890>)
 8005134:	4830      	ldr	r0, [pc, #192]	; (80051f8 <sim7600_commandProcessor+0x8d8>)
 8005136:	f7fc fc27 	bl	8001988 <Uart_SendString>
				pauseCommmandSate(CMD_CSQ2, 2000);
 800513a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800513e:	2016      	movs	r0, #22
 8005140:	f000 faf4 	bl	800572c <pauseCommmandSate>
			else{
				pauseCommmandSate(CMD_HOLD_CHECK, 10);
				csqCheckCount = 0;
			}

			break;
 8005144:	e02e      	b.n	80051a4 <sim7600_commandProcessor+0x884>
				pauseCommmandSate(CMD_HOLD_CHECK, 10);
 8005146:	210a      	movs	r1, #10
 8005148:	201d      	movs	r0, #29
 800514a:	f000 faef 	bl	800572c <pauseCommmandSate>
				csqCheckCount = 0;
 800514e:	4b25      	ldr	r3, [pc, #148]	; (80051e4 <sim7600_commandProcessor+0x8c4>)
 8005150:	2200      	movs	r2, #0
 8005152:	701a      	strb	r2, [r3, #0]
			break;
 8005154:	e026      	b.n	80051a4 <sim7600_commandProcessor+0x884>


		case CMD_ERR:
			Uart_SendString("Command not responded to successfully. Switch to Power Error\r\n", pc_uart);
 8005156:	4916      	ldr	r1, [pc, #88]	; (80051b0 <sim7600_commandProcessor+0x890>)
 8005158:	4828      	ldr	r0, [pc, #160]	; (80051fc <sim7600_commandProcessor+0x8dc>)
 800515a:	f7fc fc15 	bl	8001988 <Uart_SendString>
			powerState = POWER_ERR;
 800515e:	4b28      	ldr	r3, [pc, #160]	; (8005200 <sim7600_commandProcessor+0x8e0>)
 8005160:	2205      	movs	r2, #5
 8005162:	701a      	strb	r2, [r3, #0]
			break;
 8005164:	e01e      	b.n	80051a4 <sim7600_commandProcessor+0x884>

		case CMD_HOLD_CHECK:
			if(hold){
 8005166:	4b27      	ldr	r3, [pc, #156]	; (8005204 <sim7600_commandProcessor+0x8e4>)
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d009      	beq.n	8005182 <sim7600_commandProcessor+0x862>
				Uart_SendString("Hold\r\n", pc_uart);
 800516e:	4910      	ldr	r1, [pc, #64]	; (80051b0 <sim7600_commandProcessor+0x890>)
 8005170:	4825      	ldr	r0, [pc, #148]	; (8005208 <sim7600_commandProcessor+0x8e8>)
 8005172:	f7fc fc09 	bl	8001988 <Uart_SendString>
				pauseCommmandSate(CMD_HOLD_CYCLE, 5000);
 8005176:	f241 3188 	movw	r1, #5000	; 0x1388
 800517a:	201e      	movs	r0, #30
 800517c:	f000 fad6 	bl	800572c <pauseCommmandSate>
			else{
				pauseCommmandSate(CMD_HTTP_INIT, 10);

			}

			break;
 8005180:	e010      	b.n	80051a4 <sim7600_commandProcessor+0x884>
				pauseCommmandSate(CMD_HTTP_INIT, 10);
 8005182:	210a      	movs	r1, #10
 8005184:	2010      	movs	r0, #16
 8005186:	f000 fad1 	bl	800572c <pauseCommmandSate>
			break;
 800518a:	e00b      	b.n	80051a4 <sim7600_commandProcessor+0x884>

		case CMD_HOLD_CYCLE:
			pauseCommmandSate(CMD_HOLD_CHECK, 10);
 800518c:	210a      	movs	r1, #10
 800518e:	201d      	movs	r0, #29
 8005190:	f000 facc 	bl	800572c <pauseCommmandSate>


			break;
 8005194:	e006      	b.n	80051a4 <sim7600_commandProcessor+0x884>
			break;
 8005196:	bf00      	nop
 8005198:	e004      	b.n	80051a4 <sim7600_commandProcessor+0x884>
			break;
 800519a:	bf00      	nop
 800519c:	e002      	b.n	80051a4 <sim7600_commandProcessor+0x884>
			break;
 800519e:	bf00      	nop
 80051a0:	e000      	b.n	80051a4 <sim7600_commandProcessor+0x884>
			break;
 80051a2:	bf00      	nop


	}

}
 80051a4:	bf00      	nop
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	20000ab4 	.word	0x20000ab4
 80051b0:	20004094 	.word	0x20004094
 80051b4:	0801848c 	.word	0x0801848c
 80051b8:	200072e0 	.word	0x200072e0
 80051bc:	20007948 	.word	0x20007948
 80051c0:	200078cc 	.word	0x200078cc
 80051c4:	20000ab5 	.word	0x20000ab5
 80051c8:	080184a0 	.word	0x080184a0
 80051cc:	08018084 	.word	0x08018084
 80051d0:	080184b4 	.word	0x080184b4
 80051d4:	080184c4 	.word	0x080184c4
 80051d8:	200078e4 	.word	0x200078e4
 80051dc:	080184dc 	.word	0x080184dc
 80051e0:	080184ec 	.word	0x080184ec
 80051e4:	200078e0 	.word	0x200078e0
 80051e8:	080184fc 	.word	0x080184fc
 80051ec:	080181e4 	.word	0x080181e4
 80051f0:	080181ec 	.word	0x080181ec
 80051f4:	200078de 	.word	0x200078de
 80051f8:	08018530 	.word	0x08018530
 80051fc:	08018588 	.word	0x08018588
 8005200:	20000aaf 	.word	0x20000aaf
 8005204:	200078d0 	.word	0x200078d0
 8005208:	080185c8 	.word	0x080185c8

0800520c <sim7600_command_pause_wait>:
//	sendParamsToUpFlag = 0; //reset to 0 so it will schedule params send to up after the first successful measure.
//}

//Sends the command, then if it is successful (i.e. correct response received, pauses for 'pause' before going to the successState.
//If the response is not received within timeout then proceeds to the timeout state immediately.
void sim7600_command_pause_wait(char * cmd, uint32_t timeout, const char * response, uint8_t successState, uint8_t timeoutState, uint16_t pause){
 800520c:	b580      	push	{r7, lr}
 800520e:	b086      	sub	sp, #24
 8005210:	af02      	add	r7, sp, #8
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
 8005218:	70fb      	strb	r3, [r7, #3]

	pauseTimeout = pause;
 800521a:	4a09      	ldr	r2, [pc, #36]	; (8005240 <sim7600_command_pause_wait+0x34>)
 800521c:	8bbb      	ldrh	r3, [r7, #28]
 800521e:	8013      	strh	r3, [r2, #0]
	pauseNextState = successState;
 8005220:	4a08      	ldr	r2, [pc, #32]	; (8005244 <sim7600_command_pause_wait+0x38>)
 8005222:	78fb      	ldrb	r3, [r7, #3]
 8005224:	7013      	strb	r3, [r2, #0]
	sim7600_command_wait(cmd, timeout, response, CMD_PAUSE, timeoutState);
 8005226:	7e3b      	ldrb	r3, [r7, #24]
 8005228:	9300      	str	r3, [sp, #0]
 800522a:	2307      	movs	r3, #7
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	68b9      	ldr	r1, [r7, #8]
 8005230:	68f8      	ldr	r0, [r7, #12]
 8005232:	f000 f809 	bl	8005248 <sim7600_command_wait>

}
 8005236:	bf00      	nop
 8005238:	3710      	adds	r7, #16
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	20000ab0 	.word	0x20000ab0
 8005244:	20007884 	.word	0x20007884

08005248 <sim7600_command_wait>:

//Sends the command, then if it is successful proceeds to the successState immediately.
//If the response is not received within timeout then proceeds to the timeoutState immediately.
void sim7600_command_wait(char * cmd, uint32_t timeout, const char * response, uint8_t successState, uint8_t timeoutState){
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	607a      	str	r2, [r7, #4]
 8005254:	70fb      	strb	r3, [r7, #3]

    wait.response = response;
 8005256:	4a11      	ldr	r2, [pc, #68]	; (800529c <sim7600_command_wait+0x54>)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6013      	str	r3, [r2, #0]
    wait.len = strlen(response);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f7fa ffc9 	bl	80001f4 <strlen>
 8005262:	4603      	mov	r3, r0
 8005264:	b2da      	uxtb	r2, r3
 8005266:	4b0d      	ldr	r3, [pc, #52]	; (800529c <sim7600_command_wait+0x54>)
 8005268:	715a      	strb	r2, [r3, #5]

    wait.waiting = 1;
 800526a:	4b0c      	ldr	r3, [pc, #48]	; (800529c <sim7600_command_wait+0x54>)
 800526c:	2201      	movs	r2, #1
 800526e:	741a      	strb	r2, [r3, #16]
    wait.nextState_success = successState;
 8005270:	4a0a      	ldr	r2, [pc, #40]	; (800529c <sim7600_command_wait+0x54>)
 8005272:	78fb      	ldrb	r3, [r7, #3]
 8005274:	7193      	strb	r3, [r2, #6]
    wait.nextState_timeout = timeoutState;
 8005276:	4a09      	ldr	r2, [pc, #36]	; (800529c <sim7600_command_wait+0x54>)
 8005278:	7e3b      	ldrb	r3, [r7, #24]
 800527a:	7213      	strb	r3, [r2, #8]
    wait.timeout = timeout;
 800527c:	4a07      	ldr	r2, [pc, #28]	; (800529c <sim7600_command_wait+0x54>)
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	60d3      	str	r3, [r2, #12]

    timer2_ms_restart();
 8005282:	f7fd fe41 	bl	8002f08 <timer2_ms_restart>
    Uart_SendString(cmd, device_uart);
 8005286:	4906      	ldr	r1, [pc, #24]	; (80052a0 <sim7600_command_wait+0x58>)
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	f7fc fb7d 	bl	8001988 <Uart_SendString>
//    Debug(cmd);

    setCommandState(CMD_WAIT);
 800528e:	2001      	movs	r0, #1
 8005290:	f000 fa3c 	bl	800570c <setCommandState>

}
 8005294:	bf00      	nop
 8005296:	3710      	adds	r7, #16
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}
 800529c:	200078b4 	.word	0x200078b4
 80052a0:	20003de8 	.word	0x20003de8

080052a4 <sim7600_processChar>:

void sim7600_processChar(char c){
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	4603      	mov	r3, r0
 80052ac:	71fb      	strb	r3, [r7, #7]
	lineBufferAdd(&lineBuffer, c);
 80052ae:	79fb      	ldrb	r3, [r7, #7]
 80052b0:	4619      	mov	r1, r3
 80052b2:	4814      	ldr	r0, [pc, #80]	; (8005304 <sim7600_processChar+0x60>)
 80052b4:	f000 f82a 	bl	800530c <lineBufferAdd>
	processLines();
 80052b8:	f000 f89e 	bl	80053f8 <processLines>

	if(wait.waiting){
 80052bc:	4b12      	ldr	r3, [pc, #72]	; (8005308 <sim7600_processChar+0x64>)
 80052be:	7c1b      	ldrb	r3, [r3, #16]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d01b      	beq.n	80052fc <sim7600_processChar+0x58>
		if(c == wait.response[wait.index]){
 80052c4:	4b10      	ldr	r3, [pc, #64]	; (8005308 <sim7600_processChar+0x64>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a0f      	ldr	r2, [pc, #60]	; (8005308 <sim7600_processChar+0x64>)
 80052ca:	7912      	ldrb	r2, [r2, #4]
 80052cc:	4413      	add	r3, r2
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	79fa      	ldrb	r2, [r7, #7]
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d10f      	bne.n	80052f6 <sim7600_processChar+0x52>
			wait.index++;
 80052d6:	4b0c      	ldr	r3, [pc, #48]	; (8005308 <sim7600_processChar+0x64>)
 80052d8:	791b      	ldrb	r3, [r3, #4]
 80052da:	3301      	adds	r3, #1
 80052dc:	b2da      	uxtb	r2, r3
 80052de:	4b0a      	ldr	r3, [pc, #40]	; (8005308 <sim7600_processChar+0x64>)
 80052e0:	711a      	strb	r2, [r3, #4]
			if(wait.index == wait.len){
 80052e2:	4b09      	ldr	r3, [pc, #36]	; (8005308 <sim7600_processChar+0x64>)
 80052e4:	791a      	ldrb	r2, [r3, #4]
 80052e6:	4b08      	ldr	r3, [pc, #32]	; (8005308 <sim7600_processChar+0x64>)
 80052e8:	795b      	ldrb	r3, [r3, #5]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d106      	bne.n	80052fc <sim7600_processChar+0x58>
				wait.waiting = 0;
 80052ee:	4b06      	ldr	r3, [pc, #24]	; (8005308 <sim7600_processChar+0x64>)
 80052f0:	2200      	movs	r2, #0
 80052f2:	741a      	strb	r2, [r3, #16]
		else{
			wait.index = 0;
		}
	}

}
 80052f4:	e002      	b.n	80052fc <sim7600_processChar+0x58>
			wait.index = 0;
 80052f6:	4b04      	ldr	r3, [pc, #16]	; (8005308 <sim7600_processChar+0x64>)
 80052f8:	2200      	movs	r2, #0
 80052fa:	711a      	strb	r2, [r3, #4]
}
 80052fc:	bf00      	nop
 80052fe:	3708      	adds	r7, #8
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}
 8005304:	200072ec 	.word	0x200072ec
 8005308:	200078b4 	.word	0x200078b4

0800530c <lineBufferAdd>:





void lineBufferAdd(LineBuffer *uLineBuffer, char c){
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	460b      	mov	r3, r1
 8005316:	70fb      	strb	r3, [r7, #3]
	if(!(uLineBuffer->numLines && uLineBuffer->lineWriteIndex == uLineBuffer->lineReadIndex)){//buffer is not full (assuming that there is at least one end line in there)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800531e:	2b00      	cmp	r3, #0
 8005320:	d007      	beq.n	8005332 <lineBufferAdd+0x26>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f893 2401 	ldrb.w	r2, [r3, #1025]	; 0x401
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800532e:	429a      	cmp	r2, r3
 8005330:	d016      	beq.n	8005360 <lineBufferAdd+0x54>
		uLineBuffer->line[uLineBuffer->lineWriteIndex++] = c;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8005338:	1c5a      	adds	r2, r3, #1
 800533a:	b2d1      	uxtb	r1, r2
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	f882 1401 	strb.w	r1, [r2, #1025]	; 0x401
 8005342:	4619      	mov	r1, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	78fa      	ldrb	r2, [r7, #3]
 8005348:	545a      	strb	r2, [r3, r1]
		if (uLineBuffer->lineWriteIndex == LINE_BUFFER_DIM) {
			uLineBuffer->lineWriteIndex = 0;
		}
		if(c == '\n'){
 800534a:	78fb      	ldrb	r3, [r7, #3]
 800534c:	2b0a      	cmp	r3, #10
 800534e:	d107      	bne.n	8005360 <lineBufferAdd+0x54>
			uLineBuffer->numLines++;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8005356:	3301      	adds	r3, #1
 8005358:	b2da      	uxtb	r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
		}
	}
}
 8005360:	bf00      	nop
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <lineBufferNumLines>:

uint8_t lineBufferNumLines(LineBuffer *uLineBuffer){
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
	return uLineBuffer->numLines;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400

}
 800537a:	4618      	mov	r0, r3
 800537c:	370c      	adds	r7, #12
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr

08005386 <lineBufferGetLine>:

void lineBufferGetLine(LineBuffer *uLineBuffer, char * line){
 8005386:	b480      	push	{r7}
 8005388:	b085      	sub	sp, #20
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
 800538e:	6039      	str	r1, [r7, #0]
	if(uLineBuffer->numLines){
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8005396:	2b00      	cmp	r3, #0
 8005398:	d028      	beq.n	80053ec <lineBufferGetLine+0x66>

		char c = 0;
 800539a:	2300      	movs	r3, #0
 800539c:	73fb      	strb	r3, [r7, #15]
		int i = 0;
 800539e:	2300      	movs	r3, #0
 80053a0:	60bb      	str	r3, [r7, #8]
		while(c != '\n'){
 80053a2:	e013      	b.n	80053cc <lineBufferGetLine+0x46>
			c = uLineBuffer->line[uLineBuffer->lineReadIndex++];
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 80053aa:	1c5a      	adds	r2, r3, #1
 80053ac:	b2d1      	uxtb	r1, r2
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	f882 1402 	strb.w	r1, [r2, #1026]	; 0x402
 80053b4:	461a      	mov	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	5c9b      	ldrb	r3, [r3, r2]
 80053ba:	73fb      	strb	r3, [r7, #15]
			line[i] = c;
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	683a      	ldr	r2, [r7, #0]
 80053c0:	4413      	add	r3, r2
 80053c2:	7bfa      	ldrb	r2, [r7, #15]
 80053c4:	701a      	strb	r2, [r3, #0]
			i++;
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	3301      	adds	r3, #1
 80053ca:	60bb      	str	r3, [r7, #8]
		while(c != '\n'){
 80053cc:	7bfb      	ldrb	r3, [r7, #15]
 80053ce:	2b0a      	cmp	r3, #10
 80053d0:	d1e8      	bne.n	80053a4 <lineBufferGetLine+0x1e>
			if (uLineBuffer->lineReadIndex == LINE_BUFFER_DIM) {
				uLineBuffer->lineReadIndex = 0;
			}
		}

		uLineBuffer->numLines--;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 80053d8:	3b01      	subs	r3, #1
 80053da:	b2da      	uxtb	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
		line[i] = 0;//add eol char
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	683a      	ldr	r2, [r7, #0]
 80053e6:	4413      	add	r3, r2
 80053e8:	2200      	movs	r2, #0
 80053ea:	701a      	strb	r2, [r3, #0]
	}
}
 80053ec:	bf00      	nop
 80053ee:	3714      	adds	r7, #20
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <processLines>:



void processLines(void)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b082      	sub	sp, #8
 80053fc:	af00      	add	r7, sp, #0


    if(lineBufferNumLines(&lineBuffer)){//we have a line ready to read
 80053fe:	483f      	ldr	r0, [pc, #252]	; (80054fc <processLines+0x104>)
 8005400:	f7ff ffb4 	bl	800536c <lineBufferNumLines>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d074      	beq.n	80054f4 <processLines+0xfc>


       lineBufferGetLine(&lineBuffer, line);
 800540a:	493d      	ldr	r1, [pc, #244]	; (8005500 <processLines+0x108>)
 800540c:	483b      	ldr	r0, [pc, #236]	; (80054fc <processLines+0x104>)
 800540e:	f7ff ffba 	bl	8005386 <lineBufferGetLine>
//       Uart_SendString("LINE:", pc_uart);
//       Uart_SendString(line, pc_uart);
//       Uart_SendString("\r\n", pc_uart);

       if(cgsn_flag){
 8005412:	4b3c      	ldr	r3, [pc, #240]	; (8005504 <processLines+0x10c>)
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d03d      	beq.n	8005496 <processLines+0x9e>
    	   if(line[0] >= '0' && line [0] <= '9'){//first char is a number, assume this is the imei from cgsn
 800541a:	4b39      	ldr	r3, [pc, #228]	; (8005500 <processLines+0x108>)
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	2b2f      	cmp	r3, #47	; 0x2f
 8005420:	d939      	bls.n	8005496 <processLines+0x9e>
 8005422:	4b37      	ldr	r3, [pc, #220]	; (8005500 <processLines+0x108>)
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	2b39      	cmp	r3, #57	; 0x39
 8005428:	d835      	bhi.n	8005496 <processLines+0x9e>

    		   int i = 0;
 800542a:	2300      	movs	r3, #0
 800542c:	607b      	str	r3, [r7, #4]
    		   while(line[i] >= '0' && line [i] <= '9'){
 800542e:	e00d      	b.n	800544c <processLines+0x54>
    			   getSettings()->MEI[i] = line[i];
 8005430:	f7fe fcbc 	bl	8003dac <getSettings>
 8005434:	4602      	mov	r2, r0
 8005436:	4932      	ldr	r1, [pc, #200]	; (8005500 <processLines+0x108>)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	440b      	add	r3, r1
 800543c:	7819      	ldrb	r1, [r3, #0]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4413      	add	r3, r2
 8005442:	460a      	mov	r2, r1
 8005444:	701a      	strb	r2, [r3, #0]

    			   i++;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	3301      	adds	r3, #1
 800544a:	607b      	str	r3, [r7, #4]
    		   while(line[i] >= '0' && line [i] <= '9'){
 800544c:	4a2c      	ldr	r2, [pc, #176]	; (8005500 <processLines+0x108>)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4413      	add	r3, r2
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	2b2f      	cmp	r3, #47	; 0x2f
 8005456:	d905      	bls.n	8005464 <processLines+0x6c>
 8005458:	4a29      	ldr	r2, [pc, #164]	; (8005500 <processLines+0x108>)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4413      	add	r3, r2
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	2b39      	cmp	r3, #57	; 0x39
 8005462:	d9e5      	bls.n	8005430 <processLines+0x38>
    		   }
    		   getSettings()->MEI[i] = 0;//terminate with null char
 8005464:	f7fe fca2 	bl	8003dac <getSettings>
 8005468:	4602      	mov	r2, r0
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4413      	add	r3, r2
 800546e:	2200      	movs	r2, #0
 8005470:	701a      	strb	r2, [r3, #0]

    		   Uart_SendString("Updated IMEI: ", pc_uart);
 8005472:	4925      	ldr	r1, [pc, #148]	; (8005508 <processLines+0x110>)
 8005474:	4825      	ldr	r0, [pc, #148]	; (800550c <processLines+0x114>)
 8005476:	f7fc fa87 	bl	8001988 <Uart_SendString>
    		   Uart_SendString(getSettings()->MEI, pc_uart);
 800547a:	f7fe fc97 	bl	8003dac <getSettings>
 800547e:	4603      	mov	r3, r0
 8005480:	4921      	ldr	r1, [pc, #132]	; (8005508 <processLines+0x110>)
 8005482:	4618      	mov	r0, r3
 8005484:	f7fc fa80 	bl	8001988 <Uart_SendString>
    		   Uart_SendString("\r\n", pc_uart);
 8005488:	491f      	ldr	r1, [pc, #124]	; (8005508 <processLines+0x110>)
 800548a:	4821      	ldr	r0, [pc, #132]	; (8005510 <processLines+0x118>)
 800548c:	f7fc fa7c 	bl	8001988 <Uart_SendString>

    		   cgsn_flag = 0;
 8005490:	4b1c      	ldr	r3, [pc, #112]	; (8005504 <processLines+0x10c>)
 8005492:	2200      	movs	r2, #0
 8005494:	701a      	strb	r2, [r3, #0]
    	   }
       }

       if(line[0] == '+'){
 8005496:	4b1a      	ldr	r3, [pc, #104]	; (8005500 <processLines+0x108>)
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	2b2b      	cmp	r3, #43	; 0x2b
 800549c:	d103      	bne.n	80054a6 <processLines+0xae>
           URCProcessor(line);
 800549e:	4818      	ldr	r0, [pc, #96]	; (8005500 <processLines+0x108>)
 80054a0:	f000 f886 	bl	80055b0 <URCProcessor>

	   }


    }
}
 80054a4:	e026      	b.n	80054f4 <processLines+0xfc>
       else if(line[0] == '$') {
 80054a6:	4b16      	ldr	r3, [pc, #88]	; (8005500 <processLines+0x108>)
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	2b24      	cmp	r3, #36	; 0x24
 80054ac:	d103      	bne.n	80054b6 <processLines+0xbe>
    	   NMEAProcessor(line);
 80054ae:	4814      	ldr	r0, [pc, #80]	; (8005500 <processLines+0x108>)
 80054b0:	f000 f83c 	bl	800552c <NMEAProcessor>
}
 80054b4:	e01e      	b.n	80054f4 <processLines+0xfc>
       else if(!strncmp(line, "RDY", 3)) {
 80054b6:	2203      	movs	r2, #3
 80054b8:	4916      	ldr	r1, [pc, #88]	; (8005514 <processLines+0x11c>)
 80054ba:	4811      	ldr	r0, [pc, #68]	; (8005500 <processLines+0x108>)
 80054bc:	f00c f8b6 	bl	801162c <strncmp>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d107      	bne.n	80054d6 <processLines+0xde>
           readyState = STATE_OK;
 80054c6:	4b14      	ldr	r3, [pc, #80]	; (8005518 <processLines+0x120>)
 80054c8:	2202      	movs	r2, #2
 80054ca:	701a      	strb	r2, [r3, #0]
       	   Uart_SendString("SIM7600 Ready\r\n", pc_uart);
 80054cc:	490e      	ldr	r1, [pc, #56]	; (8005508 <processLines+0x110>)
 80054ce:	4813      	ldr	r0, [pc, #76]	; (800551c <processLines+0x124>)
 80054d0:	f7fc fa5a 	bl	8001988 <Uart_SendString>
}
 80054d4:	e00e      	b.n	80054f4 <processLines+0xfc>
       else if(!strncmp(line, "ERROR", 5)) {
 80054d6:	2205      	movs	r2, #5
 80054d8:	4911      	ldr	r1, [pc, #68]	; (8005520 <processLines+0x128>)
 80054da:	4809      	ldr	r0, [pc, #36]	; (8005500 <processLines+0x108>)
 80054dc:	f00c f8a6 	bl	801162c <strncmp>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d106      	bne.n	80054f4 <processLines+0xfc>
    	  Uart_SendString("SIM7600 ERROR\r\n", pc_uart);
 80054e6:	4908      	ldr	r1, [pc, #32]	; (8005508 <processLines+0x110>)
 80054e8:	480e      	ldr	r0, [pc, #56]	; (8005524 <processLines+0x12c>)
 80054ea:	f7fc fa4d 	bl	8001988 <Uart_SendString>
		  errorMonitorFlag = 1;
 80054ee:	4b0e      	ldr	r3, [pc, #56]	; (8005528 <processLines+0x130>)
 80054f0:	2201      	movs	r2, #1
 80054f2:	701a      	strb	r2, [r3, #0]
}
 80054f4:	bf00      	nop
 80054f6:	3708      	adds	r7, #8
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	200072ec 	.word	0x200072ec
 8005500:	20005d3c 	.word	0x20005d3c
 8005504:	200072e8 	.word	0x200072e8
 8005508:	20004094 	.word	0x20004094
 800550c:	080185d0 	.word	0x080185d0
 8005510:	080185e0 	.word	0x080185e0
 8005514:	080185e4 	.word	0x080185e4
 8005518:	20000aab 	.word	0x20000aab
 800551c:	080185e8 	.word	0x080185e8
 8005520:	080185f8 	.word	0x080185f8
 8005524:	08018600 	.word	0x08018600
 8005528:	200078dc 	.word	0x200078dc

0800552c <NMEAProcessor>:

void NMEAProcessor(char * line){
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
	if(!strncmp(line, "$FFWX,2", 7)){
 8005534:	2207      	movs	r2, #7
 8005536:	491a      	ldr	r1, [pc, #104]	; (80055a0 <NMEAProcessor+0x74>)
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f00c f877 	bl	801162c <strncmp>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d10a      	bne.n	800555a <NMEAProcessor+0x2e>
		//$FFWX,2,67,1607845207657
		//0123456789012345678901234
		returnIndex = util_atoi_n(line+8, 20);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	3308      	adds	r3, #8
 8005548:	2114      	movs	r1, #20
 800554a:	4618      	mov	r0, r3
 800554c:	f001 f848 	bl	80065e0 <util_atoi_n>
 8005550:	4603      	mov	r3, r0
 8005552:	461a      	mov	r2, r3
 8005554:	4b13      	ldr	r3, [pc, #76]	; (80055a4 <NMEAProcessor+0x78>)
 8005556:	601a      	str	r2, [r3, #0]
		//$FFWX,4,SID=setting
		//$FFWX,4,CLK=setting
		//0123456789012345678901234
		settingsLineProcessor(line+8,1,0);
	}
}
 8005558:	e01e      	b.n	8005598 <NMEAProcessor+0x6c>
	else if(!strncmp(line, "$FFWX,3", 7)){
 800555a:	2207      	movs	r2, #7
 800555c:	4912      	ldr	r1, [pc, #72]	; (80055a8 <NMEAProcessor+0x7c>)
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f00c f864 	bl	801162c <strncmp>
 8005564:	4603      	mov	r3, r0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d107      	bne.n	800557a <NMEAProcessor+0x4e>
		settingsLineProcessor(line+8,1,1);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	3308      	adds	r3, #8
 800556e:	2201      	movs	r2, #1
 8005570:	2101      	movs	r1, #1
 8005572:	4618      	mov	r0, r3
 8005574:	f7fe fc40 	bl	8003df8 <settingsLineProcessor>
}
 8005578:	e00e      	b.n	8005598 <NMEAProcessor+0x6c>
	else if(!strncmp(line, "$FFWX,4", 7)){
 800557a:	2207      	movs	r2, #7
 800557c:	490b      	ldr	r1, [pc, #44]	; (80055ac <NMEAProcessor+0x80>)
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f00c f854 	bl	801162c <strncmp>
 8005584:	4603      	mov	r3, r0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d106      	bne.n	8005598 <NMEAProcessor+0x6c>
		settingsLineProcessor(line+8,1,0);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	3308      	adds	r3, #8
 800558e:	2200      	movs	r2, #0
 8005590:	2101      	movs	r1, #1
 8005592:	4618      	mov	r0, r3
 8005594:	f7fe fc30 	bl	8003df8 <settingsLineProcessor>
}
 8005598:	bf00      	nop
 800559a:	3708      	adds	r7, #8
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	08018610 	.word	0x08018610
 80055a4:	200078cc 	.word	0x200078cc
 80055a8:	08018618 	.word	0x08018618
 80055ac:	08018620 	.word	0x08018620

080055b0 <URCProcessor>:



void URCProcessor(char * line){
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b082      	sub	sp, #8
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]



    if(!strncmp(line, "+CSQ:", 5)) {
 80055b8:	2205      	movs	r2, #5
 80055ba:	4932      	ldr	r1, [pc, #200]	; (8005684 <URCProcessor+0xd4>)
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f00c f835 	bl	801162c <strncmp>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d10a      	bne.n	80055de <URCProcessor+0x2e>
    	//+CSQ: 19,99
    	//012345678901

    	csq = util_atoi_n(line + 6 ,2);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	3306      	adds	r3, #6
 80055cc:	2102      	movs	r1, #2
 80055ce:	4618      	mov	r0, r3
 80055d0:	f001 f806 	bl	80065e0 <util_atoi_n>
 80055d4:	4603      	mov	r3, r0
 80055d6:	b29a      	uxth	r2, r3
 80055d8:	4b2b      	ldr	r3, [pc, #172]	; (8005688 <URCProcessor+0xd8>)
 80055da:	801a      	strh	r2, [r3, #0]

    else if(!strncmp(line, "+HTTPREAD:0", 11)) {
		httpReadSuccessFlag = 1;
	}

}
 80055dc:	e04e      	b.n	800567c <URCProcessor+0xcc>
    else if(!strncmp(line, "+CPIN: READY", 12)) {
 80055de:	220c      	movs	r2, #12
 80055e0:	492a      	ldr	r1, [pc, #168]	; (800568c <URCProcessor+0xdc>)
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f00c f822 	bl	801162c <strncmp>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d103      	bne.n	80055f6 <URCProcessor+0x46>
    	cpinState = STATE_OK;
 80055ee:	4b28      	ldr	r3, [pc, #160]	; (8005690 <URCProcessor+0xe0>)
 80055f0:	2202      	movs	r2, #2
 80055f2:	701a      	strb	r2, [r3, #0]
}
 80055f4:	e042      	b.n	800567c <URCProcessor+0xcc>
    else if(!strncmp(line, "+HTTPACTION:", 12)) {
 80055f6:	220c      	movs	r2, #12
 80055f8:	4926      	ldr	r1, [pc, #152]	; (8005694 <URCProcessor+0xe4>)
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f00c f816 	bl	801162c <strncmp>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d114      	bne.n	8005630 <URCProcessor+0x80>
       	httpStatusCode = util_atoi_n(line + 15 ,3);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	330f      	adds	r3, #15
 800560a:	2103      	movs	r1, #3
 800560c:	4618      	mov	r0, r3
 800560e:	f000 ffe7 	bl	80065e0 <util_atoi_n>
 8005612:	4603      	mov	r3, r0
 8005614:	461a      	mov	r2, r3
 8005616:	4b20      	ldr	r3, [pc, #128]	; (8005698 <URCProcessor+0xe8>)
 8005618:	601a      	str	r2, [r3, #0]
       	httpDataLen = util_atoi_n(line + 19,5);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	3313      	adds	r3, #19
 800561e:	2105      	movs	r1, #5
 8005620:	4618      	mov	r0, r3
 8005622:	f000 ffdd 	bl	80065e0 <util_atoi_n>
 8005626:	4603      	mov	r3, r0
 8005628:	461a      	mov	r2, r3
 800562a:	4b1c      	ldr	r3, [pc, #112]	; (800569c <URCProcessor+0xec>)
 800562c:	601a      	str	r2, [r3, #0]
}
 800562e:	e025      	b.n	800567c <URCProcessor+0xcc>
    else if(!strncmp(line, "+CCLK:", 6)) {
 8005630:	2206      	movs	r2, #6
 8005632:	491b      	ldr	r1, [pc, #108]	; (80056a0 <URCProcessor+0xf0>)
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f00b fff9 	bl	801162c <strncmp>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d106      	bne.n	800564e <URCProcessor+0x9e>
    	setTime(line + 8, TIMESTATE_OK_NITZ);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	3308      	adds	r3, #8
 8005644:	2101      	movs	r1, #1
 8005646:	4618      	mov	r0, r3
 8005648:	f000 fd48 	bl	80060dc <setTime>
}
 800564c:	e016      	b.n	800567c <URCProcessor+0xcc>
    else if(!strncmp(line, "+HTTPREAD: 0", 12)) {
 800564e:	220c      	movs	r2, #12
 8005650:	4914      	ldr	r1, [pc, #80]	; (80056a4 <URCProcessor+0xf4>)
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f00b ffea 	bl	801162c <strncmp>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d103      	bne.n	8005666 <URCProcessor+0xb6>
    	httpReadSuccessFlag = 1;
 800565e:	4b12      	ldr	r3, [pc, #72]	; (80056a8 <URCProcessor+0xf8>)
 8005660:	2201      	movs	r2, #1
 8005662:	701a      	strb	r2, [r3, #0]
}
 8005664:	e00a      	b.n	800567c <URCProcessor+0xcc>
    else if(!strncmp(line, "+HTTPREAD:0", 11)) {
 8005666:	220b      	movs	r2, #11
 8005668:	4910      	ldr	r1, [pc, #64]	; (80056ac <URCProcessor+0xfc>)
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f00b ffde 	bl	801162c <strncmp>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d102      	bne.n	800567c <URCProcessor+0xcc>
		httpReadSuccessFlag = 1;
 8005676:	4b0c      	ldr	r3, [pc, #48]	; (80056a8 <URCProcessor+0xf8>)
 8005678:	2201      	movs	r2, #1
 800567a:	701a      	strb	r2, [r3, #0]
}
 800567c:	bf00      	nop
 800567e:	3708      	adds	r7, #8
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	08018628 	.word	0x08018628
 8005688:	200078de 	.word	0x200078de
 800568c:	08018630 	.word	0x08018630
 8005690:	20000aac 	.word	0x20000aac
 8005694:	08018640 	.word	0x08018640
 8005698:	200078d4 	.word	0x200078d4
 800569c:	200078d8 	.word	0x200078d8
 80056a0:	08018650 	.word	0x08018650
 80056a4:	08018658 	.word	0x08018658
 80056a8:	20000ab4 	.word	0x20000ab4
 80056ac:	08018668 	.word	0x08018668

080056b0 <toggleHold>:
uint8_t getCSQ(void ){
	return csq;

}

void toggleHold(void){
 80056b0:	b580      	push	{r7, lr}
 80056b2:	af00      	add	r7, sp, #0
	if(hold == 0){
 80056b4:	4b0a      	ldr	r3, [pc, #40]	; (80056e0 <toggleHold+0x30>)
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d107      	bne.n	80056cc <toggleHold+0x1c>
		hold = 1;
 80056bc:	4b08      	ldr	r3, [pc, #32]	; (80056e0 <toggleHold+0x30>)
 80056be:	2201      	movs	r2, #1
 80056c0:	701a      	strb	r2, [r3, #0]
		 Uart_SendString("Toggle Hold ON\r\n", pc_uart);
 80056c2:	4908      	ldr	r1, [pc, #32]	; (80056e4 <toggleHold+0x34>)
 80056c4:	4808      	ldr	r0, [pc, #32]	; (80056e8 <toggleHold+0x38>)
 80056c6:	f7fc f95f 	bl	8001988 <Uart_SendString>
	}
	else{
		hold = 0;
		 Uart_SendString("Toggle Hold OFF\r\n", pc_uart);
	}
}
 80056ca:	e006      	b.n	80056da <toggleHold+0x2a>
		hold = 0;
 80056cc:	4b04      	ldr	r3, [pc, #16]	; (80056e0 <toggleHold+0x30>)
 80056ce:	2200      	movs	r2, #0
 80056d0:	701a      	strb	r2, [r3, #0]
		 Uart_SendString("Toggle Hold OFF\r\n", pc_uart);
 80056d2:	4904      	ldr	r1, [pc, #16]	; (80056e4 <toggleHold+0x34>)
 80056d4:	4805      	ldr	r0, [pc, #20]	; (80056ec <toggleHold+0x3c>)
 80056d6:	f7fc f957 	bl	8001988 <Uart_SendString>
}
 80056da:	bf00      	nop
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	200078d0 	.word	0x200078d0
 80056e4:	20004094 	.word	0x20004094
 80056e8:	08018674 	.word	0x08018674
 80056ec:	08018688 	.word	0x08018688

080056f0 <Debug>:

void Debug(char * line){
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b082      	sub	sp, #8
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
	if(1){
		Uart_SendString(line, pc_uart);
 80056f8:	4903      	ldr	r1, [pc, #12]	; (8005708 <Debug+0x18>)
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f7fc f944 	bl	8001988 <Uart_SendString>
	}

}
 8005700:	bf00      	nop
 8005702:	3708      	adds	r7, #8
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}
 8005708:	20004094 	.word	0x20004094

0800570c <setCommandState>:

void setCommandState(CMD_STATE newState){
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	4603      	mov	r3, r0
 8005714:	71fb      	strb	r3, [r7, #7]
//	Debug("\r\n#CommandSate=");
//	sprintf(pbuffer, "%u",newState);
//	Debug(pbuffer);
//	Debug("\r\n");

	cmdState = newState;
 8005716:	4a04      	ldr	r2, [pc, #16]	; (8005728 <setCommandState+0x1c>)
 8005718:	79fb      	ldrb	r3, [r7, #7]
 800571a:	7013      	strb	r3, [r2, #0]
}
 800571c:	bf00      	nop
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr
 8005728:	20000aae 	.word	0x20000aae

0800572c <pauseCommmandSate>:

void pauseCommmandSate(CMD_STATE newState, uint32_t pause){
 800572c:	b580      	push	{r7, lr}
 800572e:	b082      	sub	sp, #8
 8005730:	af00      	add	r7, sp, #0
 8005732:	4603      	mov	r3, r0
 8005734:	6039      	str	r1, [r7, #0]
 8005736:	71fb      	strb	r3, [r7, #7]
	pauseTimeout = pause;
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	b29a      	uxth	r2, r3
 800573c:	4b05      	ldr	r3, [pc, #20]	; (8005754 <pauseCommmandSate+0x28>)
 800573e:	801a      	strh	r2, [r3, #0]
	pauseNextState = newState;
 8005740:	4a05      	ldr	r2, [pc, #20]	; (8005758 <pauseCommmandSate+0x2c>)
 8005742:	79fb      	ldrb	r3, [r7, #7]
 8005744:	7013      	strb	r3, [r2, #0]
	setCommandState(CMD_PAUSE);
 8005746:	2007      	movs	r0, #7
 8005748:	f7ff ffe0 	bl	800570c <setCommandState>
}
 800574c:	bf00      	nop
 800574e:	3708      	adds	r7, #8
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	20000ab0 	.word	0x20000ab0
 8005758:	20007884 	.word	0x20007884

0800575c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005762:	2300      	movs	r3, #0
 8005764:	607b      	str	r3, [r7, #4]
 8005766:	4b10      	ldr	r3, [pc, #64]	; (80057a8 <HAL_MspInit+0x4c>)
 8005768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800576a:	4a0f      	ldr	r2, [pc, #60]	; (80057a8 <HAL_MspInit+0x4c>)
 800576c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005770:	6453      	str	r3, [r2, #68]	; 0x44
 8005772:	4b0d      	ldr	r3, [pc, #52]	; (80057a8 <HAL_MspInit+0x4c>)
 8005774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005776:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800577a:	607b      	str	r3, [r7, #4]
 800577c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800577e:	2300      	movs	r3, #0
 8005780:	603b      	str	r3, [r7, #0]
 8005782:	4b09      	ldr	r3, [pc, #36]	; (80057a8 <HAL_MspInit+0x4c>)
 8005784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005786:	4a08      	ldr	r2, [pc, #32]	; (80057a8 <HAL_MspInit+0x4c>)
 8005788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800578c:	6413      	str	r3, [r2, #64]	; 0x40
 800578e:	4b06      	ldr	r3, [pc, #24]	; (80057a8 <HAL_MspInit+0x4c>)
 8005790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005796:	603b      	str	r3, [r7, #0]
 8005798:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800579a:	bf00      	nop
 800579c:	370c      	adds	r7, #12
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	40023800 	.word	0x40023800

080057ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b08a      	sub	sp, #40	; 0x28
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057b4:	f107 0314 	add.w	r3, r7, #20
 80057b8:	2200      	movs	r2, #0
 80057ba:	601a      	str	r2, [r3, #0]
 80057bc:	605a      	str	r2, [r3, #4]
 80057be:	609a      	str	r2, [r3, #8]
 80057c0:	60da      	str	r2, [r3, #12]
 80057c2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a2f      	ldr	r2, [pc, #188]	; (8005888 <HAL_ADC_MspInit+0xdc>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d157      	bne.n	800587e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80057ce:	2300      	movs	r3, #0
 80057d0:	613b      	str	r3, [r7, #16]
 80057d2:	4b2e      	ldr	r3, [pc, #184]	; (800588c <HAL_ADC_MspInit+0xe0>)
 80057d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057d6:	4a2d      	ldr	r2, [pc, #180]	; (800588c <HAL_ADC_MspInit+0xe0>)
 80057d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057dc:	6453      	str	r3, [r2, #68]	; 0x44
 80057de:	4b2b      	ldr	r3, [pc, #172]	; (800588c <HAL_ADC_MspInit+0xe0>)
 80057e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e6:	613b      	str	r3, [r7, #16]
 80057e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057ea:	2300      	movs	r3, #0
 80057ec:	60fb      	str	r3, [r7, #12]
 80057ee:	4b27      	ldr	r3, [pc, #156]	; (800588c <HAL_ADC_MspInit+0xe0>)
 80057f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f2:	4a26      	ldr	r2, [pc, #152]	; (800588c <HAL_ADC_MspInit+0xe0>)
 80057f4:	f043 0301 	orr.w	r3, r3, #1
 80057f8:	6313      	str	r3, [r2, #48]	; 0x30
 80057fa:	4b24      	ldr	r3, [pc, #144]	; (800588c <HAL_ADC_MspInit+0xe0>)
 80057fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057fe:	f003 0301 	and.w	r3, r3, #1
 8005802:	60fb      	str	r3, [r7, #12]
 8005804:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ADC1_IN0_WINDDIR_Pin|ADC1_IN1_VSENSE_Pin;
 8005806:	2303      	movs	r3, #3
 8005808:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800580a:	2303      	movs	r3, #3
 800580c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800580e:	2300      	movs	r3, #0
 8005810:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005812:	f107 0314 	add.w	r3, r7, #20
 8005816:	4619      	mov	r1, r3
 8005818:	481d      	ldr	r0, [pc, #116]	; (8005890 <HAL_ADC_MspInit+0xe4>)
 800581a:	f002 f8b9 	bl	8007990 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800581e:	4b1d      	ldr	r3, [pc, #116]	; (8005894 <HAL_ADC_MspInit+0xe8>)
 8005820:	4a1d      	ldr	r2, [pc, #116]	; (8005898 <HAL_ADC_MspInit+0xec>)
 8005822:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8005824:	4b1b      	ldr	r3, [pc, #108]	; (8005894 <HAL_ADC_MspInit+0xe8>)
 8005826:	2200      	movs	r2, #0
 8005828:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800582a:	4b1a      	ldr	r3, [pc, #104]	; (8005894 <HAL_ADC_MspInit+0xe8>)
 800582c:	2200      	movs	r2, #0
 800582e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005830:	4b18      	ldr	r3, [pc, #96]	; (8005894 <HAL_ADC_MspInit+0xe8>)
 8005832:	2200      	movs	r2, #0
 8005834:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005836:	4b17      	ldr	r3, [pc, #92]	; (8005894 <HAL_ADC_MspInit+0xe8>)
 8005838:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800583c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800583e:	4b15      	ldr	r3, [pc, #84]	; (8005894 <HAL_ADC_MspInit+0xe8>)
 8005840:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005844:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005846:	4b13      	ldr	r3, [pc, #76]	; (8005894 <HAL_ADC_MspInit+0xe8>)
 8005848:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800584c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800584e:	4b11      	ldr	r3, [pc, #68]	; (8005894 <HAL_ADC_MspInit+0xe8>)
 8005850:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005854:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005856:	4b0f      	ldr	r3, [pc, #60]	; (8005894 <HAL_ADC_MspInit+0xe8>)
 8005858:	2200      	movs	r2, #0
 800585a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800585c:	4b0d      	ldr	r3, [pc, #52]	; (8005894 <HAL_ADC_MspInit+0xe8>)
 800585e:	2200      	movs	r2, #0
 8005860:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005862:	480c      	ldr	r0, [pc, #48]	; (8005894 <HAL_ADC_MspInit+0xe8>)
 8005864:	f001 fcf6 	bl	8007254 <HAL_DMA_Init>
 8005868:	4603      	mov	r3, r0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d001      	beq.n	8005872 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800586e:	f7fd fbbb 	bl	8002fe8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a07      	ldr	r2, [pc, #28]	; (8005894 <HAL_ADC_MspInit+0xe8>)
 8005876:	639a      	str	r2, [r3, #56]	; 0x38
 8005878:	4a06      	ldr	r2, [pc, #24]	; (8005894 <HAL_ADC_MspInit+0xe8>)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800587e:	bf00      	nop
 8005880:	3728      	adds	r7, #40	; 0x28
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	40012000 	.word	0x40012000
 800588c:	40023800 	.word	0x40023800
 8005890:	40020000 	.word	0x40020000
 8005894:	20003e28 	.word	0x20003e28
 8005898:	40026410 	.word	0x40026410

0800589c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800589c:	b480      	push	{r7}
 800589e:	b083      	sub	sp, #12
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a05      	ldr	r2, [pc, #20]	; (80058c0 <HAL_RTC_MspInit+0x24>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d102      	bne.n	80058b4 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80058ae:	4b05      	ldr	r3, [pc, #20]	; (80058c4 <HAL_RTC_MspInit+0x28>)
 80058b0:	2201      	movs	r2, #1
 80058b2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80058b4:	bf00      	nop
 80058b6:	370c      	adds	r7, #12
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr
 80058c0:	40002800 	.word	0x40002800
 80058c4:	42470e3c 	.word	0x42470e3c

080058c8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b08a      	sub	sp, #40	; 0x28
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058d0:	f107 0314 	add.w	r3, r7, #20
 80058d4:	2200      	movs	r2, #0
 80058d6:	601a      	str	r2, [r3, #0]
 80058d8:	605a      	str	r2, [r3, #4]
 80058da:	609a      	str	r2, [r3, #8]
 80058dc:	60da      	str	r2, [r3, #12]
 80058de:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a70      	ldr	r2, [pc, #448]	; (8005aa8 <HAL_SD_MspInit+0x1e0>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	f040 80da 	bne.w	8005aa0 <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80058ec:	2300      	movs	r3, #0
 80058ee:	613b      	str	r3, [r7, #16]
 80058f0:	4b6e      	ldr	r3, [pc, #440]	; (8005aac <HAL_SD_MspInit+0x1e4>)
 80058f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058f4:	4a6d      	ldr	r2, [pc, #436]	; (8005aac <HAL_SD_MspInit+0x1e4>)
 80058f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80058fa:	6453      	str	r3, [r2, #68]	; 0x44
 80058fc:	4b6b      	ldr	r3, [pc, #428]	; (8005aac <HAL_SD_MspInit+0x1e4>)
 80058fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005900:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005904:	613b      	str	r3, [r7, #16]
 8005906:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005908:	2300      	movs	r3, #0
 800590a:	60fb      	str	r3, [r7, #12]
 800590c:	4b67      	ldr	r3, [pc, #412]	; (8005aac <HAL_SD_MspInit+0x1e4>)
 800590e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005910:	4a66      	ldr	r2, [pc, #408]	; (8005aac <HAL_SD_MspInit+0x1e4>)
 8005912:	f043 0301 	orr.w	r3, r3, #1
 8005916:	6313      	str	r3, [r2, #48]	; 0x30
 8005918:	4b64      	ldr	r3, [pc, #400]	; (8005aac <HAL_SD_MspInit+0x1e4>)
 800591a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800591c:	f003 0301 	and.w	r3, r3, #1
 8005920:	60fb      	str	r3, [r7, #12]
 8005922:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005924:	2300      	movs	r3, #0
 8005926:	60bb      	str	r3, [r7, #8]
 8005928:	4b60      	ldr	r3, [pc, #384]	; (8005aac <HAL_SD_MspInit+0x1e4>)
 800592a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800592c:	4a5f      	ldr	r2, [pc, #380]	; (8005aac <HAL_SD_MspInit+0x1e4>)
 800592e:	f043 0302 	orr.w	r3, r3, #2
 8005932:	6313      	str	r3, [r2, #48]	; 0x30
 8005934:	4b5d      	ldr	r3, [pc, #372]	; (8005aac <HAL_SD_MspInit+0x1e4>)
 8005936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005938:	f003 0302 	and.w	r3, r3, #2
 800593c:	60bb      	str	r3, [r7, #8]
 800593e:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> SDIO_D1
    PA9     ------> SDIO_D2
    PB5     ------> SDIO_D3
    PB7     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8005940:	f44f 7350 	mov.w	r3, #832	; 0x340
 8005944:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005946:	2302      	movs	r3, #2
 8005948:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800594a:	2301      	movs	r3, #1
 800594c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800594e:	2303      	movs	r3, #3
 8005950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8005952:	230c      	movs	r3, #12
 8005954:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005956:	f107 0314 	add.w	r3, r7, #20
 800595a:	4619      	mov	r1, r3
 800595c:	4854      	ldr	r0, [pc, #336]	; (8005ab0 <HAL_SD_MspInit+0x1e8>)
 800595e:	f002 f817 	bl	8007990 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005962:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005966:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005968:	2302      	movs	r3, #2
 800596a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800596c:	2300      	movs	r3, #0
 800596e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005970:	2303      	movs	r3, #3
 8005972:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8005974:	230c      	movs	r3, #12
 8005976:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005978:	f107 0314 	add.w	r3, r7, #20
 800597c:	4619      	mov	r1, r3
 800597e:	484d      	ldr	r0, [pc, #308]	; (8005ab4 <HAL_SD_MspInit+0x1ec>)
 8005980:	f002 f806 	bl	8007990 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8005984:	23a0      	movs	r3, #160	; 0xa0
 8005986:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005988:	2302      	movs	r3, #2
 800598a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800598c:	2301      	movs	r3, #1
 800598e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005990:	2303      	movs	r3, #3
 8005992:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8005994:	230c      	movs	r3, #12
 8005996:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005998:	f107 0314 	add.w	r3, r7, #20
 800599c:	4619      	mov	r1, r3
 800599e:	4845      	ldr	r0, [pc, #276]	; (8005ab4 <HAL_SD_MspInit+0x1ec>)
 80059a0:	f001 fff6 	bl	8007990 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80059a4:	4b44      	ldr	r3, [pc, #272]	; (8005ab8 <HAL_SD_MspInit+0x1f0>)
 80059a6:	4a45      	ldr	r2, [pc, #276]	; (8005abc <HAL_SD_MspInit+0x1f4>)
 80059a8:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80059aa:	4b43      	ldr	r3, [pc, #268]	; (8005ab8 <HAL_SD_MspInit+0x1f0>)
 80059ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80059b0:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80059b2:	4b41      	ldr	r3, [pc, #260]	; (8005ab8 <HAL_SD_MspInit+0x1f0>)
 80059b4:	2200      	movs	r2, #0
 80059b6:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80059b8:	4b3f      	ldr	r3, [pc, #252]	; (8005ab8 <HAL_SD_MspInit+0x1f0>)
 80059ba:	2200      	movs	r2, #0
 80059bc:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80059be:	4b3e      	ldr	r3, [pc, #248]	; (8005ab8 <HAL_SD_MspInit+0x1f0>)
 80059c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80059c4:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80059c6:	4b3c      	ldr	r3, [pc, #240]	; (8005ab8 <HAL_SD_MspInit+0x1f0>)
 80059c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80059cc:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80059ce:	4b3a      	ldr	r3, [pc, #232]	; (8005ab8 <HAL_SD_MspInit+0x1f0>)
 80059d0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80059d4:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80059d6:	4b38      	ldr	r3, [pc, #224]	; (8005ab8 <HAL_SD_MspInit+0x1f0>)
 80059d8:	2220      	movs	r2, #32
 80059da:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 80059dc:	4b36      	ldr	r3, [pc, #216]	; (8005ab8 <HAL_SD_MspInit+0x1f0>)
 80059de:	2200      	movs	r2, #0
 80059e0:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80059e2:	4b35      	ldr	r3, [pc, #212]	; (8005ab8 <HAL_SD_MspInit+0x1f0>)
 80059e4:	2204      	movs	r2, #4
 80059e6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80059e8:	4b33      	ldr	r3, [pc, #204]	; (8005ab8 <HAL_SD_MspInit+0x1f0>)
 80059ea:	2203      	movs	r2, #3
 80059ec:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80059ee:	4b32      	ldr	r3, [pc, #200]	; (8005ab8 <HAL_SD_MspInit+0x1f0>)
 80059f0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80059f4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80059f6:	4b30      	ldr	r3, [pc, #192]	; (8005ab8 <HAL_SD_MspInit+0x1f0>)
 80059f8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80059fc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80059fe:	482e      	ldr	r0, [pc, #184]	; (8005ab8 <HAL_SD_MspInit+0x1f0>)
 8005a00:	f001 fc28 	bl	8007254 <HAL_DMA_Init>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d001      	beq.n	8005a0e <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 8005a0a:	f7fd faed 	bl	8002fe8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a29      	ldr	r2, [pc, #164]	; (8005ab8 <HAL_SD_MspInit+0x1f0>)
 8005a12:	641a      	str	r2, [r3, #64]	; 0x40
 8005a14:	4a28      	ldr	r2, [pc, #160]	; (8005ab8 <HAL_SD_MspInit+0x1f0>)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8005a1a:	4b29      	ldr	r3, [pc, #164]	; (8005ac0 <HAL_SD_MspInit+0x1f8>)
 8005a1c:	4a29      	ldr	r2, [pc, #164]	; (8005ac4 <HAL_SD_MspInit+0x1fc>)
 8005a1e:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8005a20:	4b27      	ldr	r3, [pc, #156]	; (8005ac0 <HAL_SD_MspInit+0x1f8>)
 8005a22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005a26:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005a28:	4b25      	ldr	r3, [pc, #148]	; (8005ac0 <HAL_SD_MspInit+0x1f8>)
 8005a2a:	2240      	movs	r2, #64	; 0x40
 8005a2c:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a2e:	4b24      	ldr	r3, [pc, #144]	; (8005ac0 <HAL_SD_MspInit+0x1f8>)
 8005a30:	2200      	movs	r2, #0
 8005a32:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005a34:	4b22      	ldr	r3, [pc, #136]	; (8005ac0 <HAL_SD_MspInit+0x1f8>)
 8005a36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005a3a:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005a3c:	4b20      	ldr	r3, [pc, #128]	; (8005ac0 <HAL_SD_MspInit+0x1f8>)
 8005a3e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005a42:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005a44:	4b1e      	ldr	r3, [pc, #120]	; (8005ac0 <HAL_SD_MspInit+0x1f8>)
 8005a46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005a4a:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8005a4c:	4b1c      	ldr	r3, [pc, #112]	; (8005ac0 <HAL_SD_MspInit+0x1f8>)
 8005a4e:	2220      	movs	r2, #32
 8005a50:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005a52:	4b1b      	ldr	r3, [pc, #108]	; (8005ac0 <HAL_SD_MspInit+0x1f8>)
 8005a54:	2200      	movs	r2, #0
 8005a56:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005a58:	4b19      	ldr	r3, [pc, #100]	; (8005ac0 <HAL_SD_MspInit+0x1f8>)
 8005a5a:	2204      	movs	r2, #4
 8005a5c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005a5e:	4b18      	ldr	r3, [pc, #96]	; (8005ac0 <HAL_SD_MspInit+0x1f8>)
 8005a60:	2203      	movs	r2, #3
 8005a62:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8005a64:	4b16      	ldr	r3, [pc, #88]	; (8005ac0 <HAL_SD_MspInit+0x1f8>)
 8005a66:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005a6a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8005a6c:	4b14      	ldr	r3, [pc, #80]	; (8005ac0 <HAL_SD_MspInit+0x1f8>)
 8005a6e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005a72:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8005a74:	4812      	ldr	r0, [pc, #72]	; (8005ac0 <HAL_SD_MspInit+0x1f8>)
 8005a76:	f001 fbed 	bl	8007254 <HAL_DMA_Init>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d001      	beq.n	8005a84 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 8005a80:	f7fd fab2 	bl	8002fe8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4a0e      	ldr	r2, [pc, #56]	; (8005ac0 <HAL_SD_MspInit+0x1f8>)
 8005a88:	63da      	str	r2, [r3, #60]	; 0x3c
 8005a8a:	4a0d      	ldr	r2, [pc, #52]	; (8005ac0 <HAL_SD_MspInit+0x1f8>)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8005a90:	2200      	movs	r2, #0
 8005a92:	2100      	movs	r1, #0
 8005a94:	2031      	movs	r0, #49	; 0x31
 8005a96:	f001 fba6 	bl	80071e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8005a9a:	2031      	movs	r0, #49	; 0x31
 8005a9c:	f001 fbbf 	bl	800721e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8005aa0:	bf00      	nop
 8005aa2:	3728      	adds	r7, #40	; 0x28
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	40012c00 	.word	0x40012c00
 8005aac:	40023800 	.word	0x40023800
 8005ab0:	40020000 	.word	0x40020000
 8005ab4:	40020400 	.word	0x40020400
 8005ab8:	20003c20 	.word	0x20003c20
 8005abc:	40026458 	.word	0x40026458
 8005ac0:	20003ea8 	.word	0x20003ea8
 8005ac4:	400264a0 	.word	0x400264a0

08005ac8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b08a      	sub	sp, #40	; 0x28
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ad0:	f107 0314 	add.w	r3, r7, #20
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	601a      	str	r2, [r3, #0]
 8005ad8:	605a      	str	r2, [r3, #4]
 8005ada:	609a      	str	r2, [r3, #8]
 8005adc:	60da      	str	r2, [r3, #12]
 8005ade:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a28      	ldr	r2, [pc, #160]	; (8005b88 <HAL_SPI_MspInit+0xc0>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d149      	bne.n	8005b7e <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005aea:	2300      	movs	r3, #0
 8005aec:	613b      	str	r3, [r7, #16]
 8005aee:	4b27      	ldr	r3, [pc, #156]	; (8005b8c <HAL_SPI_MspInit+0xc4>)
 8005af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005af2:	4a26      	ldr	r2, [pc, #152]	; (8005b8c <HAL_SPI_MspInit+0xc4>)
 8005af4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005af8:	6453      	str	r3, [r2, #68]	; 0x44
 8005afa:	4b24      	ldr	r3, [pc, #144]	; (8005b8c <HAL_SPI_MspInit+0xc4>)
 8005afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005afe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b02:	613b      	str	r3, [r7, #16]
 8005b04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b06:	2300      	movs	r3, #0
 8005b08:	60fb      	str	r3, [r7, #12]
 8005b0a:	4b20      	ldr	r3, [pc, #128]	; (8005b8c <HAL_SPI_MspInit+0xc4>)
 8005b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b0e:	4a1f      	ldr	r2, [pc, #124]	; (8005b8c <HAL_SPI_MspInit+0xc4>)
 8005b10:	f043 0301 	orr.w	r3, r3, #1
 8005b14:	6313      	str	r3, [r2, #48]	; 0x30
 8005b16:	4b1d      	ldr	r3, [pc, #116]	; (8005b8c <HAL_SPI_MspInit+0xc4>)
 8005b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b1a:	f003 0301 	and.w	r3, r3, #1
 8005b1e:	60fb      	str	r3, [r7, #12]
 8005b20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b22:	2300      	movs	r3, #0
 8005b24:	60bb      	str	r3, [r7, #8]
 8005b26:	4b19      	ldr	r3, [pc, #100]	; (8005b8c <HAL_SPI_MspInit+0xc4>)
 8005b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b2a:	4a18      	ldr	r2, [pc, #96]	; (8005b8c <HAL_SPI_MspInit+0xc4>)
 8005b2c:	f043 0302 	orr.w	r3, r3, #2
 8005b30:	6313      	str	r3, [r2, #48]	; 0x30
 8005b32:	4b16      	ldr	r3, [pc, #88]	; (8005b8c <HAL_SPI_MspInit+0xc4>)
 8005b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b36:	f003 0302 	and.w	r3, r3, #2
 8005b3a:	60bb      	str	r3, [r7, #8]
 8005b3c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8005b3e:	23a0      	movs	r3, #160	; 0xa0
 8005b40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b42:	2302      	movs	r3, #2
 8005b44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b46:	2300      	movs	r3, #0
 8005b48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005b4e:	2305      	movs	r3, #5
 8005b50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b52:	f107 0314 	add.w	r3, r7, #20
 8005b56:	4619      	mov	r1, r3
 8005b58:	480d      	ldr	r0, [pc, #52]	; (8005b90 <HAL_SPI_MspInit+0xc8>)
 8005b5a:	f001 ff19 	bl	8007990 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005b5e:	2310      	movs	r3, #16
 8005b60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b62:	2302      	movs	r3, #2
 8005b64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b66:	2300      	movs	r3, #0
 8005b68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005b6e:	2305      	movs	r3, #5
 8005b70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005b72:	f107 0314 	add.w	r3, r7, #20
 8005b76:	4619      	mov	r1, r3
 8005b78:	4806      	ldr	r0, [pc, #24]	; (8005b94 <HAL_SPI_MspInit+0xcc>)
 8005b7a:	f001 ff09 	bl	8007990 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8005b7e:	bf00      	nop
 8005b80:	3728      	adds	r7, #40	; 0x28
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	40013000 	.word	0x40013000
 8005b8c:	40023800 	.word	0x40023800
 8005b90:	40020000 	.word	0x40020000
 8005b94:	40020400 	.word	0x40020400

08005b98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b088      	sub	sp, #32
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ba8:	d10e      	bne.n	8005bc8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005baa:	2300      	movs	r3, #0
 8005bac:	61fb      	str	r3, [r7, #28]
 8005bae:	4b3e      	ldr	r3, [pc, #248]	; (8005ca8 <HAL_TIM_Base_MspInit+0x110>)
 8005bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb2:	4a3d      	ldr	r2, [pc, #244]	; (8005ca8 <HAL_TIM_Base_MspInit+0x110>)
 8005bb4:	f043 0301 	orr.w	r3, r3, #1
 8005bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8005bba:	4b3b      	ldr	r3, [pc, #236]	; (8005ca8 <HAL_TIM_Base_MspInit+0x110>)
 8005bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bbe:	f003 0301 	and.w	r3, r3, #1
 8005bc2:	61fb      	str	r3, [r7, #28]
 8005bc4:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8005bc6:	e06a      	b.n	8005c9e <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM3)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a37      	ldr	r2, [pc, #220]	; (8005cac <HAL_TIM_Base_MspInit+0x114>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d116      	bne.n	8005c00 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	61bb      	str	r3, [r7, #24]
 8005bd6:	4b34      	ldr	r3, [pc, #208]	; (8005ca8 <HAL_TIM_Base_MspInit+0x110>)
 8005bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bda:	4a33      	ldr	r2, [pc, #204]	; (8005ca8 <HAL_TIM_Base_MspInit+0x110>)
 8005bdc:	f043 0302 	orr.w	r3, r3, #2
 8005be0:	6413      	str	r3, [r2, #64]	; 0x40
 8005be2:	4b31      	ldr	r3, [pc, #196]	; (8005ca8 <HAL_TIM_Base_MspInit+0x110>)
 8005be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be6:	f003 0302 	and.w	r3, r3, #2
 8005bea:	61bb      	str	r3, [r7, #24]
 8005bec:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8005bee:	2200      	movs	r2, #0
 8005bf0:	2102      	movs	r1, #2
 8005bf2:	201d      	movs	r0, #29
 8005bf4:	f001 faf7 	bl	80071e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005bf8:	201d      	movs	r0, #29
 8005bfa:	f001 fb10 	bl	800721e <HAL_NVIC_EnableIRQ>
}
 8005bfe:	e04e      	b.n	8005c9e <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM4)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a2a      	ldr	r2, [pc, #168]	; (8005cb0 <HAL_TIM_Base_MspInit+0x118>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d10e      	bne.n	8005c28 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	617b      	str	r3, [r7, #20]
 8005c0e:	4b26      	ldr	r3, [pc, #152]	; (8005ca8 <HAL_TIM_Base_MspInit+0x110>)
 8005c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c12:	4a25      	ldr	r2, [pc, #148]	; (8005ca8 <HAL_TIM_Base_MspInit+0x110>)
 8005c14:	f043 0304 	orr.w	r3, r3, #4
 8005c18:	6413      	str	r3, [r2, #64]	; 0x40
 8005c1a:	4b23      	ldr	r3, [pc, #140]	; (8005ca8 <HAL_TIM_Base_MspInit+0x110>)
 8005c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1e:	f003 0304 	and.w	r3, r3, #4
 8005c22:	617b      	str	r3, [r7, #20]
 8005c24:	697b      	ldr	r3, [r7, #20]
}
 8005c26:	e03a      	b.n	8005c9e <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM5)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a21      	ldr	r2, [pc, #132]	; (8005cb4 <HAL_TIM_Base_MspInit+0x11c>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d10e      	bne.n	8005c50 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005c32:	2300      	movs	r3, #0
 8005c34:	613b      	str	r3, [r7, #16]
 8005c36:	4b1c      	ldr	r3, [pc, #112]	; (8005ca8 <HAL_TIM_Base_MspInit+0x110>)
 8005c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3a:	4a1b      	ldr	r2, [pc, #108]	; (8005ca8 <HAL_TIM_Base_MspInit+0x110>)
 8005c3c:	f043 0308 	orr.w	r3, r3, #8
 8005c40:	6413      	str	r3, [r2, #64]	; 0x40
 8005c42:	4b19      	ldr	r3, [pc, #100]	; (8005ca8 <HAL_TIM_Base_MspInit+0x110>)
 8005c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c46:	f003 0308 	and.w	r3, r3, #8
 8005c4a:	613b      	str	r3, [r7, #16]
 8005c4c:	693b      	ldr	r3, [r7, #16]
}
 8005c4e:	e026      	b.n	8005c9e <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM9)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a18      	ldr	r2, [pc, #96]	; (8005cb8 <HAL_TIM_Base_MspInit+0x120>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d10e      	bne.n	8005c78 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	60fb      	str	r3, [r7, #12]
 8005c5e:	4b12      	ldr	r3, [pc, #72]	; (8005ca8 <HAL_TIM_Base_MspInit+0x110>)
 8005c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c62:	4a11      	ldr	r2, [pc, #68]	; (8005ca8 <HAL_TIM_Base_MspInit+0x110>)
 8005c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c68:	6453      	str	r3, [r2, #68]	; 0x44
 8005c6a:	4b0f      	ldr	r3, [pc, #60]	; (8005ca8 <HAL_TIM_Base_MspInit+0x110>)
 8005c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c72:	60fb      	str	r3, [r7, #12]
 8005c74:	68fb      	ldr	r3, [r7, #12]
}
 8005c76:	e012      	b.n	8005c9e <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM10)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a0f      	ldr	r2, [pc, #60]	; (8005cbc <HAL_TIM_Base_MspInit+0x124>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d10d      	bne.n	8005c9e <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8005c82:	2300      	movs	r3, #0
 8005c84:	60bb      	str	r3, [r7, #8]
 8005c86:	4b08      	ldr	r3, [pc, #32]	; (8005ca8 <HAL_TIM_Base_MspInit+0x110>)
 8005c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c8a:	4a07      	ldr	r2, [pc, #28]	; (8005ca8 <HAL_TIM_Base_MspInit+0x110>)
 8005c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c90:	6453      	str	r3, [r2, #68]	; 0x44
 8005c92:	4b05      	ldr	r3, [pc, #20]	; (8005ca8 <HAL_TIM_Base_MspInit+0x110>)
 8005c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c9a:	60bb      	str	r3, [r7, #8]
 8005c9c:	68bb      	ldr	r3, [r7, #8]
}
 8005c9e:	bf00      	nop
 8005ca0:	3720      	adds	r7, #32
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	40023800 	.word	0x40023800
 8005cac:	40000400 	.word	0x40000400
 8005cb0:	40000800 	.word	0x40000800
 8005cb4:	40000c00 	.word	0x40000c00
 8005cb8:	40014000 	.word	0x40014000
 8005cbc:	40014400 	.word	0x40014400

08005cc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b08c      	sub	sp, #48	; 0x30
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005cc8:	f107 031c 	add.w	r3, r7, #28
 8005ccc:	2200      	movs	r2, #0
 8005cce:	601a      	str	r2, [r3, #0]
 8005cd0:	605a      	str	r2, [r3, #4]
 8005cd2:	609a      	str	r2, [r3, #8]
 8005cd4:	60da      	str	r2, [r3, #12]
 8005cd6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a49      	ldr	r2, [pc, #292]	; (8005e04 <HAL_UART_MspInit+0x144>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d153      	bne.n	8005d8a <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	61bb      	str	r3, [r7, #24]
 8005ce6:	4b48      	ldr	r3, [pc, #288]	; (8005e08 <HAL_UART_MspInit+0x148>)
 8005ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cea:	4a47      	ldr	r2, [pc, #284]	; (8005e08 <HAL_UART_MspInit+0x148>)
 8005cec:	f043 0310 	orr.w	r3, r3, #16
 8005cf0:	6453      	str	r3, [r2, #68]	; 0x44
 8005cf2:	4b45      	ldr	r3, [pc, #276]	; (8005e08 <HAL_UART_MspInit+0x148>)
 8005cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cf6:	f003 0310 	and.w	r3, r3, #16
 8005cfa:	61bb      	str	r3, [r7, #24]
 8005cfc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005cfe:	2300      	movs	r3, #0
 8005d00:	617b      	str	r3, [r7, #20]
 8005d02:	4b41      	ldr	r3, [pc, #260]	; (8005e08 <HAL_UART_MspInit+0x148>)
 8005d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d06:	4a40      	ldr	r2, [pc, #256]	; (8005e08 <HAL_UART_MspInit+0x148>)
 8005d08:	f043 0301 	orr.w	r3, r3, #1
 8005d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8005d0e:	4b3e      	ldr	r3, [pc, #248]	; (8005e08 <HAL_UART_MspInit+0x148>)
 8005d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d12:	f003 0301 	and.w	r3, r3, #1
 8005d16:	617b      	str	r3, [r7, #20]
 8005d18:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	613b      	str	r3, [r7, #16]
 8005d1e:	4b3a      	ldr	r3, [pc, #232]	; (8005e08 <HAL_UART_MspInit+0x148>)
 8005d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d22:	4a39      	ldr	r2, [pc, #228]	; (8005e08 <HAL_UART_MspInit+0x148>)
 8005d24:	f043 0302 	orr.w	r3, r3, #2
 8005d28:	6313      	str	r3, [r2, #48]	; 0x30
 8005d2a:	4b37      	ldr	r3, [pc, #220]	; (8005e08 <HAL_UART_MspInit+0x148>)
 8005d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d2e:	f003 0302 	and.w	r3, r3, #2
 8005d32:	613b      	str	r3, [r7, #16]
 8005d34:	693b      	ldr	r3, [r7, #16]
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    PA15     ------> USART1_TX
    PB3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
 8005d36:	f44f 4318 	mov.w	r3, #38912	; 0x9800
 8005d3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d40:	2300      	movs	r3, #0
 8005d42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d44:	2303      	movs	r3, #3
 8005d46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005d48:	2307      	movs	r3, #7
 8005d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d4c:	f107 031c 	add.w	r3, r7, #28
 8005d50:	4619      	mov	r1, r3
 8005d52:	482e      	ldr	r0, [pc, #184]	; (8005e0c <HAL_UART_MspInit+0x14c>)
 8005d54:	f001 fe1c 	bl	8007990 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005d58:	2308      	movs	r3, #8
 8005d5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d5c:	2302      	movs	r3, #2
 8005d5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d60:	2300      	movs	r3, #0
 8005d62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d64:	2303      	movs	r3, #3
 8005d66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005d68:	2307      	movs	r3, #7
 8005d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d6c:	f107 031c 	add.w	r3, r7, #28
 8005d70:	4619      	mov	r1, r3
 8005d72:	4827      	ldr	r0, [pc, #156]	; (8005e10 <HAL_UART_MspInit+0x150>)
 8005d74:	f001 fe0c 	bl	8007990 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8005d78:	2200      	movs	r2, #0
 8005d7a:	2103      	movs	r1, #3
 8005d7c:	2025      	movs	r0, #37	; 0x25
 8005d7e:	f001 fa32 	bl	80071e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005d82:	2025      	movs	r0, #37	; 0x25
 8005d84:	f001 fa4b 	bl	800721e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005d88:	e038      	b.n	8005dfc <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART2)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a21      	ldr	r2, [pc, #132]	; (8005e14 <HAL_UART_MspInit+0x154>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d133      	bne.n	8005dfc <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005d94:	2300      	movs	r3, #0
 8005d96:	60fb      	str	r3, [r7, #12]
 8005d98:	4b1b      	ldr	r3, [pc, #108]	; (8005e08 <HAL_UART_MspInit+0x148>)
 8005d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9c:	4a1a      	ldr	r2, [pc, #104]	; (8005e08 <HAL_UART_MspInit+0x148>)
 8005d9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005da2:	6413      	str	r3, [r2, #64]	; 0x40
 8005da4:	4b18      	ldr	r3, [pc, #96]	; (8005e08 <HAL_UART_MspInit+0x148>)
 8005da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dac:	60fb      	str	r3, [r7, #12]
 8005dae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005db0:	2300      	movs	r3, #0
 8005db2:	60bb      	str	r3, [r7, #8]
 8005db4:	4b14      	ldr	r3, [pc, #80]	; (8005e08 <HAL_UART_MspInit+0x148>)
 8005db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db8:	4a13      	ldr	r2, [pc, #76]	; (8005e08 <HAL_UART_MspInit+0x148>)
 8005dba:	f043 0301 	orr.w	r3, r3, #1
 8005dbe:	6313      	str	r3, [r2, #48]	; 0x30
 8005dc0:	4b11      	ldr	r3, [pc, #68]	; (8005e08 <HAL_UART_MspInit+0x148>)
 8005dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc4:	f003 0301 	and.w	r3, r3, #1
 8005dc8:	60bb      	str	r3, [r7, #8]
 8005dca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005dcc:	230c      	movs	r3, #12
 8005dce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dd0:	2302      	movs	r3, #2
 8005dd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005ddc:	2307      	movs	r3, #7
 8005dde:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005de0:	f107 031c 	add.w	r3, r7, #28
 8005de4:	4619      	mov	r1, r3
 8005de6:	4809      	ldr	r0, [pc, #36]	; (8005e0c <HAL_UART_MspInit+0x14c>)
 8005de8:	f001 fdd2 	bl	8007990 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8005dec:	2200      	movs	r2, #0
 8005dee:	2103      	movs	r1, #3
 8005df0:	2026      	movs	r0, #38	; 0x26
 8005df2:	f001 f9f8 	bl	80071e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005df6:	2026      	movs	r0, #38	; 0x26
 8005df8:	f001 fa11 	bl	800721e <HAL_NVIC_EnableIRQ>
}
 8005dfc:	bf00      	nop
 8005dfe:	3730      	adds	r7, #48	; 0x30
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	40011000 	.word	0x40011000
 8005e08:	40023800 	.word	0x40023800
 8005e0c:	40020000 	.word	0x40020000
 8005e10:	40020400 	.word	0x40020400
 8005e14:	40004400 	.word	0x40004400

08005e18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005e1c:	bf00      	nop
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr

08005e26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005e26:	b480      	push	{r7}
 8005e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005e2a:	e7fe      	b.n	8005e2a <HardFault_Handler+0x4>

08005e2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005e30:	e7fe      	b.n	8005e30 <MemManage_Handler+0x4>

08005e32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005e32:	b480      	push	{r7}
 8005e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005e36:	e7fe      	b.n	8005e36 <BusFault_Handler+0x4>

08005e38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005e3c:	e7fe      	b.n	8005e3c <UsageFault_Handler+0x4>

08005e3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005e3e:	b480      	push	{r7}
 8005e40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005e42:	bf00      	nop
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005e50:	bf00      	nop
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr

08005e5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005e5a:	b480      	push	{r7}
 8005e5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005e5e:	bf00      	nop
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005e6c:	f000 fcb6 	bl	80067dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005e70:	bf00      	nop
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8005e78:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005e7c:	f001 ff3e 	bl	8007cfc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005e80:	bf00      	nop
 8005e82:	bd80      	pop	{r7, pc}

08005e84 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005e88:	4802      	ldr	r0, [pc, #8]	; (8005e94 <TIM3_IRQHandler+0x10>)
 8005e8a:	f005 f8e9 	bl	800b060 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005e8e:	bf00      	nop
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	20003d54 	.word	0x20003d54

08005e98 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr (&huart1);
 8005e9c:	4803      	ldr	r0, [pc, #12]	; (8005eac <USART1_IRQHandler+0x14>)
 8005e9e:	f7fb fd8b 	bl	80019b8 <Uart_isr>

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005ea2:	4802      	ldr	r0, [pc, #8]	; (8005eac <USART1_IRQHandler+0x14>)
 8005ea4:	f005 fcba 	bl	800b81c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005ea8:	bf00      	nop
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	20003de8 	.word	0x20003de8

08005eb0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	Uart_isr (&huart2);
 8005eb4:	4803      	ldr	r0, [pc, #12]	; (8005ec4 <USART2_IRQHandler+0x14>)
 8005eb6:	f7fb fd7f 	bl	80019b8 <Uart_isr>

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005eba:	4802      	ldr	r0, [pc, #8]	; (8005ec4 <USART2_IRQHandler+0x14>)
 8005ebc:	f005 fcae 	bl	800b81c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005ec0:	bf00      	nop
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	20004094 	.word	0x20004094

08005ec8 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8005ecc:	4802      	ldr	r0, [pc, #8]	; (8005ed8 <SDIO_IRQHandler+0x10>)
 8005ece:	f003 fa43 	bl	8009358 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8005ed2:	bf00      	nop
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	20003f4c 	.word	0x20003f4c

08005edc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005ee0:	4802      	ldr	r0, [pc, #8]	; (8005eec <DMA2_Stream0_IRQHandler+0x10>)
 8005ee2:	f001 fadf 	bl	80074a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8005ee6:	bf00      	nop
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	20003e28 	.word	0x20003e28

08005ef0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8005ef4:	4802      	ldr	r0, [pc, #8]	; (8005f00 <DMA2_Stream3_IRQHandler+0x10>)
 8005ef6:	f001 fad5 	bl	80074a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8005efa:	bf00      	nop
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	20003c20 	.word	0x20003c20

08005f04 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8005f08:	4802      	ldr	r0, [pc, #8]	; (8005f14 <DMA2_Stream6_IRQHandler+0x10>)
 8005f0a:	f001 facb 	bl	80074a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8005f0e:	bf00      	nop
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	20003ea8 	.word	0x20003ea8

08005f18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	af00      	add	r7, sp, #0
	return 1;
 8005f1c:	2301      	movs	r3, #1
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <_kill>:

int _kill(int pid, int sig)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005f32:	f00a faa9 	bl	8010488 <__errno>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2216      	movs	r2, #22
 8005f3a:	601a      	str	r2, [r3, #0]
	return -1;
 8005f3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3708      	adds	r7, #8
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <_exit>:

void _exit (int status)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005f50:	f04f 31ff 	mov.w	r1, #4294967295
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f7ff ffe7 	bl	8005f28 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005f5a:	e7fe      	b.n	8005f5a <_exit+0x12>

08005f5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b086      	sub	sp, #24
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	60b9      	str	r1, [r7, #8]
 8005f66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005f68:	2300      	movs	r3, #0
 8005f6a:	617b      	str	r3, [r7, #20]
 8005f6c:	e00a      	b.n	8005f84 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005f6e:	f3af 8000 	nop.w
 8005f72:	4601      	mov	r1, r0
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	1c5a      	adds	r2, r3, #1
 8005f78:	60ba      	str	r2, [r7, #8]
 8005f7a:	b2ca      	uxtb	r2, r1
 8005f7c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	3301      	adds	r3, #1
 8005f82:	617b      	str	r3, [r7, #20]
 8005f84:	697a      	ldr	r2, [r7, #20]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	dbf0      	blt.n	8005f6e <_read+0x12>
	}

return len;
 8005f8c:	687b      	ldr	r3, [r7, #4]
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3718      	adds	r7, #24
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}

08005f96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005f96:	b580      	push	{r7, lr}
 8005f98:	b086      	sub	sp, #24
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	60f8      	str	r0, [r7, #12]
 8005f9e:	60b9      	str	r1, [r7, #8]
 8005fa0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	617b      	str	r3, [r7, #20]
 8005fa6:	e009      	b.n	8005fbc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	1c5a      	adds	r2, r3, #1
 8005fac:	60ba      	str	r2, [r7, #8]
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	3301      	adds	r3, #1
 8005fba:	617b      	str	r3, [r7, #20]
 8005fbc:	697a      	ldr	r2, [r7, #20]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	dbf1      	blt.n	8005fa8 <_write+0x12>
	}
	return len;
 8005fc4:	687b      	ldr	r3, [r7, #4]
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3718      	adds	r7, #24
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}

08005fce <_close>:

int _close(int file)
{
 8005fce:	b480      	push	{r7}
 8005fd0:	b083      	sub	sp, #12
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	6078      	str	r0, [r7, #4]
	return -1;
 8005fd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	370c      	adds	r7, #12
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr

08005fe6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005fe6:	b480      	push	{r7}
 8005fe8:	b083      	sub	sp, #12
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
 8005fee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005ff6:	605a      	str	r2, [r3, #4]
	return 0;
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	370c      	adds	r7, #12
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr

08006006 <_isatty>:

int _isatty(int file)
{
 8006006:	b480      	push	{r7}
 8006008:	b083      	sub	sp, #12
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
	return 1;
 800600e:	2301      	movs	r3, #1
}
 8006010:	4618      	mov	r0, r3
 8006012:	370c      	adds	r7, #12
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800601c:	b480      	push	{r7}
 800601e:	b085      	sub	sp, #20
 8006020:	af00      	add	r7, sp, #0
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	607a      	str	r2, [r7, #4]
	return 0;
 8006028:	2300      	movs	r3, #0
}
 800602a:	4618      	mov	r0, r3
 800602c:	3714      	adds	r7, #20
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr
	...

08006038 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006040:	4b11      	ldr	r3, [pc, #68]	; (8006088 <_sbrk+0x50>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d102      	bne.n	800604e <_sbrk+0x16>
		heap_end = &end;
 8006048:	4b0f      	ldr	r3, [pc, #60]	; (8006088 <_sbrk+0x50>)
 800604a:	4a10      	ldr	r2, [pc, #64]	; (800608c <_sbrk+0x54>)
 800604c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800604e:	4b0e      	ldr	r3, [pc, #56]	; (8006088 <_sbrk+0x50>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8006054:	4b0c      	ldr	r3, [pc, #48]	; (8006088 <_sbrk+0x50>)
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	4413      	add	r3, r2
 800605c:	466a      	mov	r2, sp
 800605e:	4293      	cmp	r3, r2
 8006060:	d907      	bls.n	8006072 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8006062:	f00a fa11 	bl	8010488 <__errno>
 8006066:	4603      	mov	r3, r0
 8006068:	220c      	movs	r2, #12
 800606a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800606c:	f04f 33ff 	mov.w	r3, #4294967295
 8006070:	e006      	b.n	8006080 <_sbrk+0x48>
	}

	heap_end += incr;
 8006072:	4b05      	ldr	r3, [pc, #20]	; (8006088 <_sbrk+0x50>)
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4413      	add	r3, r2
 800607a:	4a03      	ldr	r2, [pc, #12]	; (8006088 <_sbrk+0x50>)
 800607c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800607e:	68fb      	ldr	r3, [r7, #12]
}
 8006080:	4618      	mov	r0, r3
 8006082:	3710      	adds	r7, #16
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}
 8006088:	20000abc 	.word	0x20000abc
 800608c:	20009a50 	.word	0x20009a50

08006090 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006090:	b480      	push	{r7}
 8006092:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006094:	4b08      	ldr	r3, [pc, #32]	; (80060b8 <SystemInit+0x28>)
 8006096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800609a:	4a07      	ldr	r2, [pc, #28]	; (80060b8 <SystemInit+0x28>)
 800609c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80060a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80060a4:	4b04      	ldr	r3, [pc, #16]	; (80060b8 <SystemInit+0x28>)
 80060a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80060aa:	609a      	str	r2, [r3, #8]
#endif
}
 80060ac:	bf00      	nop
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr
 80060b6:	bf00      	nop
 80060b8:	e000ed00 	.word	0xe000ed00

080060bc <initTime>:
RTC_TimeTypeDef sTime;
RTC_DateTypeDef sDate;

RTC_HandleTypeDef * p_hrtc;

void initTime(void){
 80060bc:	b580      	push	{r7, lr}
 80060be:	af00      	add	r7, sp, #0
	timeState = TIMESTATE_INIT;
 80060c0:	4b04      	ldr	r3, [pc, #16]	; (80060d4 <initTime+0x18>)
 80060c2:	2200      	movs	r2, #0
 80060c4:	701a      	strb	r2, [r3, #0]
	p_hrtc = getHRTC();
 80060c6:	f7fc fc89 	bl	80029dc <getHRTC>
 80060ca:	4603      	mov	r3, r0
 80060cc:	4a02      	ldr	r2, [pc, #8]	; (80060d8 <initTime+0x1c>)
 80060ce:	6013      	str	r3, [r2, #0]
}
 80060d0:	bf00      	nop
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	20000ac0 	.word	0x20000ac0
 80060d8:	200079c8 	.word	0x200079c8

080060dc <setTime>:

void setTime(char * line, TIMESTATE successTimestate){
 80060dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060de:	b09f      	sub	sp, #124	; 0x7c
 80060e0:	af06      	add	r7, sp, #24
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	460b      	mov	r3, r1
 80060e6:	70fb      	strb	r3, [r7, #3]
	int minute;
	int second;
	int utc_offset;//quarter hours - can be negative


	year = util_atoi_n(line ,2);//year starts at position 9, 2 chars.
 80060e8:	2102      	movs	r1, #2
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 fa78 	bl	80065e0 <util_atoi_n>
 80060f0:	65f8      	str	r0, [r7, #92]	; 0x5c
	month = util_atoi_n(line + 3 ,2);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	3303      	adds	r3, #3
 80060f6:	2102      	movs	r1, #2
 80060f8:	4618      	mov	r0, r3
 80060fa:	f000 fa71 	bl	80065e0 <util_atoi_n>
 80060fe:	65b8      	str	r0, [r7, #88]	; 0x58
	day = util_atoi_n(line +  6,2);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	3306      	adds	r3, #6
 8006104:	2102      	movs	r1, #2
 8006106:	4618      	mov	r0, r3
 8006108:	f000 fa6a 	bl	80065e0 <util_atoi_n>
 800610c:	6578      	str	r0, [r7, #84]	; 0x54
	hour = util_atoi_n(line +  9,2);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	3309      	adds	r3, #9
 8006112:	2102      	movs	r1, #2
 8006114:	4618      	mov	r0, r3
 8006116:	f000 fa63 	bl	80065e0 <util_atoi_n>
 800611a:	6538      	str	r0, [r7, #80]	; 0x50
	minute = util_atoi_n(line + 12 ,2);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	330c      	adds	r3, #12
 8006120:	2102      	movs	r1, #2
 8006122:	4618      	mov	r0, r3
 8006124:	f000 fa5c 	bl	80065e0 <util_atoi_n>
 8006128:	64f8      	str	r0, [r7, #76]	; 0x4c
	second = util_atoi_n(line + 15 ,2);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	330f      	adds	r3, #15
 800612e:	2102      	movs	r1, #2
 8006130:	4618      	mov	r0, r3
 8006132:	f000 fa55 	bl	80065e0 <util_atoi_n>
 8006136:	64b8      	str	r0, [r7, #72]	; 0x48
	utc_offset = util_atoi_n(line + 18 ,2);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	3312      	adds	r3, #18
 800613c:	2102      	movs	r1, #2
 800613e:	4618      	mov	r0, r3
 8006140:	f000 fa4e 	bl	80065e0 <util_atoi_n>
 8006144:	6478      	str	r0, [r7, #68]	; 0x44

	sprintf(tbuffer, "CCLK Year,%i\r\n",year);
 8006146:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006148:	496a      	ldr	r1, [pc, #424]	; (80062f4 <setTime+0x218>)
 800614a:	486b      	ldr	r0, [pc, #428]	; (80062f8 <setTime+0x21c>)
 800614c:	f00b fa4e 	bl	80115ec <siprintf>
	Uart_SendString(tbuffer, pc_uart);
 8006150:	496a      	ldr	r1, [pc, #424]	; (80062fc <setTime+0x220>)
 8006152:	4869      	ldr	r0, [pc, #420]	; (80062f8 <setTime+0x21c>)
 8006154:	f7fb fc18 	bl	8001988 <Uart_SendString>

	if(year == 80){//not valid time
 8006158:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800615a:	2b50      	cmp	r3, #80	; 0x50
 800615c:	d107      	bne.n	800616e <setTime+0x92>

		Uart_SendString("CCLK Time invalid - Year = 80\r\n", pc_uart);
 800615e:	4967      	ldr	r1, [pc, #412]	; (80062fc <setTime+0x220>)
 8006160:	4867      	ldr	r0, [pc, #412]	; (8006300 <setTime+0x224>)
 8006162:	f7fb fc11 	bl	8001988 <Uart_SendString>
		timeState = TIMESTATE_ERR;
 8006166:	4b67      	ldr	r3, [pc, #412]	; (8006304 <setTime+0x228>)
 8006168:	2204      	movs	r2, #4
 800616a:	701a      	strb	r2, [r3, #0]

		timeState = successTimestate;
		getEpochTime(&epochTime);
	}

}
 800616c:	e0bd      	b.n	80062ea <setTime+0x20e>
		Uart_SendString("CCLK Time valid\r\n", pc_uart);
 800616e:	4963      	ldr	r1, [pc, #396]	; (80062fc <setTime+0x220>)
 8006170:	4865      	ldr	r0, [pc, #404]	; (8006308 <setTime+0x22c>)
 8006172:	f7fb fc09 	bl	8001988 <Uart_SendString>
		sprintf(tbuffer, "Valid time %i/%i/%i %i:%i:%i %i\r\n",year,month,day,hour,minute,second,utc_offset);
 8006176:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006178:	9304      	str	r3, [sp, #16]
 800617a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800617c:	9303      	str	r3, [sp, #12]
 800617e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006180:	9302      	str	r3, [sp, #8]
 8006182:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006184:	9301      	str	r3, [sp, #4]
 8006186:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006188:	9300      	str	r3, [sp, #0]
 800618a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800618c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800618e:	495f      	ldr	r1, [pc, #380]	; (800630c <setTime+0x230>)
 8006190:	4859      	ldr	r0, [pc, #356]	; (80062f8 <setTime+0x21c>)
 8006192:	f00b fa2b 	bl	80115ec <siprintf>
		Uart_SendString(tbuffer, pc_uart);
 8006196:	4959      	ldr	r1, [pc, #356]	; (80062fc <setTime+0x220>)
 8006198:	4857      	ldr	r0, [pc, #348]	; (80062f8 <setTime+0x21c>)
 800619a:	f7fb fbf5 	bl	8001988 <Uart_SendString>
		dateTime.tm_year = 100 + year;
 800619e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061a0:	3364      	adds	r3, #100	; 0x64
 80061a2:	623b      	str	r3, [r7, #32]
		dateTime.tm_mon = month - 1;
 80061a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061a6:	3b01      	subs	r3, #1
 80061a8:	61fb      	str	r3, [r7, #28]
		dateTime.tm_mday = day;
 80061aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061ac:	61bb      	str	r3, [r7, #24]
		dateTime.tm_hour = hour;
 80061ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061b0:	617b      	str	r3, [r7, #20]
		dateTime.tm_min = minute;
 80061b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061b4:	613b      	str	r3, [r7, #16]
		dateTime.tm_sec = second;
 80061b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061b8:	60fb      	str	r3, [r7, #12]
		time = mktime(&dateTime);
 80061ba:	f107 030c 	add.w	r3, r7, #12
 80061be:	4618      	mov	r0, r3
 80061c0:	f00a fb4a 	bl	8010858 <mktime>
 80061c4:	4602      	mov	r2, r0
 80061c6:	460b      	mov	r3, r1
 80061c8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		sprintf(tbuffer, "EpochTime in Local,%i\r\n",(int)time);
 80061cc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80061d0:	4613      	mov	r3, r2
 80061d2:	461a      	mov	r2, r3
 80061d4:	494e      	ldr	r1, [pc, #312]	; (8006310 <setTime+0x234>)
 80061d6:	4848      	ldr	r0, [pc, #288]	; (80062f8 <setTime+0x21c>)
 80061d8:	f00b fa08 	bl	80115ec <siprintf>
		Uart_SendString(tbuffer, pc_uart);
 80061dc:	4947      	ldr	r1, [pc, #284]	; (80062fc <setTime+0x220>)
 80061de:	4846      	ldr	r0, [pc, #280]	; (80062f8 <setTime+0x21c>)
 80061e0:	f7fb fbd2 	bl	8001988 <Uart_SendString>
		time -= (utc_offset * 15 * 60);
 80061e4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80061e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061ea:	f44f 7261 	mov.w	r2, #900	; 0x384
 80061ee:	fb02 f303 	mul.w	r3, r2, r3
 80061f2:	461a      	mov	r2, r3
 80061f4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80061f8:	1a84      	subs	r4, r0, r2
 80061fa:	eb61 0503 	sbc.w	r5, r1, r3
 80061fe:	e9c7 450c 	strd	r4, r5, [r7, #48]	; 0x30
		sprintf(tbuffer, "EpochTime in UTC,%i\r\n",(int)time);
 8006202:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006206:	4613      	mov	r3, r2
 8006208:	461a      	mov	r2, r3
 800620a:	4942      	ldr	r1, [pc, #264]	; (8006314 <setTime+0x238>)
 800620c:	483a      	ldr	r0, [pc, #232]	; (80062f8 <setTime+0x21c>)
 800620e:	f00b f9ed 	bl	80115ec <siprintf>
		Uart_SendString(tbuffer, pc_uart);
 8006212:	493a      	ldr	r1, [pc, #232]	; (80062fc <setTime+0x220>)
 8006214:	4838      	ldr	r0, [pc, #224]	; (80062f8 <setTime+0x21c>)
 8006216:	f7fb fbb7 	bl	8001988 <Uart_SendString>
		dateTime2_p = gmtime(&time);
 800621a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800621e:	4618      	mov	r0, r3
 8006220:	f00a f938 	bl	8010494 <gmtime>
 8006224:	6438      	str	r0, [r7, #64]	; 0x40
		sDate.Year = (uint8_t)(dateTime2_p->tm_year - 100);
 8006226:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006228:	695b      	ldr	r3, [r3, #20]
 800622a:	b2db      	uxtb	r3, r3
 800622c:	3b64      	subs	r3, #100	; 0x64
 800622e:	b2da      	uxtb	r2, r3
 8006230:	4b39      	ldr	r3, [pc, #228]	; (8006318 <setTime+0x23c>)
 8006232:	70da      	strb	r2, [r3, #3]
		sDate.Month = (uint8_t)(dateTime2_p->tm_mon + 1);
 8006234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	b2db      	uxtb	r3, r3
 800623a:	3301      	adds	r3, #1
 800623c:	b2da      	uxtb	r2, r3
 800623e:	4b36      	ldr	r3, [pc, #216]	; (8006318 <setTime+0x23c>)
 8006240:	705a      	strb	r2, [r3, #1]
		sDate.Date = (uint8_t)(dateTime2_p->tm_mday);
 8006242:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	b2da      	uxtb	r2, r3
 8006248:	4b33      	ldr	r3, [pc, #204]	; (8006318 <setTime+0x23c>)
 800624a:	709a      	strb	r2, [r3, #2]
		sDate.WeekDay = 0;
 800624c:	4b32      	ldr	r3, [pc, #200]	; (8006318 <setTime+0x23c>)
 800624e:	2200      	movs	r2, #0
 8006250:	701a      	strb	r2, [r3, #0]
		sTime.Hours = (uint8_t)(dateTime2_p->tm_hour);
 8006252:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	b2da      	uxtb	r2, r3
 8006258:	4b30      	ldr	r3, [pc, #192]	; (800631c <setTime+0x240>)
 800625a:	701a      	strb	r2, [r3, #0]
		sTime.Minutes = (uint8_t)(dateTime2_p->tm_min);
 800625c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	b2da      	uxtb	r2, r3
 8006262:	4b2e      	ldr	r3, [pc, #184]	; (800631c <setTime+0x240>)
 8006264:	705a      	strb	r2, [r3, #1]
		sTime.Seconds = (uint8_t)(dateTime2_p->tm_sec);
 8006266:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	b2da      	uxtb	r2, r3
 800626c:	4b2b      	ldr	r3, [pc, #172]	; (800631c <setTime+0x240>)
 800626e:	709a      	strb	r2, [r3, #2]
		sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8006270:	4b2a      	ldr	r3, [pc, #168]	; (800631c <setTime+0x240>)
 8006272:	2200      	movs	r2, #0
 8006274:	60da      	str	r2, [r3, #12]
		sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8006276:	4b29      	ldr	r3, [pc, #164]	; (800631c <setTime+0x240>)
 8006278:	2200      	movs	r2, #0
 800627a:	611a      	str	r2, [r3, #16]
		sprintf(tbuffer, "RTCTime %u/%u/%u %u:%u:%u %lu \r\n",(unsigned int)sDate.Year,(unsigned int)sDate.Month,(unsigned int)sDate.Date,(unsigned int)sTime.Hours,(unsigned int)sTime.Minutes,(unsigned int)sTime.Seconds, (unsigned long)time);
 800627c:	4b26      	ldr	r3, [pc, #152]	; (8006318 <setTime+0x23c>)
 800627e:	78db      	ldrb	r3, [r3, #3]
 8006280:	461e      	mov	r6, r3
 8006282:	4b25      	ldr	r3, [pc, #148]	; (8006318 <setTime+0x23c>)
 8006284:	785b      	ldrb	r3, [r3, #1]
 8006286:	469c      	mov	ip, r3
 8006288:	4b23      	ldr	r3, [pc, #140]	; (8006318 <setTime+0x23c>)
 800628a:	789b      	ldrb	r3, [r3, #2]
 800628c:	4619      	mov	r1, r3
 800628e:	4b23      	ldr	r3, [pc, #140]	; (800631c <setTime+0x240>)
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	4618      	mov	r0, r3
 8006294:	4b21      	ldr	r3, [pc, #132]	; (800631c <setTime+0x240>)
 8006296:	785b      	ldrb	r3, [r3, #1]
 8006298:	461c      	mov	r4, r3
 800629a:	4b20      	ldr	r3, [pc, #128]	; (800631c <setTime+0x240>)
 800629c:	789b      	ldrb	r3, [r3, #2]
 800629e:	461d      	mov	r5, r3
 80062a0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80062a4:	4613      	mov	r3, r2
 80062a6:	9304      	str	r3, [sp, #16]
 80062a8:	9503      	str	r5, [sp, #12]
 80062aa:	9402      	str	r4, [sp, #8]
 80062ac:	9001      	str	r0, [sp, #4]
 80062ae:	9100      	str	r1, [sp, #0]
 80062b0:	4663      	mov	r3, ip
 80062b2:	4632      	mov	r2, r6
 80062b4:	491a      	ldr	r1, [pc, #104]	; (8006320 <setTime+0x244>)
 80062b6:	4810      	ldr	r0, [pc, #64]	; (80062f8 <setTime+0x21c>)
 80062b8:	f00b f998 	bl	80115ec <siprintf>
		Uart_SendString(tbuffer, pc_uart);
 80062bc:	490f      	ldr	r1, [pc, #60]	; (80062fc <setTime+0x220>)
 80062be:	480e      	ldr	r0, [pc, #56]	; (80062f8 <setTime+0x21c>)
 80062c0:	f7fb fb62 	bl	8001988 <Uart_SendString>
		RTC_HandleTypeDef * p_hrtc = getHRTC();
 80062c4:	f7fc fb8a 	bl	80029dc <getHRTC>
 80062c8:	63f8      	str	r0, [r7, #60]	; 0x3c
		HAL_RTC_SetTime(p_hrtc, &sTime, RTC_FORMAT_BIN);
 80062ca:	2200      	movs	r2, #0
 80062cc:	4913      	ldr	r1, [pc, #76]	; (800631c <setTime+0x240>)
 80062ce:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80062d0:	f002 fb37 	bl	8008942 <HAL_RTC_SetTime>
		HAL_RTC_SetDate(p_hrtc, &sDate, RTC_FORMAT_BIN);
 80062d4:	2200      	movs	r2, #0
 80062d6:	4910      	ldr	r1, [pc, #64]	; (8006318 <setTime+0x23c>)
 80062d8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80062da:	f002 fc4d 	bl	8008b78 <HAL_RTC_SetDate>
		timeState = successTimestate;
 80062de:	4a09      	ldr	r2, [pc, #36]	; (8006304 <setTime+0x228>)
 80062e0:	78fb      	ldrb	r3, [r7, #3]
 80062e2:	7013      	strb	r3, [r2, #0]
		getEpochTime(&epochTime);
 80062e4:	480f      	ldr	r0, [pc, #60]	; (8006324 <setTime+0x248>)
 80062e6:	f000 f81f 	bl	8006328 <getEpochTime>
}
 80062ea:	bf00      	nop
 80062ec:	3764      	adds	r7, #100	; 0x64
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062f2:	bf00      	nop
 80062f4:	0801869c 	.word	0x0801869c
 80062f8:	20007960 	.word	0x20007960
 80062fc:	20004094 	.word	0x20004094
 8006300:	080186ac 	.word	0x080186ac
 8006304:	20000ac0 	.word	0x20000ac0
 8006308:	080186cc 	.word	0x080186cc
 800630c:	080186e0 	.word	0x080186e0
 8006310:	08018704 	.word	0x08018704
 8006314:	0801871c 	.word	0x0801871c
 8006318:	200079c4 	.word	0x200079c4
 800631c:	2000794c 	.word	0x2000794c
 8006320:	08018734 	.word	0x08018734
 8006324:	20000ac4 	.word	0x20000ac4

08006328 <getEpochTime>:



void getEpochTime(EpochTime * epoch){
 8006328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800632a:	b09b      	sub	sp, #108	; 0x6c
 800632c:	af08      	add	r7, sp, #32
 800632e:	6078      	str	r0, [r7, #4]
	if(timeState == TIMESTATE_OK_NITZ || timeState == TIMESTATE_OK_SERVER){
 8006330:	4b4d      	ldr	r3, [pc, #308]	; (8006468 <getEpochTime+0x140>)
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	2b01      	cmp	r3, #1
 8006336:	d004      	beq.n	8006342 <getEpochTime+0x1a>
 8006338:	4b4b      	ldr	r3, [pc, #300]	; (8006468 <getEpochTime+0x140>)
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	2b02      	cmp	r3, #2
 800633e:	f040 8087 	bne.w	8006450 <getEpochTime+0x128>


		RTC_HandleTypeDef * p_hrtc = getHRTC();
 8006342:	f7fc fb4b 	bl	80029dc <getHRTC>
 8006346:	6478      	str	r0, [r7, #68]	; 0x44

		HAL_RTC_GetTime(p_hrtc, &sTime, RTC_FORMAT_BIN);
 8006348:	2200      	movs	r2, #0
 800634a:	4948      	ldr	r1, [pc, #288]	; (800646c <getEpochTime+0x144>)
 800634c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800634e:	f002 fbb5 	bl	8008abc <HAL_RTC_GetTime>
		HAL_RTC_GetDate(p_hrtc, &sDate, RTC_FORMAT_BIN);
 8006352:	2200      	movs	r2, #0
 8006354:	4946      	ldr	r1, [pc, #280]	; (8006470 <getEpochTime+0x148>)
 8006356:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8006358:	f002 fcb5 	bl	8008cc6 <HAL_RTC_GetDate>

		struct tm dateTime;
		time_t time;

		dateTime.tm_year = 100 + sDate.Year;
 800635c:	4b44      	ldr	r3, [pc, #272]	; (8006470 <getEpochTime+0x148>)
 800635e:	78db      	ldrb	r3, [r3, #3]
 8006360:	3364      	adds	r3, #100	; 0x64
 8006362:	61fb      	str	r3, [r7, #28]
		dateTime.tm_mon = sDate.Month - 1;
 8006364:	4b42      	ldr	r3, [pc, #264]	; (8006470 <getEpochTime+0x148>)
 8006366:	785b      	ldrb	r3, [r3, #1]
 8006368:	3b01      	subs	r3, #1
 800636a:	61bb      	str	r3, [r7, #24]
		dateTime.tm_mday = sDate.Date;
 800636c:	4b40      	ldr	r3, [pc, #256]	; (8006470 <getEpochTime+0x148>)
 800636e:	789b      	ldrb	r3, [r3, #2]
 8006370:	617b      	str	r3, [r7, #20]
		dateTime.tm_hour = sTime.Hours;
 8006372:	4b3e      	ldr	r3, [pc, #248]	; (800646c <getEpochTime+0x144>)
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	613b      	str	r3, [r7, #16]
		dateTime.tm_min = sTime.Minutes;
 8006378:	4b3c      	ldr	r3, [pc, #240]	; (800646c <getEpochTime+0x144>)
 800637a:	785b      	ldrb	r3, [r3, #1]
 800637c:	60fb      	str	r3, [r7, #12]
		dateTime.tm_sec = sTime.Seconds;
 800637e:	4b3b      	ldr	r3, [pc, #236]	; (800646c <getEpochTime+0x144>)
 8006380:	789b      	ldrb	r3, [r3, #2]
 8006382:	60bb      	str	r3, [r7, #8]

		time = mktime(&dateTime);
 8006384:	f107 0308 	add.w	r3, r7, #8
 8006388:	4618      	mov	r0, r3
 800638a:	f00a fa65 	bl	8010858 <mktime>
 800638e:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38

		uint32_t sub = sTime.SubSeconds;
 8006392:	4b36      	ldr	r3, [pc, #216]	; (800646c <getEpochTime+0x144>)
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	637b      	str	r3, [r7, #52]	; 0x34
		uint32_t fract = sTime.SecondFraction;
 8006398:	4b34      	ldr	r3, [pc, #208]	; (800646c <getEpochTime+0x144>)
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	633b      	str	r3, [r7, #48]	; 0x30



		uint32_t ms;
		ms = (unsigned int)(((float)fract-(float)sub)/((float)fract+1) * 1000.0);
 800639e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a0:	ee07 3a90 	vmov	s15, r3
 80063a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80063a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063aa:	ee07 3a90 	vmov	s15, r3
 80063ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80063b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b8:	ee07 3a90 	vmov	s15, r3
 80063bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063c8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80063cc:	ee16 0a90 	vmov	r0, s13
 80063d0:	f7fa f8d2 	bl	8000578 <__aeabi_f2d>
 80063d4:	f04f 0200 	mov.w	r2, #0
 80063d8:	4b26      	ldr	r3, [pc, #152]	; (8006474 <getEpochTime+0x14c>)
 80063da:	f7fa f925 	bl	8000628 <__aeabi_dmul>
 80063de:	4602      	mov	r2, r0
 80063e0:	460b      	mov	r3, r1
 80063e2:	4610      	mov	r0, r2
 80063e4:	4619      	mov	r1, r3
 80063e6:	f7fa fbf7 	bl	8000bd8 <__aeabi_d2uiz>
 80063ea:	4603      	mov	r3, r0
 80063ec:	62fb      	str	r3, [r7, #44]	; 0x2c

		epoch->seconds = (uint32_t)time;
 80063ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	601a      	str	r2, [r3, #0]
		epoch->ms = (uint16_t)ms;
 80063f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f6:	b29a      	uxth	r2, r3
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	809a      	strh	r2, [r3, #4]


//		sprintf(pbuffer, "Fract:%u Sub:%u = %03u\r\n",(unsigned int)fract, (unsigned int)sub,ms);
//		Uart_sendstring(pbuffer, pc_uart);

		sprintf(tbuffer, "RTCTime %02u/%02u/%02u %02u:%02u:%02u.%03u %lu %03u\r\n",(unsigned int)sDate.Year,(unsigned int)sDate.Month,(unsigned int)sDate.Date,(unsigned int)sTime.Hours,(unsigned int)sTime.Minutes,(unsigned int)sTime.Seconds,(unsigned int)epoch->ms, (unsigned long)epoch->seconds, (unsigned int)epoch->ms);
 80063fc:	4b1c      	ldr	r3, [pc, #112]	; (8006470 <getEpochTime+0x148>)
 80063fe:	78db      	ldrb	r3, [r3, #3]
 8006400:	469c      	mov	ip, r3
 8006402:	4b1b      	ldr	r3, [pc, #108]	; (8006470 <getEpochTime+0x148>)
 8006404:	785b      	ldrb	r3, [r3, #1]
 8006406:	469e      	mov	lr, r3
 8006408:	4b19      	ldr	r3, [pc, #100]	; (8006470 <getEpochTime+0x148>)
 800640a:	789b      	ldrb	r3, [r3, #2]
 800640c:	4619      	mov	r1, r3
 800640e:	4b17      	ldr	r3, [pc, #92]	; (800646c <getEpochTime+0x144>)
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	4618      	mov	r0, r3
 8006414:	4b15      	ldr	r3, [pc, #84]	; (800646c <getEpochTime+0x144>)
 8006416:	785b      	ldrb	r3, [r3, #1]
 8006418:	461c      	mov	r4, r3
 800641a:	4b14      	ldr	r3, [pc, #80]	; (800646c <getEpochTime+0x144>)
 800641c:	789b      	ldrb	r3, [r3, #2]
 800641e:	461d      	mov	r5, r3
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	889b      	ldrh	r3, [r3, #4]
 8006424:	461e      	mov	r6, r3
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	8892      	ldrh	r2, [r2, #4]
 800642e:	9206      	str	r2, [sp, #24]
 8006430:	9305      	str	r3, [sp, #20]
 8006432:	9604      	str	r6, [sp, #16]
 8006434:	9503      	str	r5, [sp, #12]
 8006436:	9402      	str	r4, [sp, #8]
 8006438:	9001      	str	r0, [sp, #4]
 800643a:	9100      	str	r1, [sp, #0]
 800643c:	4673      	mov	r3, lr
 800643e:	4662      	mov	r2, ip
 8006440:	490d      	ldr	r1, [pc, #52]	; (8006478 <getEpochTime+0x150>)
 8006442:	480e      	ldr	r0, [pc, #56]	; (800647c <getEpochTime+0x154>)
 8006444:	f00b f8d2 	bl	80115ec <siprintf>
		Debug(tbuffer);
 8006448:	480c      	ldr	r0, [pc, #48]	; (800647c <getEpochTime+0x154>)
 800644a:	f7ff f951 	bl	80056f0 <Debug>
	if(timeState == TIMESTATE_OK_NITZ || timeState == TIMESTATE_OK_SERVER){
 800644e:	e006      	b.n	800645e <getEpochTime+0x136>

	}
	else{
		epoch->seconds = 0;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	601a      	str	r2, [r3, #0]
		epoch->ms = 0;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	809a      	strh	r2, [r3, #4]
	}


}
 800645c:	bf00      	nop
 800645e:	bf00      	nop
 8006460:	374c      	adds	r7, #76	; 0x4c
 8006462:	46bd      	mov	sp, r7
 8006464:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006466:	bf00      	nop
 8006468:	20000ac0 	.word	0x20000ac0
 800646c:	2000794c 	.word	0x2000794c
 8006470:	200079c4 	.word	0x200079c4
 8006474:	408f4000 	.word	0x408f4000
 8006478:	08018758 	.word	0x08018758
 800647c:	20007960 	.word	0x20007960

08006480 <getTimeState>:

TIMESTATE getTimeState(void){
 8006480:	b480      	push	{r7}
 8006482:	af00      	add	r7, sp, #0
	return timeState;
 8006484:	4b03      	ldr	r3, [pc, #12]	; (8006494 <getTimeState+0x14>)
 8006486:	781b      	ldrb	r3, [r3, #0]
}
 8006488:	4618      	mov	r0, r3
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr
 8006492:	bf00      	nop
 8006494:	20000ac0 	.word	0x20000ac0

08006498 <getYearCharDirName>:

void getYearCharDirName(char * buf){
 8006498:	b580      	push	{r7, lr}
 800649a:	b082      	sub	sp, #8
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
	HAL_RTC_GetTime(p_hrtc, &sTime, RTC_FORMAT_BIN);
 80064a0:	4b0d      	ldr	r3, [pc, #52]	; (80064d8 <getYearCharDirName+0x40>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	2200      	movs	r2, #0
 80064a6:	490d      	ldr	r1, [pc, #52]	; (80064dc <getYearCharDirName+0x44>)
 80064a8:	4618      	mov	r0, r3
 80064aa:	f002 fb07 	bl	8008abc <HAL_RTC_GetTime>
	HAL_RTC_GetDate(p_hrtc, &sDate, RTC_FORMAT_BIN);
 80064ae:	4b0a      	ldr	r3, [pc, #40]	; (80064d8 <getYearCharDirName+0x40>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	2200      	movs	r2, #0
 80064b4:	490a      	ldr	r1, [pc, #40]	; (80064e0 <getYearCharDirName+0x48>)
 80064b6:	4618      	mov	r0, r3
 80064b8:	f002 fc05 	bl	8008cc6 <HAL_RTC_GetDate>
	sprintf(buf, "/20%02u_%02u",(unsigned int)sDate.Year,(unsigned int)sDate.Month);
 80064bc:	4b08      	ldr	r3, [pc, #32]	; (80064e0 <getYearCharDirName+0x48>)
 80064be:	78db      	ldrb	r3, [r3, #3]
 80064c0:	461a      	mov	r2, r3
 80064c2:	4b07      	ldr	r3, [pc, #28]	; (80064e0 <getYearCharDirName+0x48>)
 80064c4:	785b      	ldrb	r3, [r3, #1]
 80064c6:	4907      	ldr	r1, [pc, #28]	; (80064e4 <getYearCharDirName+0x4c>)
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f00b f88f 	bl	80115ec <siprintf>
}
 80064ce:	bf00      	nop
 80064d0:	3708      	adds	r7, #8
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop
 80064d8:	200079c8 	.word	0x200079c8
 80064dc:	2000794c 	.word	0x2000794c
 80064e0:	200079c4 	.word	0x200079c4
 80064e4:	08018790 	.word	0x08018790

080064e8 <getDateCharFileName>:

void getDateCharFileName(char * buf){
 80064e8:	b590      	push	{r4, r7, lr}
 80064ea:	b087      	sub	sp, #28
 80064ec:	af04      	add	r7, sp, #16
 80064ee:	6078      	str	r0, [r7, #4]
	HAL_RTC_GetTime(p_hrtc, &sTime, RTC_FORMAT_BIN);
 80064f0:	4b14      	ldr	r3, [pc, #80]	; (8006544 <getDateCharFileName+0x5c>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	2200      	movs	r2, #0
 80064f6:	4914      	ldr	r1, [pc, #80]	; (8006548 <getDateCharFileName+0x60>)
 80064f8:	4618      	mov	r0, r3
 80064fa:	f002 fadf 	bl	8008abc <HAL_RTC_GetTime>
	HAL_RTC_GetDate(p_hrtc, &sDate, RTC_FORMAT_BIN);
 80064fe:	4b11      	ldr	r3, [pc, #68]	; (8006544 <getDateCharFileName+0x5c>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	2200      	movs	r2, #0
 8006504:	4911      	ldr	r1, [pc, #68]	; (800654c <getDateCharFileName+0x64>)
 8006506:	4618      	mov	r0, r3
 8006508:	f002 fbdd 	bl	8008cc6 <HAL_RTC_GetDate>
	sprintf(buf, "/20%02u_%02u/%02u%02u%02u.txt",(unsigned int)sDate.Year,(unsigned int)sDate.Month,(unsigned int)sDate.Year,(unsigned int)sDate.Month,(unsigned int)sDate.Date);
 800650c:	4b0f      	ldr	r3, [pc, #60]	; (800654c <getDateCharFileName+0x64>)
 800650e:	78db      	ldrb	r3, [r3, #3]
 8006510:	4618      	mov	r0, r3
 8006512:	4b0e      	ldr	r3, [pc, #56]	; (800654c <getDateCharFileName+0x64>)
 8006514:	785b      	ldrb	r3, [r3, #1]
 8006516:	461c      	mov	r4, r3
 8006518:	4b0c      	ldr	r3, [pc, #48]	; (800654c <getDateCharFileName+0x64>)
 800651a:	78db      	ldrb	r3, [r3, #3]
 800651c:	461a      	mov	r2, r3
 800651e:	4b0b      	ldr	r3, [pc, #44]	; (800654c <getDateCharFileName+0x64>)
 8006520:	785b      	ldrb	r3, [r3, #1]
 8006522:	4619      	mov	r1, r3
 8006524:	4b09      	ldr	r3, [pc, #36]	; (800654c <getDateCharFileName+0x64>)
 8006526:	789b      	ldrb	r3, [r3, #2]
 8006528:	9302      	str	r3, [sp, #8]
 800652a:	9101      	str	r1, [sp, #4]
 800652c:	9200      	str	r2, [sp, #0]
 800652e:	4623      	mov	r3, r4
 8006530:	4602      	mov	r2, r0
 8006532:	4907      	ldr	r1, [pc, #28]	; (8006550 <getDateCharFileName+0x68>)
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f00b f859 	bl	80115ec <siprintf>
}
 800653a:	bf00      	nop
 800653c:	370c      	adds	r7, #12
 800653e:	46bd      	mov	sp, r7
 8006540:	bd90      	pop	{r4, r7, pc}
 8006542:	bf00      	nop
 8006544:	200079c8 	.word	0x200079c8
 8006548:	2000794c 	.word	0x2000794c
 800654c:	200079c4 	.word	0x200079c4
 8006550:	080187a0 	.word	0x080187a0

08006554 <getHour>:

uint8_t getHour(void){
 8006554:	b580      	push	{r7, lr}
 8006556:	af00      	add	r7, sp, #0
	HAL_RTC_GetTime(p_hrtc, &sTime, RTC_FORMAT_BIN);
 8006558:	4b08      	ldr	r3, [pc, #32]	; (800657c <getHour+0x28>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	2200      	movs	r2, #0
 800655e:	4908      	ldr	r1, [pc, #32]	; (8006580 <getHour+0x2c>)
 8006560:	4618      	mov	r0, r3
 8006562:	f002 faab 	bl	8008abc <HAL_RTC_GetTime>
	HAL_RTC_GetDate(p_hrtc, &sDate, RTC_FORMAT_BIN);
 8006566:	4b05      	ldr	r3, [pc, #20]	; (800657c <getHour+0x28>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	2200      	movs	r2, #0
 800656c:	4905      	ldr	r1, [pc, #20]	; (8006584 <getHour+0x30>)
 800656e:	4618      	mov	r0, r3
 8006570:	f002 fba9 	bl	8008cc6 <HAL_RTC_GetDate>
	return (uint8_t)sTime.Hours;
 8006574:	4b02      	ldr	r3, [pc, #8]	; (8006580 <getHour+0x2c>)
 8006576:	781b      	ldrb	r3, [r3, #0]
}
 8006578:	4618      	mov	r0, r3
 800657a:	bd80      	pop	{r7, pc}
 800657c:	200079c8 	.word	0x200079c8
 8006580:	2000794c 	.word	0x2000794c
 8006584:	200079c4 	.word	0x200079c4

08006588 <getTimeChar>:

void getTimeChar(char * buf){
 8006588:	b580      	push	{r7, lr}
 800658a:	b084      	sub	sp, #16
 800658c:	af02      	add	r7, sp, #8
 800658e:	6078      	str	r0, [r7, #4]
	HAL_RTC_GetTime(p_hrtc, &sTime, RTC_FORMAT_BIN);
 8006590:	4b0f      	ldr	r3, [pc, #60]	; (80065d0 <getTimeChar+0x48>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	2200      	movs	r2, #0
 8006596:	490f      	ldr	r1, [pc, #60]	; (80065d4 <getTimeChar+0x4c>)
 8006598:	4618      	mov	r0, r3
 800659a:	f002 fa8f 	bl	8008abc <HAL_RTC_GetTime>
	HAL_RTC_GetDate(p_hrtc, &sDate, RTC_FORMAT_BIN);
 800659e:	4b0c      	ldr	r3, [pc, #48]	; (80065d0 <getTimeChar+0x48>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	2200      	movs	r2, #0
 80065a4:	490c      	ldr	r1, [pc, #48]	; (80065d8 <getTimeChar+0x50>)
 80065a6:	4618      	mov	r0, r3
 80065a8:	f002 fb8d 	bl	8008cc6 <HAL_RTC_GetDate>
	sprintf(buf, "%02u:%02u:%02u UTC",(unsigned int)sTime.Hours,(unsigned int)sTime.Minutes,(unsigned int)sTime.Seconds);
 80065ac:	4b09      	ldr	r3, [pc, #36]	; (80065d4 <getTimeChar+0x4c>)
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	461a      	mov	r2, r3
 80065b2:	4b08      	ldr	r3, [pc, #32]	; (80065d4 <getTimeChar+0x4c>)
 80065b4:	785b      	ldrb	r3, [r3, #1]
 80065b6:	4619      	mov	r1, r3
 80065b8:	4b06      	ldr	r3, [pc, #24]	; (80065d4 <getTimeChar+0x4c>)
 80065ba:	789b      	ldrb	r3, [r3, #2]
 80065bc:	9300      	str	r3, [sp, #0]
 80065be:	460b      	mov	r3, r1
 80065c0:	4906      	ldr	r1, [pc, #24]	; (80065dc <getTimeChar+0x54>)
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f00b f812 	bl	80115ec <siprintf>
}
 80065c8:	bf00      	nop
 80065ca:	3708      	adds	r7, #8
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}
 80065d0:	200079c8 	.word	0x200079c8
 80065d4:	2000794c 	.word	0x2000794c
 80065d8:	200079c4 	.word	0x200079c4
 80065dc:	080187c0 	.word	0x080187c0

080065e0 <util_atoi_n>:
#include "util.h"
//#include "UartRingbuffer.h"

int util_atoi_n(char *c, int n) {
 80065e0:	b480      	push	{r7}
 80065e2:	b085      	sub	sp, #20
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
    int result = 0;
 80065ea:	2300      	movs	r3, #0
 80065ec:	60fb      	str	r3, [r7, #12]
    int multiplier = 1;
 80065ee:	2301      	movs	r3, #1
 80065f0:	60bb      	str	r3, [r7, #8]
//    Uart_write('#', pc_uart);
//    Uart_write(&c, pc_uart);



    if (c && *c == '-') {
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d00a      	beq.n	800660e <util_atoi_n+0x2e>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	2b2d      	cmp	r3, #45	; 0x2d
 80065fe:	d106      	bne.n	800660e <util_atoi_n+0x2e>
        multiplier = -1;
 8006600:	f04f 33ff 	mov.w	r3, #4294967295
 8006604:	60bb      	str	r3, [r7, #8]
        c++;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	3301      	adds	r3, #1
 800660a:	607b      	str	r3, [r7, #4]
 800660c:	e00e      	b.n	800662c <util_atoi_n+0x4c>
    }

    else if (c && *c == '+') {
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d009      	beq.n	8006628 <util_atoi_n+0x48>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	2b2b      	cmp	r3, #43	; 0x2b
 800661a:	d105      	bne.n	8006628 <util_atoi_n+0x48>
            multiplier = 1;
 800661c:	2301      	movs	r3, #1
 800661e:	60bb      	str	r3, [r7, #8]
            c++;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	3301      	adds	r3, #1
 8006624:	607b      	str	r3, [r7, #4]
 8006626:	e001      	b.n	800662c <util_atoi_n+0x4c>
    }

    else {
        multiplier = 1;
 8006628:	2301      	movs	r3, #1
 800662a:	60bb      	str	r3, [r7, #8]
    }

    while (*c && n) {
 800662c:	e01e      	b.n	800666c <util_atoi_n+0x8c>
        if (*c < '0' || *c > '9') {
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	2b2f      	cmp	r3, #47	; 0x2f
 8006634:	d903      	bls.n	800663e <util_atoi_n+0x5e>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	2b39      	cmp	r3, #57	; 0x39
 800663c:	d904      	bls.n	8006648 <util_atoi_n+0x68>
            return result * multiplier;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	68ba      	ldr	r2, [r7, #8]
 8006642:	fb02 f303 	mul.w	r3, r2, r3
 8006646:	e01c      	b.n	8006682 <util_atoi_n+0xa2>
        }



        result *= 10;
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	4613      	mov	r3, r2
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	4413      	add	r3, r2
 8006650:	005b      	lsls	r3, r3, #1
 8006652:	60fb      	str	r3, [r7, #12]
        result += *c - '0';
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	3b30      	subs	r3, #48	; 0x30
 800665a:	68fa      	ldr	r2, [r7, #12]
 800665c:	4413      	add	r3, r2
 800665e:	60fb      	str	r3, [r7, #12]
        c++;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	3301      	adds	r3, #1
 8006664:	607b      	str	r3, [r7, #4]
        n--;
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	3b01      	subs	r3, #1
 800666a:	603b      	str	r3, [r7, #0]
    while (*c && n) {
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d002      	beq.n	800667a <util_atoi_n+0x9a>
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d1d9      	bne.n	800662e <util_atoi_n+0x4e>
    }
    return (result * multiplier);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	68ba      	ldr	r2, [r7, #8]
 800667e:	fb02 f303 	mul.w	r3, r2, r3
}
 8006682:	4618      	mov	r0, r3
 8006684:	3714      	adds	r7, #20
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr

0800668e <appendStr>:

int appendStr(char *dst, char *src, int beginIndex) {
 800668e:	b480      	push	{r7}
 8006690:	b087      	sub	sp, #28
 8006692:	af00      	add	r7, sp, #0
 8006694:	60f8      	str	r0, [r7, #12]
 8006696:	60b9      	str	r1, [r7, #8]
 8006698:	607a      	str	r2, [r7, #4]
    int di = beginIndex;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	617b      	str	r3, [r7, #20]
    int si = 0;
 800669e:	2300      	movs	r3, #0
 80066a0:	613b      	str	r3, [r7, #16]
//    int append = 0;

    while (src[si]) {
 80066a2:	e00d      	b.n	80066c0 <appendStr+0x32>
//        if (dst[di] == 0) {
//            append = 1;
//        }
//        if (append) {
            dst[di] = src[si];
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	68ba      	ldr	r2, [r7, #8]
 80066a8:	441a      	add	r2, r3
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	68f9      	ldr	r1, [r7, #12]
 80066ae:	440b      	add	r3, r1
 80066b0:	7812      	ldrb	r2, [r2, #0]
 80066b2:	701a      	strb	r2, [r3, #0]
            si++;
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	3301      	adds	r3, #1
 80066b8:	613b      	str	r3, [r7, #16]
//        }
        di++;
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	3301      	adds	r3, #1
 80066be:	617b      	str	r3, [r7, #20]
    while (src[si]) {
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	68ba      	ldr	r2, [r7, #8]
 80066c4:	4413      	add	r3, r2
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d1eb      	bne.n	80066a4 <appendStr+0x16>
    }
    dst[di] = 0;
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	4413      	add	r3, r2
 80066d2:	2200      	movs	r2, #0
 80066d4:	701a      	strb	r2, [r3, #0]

    return di;
 80066d6:	697b      	ldr	r3, [r7, #20]
}
 80066d8:	4618      	mov	r0, r3
 80066da:	371c      	adds	r7, #28
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80066e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800671c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80066e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80066ea:	e003      	b.n	80066f4 <LoopCopyDataInit>

080066ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80066ec:	4b0c      	ldr	r3, [pc, #48]	; (8006720 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80066ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80066f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80066f2:	3104      	adds	r1, #4

080066f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80066f4:	480b      	ldr	r0, [pc, #44]	; (8006724 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80066f6:	4b0c      	ldr	r3, [pc, #48]	; (8006728 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80066f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80066fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80066fc:	d3f6      	bcc.n	80066ec <CopyDataInit>
  ldr  r2, =_sbss
 80066fe:	4a0b      	ldr	r2, [pc, #44]	; (800672c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006700:	e002      	b.n	8006708 <LoopFillZerobss>

08006702 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006702:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006704:	f842 3b04 	str.w	r3, [r2], #4

08006708 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006708:	4b09      	ldr	r3, [pc, #36]	; (8006730 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800670a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800670c:	d3f9      	bcc.n	8006702 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800670e:	f7ff fcbf 	bl	8006090 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006712:	f009 ff8d 	bl	8010630 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006716:	f7fb fb63 	bl	8001de0 <main>
  bx  lr    
 800671a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800671c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8006720:	08019158 	.word	0x08019158
  ldr  r0, =_sdata
 8006724:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006728:	2000025c 	.word	0x2000025c
  ldr  r2, =_sbss
 800672c:	20000260 	.word	0x20000260
  ldr  r3, = _ebss
 8006730:	20009a4c 	.word	0x20009a4c

08006734 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006734:	e7fe      	b.n	8006734 <ADC_IRQHandler>
	...

08006738 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800673c:	4b0e      	ldr	r3, [pc, #56]	; (8006778 <HAL_Init+0x40>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a0d      	ldr	r2, [pc, #52]	; (8006778 <HAL_Init+0x40>)
 8006742:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006746:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006748:	4b0b      	ldr	r3, [pc, #44]	; (8006778 <HAL_Init+0x40>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a0a      	ldr	r2, [pc, #40]	; (8006778 <HAL_Init+0x40>)
 800674e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006752:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006754:	4b08      	ldr	r3, [pc, #32]	; (8006778 <HAL_Init+0x40>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a07      	ldr	r2, [pc, #28]	; (8006778 <HAL_Init+0x40>)
 800675a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800675e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006760:	2003      	movs	r0, #3
 8006762:	f000 fd35 	bl	80071d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006766:	2000      	movs	r0, #0
 8006768:	f000 f808 	bl	800677c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800676c:	f7fe fff6 	bl	800575c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006770:	2300      	movs	r3, #0
}
 8006772:	4618      	mov	r0, r3
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	40023c00 	.word	0x40023c00

0800677c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006784:	4b12      	ldr	r3, [pc, #72]	; (80067d0 <HAL_InitTick+0x54>)
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	4b12      	ldr	r3, [pc, #72]	; (80067d4 <HAL_InitTick+0x58>)
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	4619      	mov	r1, r3
 800678e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006792:	fbb3 f3f1 	udiv	r3, r3, r1
 8006796:	fbb2 f3f3 	udiv	r3, r2, r3
 800679a:	4618      	mov	r0, r3
 800679c:	f000 fd4d 	bl	800723a <HAL_SYSTICK_Config>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d001      	beq.n	80067aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	e00e      	b.n	80067c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2b0f      	cmp	r3, #15
 80067ae:	d80a      	bhi.n	80067c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80067b0:	2200      	movs	r2, #0
 80067b2:	6879      	ldr	r1, [r7, #4]
 80067b4:	f04f 30ff 	mov.w	r0, #4294967295
 80067b8:	f000 fd15 	bl	80071e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80067bc:	4a06      	ldr	r2, [pc, #24]	; (80067d8 <HAL_InitTick+0x5c>)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80067c2:	2300      	movs	r3, #0
 80067c4:	e000      	b.n	80067c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3708      	adds	r7, #8
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}
 80067d0:	20000014 	.word	0x20000014
 80067d4:	2000001c 	.word	0x2000001c
 80067d8:	20000018 	.word	0x20000018

080067dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80067dc:	b480      	push	{r7}
 80067de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80067e0:	4b06      	ldr	r3, [pc, #24]	; (80067fc <HAL_IncTick+0x20>)
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	461a      	mov	r2, r3
 80067e6:	4b06      	ldr	r3, [pc, #24]	; (8006800 <HAL_IncTick+0x24>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4413      	add	r3, r2
 80067ec:	4a04      	ldr	r2, [pc, #16]	; (8006800 <HAL_IncTick+0x24>)
 80067ee:	6013      	str	r3, [r2, #0]
}
 80067f0:	bf00      	nop
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr
 80067fa:	bf00      	nop
 80067fc:	2000001c 	.word	0x2000001c
 8006800:	200079cc 	.word	0x200079cc

08006804 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006804:	b480      	push	{r7}
 8006806:	af00      	add	r7, sp, #0
  return uwTick;
 8006808:	4b03      	ldr	r3, [pc, #12]	; (8006818 <HAL_GetTick+0x14>)
 800680a:	681b      	ldr	r3, [r3, #0]
}
 800680c:	4618      	mov	r0, r3
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr
 8006816:	bf00      	nop
 8006818:	200079cc 	.word	0x200079cc

0800681c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006824:	f7ff ffee 	bl	8006804 <HAL_GetTick>
 8006828:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006834:	d005      	beq.n	8006842 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006836:	4b0a      	ldr	r3, [pc, #40]	; (8006860 <HAL_Delay+0x44>)
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	461a      	mov	r2, r3
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	4413      	add	r3, r2
 8006840:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006842:	bf00      	nop
 8006844:	f7ff ffde 	bl	8006804 <HAL_GetTick>
 8006848:	4602      	mov	r2, r0
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	68fa      	ldr	r2, [r7, #12]
 8006850:	429a      	cmp	r2, r3
 8006852:	d8f7      	bhi.n	8006844 <HAL_Delay+0x28>
  {
  }
}
 8006854:	bf00      	nop
 8006856:	bf00      	nop
 8006858:	3710      	adds	r7, #16
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	2000001c 	.word	0x2000001c

08006864 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b084      	sub	sp, #16
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800686c:	2300      	movs	r3, #0
 800686e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d101      	bne.n	800687a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	e033      	b.n	80068e2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800687e:	2b00      	cmp	r3, #0
 8006880:	d109      	bne.n	8006896 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f7fe ff92 	bl	80057ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800689a:	f003 0310 	and.w	r3, r3, #16
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d118      	bne.n	80068d4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80068aa:	f023 0302 	bic.w	r3, r3, #2
 80068ae:	f043 0202 	orr.w	r2, r3, #2
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 fa3c 	bl	8006d34 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c6:	f023 0303 	bic.w	r3, r3, #3
 80068ca:	f043 0201 	orr.w	r2, r3, #1
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	641a      	str	r2, [r3, #64]	; 0x40
 80068d2:	e001      	b.n	80068d8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80068e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3710      	adds	r7, #16
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
	...

080068ec <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b086      	sub	sp, #24
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80068f8:	2300      	movs	r3, #0
 80068fa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006902:	2b01      	cmp	r3, #1
 8006904:	d101      	bne.n	800690a <HAL_ADC_Start_DMA+0x1e>
 8006906:	2302      	movs	r3, #2
 8006908:	e0b1      	b.n	8006a6e <HAL_ADC_Start_DMA+0x182>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2201      	movs	r2, #1
 800690e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	f003 0301 	and.w	r3, r3, #1
 800691c:	2b01      	cmp	r3, #1
 800691e:	d018      	beq.n	8006952 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	689a      	ldr	r2, [r3, #8]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f042 0201 	orr.w	r2, r2, #1
 800692e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006930:	4b51      	ldr	r3, [pc, #324]	; (8006a78 <HAL_ADC_Start_DMA+0x18c>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a51      	ldr	r2, [pc, #324]	; (8006a7c <HAL_ADC_Start_DMA+0x190>)
 8006936:	fba2 2303 	umull	r2, r3, r2, r3
 800693a:	0c9a      	lsrs	r2, r3, #18
 800693c:	4613      	mov	r3, r2
 800693e:	005b      	lsls	r3, r3, #1
 8006940:	4413      	add	r3, r2
 8006942:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006944:	e002      	b.n	800694c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	3b01      	subs	r3, #1
 800694a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d1f9      	bne.n	8006946 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	f003 0301 	and.w	r3, r3, #1
 800695c:	2b01      	cmp	r3, #1
 800695e:	f040 8085 	bne.w	8006a6c <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006966:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800696a:	f023 0301 	bic.w	r3, r3, #1
 800696e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006980:	2b00      	cmp	r3, #0
 8006982:	d007      	beq.n	8006994 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006988:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800698c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006998:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800699c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069a0:	d106      	bne.n	80069b0 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069a6:	f023 0206 	bic.w	r2, r3, #6
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	645a      	str	r2, [r3, #68]	; 0x44
 80069ae:	e002      	b.n	80069b6 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2200      	movs	r2, #0
 80069b4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80069be:	4b30      	ldr	r3, [pc, #192]	; (8006a80 <HAL_ADC_Start_DMA+0x194>)
 80069c0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c6:	4a2f      	ldr	r2, [pc, #188]	; (8006a84 <HAL_ADC_Start_DMA+0x198>)
 80069c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ce:	4a2e      	ldr	r2, [pc, #184]	; (8006a88 <HAL_ADC_Start_DMA+0x19c>)
 80069d0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d6:	4a2d      	ldr	r2, [pc, #180]	; (8006a8c <HAL_ADC_Start_DMA+0x1a0>)
 80069d8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80069e2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	685a      	ldr	r2, [r3, #4]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80069f2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	689a      	ldr	r2, [r3, #8]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a02:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	334c      	adds	r3, #76	; 0x4c
 8006a0e:	4619      	mov	r1, r3
 8006a10:	68ba      	ldr	r2, [r7, #8]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f000 fccc 	bl	80073b0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	f003 031f 	and.w	r3, r3, #31
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d10f      	bne.n	8006a44 <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d11c      	bne.n	8006a6c <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	689a      	ldr	r2, [r3, #8]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006a40:	609a      	str	r2, [r3, #8]
 8006a42:	e013      	b.n	8006a6c <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a11      	ldr	r2, [pc, #68]	; (8006a90 <HAL_ADC_Start_DMA+0x1a4>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d10e      	bne.n	8006a6c <HAL_ADC_Start_DMA+0x180>
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d107      	bne.n	8006a6c <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	689a      	ldr	r2, [r3, #8]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006a6a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3718      	adds	r7, #24
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop
 8006a78:	20000014 	.word	0x20000014
 8006a7c:	431bde83 	.word	0x431bde83
 8006a80:	40012300 	.word	0x40012300
 8006a84:	08006f2d 	.word	0x08006f2d
 8006a88:	08006fe7 	.word	0x08006fe7
 8006a8c:	08007003 	.word	0x08007003
 8006a90:	40012000 	.word	0x40012000

08006a94 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8006a9c:	bf00      	nop
 8006a9e:	370c      	adds	r7, #12
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006ab0:	bf00      	nop
 8006ab2:	370c      	adds	r7, #12
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006ac4:	bf00      	nop
 8006ac6:	370c      	adds	r7, #12
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b085      	sub	sp, #20
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006ada:	2300      	movs	r3, #0
 8006adc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d101      	bne.n	8006aec <HAL_ADC_ConfigChannel+0x1c>
 8006ae8:	2302      	movs	r3, #2
 8006aea:	e113      	b.n	8006d14 <HAL_ADC_ConfigChannel+0x244>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2b09      	cmp	r3, #9
 8006afa:	d925      	bls.n	8006b48 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	68d9      	ldr	r1, [r3, #12]
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	461a      	mov	r2, r3
 8006b0a:	4613      	mov	r3, r2
 8006b0c:	005b      	lsls	r3, r3, #1
 8006b0e:	4413      	add	r3, r2
 8006b10:	3b1e      	subs	r3, #30
 8006b12:	2207      	movs	r2, #7
 8006b14:	fa02 f303 	lsl.w	r3, r2, r3
 8006b18:	43da      	mvns	r2, r3
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	400a      	ands	r2, r1
 8006b20:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	68d9      	ldr	r1, [r3, #12]
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	689a      	ldr	r2, [r3, #8]
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	4618      	mov	r0, r3
 8006b34:	4603      	mov	r3, r0
 8006b36:	005b      	lsls	r3, r3, #1
 8006b38:	4403      	add	r3, r0
 8006b3a:	3b1e      	subs	r3, #30
 8006b3c:	409a      	lsls	r2, r3
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	430a      	orrs	r2, r1
 8006b44:	60da      	str	r2, [r3, #12]
 8006b46:	e022      	b.n	8006b8e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	6919      	ldr	r1, [r3, #16]
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	461a      	mov	r2, r3
 8006b56:	4613      	mov	r3, r2
 8006b58:	005b      	lsls	r3, r3, #1
 8006b5a:	4413      	add	r3, r2
 8006b5c:	2207      	movs	r2, #7
 8006b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b62:	43da      	mvns	r2, r3
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	400a      	ands	r2, r1
 8006b6a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	6919      	ldr	r1, [r3, #16]
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	689a      	ldr	r2, [r3, #8]
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	4603      	mov	r3, r0
 8006b80:	005b      	lsls	r3, r3, #1
 8006b82:	4403      	add	r3, r0
 8006b84:	409a      	lsls	r2, r3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	430a      	orrs	r2, r1
 8006b8c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	2b06      	cmp	r3, #6
 8006b94:	d824      	bhi.n	8006be0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	685a      	ldr	r2, [r3, #4]
 8006ba0:	4613      	mov	r3, r2
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	4413      	add	r3, r2
 8006ba6:	3b05      	subs	r3, #5
 8006ba8:	221f      	movs	r2, #31
 8006baa:	fa02 f303 	lsl.w	r3, r2, r3
 8006bae:	43da      	mvns	r2, r3
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	400a      	ands	r2, r1
 8006bb6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	685a      	ldr	r2, [r3, #4]
 8006bca:	4613      	mov	r3, r2
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	4413      	add	r3, r2
 8006bd0:	3b05      	subs	r3, #5
 8006bd2:	fa00 f203 	lsl.w	r2, r0, r3
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	430a      	orrs	r2, r1
 8006bdc:	635a      	str	r2, [r3, #52]	; 0x34
 8006bde:	e04c      	b.n	8006c7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	2b0c      	cmp	r3, #12
 8006be6:	d824      	bhi.n	8006c32 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	685a      	ldr	r2, [r3, #4]
 8006bf2:	4613      	mov	r3, r2
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	4413      	add	r3, r2
 8006bf8:	3b23      	subs	r3, #35	; 0x23
 8006bfa:	221f      	movs	r2, #31
 8006bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8006c00:	43da      	mvns	r2, r3
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	400a      	ands	r2, r1
 8006c08:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	4618      	mov	r0, r3
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	685a      	ldr	r2, [r3, #4]
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	4413      	add	r3, r2
 8006c22:	3b23      	subs	r3, #35	; 0x23
 8006c24:	fa00 f203 	lsl.w	r2, r0, r3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	430a      	orrs	r2, r1
 8006c2e:	631a      	str	r2, [r3, #48]	; 0x30
 8006c30:	e023      	b.n	8006c7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	685a      	ldr	r2, [r3, #4]
 8006c3c:	4613      	mov	r3, r2
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	4413      	add	r3, r2
 8006c42:	3b41      	subs	r3, #65	; 0x41
 8006c44:	221f      	movs	r2, #31
 8006c46:	fa02 f303 	lsl.w	r3, r2, r3
 8006c4a:	43da      	mvns	r2, r3
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	400a      	ands	r2, r1
 8006c52:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	4618      	mov	r0, r3
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	685a      	ldr	r2, [r3, #4]
 8006c66:	4613      	mov	r3, r2
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	4413      	add	r3, r2
 8006c6c:	3b41      	subs	r3, #65	; 0x41
 8006c6e:	fa00 f203 	lsl.w	r2, r0, r3
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	430a      	orrs	r2, r1
 8006c78:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006c7a:	4b29      	ldr	r3, [pc, #164]	; (8006d20 <HAL_ADC_ConfigChannel+0x250>)
 8006c7c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a28      	ldr	r2, [pc, #160]	; (8006d24 <HAL_ADC_ConfigChannel+0x254>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d10f      	bne.n	8006ca8 <HAL_ADC_ConfigChannel+0x1d8>
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	2b12      	cmp	r3, #18
 8006c8e:	d10b      	bne.n	8006ca8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a1d      	ldr	r2, [pc, #116]	; (8006d24 <HAL_ADC_ConfigChannel+0x254>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d12b      	bne.n	8006d0a <HAL_ADC_ConfigChannel+0x23a>
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a1c      	ldr	r2, [pc, #112]	; (8006d28 <HAL_ADC_ConfigChannel+0x258>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d003      	beq.n	8006cc4 <HAL_ADC_ConfigChannel+0x1f4>
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	2b11      	cmp	r3, #17
 8006cc2:	d122      	bne.n	8006d0a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a11      	ldr	r2, [pc, #68]	; (8006d28 <HAL_ADC_ConfigChannel+0x258>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d111      	bne.n	8006d0a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006ce6:	4b11      	ldr	r3, [pc, #68]	; (8006d2c <HAL_ADC_ConfigChannel+0x25c>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a11      	ldr	r2, [pc, #68]	; (8006d30 <HAL_ADC_ConfigChannel+0x260>)
 8006cec:	fba2 2303 	umull	r2, r3, r2, r3
 8006cf0:	0c9a      	lsrs	r2, r3, #18
 8006cf2:	4613      	mov	r3, r2
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	4413      	add	r3, r2
 8006cf8:	005b      	lsls	r3, r3, #1
 8006cfa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006cfc:	e002      	b.n	8006d04 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	3b01      	subs	r3, #1
 8006d02:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d1f9      	bne.n	8006cfe <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006d12:	2300      	movs	r3, #0
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3714      	adds	r7, #20
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr
 8006d20:	40012300 	.word	0x40012300
 8006d24:	40012000 	.word	0x40012000
 8006d28:	10000012 	.word	0x10000012
 8006d2c:	20000014 	.word	0x20000014
 8006d30:	431bde83 	.word	0x431bde83

08006d34 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b085      	sub	sp, #20
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006d3c:	4b79      	ldr	r3, [pc, #484]	; (8006f24 <ADC_Init+0x1f0>)
 8006d3e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	685a      	ldr	r2, [r3, #4]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	431a      	orrs	r2, r3
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	685a      	ldr	r2, [r3, #4]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	6859      	ldr	r1, [r3, #4]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	691b      	ldr	r3, [r3, #16]
 8006d74:	021a      	lsls	r2, r3, #8
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	430a      	orrs	r2, r1
 8006d7c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	685a      	ldr	r2, [r3, #4]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006d8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	6859      	ldr	r1, [r3, #4]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	689a      	ldr	r2, [r3, #8]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	430a      	orrs	r2, r1
 8006d9e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	689a      	ldr	r2, [r3, #8]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006dae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	6899      	ldr	r1, [r3, #8]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	68da      	ldr	r2, [r3, #12]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	430a      	orrs	r2, r1
 8006dc0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dc6:	4a58      	ldr	r2, [pc, #352]	; (8006f28 <ADC_Init+0x1f4>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d022      	beq.n	8006e12 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	689a      	ldr	r2, [r3, #8]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006dda:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	6899      	ldr	r1, [r3, #8]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	430a      	orrs	r2, r1
 8006dec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	689a      	ldr	r2, [r3, #8]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006dfc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	6899      	ldr	r1, [r3, #8]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	430a      	orrs	r2, r1
 8006e0e:	609a      	str	r2, [r3, #8]
 8006e10:	e00f      	b.n	8006e32 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	689a      	ldr	r2, [r3, #8]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006e20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	689a      	ldr	r2, [r3, #8]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006e30:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	689a      	ldr	r2, [r3, #8]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f022 0202 	bic.w	r2, r2, #2
 8006e40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	6899      	ldr	r1, [r3, #8]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	7e1b      	ldrb	r3, [r3, #24]
 8006e4c:	005a      	lsls	r2, r3, #1
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	430a      	orrs	r2, r1
 8006e54:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d01b      	beq.n	8006e98 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	685a      	ldr	r2, [r3, #4]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e6e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	685a      	ldr	r2, [r3, #4]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006e7e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	6859      	ldr	r1, [r3, #4]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8a:	3b01      	subs	r3, #1
 8006e8c:	035a      	lsls	r2, r3, #13
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	430a      	orrs	r2, r1
 8006e94:	605a      	str	r2, [r3, #4]
 8006e96:	e007      	b.n	8006ea8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	685a      	ldr	r2, [r3, #4]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ea6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006eb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	69db      	ldr	r3, [r3, #28]
 8006ec2:	3b01      	subs	r3, #1
 8006ec4:	051a      	lsls	r2, r3, #20
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	430a      	orrs	r2, r1
 8006ecc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	689a      	ldr	r2, [r3, #8]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006edc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	6899      	ldr	r1, [r3, #8]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006eea:	025a      	lsls	r2, r3, #9
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	430a      	orrs	r2, r1
 8006ef2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	689a      	ldr	r2, [r3, #8]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	6899      	ldr	r1, [r3, #8]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	695b      	ldr	r3, [r3, #20]
 8006f0e:	029a      	lsls	r2, r3, #10
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	430a      	orrs	r2, r1
 8006f16:	609a      	str	r2, [r3, #8]
}
 8006f18:	bf00      	nop
 8006f1a:	3714      	adds	r7, #20
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr
 8006f24:	40012300 	.word	0x40012300
 8006f28:	0f000001 	.word	0x0f000001

08006f2c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f38:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f3e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d13c      	bne.n	8006fc0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d12b      	bne.n	8006fb8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d127      	bne.n	8006fb8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f6e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d006      	beq.n	8006f84 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d119      	bne.n	8006fb8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	685a      	ldr	r2, [r3, #4]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f022 0220 	bic.w	r2, r2, #32
 8006f92:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f98:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d105      	bne.n	8006fb8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb0:	f043 0201 	orr.w	r2, r3, #1
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006fb8:	68f8      	ldr	r0, [r7, #12]
 8006fba:	f7ff fd6b 	bl	8006a94 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006fbe:	e00e      	b.n	8006fde <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc4:	f003 0310 	and.w	r3, r3, #16
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d003      	beq.n	8006fd4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006fcc:	68f8      	ldr	r0, [r7, #12]
 8006fce:	f7ff fd75 	bl	8006abc <HAL_ADC_ErrorCallback>
}
 8006fd2:	e004      	b.n	8006fde <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	4798      	blx	r3
}
 8006fde:	bf00      	nop
 8006fe0:	3710      	adds	r7, #16
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}

08006fe6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b084      	sub	sp, #16
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006ff4:	68f8      	ldr	r0, [r7, #12]
 8006ff6:	f7ff fd57 	bl	8006aa8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006ffa:	bf00      	nop
 8006ffc:	3710      	adds	r7, #16
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}

08007002 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8007002:	b580      	push	{r7, lr}
 8007004:	b084      	sub	sp, #16
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800700e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2240      	movs	r2, #64	; 0x40
 8007014:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800701a:	f043 0204 	orr.w	r2, r3, #4
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007022:	68f8      	ldr	r0, [r7, #12]
 8007024:	f7ff fd4a 	bl	8006abc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007028:	bf00      	nop
 800702a:	3710      	adds	r7, #16
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <__NVIC_SetPriorityGrouping>:
{
 8007030:	b480      	push	{r7}
 8007032:	b085      	sub	sp, #20
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f003 0307 	and.w	r3, r3, #7
 800703e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007040:	4b0c      	ldr	r3, [pc, #48]	; (8007074 <__NVIC_SetPriorityGrouping+0x44>)
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007046:	68ba      	ldr	r2, [r7, #8]
 8007048:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800704c:	4013      	ands	r3, r2
 800704e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007058:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800705c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007060:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007062:	4a04      	ldr	r2, [pc, #16]	; (8007074 <__NVIC_SetPriorityGrouping+0x44>)
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	60d3      	str	r3, [r2, #12]
}
 8007068:	bf00      	nop
 800706a:	3714      	adds	r7, #20
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr
 8007074:	e000ed00 	.word	0xe000ed00

08007078 <__NVIC_GetPriorityGrouping>:
{
 8007078:	b480      	push	{r7}
 800707a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800707c:	4b04      	ldr	r3, [pc, #16]	; (8007090 <__NVIC_GetPriorityGrouping+0x18>)
 800707e:	68db      	ldr	r3, [r3, #12]
 8007080:	0a1b      	lsrs	r3, r3, #8
 8007082:	f003 0307 	and.w	r3, r3, #7
}
 8007086:	4618      	mov	r0, r3
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr
 8007090:	e000ed00 	.word	0xe000ed00

08007094 <__NVIC_EnableIRQ>:
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	4603      	mov	r3, r0
 800709c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800709e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	db0b      	blt.n	80070be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80070a6:	79fb      	ldrb	r3, [r7, #7]
 80070a8:	f003 021f 	and.w	r2, r3, #31
 80070ac:	4907      	ldr	r1, [pc, #28]	; (80070cc <__NVIC_EnableIRQ+0x38>)
 80070ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070b2:	095b      	lsrs	r3, r3, #5
 80070b4:	2001      	movs	r0, #1
 80070b6:	fa00 f202 	lsl.w	r2, r0, r2
 80070ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80070be:	bf00      	nop
 80070c0:	370c      	adds	r7, #12
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr
 80070ca:	bf00      	nop
 80070cc:	e000e100 	.word	0xe000e100

080070d0 <__NVIC_SetPriority>:
{
 80070d0:	b480      	push	{r7}
 80070d2:	b083      	sub	sp, #12
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	4603      	mov	r3, r0
 80070d8:	6039      	str	r1, [r7, #0]
 80070da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80070dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	db0a      	blt.n	80070fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	b2da      	uxtb	r2, r3
 80070e8:	490c      	ldr	r1, [pc, #48]	; (800711c <__NVIC_SetPriority+0x4c>)
 80070ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070ee:	0112      	lsls	r2, r2, #4
 80070f0:	b2d2      	uxtb	r2, r2
 80070f2:	440b      	add	r3, r1
 80070f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80070f8:	e00a      	b.n	8007110 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	b2da      	uxtb	r2, r3
 80070fe:	4908      	ldr	r1, [pc, #32]	; (8007120 <__NVIC_SetPriority+0x50>)
 8007100:	79fb      	ldrb	r3, [r7, #7]
 8007102:	f003 030f 	and.w	r3, r3, #15
 8007106:	3b04      	subs	r3, #4
 8007108:	0112      	lsls	r2, r2, #4
 800710a:	b2d2      	uxtb	r2, r2
 800710c:	440b      	add	r3, r1
 800710e:	761a      	strb	r2, [r3, #24]
}
 8007110:	bf00      	nop
 8007112:	370c      	adds	r7, #12
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr
 800711c:	e000e100 	.word	0xe000e100
 8007120:	e000ed00 	.word	0xe000ed00

08007124 <NVIC_EncodePriority>:
{
 8007124:	b480      	push	{r7}
 8007126:	b089      	sub	sp, #36	; 0x24
 8007128:	af00      	add	r7, sp, #0
 800712a:	60f8      	str	r0, [r7, #12]
 800712c:	60b9      	str	r1, [r7, #8]
 800712e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f003 0307 	and.w	r3, r3, #7
 8007136:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007138:	69fb      	ldr	r3, [r7, #28]
 800713a:	f1c3 0307 	rsb	r3, r3, #7
 800713e:	2b04      	cmp	r3, #4
 8007140:	bf28      	it	cs
 8007142:	2304      	movcs	r3, #4
 8007144:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007146:	69fb      	ldr	r3, [r7, #28]
 8007148:	3304      	adds	r3, #4
 800714a:	2b06      	cmp	r3, #6
 800714c:	d902      	bls.n	8007154 <NVIC_EncodePriority+0x30>
 800714e:	69fb      	ldr	r3, [r7, #28]
 8007150:	3b03      	subs	r3, #3
 8007152:	e000      	b.n	8007156 <NVIC_EncodePriority+0x32>
 8007154:	2300      	movs	r3, #0
 8007156:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007158:	f04f 32ff 	mov.w	r2, #4294967295
 800715c:	69bb      	ldr	r3, [r7, #24]
 800715e:	fa02 f303 	lsl.w	r3, r2, r3
 8007162:	43da      	mvns	r2, r3
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	401a      	ands	r2, r3
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800716c:	f04f 31ff 	mov.w	r1, #4294967295
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	fa01 f303 	lsl.w	r3, r1, r3
 8007176:	43d9      	mvns	r1, r3
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800717c:	4313      	orrs	r3, r2
}
 800717e:	4618      	mov	r0, r3
 8007180:	3724      	adds	r7, #36	; 0x24
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr
	...

0800718c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	3b01      	subs	r3, #1
 8007198:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800719c:	d301      	bcc.n	80071a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800719e:	2301      	movs	r3, #1
 80071a0:	e00f      	b.n	80071c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80071a2:	4a0a      	ldr	r2, [pc, #40]	; (80071cc <SysTick_Config+0x40>)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	3b01      	subs	r3, #1
 80071a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80071aa:	210f      	movs	r1, #15
 80071ac:	f04f 30ff 	mov.w	r0, #4294967295
 80071b0:	f7ff ff8e 	bl	80070d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80071b4:	4b05      	ldr	r3, [pc, #20]	; (80071cc <SysTick_Config+0x40>)
 80071b6:	2200      	movs	r2, #0
 80071b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80071ba:	4b04      	ldr	r3, [pc, #16]	; (80071cc <SysTick_Config+0x40>)
 80071bc:	2207      	movs	r2, #7
 80071be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3708      	adds	r7, #8
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop
 80071cc:	e000e010 	.word	0xe000e010

080071d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b082      	sub	sp, #8
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f7ff ff29 	bl	8007030 <__NVIC_SetPriorityGrouping>
}
 80071de:	bf00      	nop
 80071e0:	3708      	adds	r7, #8
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}

080071e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80071e6:	b580      	push	{r7, lr}
 80071e8:	b086      	sub	sp, #24
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	4603      	mov	r3, r0
 80071ee:	60b9      	str	r1, [r7, #8]
 80071f0:	607a      	str	r2, [r7, #4]
 80071f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80071f4:	2300      	movs	r3, #0
 80071f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80071f8:	f7ff ff3e 	bl	8007078 <__NVIC_GetPriorityGrouping>
 80071fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	68b9      	ldr	r1, [r7, #8]
 8007202:	6978      	ldr	r0, [r7, #20]
 8007204:	f7ff ff8e 	bl	8007124 <NVIC_EncodePriority>
 8007208:	4602      	mov	r2, r0
 800720a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800720e:	4611      	mov	r1, r2
 8007210:	4618      	mov	r0, r3
 8007212:	f7ff ff5d 	bl	80070d0 <__NVIC_SetPriority>
}
 8007216:	bf00      	nop
 8007218:	3718      	adds	r7, #24
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}

0800721e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800721e:	b580      	push	{r7, lr}
 8007220:	b082      	sub	sp, #8
 8007222:	af00      	add	r7, sp, #0
 8007224:	4603      	mov	r3, r0
 8007226:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800722c:	4618      	mov	r0, r3
 800722e:	f7ff ff31 	bl	8007094 <__NVIC_EnableIRQ>
}
 8007232:	bf00      	nop
 8007234:	3708      	adds	r7, #8
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}

0800723a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800723a:	b580      	push	{r7, lr}
 800723c:	b082      	sub	sp, #8
 800723e:	af00      	add	r7, sp, #0
 8007240:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f7ff ffa2 	bl	800718c <SysTick_Config>
 8007248:	4603      	mov	r3, r0
}
 800724a:	4618      	mov	r0, r3
 800724c:	3708      	adds	r7, #8
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
	...

08007254 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b086      	sub	sp, #24
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800725c:	2300      	movs	r3, #0
 800725e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007260:	f7ff fad0 	bl	8006804 <HAL_GetTick>
 8007264:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d101      	bne.n	8007270 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800726c:	2301      	movs	r3, #1
 800726e:	e099      	b.n	80073a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2202      	movs	r2, #2
 800727c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f022 0201 	bic.w	r2, r2, #1
 800728e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007290:	e00f      	b.n	80072b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007292:	f7ff fab7 	bl	8006804 <HAL_GetTick>
 8007296:	4602      	mov	r2, r0
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	1ad3      	subs	r3, r2, r3
 800729c:	2b05      	cmp	r3, #5
 800729e:	d908      	bls.n	80072b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2220      	movs	r2, #32
 80072a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2203      	movs	r2, #3
 80072aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80072ae:	2303      	movs	r3, #3
 80072b0:	e078      	b.n	80073a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f003 0301 	and.w	r3, r3, #1
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d1e8      	bne.n	8007292 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80072c8:	697a      	ldr	r2, [r7, #20]
 80072ca:	4b38      	ldr	r3, [pc, #224]	; (80073ac <HAL_DMA_Init+0x158>)
 80072cc:	4013      	ands	r3, r2
 80072ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	685a      	ldr	r2, [r3, #4]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80072de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	691b      	ldr	r3, [r3, #16]
 80072e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	699b      	ldr	r3, [r3, #24]
 80072f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80072f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6a1b      	ldr	r3, [r3, #32]
 80072fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80072fe:	697a      	ldr	r2, [r7, #20]
 8007300:	4313      	orrs	r3, r2
 8007302:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007308:	2b04      	cmp	r3, #4
 800730a:	d107      	bne.n	800731c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007314:	4313      	orrs	r3, r2
 8007316:	697a      	ldr	r2, [r7, #20]
 8007318:	4313      	orrs	r3, r2
 800731a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	697a      	ldr	r2, [r7, #20]
 8007322:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	695b      	ldr	r3, [r3, #20]
 800732a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	f023 0307 	bic.w	r3, r3, #7
 8007332:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007338:	697a      	ldr	r2, [r7, #20]
 800733a:	4313      	orrs	r3, r2
 800733c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007342:	2b04      	cmp	r3, #4
 8007344:	d117      	bne.n	8007376 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800734a:	697a      	ldr	r2, [r7, #20]
 800734c:	4313      	orrs	r3, r2
 800734e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007354:	2b00      	cmp	r3, #0
 8007356:	d00e      	beq.n	8007376 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 fa9d 	bl	8007898 <DMA_CheckFifoParam>
 800735e:	4603      	mov	r3, r0
 8007360:	2b00      	cmp	r3, #0
 8007362:	d008      	beq.n	8007376 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2240      	movs	r2, #64	; 0x40
 8007368:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2201      	movs	r2, #1
 800736e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007372:	2301      	movs	r3, #1
 8007374:	e016      	b.n	80073a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	697a      	ldr	r2, [r7, #20]
 800737c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 fa54 	bl	800782c <DMA_CalcBaseAndBitshift>
 8007384:	4603      	mov	r3, r0
 8007386:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800738c:	223f      	movs	r2, #63	; 0x3f
 800738e:	409a      	lsls	r2, r3
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2201      	movs	r2, #1
 800739e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80073a2:	2300      	movs	r3, #0
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3718      	adds	r7, #24
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}
 80073ac:	f010803f 	.word	0xf010803f

080073b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b086      	sub	sp, #24
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	60b9      	str	r1, [r7, #8]
 80073ba:	607a      	str	r2, [r7, #4]
 80073bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80073be:	2300      	movs	r3, #0
 80073c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d101      	bne.n	80073d6 <HAL_DMA_Start_IT+0x26>
 80073d2:	2302      	movs	r3, #2
 80073d4:	e040      	b.n	8007458 <HAL_DMA_Start_IT+0xa8>
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2201      	movs	r2, #1
 80073da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d12f      	bne.n	800744a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2202      	movs	r2, #2
 80073ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2200      	movs	r2, #0
 80073f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	68b9      	ldr	r1, [r7, #8]
 80073fe:	68f8      	ldr	r0, [r7, #12]
 8007400:	f000 f9e6 	bl	80077d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007408:	223f      	movs	r2, #63	; 0x3f
 800740a:	409a      	lsls	r2, r3
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f042 0216 	orr.w	r2, r2, #22
 800741e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007424:	2b00      	cmp	r3, #0
 8007426:	d007      	beq.n	8007438 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f042 0208 	orr.w	r2, r2, #8
 8007436:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f042 0201 	orr.w	r2, r2, #1
 8007446:	601a      	str	r2, [r3, #0]
 8007448:	e005      	b.n	8007456 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2200      	movs	r2, #0
 800744e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007452:	2302      	movs	r3, #2
 8007454:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007456:	7dfb      	ldrb	r3, [r7, #23]
}
 8007458:	4618      	mov	r0, r3
 800745a:	3718      	adds	r7, #24
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}

08007460 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007460:	b480      	push	{r7}
 8007462:	b083      	sub	sp, #12
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800746e:	b2db      	uxtb	r3, r3
 8007470:	2b02      	cmp	r3, #2
 8007472:	d004      	beq.n	800747e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2280      	movs	r2, #128	; 0x80
 8007478:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	e00c      	b.n	8007498 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2205      	movs	r2, #5
 8007482:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f022 0201 	bic.w	r2, r2, #1
 8007494:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007496:	2300      	movs	r3, #0
}
 8007498:	4618      	mov	r0, r3
 800749a:	370c      	adds	r7, #12
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b086      	sub	sp, #24
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80074ac:	2300      	movs	r3, #0
 80074ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80074b0:	4b92      	ldr	r3, [pc, #584]	; (80076fc <HAL_DMA_IRQHandler+0x258>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a92      	ldr	r2, [pc, #584]	; (8007700 <HAL_DMA_IRQHandler+0x25c>)
 80074b6:	fba2 2303 	umull	r2, r3, r2, r3
 80074ba:	0a9b      	lsrs	r3, r3, #10
 80074bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074ce:	2208      	movs	r2, #8
 80074d0:	409a      	lsls	r2, r3
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	4013      	ands	r3, r2
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d01a      	beq.n	8007510 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f003 0304 	and.w	r3, r3, #4
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d013      	beq.n	8007510 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f022 0204 	bic.w	r2, r2, #4
 80074f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074fc:	2208      	movs	r2, #8
 80074fe:	409a      	lsls	r2, r3
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007508:	f043 0201 	orr.w	r2, r3, #1
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007514:	2201      	movs	r2, #1
 8007516:	409a      	lsls	r2, r3
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	4013      	ands	r3, r2
 800751c:	2b00      	cmp	r3, #0
 800751e:	d012      	beq.n	8007546 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	695b      	ldr	r3, [r3, #20]
 8007526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800752a:	2b00      	cmp	r3, #0
 800752c:	d00b      	beq.n	8007546 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007532:	2201      	movs	r2, #1
 8007534:	409a      	lsls	r2, r3
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800753e:	f043 0202 	orr.w	r2, r3, #2
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800754a:	2204      	movs	r2, #4
 800754c:	409a      	lsls	r2, r3
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	4013      	ands	r3, r2
 8007552:	2b00      	cmp	r3, #0
 8007554:	d012      	beq.n	800757c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f003 0302 	and.w	r3, r3, #2
 8007560:	2b00      	cmp	r3, #0
 8007562:	d00b      	beq.n	800757c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007568:	2204      	movs	r2, #4
 800756a:	409a      	lsls	r2, r3
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007574:	f043 0204 	orr.w	r2, r3, #4
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007580:	2210      	movs	r2, #16
 8007582:	409a      	lsls	r2, r3
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	4013      	ands	r3, r2
 8007588:	2b00      	cmp	r3, #0
 800758a:	d043      	beq.n	8007614 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f003 0308 	and.w	r3, r3, #8
 8007596:	2b00      	cmp	r3, #0
 8007598:	d03c      	beq.n	8007614 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800759e:	2210      	movs	r2, #16
 80075a0:	409a      	lsls	r2, r3
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d018      	beq.n	80075e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d108      	bne.n	80075d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d024      	beq.n	8007614 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	4798      	blx	r3
 80075d2:	e01f      	b.n	8007614 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d01b      	beq.n	8007614 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	4798      	blx	r3
 80075e4:	e016      	b.n	8007614 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d107      	bne.n	8007604 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	681a      	ldr	r2, [r3, #0]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f022 0208 	bic.w	r2, r2, #8
 8007602:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007608:	2b00      	cmp	r3, #0
 800760a:	d003      	beq.n	8007614 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007618:	2220      	movs	r2, #32
 800761a:	409a      	lsls	r2, r3
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	4013      	ands	r3, r2
 8007620:	2b00      	cmp	r3, #0
 8007622:	f000 808e 	beq.w	8007742 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f003 0310 	and.w	r3, r3, #16
 8007630:	2b00      	cmp	r3, #0
 8007632:	f000 8086 	beq.w	8007742 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800763a:	2220      	movs	r2, #32
 800763c:	409a      	lsls	r2, r3
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007648:	b2db      	uxtb	r3, r3
 800764a:	2b05      	cmp	r3, #5
 800764c:	d136      	bne.n	80076bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f022 0216 	bic.w	r2, r2, #22
 800765c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	695a      	ldr	r2, [r3, #20]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800766c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007672:	2b00      	cmp	r3, #0
 8007674:	d103      	bne.n	800767e <HAL_DMA_IRQHandler+0x1da>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800767a:	2b00      	cmp	r3, #0
 800767c:	d007      	beq.n	800768e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f022 0208 	bic.w	r2, r2, #8
 800768c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007692:	223f      	movs	r2, #63	; 0x3f
 8007694:	409a      	lsls	r2, r3
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2200      	movs	r2, #0
 800769e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2201      	movs	r2, #1
 80076a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d07d      	beq.n	80077ae <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	4798      	blx	r3
        }
        return;
 80076ba:	e078      	b.n	80077ae <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d01c      	beq.n	8007704 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d108      	bne.n	80076ea <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d030      	beq.n	8007742 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	4798      	blx	r3
 80076e8:	e02b      	b.n	8007742 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d027      	beq.n	8007742 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	4798      	blx	r3
 80076fa:	e022      	b.n	8007742 <HAL_DMA_IRQHandler+0x29e>
 80076fc:	20000014 	.word	0x20000014
 8007700:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800770e:	2b00      	cmp	r3, #0
 8007710:	d10f      	bne.n	8007732 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	681a      	ldr	r2, [r3, #0]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f022 0210 	bic.w	r2, r2, #16
 8007720:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2200      	movs	r2, #0
 8007726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2201      	movs	r2, #1
 800772e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007736:	2b00      	cmp	r3, #0
 8007738:	d003      	beq.n	8007742 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007746:	2b00      	cmp	r3, #0
 8007748:	d032      	beq.n	80077b0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800774e:	f003 0301 	and.w	r3, r3, #1
 8007752:	2b00      	cmp	r3, #0
 8007754:	d022      	beq.n	800779c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2205      	movs	r2, #5
 800775a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f022 0201 	bic.w	r2, r2, #1
 800776c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	3301      	adds	r3, #1
 8007772:	60bb      	str	r3, [r7, #8]
 8007774:	697a      	ldr	r2, [r7, #20]
 8007776:	429a      	cmp	r2, r3
 8007778:	d307      	bcc.n	800778a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f003 0301 	and.w	r3, r3, #1
 8007784:	2b00      	cmp	r3, #0
 8007786:	d1f2      	bne.n	800776e <HAL_DMA_IRQHandler+0x2ca>
 8007788:	e000      	b.n	800778c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800778a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2200      	movs	r2, #0
 8007790:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2201      	movs	r2, #1
 8007798:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d005      	beq.n	80077b0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	4798      	blx	r3
 80077ac:	e000      	b.n	80077b0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80077ae:	bf00      	nop
    }
  }
}
 80077b0:	3718      	adds	r7, #24
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}
 80077b6:	bf00      	nop

080077b8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b083      	sub	sp, #12
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	370c      	adds	r7, #12
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b085      	sub	sp, #20
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	60f8      	str	r0, [r7, #12]
 80077d8:	60b9      	str	r1, [r7, #8]
 80077da:	607a      	str	r2, [r7, #4]
 80077dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80077ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	683a      	ldr	r2, [r7, #0]
 80077f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	2b40      	cmp	r3, #64	; 0x40
 80077fc:	d108      	bne.n	8007810 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	68ba      	ldr	r2, [r7, #8]
 800780c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800780e:	e007      	b.n	8007820 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	68ba      	ldr	r2, [r7, #8]
 8007816:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	60da      	str	r2, [r3, #12]
}
 8007820:	bf00      	nop
 8007822:	3714      	adds	r7, #20
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800782c:	b480      	push	{r7}
 800782e:	b085      	sub	sp, #20
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	b2db      	uxtb	r3, r3
 800783a:	3b10      	subs	r3, #16
 800783c:	4a14      	ldr	r2, [pc, #80]	; (8007890 <DMA_CalcBaseAndBitshift+0x64>)
 800783e:	fba2 2303 	umull	r2, r3, r2, r3
 8007842:	091b      	lsrs	r3, r3, #4
 8007844:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007846:	4a13      	ldr	r2, [pc, #76]	; (8007894 <DMA_CalcBaseAndBitshift+0x68>)
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	4413      	add	r3, r2
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	461a      	mov	r2, r3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2b03      	cmp	r3, #3
 8007858:	d909      	bls.n	800786e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007862:	f023 0303 	bic.w	r3, r3, #3
 8007866:	1d1a      	adds	r2, r3, #4
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	659a      	str	r2, [r3, #88]	; 0x58
 800786c:	e007      	b.n	800787e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007876:	f023 0303 	bic.w	r3, r3, #3
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007882:	4618      	mov	r0, r3
 8007884:	3714      	adds	r7, #20
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr
 800788e:	bf00      	nop
 8007890:	aaaaaaab 	.word	0xaaaaaaab
 8007894:	0801883c 	.word	0x0801883c

08007898 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007898:	b480      	push	{r7}
 800789a:	b085      	sub	sp, #20
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80078a0:	2300      	movs	r3, #0
 80078a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	699b      	ldr	r3, [r3, #24]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d11f      	bne.n	80078f2 <DMA_CheckFifoParam+0x5a>
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	2b03      	cmp	r3, #3
 80078b6:	d856      	bhi.n	8007966 <DMA_CheckFifoParam+0xce>
 80078b8:	a201      	add	r2, pc, #4	; (adr r2, 80078c0 <DMA_CheckFifoParam+0x28>)
 80078ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078be:	bf00      	nop
 80078c0:	080078d1 	.word	0x080078d1
 80078c4:	080078e3 	.word	0x080078e3
 80078c8:	080078d1 	.word	0x080078d1
 80078cc:	08007967 	.word	0x08007967
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d046      	beq.n	800796a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80078dc:	2301      	movs	r3, #1
 80078de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80078e0:	e043      	b.n	800796a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80078ea:	d140      	bne.n	800796e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80078ec:	2301      	movs	r3, #1
 80078ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80078f0:	e03d      	b.n	800796e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	699b      	ldr	r3, [r3, #24]
 80078f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078fa:	d121      	bne.n	8007940 <DMA_CheckFifoParam+0xa8>
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	2b03      	cmp	r3, #3
 8007900:	d837      	bhi.n	8007972 <DMA_CheckFifoParam+0xda>
 8007902:	a201      	add	r2, pc, #4	; (adr r2, 8007908 <DMA_CheckFifoParam+0x70>)
 8007904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007908:	08007919 	.word	0x08007919
 800790c:	0800791f 	.word	0x0800791f
 8007910:	08007919 	.word	0x08007919
 8007914:	08007931 	.word	0x08007931
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007918:	2301      	movs	r3, #1
 800791a:	73fb      	strb	r3, [r7, #15]
      break;
 800791c:	e030      	b.n	8007980 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007922:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007926:	2b00      	cmp	r3, #0
 8007928:	d025      	beq.n	8007976 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800792e:	e022      	b.n	8007976 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007934:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007938:	d11f      	bne.n	800797a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800793e:	e01c      	b.n	800797a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	2b02      	cmp	r3, #2
 8007944:	d903      	bls.n	800794e <DMA_CheckFifoParam+0xb6>
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	2b03      	cmp	r3, #3
 800794a:	d003      	beq.n	8007954 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800794c:	e018      	b.n	8007980 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	73fb      	strb	r3, [r7, #15]
      break;
 8007952:	e015      	b.n	8007980 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007958:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800795c:	2b00      	cmp	r3, #0
 800795e:	d00e      	beq.n	800797e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007960:	2301      	movs	r3, #1
 8007962:	73fb      	strb	r3, [r7, #15]
      break;
 8007964:	e00b      	b.n	800797e <DMA_CheckFifoParam+0xe6>
      break;
 8007966:	bf00      	nop
 8007968:	e00a      	b.n	8007980 <DMA_CheckFifoParam+0xe8>
      break;
 800796a:	bf00      	nop
 800796c:	e008      	b.n	8007980 <DMA_CheckFifoParam+0xe8>
      break;
 800796e:	bf00      	nop
 8007970:	e006      	b.n	8007980 <DMA_CheckFifoParam+0xe8>
      break;
 8007972:	bf00      	nop
 8007974:	e004      	b.n	8007980 <DMA_CheckFifoParam+0xe8>
      break;
 8007976:	bf00      	nop
 8007978:	e002      	b.n	8007980 <DMA_CheckFifoParam+0xe8>
      break;   
 800797a:	bf00      	nop
 800797c:	e000      	b.n	8007980 <DMA_CheckFifoParam+0xe8>
      break;
 800797e:	bf00      	nop
    }
  } 
  
  return status; 
 8007980:	7bfb      	ldrb	r3, [r7, #15]
}
 8007982:	4618      	mov	r0, r3
 8007984:	3714      	adds	r7, #20
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr
 800798e:	bf00      	nop

08007990 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007990:	b480      	push	{r7}
 8007992:	b089      	sub	sp, #36	; 0x24
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800799a:	2300      	movs	r3, #0
 800799c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800799e:	2300      	movs	r3, #0
 80079a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80079a2:	2300      	movs	r3, #0
 80079a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80079a6:	2300      	movs	r3, #0
 80079a8:	61fb      	str	r3, [r7, #28]
 80079aa:	e159      	b.n	8007c60 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80079ac:	2201      	movs	r2, #1
 80079ae:	69fb      	ldr	r3, [r7, #28]
 80079b0:	fa02 f303 	lsl.w	r3, r2, r3
 80079b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	697a      	ldr	r2, [r7, #20]
 80079bc:	4013      	ands	r3, r2
 80079be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80079c0:	693a      	ldr	r2, [r7, #16]
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	429a      	cmp	r2, r3
 80079c6:	f040 8148 	bne.w	8007c5a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	d00b      	beq.n	80079ea <HAL_GPIO_Init+0x5a>
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	2b02      	cmp	r3, #2
 80079d8:	d007      	beq.n	80079ea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80079de:	2b11      	cmp	r3, #17
 80079e0:	d003      	beq.n	80079ea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	2b12      	cmp	r3, #18
 80079e8:	d130      	bne.n	8007a4c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80079f0:	69fb      	ldr	r3, [r7, #28]
 80079f2:	005b      	lsls	r3, r3, #1
 80079f4:	2203      	movs	r2, #3
 80079f6:	fa02 f303 	lsl.w	r3, r2, r3
 80079fa:	43db      	mvns	r3, r3
 80079fc:	69ba      	ldr	r2, [r7, #24]
 80079fe:	4013      	ands	r3, r2
 8007a00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	68da      	ldr	r2, [r3, #12]
 8007a06:	69fb      	ldr	r3, [r7, #28]
 8007a08:	005b      	lsls	r3, r3, #1
 8007a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a0e:	69ba      	ldr	r2, [r7, #24]
 8007a10:	4313      	orrs	r3, r2
 8007a12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	69ba      	ldr	r2, [r7, #24]
 8007a18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007a20:	2201      	movs	r2, #1
 8007a22:	69fb      	ldr	r3, [r7, #28]
 8007a24:	fa02 f303 	lsl.w	r3, r2, r3
 8007a28:	43db      	mvns	r3, r3
 8007a2a:	69ba      	ldr	r2, [r7, #24]
 8007a2c:	4013      	ands	r3, r2
 8007a2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	091b      	lsrs	r3, r3, #4
 8007a36:	f003 0201 	and.w	r2, r3, #1
 8007a3a:	69fb      	ldr	r3, [r7, #28]
 8007a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a40:	69ba      	ldr	r2, [r7, #24]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	69ba      	ldr	r2, [r7, #24]
 8007a4a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	68db      	ldr	r3, [r3, #12]
 8007a50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007a52:	69fb      	ldr	r3, [r7, #28]
 8007a54:	005b      	lsls	r3, r3, #1
 8007a56:	2203      	movs	r2, #3
 8007a58:	fa02 f303 	lsl.w	r3, r2, r3
 8007a5c:	43db      	mvns	r3, r3
 8007a5e:	69ba      	ldr	r2, [r7, #24]
 8007a60:	4013      	ands	r3, r2
 8007a62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	689a      	ldr	r2, [r3, #8]
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	005b      	lsls	r3, r3, #1
 8007a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a70:	69ba      	ldr	r2, [r7, #24]
 8007a72:	4313      	orrs	r3, r2
 8007a74:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	69ba      	ldr	r2, [r7, #24]
 8007a7a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	2b02      	cmp	r3, #2
 8007a82:	d003      	beq.n	8007a8c <HAL_GPIO_Init+0xfc>
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	2b12      	cmp	r3, #18
 8007a8a:	d123      	bne.n	8007ad4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007a8c:	69fb      	ldr	r3, [r7, #28]
 8007a8e:	08da      	lsrs	r2, r3, #3
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	3208      	adds	r2, #8
 8007a94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007a9a:	69fb      	ldr	r3, [r7, #28]
 8007a9c:	f003 0307 	and.w	r3, r3, #7
 8007aa0:	009b      	lsls	r3, r3, #2
 8007aa2:	220f      	movs	r2, #15
 8007aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8007aa8:	43db      	mvns	r3, r3
 8007aaa:	69ba      	ldr	r2, [r7, #24]
 8007aac:	4013      	ands	r3, r2
 8007aae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	691a      	ldr	r2, [r3, #16]
 8007ab4:	69fb      	ldr	r3, [r7, #28]
 8007ab6:	f003 0307 	and.w	r3, r3, #7
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	fa02 f303 	lsl.w	r3, r2, r3
 8007ac0:	69ba      	ldr	r2, [r7, #24]
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007ac6:	69fb      	ldr	r3, [r7, #28]
 8007ac8:	08da      	lsrs	r2, r3, #3
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	3208      	adds	r2, #8
 8007ace:	69b9      	ldr	r1, [r7, #24]
 8007ad0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007ada:	69fb      	ldr	r3, [r7, #28]
 8007adc:	005b      	lsls	r3, r3, #1
 8007ade:	2203      	movs	r2, #3
 8007ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ae4:	43db      	mvns	r3, r3
 8007ae6:	69ba      	ldr	r2, [r7, #24]
 8007ae8:	4013      	ands	r3, r2
 8007aea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	f003 0203 	and.w	r2, r3, #3
 8007af4:	69fb      	ldr	r3, [r7, #28]
 8007af6:	005b      	lsls	r3, r3, #1
 8007af8:	fa02 f303 	lsl.w	r3, r2, r3
 8007afc:	69ba      	ldr	r2, [r7, #24]
 8007afe:	4313      	orrs	r3, r2
 8007b00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	69ba      	ldr	r2, [r7, #24]
 8007b06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	f000 80a2 	beq.w	8007c5a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b16:	2300      	movs	r3, #0
 8007b18:	60fb      	str	r3, [r7, #12]
 8007b1a:	4b57      	ldr	r3, [pc, #348]	; (8007c78 <HAL_GPIO_Init+0x2e8>)
 8007b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b1e:	4a56      	ldr	r2, [pc, #344]	; (8007c78 <HAL_GPIO_Init+0x2e8>)
 8007b20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007b24:	6453      	str	r3, [r2, #68]	; 0x44
 8007b26:	4b54      	ldr	r3, [pc, #336]	; (8007c78 <HAL_GPIO_Init+0x2e8>)
 8007b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b2e:	60fb      	str	r3, [r7, #12]
 8007b30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007b32:	4a52      	ldr	r2, [pc, #328]	; (8007c7c <HAL_GPIO_Init+0x2ec>)
 8007b34:	69fb      	ldr	r3, [r7, #28]
 8007b36:	089b      	lsrs	r3, r3, #2
 8007b38:	3302      	adds	r3, #2
 8007b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007b40:	69fb      	ldr	r3, [r7, #28]
 8007b42:	f003 0303 	and.w	r3, r3, #3
 8007b46:	009b      	lsls	r3, r3, #2
 8007b48:	220f      	movs	r2, #15
 8007b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b4e:	43db      	mvns	r3, r3
 8007b50:	69ba      	ldr	r2, [r7, #24]
 8007b52:	4013      	ands	r3, r2
 8007b54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	4a49      	ldr	r2, [pc, #292]	; (8007c80 <HAL_GPIO_Init+0x2f0>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d019      	beq.n	8007b92 <HAL_GPIO_Init+0x202>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4a48      	ldr	r2, [pc, #288]	; (8007c84 <HAL_GPIO_Init+0x2f4>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d013      	beq.n	8007b8e <HAL_GPIO_Init+0x1fe>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	4a47      	ldr	r2, [pc, #284]	; (8007c88 <HAL_GPIO_Init+0x2f8>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d00d      	beq.n	8007b8a <HAL_GPIO_Init+0x1fa>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	4a46      	ldr	r2, [pc, #280]	; (8007c8c <HAL_GPIO_Init+0x2fc>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d007      	beq.n	8007b86 <HAL_GPIO_Init+0x1f6>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	4a45      	ldr	r2, [pc, #276]	; (8007c90 <HAL_GPIO_Init+0x300>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d101      	bne.n	8007b82 <HAL_GPIO_Init+0x1f2>
 8007b7e:	2304      	movs	r3, #4
 8007b80:	e008      	b.n	8007b94 <HAL_GPIO_Init+0x204>
 8007b82:	2307      	movs	r3, #7
 8007b84:	e006      	b.n	8007b94 <HAL_GPIO_Init+0x204>
 8007b86:	2303      	movs	r3, #3
 8007b88:	e004      	b.n	8007b94 <HAL_GPIO_Init+0x204>
 8007b8a:	2302      	movs	r3, #2
 8007b8c:	e002      	b.n	8007b94 <HAL_GPIO_Init+0x204>
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e000      	b.n	8007b94 <HAL_GPIO_Init+0x204>
 8007b92:	2300      	movs	r3, #0
 8007b94:	69fa      	ldr	r2, [r7, #28]
 8007b96:	f002 0203 	and.w	r2, r2, #3
 8007b9a:	0092      	lsls	r2, r2, #2
 8007b9c:	4093      	lsls	r3, r2
 8007b9e:	69ba      	ldr	r2, [r7, #24]
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007ba4:	4935      	ldr	r1, [pc, #212]	; (8007c7c <HAL_GPIO_Init+0x2ec>)
 8007ba6:	69fb      	ldr	r3, [r7, #28]
 8007ba8:	089b      	lsrs	r3, r3, #2
 8007baa:	3302      	adds	r3, #2
 8007bac:	69ba      	ldr	r2, [r7, #24]
 8007bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007bb2:	4b38      	ldr	r3, [pc, #224]	; (8007c94 <HAL_GPIO_Init+0x304>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	43db      	mvns	r3, r3
 8007bbc:	69ba      	ldr	r2, [r7, #24]
 8007bbe:	4013      	ands	r3, r2
 8007bc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d003      	beq.n	8007bd6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8007bce:	69ba      	ldr	r2, [r7, #24]
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007bd6:	4a2f      	ldr	r2, [pc, #188]	; (8007c94 <HAL_GPIO_Init+0x304>)
 8007bd8:	69bb      	ldr	r3, [r7, #24]
 8007bda:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007bdc:	4b2d      	ldr	r3, [pc, #180]	; (8007c94 <HAL_GPIO_Init+0x304>)
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	43db      	mvns	r3, r3
 8007be6:	69ba      	ldr	r2, [r7, #24]
 8007be8:	4013      	ands	r3, r2
 8007bea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d003      	beq.n	8007c00 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8007bf8:	69ba      	ldr	r2, [r7, #24]
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007c00:	4a24      	ldr	r2, [pc, #144]	; (8007c94 <HAL_GPIO_Init+0x304>)
 8007c02:	69bb      	ldr	r3, [r7, #24]
 8007c04:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007c06:	4b23      	ldr	r3, [pc, #140]	; (8007c94 <HAL_GPIO_Init+0x304>)
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	43db      	mvns	r3, r3
 8007c10:	69ba      	ldr	r2, [r7, #24]
 8007c12:	4013      	ands	r3, r2
 8007c14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d003      	beq.n	8007c2a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8007c22:	69ba      	ldr	r2, [r7, #24]
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	4313      	orrs	r3, r2
 8007c28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007c2a:	4a1a      	ldr	r2, [pc, #104]	; (8007c94 <HAL_GPIO_Init+0x304>)
 8007c2c:	69bb      	ldr	r3, [r7, #24]
 8007c2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007c30:	4b18      	ldr	r3, [pc, #96]	; (8007c94 <HAL_GPIO_Init+0x304>)
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	43db      	mvns	r3, r3
 8007c3a:	69ba      	ldr	r2, [r7, #24]
 8007c3c:	4013      	ands	r3, r2
 8007c3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d003      	beq.n	8007c54 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8007c4c:	69ba      	ldr	r2, [r7, #24]
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	4313      	orrs	r3, r2
 8007c52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007c54:	4a0f      	ldr	r2, [pc, #60]	; (8007c94 <HAL_GPIO_Init+0x304>)
 8007c56:	69bb      	ldr	r3, [r7, #24]
 8007c58:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007c5a:	69fb      	ldr	r3, [r7, #28]
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	61fb      	str	r3, [r7, #28]
 8007c60:	69fb      	ldr	r3, [r7, #28]
 8007c62:	2b0f      	cmp	r3, #15
 8007c64:	f67f aea2 	bls.w	80079ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007c68:	bf00      	nop
 8007c6a:	bf00      	nop
 8007c6c:	3724      	adds	r7, #36	; 0x24
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr
 8007c76:	bf00      	nop
 8007c78:	40023800 	.word	0x40023800
 8007c7c:	40013800 	.word	0x40013800
 8007c80:	40020000 	.word	0x40020000
 8007c84:	40020400 	.word	0x40020400
 8007c88:	40020800 	.word	0x40020800
 8007c8c:	40020c00 	.word	0x40020c00
 8007c90:	40021000 	.word	0x40021000
 8007c94:	40013c00 	.word	0x40013c00

08007c98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b085      	sub	sp, #20
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	691a      	ldr	r2, [r3, #16]
 8007ca8:	887b      	ldrh	r3, [r7, #2]
 8007caa:	4013      	ands	r3, r2
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d002      	beq.n	8007cb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	73fb      	strb	r3, [r7, #15]
 8007cb4:	e001      	b.n	8007cba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3714      	adds	r7, #20
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr

08007cc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b083      	sub	sp, #12
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	807b      	strh	r3, [r7, #2]
 8007cd4:	4613      	mov	r3, r2
 8007cd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007cd8:	787b      	ldrb	r3, [r7, #1]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d003      	beq.n	8007ce6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007cde:	887a      	ldrh	r2, [r7, #2]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007ce4:	e003      	b.n	8007cee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007ce6:	887b      	ldrh	r3, [r7, #2]
 8007ce8:	041a      	lsls	r2, r3, #16
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	619a      	str	r2, [r3, #24]
}
 8007cee:	bf00      	nop
 8007cf0:	370c      	adds	r7, #12
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr
	...

08007cfc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b082      	sub	sp, #8
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	4603      	mov	r3, r0
 8007d04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007d06:	4b08      	ldr	r3, [pc, #32]	; (8007d28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007d08:	695a      	ldr	r2, [r3, #20]
 8007d0a:	88fb      	ldrh	r3, [r7, #6]
 8007d0c:	4013      	ands	r3, r2
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d006      	beq.n	8007d20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007d12:	4a05      	ldr	r2, [pc, #20]	; (8007d28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007d14:	88fb      	ldrh	r3, [r7, #6]
 8007d16:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007d18:	88fb      	ldrh	r3, [r7, #6]
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f7fa fe68 	bl	80029f0 <HAL_GPIO_EXTI_Callback>
  }
}
 8007d20:	bf00      	nop
 8007d22:	3708      	adds	r7, #8
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	40013c00 	.word	0x40013c00

08007d2c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d101      	bne.n	8007d3e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	e02b      	b.n	8007d96 <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8007d46:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f245 5255 	movw	r2, #21845	; 0x5555
 8007d50:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	687a      	ldr	r2, [r7, #4]
 8007d58:	6852      	ldr	r2, [r2, #4]
 8007d5a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	6892      	ldr	r2, [r2, #8]
 8007d64:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8007d66:	f7fe fd4d 	bl	8006804 <HAL_GetTick>
 8007d6a:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8007d6c:	e008      	b.n	8007d80 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8007d6e:	f7fe fd49 	bl	8006804 <HAL_GetTick>
 8007d72:	4602      	mov	r2, r0
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	1ad3      	subs	r3, r2, r3
 8007d78:	2b30      	cmp	r3, #48	; 0x30
 8007d7a:	d901      	bls.n	8007d80 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8007d7c:	2303      	movs	r3, #3
 8007d7e:	e00a      	b.n	8007d96 <HAL_IWDG_Init+0x6a>
  while (hiwdg->Instance->SR != 0x00u)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	68db      	ldr	r3, [r3, #12]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d1f1      	bne.n	8007d6e <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8007d92:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007d94:	2300      	movs	r3, #0
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3710      	adds	r7, #16
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}

08007d9e <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8007d9e:	b480      	push	{r7}
 8007da0:	b083      	sub	sp, #12
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8007dae:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007db0:	2300      	movs	r3, #0
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	370c      	adds	r7, #12
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr
	...

08007dc0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b086      	sub	sp, #24
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d101      	bne.n	8007dd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007dce:	2301      	movs	r3, #1
 8007dd0:	e25b      	b.n	800828a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f003 0301 	and.w	r3, r3, #1
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d075      	beq.n	8007eca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007dde:	4ba3      	ldr	r3, [pc, #652]	; (800806c <HAL_RCC_OscConfig+0x2ac>)
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	f003 030c 	and.w	r3, r3, #12
 8007de6:	2b04      	cmp	r3, #4
 8007de8:	d00c      	beq.n	8007e04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007dea:	4ba0      	ldr	r3, [pc, #640]	; (800806c <HAL_RCC_OscConfig+0x2ac>)
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007df2:	2b08      	cmp	r3, #8
 8007df4:	d112      	bne.n	8007e1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007df6:	4b9d      	ldr	r3, [pc, #628]	; (800806c <HAL_RCC_OscConfig+0x2ac>)
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007dfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e02:	d10b      	bne.n	8007e1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e04:	4b99      	ldr	r3, [pc, #612]	; (800806c <HAL_RCC_OscConfig+0x2ac>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d05b      	beq.n	8007ec8 <HAL_RCC_OscConfig+0x108>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d157      	bne.n	8007ec8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	e236      	b.n	800828a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e24:	d106      	bne.n	8007e34 <HAL_RCC_OscConfig+0x74>
 8007e26:	4b91      	ldr	r3, [pc, #580]	; (800806c <HAL_RCC_OscConfig+0x2ac>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a90      	ldr	r2, [pc, #576]	; (800806c <HAL_RCC_OscConfig+0x2ac>)
 8007e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e30:	6013      	str	r3, [r2, #0]
 8007e32:	e01d      	b.n	8007e70 <HAL_RCC_OscConfig+0xb0>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e3c:	d10c      	bne.n	8007e58 <HAL_RCC_OscConfig+0x98>
 8007e3e:	4b8b      	ldr	r3, [pc, #556]	; (800806c <HAL_RCC_OscConfig+0x2ac>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a8a      	ldr	r2, [pc, #552]	; (800806c <HAL_RCC_OscConfig+0x2ac>)
 8007e44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007e48:	6013      	str	r3, [r2, #0]
 8007e4a:	4b88      	ldr	r3, [pc, #544]	; (800806c <HAL_RCC_OscConfig+0x2ac>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a87      	ldr	r2, [pc, #540]	; (800806c <HAL_RCC_OscConfig+0x2ac>)
 8007e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e54:	6013      	str	r3, [r2, #0]
 8007e56:	e00b      	b.n	8007e70 <HAL_RCC_OscConfig+0xb0>
 8007e58:	4b84      	ldr	r3, [pc, #528]	; (800806c <HAL_RCC_OscConfig+0x2ac>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a83      	ldr	r2, [pc, #524]	; (800806c <HAL_RCC_OscConfig+0x2ac>)
 8007e5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e62:	6013      	str	r3, [r2, #0]
 8007e64:	4b81      	ldr	r3, [pc, #516]	; (800806c <HAL_RCC_OscConfig+0x2ac>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a80      	ldr	r2, [pc, #512]	; (800806c <HAL_RCC_OscConfig+0x2ac>)
 8007e6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d013      	beq.n	8007ea0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e78:	f7fe fcc4 	bl	8006804 <HAL_GetTick>
 8007e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e7e:	e008      	b.n	8007e92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007e80:	f7fe fcc0 	bl	8006804 <HAL_GetTick>
 8007e84:	4602      	mov	r2, r0
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	1ad3      	subs	r3, r2, r3
 8007e8a:	2b64      	cmp	r3, #100	; 0x64
 8007e8c:	d901      	bls.n	8007e92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007e8e:	2303      	movs	r3, #3
 8007e90:	e1fb      	b.n	800828a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e92:	4b76      	ldr	r3, [pc, #472]	; (800806c <HAL_RCC_OscConfig+0x2ac>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d0f0      	beq.n	8007e80 <HAL_RCC_OscConfig+0xc0>
 8007e9e:	e014      	b.n	8007eca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ea0:	f7fe fcb0 	bl	8006804 <HAL_GetTick>
 8007ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007ea6:	e008      	b.n	8007eba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007ea8:	f7fe fcac 	bl	8006804 <HAL_GetTick>
 8007eac:	4602      	mov	r2, r0
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	1ad3      	subs	r3, r2, r3
 8007eb2:	2b64      	cmp	r3, #100	; 0x64
 8007eb4:	d901      	bls.n	8007eba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007eb6:	2303      	movs	r3, #3
 8007eb8:	e1e7      	b.n	800828a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007eba:	4b6c      	ldr	r3, [pc, #432]	; (800806c <HAL_RCC_OscConfig+0x2ac>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d1f0      	bne.n	8007ea8 <HAL_RCC_OscConfig+0xe8>
 8007ec6:	e000      	b.n	8007eca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ec8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f003 0302 	and.w	r3, r3, #2
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d063      	beq.n	8007f9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007ed6:	4b65      	ldr	r3, [pc, #404]	; (800806c <HAL_RCC_OscConfig+0x2ac>)
 8007ed8:	689b      	ldr	r3, [r3, #8]
 8007eda:	f003 030c 	and.w	r3, r3, #12
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d00b      	beq.n	8007efa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007ee2:	4b62      	ldr	r3, [pc, #392]	; (800806c <HAL_RCC_OscConfig+0x2ac>)
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007eea:	2b08      	cmp	r3, #8
 8007eec:	d11c      	bne.n	8007f28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007eee:	4b5f      	ldr	r3, [pc, #380]	; (800806c <HAL_RCC_OscConfig+0x2ac>)
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d116      	bne.n	8007f28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007efa:	4b5c      	ldr	r3, [pc, #368]	; (800806c <HAL_RCC_OscConfig+0x2ac>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f003 0302 	and.w	r3, r3, #2
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d005      	beq.n	8007f12 <HAL_RCC_OscConfig+0x152>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	68db      	ldr	r3, [r3, #12]
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d001      	beq.n	8007f12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007f0e:	2301      	movs	r3, #1
 8007f10:	e1bb      	b.n	800828a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f12:	4b56      	ldr	r3, [pc, #344]	; (800806c <HAL_RCC_OscConfig+0x2ac>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	691b      	ldr	r3, [r3, #16]
 8007f1e:	00db      	lsls	r3, r3, #3
 8007f20:	4952      	ldr	r1, [pc, #328]	; (800806c <HAL_RCC_OscConfig+0x2ac>)
 8007f22:	4313      	orrs	r3, r2
 8007f24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007f26:	e03a      	b.n	8007f9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	68db      	ldr	r3, [r3, #12]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d020      	beq.n	8007f72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007f30:	4b4f      	ldr	r3, [pc, #316]	; (8008070 <HAL_RCC_OscConfig+0x2b0>)
 8007f32:	2201      	movs	r2, #1
 8007f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f36:	f7fe fc65 	bl	8006804 <HAL_GetTick>
 8007f3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f3c:	e008      	b.n	8007f50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007f3e:	f7fe fc61 	bl	8006804 <HAL_GetTick>
 8007f42:	4602      	mov	r2, r0
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	1ad3      	subs	r3, r2, r3
 8007f48:	2b02      	cmp	r3, #2
 8007f4a:	d901      	bls.n	8007f50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007f4c:	2303      	movs	r3, #3
 8007f4e:	e19c      	b.n	800828a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f50:	4b46      	ldr	r3, [pc, #280]	; (800806c <HAL_RCC_OscConfig+0x2ac>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f003 0302 	and.w	r3, r3, #2
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d0f0      	beq.n	8007f3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f5c:	4b43      	ldr	r3, [pc, #268]	; (800806c <HAL_RCC_OscConfig+0x2ac>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	691b      	ldr	r3, [r3, #16]
 8007f68:	00db      	lsls	r3, r3, #3
 8007f6a:	4940      	ldr	r1, [pc, #256]	; (800806c <HAL_RCC_OscConfig+0x2ac>)
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	600b      	str	r3, [r1, #0]
 8007f70:	e015      	b.n	8007f9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007f72:	4b3f      	ldr	r3, [pc, #252]	; (8008070 <HAL_RCC_OscConfig+0x2b0>)
 8007f74:	2200      	movs	r2, #0
 8007f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f78:	f7fe fc44 	bl	8006804 <HAL_GetTick>
 8007f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007f7e:	e008      	b.n	8007f92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007f80:	f7fe fc40 	bl	8006804 <HAL_GetTick>
 8007f84:	4602      	mov	r2, r0
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	1ad3      	subs	r3, r2, r3
 8007f8a:	2b02      	cmp	r3, #2
 8007f8c:	d901      	bls.n	8007f92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007f8e:	2303      	movs	r3, #3
 8007f90:	e17b      	b.n	800828a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007f92:	4b36      	ldr	r3, [pc, #216]	; (800806c <HAL_RCC_OscConfig+0x2ac>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f003 0302 	and.w	r3, r3, #2
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d1f0      	bne.n	8007f80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f003 0308 	and.w	r3, r3, #8
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d030      	beq.n	800800c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	695b      	ldr	r3, [r3, #20]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d016      	beq.n	8007fe0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007fb2:	4b30      	ldr	r3, [pc, #192]	; (8008074 <HAL_RCC_OscConfig+0x2b4>)
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fb8:	f7fe fc24 	bl	8006804 <HAL_GetTick>
 8007fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007fbe:	e008      	b.n	8007fd2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007fc0:	f7fe fc20 	bl	8006804 <HAL_GetTick>
 8007fc4:	4602      	mov	r2, r0
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	1ad3      	subs	r3, r2, r3
 8007fca:	2b02      	cmp	r3, #2
 8007fcc:	d901      	bls.n	8007fd2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007fce:	2303      	movs	r3, #3
 8007fd0:	e15b      	b.n	800828a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007fd2:	4b26      	ldr	r3, [pc, #152]	; (800806c <HAL_RCC_OscConfig+0x2ac>)
 8007fd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fd6:	f003 0302 	and.w	r3, r3, #2
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d0f0      	beq.n	8007fc0 <HAL_RCC_OscConfig+0x200>
 8007fde:	e015      	b.n	800800c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007fe0:	4b24      	ldr	r3, [pc, #144]	; (8008074 <HAL_RCC_OscConfig+0x2b4>)
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007fe6:	f7fe fc0d 	bl	8006804 <HAL_GetTick>
 8007fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007fec:	e008      	b.n	8008000 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007fee:	f7fe fc09 	bl	8006804 <HAL_GetTick>
 8007ff2:	4602      	mov	r2, r0
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	1ad3      	subs	r3, r2, r3
 8007ff8:	2b02      	cmp	r3, #2
 8007ffa:	d901      	bls.n	8008000 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007ffc:	2303      	movs	r3, #3
 8007ffe:	e144      	b.n	800828a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008000:	4b1a      	ldr	r3, [pc, #104]	; (800806c <HAL_RCC_OscConfig+0x2ac>)
 8008002:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008004:	f003 0302 	and.w	r3, r3, #2
 8008008:	2b00      	cmp	r3, #0
 800800a:	d1f0      	bne.n	8007fee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f003 0304 	and.w	r3, r3, #4
 8008014:	2b00      	cmp	r3, #0
 8008016:	f000 80a0 	beq.w	800815a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800801a:	2300      	movs	r3, #0
 800801c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800801e:	4b13      	ldr	r3, [pc, #76]	; (800806c <HAL_RCC_OscConfig+0x2ac>)
 8008020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008026:	2b00      	cmp	r3, #0
 8008028:	d10f      	bne.n	800804a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800802a:	2300      	movs	r3, #0
 800802c:	60bb      	str	r3, [r7, #8]
 800802e:	4b0f      	ldr	r3, [pc, #60]	; (800806c <HAL_RCC_OscConfig+0x2ac>)
 8008030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008032:	4a0e      	ldr	r2, [pc, #56]	; (800806c <HAL_RCC_OscConfig+0x2ac>)
 8008034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008038:	6413      	str	r3, [r2, #64]	; 0x40
 800803a:	4b0c      	ldr	r3, [pc, #48]	; (800806c <HAL_RCC_OscConfig+0x2ac>)
 800803c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800803e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008042:	60bb      	str	r3, [r7, #8]
 8008044:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008046:	2301      	movs	r3, #1
 8008048:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800804a:	4b0b      	ldr	r3, [pc, #44]	; (8008078 <HAL_RCC_OscConfig+0x2b8>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008052:	2b00      	cmp	r3, #0
 8008054:	d121      	bne.n	800809a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008056:	4b08      	ldr	r3, [pc, #32]	; (8008078 <HAL_RCC_OscConfig+0x2b8>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a07      	ldr	r2, [pc, #28]	; (8008078 <HAL_RCC_OscConfig+0x2b8>)
 800805c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008060:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008062:	f7fe fbcf 	bl	8006804 <HAL_GetTick>
 8008066:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008068:	e011      	b.n	800808e <HAL_RCC_OscConfig+0x2ce>
 800806a:	bf00      	nop
 800806c:	40023800 	.word	0x40023800
 8008070:	42470000 	.word	0x42470000
 8008074:	42470e80 	.word	0x42470e80
 8008078:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800807c:	f7fe fbc2 	bl	8006804 <HAL_GetTick>
 8008080:	4602      	mov	r2, r0
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	1ad3      	subs	r3, r2, r3
 8008086:	2b02      	cmp	r3, #2
 8008088:	d901      	bls.n	800808e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800808a:	2303      	movs	r3, #3
 800808c:	e0fd      	b.n	800828a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800808e:	4b81      	ldr	r3, [pc, #516]	; (8008294 <HAL_RCC_OscConfig+0x4d4>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008096:	2b00      	cmp	r3, #0
 8008098:	d0f0      	beq.n	800807c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	2b01      	cmp	r3, #1
 80080a0:	d106      	bne.n	80080b0 <HAL_RCC_OscConfig+0x2f0>
 80080a2:	4b7d      	ldr	r3, [pc, #500]	; (8008298 <HAL_RCC_OscConfig+0x4d8>)
 80080a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080a6:	4a7c      	ldr	r2, [pc, #496]	; (8008298 <HAL_RCC_OscConfig+0x4d8>)
 80080a8:	f043 0301 	orr.w	r3, r3, #1
 80080ac:	6713      	str	r3, [r2, #112]	; 0x70
 80080ae:	e01c      	b.n	80080ea <HAL_RCC_OscConfig+0x32a>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	2b05      	cmp	r3, #5
 80080b6:	d10c      	bne.n	80080d2 <HAL_RCC_OscConfig+0x312>
 80080b8:	4b77      	ldr	r3, [pc, #476]	; (8008298 <HAL_RCC_OscConfig+0x4d8>)
 80080ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080bc:	4a76      	ldr	r2, [pc, #472]	; (8008298 <HAL_RCC_OscConfig+0x4d8>)
 80080be:	f043 0304 	orr.w	r3, r3, #4
 80080c2:	6713      	str	r3, [r2, #112]	; 0x70
 80080c4:	4b74      	ldr	r3, [pc, #464]	; (8008298 <HAL_RCC_OscConfig+0x4d8>)
 80080c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080c8:	4a73      	ldr	r2, [pc, #460]	; (8008298 <HAL_RCC_OscConfig+0x4d8>)
 80080ca:	f043 0301 	orr.w	r3, r3, #1
 80080ce:	6713      	str	r3, [r2, #112]	; 0x70
 80080d0:	e00b      	b.n	80080ea <HAL_RCC_OscConfig+0x32a>
 80080d2:	4b71      	ldr	r3, [pc, #452]	; (8008298 <HAL_RCC_OscConfig+0x4d8>)
 80080d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080d6:	4a70      	ldr	r2, [pc, #448]	; (8008298 <HAL_RCC_OscConfig+0x4d8>)
 80080d8:	f023 0301 	bic.w	r3, r3, #1
 80080dc:	6713      	str	r3, [r2, #112]	; 0x70
 80080de:	4b6e      	ldr	r3, [pc, #440]	; (8008298 <HAL_RCC_OscConfig+0x4d8>)
 80080e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080e2:	4a6d      	ldr	r2, [pc, #436]	; (8008298 <HAL_RCC_OscConfig+0x4d8>)
 80080e4:	f023 0304 	bic.w	r3, r3, #4
 80080e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	689b      	ldr	r3, [r3, #8]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d015      	beq.n	800811e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080f2:	f7fe fb87 	bl	8006804 <HAL_GetTick>
 80080f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80080f8:	e00a      	b.n	8008110 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80080fa:	f7fe fb83 	bl	8006804 <HAL_GetTick>
 80080fe:	4602      	mov	r2, r0
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	1ad3      	subs	r3, r2, r3
 8008104:	f241 3288 	movw	r2, #5000	; 0x1388
 8008108:	4293      	cmp	r3, r2
 800810a:	d901      	bls.n	8008110 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800810c:	2303      	movs	r3, #3
 800810e:	e0bc      	b.n	800828a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008110:	4b61      	ldr	r3, [pc, #388]	; (8008298 <HAL_RCC_OscConfig+0x4d8>)
 8008112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008114:	f003 0302 	and.w	r3, r3, #2
 8008118:	2b00      	cmp	r3, #0
 800811a:	d0ee      	beq.n	80080fa <HAL_RCC_OscConfig+0x33a>
 800811c:	e014      	b.n	8008148 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800811e:	f7fe fb71 	bl	8006804 <HAL_GetTick>
 8008122:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008124:	e00a      	b.n	800813c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008126:	f7fe fb6d 	bl	8006804 <HAL_GetTick>
 800812a:	4602      	mov	r2, r0
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	1ad3      	subs	r3, r2, r3
 8008130:	f241 3288 	movw	r2, #5000	; 0x1388
 8008134:	4293      	cmp	r3, r2
 8008136:	d901      	bls.n	800813c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8008138:	2303      	movs	r3, #3
 800813a:	e0a6      	b.n	800828a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800813c:	4b56      	ldr	r3, [pc, #344]	; (8008298 <HAL_RCC_OscConfig+0x4d8>)
 800813e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008140:	f003 0302 	and.w	r3, r3, #2
 8008144:	2b00      	cmp	r3, #0
 8008146:	d1ee      	bne.n	8008126 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008148:	7dfb      	ldrb	r3, [r7, #23]
 800814a:	2b01      	cmp	r3, #1
 800814c:	d105      	bne.n	800815a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800814e:	4b52      	ldr	r3, [pc, #328]	; (8008298 <HAL_RCC_OscConfig+0x4d8>)
 8008150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008152:	4a51      	ldr	r2, [pc, #324]	; (8008298 <HAL_RCC_OscConfig+0x4d8>)
 8008154:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008158:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	699b      	ldr	r3, [r3, #24]
 800815e:	2b00      	cmp	r3, #0
 8008160:	f000 8092 	beq.w	8008288 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008164:	4b4c      	ldr	r3, [pc, #304]	; (8008298 <HAL_RCC_OscConfig+0x4d8>)
 8008166:	689b      	ldr	r3, [r3, #8]
 8008168:	f003 030c 	and.w	r3, r3, #12
 800816c:	2b08      	cmp	r3, #8
 800816e:	d05c      	beq.n	800822a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	699b      	ldr	r3, [r3, #24]
 8008174:	2b02      	cmp	r3, #2
 8008176:	d141      	bne.n	80081fc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008178:	4b48      	ldr	r3, [pc, #288]	; (800829c <HAL_RCC_OscConfig+0x4dc>)
 800817a:	2200      	movs	r2, #0
 800817c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800817e:	f7fe fb41 	bl	8006804 <HAL_GetTick>
 8008182:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008184:	e008      	b.n	8008198 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008186:	f7fe fb3d 	bl	8006804 <HAL_GetTick>
 800818a:	4602      	mov	r2, r0
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	1ad3      	subs	r3, r2, r3
 8008190:	2b02      	cmp	r3, #2
 8008192:	d901      	bls.n	8008198 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8008194:	2303      	movs	r3, #3
 8008196:	e078      	b.n	800828a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008198:	4b3f      	ldr	r3, [pc, #252]	; (8008298 <HAL_RCC_OscConfig+0x4d8>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d1f0      	bne.n	8008186 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	69da      	ldr	r2, [r3, #28]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6a1b      	ldr	r3, [r3, #32]
 80081ac:	431a      	orrs	r2, r3
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b2:	019b      	lsls	r3, r3, #6
 80081b4:	431a      	orrs	r2, r3
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ba:	085b      	lsrs	r3, r3, #1
 80081bc:	3b01      	subs	r3, #1
 80081be:	041b      	lsls	r3, r3, #16
 80081c0:	431a      	orrs	r2, r3
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c6:	061b      	lsls	r3, r3, #24
 80081c8:	4933      	ldr	r1, [pc, #204]	; (8008298 <HAL_RCC_OscConfig+0x4d8>)
 80081ca:	4313      	orrs	r3, r2
 80081cc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80081ce:	4b33      	ldr	r3, [pc, #204]	; (800829c <HAL_RCC_OscConfig+0x4dc>)
 80081d0:	2201      	movs	r2, #1
 80081d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081d4:	f7fe fb16 	bl	8006804 <HAL_GetTick>
 80081d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80081da:	e008      	b.n	80081ee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80081dc:	f7fe fb12 	bl	8006804 <HAL_GetTick>
 80081e0:	4602      	mov	r2, r0
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	1ad3      	subs	r3, r2, r3
 80081e6:	2b02      	cmp	r3, #2
 80081e8:	d901      	bls.n	80081ee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80081ea:	2303      	movs	r3, #3
 80081ec:	e04d      	b.n	800828a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80081ee:	4b2a      	ldr	r3, [pc, #168]	; (8008298 <HAL_RCC_OscConfig+0x4d8>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d0f0      	beq.n	80081dc <HAL_RCC_OscConfig+0x41c>
 80081fa:	e045      	b.n	8008288 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80081fc:	4b27      	ldr	r3, [pc, #156]	; (800829c <HAL_RCC_OscConfig+0x4dc>)
 80081fe:	2200      	movs	r2, #0
 8008200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008202:	f7fe faff 	bl	8006804 <HAL_GetTick>
 8008206:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008208:	e008      	b.n	800821c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800820a:	f7fe fafb 	bl	8006804 <HAL_GetTick>
 800820e:	4602      	mov	r2, r0
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	1ad3      	subs	r3, r2, r3
 8008214:	2b02      	cmp	r3, #2
 8008216:	d901      	bls.n	800821c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8008218:	2303      	movs	r3, #3
 800821a:	e036      	b.n	800828a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800821c:	4b1e      	ldr	r3, [pc, #120]	; (8008298 <HAL_RCC_OscConfig+0x4d8>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008224:	2b00      	cmp	r3, #0
 8008226:	d1f0      	bne.n	800820a <HAL_RCC_OscConfig+0x44a>
 8008228:	e02e      	b.n	8008288 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	699b      	ldr	r3, [r3, #24]
 800822e:	2b01      	cmp	r3, #1
 8008230:	d101      	bne.n	8008236 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8008232:	2301      	movs	r3, #1
 8008234:	e029      	b.n	800828a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008236:	4b18      	ldr	r3, [pc, #96]	; (8008298 <HAL_RCC_OscConfig+0x4d8>)
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	69db      	ldr	r3, [r3, #28]
 8008246:	429a      	cmp	r2, r3
 8008248:	d11c      	bne.n	8008284 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008254:	429a      	cmp	r2, r3
 8008256:	d115      	bne.n	8008284 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008258:	68fa      	ldr	r2, [r7, #12]
 800825a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800825e:	4013      	ands	r3, r2
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008264:	4293      	cmp	r3, r2
 8008266:	d10d      	bne.n	8008284 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008272:	429a      	cmp	r2, r3
 8008274:	d106      	bne.n	8008284 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008280:	429a      	cmp	r2, r3
 8008282:	d001      	beq.n	8008288 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8008284:	2301      	movs	r3, #1
 8008286:	e000      	b.n	800828a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8008288:	2300      	movs	r3, #0
}
 800828a:	4618      	mov	r0, r3
 800828c:	3718      	adds	r7, #24
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	40007000 	.word	0x40007000
 8008298:	40023800 	.word	0x40023800
 800829c:	42470060 	.word	0x42470060

080082a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d101      	bne.n	80082b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80082b0:	2301      	movs	r3, #1
 80082b2:	e0cc      	b.n	800844e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80082b4:	4b68      	ldr	r3, [pc, #416]	; (8008458 <HAL_RCC_ClockConfig+0x1b8>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f003 030f 	and.w	r3, r3, #15
 80082bc:	683a      	ldr	r2, [r7, #0]
 80082be:	429a      	cmp	r2, r3
 80082c0:	d90c      	bls.n	80082dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082c2:	4b65      	ldr	r3, [pc, #404]	; (8008458 <HAL_RCC_ClockConfig+0x1b8>)
 80082c4:	683a      	ldr	r2, [r7, #0]
 80082c6:	b2d2      	uxtb	r2, r2
 80082c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80082ca:	4b63      	ldr	r3, [pc, #396]	; (8008458 <HAL_RCC_ClockConfig+0x1b8>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f003 030f 	and.w	r3, r3, #15
 80082d2:	683a      	ldr	r2, [r7, #0]
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d001      	beq.n	80082dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80082d8:	2301      	movs	r3, #1
 80082da:	e0b8      	b.n	800844e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f003 0302 	and.w	r3, r3, #2
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d020      	beq.n	800832a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f003 0304 	and.w	r3, r3, #4
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d005      	beq.n	8008300 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80082f4:	4b59      	ldr	r3, [pc, #356]	; (800845c <HAL_RCC_ClockConfig+0x1bc>)
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	4a58      	ldr	r2, [pc, #352]	; (800845c <HAL_RCC_ClockConfig+0x1bc>)
 80082fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80082fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f003 0308 	and.w	r3, r3, #8
 8008308:	2b00      	cmp	r3, #0
 800830a:	d005      	beq.n	8008318 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800830c:	4b53      	ldr	r3, [pc, #332]	; (800845c <HAL_RCC_ClockConfig+0x1bc>)
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	4a52      	ldr	r2, [pc, #328]	; (800845c <HAL_RCC_ClockConfig+0x1bc>)
 8008312:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008316:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008318:	4b50      	ldr	r3, [pc, #320]	; (800845c <HAL_RCC_ClockConfig+0x1bc>)
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	689b      	ldr	r3, [r3, #8]
 8008324:	494d      	ldr	r1, [pc, #308]	; (800845c <HAL_RCC_ClockConfig+0x1bc>)
 8008326:	4313      	orrs	r3, r2
 8008328:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f003 0301 	and.w	r3, r3, #1
 8008332:	2b00      	cmp	r3, #0
 8008334:	d044      	beq.n	80083c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	2b01      	cmp	r3, #1
 800833c:	d107      	bne.n	800834e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800833e:	4b47      	ldr	r3, [pc, #284]	; (800845c <HAL_RCC_ClockConfig+0x1bc>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008346:	2b00      	cmp	r3, #0
 8008348:	d119      	bne.n	800837e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800834a:	2301      	movs	r3, #1
 800834c:	e07f      	b.n	800844e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	2b02      	cmp	r3, #2
 8008354:	d003      	beq.n	800835e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800835a:	2b03      	cmp	r3, #3
 800835c:	d107      	bne.n	800836e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800835e:	4b3f      	ldr	r3, [pc, #252]	; (800845c <HAL_RCC_ClockConfig+0x1bc>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008366:	2b00      	cmp	r3, #0
 8008368:	d109      	bne.n	800837e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800836a:	2301      	movs	r3, #1
 800836c:	e06f      	b.n	800844e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800836e:	4b3b      	ldr	r3, [pc, #236]	; (800845c <HAL_RCC_ClockConfig+0x1bc>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f003 0302 	and.w	r3, r3, #2
 8008376:	2b00      	cmp	r3, #0
 8008378:	d101      	bne.n	800837e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800837a:	2301      	movs	r3, #1
 800837c:	e067      	b.n	800844e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800837e:	4b37      	ldr	r3, [pc, #220]	; (800845c <HAL_RCC_ClockConfig+0x1bc>)
 8008380:	689b      	ldr	r3, [r3, #8]
 8008382:	f023 0203 	bic.w	r2, r3, #3
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	4934      	ldr	r1, [pc, #208]	; (800845c <HAL_RCC_ClockConfig+0x1bc>)
 800838c:	4313      	orrs	r3, r2
 800838e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008390:	f7fe fa38 	bl	8006804 <HAL_GetTick>
 8008394:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008396:	e00a      	b.n	80083ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008398:	f7fe fa34 	bl	8006804 <HAL_GetTick>
 800839c:	4602      	mov	r2, r0
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	1ad3      	subs	r3, r2, r3
 80083a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d901      	bls.n	80083ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80083aa:	2303      	movs	r3, #3
 80083ac:	e04f      	b.n	800844e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083ae:	4b2b      	ldr	r3, [pc, #172]	; (800845c <HAL_RCC_ClockConfig+0x1bc>)
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	f003 020c 	and.w	r2, r3, #12
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	009b      	lsls	r3, r3, #2
 80083bc:	429a      	cmp	r2, r3
 80083be:	d1eb      	bne.n	8008398 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80083c0:	4b25      	ldr	r3, [pc, #148]	; (8008458 <HAL_RCC_ClockConfig+0x1b8>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f003 030f 	and.w	r3, r3, #15
 80083c8:	683a      	ldr	r2, [r7, #0]
 80083ca:	429a      	cmp	r2, r3
 80083cc:	d20c      	bcs.n	80083e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083ce:	4b22      	ldr	r3, [pc, #136]	; (8008458 <HAL_RCC_ClockConfig+0x1b8>)
 80083d0:	683a      	ldr	r2, [r7, #0]
 80083d2:	b2d2      	uxtb	r2, r2
 80083d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80083d6:	4b20      	ldr	r3, [pc, #128]	; (8008458 <HAL_RCC_ClockConfig+0x1b8>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f003 030f 	and.w	r3, r3, #15
 80083de:	683a      	ldr	r2, [r7, #0]
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d001      	beq.n	80083e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80083e4:	2301      	movs	r3, #1
 80083e6:	e032      	b.n	800844e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f003 0304 	and.w	r3, r3, #4
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d008      	beq.n	8008406 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80083f4:	4b19      	ldr	r3, [pc, #100]	; (800845c <HAL_RCC_ClockConfig+0x1bc>)
 80083f6:	689b      	ldr	r3, [r3, #8]
 80083f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	68db      	ldr	r3, [r3, #12]
 8008400:	4916      	ldr	r1, [pc, #88]	; (800845c <HAL_RCC_ClockConfig+0x1bc>)
 8008402:	4313      	orrs	r3, r2
 8008404:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f003 0308 	and.w	r3, r3, #8
 800840e:	2b00      	cmp	r3, #0
 8008410:	d009      	beq.n	8008426 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008412:	4b12      	ldr	r3, [pc, #72]	; (800845c <HAL_RCC_ClockConfig+0x1bc>)
 8008414:	689b      	ldr	r3, [r3, #8]
 8008416:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	691b      	ldr	r3, [r3, #16]
 800841e:	00db      	lsls	r3, r3, #3
 8008420:	490e      	ldr	r1, [pc, #56]	; (800845c <HAL_RCC_ClockConfig+0x1bc>)
 8008422:	4313      	orrs	r3, r2
 8008424:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008426:	f000 f821 	bl	800846c <HAL_RCC_GetSysClockFreq>
 800842a:	4602      	mov	r2, r0
 800842c:	4b0b      	ldr	r3, [pc, #44]	; (800845c <HAL_RCC_ClockConfig+0x1bc>)
 800842e:	689b      	ldr	r3, [r3, #8]
 8008430:	091b      	lsrs	r3, r3, #4
 8008432:	f003 030f 	and.w	r3, r3, #15
 8008436:	490a      	ldr	r1, [pc, #40]	; (8008460 <HAL_RCC_ClockConfig+0x1c0>)
 8008438:	5ccb      	ldrb	r3, [r1, r3]
 800843a:	fa22 f303 	lsr.w	r3, r2, r3
 800843e:	4a09      	ldr	r2, [pc, #36]	; (8008464 <HAL_RCC_ClockConfig+0x1c4>)
 8008440:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008442:	4b09      	ldr	r3, [pc, #36]	; (8008468 <HAL_RCC_ClockConfig+0x1c8>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4618      	mov	r0, r3
 8008448:	f7fe f998 	bl	800677c <HAL_InitTick>

  return HAL_OK;
 800844c:	2300      	movs	r3, #0
}
 800844e:	4618      	mov	r0, r3
 8008450:	3710      	adds	r7, #16
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
 8008456:	bf00      	nop
 8008458:	40023c00 	.word	0x40023c00
 800845c:	40023800 	.word	0x40023800
 8008460:	08018824 	.word	0x08018824
 8008464:	20000014 	.word	0x20000014
 8008468:	20000018 	.word	0x20000018

0800846c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800846c:	b5b0      	push	{r4, r5, r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008472:	2100      	movs	r1, #0
 8008474:	6079      	str	r1, [r7, #4]
 8008476:	2100      	movs	r1, #0
 8008478:	60f9      	str	r1, [r7, #12]
 800847a:	2100      	movs	r1, #0
 800847c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800847e:	2100      	movs	r1, #0
 8008480:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008482:	4952      	ldr	r1, [pc, #328]	; (80085cc <HAL_RCC_GetSysClockFreq+0x160>)
 8008484:	6889      	ldr	r1, [r1, #8]
 8008486:	f001 010c 	and.w	r1, r1, #12
 800848a:	2908      	cmp	r1, #8
 800848c:	d00d      	beq.n	80084aa <HAL_RCC_GetSysClockFreq+0x3e>
 800848e:	2908      	cmp	r1, #8
 8008490:	f200 8094 	bhi.w	80085bc <HAL_RCC_GetSysClockFreq+0x150>
 8008494:	2900      	cmp	r1, #0
 8008496:	d002      	beq.n	800849e <HAL_RCC_GetSysClockFreq+0x32>
 8008498:	2904      	cmp	r1, #4
 800849a:	d003      	beq.n	80084a4 <HAL_RCC_GetSysClockFreq+0x38>
 800849c:	e08e      	b.n	80085bc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800849e:	4b4c      	ldr	r3, [pc, #304]	; (80085d0 <HAL_RCC_GetSysClockFreq+0x164>)
 80084a0:	60bb      	str	r3, [r7, #8]
       break;
 80084a2:	e08e      	b.n	80085c2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80084a4:	4b4b      	ldr	r3, [pc, #300]	; (80085d4 <HAL_RCC_GetSysClockFreq+0x168>)
 80084a6:	60bb      	str	r3, [r7, #8]
      break;
 80084a8:	e08b      	b.n	80085c2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80084aa:	4948      	ldr	r1, [pc, #288]	; (80085cc <HAL_RCC_GetSysClockFreq+0x160>)
 80084ac:	6849      	ldr	r1, [r1, #4]
 80084ae:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80084b2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80084b4:	4945      	ldr	r1, [pc, #276]	; (80085cc <HAL_RCC_GetSysClockFreq+0x160>)
 80084b6:	6849      	ldr	r1, [r1, #4]
 80084b8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80084bc:	2900      	cmp	r1, #0
 80084be:	d024      	beq.n	800850a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80084c0:	4942      	ldr	r1, [pc, #264]	; (80085cc <HAL_RCC_GetSysClockFreq+0x160>)
 80084c2:	6849      	ldr	r1, [r1, #4]
 80084c4:	0989      	lsrs	r1, r1, #6
 80084c6:	4608      	mov	r0, r1
 80084c8:	f04f 0100 	mov.w	r1, #0
 80084cc:	f240 14ff 	movw	r4, #511	; 0x1ff
 80084d0:	f04f 0500 	mov.w	r5, #0
 80084d4:	ea00 0204 	and.w	r2, r0, r4
 80084d8:	ea01 0305 	and.w	r3, r1, r5
 80084dc:	493d      	ldr	r1, [pc, #244]	; (80085d4 <HAL_RCC_GetSysClockFreq+0x168>)
 80084de:	fb01 f003 	mul.w	r0, r1, r3
 80084e2:	2100      	movs	r1, #0
 80084e4:	fb01 f102 	mul.w	r1, r1, r2
 80084e8:	1844      	adds	r4, r0, r1
 80084ea:	493a      	ldr	r1, [pc, #232]	; (80085d4 <HAL_RCC_GetSysClockFreq+0x168>)
 80084ec:	fba2 0101 	umull	r0, r1, r2, r1
 80084f0:	1863      	adds	r3, r4, r1
 80084f2:	4619      	mov	r1, r3
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	461a      	mov	r2, r3
 80084f8:	f04f 0300 	mov.w	r3, #0
 80084fc:	f7f8 fc2c 	bl	8000d58 <__aeabi_uldivmod>
 8008500:	4602      	mov	r2, r0
 8008502:	460b      	mov	r3, r1
 8008504:	4613      	mov	r3, r2
 8008506:	60fb      	str	r3, [r7, #12]
 8008508:	e04a      	b.n	80085a0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800850a:	4b30      	ldr	r3, [pc, #192]	; (80085cc <HAL_RCC_GetSysClockFreq+0x160>)
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	099b      	lsrs	r3, r3, #6
 8008510:	461a      	mov	r2, r3
 8008512:	f04f 0300 	mov.w	r3, #0
 8008516:	f240 10ff 	movw	r0, #511	; 0x1ff
 800851a:	f04f 0100 	mov.w	r1, #0
 800851e:	ea02 0400 	and.w	r4, r2, r0
 8008522:	ea03 0501 	and.w	r5, r3, r1
 8008526:	4620      	mov	r0, r4
 8008528:	4629      	mov	r1, r5
 800852a:	f04f 0200 	mov.w	r2, #0
 800852e:	f04f 0300 	mov.w	r3, #0
 8008532:	014b      	lsls	r3, r1, #5
 8008534:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008538:	0142      	lsls	r2, r0, #5
 800853a:	4610      	mov	r0, r2
 800853c:	4619      	mov	r1, r3
 800853e:	1b00      	subs	r0, r0, r4
 8008540:	eb61 0105 	sbc.w	r1, r1, r5
 8008544:	f04f 0200 	mov.w	r2, #0
 8008548:	f04f 0300 	mov.w	r3, #0
 800854c:	018b      	lsls	r3, r1, #6
 800854e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008552:	0182      	lsls	r2, r0, #6
 8008554:	1a12      	subs	r2, r2, r0
 8008556:	eb63 0301 	sbc.w	r3, r3, r1
 800855a:	f04f 0000 	mov.w	r0, #0
 800855e:	f04f 0100 	mov.w	r1, #0
 8008562:	00d9      	lsls	r1, r3, #3
 8008564:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008568:	00d0      	lsls	r0, r2, #3
 800856a:	4602      	mov	r2, r0
 800856c:	460b      	mov	r3, r1
 800856e:	1912      	adds	r2, r2, r4
 8008570:	eb45 0303 	adc.w	r3, r5, r3
 8008574:	f04f 0000 	mov.w	r0, #0
 8008578:	f04f 0100 	mov.w	r1, #0
 800857c:	0299      	lsls	r1, r3, #10
 800857e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8008582:	0290      	lsls	r0, r2, #10
 8008584:	4602      	mov	r2, r0
 8008586:	460b      	mov	r3, r1
 8008588:	4610      	mov	r0, r2
 800858a:	4619      	mov	r1, r3
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	461a      	mov	r2, r3
 8008590:	f04f 0300 	mov.w	r3, #0
 8008594:	f7f8 fbe0 	bl	8000d58 <__aeabi_uldivmod>
 8008598:	4602      	mov	r2, r0
 800859a:	460b      	mov	r3, r1
 800859c:	4613      	mov	r3, r2
 800859e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80085a0:	4b0a      	ldr	r3, [pc, #40]	; (80085cc <HAL_RCC_GetSysClockFreq+0x160>)
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	0c1b      	lsrs	r3, r3, #16
 80085a6:	f003 0303 	and.w	r3, r3, #3
 80085aa:	3301      	adds	r3, #1
 80085ac:	005b      	lsls	r3, r3, #1
 80085ae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80085b0:	68fa      	ldr	r2, [r7, #12]
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80085b8:	60bb      	str	r3, [r7, #8]
      break;
 80085ba:	e002      	b.n	80085c2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80085bc:	4b04      	ldr	r3, [pc, #16]	; (80085d0 <HAL_RCC_GetSysClockFreq+0x164>)
 80085be:	60bb      	str	r3, [r7, #8]
      break;
 80085c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80085c2:	68bb      	ldr	r3, [r7, #8]
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3710      	adds	r7, #16
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bdb0      	pop	{r4, r5, r7, pc}
 80085cc:	40023800 	.word	0x40023800
 80085d0:	00f42400 	.word	0x00f42400
 80085d4:	017d7840 	.word	0x017d7840

080085d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80085d8:	b480      	push	{r7}
 80085da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80085dc:	4b03      	ldr	r3, [pc, #12]	; (80085ec <HAL_RCC_GetHCLKFreq+0x14>)
 80085de:	681b      	ldr	r3, [r3, #0]
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr
 80085ea:	bf00      	nop
 80085ec:	20000014 	.word	0x20000014

080085f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80085f4:	f7ff fff0 	bl	80085d8 <HAL_RCC_GetHCLKFreq>
 80085f8:	4602      	mov	r2, r0
 80085fa:	4b05      	ldr	r3, [pc, #20]	; (8008610 <HAL_RCC_GetPCLK1Freq+0x20>)
 80085fc:	689b      	ldr	r3, [r3, #8]
 80085fe:	0a9b      	lsrs	r3, r3, #10
 8008600:	f003 0307 	and.w	r3, r3, #7
 8008604:	4903      	ldr	r1, [pc, #12]	; (8008614 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008606:	5ccb      	ldrb	r3, [r1, r3]
 8008608:	fa22 f303 	lsr.w	r3, r2, r3
}
 800860c:	4618      	mov	r0, r3
 800860e:	bd80      	pop	{r7, pc}
 8008610:	40023800 	.word	0x40023800
 8008614:	08018834 	.word	0x08018834

08008618 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800861c:	f7ff ffdc 	bl	80085d8 <HAL_RCC_GetHCLKFreq>
 8008620:	4602      	mov	r2, r0
 8008622:	4b05      	ldr	r3, [pc, #20]	; (8008638 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008624:	689b      	ldr	r3, [r3, #8]
 8008626:	0b5b      	lsrs	r3, r3, #13
 8008628:	f003 0307 	and.w	r3, r3, #7
 800862c:	4903      	ldr	r1, [pc, #12]	; (800863c <HAL_RCC_GetPCLK2Freq+0x24>)
 800862e:	5ccb      	ldrb	r3, [r1, r3]
 8008630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008634:	4618      	mov	r0, r3
 8008636:	bd80      	pop	{r7, pc}
 8008638:	40023800 	.word	0x40023800
 800863c:	08018834 	.word	0x08018834

08008640 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b086      	sub	sp, #24
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008648:	2300      	movs	r3, #0
 800864a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800864c:	2300      	movs	r3, #0
 800864e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f003 0301 	and.w	r3, r3, #1
 8008658:	2b00      	cmp	r3, #0
 800865a:	d105      	bne.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008664:	2b00      	cmp	r3, #0
 8008666:	d038      	beq.n	80086da <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008668:	4b68      	ldr	r3, [pc, #416]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800866a:	2200      	movs	r2, #0
 800866c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800866e:	f7fe f8c9 	bl	8006804 <HAL_GetTick>
 8008672:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008674:	e008      	b.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008676:	f7fe f8c5 	bl	8006804 <HAL_GetTick>
 800867a:	4602      	mov	r2, r0
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	1ad3      	subs	r3, r2, r3
 8008680:	2b02      	cmp	r3, #2
 8008682:	d901      	bls.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008684:	2303      	movs	r3, #3
 8008686:	e0bd      	b.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008688:	4b61      	ldr	r3, [pc, #388]	; (8008810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008690:	2b00      	cmp	r3, #0
 8008692:	d1f0      	bne.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	685a      	ldr	r2, [r3, #4]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	689b      	ldr	r3, [r3, #8]
 800869c:	019b      	lsls	r3, r3, #6
 800869e:	431a      	orrs	r2, r3
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	68db      	ldr	r3, [r3, #12]
 80086a4:	071b      	lsls	r3, r3, #28
 80086a6:	495a      	ldr	r1, [pc, #360]	; (8008810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086a8:	4313      	orrs	r3, r2
 80086aa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80086ae:	4b57      	ldr	r3, [pc, #348]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80086b0:	2201      	movs	r2, #1
 80086b2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80086b4:	f7fe f8a6 	bl	8006804 <HAL_GetTick>
 80086b8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80086ba:	e008      	b.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80086bc:	f7fe f8a2 	bl	8006804 <HAL_GetTick>
 80086c0:	4602      	mov	r2, r0
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	1ad3      	subs	r3, r2, r3
 80086c6:	2b02      	cmp	r3, #2
 80086c8:	d901      	bls.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80086ca:	2303      	movs	r3, #3
 80086cc:	e09a      	b.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80086ce:	4b50      	ldr	r3, [pc, #320]	; (8008810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d0f0      	beq.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f003 0302 	and.w	r3, r3, #2
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	f000 8083 	beq.w	80087ee <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80086e8:	2300      	movs	r3, #0
 80086ea:	60fb      	str	r3, [r7, #12]
 80086ec:	4b48      	ldr	r3, [pc, #288]	; (8008810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086f0:	4a47      	ldr	r2, [pc, #284]	; (8008810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086f6:	6413      	str	r3, [r2, #64]	; 0x40
 80086f8:	4b45      	ldr	r3, [pc, #276]	; (8008810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008700:	60fb      	str	r3, [r7, #12]
 8008702:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008704:	4b43      	ldr	r3, [pc, #268]	; (8008814 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a42      	ldr	r2, [pc, #264]	; (8008814 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800870a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800870e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008710:	f7fe f878 	bl	8006804 <HAL_GetTick>
 8008714:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008716:	e008      	b.n	800872a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008718:	f7fe f874 	bl	8006804 <HAL_GetTick>
 800871c:	4602      	mov	r2, r0
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	1ad3      	subs	r3, r2, r3
 8008722:	2b02      	cmp	r3, #2
 8008724:	d901      	bls.n	800872a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8008726:	2303      	movs	r3, #3
 8008728:	e06c      	b.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800872a:	4b3a      	ldr	r3, [pc, #232]	; (8008814 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008732:	2b00      	cmp	r3, #0
 8008734:	d0f0      	beq.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008736:	4b36      	ldr	r3, [pc, #216]	; (8008810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800873a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800873e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d02f      	beq.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	691b      	ldr	r3, [r3, #16]
 800874a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800874e:	693a      	ldr	r2, [r7, #16]
 8008750:	429a      	cmp	r2, r3
 8008752:	d028      	beq.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008754:	4b2e      	ldr	r3, [pc, #184]	; (8008810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008758:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800875c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800875e:	4b2e      	ldr	r3, [pc, #184]	; (8008818 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008760:	2201      	movs	r2, #1
 8008762:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008764:	4b2c      	ldr	r3, [pc, #176]	; (8008818 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008766:	2200      	movs	r2, #0
 8008768:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800876a:	4a29      	ldr	r2, [pc, #164]	; (8008810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008770:	4b27      	ldr	r3, [pc, #156]	; (8008810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008774:	f003 0301 	and.w	r3, r3, #1
 8008778:	2b01      	cmp	r3, #1
 800877a:	d114      	bne.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800877c:	f7fe f842 	bl	8006804 <HAL_GetTick>
 8008780:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008782:	e00a      	b.n	800879a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008784:	f7fe f83e 	bl	8006804 <HAL_GetTick>
 8008788:	4602      	mov	r2, r0
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	1ad3      	subs	r3, r2, r3
 800878e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008792:	4293      	cmp	r3, r2
 8008794:	d901      	bls.n	800879a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8008796:	2303      	movs	r3, #3
 8008798:	e034      	b.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800879a:	4b1d      	ldr	r3, [pc, #116]	; (8008810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800879c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800879e:	f003 0302 	and.w	r3, r3, #2
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d0ee      	beq.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	691b      	ldr	r3, [r3, #16]
 80087aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087b2:	d10d      	bne.n	80087d0 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80087b4:	4b16      	ldr	r3, [pc, #88]	; (8008810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80087b6:	689b      	ldr	r3, [r3, #8]
 80087b8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	691b      	ldr	r3, [r3, #16]
 80087c0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80087c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087c8:	4911      	ldr	r1, [pc, #68]	; (8008810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80087ca:	4313      	orrs	r3, r2
 80087cc:	608b      	str	r3, [r1, #8]
 80087ce:	e005      	b.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80087d0:	4b0f      	ldr	r3, [pc, #60]	; (8008810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80087d2:	689b      	ldr	r3, [r3, #8]
 80087d4:	4a0e      	ldr	r2, [pc, #56]	; (8008810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80087d6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80087da:	6093      	str	r3, [r2, #8]
 80087dc:	4b0c      	ldr	r3, [pc, #48]	; (8008810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80087de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	691b      	ldr	r3, [r3, #16]
 80087e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80087e8:	4909      	ldr	r1, [pc, #36]	; (8008810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80087ea:	4313      	orrs	r3, r2
 80087ec:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f003 0308 	and.w	r3, r3, #8
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d003      	beq.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	7d1a      	ldrb	r2, [r3, #20]
 80087fe:	4b07      	ldr	r3, [pc, #28]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8008800:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8008802:	2300      	movs	r3, #0
}
 8008804:	4618      	mov	r0, r3
 8008806:	3718      	adds	r7, #24
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}
 800880c:	42470068 	.word	0x42470068
 8008810:	40023800 	.word	0x40023800
 8008814:	40007000 	.word	0x40007000
 8008818:	42470e40 	.word	0x42470e40
 800881c:	424711e0 	.word	0x424711e0

08008820 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b082      	sub	sp, #8
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d101      	bne.n	8008832 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800882e:	2301      	movs	r3, #1
 8008830:	e083      	b.n	800893a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	7f5b      	ldrb	r3, [r3, #29]
 8008836:	b2db      	uxtb	r3, r3
 8008838:	2b00      	cmp	r3, #0
 800883a:	d105      	bne.n	8008848 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2200      	movs	r2, #0
 8008840:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f7fd f82a 	bl	800589c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2202      	movs	r2, #2
 800884c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	22ca      	movs	r2, #202	; 0xca
 8008854:	625a      	str	r2, [r3, #36]	; 0x24
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	2253      	movs	r2, #83	; 0x53
 800885c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f000 faa8 	bl	8008db4 <RTC_EnterInitMode>
 8008864:	4603      	mov	r3, r0
 8008866:	2b00      	cmp	r3, #0
 8008868:	d008      	beq.n	800887c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	22ff      	movs	r2, #255	; 0xff
 8008870:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2204      	movs	r2, #4
 8008876:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8008878:	2301      	movs	r3, #1
 800887a:	e05e      	b.n	800893a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	689b      	ldr	r3, [r3, #8]
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	6812      	ldr	r2, [r2, #0]
 8008886:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800888a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800888e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	6899      	ldr	r1, [r3, #8]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	685a      	ldr	r2, [r3, #4]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	691b      	ldr	r3, [r3, #16]
 800889e:	431a      	orrs	r2, r3
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	695b      	ldr	r3, [r3, #20]
 80088a4:	431a      	orrs	r2, r3
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	430a      	orrs	r2, r1
 80088ac:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	687a      	ldr	r2, [r7, #4]
 80088b4:	68d2      	ldr	r2, [r2, #12]
 80088b6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	6919      	ldr	r1, [r3, #16]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	689b      	ldr	r3, [r3, #8]
 80088c2:	041a      	lsls	r2, r3, #16
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	430a      	orrs	r2, r1
 80088ca:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	68da      	ldr	r2, [r3, #12]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80088da:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	689b      	ldr	r3, [r3, #8]
 80088e2:	f003 0320 	and.w	r3, r3, #32
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d10e      	bne.n	8008908 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f000 fa3a 	bl	8008d64 <HAL_RTC_WaitForSynchro>
 80088f0:	4603      	mov	r3, r0
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d008      	beq.n	8008908 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	22ff      	movs	r2, #255	; 0xff
 80088fc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2204      	movs	r2, #4
 8008902:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8008904:	2301      	movs	r3, #1
 8008906:	e018      	b.n	800893a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008916:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	699a      	ldr	r2, [r3, #24]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	430a      	orrs	r2, r1
 8008928:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	22ff      	movs	r2, #255	; 0xff
 8008930:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2201      	movs	r2, #1
 8008936:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008938:	2300      	movs	r3, #0
  }
}
 800893a:	4618      	mov	r0, r3
 800893c:	3708      	adds	r7, #8
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}

08008942 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008942:	b590      	push	{r4, r7, lr}
 8008944:	b087      	sub	sp, #28
 8008946:	af00      	add	r7, sp, #0
 8008948:	60f8      	str	r0, [r7, #12]
 800894a:	60b9      	str	r1, [r7, #8]
 800894c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800894e:	2300      	movs	r3, #0
 8008950:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	7f1b      	ldrb	r3, [r3, #28]
 8008956:	2b01      	cmp	r3, #1
 8008958:	d101      	bne.n	800895e <HAL_RTC_SetTime+0x1c>
 800895a:	2302      	movs	r3, #2
 800895c:	e0aa      	b.n	8008ab4 <HAL_RTC_SetTime+0x172>
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	2201      	movs	r2, #1
 8008962:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2202      	movs	r2, #2
 8008968:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d126      	bne.n	80089be <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	689b      	ldr	r3, [r3, #8]
 8008976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800897a:	2b00      	cmp	r3, #0
 800897c:	d102      	bne.n	8008984 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	2200      	movs	r2, #0
 8008982:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	4618      	mov	r0, r3
 800898a:	f000 fa3f 	bl	8008e0c <RTC_ByteToBcd2>
 800898e:	4603      	mov	r3, r0
 8008990:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	785b      	ldrb	r3, [r3, #1]
 8008996:	4618      	mov	r0, r3
 8008998:	f000 fa38 	bl	8008e0c <RTC_ByteToBcd2>
 800899c:	4603      	mov	r3, r0
 800899e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80089a0:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	789b      	ldrb	r3, [r3, #2]
 80089a6:	4618      	mov	r0, r3
 80089a8:	f000 fa30 	bl	8008e0c <RTC_ByteToBcd2>
 80089ac:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80089ae:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	78db      	ldrb	r3, [r3, #3]
 80089b6:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80089b8:	4313      	orrs	r3, r2
 80089ba:	617b      	str	r3, [r7, #20]
 80089bc:	e018      	b.n	80089f0 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	689b      	ldr	r3, [r3, #8]
 80089c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d102      	bne.n	80089d2 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	2200      	movs	r2, #0
 80089d0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	785b      	ldrb	r3, [r3, #1]
 80089dc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80089de:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80089e0:	68ba      	ldr	r2, [r7, #8]
 80089e2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80089e4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	78db      	ldrb	r3, [r3, #3]
 80089ea:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80089ec:	4313      	orrs	r3, r2
 80089ee:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	22ca      	movs	r2, #202	; 0xca
 80089f6:	625a      	str	r2, [r3, #36]	; 0x24
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	2253      	movs	r2, #83	; 0x53
 80089fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008a00:	68f8      	ldr	r0, [r7, #12]
 8008a02:	f000 f9d7 	bl	8008db4 <RTC_EnterInitMode>
 8008a06:	4603      	mov	r3, r0
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d00b      	beq.n	8008a24 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	22ff      	movs	r2, #255	; 0xff
 8008a12:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2204      	movs	r2, #4
 8008a18:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008a20:	2301      	movs	r3, #1
 8008a22:	e047      	b.n	8008ab4 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681a      	ldr	r2, [r3, #0]
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008a2e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008a32:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	689a      	ldr	r2, [r3, #8]
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008a42:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	6899      	ldr	r1, [r3, #8]
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	68da      	ldr	r2, [r3, #12]
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	691b      	ldr	r3, [r3, #16]
 8008a52:	431a      	orrs	r2, r3
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	430a      	orrs	r2, r1
 8008a5a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	68da      	ldr	r2, [r3, #12]
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008a6a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	689b      	ldr	r3, [r3, #8]
 8008a72:	f003 0320 	and.w	r3, r3, #32
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d111      	bne.n	8008a9e <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008a7a:	68f8      	ldr	r0, [r7, #12]
 8008a7c:	f000 f972 	bl	8008d64 <HAL_RTC_WaitForSynchro>
 8008a80:	4603      	mov	r3, r0
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d00b      	beq.n	8008a9e <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	22ff      	movs	r2, #255	; 0xff
 8008a8c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	2204      	movs	r2, #4
 8008a92:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2200      	movs	r2, #0
 8008a98:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	e00a      	b.n	8008ab4 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	22ff      	movs	r2, #255	; 0xff
 8008aa4:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2201      	movs	r2, #1
 8008aaa:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8008ab2:	2300      	movs	r3, #0
  }
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	371c      	adds	r7, #28
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd90      	pop	{r4, r7, pc}

08008abc <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b086      	sub	sp, #24
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	60f8      	str	r0, [r7, #12]
 8008ac4:	60b9      	str	r1, [r7, #8]
 8008ac6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	691b      	ldr	r3, [r3, #16]
 8008adc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008aee:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008af2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	0c1b      	lsrs	r3, r3, #16
 8008af8:	b2db      	uxtb	r3, r3
 8008afa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008afe:	b2da      	uxtb	r2, r3
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	0a1b      	lsrs	r3, r3, #8
 8008b08:	b2db      	uxtb	r3, r3
 8008b0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b0e:	b2da      	uxtb	r2, r3
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	b2db      	uxtb	r3, r3
 8008b18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b1c:	b2da      	uxtb	r2, r3
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	0c1b      	lsrs	r3, r3, #16
 8008b26:	b2db      	uxtb	r3, r3
 8008b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b2c:	b2da      	uxtb	r2, r3
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d11a      	bne.n	8008b6e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	781b      	ldrb	r3, [r3, #0]
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f000 f983 	bl	8008e48 <RTC_Bcd2ToByte>
 8008b42:	4603      	mov	r3, r0
 8008b44:	461a      	mov	r2, r3
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	785b      	ldrb	r3, [r3, #1]
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f000 f97a 	bl	8008e48 <RTC_Bcd2ToByte>
 8008b54:	4603      	mov	r3, r0
 8008b56:	461a      	mov	r2, r3
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	789b      	ldrb	r3, [r3, #2]
 8008b60:	4618      	mov	r0, r3
 8008b62:	f000 f971 	bl	8008e48 <RTC_Bcd2ToByte>
 8008b66:	4603      	mov	r3, r0
 8008b68:	461a      	mov	r2, r3
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8008b6e:	2300      	movs	r3, #0
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3718      	adds	r7, #24
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008b78:	b590      	push	{r4, r7, lr}
 8008b7a:	b087      	sub	sp, #28
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	60f8      	str	r0, [r7, #12]
 8008b80:	60b9      	str	r1, [r7, #8]
 8008b82:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008b84:	2300      	movs	r3, #0
 8008b86:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	7f1b      	ldrb	r3, [r3, #28]
 8008b8c:	2b01      	cmp	r3, #1
 8008b8e:	d101      	bne.n	8008b94 <HAL_RTC_SetDate+0x1c>
 8008b90:	2302      	movs	r3, #2
 8008b92:	e094      	b.n	8008cbe <HAL_RTC_SetDate+0x146>
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2201      	movs	r2, #1
 8008b98:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2202      	movs	r2, #2
 8008b9e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d10e      	bne.n	8008bc4 <HAL_RTC_SetDate+0x4c>
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	785b      	ldrb	r3, [r3, #1]
 8008baa:	f003 0310 	and.w	r3, r3, #16
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d008      	beq.n	8008bc4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	785b      	ldrb	r3, [r3, #1]
 8008bb6:	f023 0310 	bic.w	r3, r3, #16
 8008bba:	b2db      	uxtb	r3, r3
 8008bbc:	330a      	adds	r3, #10
 8008bbe:	b2da      	uxtb	r2, r3
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d11c      	bne.n	8008c04 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	78db      	ldrb	r3, [r3, #3]
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f000 f91c 	bl	8008e0c <RTC_ByteToBcd2>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	785b      	ldrb	r3, [r3, #1]
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f000 f915 	bl	8008e0c <RTC_ByteToBcd2>
 8008be2:	4603      	mov	r3, r0
 8008be4:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008be6:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	789b      	ldrb	r3, [r3, #2]
 8008bec:	4618      	mov	r0, r3
 8008bee:	f000 f90d 	bl	8008e0c <RTC_ByteToBcd2>
 8008bf2:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8008bf4:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	781b      	ldrb	r3, [r3, #0]
 8008bfc:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008bfe:	4313      	orrs	r3, r2
 8008c00:	617b      	str	r3, [r7, #20]
 8008c02:	e00e      	b.n	8008c22 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	78db      	ldrb	r3, [r3, #3]
 8008c08:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	785b      	ldrb	r3, [r3, #1]
 8008c0e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008c10:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8008c12:	68ba      	ldr	r2, [r7, #8]
 8008c14:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8008c16:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	22ca      	movs	r2, #202	; 0xca
 8008c28:	625a      	str	r2, [r3, #36]	; 0x24
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	2253      	movs	r2, #83	; 0x53
 8008c30:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008c32:	68f8      	ldr	r0, [r7, #12]
 8008c34:	f000 f8be 	bl	8008db4 <RTC_EnterInitMode>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d00b      	beq.n	8008c56 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	22ff      	movs	r2, #255	; 0xff
 8008c44:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2204      	movs	r2, #4
 8008c4a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008c52:	2301      	movs	r3, #1
 8008c54:	e033      	b.n	8008cbe <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681a      	ldr	r2, [r3, #0]
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008c60:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008c64:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	68da      	ldr	r2, [r3, #12]
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008c74:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	689b      	ldr	r3, [r3, #8]
 8008c7c:	f003 0320 	and.w	r3, r3, #32
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d111      	bne.n	8008ca8 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008c84:	68f8      	ldr	r0, [r7, #12]
 8008c86:	f000 f86d 	bl	8008d64 <HAL_RTC_WaitForSynchro>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d00b      	beq.n	8008ca8 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	22ff      	movs	r2, #255	; 0xff
 8008c96:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2204      	movs	r2, #4
 8008c9c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	e00a      	b.n	8008cbe <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	22ff      	movs	r2, #255	; 0xff
 8008cae:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8008cbc:	2300      	movs	r3, #0
  }
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	371c      	adds	r7, #28
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd90      	pop	{r4, r7, pc}

08008cc6 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008cc6:	b580      	push	{r7, lr}
 8008cc8:	b086      	sub	sp, #24
 8008cca:	af00      	add	r7, sp, #0
 8008ccc:	60f8      	str	r0, [r7, #12]
 8008cce:	60b9      	str	r1, [r7, #8]
 8008cd0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008ce0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008ce4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	0c1b      	lsrs	r3, r3, #16
 8008cea:	b2da      	uxtb	r2, r3
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	0a1b      	lsrs	r3, r3, #8
 8008cf4:	b2db      	uxtb	r3, r3
 8008cf6:	f003 031f 	and.w	r3, r3, #31
 8008cfa:	b2da      	uxtb	r2, r3
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	b2db      	uxtb	r3, r3
 8008d04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d08:	b2da      	uxtb	r2, r3
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	0b5b      	lsrs	r3, r3, #13
 8008d12:	b2db      	uxtb	r3, r3
 8008d14:	f003 0307 	and.w	r3, r3, #7
 8008d18:	b2da      	uxtb	r2, r3
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d11a      	bne.n	8008d5a <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	78db      	ldrb	r3, [r3, #3]
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f000 f88d 	bl	8008e48 <RTC_Bcd2ToByte>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	461a      	mov	r2, r3
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	785b      	ldrb	r3, [r3, #1]
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f000 f884 	bl	8008e48 <RTC_Bcd2ToByte>
 8008d40:	4603      	mov	r3, r0
 8008d42:	461a      	mov	r2, r3
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	789b      	ldrb	r3, [r3, #2]
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f000 f87b 	bl	8008e48 <RTC_Bcd2ToByte>
 8008d52:	4603      	mov	r3, r0
 8008d54:	461a      	mov	r2, r3
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008d5a:	2300      	movs	r3, #0
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3718      	adds	r7, #24
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b084      	sub	sp, #16
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	68da      	ldr	r2, [r3, #12]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008d7e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008d80:	f7fd fd40 	bl	8006804 <HAL_GetTick>
 8008d84:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008d86:	e009      	b.n	8008d9c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008d88:	f7fd fd3c 	bl	8006804 <HAL_GetTick>
 8008d8c:	4602      	mov	r2, r0
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	1ad3      	subs	r3, r2, r3
 8008d92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d96:	d901      	bls.n	8008d9c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008d98:	2303      	movs	r3, #3
 8008d9a:	e007      	b.n	8008dac <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	68db      	ldr	r3, [r3, #12]
 8008da2:	f003 0320 	and.w	r3, r3, #32
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d0ee      	beq.n	8008d88 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008daa:	2300      	movs	r3, #0
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3710      	adds	r7, #16
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}

08008db4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b084      	sub	sp, #16
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	68db      	ldr	r3, [r3, #12]
 8008dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d119      	bne.n	8008e02 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f04f 32ff 	mov.w	r2, #4294967295
 8008dd6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008dd8:	f7fd fd14 	bl	8006804 <HAL_GetTick>
 8008ddc:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008dde:	e009      	b.n	8008df4 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008de0:	f7fd fd10 	bl	8006804 <HAL_GetTick>
 8008de4:	4602      	mov	r2, r0
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	1ad3      	subs	r3, r2, r3
 8008dea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008dee:	d901      	bls.n	8008df4 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008df0:	2303      	movs	r3, #3
 8008df2:	e007      	b.n	8008e04 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	68db      	ldr	r3, [r3, #12]
 8008dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d0ee      	beq.n	8008de0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8008e02:	2300      	movs	r3, #0
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3710      	adds	r7, #16
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}

08008e0c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b085      	sub	sp, #20
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	4603      	mov	r3, r0
 8008e14:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008e16:	2300      	movs	r3, #0
 8008e18:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8008e1a:	e005      	b.n	8008e28 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	3301      	adds	r3, #1
 8008e20:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8008e22:	79fb      	ldrb	r3, [r7, #7]
 8008e24:	3b0a      	subs	r3, #10
 8008e26:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8008e28:	79fb      	ldrb	r3, [r7, #7]
 8008e2a:	2b09      	cmp	r3, #9
 8008e2c:	d8f6      	bhi.n	8008e1c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	b2db      	uxtb	r3, r3
 8008e32:	011b      	lsls	r3, r3, #4
 8008e34:	b2da      	uxtb	r2, r3
 8008e36:	79fb      	ldrb	r3, [r7, #7]
 8008e38:	4313      	orrs	r3, r2
 8008e3a:	b2db      	uxtb	r3, r3
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3714      	adds	r7, #20
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr

08008e48 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b085      	sub	sp, #20
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	4603      	mov	r3, r0
 8008e50:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8008e52:	2300      	movs	r3, #0
 8008e54:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8008e56:	79fb      	ldrb	r3, [r7, #7]
 8008e58:	091b      	lsrs	r3, r3, #4
 8008e5a:	b2db      	uxtb	r3, r3
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	4613      	mov	r3, r2
 8008e60:	009b      	lsls	r3, r3, #2
 8008e62:	4413      	add	r3, r2
 8008e64:	005b      	lsls	r3, r3, #1
 8008e66:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8008e68:	79fb      	ldrb	r3, [r7, #7]
 8008e6a:	f003 030f 	and.w	r3, r3, #15
 8008e6e:	b2da      	uxtb	r2, r3
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	b2db      	uxtb	r3, r3
 8008e74:	4413      	add	r3, r2
 8008e76:	b2db      	uxtb	r3, r3
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3714      	adds	r7, #20
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr

08008e84 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b082      	sub	sp, #8
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d101      	bne.n	8008e96 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008e92:	2301      	movs	r3, #1
 8008e94:	e022      	b.n	8008edc <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008e9c:	b2db      	uxtb	r3, r3
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d105      	bne.n	8008eae <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f7fc fd0d 	bl	80058c8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2203      	movs	r2, #3
 8008eb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f000 f814 	bl	8008ee4 <HAL_SD_InitCard>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d001      	beq.n	8008ec6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	e00a      	b.n	8008edc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2201      	movs	r2, #1
 8008ed6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008eda:	2300      	movs	r3, #0
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3708      	adds	r7, #8
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}

08008ee4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008ee4:	b5b0      	push	{r4, r5, r7, lr}
 8008ee6:	b08e      	sub	sp, #56	; 0x38
 8008ee8:	af04      	add	r7, sp, #16
 8008eea:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8008eec:	2300      	movs	r3, #0
 8008eee:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8008efc:	2300      	movs	r3, #0
 8008efe:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8008f00:	2376      	movs	r3, #118	; 0x76
 8008f02:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681d      	ldr	r5, [r3, #0]
 8008f08:	466c      	mov	r4, sp
 8008f0a:	f107 0314 	add.w	r3, r7, #20
 8008f0e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008f12:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008f16:	f107 0308 	add.w	r3, r7, #8
 8008f1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008f1c:	4628      	mov	r0, r5
 8008f1e:	f003 fa59 	bl	800c3d4 <SDIO_Init>
 8008f22:	4603      	mov	r3, r0
 8008f24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008f28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d001      	beq.n	8008f34 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008f30:	2301      	movs	r3, #1
 8008f32:	e031      	b.n	8008f98 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8008f34:	4b1a      	ldr	r3, [pc, #104]	; (8008fa0 <HAL_SD_InitCard+0xbc>)
 8008f36:	2200      	movs	r2, #0
 8008f38:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f003 fa91 	bl	800c466 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8008f44:	4b16      	ldr	r3, [pc, #88]	; (8008fa0 <HAL_SD_InitCard+0xbc>)
 8008f46:	2201      	movs	r2, #1
 8008f48:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 ffda 	bl	8009f04 <SD_PowerON>
 8008f50:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f52:	6a3b      	ldr	r3, [r7, #32]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d00b      	beq.n	8008f70 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f64:	6a3b      	ldr	r3, [r7, #32]
 8008f66:	431a      	orrs	r2, r3
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	e013      	b.n	8008f98 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f000 fefb 	bl	8009d6c <SD_InitCard>
 8008f76:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f78:	6a3b      	ldr	r3, [r7, #32]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d00b      	beq.n	8008f96 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2201      	movs	r2, #1
 8008f82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f8a:	6a3b      	ldr	r3, [r7, #32]
 8008f8c:	431a      	orrs	r2, r3
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008f92:	2301      	movs	r3, #1
 8008f94:	e000      	b.n	8008f98 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8008f96:	2300      	movs	r3, #0
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3728      	adds	r7, #40	; 0x28
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bdb0      	pop	{r4, r5, r7, pc}
 8008fa0:	422580a0 	.word	0x422580a0

08008fa4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b08c      	sub	sp, #48	; 0x30
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	60f8      	str	r0, [r7, #12]
 8008fac:	60b9      	str	r1, [r7, #8]
 8008fae:	607a      	str	r2, [r7, #4]
 8008fb0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d107      	bne.n	8008fcc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fc0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008fc8:	2301      	movs	r3, #1
 8008fca:	e0c9      	b.n	8009160 <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008fd2:	b2db      	uxtb	r3, r3
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	f040 80c2 	bne.w	800915e <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008fe0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	441a      	add	r2, r3
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fea:	429a      	cmp	r2, r3
 8008fec:	d907      	bls.n	8008ffe <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ff2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	e0b0      	b.n	8009160 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2203      	movs	r2, #3
 8009002:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	2200      	movs	r2, #0
 800900c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009014:	68fa      	ldr	r2, [r7, #12]
 8009016:	6812      	ldr	r2, [r2, #0]
 8009018:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 800901c:	f043 0302 	orr.w	r3, r3, #2
 8009020:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009026:	4a50      	ldr	r2, [pc, #320]	; (8009168 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 8009028:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800902e:	4a4f      	ldr	r2, [pc, #316]	; (800916c <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8009030:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009036:	2200      	movs	r2, #0
 8009038:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	3380      	adds	r3, #128	; 0x80
 8009044:	4619      	mov	r1, r3
 8009046:	68ba      	ldr	r2, [r7, #8]
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	025b      	lsls	r3, r3, #9
 800904c:	089b      	lsrs	r3, r3, #2
 800904e:	f7fe f9af 	bl	80073b0 <HAL_DMA_Start_IT>
 8009052:	4603      	mov	r3, r0
 8009054:	2b00      	cmp	r3, #0
 8009056:	d017      	beq.n	8009088 <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8009066:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4a40      	ldr	r2, [pc, #256]	; (8009170 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800906e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009074:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2201      	movs	r2, #1
 8009080:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009084:	2301      	movs	r3, #1
 8009086:	e06b      	b.n	8009160 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8009088:	4b3a      	ldr	r3, [pc, #232]	; (8009174 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 800908a:	2201      	movs	r2, #1
 800908c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009092:	2b01      	cmp	r3, #1
 8009094:	d002      	beq.n	800909c <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 8009096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009098:	025b      	lsls	r3, r3, #9
 800909a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80090a4:	4618      	mov	r0, r3
 80090a6:	f003 fa71 	bl	800c58c <SDMMC_CmdBlockLength>
 80090aa:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 80090ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d00f      	beq.n	80090d2 <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	4a2e      	ldr	r2, [pc, #184]	; (8009170 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 80090b8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090c0:	431a      	orrs	r2, r3
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	2201      	movs	r2, #1
 80090ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 80090ce:	2301      	movs	r3, #1
 80090d0:	e046      	b.n	8009160 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80090d2:	f04f 33ff 	mov.w	r3, #4294967295
 80090d6:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	025b      	lsls	r3, r3, #9
 80090dc:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80090de:	2390      	movs	r3, #144	; 0x90
 80090e0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80090e2:	2302      	movs	r3, #2
 80090e4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80090e6:	2300      	movs	r3, #0
 80090e8:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80090ea:	2301      	movs	r3, #1
 80090ec:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f107 0210 	add.w	r2, r7, #16
 80090f6:	4611      	mov	r1, r2
 80090f8:	4618      	mov	r0, r3
 80090fa:	f003 fa1b 	bl	800c534 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	2b01      	cmp	r3, #1
 8009102:	d90a      	bls.n	800911a <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2282      	movs	r2, #130	; 0x82
 8009108:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009110:	4618      	mov	r0, r3
 8009112:	f003 fa7f 	bl	800c614 <SDMMC_CmdReadMultiBlock>
 8009116:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009118:	e009      	b.n	800912e <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2281      	movs	r2, #129	; 0x81
 800911e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009126:	4618      	mov	r0, r3
 8009128:	f003 fa52 	bl	800c5d0 <SDMMC_CmdReadSingleBlock>
 800912c:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800912e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009130:	2b00      	cmp	r3, #0
 8009132:	d012      	beq.n	800915a <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4a0d      	ldr	r2, [pc, #52]	; (8009170 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800913a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009142:	431a      	orrs	r2, r3
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	2201      	movs	r2, #1
 800914c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2200      	movs	r2, #0
 8009154:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8009156:	2301      	movs	r3, #1
 8009158:	e002      	b.n	8009160 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 800915a:	2300      	movs	r3, #0
 800915c:	e000      	b.n	8009160 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 800915e:	2302      	movs	r3, #2
  }
}
 8009160:	4618      	mov	r0, r3
 8009162:	3730      	adds	r7, #48	; 0x30
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}
 8009168:	08009b7b 	.word	0x08009b7b
 800916c:	08009bed 	.word	0x08009bed
 8009170:	004005ff 	.word	0x004005ff
 8009174:	4225858c 	.word	0x4225858c

08009178 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b08c      	sub	sp, #48	; 0x30
 800917c:	af00      	add	r7, sp, #0
 800917e:	60f8      	str	r0, [r7, #12]
 8009180:	60b9      	str	r1, [r7, #8]
 8009182:	607a      	str	r2, [r7, #4]
 8009184:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d107      	bne.n	80091a0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009194:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800919c:	2301      	movs	r3, #1
 800919e:	e0ce      	b.n	800933e <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80091a6:	b2db      	uxtb	r3, r3
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	f040 80c7 	bne.w	800933c <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	2200      	movs	r2, #0
 80091b2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80091b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	441a      	add	r2, r3
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091be:	429a      	cmp	r2, r3
 80091c0:	d907      	bls.n	80091d2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091c6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80091ce:	2301      	movs	r3, #1
 80091d0:	e0b5      	b.n	800933e <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	2203      	movs	r2, #3
 80091d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	2200      	movs	r2, #0
 80091e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091e8:	68fa      	ldr	r2, [r7, #12]
 80091ea:	6812      	ldr	r2, [r2, #0]
 80091ec:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 80091f0:	f043 0302 	orr.w	r3, r3, #2
 80091f4:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091fa:	4a53      	ldr	r2, [pc, #332]	; (8009348 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 80091fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009202:	4a52      	ldr	r2, [pc, #328]	; (800934c <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8009204:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800920a:	2200      	movs	r2, #0
 800920c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009212:	2b01      	cmp	r3, #1
 8009214:	d002      	beq.n	800921c <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8009216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009218:	025b      	lsls	r3, r3, #9
 800921a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009224:	4618      	mov	r0, r3
 8009226:	f003 f9b1 	bl	800c58c <SDMMC_CmdBlockLength>
 800922a:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800922c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800922e:	2b00      	cmp	r3, #0
 8009230:	d00f      	beq.n	8009252 <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	4a46      	ldr	r2, [pc, #280]	; (8009350 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8009238:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800923e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009240:	431a      	orrs	r2, r3
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2201      	movs	r2, #1
 800924a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800924e:	2301      	movs	r3, #1
 8009250:	e075      	b.n	800933e <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	2b01      	cmp	r3, #1
 8009256:	d90a      	bls.n	800926e <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	22a0      	movs	r2, #160	; 0xa0
 800925c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009264:	4618      	mov	r0, r3
 8009266:	f003 fa19 	bl	800c69c <SDMMC_CmdWriteMultiBlock>
 800926a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800926c:	e009      	b.n	8009282 <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	2290      	movs	r2, #144	; 0x90
 8009272:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800927a:	4618      	mov	r0, r3
 800927c:	f003 f9ec 	bl	800c658 <SDMMC_CmdWriteSingleBlock>
 8009280:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009284:	2b00      	cmp	r3, #0
 8009286:	d012      	beq.n	80092ae <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4a30      	ldr	r2, [pc, #192]	; (8009350 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800928e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009296:	431a      	orrs	r2, r3
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2201      	movs	r2, #1
 80092a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2200      	movs	r2, #0
 80092a8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80092aa:	2301      	movs	r3, #1
 80092ac:	e047      	b.n	800933e <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80092ae:	4b29      	ldr	r3, [pc, #164]	; (8009354 <HAL_SD_WriteBlocks_DMA+0x1dc>)
 80092b0:	2201      	movs	r2, #1
 80092b2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80092b8:	68b9      	ldr	r1, [r7, #8]
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	3380      	adds	r3, #128	; 0x80
 80092c0:	461a      	mov	r2, r3
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	025b      	lsls	r3, r3, #9
 80092c6:	089b      	lsrs	r3, r3, #2
 80092c8:	f7fe f872 	bl	80073b0 <HAL_DMA_Start_IT>
 80092cc:	4603      	mov	r3, r0
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d01c      	beq.n	800930c <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092d8:	68fa      	ldr	r2, [r7, #12]
 80092da:	6812      	ldr	r2, [r2, #0]
 80092dc:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 80092e0:	f023 0302 	bic.w	r3, r3, #2
 80092e4:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	4a19      	ldr	r2, [pc, #100]	; (8009350 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80092ec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092f2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	2201      	movs	r2, #1
 80092fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2200      	movs	r2, #0
 8009306:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009308:	2301      	movs	r3, #1
 800930a:	e018      	b.n	800933e <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800930c:	f04f 33ff 	mov.w	r3, #4294967295
 8009310:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	025b      	lsls	r3, r3, #9
 8009316:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8009318:	2390      	movs	r3, #144	; 0x90
 800931a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800931c:	2300      	movs	r3, #0
 800931e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009320:	2300      	movs	r3, #0
 8009322:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8009324:	2301      	movs	r3, #1
 8009326:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f107 0210 	add.w	r2, r7, #16
 8009330:	4611      	mov	r1, r2
 8009332:	4618      	mov	r0, r3
 8009334:	f003 f8fe 	bl	800c534 <SDIO_ConfigData>

      return HAL_OK;
 8009338:	2300      	movs	r3, #0
 800933a:	e000      	b.n	800933e <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 800933c:	2302      	movs	r3, #2
  }
}
 800933e:	4618      	mov	r0, r3
 8009340:	3730      	adds	r7, #48	; 0x30
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop
 8009348:	08009b51 	.word	0x08009b51
 800934c:	08009bed 	.word	0x08009bed
 8009350:	004005ff 	.word	0x004005ff
 8009354:	4225858c 	.word	0x4225858c

08009358 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b084      	sub	sp, #16
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009364:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800936c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009370:	2b00      	cmp	r3, #0
 8009372:	d008      	beq.n	8009386 <HAL_SD_IRQHandler+0x2e>
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	f003 0308 	and.w	r3, r3, #8
 800937a:	2b00      	cmp	r3, #0
 800937c:	d003      	beq.n	8009386 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 ffd6 	bl	800a330 <SD_Read_IT>
 8009384:	e165      	b.n	8009652 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800938c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009390:	2b00      	cmp	r3, #0
 8009392:	f000 808f 	beq.w	80094b4 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800939e:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093a6:	687a      	ldr	r2, [r7, #4]
 80093a8:	6812      	ldr	r2, [r2, #0]
 80093aa:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80093ae:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80093b2:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f022 0201 	bic.w	r2, r2, #1
 80093c2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f003 0308 	and.w	r3, r3, #8
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d039      	beq.n	8009442 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	f003 0302 	and.w	r3, r3, #2
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d104      	bne.n	80093e2 <HAL_SD_IRQHandler+0x8a>
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f003 0320 	and.w	r3, r3, #32
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d011      	beq.n	8009406 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4618      	mov	r0, r3
 80093e8:	f003 f97a 	bl	800c6e0 <SDMMC_CmdStopTransfer>
 80093ec:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d008      	beq.n	8009406 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	431a      	orrs	r2, r3
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f000 f92f 	bl	8009664 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f240 523a 	movw	r2, #1338	; 0x53a
 800940e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2201      	movs	r2, #1
 8009414:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2200      	movs	r2, #0
 800941c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	f003 0301 	and.w	r3, r3, #1
 8009424:	2b00      	cmp	r3, #0
 8009426:	d104      	bne.n	8009432 <HAL_SD_IRQHandler+0xda>
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f003 0302 	and.w	r3, r3, #2
 800942e:	2b00      	cmp	r3, #0
 8009430:	d003      	beq.n	800943a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f003 fdd8 	bl	800cfe8 <HAL_SD_RxCpltCallback>
 8009438:	e10b      	b.n	8009652 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f003 fdca 	bl	800cfd4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009440:	e107      	b.n	8009652 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009448:	2b00      	cmp	r3, #0
 800944a:	f000 8102 	beq.w	8009652 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	f003 0320 	and.w	r3, r3, #32
 8009454:	2b00      	cmp	r3, #0
 8009456:	d011      	beq.n	800947c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	4618      	mov	r0, r3
 800945e:	f003 f93f 	bl	800c6e0 <SDMMC_CmdStopTransfer>
 8009462:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d008      	beq.n	800947c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	431a      	orrs	r2, r3
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f000 f8f4 	bl	8009664 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	f003 0301 	and.w	r3, r3, #1
 8009482:	2b00      	cmp	r3, #0
 8009484:	f040 80e5 	bne.w	8009652 <HAL_SD_IRQHandler+0x2fa>
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	f003 0302 	and.w	r3, r3, #2
 800948e:	2b00      	cmp	r3, #0
 8009490:	f040 80df 	bne.w	8009652 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f022 0208 	bic.w	r2, r2, #8
 80094a2:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2201      	movs	r2, #1
 80094a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f003 fd91 	bl	800cfd4 <HAL_SD_TxCpltCallback>
}
 80094b2:	e0ce      	b.n	8009652 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d008      	beq.n	80094d4 <HAL_SD_IRQHandler+0x17c>
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	f003 0308 	and.w	r3, r3, #8
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d003      	beq.n	80094d4 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f000 ff80 	bl	800a3d2 <SD_Write_IT>
 80094d2:	e0be      	b.n	8009652 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80094da:	f240 233a 	movw	r3, #570	; 0x23a
 80094de:	4013      	ands	r3, r2
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	f000 80b6 	beq.w	8009652 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094ec:	f003 0302 	and.w	r3, r3, #2
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d005      	beq.n	8009500 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094f8:	f043 0202 	orr.w	r2, r3, #2
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009506:	f003 0308 	and.w	r3, r3, #8
 800950a:	2b00      	cmp	r3, #0
 800950c:	d005      	beq.n	800951a <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009512:	f043 0208 	orr.w	r2, r3, #8
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009520:	f003 0320 	and.w	r3, r3, #32
 8009524:	2b00      	cmp	r3, #0
 8009526:	d005      	beq.n	8009534 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800952c:	f043 0220 	orr.w	r2, r3, #32
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800953a:	f003 0310 	and.w	r3, r3, #16
 800953e:	2b00      	cmp	r3, #0
 8009540:	d005      	beq.n	800954e <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009546:	f043 0210 	orr.w	r2, r3, #16
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009554:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009558:	2b00      	cmp	r3, #0
 800955a:	d005      	beq.n	8009568 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009560:	f043 0208 	orr.w	r2, r3, #8
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f240 723a 	movw	r2, #1850	; 0x73a
 8009570:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009578:	687a      	ldr	r2, [r7, #4]
 800957a:	6812      	ldr	r2, [r2, #0]
 800957c:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8009580:	f023 0302 	bic.w	r3, r3, #2
 8009584:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	4618      	mov	r0, r3
 800958c:	f003 f8a8 	bl	800c6e0 <SDMMC_CmdStopTransfer>
 8009590:	4602      	mov	r2, r0
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009596:	431a      	orrs	r2, r3
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	f003 0308 	and.w	r3, r3, #8
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d00a      	beq.n	80095bc <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2201      	movs	r2, #1
 80095aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2200      	movs	r2, #0
 80095b2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f000 f855 	bl	8009664 <HAL_SD_ErrorCallback>
}
 80095ba:	e04a      	b.n	8009652 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d045      	beq.n	8009652 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	f003 0310 	and.w	r3, r3, #16
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d104      	bne.n	80095da <HAL_SD_IRQHandler+0x282>
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	f003 0320 	and.w	r3, r3, #32
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d011      	beq.n	80095fe <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095de:	4a1f      	ldr	r2, [pc, #124]	; (800965c <HAL_SD_IRQHandler+0x304>)
 80095e0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095e6:	4618      	mov	r0, r3
 80095e8:	f7fd ff3a 	bl	8007460 <HAL_DMA_Abort_IT>
 80095ec:	4603      	mov	r3, r0
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d02f      	beq.n	8009652 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095f6:	4618      	mov	r0, r3
 80095f8:	f000 fb4a 	bl	8009c90 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80095fc:	e029      	b.n	8009652 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	f003 0301 	and.w	r3, r3, #1
 8009604:	2b00      	cmp	r3, #0
 8009606:	d104      	bne.n	8009612 <HAL_SD_IRQHandler+0x2ba>
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	f003 0302 	and.w	r3, r3, #2
 800960e:	2b00      	cmp	r3, #0
 8009610:	d011      	beq.n	8009636 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009616:	4a12      	ldr	r2, [pc, #72]	; (8009660 <HAL_SD_IRQHandler+0x308>)
 8009618:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800961e:	4618      	mov	r0, r3
 8009620:	f7fd ff1e 	bl	8007460 <HAL_DMA_Abort_IT>
 8009624:	4603      	mov	r3, r0
 8009626:	2b00      	cmp	r3, #0
 8009628:	d013      	beq.n	8009652 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800962e:	4618      	mov	r0, r3
 8009630:	f000 fb65 	bl	8009cfe <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8009634:	e00d      	b.n	8009652 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2200      	movs	r2, #0
 800963a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2201      	movs	r2, #1
 8009640:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2200      	movs	r2, #0
 8009648:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f003 fcb8 	bl	800cfc0 <HAL_SD_AbortCallback>
}
 8009650:	e7ff      	b.n	8009652 <HAL_SD_IRQHandler+0x2fa>
 8009652:	bf00      	nop
 8009654:	3710      	adds	r7, #16
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}
 800965a:	bf00      	nop
 800965c:	08009c91 	.word	0x08009c91
 8009660:	08009cff 	.word	0x08009cff

08009664 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009664:	b480      	push	{r7}
 8009666:	b083      	sub	sp, #12
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800966c:	bf00      	nop
 800966e:	370c      	adds	r7, #12
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	4770      	bx	lr

08009678 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009678:	b480      	push	{r7}
 800967a:	b083      	sub	sp, #12
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009686:	0f9b      	lsrs	r3, r3, #30
 8009688:	b2da      	uxtb	r2, r3
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009692:	0e9b      	lsrs	r3, r3, #26
 8009694:	b2db      	uxtb	r3, r3
 8009696:	f003 030f 	and.w	r3, r3, #15
 800969a:	b2da      	uxtb	r2, r3
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096a4:	0e1b      	lsrs	r3, r3, #24
 80096a6:	b2db      	uxtb	r3, r3
 80096a8:	f003 0303 	and.w	r3, r3, #3
 80096ac:	b2da      	uxtb	r2, r3
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096b6:	0c1b      	lsrs	r3, r3, #16
 80096b8:	b2da      	uxtb	r2, r3
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096c2:	0a1b      	lsrs	r3, r3, #8
 80096c4:	b2da      	uxtb	r2, r3
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096ce:	b2da      	uxtb	r2, r3
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096d8:	0d1b      	lsrs	r3, r3, #20
 80096da:	b29a      	uxth	r2, r3
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096e4:	0c1b      	lsrs	r3, r3, #16
 80096e6:	b2db      	uxtb	r3, r3
 80096e8:	f003 030f 	and.w	r3, r3, #15
 80096ec:	b2da      	uxtb	r2, r3
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096f6:	0bdb      	lsrs	r3, r3, #15
 80096f8:	b2db      	uxtb	r3, r3
 80096fa:	f003 0301 	and.w	r3, r3, #1
 80096fe:	b2da      	uxtb	r2, r3
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009708:	0b9b      	lsrs	r3, r3, #14
 800970a:	b2db      	uxtb	r3, r3
 800970c:	f003 0301 	and.w	r3, r3, #1
 8009710:	b2da      	uxtb	r2, r3
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800971a:	0b5b      	lsrs	r3, r3, #13
 800971c:	b2db      	uxtb	r3, r3
 800971e:	f003 0301 	and.w	r3, r3, #1
 8009722:	b2da      	uxtb	r2, r3
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800972c:	0b1b      	lsrs	r3, r3, #12
 800972e:	b2db      	uxtb	r3, r3
 8009730:	f003 0301 	and.w	r3, r3, #1
 8009734:	b2da      	uxtb	r2, r3
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	2200      	movs	r2, #0
 800973e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009744:	2b00      	cmp	r3, #0
 8009746:	d163      	bne.n	8009810 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800974c:	009a      	lsls	r2, r3, #2
 800974e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009752:	4013      	ands	r3, r2
 8009754:	687a      	ldr	r2, [r7, #4]
 8009756:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009758:	0f92      	lsrs	r2, r2, #30
 800975a:	431a      	orrs	r2, r3
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009764:	0edb      	lsrs	r3, r3, #27
 8009766:	b2db      	uxtb	r3, r3
 8009768:	f003 0307 	and.w	r3, r3, #7
 800976c:	b2da      	uxtb	r2, r3
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009776:	0e1b      	lsrs	r3, r3, #24
 8009778:	b2db      	uxtb	r3, r3
 800977a:	f003 0307 	and.w	r3, r3, #7
 800977e:	b2da      	uxtb	r2, r3
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009788:	0d5b      	lsrs	r3, r3, #21
 800978a:	b2db      	uxtb	r3, r3
 800978c:	f003 0307 	and.w	r3, r3, #7
 8009790:	b2da      	uxtb	r2, r3
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800979a:	0c9b      	lsrs	r3, r3, #18
 800979c:	b2db      	uxtb	r3, r3
 800979e:	f003 0307 	and.w	r3, r3, #7
 80097a2:	b2da      	uxtb	r2, r3
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097ac:	0bdb      	lsrs	r3, r3, #15
 80097ae:	b2db      	uxtb	r3, r3
 80097b0:	f003 0307 	and.w	r3, r3, #7
 80097b4:	b2da      	uxtb	r2, r3
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	691b      	ldr	r3, [r3, #16]
 80097be:	1c5a      	adds	r2, r3, #1
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	7e1b      	ldrb	r3, [r3, #24]
 80097c8:	b2db      	uxtb	r3, r3
 80097ca:	f003 0307 	and.w	r3, r3, #7
 80097ce:	3302      	adds	r3, #2
 80097d0:	2201      	movs	r2, #1
 80097d2:	fa02 f303 	lsl.w	r3, r2, r3
 80097d6:	687a      	ldr	r2, [r7, #4]
 80097d8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80097da:	fb02 f203 	mul.w	r2, r2, r3
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	7a1b      	ldrb	r3, [r3, #8]
 80097e6:	b2db      	uxtb	r3, r3
 80097e8:	f003 030f 	and.w	r3, r3, #15
 80097ec:	2201      	movs	r2, #1
 80097ee:	409a      	lsls	r2, r3
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097f8:	687a      	ldr	r2, [r7, #4]
 80097fa:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80097fc:	0a52      	lsrs	r2, r2, #9
 80097fe:	fb02 f203 	mul.w	r2, r2, r3
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f44f 7200 	mov.w	r2, #512	; 0x200
 800980c:	661a      	str	r2, [r3, #96]	; 0x60
 800980e:	e031      	b.n	8009874 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009814:	2b01      	cmp	r3, #1
 8009816:	d11d      	bne.n	8009854 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800981c:	041b      	lsls	r3, r3, #16
 800981e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009826:	0c1b      	lsrs	r3, r3, #16
 8009828:	431a      	orrs	r2, r3
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	691b      	ldr	r3, [r3, #16]
 8009832:	3301      	adds	r3, #1
 8009834:	029a      	lsls	r2, r3, #10
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009848:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	661a      	str	r2, [r3, #96]	; 0x60
 8009852:	e00f      	b.n	8009874 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	4a58      	ldr	r2, [pc, #352]	; (80099bc <HAL_SD_GetCardCSD+0x344>)
 800985a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009860:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2201      	movs	r2, #1
 800986c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009870:	2301      	movs	r3, #1
 8009872:	e09d      	b.n	80099b0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009878:	0b9b      	lsrs	r3, r3, #14
 800987a:	b2db      	uxtb	r3, r3
 800987c:	f003 0301 	and.w	r3, r3, #1
 8009880:	b2da      	uxtb	r2, r3
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800988a:	09db      	lsrs	r3, r3, #7
 800988c:	b2db      	uxtb	r3, r3
 800988e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009892:	b2da      	uxtb	r2, r3
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800989c:	b2db      	uxtb	r3, r3
 800989e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098a2:	b2da      	uxtb	r2, r3
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098ac:	0fdb      	lsrs	r3, r3, #31
 80098ae:	b2da      	uxtb	r2, r3
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098b8:	0f5b      	lsrs	r3, r3, #29
 80098ba:	b2db      	uxtb	r3, r3
 80098bc:	f003 0303 	and.w	r3, r3, #3
 80098c0:	b2da      	uxtb	r2, r3
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098ca:	0e9b      	lsrs	r3, r3, #26
 80098cc:	b2db      	uxtb	r3, r3
 80098ce:	f003 0307 	and.w	r3, r3, #7
 80098d2:	b2da      	uxtb	r2, r3
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098dc:	0d9b      	lsrs	r3, r3, #22
 80098de:	b2db      	uxtb	r3, r3
 80098e0:	f003 030f 	and.w	r3, r3, #15
 80098e4:	b2da      	uxtb	r2, r3
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098ee:	0d5b      	lsrs	r3, r3, #21
 80098f0:	b2db      	uxtb	r3, r3
 80098f2:	f003 0301 	and.w	r3, r3, #1
 80098f6:	b2da      	uxtb	r2, r3
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	2200      	movs	r2, #0
 8009902:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800990a:	0c1b      	lsrs	r3, r3, #16
 800990c:	b2db      	uxtb	r3, r3
 800990e:	f003 0301 	and.w	r3, r3, #1
 8009912:	b2da      	uxtb	r2, r3
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800991e:	0bdb      	lsrs	r3, r3, #15
 8009920:	b2db      	uxtb	r3, r3
 8009922:	f003 0301 	and.w	r3, r3, #1
 8009926:	b2da      	uxtb	r2, r3
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009932:	0b9b      	lsrs	r3, r3, #14
 8009934:	b2db      	uxtb	r3, r3
 8009936:	f003 0301 	and.w	r3, r3, #1
 800993a:	b2da      	uxtb	r2, r3
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009946:	0b5b      	lsrs	r3, r3, #13
 8009948:	b2db      	uxtb	r3, r3
 800994a:	f003 0301 	and.w	r3, r3, #1
 800994e:	b2da      	uxtb	r2, r3
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800995a:	0b1b      	lsrs	r3, r3, #12
 800995c:	b2db      	uxtb	r3, r3
 800995e:	f003 0301 	and.w	r3, r3, #1
 8009962:	b2da      	uxtb	r2, r3
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800996e:	0a9b      	lsrs	r3, r3, #10
 8009970:	b2db      	uxtb	r3, r3
 8009972:	f003 0303 	and.w	r3, r3, #3
 8009976:	b2da      	uxtb	r2, r3
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009982:	0a1b      	lsrs	r3, r3, #8
 8009984:	b2db      	uxtb	r3, r3
 8009986:	f003 0303 	and.w	r3, r3, #3
 800998a:	b2da      	uxtb	r2, r3
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009996:	085b      	lsrs	r3, r3, #1
 8009998:	b2db      	uxtb	r3, r3
 800999a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800999e:	b2da      	uxtb	r2, r3
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	2201      	movs	r2, #1
 80099aa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80099ae:	2300      	movs	r3, #0
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	370c      	adds	r7, #12
 80099b4:	46bd      	mov	sp, r7
 80099b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ba:	4770      	bx	lr
 80099bc:	004005ff 	.word	0x004005ff

080099c0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80099c0:	b480      	push	{r7}
 80099c2:	b083      	sub	sp, #12
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
 80099c8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009a0a:	2300      	movs	r3, #0
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	370c      	adds	r7, #12
 8009a10:	46bd      	mov	sp, r7
 8009a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a16:	4770      	bx	lr

08009a18 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009a18:	b5b0      	push	{r4, r5, r7, lr}
 8009a1a:	b08e      	sub	sp, #56	; 0x38
 8009a1c:	af04      	add	r7, sp, #16
 8009a1e:	6078      	str	r0, [r7, #4]
 8009a20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2203      	movs	r2, #3
 8009a26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a2e:	2b03      	cmp	r3, #3
 8009a30:	d02e      	beq.n	8009a90 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a38:	d106      	bne.n	8009a48 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a3e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	639a      	str	r2, [r3, #56]	; 0x38
 8009a46:	e029      	b.n	8009a9c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a4e:	d10a      	bne.n	8009a66 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	f000 fb0d 	bl	800a070 <SD_WideBus_Enable>
 8009a56:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a5e:	431a      	orrs	r2, r3
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	639a      	str	r2, [r3, #56]	; 0x38
 8009a64:	e01a      	b.n	8009a9c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d10a      	bne.n	8009a82 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f000 fb4a 	bl	800a106 <SD_WideBus_Disable>
 8009a72:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a7a:	431a      	orrs	r2, r3
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	639a      	str	r2, [r3, #56]	; 0x38
 8009a80:	e00c      	b.n	8009a9c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a86:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	639a      	str	r2, [r3, #56]	; 0x38
 8009a8e:	e005      	b.n	8009a9c <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a94:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d009      	beq.n	8009ab8 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	4a18      	ldr	r2, [pc, #96]	; (8009b0c <HAL_SD_ConfigWideBusOperation+0xf4>)
 8009aaa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2201      	movs	r2, #1
 8009ab0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	e024      	b.n	8009b02 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	685b      	ldr	r3, [r3, #4]
 8009abc:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	689b      	ldr	r3, [r3, #8]
 8009ac2:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	68db      	ldr	r3, [r3, #12]
 8009ac8:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	695b      	ldr	r3, [r3, #20]
 8009ad2:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	699b      	ldr	r3, [r3, #24]
 8009ad8:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681d      	ldr	r5, [r3, #0]
 8009ade:	466c      	mov	r4, sp
 8009ae0:	f107 0318 	add.w	r3, r7, #24
 8009ae4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009ae8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009aec:	f107 030c 	add.w	r3, r7, #12
 8009af0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009af2:	4628      	mov	r0, r5
 8009af4:	f002 fc6e 	bl	800c3d4 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2201      	movs	r2, #1
 8009afc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009b00:	2300      	movs	r3, #0
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3728      	adds	r7, #40	; 0x28
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bdb0      	pop	{r4, r5, r7, pc}
 8009b0a:	bf00      	nop
 8009b0c:	004005ff 	.word	0x004005ff

08009b10 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b086      	sub	sp, #24
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009b1c:	f107 030c 	add.w	r3, r7, #12
 8009b20:	4619      	mov	r1, r3
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f000 fa7c 	bl	800a020 <SD_SendStatus>
 8009b28:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009b2a:	697b      	ldr	r3, [r7, #20]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d005      	beq.n	8009b3c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	431a      	orrs	r2, r3
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	0a5b      	lsrs	r3, r3, #9
 8009b40:	f003 030f 	and.w	r3, r3, #15
 8009b44:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009b46:	693b      	ldr	r3, [r7, #16]
}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	3718      	adds	r7, #24
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}

08009b50 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009b50:	b480      	push	{r7}
 8009b52:	b085      	sub	sp, #20
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b5c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b6c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8009b6e:	bf00      	nop
 8009b70:	3714      	adds	r7, #20
 8009b72:	46bd      	mov	sp, r7
 8009b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b78:	4770      	bx	lr

08009b7a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009b7a:	b580      	push	{r7, lr}
 8009b7c:	b084      	sub	sp, #16
 8009b7e:	af00      	add	r7, sp, #0
 8009b80:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b86:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b8c:	2b82      	cmp	r3, #130	; 0x82
 8009b8e:	d111      	bne.n	8009bb4 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	4618      	mov	r0, r3
 8009b96:	f002 fda3 	bl	800c6e0 <SDMMC_CmdStopTransfer>
 8009b9a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d008      	beq.n	8009bb4 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	431a      	orrs	r2, r3
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8009bae:	68f8      	ldr	r0, [r7, #12]
 8009bb0:	f7ff fd58 	bl	8009664 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f022 0208 	bic.w	r2, r2, #8
 8009bc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f240 523a 	movw	r2, #1338	; 0x53a
 8009bcc:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	2201      	movs	r2, #1
 8009bd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8009bdc:	68f8      	ldr	r0, [r7, #12]
 8009bde:	f003 fa03 	bl	800cfe8 <HAL_SD_RxCpltCallback>
#endif
}
 8009be2:	bf00      	nop
 8009be4:	3710      	adds	r7, #16
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}
	...

08009bec <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b086      	sub	sp, #24
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bf8:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f7fd fddc 	bl	80077b8 <HAL_DMA_GetError>
 8009c00:	4603      	mov	r3, r0
 8009c02:	2b02      	cmp	r3, #2
 8009c04:	d03e      	beq.n	8009c84 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c0c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c14:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	2b01      	cmp	r3, #1
 8009c1a:	d002      	beq.n	8009c22 <SD_DMAError+0x36>
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2b01      	cmp	r3, #1
 8009c20:	d12d      	bne.n	8009c7e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	4a19      	ldr	r2, [pc, #100]	; (8009c8c <SD_DMAError+0xa0>)
 8009c28:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c30:	697b      	ldr	r3, [r7, #20]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009c38:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c3e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8009c46:	6978      	ldr	r0, [r7, #20]
 8009c48:	f7ff ff62 	bl	8009b10 <HAL_SD_GetCardState>
 8009c4c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	2b06      	cmp	r3, #6
 8009c52:	d002      	beq.n	8009c5a <SD_DMAError+0x6e>
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	2b05      	cmp	r3, #5
 8009c58:	d10a      	bne.n	8009c70 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f002 fd3e 	bl	800c6e0 <SDMMC_CmdStopTransfer>
 8009c64:	4602      	mov	r2, r0
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c6a:	431a      	orrs	r2, r3
 8009c6c:	697b      	ldr	r3, [r7, #20]
 8009c6e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	2201      	movs	r2, #1
 8009c74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8009c7e:	6978      	ldr	r0, [r7, #20]
 8009c80:	f7ff fcf0 	bl	8009664 <HAL_SD_ErrorCallback>
#endif
  }
}
 8009c84:	bf00      	nop
 8009c86:	3718      	adds	r7, #24
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}
 8009c8c:	004005ff 	.word	0x004005ff

08009c90 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b084      	sub	sp, #16
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c9c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f240 523a 	movw	r2, #1338	; 0x53a
 8009ca6:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009ca8:	68f8      	ldr	r0, [r7, #12]
 8009caa:	f7ff ff31 	bl	8009b10 <HAL_SD_GetCardState>
 8009cae:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	2b06      	cmp	r3, #6
 8009cc2:	d002      	beq.n	8009cca <SD_DMATxAbort+0x3a>
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	2b05      	cmp	r3, #5
 8009cc8:	d10a      	bne.n	8009ce0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f002 fd06 	bl	800c6e0 <SDMMC_CmdStopTransfer>
 8009cd4:	4602      	mov	r2, r0
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cda:	431a      	orrs	r2, r3
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d103      	bne.n	8009cf0 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009ce8:	68f8      	ldr	r0, [r7, #12]
 8009cea:	f003 f969 	bl	800cfc0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009cee:	e002      	b.n	8009cf6 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009cf0:	68f8      	ldr	r0, [r7, #12]
 8009cf2:	f7ff fcb7 	bl	8009664 <HAL_SD_ErrorCallback>
}
 8009cf6:	bf00      	nop
 8009cf8:	3710      	adds	r7, #16
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}

08009cfe <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8009cfe:	b580      	push	{r7, lr}
 8009d00:	b084      	sub	sp, #16
 8009d02:	af00      	add	r7, sp, #0
 8009d04:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d0a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f240 523a 	movw	r2, #1338	; 0x53a
 8009d14:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009d16:	68f8      	ldr	r0, [r7, #12]
 8009d18:	f7ff fefa 	bl	8009b10 <HAL_SD_GetCardState>
 8009d1c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	2201      	movs	r2, #1
 8009d22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	2b06      	cmp	r3, #6
 8009d30:	d002      	beq.n	8009d38 <SD_DMARxAbort+0x3a>
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	2b05      	cmp	r3, #5
 8009d36:	d10a      	bne.n	8009d4e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	f002 fccf 	bl	800c6e0 <SDMMC_CmdStopTransfer>
 8009d42:	4602      	mov	r2, r0
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d48:	431a      	orrs	r2, r3
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d103      	bne.n	8009d5e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009d56:	68f8      	ldr	r0, [r7, #12]
 8009d58:	f003 f932 	bl	800cfc0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009d5c:	e002      	b.n	8009d64 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009d5e:	68f8      	ldr	r0, [r7, #12]
 8009d60:	f7ff fc80 	bl	8009664 <HAL_SD_ErrorCallback>
}
 8009d64:	bf00      	nop
 8009d66:	3710      	adds	r7, #16
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}

08009d6c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009d6c:	b5b0      	push	{r4, r5, r7, lr}
 8009d6e:	b094      	sub	sp, #80	; 0x50
 8009d70:	af04      	add	r7, sp, #16
 8009d72:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009d74:	2301      	movs	r3, #1
 8009d76:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f002 fb81 	bl	800c484 <SDIO_GetPowerState>
 8009d82:	4603      	mov	r3, r0
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d102      	bne.n	8009d8e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009d88:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009d8c:	e0b6      	b.n	8009efc <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d92:	2b03      	cmp	r3, #3
 8009d94:	d02f      	beq.n	8009df6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f002 fdaa 	bl	800c8f4 <SDMMC_CmdSendCID>
 8009da0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009da2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d001      	beq.n	8009dac <SD_InitCard+0x40>
    {
      return errorstate;
 8009da8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009daa:	e0a7      	b.n	8009efc <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	2100      	movs	r1, #0
 8009db2:	4618      	mov	r0, r3
 8009db4:	f002 fbab 	bl	800c50e <SDIO_GetResponse>
 8009db8:	4602      	mov	r2, r0
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	2104      	movs	r1, #4
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f002 fba2 	bl	800c50e <SDIO_GetResponse>
 8009dca:	4602      	mov	r2, r0
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	2108      	movs	r1, #8
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f002 fb99 	bl	800c50e <SDIO_GetResponse>
 8009ddc:	4602      	mov	r2, r0
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	210c      	movs	r1, #12
 8009de8:	4618      	mov	r0, r3
 8009dea:	f002 fb90 	bl	800c50e <SDIO_GetResponse>
 8009dee:	4602      	mov	r2, r0
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dfa:	2b03      	cmp	r3, #3
 8009dfc:	d00d      	beq.n	8009e1a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f107 020e 	add.w	r2, r7, #14
 8009e06:	4611      	mov	r1, r2
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f002 fdb0 	bl	800c96e <SDMMC_CmdSetRelAdd>
 8009e0e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d001      	beq.n	8009e1a <SD_InitCard+0xae>
    {
      return errorstate;
 8009e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e18:	e070      	b.n	8009efc <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e1e:	2b03      	cmp	r3, #3
 8009e20:	d036      	beq.n	8009e90 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009e22:	89fb      	ldrh	r3, [r7, #14]
 8009e24:	461a      	mov	r2, r3
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681a      	ldr	r2, [r3, #0]
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e32:	041b      	lsls	r3, r3, #16
 8009e34:	4619      	mov	r1, r3
 8009e36:	4610      	mov	r0, r2
 8009e38:	f002 fd7a 	bl	800c930 <SDMMC_CmdSendCSD>
 8009e3c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d001      	beq.n	8009e48 <SD_InitCard+0xdc>
    {
      return errorstate;
 8009e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e46:	e059      	b.n	8009efc <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	2100      	movs	r1, #0
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f002 fb5d 	bl	800c50e <SDIO_GetResponse>
 8009e54:	4602      	mov	r2, r0
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	2104      	movs	r1, #4
 8009e60:	4618      	mov	r0, r3
 8009e62:	f002 fb54 	bl	800c50e <SDIO_GetResponse>
 8009e66:	4602      	mov	r2, r0
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	2108      	movs	r1, #8
 8009e72:	4618      	mov	r0, r3
 8009e74:	f002 fb4b 	bl	800c50e <SDIO_GetResponse>
 8009e78:	4602      	mov	r2, r0
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	210c      	movs	r1, #12
 8009e84:	4618      	mov	r0, r3
 8009e86:	f002 fb42 	bl	800c50e <SDIO_GetResponse>
 8009e8a:	4602      	mov	r2, r0
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	2104      	movs	r1, #4
 8009e96:	4618      	mov	r0, r3
 8009e98:	f002 fb39 	bl	800c50e <SDIO_GetResponse>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	0d1a      	lsrs	r2, r3, #20
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009ea4:	f107 0310 	add.w	r3, r7, #16
 8009ea8:	4619      	mov	r1, r3
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f7ff fbe4 	bl	8009678 <HAL_SD_GetCardCSD>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d002      	beq.n	8009ebc <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009eb6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009eba:	e01f      	b.n	8009efc <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6819      	ldr	r1, [r3, #0]
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ec4:	041b      	lsls	r3, r3, #16
 8009ec6:	461a      	mov	r2, r3
 8009ec8:	f04f 0300 	mov.w	r3, #0
 8009ecc:	4608      	mov	r0, r1
 8009ece:	f002 fc29 	bl	800c724 <SDMMC_CmdSelDesel>
 8009ed2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ed4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d001      	beq.n	8009ede <SD_InitCard+0x172>
  {
    return errorstate;
 8009eda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009edc:	e00e      	b.n	8009efc <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681d      	ldr	r5, [r3, #0]
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	466c      	mov	r4, sp
 8009ee6:	f103 0210 	add.w	r2, r3, #16
 8009eea:	ca07      	ldmia	r2, {r0, r1, r2}
 8009eec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009ef0:	3304      	adds	r3, #4
 8009ef2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009ef4:	4628      	mov	r0, r5
 8009ef6:	f002 fa6d 	bl	800c3d4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009efa:	2300      	movs	r3, #0
}
 8009efc:	4618      	mov	r0, r3
 8009efe:	3740      	adds	r7, #64	; 0x40
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bdb0      	pop	{r4, r5, r7, pc}

08009f04 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b086      	sub	sp, #24
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009f10:	2300      	movs	r3, #0
 8009f12:	617b      	str	r3, [r7, #20]
 8009f14:	2300      	movs	r3, #0
 8009f16:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f002 fc24 	bl	800c76a <SDMMC_CmdGoIdleState>
 8009f22:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d001      	beq.n	8009f2e <SD_PowerON+0x2a>
  {
    return errorstate;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	e072      	b.n	800a014 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	4618      	mov	r0, r3
 8009f34:	f002 fc37 	bl	800c7a6 <SDMMC_CmdOperCond>
 8009f38:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d00d      	beq.n	8009f5c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2200      	movs	r2, #0
 8009f44:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f002 fc0d 	bl	800c76a <SDMMC_CmdGoIdleState>
 8009f50:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d004      	beq.n	8009f62 <SD_PowerON+0x5e>
    {
      return errorstate;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	e05b      	b.n	800a014 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2201      	movs	r2, #1
 8009f60:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f66:	2b01      	cmp	r3, #1
 8009f68:	d137      	bne.n	8009fda <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	2100      	movs	r1, #0
 8009f70:	4618      	mov	r0, r3
 8009f72:	f002 fc37 	bl	800c7e4 <SDMMC_CmdAppCommand>
 8009f76:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d02d      	beq.n	8009fda <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009f7e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009f82:	e047      	b.n	800a014 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	2100      	movs	r1, #0
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f002 fc2a 	bl	800c7e4 <SDMMC_CmdAppCommand>
 8009f90:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d001      	beq.n	8009f9c <SD_PowerON+0x98>
    {
      return errorstate;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	e03b      	b.n	800a014 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	491e      	ldr	r1, [pc, #120]	; (800a01c <SD_PowerON+0x118>)
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f002 fc40 	bl	800c828 <SDMMC_CmdAppOperCommand>
 8009fa8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d002      	beq.n	8009fb6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009fb0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009fb4:	e02e      	b.n	800a014 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	2100      	movs	r1, #0
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f002 faa6 	bl	800c50e <SDIO_GetResponse>
 8009fc2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009fc4:	697b      	ldr	r3, [r7, #20]
 8009fc6:	0fdb      	lsrs	r3, r3, #31
 8009fc8:	2b01      	cmp	r3, #1
 8009fca:	d101      	bne.n	8009fd0 <SD_PowerON+0xcc>
 8009fcc:	2301      	movs	r3, #1
 8009fce:	e000      	b.n	8009fd2 <SD_PowerON+0xce>
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	613b      	str	r3, [r7, #16]

    count++;
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	3301      	adds	r3, #1
 8009fd8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d802      	bhi.n	8009fea <SD_PowerON+0xe6>
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d0cc      	beq.n	8009f84 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009ff0:	4293      	cmp	r3, r2
 8009ff2:	d902      	bls.n	8009ffa <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009ff4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009ff8:	e00c      	b.n	800a014 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a000:	2b00      	cmp	r3, #0
 800a002:	d003      	beq.n	800a00c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2201      	movs	r2, #1
 800a008:	645a      	str	r2, [r3, #68]	; 0x44
 800a00a:	e002      	b.n	800a012 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2200      	movs	r2, #0
 800a010:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800a012:	2300      	movs	r3, #0
}
 800a014:	4618      	mov	r0, r3
 800a016:	3718      	adds	r7, #24
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}
 800a01c:	c1100000 	.word	0xc1100000

0800a020 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b084      	sub	sp, #16
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
 800a028:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d102      	bne.n	800a036 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a030:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a034:	e018      	b.n	800a068 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681a      	ldr	r2, [r3, #0]
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a03e:	041b      	lsls	r3, r3, #16
 800a040:	4619      	mov	r1, r3
 800a042:	4610      	mov	r0, r2
 800a044:	f002 fcb4 	bl	800c9b0 <SDMMC_CmdSendStatus>
 800a048:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d001      	beq.n	800a054 <SD_SendStatus+0x34>
  {
    return errorstate;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	e009      	b.n	800a068 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	2100      	movs	r1, #0
 800a05a:	4618      	mov	r0, r3
 800a05c:	f002 fa57 	bl	800c50e <SDIO_GetResponse>
 800a060:	4602      	mov	r2, r0
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a066:	2300      	movs	r3, #0
}
 800a068:	4618      	mov	r0, r3
 800a06a:	3710      	adds	r7, #16
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}

0800a070 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b086      	sub	sp, #24
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a078:	2300      	movs	r3, #0
 800a07a:	60fb      	str	r3, [r7, #12]
 800a07c:	2300      	movs	r3, #0
 800a07e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	2100      	movs	r1, #0
 800a086:	4618      	mov	r0, r3
 800a088:	f002 fa41 	bl	800c50e <SDIO_GetResponse>
 800a08c:	4603      	mov	r3, r0
 800a08e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a092:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a096:	d102      	bne.n	800a09e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a098:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a09c:	e02f      	b.n	800a0fe <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a09e:	f107 030c 	add.w	r3, r7, #12
 800a0a2:	4619      	mov	r1, r3
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f000 f879 	bl	800a19c <SD_FindSCR>
 800a0aa:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d001      	beq.n	800a0b6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	e023      	b.n	800a0fe <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d01c      	beq.n	800a0fa <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681a      	ldr	r2, [r3, #0]
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0c8:	041b      	lsls	r3, r3, #16
 800a0ca:	4619      	mov	r1, r3
 800a0cc:	4610      	mov	r0, r2
 800a0ce:	f002 fb89 	bl	800c7e4 <SDMMC_CmdAppCommand>
 800a0d2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d001      	beq.n	800a0de <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	e00f      	b.n	800a0fe <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	2102      	movs	r1, #2
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f002 fbc2 	bl	800c86e <SDMMC_CmdBusWidth>
 800a0ea:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d001      	beq.n	800a0f6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	e003      	b.n	800a0fe <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	e001      	b.n	800a0fe <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a0fa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	3718      	adds	r7, #24
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}

0800a106 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800a106:	b580      	push	{r7, lr}
 800a108:	b086      	sub	sp, #24
 800a10a:	af00      	add	r7, sp, #0
 800a10c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a10e:	2300      	movs	r3, #0
 800a110:	60fb      	str	r3, [r7, #12]
 800a112:	2300      	movs	r3, #0
 800a114:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	2100      	movs	r1, #0
 800a11c:	4618      	mov	r0, r3
 800a11e:	f002 f9f6 	bl	800c50e <SDIO_GetResponse>
 800a122:	4603      	mov	r3, r0
 800a124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a128:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a12c:	d102      	bne.n	800a134 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a12e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a132:	e02f      	b.n	800a194 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a134:	f107 030c 	add.w	r3, r7, #12
 800a138:	4619      	mov	r1, r3
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f000 f82e 	bl	800a19c <SD_FindSCR>
 800a140:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d001      	beq.n	800a14c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800a148:	697b      	ldr	r3, [r7, #20]
 800a14a:	e023      	b.n	800a194 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a152:	2b00      	cmp	r3, #0
 800a154:	d01c      	beq.n	800a190 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681a      	ldr	r2, [r3, #0]
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a15e:	041b      	lsls	r3, r3, #16
 800a160:	4619      	mov	r1, r3
 800a162:	4610      	mov	r0, r2
 800a164:	f002 fb3e 	bl	800c7e4 <SDMMC_CmdAppCommand>
 800a168:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a16a:	697b      	ldr	r3, [r7, #20]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d001      	beq.n	800a174 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800a170:	697b      	ldr	r3, [r7, #20]
 800a172:	e00f      	b.n	800a194 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	2100      	movs	r1, #0
 800a17a:	4618      	mov	r0, r3
 800a17c:	f002 fb77 	bl	800c86e <SDMMC_CmdBusWidth>
 800a180:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d001      	beq.n	800a18c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	e003      	b.n	800a194 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a18c:	2300      	movs	r3, #0
 800a18e:	e001      	b.n	800a194 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a190:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a194:	4618      	mov	r0, r3
 800a196:	3718      	adds	r7, #24
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}

0800a19c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a19c:	b590      	push	{r4, r7, lr}
 800a19e:	b08f      	sub	sp, #60	; 0x3c
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
 800a1a4:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a1a6:	f7fc fb2d 	bl	8006804 <HAL_GetTick>
 800a1aa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	60bb      	str	r3, [r7, #8]
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	2108      	movs	r1, #8
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	f002 f9e2 	bl	800c58c <SDMMC_CmdBlockLength>
 800a1c8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d001      	beq.n	800a1d4 <SD_FindSCR+0x38>
  {
    return errorstate;
 800a1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1d2:	e0a9      	b.n	800a328 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681a      	ldr	r2, [r3, #0]
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1dc:	041b      	lsls	r3, r3, #16
 800a1de:	4619      	mov	r1, r3
 800a1e0:	4610      	mov	r0, r2
 800a1e2:	f002 faff 	bl	800c7e4 <SDMMC_CmdAppCommand>
 800a1e6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a1e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d001      	beq.n	800a1f2 <SD_FindSCR+0x56>
  {
    return errorstate;
 800a1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1f0:	e09a      	b.n	800a328 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a1f2:	f04f 33ff 	mov.w	r3, #4294967295
 800a1f6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a1f8:	2308      	movs	r3, #8
 800a1fa:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800a1fc:	2330      	movs	r3, #48	; 0x30
 800a1fe:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800a200:	2302      	movs	r3, #2
 800a202:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a204:	2300      	movs	r3, #0
 800a206:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800a208:	2301      	movs	r3, #1
 800a20a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f107 0210 	add.w	r2, r7, #16
 800a214:	4611      	mov	r1, r2
 800a216:	4618      	mov	r0, r3
 800a218:	f002 f98c 	bl	800c534 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	4618      	mov	r0, r3
 800a222:	f002 fb46 	bl	800c8b2 <SDMMC_CmdSendSCR>
 800a226:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d022      	beq.n	800a274 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800a22e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a230:	e07a      	b.n	800a328 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a238:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d00e      	beq.n	800a25e <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	6819      	ldr	r1, [r3, #0]
 800a244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a246:	009b      	lsls	r3, r3, #2
 800a248:	f107 0208 	add.w	r2, r7, #8
 800a24c:	18d4      	adds	r4, r2, r3
 800a24e:	4608      	mov	r0, r1
 800a250:	f002 f8eb 	bl	800c42a <SDIO_ReadFIFO>
 800a254:	4603      	mov	r3, r0
 800a256:	6023      	str	r3, [r4, #0]
      index++;
 800a258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a25a:	3301      	adds	r3, #1
 800a25c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a25e:	f7fc fad1 	bl	8006804 <HAL_GetTick>
 800a262:	4602      	mov	r2, r0
 800a264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a266:	1ad3      	subs	r3, r2, r3
 800a268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a26c:	d102      	bne.n	800a274 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a26e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a272:	e059      	b.n	800a328 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a27a:	f240 432a 	movw	r3, #1066	; 0x42a
 800a27e:	4013      	ands	r3, r2
 800a280:	2b00      	cmp	r3, #0
 800a282:	d0d6      	beq.n	800a232 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a28a:	f003 0308 	and.w	r3, r3, #8
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d005      	beq.n	800a29e <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	2208      	movs	r2, #8
 800a298:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a29a:	2308      	movs	r3, #8
 800a29c:	e044      	b.n	800a328 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2a4:	f003 0302 	and.w	r3, r3, #2
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d005      	beq.n	800a2b8 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	2202      	movs	r2, #2
 800a2b2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a2b4:	2302      	movs	r3, #2
 800a2b6:	e037      	b.n	800a328 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2be:	f003 0320 	and.w	r3, r3, #32
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d005      	beq.n	800a2d2 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	2220      	movs	r2, #32
 800a2cc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a2ce:	2320      	movs	r3, #32
 800a2d0:	e02a      	b.n	800a328 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f240 523a 	movw	r2, #1338	; 0x53a
 800a2da:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	061a      	lsls	r2, r3, #24
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	021b      	lsls	r3, r3, #8
 800a2e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a2e8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	0a1b      	lsrs	r3, r3, #8
 800a2ee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a2f2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	0e1b      	lsrs	r3, r3, #24
 800a2f8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a2fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2fc:	601a      	str	r2, [r3, #0]
    scr++;
 800a2fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a300:	3304      	adds	r3, #4
 800a302:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	061a      	lsls	r2, r3, #24
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	021b      	lsls	r3, r3, #8
 800a30c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a310:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a312:	68bb      	ldr	r3, [r7, #8]
 800a314:	0a1b      	lsrs	r3, r3, #8
 800a316:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a31a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	0e1b      	lsrs	r3, r3, #24
 800a320:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a324:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a326:	2300      	movs	r3, #0
}
 800a328:	4618      	mov	r0, r3
 800a32a:	373c      	adds	r7, #60	; 0x3c
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd90      	pop	{r4, r7, pc}

0800a330 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b086      	sub	sp, #24
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a33c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a342:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d03f      	beq.n	800a3ca <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800a34a:	2300      	movs	r3, #0
 800a34c:	617b      	str	r3, [r7, #20]
 800a34e:	e033      	b.n	800a3b8 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	4618      	mov	r0, r3
 800a356:	f002 f868 	bl	800c42a <SDIO_ReadFIFO>
 800a35a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	b2da      	uxtb	r2, r3
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	3301      	adds	r3, #1
 800a368:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a36a:	693b      	ldr	r3, [r7, #16]
 800a36c:	3b01      	subs	r3, #1
 800a36e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	0a1b      	lsrs	r3, r3, #8
 800a374:	b2da      	uxtb	r2, r3
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	3301      	adds	r3, #1
 800a37e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	3b01      	subs	r3, #1
 800a384:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	0c1b      	lsrs	r3, r3, #16
 800a38a:	b2da      	uxtb	r2, r3
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	3301      	adds	r3, #1
 800a394:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a396:	693b      	ldr	r3, [r7, #16]
 800a398:	3b01      	subs	r3, #1
 800a39a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	0e1b      	lsrs	r3, r3, #24
 800a3a0:	b2da      	uxtb	r2, r3
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	3301      	adds	r3, #1
 800a3aa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a3ac:	693b      	ldr	r3, [r7, #16]
 800a3ae:	3b01      	subs	r3, #1
 800a3b0:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	3301      	adds	r3, #1
 800a3b6:	617b      	str	r3, [r7, #20]
 800a3b8:	697b      	ldr	r3, [r7, #20]
 800a3ba:	2b07      	cmp	r3, #7
 800a3bc:	d9c8      	bls.n	800a350 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	68fa      	ldr	r2, [r7, #12]
 800a3c2:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	693a      	ldr	r2, [r7, #16]
 800a3c8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800a3ca:	bf00      	nop
 800a3cc:	3718      	adds	r7, #24
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}

0800a3d2 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800a3d2:	b580      	push	{r7, lr}
 800a3d4:	b086      	sub	sp, #24
 800a3d6:	af00      	add	r7, sp, #0
 800a3d8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6a1b      	ldr	r3, [r3, #32]
 800a3de:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800a3e6:	693b      	ldr	r3, [r7, #16]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d043      	beq.n	800a474 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	617b      	str	r3, [r7, #20]
 800a3f0:	e037      	b.n	800a462 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	781b      	ldrb	r3, [r3, #0]
 800a3f6:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	3301      	adds	r3, #1
 800a3fc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a3fe:	693b      	ldr	r3, [r7, #16]
 800a400:	3b01      	subs	r3, #1
 800a402:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	781b      	ldrb	r3, [r3, #0]
 800a408:	021a      	lsls	r2, r3, #8
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	4313      	orrs	r3, r2
 800a40e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	3301      	adds	r3, #1
 800a414:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a416:	693b      	ldr	r3, [r7, #16]
 800a418:	3b01      	subs	r3, #1
 800a41a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	781b      	ldrb	r3, [r3, #0]
 800a420:	041a      	lsls	r2, r3, #16
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	4313      	orrs	r3, r2
 800a426:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	3301      	adds	r3, #1
 800a42c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a42e:	693b      	ldr	r3, [r7, #16]
 800a430:	3b01      	subs	r3, #1
 800a432:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	781b      	ldrb	r3, [r3, #0]
 800a438:	061a      	lsls	r2, r3, #24
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	4313      	orrs	r3, r2
 800a43e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	3301      	adds	r3, #1
 800a444:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a446:	693b      	ldr	r3, [r7, #16]
 800a448:	3b01      	subs	r3, #1
 800a44a:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f107 0208 	add.w	r2, r7, #8
 800a454:	4611      	mov	r1, r2
 800a456:	4618      	mov	r0, r3
 800a458:	f001 fff4 	bl	800c444 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800a45c:	697b      	ldr	r3, [r7, #20]
 800a45e:	3301      	adds	r3, #1
 800a460:	617b      	str	r3, [r7, #20]
 800a462:	697b      	ldr	r3, [r7, #20]
 800a464:	2b07      	cmp	r3, #7
 800a466:	d9c4      	bls.n	800a3f2 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	68fa      	ldr	r2, [r7, #12]
 800a46c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	693a      	ldr	r2, [r7, #16]
 800a472:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800a474:	bf00      	nop
 800a476:	3718      	adds	r7, #24
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}

0800a47c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b082      	sub	sp, #8
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d101      	bne.n	800a48e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a48a:	2301      	movs	r3, #1
 800a48c:	e056      	b.n	800a53c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2200      	movs	r2, #0
 800a492:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a49a:	b2db      	uxtb	r3, r3
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d106      	bne.n	800a4ae <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a4a8:	6878      	ldr	r0, [r7, #4]
 800a4aa:	f7fb fb0d 	bl	8005ac8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2202      	movs	r2, #2
 800a4b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	681a      	ldr	r2, [r3, #0]
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a4c4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	685a      	ldr	r2, [r3, #4]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	689b      	ldr	r3, [r3, #8]
 800a4ce:	431a      	orrs	r2, r3
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	68db      	ldr	r3, [r3, #12]
 800a4d4:	431a      	orrs	r2, r3
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	691b      	ldr	r3, [r3, #16]
 800a4da:	431a      	orrs	r2, r3
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	695b      	ldr	r3, [r3, #20]
 800a4e0:	431a      	orrs	r2, r3
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	699b      	ldr	r3, [r3, #24]
 800a4e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a4ea:	431a      	orrs	r2, r3
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	69db      	ldr	r3, [r3, #28]
 800a4f0:	431a      	orrs	r2, r3
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6a1b      	ldr	r3, [r3, #32]
 800a4f6:	ea42 0103 	orr.w	r1, r2, r3
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	430a      	orrs	r2, r1
 800a504:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	699b      	ldr	r3, [r3, #24]
 800a50a:	0c1b      	lsrs	r3, r3, #16
 800a50c:	f003 0104 	and.w	r1, r3, #4
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	430a      	orrs	r2, r1
 800a51a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	69da      	ldr	r2, [r3, #28]
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a52a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2200      	movs	r2, #0
 800a530:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2201      	movs	r2, #1
 800a536:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a53a:	2300      	movs	r3, #0
}
 800a53c:	4618      	mov	r0, r3
 800a53e:	3708      	adds	r7, #8
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}

0800a544 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b088      	sub	sp, #32
 800a548:	af00      	add	r7, sp, #0
 800a54a:	60f8      	str	r0, [r7, #12]
 800a54c:	60b9      	str	r1, [r7, #8]
 800a54e:	603b      	str	r3, [r7, #0]
 800a550:	4613      	mov	r3, r2
 800a552:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a554:	2300      	movs	r3, #0
 800a556:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a55e:	2b01      	cmp	r3, #1
 800a560:	d101      	bne.n	800a566 <HAL_SPI_Transmit+0x22>
 800a562:	2302      	movs	r3, #2
 800a564:	e11e      	b.n	800a7a4 <HAL_SPI_Transmit+0x260>
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	2201      	movs	r2, #1
 800a56a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a56e:	f7fc f949 	bl	8006804 <HAL_GetTick>
 800a572:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a574:	88fb      	ldrh	r3, [r7, #6]
 800a576:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a57e:	b2db      	uxtb	r3, r3
 800a580:	2b01      	cmp	r3, #1
 800a582:	d002      	beq.n	800a58a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a584:	2302      	movs	r3, #2
 800a586:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a588:	e103      	b.n	800a792 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d002      	beq.n	800a596 <HAL_SPI_Transmit+0x52>
 800a590:	88fb      	ldrh	r3, [r7, #6]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d102      	bne.n	800a59c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a596:	2301      	movs	r3, #1
 800a598:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a59a:	e0fa      	b.n	800a792 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	2203      	movs	r2, #3
 800a5a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	68ba      	ldr	r2, [r7, #8]
 800a5ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	88fa      	ldrh	r2, [r7, #6]
 800a5b4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	88fa      	ldrh	r2, [r7, #6]
 800a5ba:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	689b      	ldr	r3, [r3, #8]
 800a5de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5e2:	d107      	bne.n	800a5f4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	681a      	ldr	r2, [r3, #0]
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a5f2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5fe:	2b40      	cmp	r3, #64	; 0x40
 800a600:	d007      	beq.n	800a612 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	681a      	ldr	r2, [r3, #0]
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a610:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	68db      	ldr	r3, [r3, #12]
 800a616:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a61a:	d14b      	bne.n	800a6b4 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	685b      	ldr	r3, [r3, #4]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d002      	beq.n	800a62a <HAL_SPI_Transmit+0xe6>
 800a624:	8afb      	ldrh	r3, [r7, #22]
 800a626:	2b01      	cmp	r3, #1
 800a628:	d13e      	bne.n	800a6a8 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a62e:	881a      	ldrh	r2, [r3, #0]
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a63a:	1c9a      	adds	r2, r3, #2
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a644:	b29b      	uxth	r3, r3
 800a646:	3b01      	subs	r3, #1
 800a648:	b29a      	uxth	r2, r3
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a64e:	e02b      	b.n	800a6a8 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	689b      	ldr	r3, [r3, #8]
 800a656:	f003 0302 	and.w	r3, r3, #2
 800a65a:	2b02      	cmp	r3, #2
 800a65c:	d112      	bne.n	800a684 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a662:	881a      	ldrh	r2, [r3, #0]
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a66e:	1c9a      	adds	r2, r3, #2
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a678:	b29b      	uxth	r3, r3
 800a67a:	3b01      	subs	r3, #1
 800a67c:	b29a      	uxth	r2, r3
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	86da      	strh	r2, [r3, #54]	; 0x36
 800a682:	e011      	b.n	800a6a8 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a684:	f7fc f8be 	bl	8006804 <HAL_GetTick>
 800a688:	4602      	mov	r2, r0
 800a68a:	69bb      	ldr	r3, [r7, #24]
 800a68c:	1ad3      	subs	r3, r2, r3
 800a68e:	683a      	ldr	r2, [r7, #0]
 800a690:	429a      	cmp	r2, r3
 800a692:	d803      	bhi.n	800a69c <HAL_SPI_Transmit+0x158>
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a69a:	d102      	bne.n	800a6a2 <HAL_SPI_Transmit+0x15e>
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d102      	bne.n	800a6a8 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800a6a2:	2303      	movs	r3, #3
 800a6a4:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a6a6:	e074      	b.n	800a792 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a6ac:	b29b      	uxth	r3, r3
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d1ce      	bne.n	800a650 <HAL_SPI_Transmit+0x10c>
 800a6b2:	e04c      	b.n	800a74e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	685b      	ldr	r3, [r3, #4]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d002      	beq.n	800a6c2 <HAL_SPI_Transmit+0x17e>
 800a6bc:	8afb      	ldrh	r3, [r7, #22]
 800a6be:	2b01      	cmp	r3, #1
 800a6c0:	d140      	bne.n	800a744 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	330c      	adds	r3, #12
 800a6cc:	7812      	ldrb	r2, [r2, #0]
 800a6ce:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6d4:	1c5a      	adds	r2, r3, #1
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a6de:	b29b      	uxth	r3, r3
 800a6e0:	3b01      	subs	r3, #1
 800a6e2:	b29a      	uxth	r2, r3
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a6e8:	e02c      	b.n	800a744 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	689b      	ldr	r3, [r3, #8]
 800a6f0:	f003 0302 	and.w	r3, r3, #2
 800a6f4:	2b02      	cmp	r3, #2
 800a6f6:	d113      	bne.n	800a720 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	330c      	adds	r3, #12
 800a702:	7812      	ldrb	r2, [r2, #0]
 800a704:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a70a:	1c5a      	adds	r2, r3, #1
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a714:	b29b      	uxth	r3, r3
 800a716:	3b01      	subs	r3, #1
 800a718:	b29a      	uxth	r2, r3
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	86da      	strh	r2, [r3, #54]	; 0x36
 800a71e:	e011      	b.n	800a744 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a720:	f7fc f870 	bl	8006804 <HAL_GetTick>
 800a724:	4602      	mov	r2, r0
 800a726:	69bb      	ldr	r3, [r7, #24]
 800a728:	1ad3      	subs	r3, r2, r3
 800a72a:	683a      	ldr	r2, [r7, #0]
 800a72c:	429a      	cmp	r2, r3
 800a72e:	d803      	bhi.n	800a738 <HAL_SPI_Transmit+0x1f4>
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a736:	d102      	bne.n	800a73e <HAL_SPI_Transmit+0x1fa>
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d102      	bne.n	800a744 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800a73e:	2303      	movs	r3, #3
 800a740:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a742:	e026      	b.n	800a792 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a748:	b29b      	uxth	r3, r3
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d1cd      	bne.n	800a6ea <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a74e:	69ba      	ldr	r2, [r7, #24]
 800a750:	6839      	ldr	r1, [r7, #0]
 800a752:	68f8      	ldr	r0, [r7, #12]
 800a754:	f000 fba4 	bl	800aea0 <SPI_EndRxTxTransaction>
 800a758:	4603      	mov	r3, r0
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d002      	beq.n	800a764 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	2220      	movs	r2, #32
 800a762:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	689b      	ldr	r3, [r3, #8]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d10a      	bne.n	800a782 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a76c:	2300      	movs	r3, #0
 800a76e:	613b      	str	r3, [r7, #16]
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	68db      	ldr	r3, [r3, #12]
 800a776:	613b      	str	r3, [r7, #16]
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	689b      	ldr	r3, [r3, #8]
 800a77e:	613b      	str	r3, [r7, #16]
 800a780:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a786:	2b00      	cmp	r3, #0
 800a788:	d002      	beq.n	800a790 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800a78a:	2301      	movs	r3, #1
 800a78c:	77fb      	strb	r3, [r7, #31]
 800a78e:	e000      	b.n	800a792 <HAL_SPI_Transmit+0x24e>
  }

error:
 800a790:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	2201      	movs	r2, #1
 800a796:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	2200      	movs	r2, #0
 800a79e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a7a2:	7ffb      	ldrb	r3, [r7, #31]
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3720      	adds	r7, #32
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}

0800a7ac <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b088      	sub	sp, #32
 800a7b0:	af02      	add	r7, sp, #8
 800a7b2:	60f8      	str	r0, [r7, #12]
 800a7b4:	60b9      	str	r1, [r7, #8]
 800a7b6:	603b      	str	r3, [r7, #0]
 800a7b8:	4613      	mov	r3, r2
 800a7ba:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	685b      	ldr	r3, [r3, #4]
 800a7c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a7c8:	d112      	bne.n	800a7f0 <HAL_SPI_Receive+0x44>
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	689b      	ldr	r3, [r3, #8]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d10e      	bne.n	800a7f0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	2204      	movs	r2, #4
 800a7d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800a7da:	88fa      	ldrh	r2, [r7, #6]
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	9300      	str	r3, [sp, #0]
 800a7e0:	4613      	mov	r3, r2
 800a7e2:	68ba      	ldr	r2, [r7, #8]
 800a7e4:	68b9      	ldr	r1, [r7, #8]
 800a7e6:	68f8      	ldr	r0, [r7, #12]
 800a7e8:	f000 f8e9 	bl	800a9be <HAL_SPI_TransmitReceive>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	e0e2      	b.n	800a9b6 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a7f6:	2b01      	cmp	r3, #1
 800a7f8:	d101      	bne.n	800a7fe <HAL_SPI_Receive+0x52>
 800a7fa:	2302      	movs	r3, #2
 800a7fc:	e0db      	b.n	800a9b6 <HAL_SPI_Receive+0x20a>
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	2201      	movs	r2, #1
 800a802:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a806:	f7fb fffd 	bl	8006804 <HAL_GetTick>
 800a80a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a812:	b2db      	uxtb	r3, r3
 800a814:	2b01      	cmp	r3, #1
 800a816:	d002      	beq.n	800a81e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800a818:	2302      	movs	r3, #2
 800a81a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a81c:	e0c2      	b.n	800a9a4 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d002      	beq.n	800a82a <HAL_SPI_Receive+0x7e>
 800a824:	88fb      	ldrh	r3, [r7, #6]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d102      	bne.n	800a830 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800a82a:	2301      	movs	r3, #1
 800a82c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a82e:	e0b9      	b.n	800a9a4 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	2204      	movs	r2, #4
 800a834:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	2200      	movs	r2, #0
 800a83c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	68ba      	ldr	r2, [r7, #8]
 800a842:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	88fa      	ldrh	r2, [r7, #6]
 800a848:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	88fa      	ldrh	r2, [r7, #6]
 800a84e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	2200      	movs	r2, #0
 800a854:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	2200      	movs	r2, #0
 800a85a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	2200      	movs	r2, #0
 800a860:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	2200      	movs	r2, #0
 800a866:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	2200      	movs	r2, #0
 800a86c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	689b      	ldr	r3, [r3, #8]
 800a872:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a876:	d107      	bne.n	800a888 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	681a      	ldr	r2, [r3, #0]
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a886:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a892:	2b40      	cmp	r3, #64	; 0x40
 800a894:	d007      	beq.n	800a8a6 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	681a      	ldr	r2, [r3, #0]
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a8a4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	68db      	ldr	r3, [r3, #12]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d162      	bne.n	800a974 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800a8ae:	e02e      	b.n	800a90e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	689b      	ldr	r3, [r3, #8]
 800a8b6:	f003 0301 	and.w	r3, r3, #1
 800a8ba:	2b01      	cmp	r3, #1
 800a8bc:	d115      	bne.n	800a8ea <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f103 020c 	add.w	r2, r3, #12
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8ca:	7812      	ldrb	r2, [r2, #0]
 800a8cc:	b2d2      	uxtb	r2, r2
 800a8ce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8d4:	1c5a      	adds	r2, r3, #1
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a8de:	b29b      	uxth	r3, r3
 800a8e0:	3b01      	subs	r3, #1
 800a8e2:	b29a      	uxth	r2, r3
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a8e8:	e011      	b.n	800a90e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a8ea:	f7fb ff8b 	bl	8006804 <HAL_GetTick>
 800a8ee:	4602      	mov	r2, r0
 800a8f0:	693b      	ldr	r3, [r7, #16]
 800a8f2:	1ad3      	subs	r3, r2, r3
 800a8f4:	683a      	ldr	r2, [r7, #0]
 800a8f6:	429a      	cmp	r2, r3
 800a8f8:	d803      	bhi.n	800a902 <HAL_SPI_Receive+0x156>
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a900:	d102      	bne.n	800a908 <HAL_SPI_Receive+0x15c>
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d102      	bne.n	800a90e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800a908:	2303      	movs	r3, #3
 800a90a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800a90c:	e04a      	b.n	800a9a4 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a912:	b29b      	uxth	r3, r3
 800a914:	2b00      	cmp	r3, #0
 800a916:	d1cb      	bne.n	800a8b0 <HAL_SPI_Receive+0x104>
 800a918:	e031      	b.n	800a97e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	689b      	ldr	r3, [r3, #8]
 800a920:	f003 0301 	and.w	r3, r3, #1
 800a924:	2b01      	cmp	r3, #1
 800a926:	d113      	bne.n	800a950 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	68da      	ldr	r2, [r3, #12]
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a932:	b292      	uxth	r2, r2
 800a934:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a93a:	1c9a      	adds	r2, r3, #2
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a944:	b29b      	uxth	r3, r3
 800a946:	3b01      	subs	r3, #1
 800a948:	b29a      	uxth	r2, r3
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a94e:	e011      	b.n	800a974 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a950:	f7fb ff58 	bl	8006804 <HAL_GetTick>
 800a954:	4602      	mov	r2, r0
 800a956:	693b      	ldr	r3, [r7, #16]
 800a958:	1ad3      	subs	r3, r2, r3
 800a95a:	683a      	ldr	r2, [r7, #0]
 800a95c:	429a      	cmp	r2, r3
 800a95e:	d803      	bhi.n	800a968 <HAL_SPI_Receive+0x1bc>
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a966:	d102      	bne.n	800a96e <HAL_SPI_Receive+0x1c2>
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d102      	bne.n	800a974 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800a96e:	2303      	movs	r3, #3
 800a970:	75fb      	strb	r3, [r7, #23]
          goto error;
 800a972:	e017      	b.n	800a9a4 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a978:	b29b      	uxth	r3, r3
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d1cd      	bne.n	800a91a <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a97e:	693a      	ldr	r2, [r7, #16]
 800a980:	6839      	ldr	r1, [r7, #0]
 800a982:	68f8      	ldr	r0, [r7, #12]
 800a984:	f000 fa27 	bl	800add6 <SPI_EndRxTransaction>
 800a988:	4603      	mov	r3, r0
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d002      	beq.n	800a994 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	2220      	movs	r2, #32
 800a992:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d002      	beq.n	800a9a2 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800a99c:	2301      	movs	r3, #1
 800a99e:	75fb      	strb	r3, [r7, #23]
 800a9a0:	e000      	b.n	800a9a4 <HAL_SPI_Receive+0x1f8>
  }

error :
 800a9a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	2201      	movs	r2, #1
 800a9a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a9b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3718      	adds	r7, #24
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}

0800a9be <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a9be:	b580      	push	{r7, lr}
 800a9c0:	b08c      	sub	sp, #48	; 0x30
 800a9c2:	af00      	add	r7, sp, #0
 800a9c4:	60f8      	str	r0, [r7, #12]
 800a9c6:	60b9      	str	r1, [r7, #8]
 800a9c8:	607a      	str	r2, [r7, #4]
 800a9ca:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a9dc:	2b01      	cmp	r3, #1
 800a9de:	d101      	bne.n	800a9e4 <HAL_SPI_TransmitReceive+0x26>
 800a9e0:	2302      	movs	r3, #2
 800a9e2:	e18a      	b.n	800acfa <HAL_SPI_TransmitReceive+0x33c>
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	2201      	movs	r2, #1
 800a9e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a9ec:	f7fb ff0a 	bl	8006804 <HAL_GetTick>
 800a9f0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a9f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	685b      	ldr	r3, [r3, #4]
 800aa00:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800aa02:	887b      	ldrh	r3, [r7, #2]
 800aa04:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800aa06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aa0a:	2b01      	cmp	r3, #1
 800aa0c:	d00f      	beq.n	800aa2e <HAL_SPI_TransmitReceive+0x70>
 800aa0e:	69fb      	ldr	r3, [r7, #28]
 800aa10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aa14:	d107      	bne.n	800aa26 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	689b      	ldr	r3, [r3, #8]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d103      	bne.n	800aa26 <HAL_SPI_TransmitReceive+0x68>
 800aa1e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aa22:	2b04      	cmp	r3, #4
 800aa24:	d003      	beq.n	800aa2e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800aa26:	2302      	movs	r3, #2
 800aa28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800aa2c:	e15b      	b.n	800ace6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800aa2e:	68bb      	ldr	r3, [r7, #8]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d005      	beq.n	800aa40 <HAL_SPI_TransmitReceive+0x82>
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d002      	beq.n	800aa40 <HAL_SPI_TransmitReceive+0x82>
 800aa3a:	887b      	ldrh	r3, [r7, #2]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d103      	bne.n	800aa48 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800aa40:	2301      	movs	r3, #1
 800aa42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800aa46:	e14e      	b.n	800ace6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800aa4e:	b2db      	uxtb	r3, r3
 800aa50:	2b04      	cmp	r3, #4
 800aa52:	d003      	beq.n	800aa5c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	2205      	movs	r2, #5
 800aa58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	2200      	movs	r2, #0
 800aa60:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	687a      	ldr	r2, [r7, #4]
 800aa66:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	887a      	ldrh	r2, [r7, #2]
 800aa6c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	887a      	ldrh	r2, [r7, #2]
 800aa72:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	68ba      	ldr	r2, [r7, #8]
 800aa78:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	887a      	ldrh	r2, [r7, #2]
 800aa7e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	887a      	ldrh	r2, [r7, #2]
 800aa84:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	2200      	movs	r2, #0
 800aa8a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa9c:	2b40      	cmp	r3, #64	; 0x40
 800aa9e:	d007      	beq.n	800aab0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	681a      	ldr	r2, [r3, #0]
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aaae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	68db      	ldr	r3, [r3, #12]
 800aab4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aab8:	d178      	bne.n	800abac <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	685b      	ldr	r3, [r3, #4]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d002      	beq.n	800aac8 <HAL_SPI_TransmitReceive+0x10a>
 800aac2:	8b7b      	ldrh	r3, [r7, #26]
 800aac4:	2b01      	cmp	r3, #1
 800aac6:	d166      	bne.n	800ab96 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aacc:	881a      	ldrh	r2, [r3, #0]
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aad8:	1c9a      	adds	r2, r3, #2
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aae2:	b29b      	uxth	r3, r3
 800aae4:	3b01      	subs	r3, #1
 800aae6:	b29a      	uxth	r2, r3
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800aaec:	e053      	b.n	800ab96 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	689b      	ldr	r3, [r3, #8]
 800aaf4:	f003 0302 	and.w	r3, r3, #2
 800aaf8:	2b02      	cmp	r3, #2
 800aafa:	d11b      	bne.n	800ab34 <HAL_SPI_TransmitReceive+0x176>
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ab00:	b29b      	uxth	r3, r3
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d016      	beq.n	800ab34 <HAL_SPI_TransmitReceive+0x176>
 800ab06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab08:	2b01      	cmp	r3, #1
 800ab0a:	d113      	bne.n	800ab34 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab10:	881a      	ldrh	r2, [r3, #0]
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab1c:	1c9a      	adds	r2, r3, #2
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ab26:	b29b      	uxth	r3, r3
 800ab28:	3b01      	subs	r3, #1
 800ab2a:	b29a      	uxth	r2, r3
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ab30:	2300      	movs	r3, #0
 800ab32:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	689b      	ldr	r3, [r3, #8]
 800ab3a:	f003 0301 	and.w	r3, r3, #1
 800ab3e:	2b01      	cmp	r3, #1
 800ab40:	d119      	bne.n	800ab76 <HAL_SPI_TransmitReceive+0x1b8>
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab46:	b29b      	uxth	r3, r3
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d014      	beq.n	800ab76 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	68da      	ldr	r2, [r3, #12]
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab56:	b292      	uxth	r2, r2
 800ab58:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab5e:	1c9a      	adds	r2, r3, #2
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab68:	b29b      	uxth	r3, r3
 800ab6a:	3b01      	subs	r3, #1
 800ab6c:	b29a      	uxth	r2, r3
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ab72:	2301      	movs	r3, #1
 800ab74:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ab76:	f7fb fe45 	bl	8006804 <HAL_GetTick>
 800ab7a:	4602      	mov	r2, r0
 800ab7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab7e:	1ad3      	subs	r3, r2, r3
 800ab80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ab82:	429a      	cmp	r2, r3
 800ab84:	d807      	bhi.n	800ab96 <HAL_SPI_TransmitReceive+0x1d8>
 800ab86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab8c:	d003      	beq.n	800ab96 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800ab8e:	2303      	movs	r3, #3
 800ab90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ab94:	e0a7      	b.n	800ace6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ab9a:	b29b      	uxth	r3, r3
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d1a6      	bne.n	800aaee <HAL_SPI_TransmitReceive+0x130>
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aba4:	b29b      	uxth	r3, r3
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d1a1      	bne.n	800aaee <HAL_SPI_TransmitReceive+0x130>
 800abaa:	e07c      	b.n	800aca6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	685b      	ldr	r3, [r3, #4]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d002      	beq.n	800abba <HAL_SPI_TransmitReceive+0x1fc>
 800abb4:	8b7b      	ldrh	r3, [r7, #26]
 800abb6:	2b01      	cmp	r3, #1
 800abb8:	d16b      	bne.n	800ac92 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	330c      	adds	r3, #12
 800abc4:	7812      	ldrb	r2, [r2, #0]
 800abc6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abcc:	1c5a      	adds	r2, r3, #1
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800abd6:	b29b      	uxth	r3, r3
 800abd8:	3b01      	subs	r3, #1
 800abda:	b29a      	uxth	r2, r3
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800abe0:	e057      	b.n	800ac92 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	689b      	ldr	r3, [r3, #8]
 800abe8:	f003 0302 	and.w	r3, r3, #2
 800abec:	2b02      	cmp	r3, #2
 800abee:	d11c      	bne.n	800ac2a <HAL_SPI_TransmitReceive+0x26c>
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800abf4:	b29b      	uxth	r3, r3
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d017      	beq.n	800ac2a <HAL_SPI_TransmitReceive+0x26c>
 800abfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abfc:	2b01      	cmp	r3, #1
 800abfe:	d114      	bne.n	800ac2a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	330c      	adds	r3, #12
 800ac0a:	7812      	ldrb	r2, [r2, #0]
 800ac0c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac12:	1c5a      	adds	r2, r3, #1
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ac1c:	b29b      	uxth	r3, r3
 800ac1e:	3b01      	subs	r3, #1
 800ac20:	b29a      	uxth	r2, r3
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ac26:	2300      	movs	r3, #0
 800ac28:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	689b      	ldr	r3, [r3, #8]
 800ac30:	f003 0301 	and.w	r3, r3, #1
 800ac34:	2b01      	cmp	r3, #1
 800ac36:	d119      	bne.n	800ac6c <HAL_SPI_TransmitReceive+0x2ae>
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ac3c:	b29b      	uxth	r3, r3
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d014      	beq.n	800ac6c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	68da      	ldr	r2, [r3, #12]
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac4c:	b2d2      	uxtb	r2, r2
 800ac4e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac54:	1c5a      	adds	r2, r3, #1
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ac5e:	b29b      	uxth	r3, r3
 800ac60:	3b01      	subs	r3, #1
 800ac62:	b29a      	uxth	r2, r3
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ac68:	2301      	movs	r3, #1
 800ac6a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ac6c:	f7fb fdca 	bl	8006804 <HAL_GetTick>
 800ac70:	4602      	mov	r2, r0
 800ac72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac74:	1ad3      	subs	r3, r2, r3
 800ac76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ac78:	429a      	cmp	r2, r3
 800ac7a:	d803      	bhi.n	800ac84 <HAL_SPI_TransmitReceive+0x2c6>
 800ac7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac82:	d102      	bne.n	800ac8a <HAL_SPI_TransmitReceive+0x2cc>
 800ac84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d103      	bne.n	800ac92 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800ac8a:	2303      	movs	r3, #3
 800ac8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ac90:	e029      	b.n	800ace6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ac96:	b29b      	uxth	r3, r3
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d1a2      	bne.n	800abe2 <HAL_SPI_TransmitReceive+0x224>
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aca0:	b29b      	uxth	r3, r3
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d19d      	bne.n	800abe2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800aca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aca8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800acaa:	68f8      	ldr	r0, [r7, #12]
 800acac:	f000 f8f8 	bl	800aea0 <SPI_EndRxTxTransaction>
 800acb0:	4603      	mov	r3, r0
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d006      	beq.n	800acc4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800acb6:	2301      	movs	r3, #1
 800acb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	2220      	movs	r2, #32
 800acc0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800acc2:	e010      	b.n	800ace6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	689b      	ldr	r3, [r3, #8]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d10b      	bne.n	800ace4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800accc:	2300      	movs	r3, #0
 800acce:	617b      	str	r3, [r7, #20]
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	68db      	ldr	r3, [r3, #12]
 800acd6:	617b      	str	r3, [r7, #20]
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	689b      	ldr	r3, [r3, #8]
 800acde:	617b      	str	r3, [r7, #20]
 800ace0:	697b      	ldr	r3, [r7, #20]
 800ace2:	e000      	b.n	800ace6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800ace4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	2201      	movs	r2, #1
 800acea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	2200      	movs	r2, #0
 800acf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800acf6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800acfa:	4618      	mov	r0, r3
 800acfc:	3730      	adds	r7, #48	; 0x30
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}

0800ad02 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ad02:	b580      	push	{r7, lr}
 800ad04:	b084      	sub	sp, #16
 800ad06:	af00      	add	r7, sp, #0
 800ad08:	60f8      	str	r0, [r7, #12]
 800ad0a:	60b9      	str	r1, [r7, #8]
 800ad0c:	603b      	str	r3, [r7, #0]
 800ad0e:	4613      	mov	r3, r2
 800ad10:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ad12:	e04c      	b.n	800adae <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad1a:	d048      	beq.n	800adae <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800ad1c:	f7fb fd72 	bl	8006804 <HAL_GetTick>
 800ad20:	4602      	mov	r2, r0
 800ad22:	69bb      	ldr	r3, [r7, #24]
 800ad24:	1ad3      	subs	r3, r2, r3
 800ad26:	683a      	ldr	r2, [r7, #0]
 800ad28:	429a      	cmp	r2, r3
 800ad2a:	d902      	bls.n	800ad32 <SPI_WaitFlagStateUntilTimeout+0x30>
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d13d      	bne.n	800adae <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	685a      	ldr	r2, [r3, #4]
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ad40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	685b      	ldr	r3, [r3, #4]
 800ad46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ad4a:	d111      	bne.n	800ad70 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	689b      	ldr	r3, [r3, #8]
 800ad50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad54:	d004      	beq.n	800ad60 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	689b      	ldr	r3, [r3, #8]
 800ad5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad5e:	d107      	bne.n	800ad70 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	681a      	ldr	r2, [r3, #0]
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad78:	d10f      	bne.n	800ad9a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	681a      	ldr	r2, [r3, #0]
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ad88:	601a      	str	r2, [r3, #0]
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	681a      	ldr	r2, [r3, #0]
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ad98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	2201      	movs	r2, #1
 800ad9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	2200      	movs	r2, #0
 800ada6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800adaa:	2303      	movs	r3, #3
 800adac:	e00f      	b.n	800adce <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	689a      	ldr	r2, [r3, #8]
 800adb4:	68bb      	ldr	r3, [r7, #8]
 800adb6:	4013      	ands	r3, r2
 800adb8:	68ba      	ldr	r2, [r7, #8]
 800adba:	429a      	cmp	r2, r3
 800adbc:	bf0c      	ite	eq
 800adbe:	2301      	moveq	r3, #1
 800adc0:	2300      	movne	r3, #0
 800adc2:	b2db      	uxtb	r3, r3
 800adc4:	461a      	mov	r2, r3
 800adc6:	79fb      	ldrb	r3, [r7, #7]
 800adc8:	429a      	cmp	r2, r3
 800adca:	d1a3      	bne.n	800ad14 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800adcc:	2300      	movs	r3, #0
}
 800adce:	4618      	mov	r0, r3
 800add0:	3710      	adds	r7, #16
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}

0800add6 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800add6:	b580      	push	{r7, lr}
 800add8:	b086      	sub	sp, #24
 800adda:	af02      	add	r7, sp, #8
 800addc:	60f8      	str	r0, [r7, #12]
 800adde:	60b9      	str	r1, [r7, #8]
 800ade0:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	685b      	ldr	r3, [r3, #4]
 800ade6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800adea:	d111      	bne.n	800ae10 <SPI_EndRxTransaction+0x3a>
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	689b      	ldr	r3, [r3, #8]
 800adf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800adf4:	d004      	beq.n	800ae00 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	689b      	ldr	r3, [r3, #8]
 800adfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800adfe:	d107      	bne.n	800ae10 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	681a      	ldr	r2, [r3, #0]
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ae0e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	685b      	ldr	r3, [r3, #4]
 800ae14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ae18:	d12a      	bne.n	800ae70 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	689b      	ldr	r3, [r3, #8]
 800ae1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae22:	d012      	beq.n	800ae4a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	9300      	str	r3, [sp, #0]
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	2180      	movs	r1, #128	; 0x80
 800ae2e:	68f8      	ldr	r0, [r7, #12]
 800ae30:	f7ff ff67 	bl	800ad02 <SPI_WaitFlagStateUntilTimeout>
 800ae34:	4603      	mov	r3, r0
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d02d      	beq.n	800ae96 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae3e:	f043 0220 	orr.w	r2, r3, #32
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800ae46:	2303      	movs	r3, #3
 800ae48:	e026      	b.n	800ae98 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	9300      	str	r3, [sp, #0]
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	2200      	movs	r2, #0
 800ae52:	2101      	movs	r1, #1
 800ae54:	68f8      	ldr	r0, [r7, #12]
 800ae56:	f7ff ff54 	bl	800ad02 <SPI_WaitFlagStateUntilTimeout>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d01a      	beq.n	800ae96 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae64:	f043 0220 	orr.w	r2, r3, #32
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800ae6c:	2303      	movs	r3, #3
 800ae6e:	e013      	b.n	800ae98 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	9300      	str	r3, [sp, #0]
 800ae74:	68bb      	ldr	r3, [r7, #8]
 800ae76:	2200      	movs	r2, #0
 800ae78:	2101      	movs	r1, #1
 800ae7a:	68f8      	ldr	r0, [r7, #12]
 800ae7c:	f7ff ff41 	bl	800ad02 <SPI_WaitFlagStateUntilTimeout>
 800ae80:	4603      	mov	r3, r0
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d007      	beq.n	800ae96 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae8a:	f043 0220 	orr.w	r2, r3, #32
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800ae92:	2303      	movs	r3, #3
 800ae94:	e000      	b.n	800ae98 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800ae96:	2300      	movs	r3, #0
}
 800ae98:	4618      	mov	r0, r3
 800ae9a:	3710      	adds	r7, #16
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}

0800aea0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b088      	sub	sp, #32
 800aea4:	af02      	add	r7, sp, #8
 800aea6:	60f8      	str	r0, [r7, #12]
 800aea8:	60b9      	str	r1, [r7, #8]
 800aeaa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800aeac:	4b1b      	ldr	r3, [pc, #108]	; (800af1c <SPI_EndRxTxTransaction+0x7c>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	4a1b      	ldr	r2, [pc, #108]	; (800af20 <SPI_EndRxTxTransaction+0x80>)
 800aeb2:	fba2 2303 	umull	r2, r3, r2, r3
 800aeb6:	0d5b      	lsrs	r3, r3, #21
 800aeb8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800aebc:	fb02 f303 	mul.w	r3, r2, r3
 800aec0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	685b      	ldr	r3, [r3, #4]
 800aec6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aeca:	d112      	bne.n	800aef2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	9300      	str	r3, [sp, #0]
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	2200      	movs	r2, #0
 800aed4:	2180      	movs	r1, #128	; 0x80
 800aed6:	68f8      	ldr	r0, [r7, #12]
 800aed8:	f7ff ff13 	bl	800ad02 <SPI_WaitFlagStateUntilTimeout>
 800aedc:	4603      	mov	r3, r0
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d016      	beq.n	800af10 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aee6:	f043 0220 	orr.w	r2, r3, #32
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800aeee:	2303      	movs	r3, #3
 800aef0:	e00f      	b.n	800af12 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800aef2:	697b      	ldr	r3, [r7, #20]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d00a      	beq.n	800af0e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800aef8:	697b      	ldr	r3, [r7, #20]
 800aefa:	3b01      	subs	r3, #1
 800aefc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	689b      	ldr	r3, [r3, #8]
 800af04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af08:	2b80      	cmp	r3, #128	; 0x80
 800af0a:	d0f2      	beq.n	800aef2 <SPI_EndRxTxTransaction+0x52>
 800af0c:	e000      	b.n	800af10 <SPI_EndRxTxTransaction+0x70>
        break;
 800af0e:	bf00      	nop
  }

  return HAL_OK;
 800af10:	2300      	movs	r3, #0
}
 800af12:	4618      	mov	r0, r3
 800af14:	3718      	adds	r7, #24
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}
 800af1a:	bf00      	nop
 800af1c:	20000014 	.word	0x20000014
 800af20:	165e9f81 	.word	0x165e9f81

0800af24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b082      	sub	sp, #8
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d101      	bne.n	800af36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800af32:	2301      	movs	r3, #1
 800af34:	e01d      	b.n	800af72 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af3c:	b2db      	uxtb	r3, r3
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d106      	bne.n	800af50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2200      	movs	r2, #0
 800af46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	f7fa fe24 	bl	8005b98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2202      	movs	r2, #2
 800af54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681a      	ldr	r2, [r3, #0]
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	3304      	adds	r3, #4
 800af60:	4619      	mov	r1, r3
 800af62:	4610      	mov	r0, r2
 800af64:	f000 fa70 	bl	800b448 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2201      	movs	r2, #1
 800af6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800af70:	2300      	movs	r3, #0
}
 800af72:	4618      	mov	r0, r3
 800af74:	3708      	adds	r7, #8
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}

0800af7a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800af7a:	b480      	push	{r7}
 800af7c:	b085      	sub	sp, #20
 800af7e:	af00      	add	r7, sp, #0
 800af80:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2202      	movs	r2, #2
 800af86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	689b      	ldr	r3, [r3, #8]
 800af90:	f003 0307 	and.w	r3, r3, #7
 800af94:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	2b06      	cmp	r3, #6
 800af9a:	d007      	beq.n	800afac <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	681a      	ldr	r2, [r3, #0]
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	f042 0201 	orr.w	r2, r2, #1
 800afaa:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2201      	movs	r2, #1
 800afb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800afb4:	2300      	movs	r3, #0
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	3714      	adds	r7, #20
 800afba:	46bd      	mov	sp, r7
 800afbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc0:	4770      	bx	lr

0800afc2 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800afc2:	b480      	push	{r7}
 800afc4:	b083      	sub	sp, #12
 800afc6:	af00      	add	r7, sp, #0
 800afc8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	2202      	movs	r2, #2
 800afce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	6a1a      	ldr	r2, [r3, #32]
 800afd8:	f241 1311 	movw	r3, #4369	; 0x1111
 800afdc:	4013      	ands	r3, r2
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d10f      	bne.n	800b002 <HAL_TIM_Base_Stop+0x40>
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	6a1a      	ldr	r2, [r3, #32]
 800afe8:	f240 4344 	movw	r3, #1092	; 0x444
 800afec:	4013      	ands	r3, r2
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d107      	bne.n	800b002 <HAL_TIM_Base_Stop+0x40>
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	681a      	ldr	r2, [r3, #0]
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	f022 0201 	bic.w	r2, r2, #1
 800b000:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2201      	movs	r2, #1
 800b006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800b00a:	2300      	movs	r3, #0
}
 800b00c:	4618      	mov	r0, r3
 800b00e:	370c      	adds	r7, #12
 800b010:	46bd      	mov	sp, r7
 800b012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b016:	4770      	bx	lr

0800b018 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b018:	b480      	push	{r7}
 800b01a:	b085      	sub	sp, #20
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	68da      	ldr	r2, [r3, #12]
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	f042 0201 	orr.w	r2, r2, #1
 800b02e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	689b      	ldr	r3, [r3, #8]
 800b036:	f003 0307 	and.w	r3, r3, #7
 800b03a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	2b06      	cmp	r3, #6
 800b040:	d007      	beq.n	800b052 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	681a      	ldr	r2, [r3, #0]
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f042 0201 	orr.w	r2, r2, #1
 800b050:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b052:	2300      	movs	r3, #0
}
 800b054:	4618      	mov	r0, r3
 800b056:	3714      	adds	r7, #20
 800b058:	46bd      	mov	sp, r7
 800b05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05e:	4770      	bx	lr

0800b060 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b082      	sub	sp, #8
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	691b      	ldr	r3, [r3, #16]
 800b06e:	f003 0302 	and.w	r3, r3, #2
 800b072:	2b02      	cmp	r3, #2
 800b074:	d122      	bne.n	800b0bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	68db      	ldr	r3, [r3, #12]
 800b07c:	f003 0302 	and.w	r3, r3, #2
 800b080:	2b02      	cmp	r3, #2
 800b082:	d11b      	bne.n	800b0bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f06f 0202 	mvn.w	r2, #2
 800b08c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2201      	movs	r2, #1
 800b092:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	699b      	ldr	r3, [r3, #24]
 800b09a:	f003 0303 	and.w	r3, r3, #3
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d003      	beq.n	800b0aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b0a2:	6878      	ldr	r0, [r7, #4]
 800b0a4:	f000 f9b2 	bl	800b40c <HAL_TIM_IC_CaptureCallback>
 800b0a8:	e005      	b.n	800b0b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f000 f9a4 	bl	800b3f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f000 f9b5 	bl	800b420 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	691b      	ldr	r3, [r3, #16]
 800b0c2:	f003 0304 	and.w	r3, r3, #4
 800b0c6:	2b04      	cmp	r3, #4
 800b0c8:	d122      	bne.n	800b110 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	68db      	ldr	r3, [r3, #12]
 800b0d0:	f003 0304 	and.w	r3, r3, #4
 800b0d4:	2b04      	cmp	r3, #4
 800b0d6:	d11b      	bne.n	800b110 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	f06f 0204 	mvn.w	r2, #4
 800b0e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2202      	movs	r2, #2
 800b0e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	699b      	ldr	r3, [r3, #24]
 800b0ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d003      	beq.n	800b0fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f000 f988 	bl	800b40c <HAL_TIM_IC_CaptureCallback>
 800b0fc:	e005      	b.n	800b10a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f000 f97a 	bl	800b3f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	f000 f98b 	bl	800b420 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2200      	movs	r2, #0
 800b10e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	691b      	ldr	r3, [r3, #16]
 800b116:	f003 0308 	and.w	r3, r3, #8
 800b11a:	2b08      	cmp	r3, #8
 800b11c:	d122      	bne.n	800b164 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	68db      	ldr	r3, [r3, #12]
 800b124:	f003 0308 	and.w	r3, r3, #8
 800b128:	2b08      	cmp	r3, #8
 800b12a:	d11b      	bne.n	800b164 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	f06f 0208 	mvn.w	r2, #8
 800b134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2204      	movs	r2, #4
 800b13a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	69db      	ldr	r3, [r3, #28]
 800b142:	f003 0303 	and.w	r3, r3, #3
 800b146:	2b00      	cmp	r3, #0
 800b148:	d003      	beq.n	800b152 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	f000 f95e 	bl	800b40c <HAL_TIM_IC_CaptureCallback>
 800b150:	e005      	b.n	800b15e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f000 f950 	bl	800b3f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	f000 f961 	bl	800b420 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2200      	movs	r2, #0
 800b162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	691b      	ldr	r3, [r3, #16]
 800b16a:	f003 0310 	and.w	r3, r3, #16
 800b16e:	2b10      	cmp	r3, #16
 800b170:	d122      	bne.n	800b1b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	68db      	ldr	r3, [r3, #12]
 800b178:	f003 0310 	and.w	r3, r3, #16
 800b17c:	2b10      	cmp	r3, #16
 800b17e:	d11b      	bne.n	800b1b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	f06f 0210 	mvn.w	r2, #16
 800b188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2208      	movs	r2, #8
 800b18e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	69db      	ldr	r3, [r3, #28]
 800b196:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d003      	beq.n	800b1a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f000 f934 	bl	800b40c <HAL_TIM_IC_CaptureCallback>
 800b1a4:	e005      	b.n	800b1b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	f000 f926 	bl	800b3f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f000 f937 	bl	800b420 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	691b      	ldr	r3, [r3, #16]
 800b1be:	f003 0301 	and.w	r3, r3, #1
 800b1c2:	2b01      	cmp	r3, #1
 800b1c4:	d10e      	bne.n	800b1e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	68db      	ldr	r3, [r3, #12]
 800b1cc:	f003 0301 	and.w	r3, r3, #1
 800b1d0:	2b01      	cmp	r3, #1
 800b1d2:	d107      	bne.n	800b1e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f06f 0201 	mvn.w	r2, #1
 800b1dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	f7f7 fc2a 	bl	8002a38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	691b      	ldr	r3, [r3, #16]
 800b1ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1ee:	2b80      	cmp	r3, #128	; 0x80
 800b1f0:	d10e      	bne.n	800b210 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	68db      	ldr	r3, [r3, #12]
 800b1f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1fc:	2b80      	cmp	r3, #128	; 0x80
 800b1fe:	d107      	bne.n	800b210 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	f000 faae 	bl	800b76c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	691b      	ldr	r3, [r3, #16]
 800b216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b21a:	2b40      	cmp	r3, #64	; 0x40
 800b21c:	d10e      	bne.n	800b23c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	68db      	ldr	r3, [r3, #12]
 800b224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b228:	2b40      	cmp	r3, #64	; 0x40
 800b22a:	d107      	bne.n	800b23c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f000 f8fc 	bl	800b434 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	691b      	ldr	r3, [r3, #16]
 800b242:	f003 0320 	and.w	r3, r3, #32
 800b246:	2b20      	cmp	r3, #32
 800b248:	d10e      	bne.n	800b268 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	68db      	ldr	r3, [r3, #12]
 800b250:	f003 0320 	and.w	r3, r3, #32
 800b254:	2b20      	cmp	r3, #32
 800b256:	d107      	bne.n	800b268 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f06f 0220 	mvn.w	r2, #32
 800b260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f000 fa78 	bl	800b758 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b268:	bf00      	nop
 800b26a:	3708      	adds	r7, #8
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}

0800b270 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b084      	sub	sp, #16
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
 800b278:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b280:	2b01      	cmp	r3, #1
 800b282:	d101      	bne.n	800b288 <HAL_TIM_ConfigClockSource+0x18>
 800b284:	2302      	movs	r3, #2
 800b286:	e0b3      	b.n	800b3f0 <HAL_TIM_ConfigClockSource+0x180>
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2201      	movs	r2, #1
 800b28c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2202      	movs	r2, #2
 800b294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	689b      	ldr	r3, [r3, #8]
 800b29e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b2a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b2ae:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	68fa      	ldr	r2, [r7, #12]
 800b2b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b2c0:	d03e      	beq.n	800b340 <HAL_TIM_ConfigClockSource+0xd0>
 800b2c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b2c6:	f200 8087 	bhi.w	800b3d8 <HAL_TIM_ConfigClockSource+0x168>
 800b2ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2ce:	f000 8085 	beq.w	800b3dc <HAL_TIM_ConfigClockSource+0x16c>
 800b2d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2d6:	d87f      	bhi.n	800b3d8 <HAL_TIM_ConfigClockSource+0x168>
 800b2d8:	2b70      	cmp	r3, #112	; 0x70
 800b2da:	d01a      	beq.n	800b312 <HAL_TIM_ConfigClockSource+0xa2>
 800b2dc:	2b70      	cmp	r3, #112	; 0x70
 800b2de:	d87b      	bhi.n	800b3d8 <HAL_TIM_ConfigClockSource+0x168>
 800b2e0:	2b60      	cmp	r3, #96	; 0x60
 800b2e2:	d050      	beq.n	800b386 <HAL_TIM_ConfigClockSource+0x116>
 800b2e4:	2b60      	cmp	r3, #96	; 0x60
 800b2e6:	d877      	bhi.n	800b3d8 <HAL_TIM_ConfigClockSource+0x168>
 800b2e8:	2b50      	cmp	r3, #80	; 0x50
 800b2ea:	d03c      	beq.n	800b366 <HAL_TIM_ConfigClockSource+0xf6>
 800b2ec:	2b50      	cmp	r3, #80	; 0x50
 800b2ee:	d873      	bhi.n	800b3d8 <HAL_TIM_ConfigClockSource+0x168>
 800b2f0:	2b40      	cmp	r3, #64	; 0x40
 800b2f2:	d058      	beq.n	800b3a6 <HAL_TIM_ConfigClockSource+0x136>
 800b2f4:	2b40      	cmp	r3, #64	; 0x40
 800b2f6:	d86f      	bhi.n	800b3d8 <HAL_TIM_ConfigClockSource+0x168>
 800b2f8:	2b30      	cmp	r3, #48	; 0x30
 800b2fa:	d064      	beq.n	800b3c6 <HAL_TIM_ConfigClockSource+0x156>
 800b2fc:	2b30      	cmp	r3, #48	; 0x30
 800b2fe:	d86b      	bhi.n	800b3d8 <HAL_TIM_ConfigClockSource+0x168>
 800b300:	2b20      	cmp	r3, #32
 800b302:	d060      	beq.n	800b3c6 <HAL_TIM_ConfigClockSource+0x156>
 800b304:	2b20      	cmp	r3, #32
 800b306:	d867      	bhi.n	800b3d8 <HAL_TIM_ConfigClockSource+0x168>
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d05c      	beq.n	800b3c6 <HAL_TIM_ConfigClockSource+0x156>
 800b30c:	2b10      	cmp	r3, #16
 800b30e:	d05a      	beq.n	800b3c6 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800b310:	e062      	b.n	800b3d8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	6818      	ldr	r0, [r3, #0]
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	6899      	ldr	r1, [r3, #8]
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	685a      	ldr	r2, [r3, #4]
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	68db      	ldr	r3, [r3, #12]
 800b322:	f000 f98b 	bl	800b63c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	689b      	ldr	r3, [r3, #8]
 800b32c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b334:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	68fa      	ldr	r2, [r7, #12]
 800b33c:	609a      	str	r2, [r3, #8]
      break;
 800b33e:	e04e      	b.n	800b3de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6818      	ldr	r0, [r3, #0]
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	6899      	ldr	r1, [r3, #8]
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	685a      	ldr	r2, [r3, #4]
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	68db      	ldr	r3, [r3, #12]
 800b350:	f000 f974 	bl	800b63c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	689a      	ldr	r2, [r3, #8]
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b362:	609a      	str	r2, [r3, #8]
      break;
 800b364:	e03b      	b.n	800b3de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6818      	ldr	r0, [r3, #0]
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	6859      	ldr	r1, [r3, #4]
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	68db      	ldr	r3, [r3, #12]
 800b372:	461a      	mov	r2, r3
 800b374:	f000 f8e8 	bl	800b548 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	2150      	movs	r1, #80	; 0x50
 800b37e:	4618      	mov	r0, r3
 800b380:	f000 f941 	bl	800b606 <TIM_ITRx_SetConfig>
      break;
 800b384:	e02b      	b.n	800b3de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	6818      	ldr	r0, [r3, #0]
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	6859      	ldr	r1, [r3, #4]
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	68db      	ldr	r3, [r3, #12]
 800b392:	461a      	mov	r2, r3
 800b394:	f000 f907 	bl	800b5a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	2160      	movs	r1, #96	; 0x60
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f000 f931 	bl	800b606 <TIM_ITRx_SetConfig>
      break;
 800b3a4:	e01b      	b.n	800b3de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6818      	ldr	r0, [r3, #0]
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	6859      	ldr	r1, [r3, #4]
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	68db      	ldr	r3, [r3, #12]
 800b3b2:	461a      	mov	r2, r3
 800b3b4:	f000 f8c8 	bl	800b548 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	2140      	movs	r1, #64	; 0x40
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f000 f921 	bl	800b606 <TIM_ITRx_SetConfig>
      break;
 800b3c4:	e00b      	b.n	800b3de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681a      	ldr	r2, [r3, #0]
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	4619      	mov	r1, r3
 800b3d0:	4610      	mov	r0, r2
 800b3d2:	f000 f918 	bl	800b606 <TIM_ITRx_SetConfig>
      break;
 800b3d6:	e002      	b.n	800b3de <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800b3d8:	bf00      	nop
 800b3da:	e000      	b.n	800b3de <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800b3dc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2201      	movs	r2, #1
 800b3e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b3ee:	2300      	movs	r3, #0
}
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	3710      	adds	r7, #16
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd80      	pop	{r7, pc}

0800b3f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	b083      	sub	sp, #12
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b400:	bf00      	nop
 800b402:	370c      	adds	r7, #12
 800b404:	46bd      	mov	sp, r7
 800b406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40a:	4770      	bx	lr

0800b40c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b40c:	b480      	push	{r7}
 800b40e:	b083      	sub	sp, #12
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b414:	bf00      	nop
 800b416:	370c      	adds	r7, #12
 800b418:	46bd      	mov	sp, r7
 800b41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41e:	4770      	bx	lr

0800b420 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b420:	b480      	push	{r7}
 800b422:	b083      	sub	sp, #12
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b428:	bf00      	nop
 800b42a:	370c      	adds	r7, #12
 800b42c:	46bd      	mov	sp, r7
 800b42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b432:	4770      	bx	lr

0800b434 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b434:	b480      	push	{r7}
 800b436:	b083      	sub	sp, #12
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b43c:	bf00      	nop
 800b43e:	370c      	adds	r7, #12
 800b440:	46bd      	mov	sp, r7
 800b442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b446:	4770      	bx	lr

0800b448 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b448:	b480      	push	{r7}
 800b44a:	b085      	sub	sp, #20
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
 800b450:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	4a34      	ldr	r2, [pc, #208]	; (800b52c <TIM_Base_SetConfig+0xe4>)
 800b45c:	4293      	cmp	r3, r2
 800b45e:	d00f      	beq.n	800b480 <TIM_Base_SetConfig+0x38>
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b466:	d00b      	beq.n	800b480 <TIM_Base_SetConfig+0x38>
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	4a31      	ldr	r2, [pc, #196]	; (800b530 <TIM_Base_SetConfig+0xe8>)
 800b46c:	4293      	cmp	r3, r2
 800b46e:	d007      	beq.n	800b480 <TIM_Base_SetConfig+0x38>
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	4a30      	ldr	r2, [pc, #192]	; (800b534 <TIM_Base_SetConfig+0xec>)
 800b474:	4293      	cmp	r3, r2
 800b476:	d003      	beq.n	800b480 <TIM_Base_SetConfig+0x38>
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	4a2f      	ldr	r2, [pc, #188]	; (800b538 <TIM_Base_SetConfig+0xf0>)
 800b47c:	4293      	cmp	r3, r2
 800b47e:	d108      	bne.n	800b492 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b486:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	685b      	ldr	r3, [r3, #4]
 800b48c:	68fa      	ldr	r2, [r7, #12]
 800b48e:	4313      	orrs	r3, r2
 800b490:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	4a25      	ldr	r2, [pc, #148]	; (800b52c <TIM_Base_SetConfig+0xe4>)
 800b496:	4293      	cmp	r3, r2
 800b498:	d01b      	beq.n	800b4d2 <TIM_Base_SetConfig+0x8a>
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4a0:	d017      	beq.n	800b4d2 <TIM_Base_SetConfig+0x8a>
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	4a22      	ldr	r2, [pc, #136]	; (800b530 <TIM_Base_SetConfig+0xe8>)
 800b4a6:	4293      	cmp	r3, r2
 800b4a8:	d013      	beq.n	800b4d2 <TIM_Base_SetConfig+0x8a>
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	4a21      	ldr	r2, [pc, #132]	; (800b534 <TIM_Base_SetConfig+0xec>)
 800b4ae:	4293      	cmp	r3, r2
 800b4b0:	d00f      	beq.n	800b4d2 <TIM_Base_SetConfig+0x8a>
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	4a20      	ldr	r2, [pc, #128]	; (800b538 <TIM_Base_SetConfig+0xf0>)
 800b4b6:	4293      	cmp	r3, r2
 800b4b8:	d00b      	beq.n	800b4d2 <TIM_Base_SetConfig+0x8a>
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	4a1f      	ldr	r2, [pc, #124]	; (800b53c <TIM_Base_SetConfig+0xf4>)
 800b4be:	4293      	cmp	r3, r2
 800b4c0:	d007      	beq.n	800b4d2 <TIM_Base_SetConfig+0x8a>
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	4a1e      	ldr	r2, [pc, #120]	; (800b540 <TIM_Base_SetConfig+0xf8>)
 800b4c6:	4293      	cmp	r3, r2
 800b4c8:	d003      	beq.n	800b4d2 <TIM_Base_SetConfig+0x8a>
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	4a1d      	ldr	r2, [pc, #116]	; (800b544 <TIM_Base_SetConfig+0xfc>)
 800b4ce:	4293      	cmp	r3, r2
 800b4d0:	d108      	bne.n	800b4e4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b4d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	68db      	ldr	r3, [r3, #12]
 800b4de:	68fa      	ldr	r2, [r7, #12]
 800b4e0:	4313      	orrs	r3, r2
 800b4e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	695b      	ldr	r3, [r3, #20]
 800b4ee:	4313      	orrs	r3, r2
 800b4f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	68fa      	ldr	r2, [r7, #12]
 800b4f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	689a      	ldr	r2, [r3, #8]
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	681a      	ldr	r2, [r3, #0]
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	4a08      	ldr	r2, [pc, #32]	; (800b52c <TIM_Base_SetConfig+0xe4>)
 800b50c:	4293      	cmp	r3, r2
 800b50e:	d103      	bne.n	800b518 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	691a      	ldr	r2, [r3, #16]
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2201      	movs	r2, #1
 800b51c:	615a      	str	r2, [r3, #20]
}
 800b51e:	bf00      	nop
 800b520:	3714      	adds	r7, #20
 800b522:	46bd      	mov	sp, r7
 800b524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b528:	4770      	bx	lr
 800b52a:	bf00      	nop
 800b52c:	40010000 	.word	0x40010000
 800b530:	40000400 	.word	0x40000400
 800b534:	40000800 	.word	0x40000800
 800b538:	40000c00 	.word	0x40000c00
 800b53c:	40014000 	.word	0x40014000
 800b540:	40014400 	.word	0x40014400
 800b544:	40014800 	.word	0x40014800

0800b548 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b548:	b480      	push	{r7}
 800b54a:	b087      	sub	sp, #28
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	60f8      	str	r0, [r7, #12]
 800b550:	60b9      	str	r1, [r7, #8]
 800b552:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	6a1b      	ldr	r3, [r3, #32]
 800b558:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	6a1b      	ldr	r3, [r3, #32]
 800b55e:	f023 0201 	bic.w	r2, r3, #1
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	699b      	ldr	r3, [r3, #24]
 800b56a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b56c:	693b      	ldr	r3, [r7, #16]
 800b56e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b572:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	011b      	lsls	r3, r3, #4
 800b578:	693a      	ldr	r2, [r7, #16]
 800b57a:	4313      	orrs	r3, r2
 800b57c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b57e:	697b      	ldr	r3, [r7, #20]
 800b580:	f023 030a 	bic.w	r3, r3, #10
 800b584:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b586:	697a      	ldr	r2, [r7, #20]
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	4313      	orrs	r3, r2
 800b58c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	693a      	ldr	r2, [r7, #16]
 800b592:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	697a      	ldr	r2, [r7, #20]
 800b598:	621a      	str	r2, [r3, #32]
}
 800b59a:	bf00      	nop
 800b59c:	371c      	adds	r7, #28
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a4:	4770      	bx	lr

0800b5a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b5a6:	b480      	push	{r7}
 800b5a8:	b087      	sub	sp, #28
 800b5aa:	af00      	add	r7, sp, #0
 800b5ac:	60f8      	str	r0, [r7, #12]
 800b5ae:	60b9      	str	r1, [r7, #8]
 800b5b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	6a1b      	ldr	r3, [r3, #32]
 800b5b6:	f023 0210 	bic.w	r2, r3, #16
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	699b      	ldr	r3, [r3, #24]
 800b5c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	6a1b      	ldr	r3, [r3, #32]
 800b5c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b5ca:	697b      	ldr	r3, [r7, #20]
 800b5cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b5d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	031b      	lsls	r3, r3, #12
 800b5d6:	697a      	ldr	r2, [r7, #20]
 800b5d8:	4313      	orrs	r3, r2
 800b5da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b5dc:	693b      	ldr	r3, [r7, #16]
 800b5de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b5e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	011b      	lsls	r3, r3, #4
 800b5e8:	693a      	ldr	r2, [r7, #16]
 800b5ea:	4313      	orrs	r3, r2
 800b5ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	697a      	ldr	r2, [r7, #20]
 800b5f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	693a      	ldr	r2, [r7, #16]
 800b5f8:	621a      	str	r2, [r3, #32]
}
 800b5fa:	bf00      	nop
 800b5fc:	371c      	adds	r7, #28
 800b5fe:	46bd      	mov	sp, r7
 800b600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b604:	4770      	bx	lr

0800b606 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b606:	b480      	push	{r7}
 800b608:	b085      	sub	sp, #20
 800b60a:	af00      	add	r7, sp, #0
 800b60c:	6078      	str	r0, [r7, #4]
 800b60e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	689b      	ldr	r3, [r3, #8]
 800b614:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b61c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b61e:	683a      	ldr	r2, [r7, #0]
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	4313      	orrs	r3, r2
 800b624:	f043 0307 	orr.w	r3, r3, #7
 800b628:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	68fa      	ldr	r2, [r7, #12]
 800b62e:	609a      	str	r2, [r3, #8]
}
 800b630:	bf00      	nop
 800b632:	3714      	adds	r7, #20
 800b634:	46bd      	mov	sp, r7
 800b636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63a:	4770      	bx	lr

0800b63c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b63c:	b480      	push	{r7}
 800b63e:	b087      	sub	sp, #28
 800b640:	af00      	add	r7, sp, #0
 800b642:	60f8      	str	r0, [r7, #12]
 800b644:	60b9      	str	r1, [r7, #8]
 800b646:	607a      	str	r2, [r7, #4]
 800b648:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	689b      	ldr	r3, [r3, #8]
 800b64e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b650:	697b      	ldr	r3, [r7, #20]
 800b652:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b656:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	021a      	lsls	r2, r3, #8
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	431a      	orrs	r2, r3
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	4313      	orrs	r3, r2
 800b664:	697a      	ldr	r2, [r7, #20]
 800b666:	4313      	orrs	r3, r2
 800b668:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	697a      	ldr	r2, [r7, #20]
 800b66e:	609a      	str	r2, [r3, #8]
}
 800b670:	bf00      	nop
 800b672:	371c      	adds	r7, #28
 800b674:	46bd      	mov	sp, r7
 800b676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67a:	4770      	bx	lr

0800b67c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b67c:	b480      	push	{r7}
 800b67e:	b085      	sub	sp, #20
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
 800b684:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b68c:	2b01      	cmp	r3, #1
 800b68e:	d101      	bne.n	800b694 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b690:	2302      	movs	r3, #2
 800b692:	e050      	b.n	800b736 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2201      	movs	r2, #1
 800b698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2202      	movs	r2, #2
 800b6a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	685b      	ldr	r3, [r3, #4]
 800b6aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	689b      	ldr	r3, [r3, #8]
 800b6b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	68fa      	ldr	r2, [r7, #12]
 800b6c2:	4313      	orrs	r3, r2
 800b6c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	68fa      	ldr	r2, [r7, #12]
 800b6cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	4a1c      	ldr	r2, [pc, #112]	; (800b744 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b6d4:	4293      	cmp	r3, r2
 800b6d6:	d018      	beq.n	800b70a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6e0:	d013      	beq.n	800b70a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	4a18      	ldr	r2, [pc, #96]	; (800b748 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b6e8:	4293      	cmp	r3, r2
 800b6ea:	d00e      	beq.n	800b70a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	4a16      	ldr	r2, [pc, #88]	; (800b74c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b6f2:	4293      	cmp	r3, r2
 800b6f4:	d009      	beq.n	800b70a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	4a15      	ldr	r2, [pc, #84]	; (800b750 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b6fc:	4293      	cmp	r3, r2
 800b6fe:	d004      	beq.n	800b70a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	4a13      	ldr	r2, [pc, #76]	; (800b754 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b706:	4293      	cmp	r3, r2
 800b708:	d10c      	bne.n	800b724 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b70a:	68bb      	ldr	r3, [r7, #8]
 800b70c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b710:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b712:	683b      	ldr	r3, [r7, #0]
 800b714:	685b      	ldr	r3, [r3, #4]
 800b716:	68ba      	ldr	r2, [r7, #8]
 800b718:	4313      	orrs	r3, r2
 800b71a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	68ba      	ldr	r2, [r7, #8]
 800b722:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2201      	movs	r2, #1
 800b728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2200      	movs	r2, #0
 800b730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b734:	2300      	movs	r3, #0
}
 800b736:	4618      	mov	r0, r3
 800b738:	3714      	adds	r7, #20
 800b73a:	46bd      	mov	sp, r7
 800b73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b740:	4770      	bx	lr
 800b742:	bf00      	nop
 800b744:	40010000 	.word	0x40010000
 800b748:	40000400 	.word	0x40000400
 800b74c:	40000800 	.word	0x40000800
 800b750:	40000c00 	.word	0x40000c00
 800b754:	40014000 	.word	0x40014000

0800b758 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b758:	b480      	push	{r7}
 800b75a:	b083      	sub	sp, #12
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b760:	bf00      	nop
 800b762:	370c      	adds	r7, #12
 800b764:	46bd      	mov	sp, r7
 800b766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76a:	4770      	bx	lr

0800b76c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b76c:	b480      	push	{r7}
 800b76e:	b083      	sub	sp, #12
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b774:	bf00      	nop
 800b776:	370c      	adds	r7, #12
 800b778:	46bd      	mov	sp, r7
 800b77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77e:	4770      	bx	lr

0800b780 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b082      	sub	sp, #8
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d101      	bne.n	800b792 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b78e:	2301      	movs	r3, #1
 800b790:	e03f      	b.n	800b812 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b798:	b2db      	uxtb	r3, r3
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d106      	bne.n	800b7ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b7a6:	6878      	ldr	r0, [r7, #4]
 800b7a8:	f7fa fa8a 	bl	8005cc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2224      	movs	r2, #36	; 0x24
 800b7b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	68da      	ldr	r2, [r3, #12]
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b7c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	f000 fa69 	bl	800bc9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	691a      	ldr	r2, [r3, #16]
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b7d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	695a      	ldr	r2, [r3, #20]
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b7e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	68da      	ldr	r2, [r3, #12]
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b7f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2220      	movs	r2, #32
 800b804:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2220      	movs	r2, #32
 800b80c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800b810:	2300      	movs	r3, #0
}
 800b812:	4618      	mov	r0, r3
 800b814:	3708      	adds	r7, #8
 800b816:	46bd      	mov	sp, r7
 800b818:	bd80      	pop	{r7, pc}
	...

0800b81c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b088      	sub	sp, #32
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	68db      	ldr	r3, [r3, #12]
 800b832:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	695b      	ldr	r3, [r3, #20]
 800b83a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800b83c:	2300      	movs	r3, #0
 800b83e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800b840:	2300      	movs	r3, #0
 800b842:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b844:	69fb      	ldr	r3, [r7, #28]
 800b846:	f003 030f 	and.w	r3, r3, #15
 800b84a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800b84c:	693b      	ldr	r3, [r7, #16]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d10d      	bne.n	800b86e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b852:	69fb      	ldr	r3, [r7, #28]
 800b854:	f003 0320 	and.w	r3, r3, #32
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d008      	beq.n	800b86e <HAL_UART_IRQHandler+0x52>
 800b85c:	69bb      	ldr	r3, [r7, #24]
 800b85e:	f003 0320 	and.w	r3, r3, #32
 800b862:	2b00      	cmp	r3, #0
 800b864:	d003      	beq.n	800b86e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f000 f996 	bl	800bb98 <UART_Receive_IT>
      return;
 800b86c:	e0d0      	b.n	800ba10 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b86e:	693b      	ldr	r3, [r7, #16]
 800b870:	2b00      	cmp	r3, #0
 800b872:	f000 80b0 	beq.w	800b9d6 <HAL_UART_IRQHandler+0x1ba>
 800b876:	697b      	ldr	r3, [r7, #20]
 800b878:	f003 0301 	and.w	r3, r3, #1
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d105      	bne.n	800b88c <HAL_UART_IRQHandler+0x70>
 800b880:	69bb      	ldr	r3, [r7, #24]
 800b882:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b886:	2b00      	cmp	r3, #0
 800b888:	f000 80a5 	beq.w	800b9d6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b88c:	69fb      	ldr	r3, [r7, #28]
 800b88e:	f003 0301 	and.w	r3, r3, #1
 800b892:	2b00      	cmp	r3, #0
 800b894:	d00a      	beq.n	800b8ac <HAL_UART_IRQHandler+0x90>
 800b896:	69bb      	ldr	r3, [r7, #24]
 800b898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d005      	beq.n	800b8ac <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8a4:	f043 0201 	orr.w	r2, r3, #1
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b8ac:	69fb      	ldr	r3, [r7, #28]
 800b8ae:	f003 0304 	and.w	r3, r3, #4
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d00a      	beq.n	800b8cc <HAL_UART_IRQHandler+0xb0>
 800b8b6:	697b      	ldr	r3, [r7, #20]
 800b8b8:	f003 0301 	and.w	r3, r3, #1
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d005      	beq.n	800b8cc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8c4:	f043 0202 	orr.w	r2, r3, #2
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b8cc:	69fb      	ldr	r3, [r7, #28]
 800b8ce:	f003 0302 	and.w	r3, r3, #2
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d00a      	beq.n	800b8ec <HAL_UART_IRQHandler+0xd0>
 800b8d6:	697b      	ldr	r3, [r7, #20]
 800b8d8:	f003 0301 	and.w	r3, r3, #1
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d005      	beq.n	800b8ec <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8e4:	f043 0204 	orr.w	r2, r3, #4
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800b8ec:	69fb      	ldr	r3, [r7, #28]
 800b8ee:	f003 0308 	and.w	r3, r3, #8
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d00f      	beq.n	800b916 <HAL_UART_IRQHandler+0xfa>
 800b8f6:	69bb      	ldr	r3, [r7, #24]
 800b8f8:	f003 0320 	and.w	r3, r3, #32
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d104      	bne.n	800b90a <HAL_UART_IRQHandler+0xee>
 800b900:	697b      	ldr	r3, [r7, #20]
 800b902:	f003 0301 	and.w	r3, r3, #1
 800b906:	2b00      	cmp	r3, #0
 800b908:	d005      	beq.n	800b916 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b90e:	f043 0208 	orr.w	r2, r3, #8
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d077      	beq.n	800ba0e <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b91e:	69fb      	ldr	r3, [r7, #28]
 800b920:	f003 0320 	and.w	r3, r3, #32
 800b924:	2b00      	cmp	r3, #0
 800b926:	d007      	beq.n	800b938 <HAL_UART_IRQHandler+0x11c>
 800b928:	69bb      	ldr	r3, [r7, #24]
 800b92a:	f003 0320 	and.w	r3, r3, #32
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d002      	beq.n	800b938 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800b932:	6878      	ldr	r0, [r7, #4]
 800b934:	f000 f930 	bl	800bb98 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	695b      	ldr	r3, [r3, #20]
 800b93e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b942:	2b40      	cmp	r3, #64	; 0x40
 800b944:	bf0c      	ite	eq
 800b946:	2301      	moveq	r3, #1
 800b948:	2300      	movne	r3, #0
 800b94a:	b2db      	uxtb	r3, r3
 800b94c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b952:	f003 0308 	and.w	r3, r3, #8
 800b956:	2b00      	cmp	r3, #0
 800b958:	d102      	bne.n	800b960 <HAL_UART_IRQHandler+0x144>
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d031      	beq.n	800b9c4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b960:	6878      	ldr	r0, [r7, #4]
 800b962:	f000 f879 	bl	800ba58 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	695b      	ldr	r3, [r3, #20]
 800b96c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b970:	2b40      	cmp	r3, #64	; 0x40
 800b972:	d123      	bne.n	800b9bc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	695a      	ldr	r2, [r3, #20]
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b982:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d013      	beq.n	800b9b4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b990:	4a21      	ldr	r2, [pc, #132]	; (800ba18 <HAL_UART_IRQHandler+0x1fc>)
 800b992:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b998:	4618      	mov	r0, r3
 800b99a:	f7fb fd61 	bl	8007460 <HAL_DMA_Abort_IT>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d016      	beq.n	800b9d2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9aa:	687a      	ldr	r2, [r7, #4]
 800b9ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b9ae:	4610      	mov	r0, r2
 800b9b0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9b2:	e00e      	b.n	800b9d2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b9b4:	6878      	ldr	r0, [r7, #4]
 800b9b6:	f000 f845 	bl	800ba44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9ba:	e00a      	b.n	800b9d2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f000 f841 	bl	800ba44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9c2:	e006      	b.n	800b9d2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f000 f83d 	bl	800ba44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800b9d0:	e01d      	b.n	800ba0e <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9d2:	bf00      	nop
    return;
 800b9d4:	e01b      	b.n	800ba0e <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b9d6:	69fb      	ldr	r3, [r7, #28]
 800b9d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d008      	beq.n	800b9f2 <HAL_UART_IRQHandler+0x1d6>
 800b9e0:	69bb      	ldr	r3, [r7, #24]
 800b9e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d003      	beq.n	800b9f2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f000 f866 	bl	800babc <UART_Transmit_IT>
    return;
 800b9f0:	e00e      	b.n	800ba10 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b9f2:	69fb      	ldr	r3, [r7, #28]
 800b9f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d009      	beq.n	800ba10 <HAL_UART_IRQHandler+0x1f4>
 800b9fc:	69bb      	ldr	r3, [r7, #24]
 800b9fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d004      	beq.n	800ba10 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f000 f8ae 	bl	800bb68 <UART_EndTransmit_IT>
    return;
 800ba0c:	e000      	b.n	800ba10 <HAL_UART_IRQHandler+0x1f4>
    return;
 800ba0e:	bf00      	nop
  }
}
 800ba10:	3720      	adds	r7, #32
 800ba12:	46bd      	mov	sp, r7
 800ba14:	bd80      	pop	{r7, pc}
 800ba16:	bf00      	nop
 800ba18:	0800ba95 	.word	0x0800ba95

0800ba1c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ba1c:	b480      	push	{r7}
 800ba1e:	b083      	sub	sp, #12
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800ba24:	bf00      	nop
 800ba26:	370c      	adds	r7, #12
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2e:	4770      	bx	lr

0800ba30 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ba30:	b480      	push	{r7}
 800ba32:	b083      	sub	sp, #12
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800ba38:	bf00      	nop
 800ba3a:	370c      	adds	r7, #12
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba42:	4770      	bx	lr

0800ba44 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ba44:	b480      	push	{r7}
 800ba46:	b083      	sub	sp, #12
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ba4c:	bf00      	nop
 800ba4e:	370c      	adds	r7, #12
 800ba50:	46bd      	mov	sp, r7
 800ba52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba56:	4770      	bx	lr

0800ba58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ba58:	b480      	push	{r7}
 800ba5a:	b083      	sub	sp, #12
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	68da      	ldr	r2, [r3, #12]
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ba6e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	695a      	ldr	r2, [r3, #20]
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	f022 0201 	bic.w	r2, r2, #1
 800ba7e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2220      	movs	r2, #32
 800ba84:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800ba88:	bf00      	nop
 800ba8a:	370c      	adds	r7, #12
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba92:	4770      	bx	lr

0800ba94 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b084      	sub	sp, #16
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baa0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	2200      	movs	r2, #0
 800baa6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	2200      	movs	r2, #0
 800baac:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800baae:	68f8      	ldr	r0, [r7, #12]
 800bab0:	f7ff ffc8 	bl	800ba44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bab4:	bf00      	nop
 800bab6:	3710      	adds	r7, #16
 800bab8:	46bd      	mov	sp, r7
 800baba:	bd80      	pop	{r7, pc}

0800babc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800babc:	b480      	push	{r7}
 800babe:	b085      	sub	sp, #20
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800baca:	b2db      	uxtb	r3, r3
 800bacc:	2b21      	cmp	r3, #33	; 0x21
 800bace:	d144      	bne.n	800bb5a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	689b      	ldr	r3, [r3, #8]
 800bad4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bad8:	d11a      	bne.n	800bb10 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6a1b      	ldr	r3, [r3, #32]
 800bade:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	881b      	ldrh	r3, [r3, #0]
 800bae4:	461a      	mov	r2, r3
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800baee:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	691b      	ldr	r3, [r3, #16]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d105      	bne.n	800bb04 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	6a1b      	ldr	r3, [r3, #32]
 800bafc:	1c9a      	adds	r2, r3, #2
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	621a      	str	r2, [r3, #32]
 800bb02:	e00e      	b.n	800bb22 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	6a1b      	ldr	r3, [r3, #32]
 800bb08:	1c5a      	adds	r2, r3, #1
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	621a      	str	r2, [r3, #32]
 800bb0e:	e008      	b.n	800bb22 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	6a1b      	ldr	r3, [r3, #32]
 800bb14:	1c59      	adds	r1, r3, #1
 800bb16:	687a      	ldr	r2, [r7, #4]
 800bb18:	6211      	str	r1, [r2, #32]
 800bb1a:	781a      	ldrb	r2, [r3, #0]
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bb26:	b29b      	uxth	r3, r3
 800bb28:	3b01      	subs	r3, #1
 800bb2a:	b29b      	uxth	r3, r3
 800bb2c:	687a      	ldr	r2, [r7, #4]
 800bb2e:	4619      	mov	r1, r3
 800bb30:	84d1      	strh	r1, [r2, #38]	; 0x26
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d10f      	bne.n	800bb56 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	68da      	ldr	r2, [r3, #12]
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bb44:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	68da      	ldr	r2, [r3, #12]
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bb54:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bb56:	2300      	movs	r3, #0
 800bb58:	e000      	b.n	800bb5c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800bb5a:	2302      	movs	r3, #2
  }
}
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	3714      	adds	r7, #20
 800bb60:	46bd      	mov	sp, r7
 800bb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb66:	4770      	bx	lr

0800bb68 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b082      	sub	sp, #8
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	68da      	ldr	r2, [r3, #12]
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bb7e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2220      	movs	r2, #32
 800bb84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bb88:	6878      	ldr	r0, [r7, #4]
 800bb8a:	f7ff ff47 	bl	800ba1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bb8e:	2300      	movs	r3, #0
}
 800bb90:	4618      	mov	r0, r3
 800bb92:	3708      	adds	r7, #8
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bd80      	pop	{r7, pc}

0800bb98 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b084      	sub	sp, #16
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800bba6:	b2db      	uxtb	r3, r3
 800bba8:	2b22      	cmp	r3, #34	; 0x22
 800bbaa:	d171      	bne.n	800bc90 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	689b      	ldr	r3, [r3, #8]
 800bbb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbb4:	d123      	bne.n	800bbfe <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbba:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	691b      	ldr	r3, [r3, #16]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d10e      	bne.n	800bbe2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	685b      	ldr	r3, [r3, #4]
 800bbca:	b29b      	uxth	r3, r3
 800bbcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbd0:	b29a      	uxth	r2, r3
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbda:	1c9a      	adds	r2, r3, #2
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	629a      	str	r2, [r3, #40]	; 0x28
 800bbe0:	e029      	b.n	800bc36 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	685b      	ldr	r3, [r3, #4]
 800bbe8:	b29b      	uxth	r3, r3
 800bbea:	b2db      	uxtb	r3, r3
 800bbec:	b29a      	uxth	r2, r3
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbf6:	1c5a      	adds	r2, r3, #1
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	629a      	str	r2, [r3, #40]	; 0x28
 800bbfc:	e01b      	b.n	800bc36 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	691b      	ldr	r3, [r3, #16]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d10a      	bne.n	800bc1c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	6858      	ldr	r0, [r3, #4]
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc10:	1c59      	adds	r1, r3, #1
 800bc12:	687a      	ldr	r2, [r7, #4]
 800bc14:	6291      	str	r1, [r2, #40]	; 0x28
 800bc16:	b2c2      	uxtb	r2, r0
 800bc18:	701a      	strb	r2, [r3, #0]
 800bc1a:	e00c      	b.n	800bc36 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	685b      	ldr	r3, [r3, #4]
 800bc22:	b2da      	uxtb	r2, r3
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc28:	1c58      	adds	r0, r3, #1
 800bc2a:	6879      	ldr	r1, [r7, #4]
 800bc2c:	6288      	str	r0, [r1, #40]	; 0x28
 800bc2e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800bc32:	b2d2      	uxtb	r2, r2
 800bc34:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bc3a:	b29b      	uxth	r3, r3
 800bc3c:	3b01      	subs	r3, #1
 800bc3e:	b29b      	uxth	r3, r3
 800bc40:	687a      	ldr	r2, [r7, #4]
 800bc42:	4619      	mov	r1, r3
 800bc44:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d120      	bne.n	800bc8c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	68da      	ldr	r2, [r3, #12]
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	f022 0220 	bic.w	r2, r2, #32
 800bc58:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	68da      	ldr	r2, [r3, #12]
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bc68:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	695a      	ldr	r2, [r3, #20]
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	f022 0201 	bic.w	r2, r2, #1
 800bc78:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2220      	movs	r2, #32
 800bc7e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800bc82:	6878      	ldr	r0, [r7, #4]
 800bc84:	f7ff fed4 	bl	800ba30 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800bc88:	2300      	movs	r3, #0
 800bc8a:	e002      	b.n	800bc92 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	e000      	b.n	800bc92 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800bc90:	2302      	movs	r3, #2
  }
}
 800bc92:	4618      	mov	r0, r3
 800bc94:	3710      	adds	r7, #16
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bd80      	pop	{r7, pc}
	...

0800bc9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bc9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bca0:	b0bd      	sub	sp, #244	; 0xf4
 800bca2:	af00      	add	r7, sp, #0
 800bca4:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	691b      	ldr	r3, [r3, #16]
 800bcb0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800bcb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcb8:	68d9      	ldr	r1, [r3, #12]
 800bcba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcbe:	681a      	ldr	r2, [r3, #0]
 800bcc0:	ea40 0301 	orr.w	r3, r0, r1
 800bcc4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bcc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcca:	689a      	ldr	r2, [r3, #8]
 800bccc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcd0:	691b      	ldr	r3, [r3, #16]
 800bcd2:	431a      	orrs	r2, r3
 800bcd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcd8:	695b      	ldr	r3, [r3, #20]
 800bcda:	431a      	orrs	r2, r3
 800bcdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bce0:	69db      	ldr	r3, [r3, #28]
 800bce2:	4313      	orrs	r3, r2
 800bce4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 800bce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	68db      	ldr	r3, [r3, #12]
 800bcf0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800bcf4:	f021 010c 	bic.w	r1, r1, #12
 800bcf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcfc:	681a      	ldr	r2, [r3, #0]
 800bcfe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bd02:	430b      	orrs	r3, r1
 800bd04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bd06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	695b      	ldr	r3, [r3, #20]
 800bd0e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800bd12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd16:	6999      	ldr	r1, [r3, #24]
 800bd18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd1c:	681a      	ldr	r2, [r3, #0]
 800bd1e:	ea40 0301 	orr.w	r3, r0, r1
 800bd22:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bd24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd28:	69db      	ldr	r3, [r3, #28]
 800bd2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd2e:	f040 81a5 	bne.w	800c07c <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bd32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd36:	681a      	ldr	r2, [r3, #0]
 800bd38:	4bcd      	ldr	r3, [pc, #820]	; (800c070 <UART_SetConfig+0x3d4>)
 800bd3a:	429a      	cmp	r2, r3
 800bd3c:	d006      	beq.n	800bd4c <UART_SetConfig+0xb0>
 800bd3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd42:	681a      	ldr	r2, [r3, #0]
 800bd44:	4bcb      	ldr	r3, [pc, #812]	; (800c074 <UART_SetConfig+0x3d8>)
 800bd46:	429a      	cmp	r2, r3
 800bd48:	f040 80cb 	bne.w	800bee2 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bd4c:	f7fc fc64 	bl	8008618 <HAL_RCC_GetPCLK2Freq>
 800bd50:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bd54:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bd58:	461c      	mov	r4, r3
 800bd5a:	f04f 0500 	mov.w	r5, #0
 800bd5e:	4622      	mov	r2, r4
 800bd60:	462b      	mov	r3, r5
 800bd62:	1891      	adds	r1, r2, r2
 800bd64:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800bd68:	415b      	adcs	r3, r3
 800bd6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bd6e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800bd72:	1912      	adds	r2, r2, r4
 800bd74:	eb45 0303 	adc.w	r3, r5, r3
 800bd78:	f04f 0000 	mov.w	r0, #0
 800bd7c:	f04f 0100 	mov.w	r1, #0
 800bd80:	00d9      	lsls	r1, r3, #3
 800bd82:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bd86:	00d0      	lsls	r0, r2, #3
 800bd88:	4602      	mov	r2, r0
 800bd8a:	460b      	mov	r3, r1
 800bd8c:	1911      	adds	r1, r2, r4
 800bd8e:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800bd92:	416b      	adcs	r3, r5
 800bd94:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800bd98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd9c:	685b      	ldr	r3, [r3, #4]
 800bd9e:	461a      	mov	r2, r3
 800bda0:	f04f 0300 	mov.w	r3, #0
 800bda4:	1891      	adds	r1, r2, r2
 800bda6:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800bdaa:	415b      	adcs	r3, r3
 800bdac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bdb0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800bdb4:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800bdb8:	f7f4 ffce 	bl	8000d58 <__aeabi_uldivmod>
 800bdbc:	4602      	mov	r2, r0
 800bdbe:	460b      	mov	r3, r1
 800bdc0:	4bad      	ldr	r3, [pc, #692]	; (800c078 <UART_SetConfig+0x3dc>)
 800bdc2:	fba3 2302 	umull	r2, r3, r3, r2
 800bdc6:	095b      	lsrs	r3, r3, #5
 800bdc8:	011e      	lsls	r6, r3, #4
 800bdca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bdce:	461c      	mov	r4, r3
 800bdd0:	f04f 0500 	mov.w	r5, #0
 800bdd4:	4622      	mov	r2, r4
 800bdd6:	462b      	mov	r3, r5
 800bdd8:	1891      	adds	r1, r2, r2
 800bdda:	67b9      	str	r1, [r7, #120]	; 0x78
 800bddc:	415b      	adcs	r3, r3
 800bdde:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bde0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800bde4:	1912      	adds	r2, r2, r4
 800bde6:	eb45 0303 	adc.w	r3, r5, r3
 800bdea:	f04f 0000 	mov.w	r0, #0
 800bdee:	f04f 0100 	mov.w	r1, #0
 800bdf2:	00d9      	lsls	r1, r3, #3
 800bdf4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bdf8:	00d0      	lsls	r0, r2, #3
 800bdfa:	4602      	mov	r2, r0
 800bdfc:	460b      	mov	r3, r1
 800bdfe:	1911      	adds	r1, r2, r4
 800be00:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800be04:	416b      	adcs	r3, r5
 800be06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800be0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be0e:	685b      	ldr	r3, [r3, #4]
 800be10:	461a      	mov	r2, r3
 800be12:	f04f 0300 	mov.w	r3, #0
 800be16:	1891      	adds	r1, r2, r2
 800be18:	6739      	str	r1, [r7, #112]	; 0x70
 800be1a:	415b      	adcs	r3, r3
 800be1c:	677b      	str	r3, [r7, #116]	; 0x74
 800be1e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800be22:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800be26:	f7f4 ff97 	bl	8000d58 <__aeabi_uldivmod>
 800be2a:	4602      	mov	r2, r0
 800be2c:	460b      	mov	r3, r1
 800be2e:	4b92      	ldr	r3, [pc, #584]	; (800c078 <UART_SetConfig+0x3dc>)
 800be30:	fba3 1302 	umull	r1, r3, r3, r2
 800be34:	095b      	lsrs	r3, r3, #5
 800be36:	2164      	movs	r1, #100	; 0x64
 800be38:	fb01 f303 	mul.w	r3, r1, r3
 800be3c:	1ad3      	subs	r3, r2, r3
 800be3e:	00db      	lsls	r3, r3, #3
 800be40:	3332      	adds	r3, #50	; 0x32
 800be42:	4a8d      	ldr	r2, [pc, #564]	; (800c078 <UART_SetConfig+0x3dc>)
 800be44:	fba2 2303 	umull	r2, r3, r2, r3
 800be48:	095b      	lsrs	r3, r3, #5
 800be4a:	005b      	lsls	r3, r3, #1
 800be4c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800be50:	441e      	add	r6, r3
 800be52:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800be56:	4618      	mov	r0, r3
 800be58:	f04f 0100 	mov.w	r1, #0
 800be5c:	4602      	mov	r2, r0
 800be5e:	460b      	mov	r3, r1
 800be60:	1894      	adds	r4, r2, r2
 800be62:	66bc      	str	r4, [r7, #104]	; 0x68
 800be64:	415b      	adcs	r3, r3
 800be66:	66fb      	str	r3, [r7, #108]	; 0x6c
 800be68:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800be6c:	1812      	adds	r2, r2, r0
 800be6e:	eb41 0303 	adc.w	r3, r1, r3
 800be72:	f04f 0400 	mov.w	r4, #0
 800be76:	f04f 0500 	mov.w	r5, #0
 800be7a:	00dd      	lsls	r5, r3, #3
 800be7c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800be80:	00d4      	lsls	r4, r2, #3
 800be82:	4622      	mov	r2, r4
 800be84:	462b      	mov	r3, r5
 800be86:	1814      	adds	r4, r2, r0
 800be88:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800be8c:	414b      	adcs	r3, r1
 800be8e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800be92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be96:	685b      	ldr	r3, [r3, #4]
 800be98:	461a      	mov	r2, r3
 800be9a:	f04f 0300 	mov.w	r3, #0
 800be9e:	1891      	adds	r1, r2, r2
 800bea0:	6639      	str	r1, [r7, #96]	; 0x60
 800bea2:	415b      	adcs	r3, r3
 800bea4:	667b      	str	r3, [r7, #100]	; 0x64
 800bea6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800beaa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800beae:	f7f4 ff53 	bl	8000d58 <__aeabi_uldivmod>
 800beb2:	4602      	mov	r2, r0
 800beb4:	460b      	mov	r3, r1
 800beb6:	4b70      	ldr	r3, [pc, #448]	; (800c078 <UART_SetConfig+0x3dc>)
 800beb8:	fba3 1302 	umull	r1, r3, r3, r2
 800bebc:	095b      	lsrs	r3, r3, #5
 800bebe:	2164      	movs	r1, #100	; 0x64
 800bec0:	fb01 f303 	mul.w	r3, r1, r3
 800bec4:	1ad3      	subs	r3, r2, r3
 800bec6:	00db      	lsls	r3, r3, #3
 800bec8:	3332      	adds	r3, #50	; 0x32
 800beca:	4a6b      	ldr	r2, [pc, #428]	; (800c078 <UART_SetConfig+0x3dc>)
 800becc:	fba2 2303 	umull	r2, r3, r2, r3
 800bed0:	095b      	lsrs	r3, r3, #5
 800bed2:	f003 0207 	and.w	r2, r3, #7
 800bed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	4432      	add	r2, r6
 800bede:	609a      	str	r2, [r3, #8]
 800bee0:	e26d      	b.n	800c3be <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bee2:	f7fc fb85 	bl	80085f0 <HAL_RCC_GetPCLK1Freq>
 800bee6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800beea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800beee:	461c      	mov	r4, r3
 800bef0:	f04f 0500 	mov.w	r5, #0
 800bef4:	4622      	mov	r2, r4
 800bef6:	462b      	mov	r3, r5
 800bef8:	1891      	adds	r1, r2, r2
 800befa:	65b9      	str	r1, [r7, #88]	; 0x58
 800befc:	415b      	adcs	r3, r3
 800befe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bf00:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800bf04:	1912      	adds	r2, r2, r4
 800bf06:	eb45 0303 	adc.w	r3, r5, r3
 800bf0a:	f04f 0000 	mov.w	r0, #0
 800bf0e:	f04f 0100 	mov.w	r1, #0
 800bf12:	00d9      	lsls	r1, r3, #3
 800bf14:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bf18:	00d0      	lsls	r0, r2, #3
 800bf1a:	4602      	mov	r2, r0
 800bf1c:	460b      	mov	r3, r1
 800bf1e:	1911      	adds	r1, r2, r4
 800bf20:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800bf24:	416b      	adcs	r3, r5
 800bf26:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bf2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf2e:	685b      	ldr	r3, [r3, #4]
 800bf30:	461a      	mov	r2, r3
 800bf32:	f04f 0300 	mov.w	r3, #0
 800bf36:	1891      	adds	r1, r2, r2
 800bf38:	6539      	str	r1, [r7, #80]	; 0x50
 800bf3a:	415b      	adcs	r3, r3
 800bf3c:	657b      	str	r3, [r7, #84]	; 0x54
 800bf3e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800bf42:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800bf46:	f7f4 ff07 	bl	8000d58 <__aeabi_uldivmod>
 800bf4a:	4602      	mov	r2, r0
 800bf4c:	460b      	mov	r3, r1
 800bf4e:	4b4a      	ldr	r3, [pc, #296]	; (800c078 <UART_SetConfig+0x3dc>)
 800bf50:	fba3 2302 	umull	r2, r3, r3, r2
 800bf54:	095b      	lsrs	r3, r3, #5
 800bf56:	011e      	lsls	r6, r3, #4
 800bf58:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bf5c:	461c      	mov	r4, r3
 800bf5e:	f04f 0500 	mov.w	r5, #0
 800bf62:	4622      	mov	r2, r4
 800bf64:	462b      	mov	r3, r5
 800bf66:	1891      	adds	r1, r2, r2
 800bf68:	64b9      	str	r1, [r7, #72]	; 0x48
 800bf6a:	415b      	adcs	r3, r3
 800bf6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bf6e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800bf72:	1912      	adds	r2, r2, r4
 800bf74:	eb45 0303 	adc.w	r3, r5, r3
 800bf78:	f04f 0000 	mov.w	r0, #0
 800bf7c:	f04f 0100 	mov.w	r1, #0
 800bf80:	00d9      	lsls	r1, r3, #3
 800bf82:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bf86:	00d0      	lsls	r0, r2, #3
 800bf88:	4602      	mov	r2, r0
 800bf8a:	460b      	mov	r3, r1
 800bf8c:	1911      	adds	r1, r2, r4
 800bf8e:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800bf92:	416b      	adcs	r3, r5
 800bf94:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800bf98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf9c:	685b      	ldr	r3, [r3, #4]
 800bf9e:	461a      	mov	r2, r3
 800bfa0:	f04f 0300 	mov.w	r3, #0
 800bfa4:	1891      	adds	r1, r2, r2
 800bfa6:	6439      	str	r1, [r7, #64]	; 0x40
 800bfa8:	415b      	adcs	r3, r3
 800bfaa:	647b      	str	r3, [r7, #68]	; 0x44
 800bfac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800bfb0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800bfb4:	f7f4 fed0 	bl	8000d58 <__aeabi_uldivmod>
 800bfb8:	4602      	mov	r2, r0
 800bfba:	460b      	mov	r3, r1
 800bfbc:	4b2e      	ldr	r3, [pc, #184]	; (800c078 <UART_SetConfig+0x3dc>)
 800bfbe:	fba3 1302 	umull	r1, r3, r3, r2
 800bfc2:	095b      	lsrs	r3, r3, #5
 800bfc4:	2164      	movs	r1, #100	; 0x64
 800bfc6:	fb01 f303 	mul.w	r3, r1, r3
 800bfca:	1ad3      	subs	r3, r2, r3
 800bfcc:	00db      	lsls	r3, r3, #3
 800bfce:	3332      	adds	r3, #50	; 0x32
 800bfd0:	4a29      	ldr	r2, [pc, #164]	; (800c078 <UART_SetConfig+0x3dc>)
 800bfd2:	fba2 2303 	umull	r2, r3, r2, r3
 800bfd6:	095b      	lsrs	r3, r3, #5
 800bfd8:	005b      	lsls	r3, r3, #1
 800bfda:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800bfde:	441e      	add	r6, r3
 800bfe0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	f04f 0100 	mov.w	r1, #0
 800bfea:	4602      	mov	r2, r0
 800bfec:	460b      	mov	r3, r1
 800bfee:	1894      	adds	r4, r2, r2
 800bff0:	63bc      	str	r4, [r7, #56]	; 0x38
 800bff2:	415b      	adcs	r3, r3
 800bff4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bff6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800bffa:	1812      	adds	r2, r2, r0
 800bffc:	eb41 0303 	adc.w	r3, r1, r3
 800c000:	f04f 0400 	mov.w	r4, #0
 800c004:	f04f 0500 	mov.w	r5, #0
 800c008:	00dd      	lsls	r5, r3, #3
 800c00a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c00e:	00d4      	lsls	r4, r2, #3
 800c010:	4622      	mov	r2, r4
 800c012:	462b      	mov	r3, r5
 800c014:	1814      	adds	r4, r2, r0
 800c016:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800c01a:	414b      	adcs	r3, r1
 800c01c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c024:	685b      	ldr	r3, [r3, #4]
 800c026:	461a      	mov	r2, r3
 800c028:	f04f 0300 	mov.w	r3, #0
 800c02c:	1891      	adds	r1, r2, r2
 800c02e:	6339      	str	r1, [r7, #48]	; 0x30
 800c030:	415b      	adcs	r3, r3
 800c032:	637b      	str	r3, [r7, #52]	; 0x34
 800c034:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800c038:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800c03c:	f7f4 fe8c 	bl	8000d58 <__aeabi_uldivmod>
 800c040:	4602      	mov	r2, r0
 800c042:	460b      	mov	r3, r1
 800c044:	4b0c      	ldr	r3, [pc, #48]	; (800c078 <UART_SetConfig+0x3dc>)
 800c046:	fba3 1302 	umull	r1, r3, r3, r2
 800c04a:	095b      	lsrs	r3, r3, #5
 800c04c:	2164      	movs	r1, #100	; 0x64
 800c04e:	fb01 f303 	mul.w	r3, r1, r3
 800c052:	1ad3      	subs	r3, r2, r3
 800c054:	00db      	lsls	r3, r3, #3
 800c056:	3332      	adds	r3, #50	; 0x32
 800c058:	4a07      	ldr	r2, [pc, #28]	; (800c078 <UART_SetConfig+0x3dc>)
 800c05a:	fba2 2303 	umull	r2, r3, r2, r3
 800c05e:	095b      	lsrs	r3, r3, #5
 800c060:	f003 0207 	and.w	r2, r3, #7
 800c064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	4432      	add	r2, r6
 800c06c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800c06e:	e1a6      	b.n	800c3be <UART_SetConfig+0x722>
 800c070:	40011000 	.word	0x40011000
 800c074:	40011400 	.word	0x40011400
 800c078:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c07c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c080:	681a      	ldr	r2, [r3, #0]
 800c082:	4bd1      	ldr	r3, [pc, #836]	; (800c3c8 <UART_SetConfig+0x72c>)
 800c084:	429a      	cmp	r2, r3
 800c086:	d006      	beq.n	800c096 <UART_SetConfig+0x3fa>
 800c088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c08c:	681a      	ldr	r2, [r3, #0]
 800c08e:	4bcf      	ldr	r3, [pc, #828]	; (800c3cc <UART_SetConfig+0x730>)
 800c090:	429a      	cmp	r2, r3
 800c092:	f040 80ca 	bne.w	800c22a <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 800c096:	f7fc fabf 	bl	8008618 <HAL_RCC_GetPCLK2Freq>
 800c09a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c09e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c0a2:	461c      	mov	r4, r3
 800c0a4:	f04f 0500 	mov.w	r5, #0
 800c0a8:	4622      	mov	r2, r4
 800c0aa:	462b      	mov	r3, r5
 800c0ac:	1891      	adds	r1, r2, r2
 800c0ae:	62b9      	str	r1, [r7, #40]	; 0x28
 800c0b0:	415b      	adcs	r3, r3
 800c0b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c0b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c0b8:	1912      	adds	r2, r2, r4
 800c0ba:	eb45 0303 	adc.w	r3, r5, r3
 800c0be:	f04f 0000 	mov.w	r0, #0
 800c0c2:	f04f 0100 	mov.w	r1, #0
 800c0c6:	00d9      	lsls	r1, r3, #3
 800c0c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c0cc:	00d0      	lsls	r0, r2, #3
 800c0ce:	4602      	mov	r2, r0
 800c0d0:	460b      	mov	r3, r1
 800c0d2:	eb12 0a04 	adds.w	sl, r2, r4
 800c0d6:	eb43 0b05 	adc.w	fp, r3, r5
 800c0da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0de:	685b      	ldr	r3, [r3, #4]
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	f04f 0100 	mov.w	r1, #0
 800c0e6:	f04f 0200 	mov.w	r2, #0
 800c0ea:	f04f 0300 	mov.w	r3, #0
 800c0ee:	008b      	lsls	r3, r1, #2
 800c0f0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c0f4:	0082      	lsls	r2, r0, #2
 800c0f6:	4650      	mov	r0, sl
 800c0f8:	4659      	mov	r1, fp
 800c0fa:	f7f4 fe2d 	bl	8000d58 <__aeabi_uldivmod>
 800c0fe:	4602      	mov	r2, r0
 800c100:	460b      	mov	r3, r1
 800c102:	4bb3      	ldr	r3, [pc, #716]	; (800c3d0 <UART_SetConfig+0x734>)
 800c104:	fba3 2302 	umull	r2, r3, r3, r2
 800c108:	095b      	lsrs	r3, r3, #5
 800c10a:	011e      	lsls	r6, r3, #4
 800c10c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c110:	4618      	mov	r0, r3
 800c112:	f04f 0100 	mov.w	r1, #0
 800c116:	4602      	mov	r2, r0
 800c118:	460b      	mov	r3, r1
 800c11a:	1894      	adds	r4, r2, r2
 800c11c:	623c      	str	r4, [r7, #32]
 800c11e:	415b      	adcs	r3, r3
 800c120:	627b      	str	r3, [r7, #36]	; 0x24
 800c122:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c126:	1812      	adds	r2, r2, r0
 800c128:	eb41 0303 	adc.w	r3, r1, r3
 800c12c:	f04f 0400 	mov.w	r4, #0
 800c130:	f04f 0500 	mov.w	r5, #0
 800c134:	00dd      	lsls	r5, r3, #3
 800c136:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c13a:	00d4      	lsls	r4, r2, #3
 800c13c:	4622      	mov	r2, r4
 800c13e:	462b      	mov	r3, r5
 800c140:	1814      	adds	r4, r2, r0
 800c142:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800c146:	414b      	adcs	r3, r1
 800c148:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c14c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c150:	685b      	ldr	r3, [r3, #4]
 800c152:	4618      	mov	r0, r3
 800c154:	f04f 0100 	mov.w	r1, #0
 800c158:	f04f 0200 	mov.w	r2, #0
 800c15c:	f04f 0300 	mov.w	r3, #0
 800c160:	008b      	lsls	r3, r1, #2
 800c162:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c166:	0082      	lsls	r2, r0, #2
 800c168:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800c16c:	f7f4 fdf4 	bl	8000d58 <__aeabi_uldivmod>
 800c170:	4602      	mov	r2, r0
 800c172:	460b      	mov	r3, r1
 800c174:	4b96      	ldr	r3, [pc, #600]	; (800c3d0 <UART_SetConfig+0x734>)
 800c176:	fba3 1302 	umull	r1, r3, r3, r2
 800c17a:	095b      	lsrs	r3, r3, #5
 800c17c:	2164      	movs	r1, #100	; 0x64
 800c17e:	fb01 f303 	mul.w	r3, r1, r3
 800c182:	1ad3      	subs	r3, r2, r3
 800c184:	011b      	lsls	r3, r3, #4
 800c186:	3332      	adds	r3, #50	; 0x32
 800c188:	4a91      	ldr	r2, [pc, #580]	; (800c3d0 <UART_SetConfig+0x734>)
 800c18a:	fba2 2303 	umull	r2, r3, r2, r3
 800c18e:	095b      	lsrs	r3, r3, #5
 800c190:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c194:	441e      	add	r6, r3
 800c196:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c19a:	4618      	mov	r0, r3
 800c19c:	f04f 0100 	mov.w	r1, #0
 800c1a0:	4602      	mov	r2, r0
 800c1a2:	460b      	mov	r3, r1
 800c1a4:	1894      	adds	r4, r2, r2
 800c1a6:	61bc      	str	r4, [r7, #24]
 800c1a8:	415b      	adcs	r3, r3
 800c1aa:	61fb      	str	r3, [r7, #28]
 800c1ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c1b0:	1812      	adds	r2, r2, r0
 800c1b2:	eb41 0303 	adc.w	r3, r1, r3
 800c1b6:	f04f 0400 	mov.w	r4, #0
 800c1ba:	f04f 0500 	mov.w	r5, #0
 800c1be:	00dd      	lsls	r5, r3, #3
 800c1c0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c1c4:	00d4      	lsls	r4, r2, #3
 800c1c6:	4622      	mov	r2, r4
 800c1c8:	462b      	mov	r3, r5
 800c1ca:	1814      	adds	r4, r2, r0
 800c1cc:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800c1d0:	414b      	adcs	r3, r1
 800c1d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c1d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1da:	685b      	ldr	r3, [r3, #4]
 800c1dc:	4618      	mov	r0, r3
 800c1de:	f04f 0100 	mov.w	r1, #0
 800c1e2:	f04f 0200 	mov.w	r2, #0
 800c1e6:	f04f 0300 	mov.w	r3, #0
 800c1ea:	008b      	lsls	r3, r1, #2
 800c1ec:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c1f0:	0082      	lsls	r2, r0, #2
 800c1f2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800c1f6:	f7f4 fdaf 	bl	8000d58 <__aeabi_uldivmod>
 800c1fa:	4602      	mov	r2, r0
 800c1fc:	460b      	mov	r3, r1
 800c1fe:	4b74      	ldr	r3, [pc, #464]	; (800c3d0 <UART_SetConfig+0x734>)
 800c200:	fba3 1302 	umull	r1, r3, r3, r2
 800c204:	095b      	lsrs	r3, r3, #5
 800c206:	2164      	movs	r1, #100	; 0x64
 800c208:	fb01 f303 	mul.w	r3, r1, r3
 800c20c:	1ad3      	subs	r3, r2, r3
 800c20e:	011b      	lsls	r3, r3, #4
 800c210:	3332      	adds	r3, #50	; 0x32
 800c212:	4a6f      	ldr	r2, [pc, #444]	; (800c3d0 <UART_SetConfig+0x734>)
 800c214:	fba2 2303 	umull	r2, r3, r2, r3
 800c218:	095b      	lsrs	r3, r3, #5
 800c21a:	f003 020f 	and.w	r2, r3, #15
 800c21e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	4432      	add	r2, r6
 800c226:	609a      	str	r2, [r3, #8]
 800c228:	e0c9      	b.n	800c3be <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 800c22a:	f7fc f9e1 	bl	80085f0 <HAL_RCC_GetPCLK1Freq>
 800c22e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c232:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c236:	461c      	mov	r4, r3
 800c238:	f04f 0500 	mov.w	r5, #0
 800c23c:	4622      	mov	r2, r4
 800c23e:	462b      	mov	r3, r5
 800c240:	1891      	adds	r1, r2, r2
 800c242:	6139      	str	r1, [r7, #16]
 800c244:	415b      	adcs	r3, r3
 800c246:	617b      	str	r3, [r7, #20]
 800c248:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c24c:	1912      	adds	r2, r2, r4
 800c24e:	eb45 0303 	adc.w	r3, r5, r3
 800c252:	f04f 0000 	mov.w	r0, #0
 800c256:	f04f 0100 	mov.w	r1, #0
 800c25a:	00d9      	lsls	r1, r3, #3
 800c25c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c260:	00d0      	lsls	r0, r2, #3
 800c262:	4602      	mov	r2, r0
 800c264:	460b      	mov	r3, r1
 800c266:	eb12 0804 	adds.w	r8, r2, r4
 800c26a:	eb43 0905 	adc.w	r9, r3, r5
 800c26e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c272:	685b      	ldr	r3, [r3, #4]
 800c274:	4618      	mov	r0, r3
 800c276:	f04f 0100 	mov.w	r1, #0
 800c27a:	f04f 0200 	mov.w	r2, #0
 800c27e:	f04f 0300 	mov.w	r3, #0
 800c282:	008b      	lsls	r3, r1, #2
 800c284:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c288:	0082      	lsls	r2, r0, #2
 800c28a:	4640      	mov	r0, r8
 800c28c:	4649      	mov	r1, r9
 800c28e:	f7f4 fd63 	bl	8000d58 <__aeabi_uldivmod>
 800c292:	4602      	mov	r2, r0
 800c294:	460b      	mov	r3, r1
 800c296:	4b4e      	ldr	r3, [pc, #312]	; (800c3d0 <UART_SetConfig+0x734>)
 800c298:	fba3 2302 	umull	r2, r3, r3, r2
 800c29c:	095b      	lsrs	r3, r3, #5
 800c29e:	011e      	lsls	r6, r3, #4
 800c2a0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	f04f 0100 	mov.w	r1, #0
 800c2aa:	4602      	mov	r2, r0
 800c2ac:	460b      	mov	r3, r1
 800c2ae:	1894      	adds	r4, r2, r2
 800c2b0:	60bc      	str	r4, [r7, #8]
 800c2b2:	415b      	adcs	r3, r3
 800c2b4:	60fb      	str	r3, [r7, #12]
 800c2b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c2ba:	1812      	adds	r2, r2, r0
 800c2bc:	eb41 0303 	adc.w	r3, r1, r3
 800c2c0:	f04f 0400 	mov.w	r4, #0
 800c2c4:	f04f 0500 	mov.w	r5, #0
 800c2c8:	00dd      	lsls	r5, r3, #3
 800c2ca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c2ce:	00d4      	lsls	r4, r2, #3
 800c2d0:	4622      	mov	r2, r4
 800c2d2:	462b      	mov	r3, r5
 800c2d4:	1814      	adds	r4, r2, r0
 800c2d6:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800c2da:	414b      	adcs	r3, r1
 800c2dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c2e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2e4:	685b      	ldr	r3, [r3, #4]
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	f04f 0100 	mov.w	r1, #0
 800c2ec:	f04f 0200 	mov.w	r2, #0
 800c2f0:	f04f 0300 	mov.w	r3, #0
 800c2f4:	008b      	lsls	r3, r1, #2
 800c2f6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c2fa:	0082      	lsls	r2, r0, #2
 800c2fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800c300:	f7f4 fd2a 	bl	8000d58 <__aeabi_uldivmod>
 800c304:	4602      	mov	r2, r0
 800c306:	460b      	mov	r3, r1
 800c308:	4b31      	ldr	r3, [pc, #196]	; (800c3d0 <UART_SetConfig+0x734>)
 800c30a:	fba3 1302 	umull	r1, r3, r3, r2
 800c30e:	095b      	lsrs	r3, r3, #5
 800c310:	2164      	movs	r1, #100	; 0x64
 800c312:	fb01 f303 	mul.w	r3, r1, r3
 800c316:	1ad3      	subs	r3, r2, r3
 800c318:	011b      	lsls	r3, r3, #4
 800c31a:	3332      	adds	r3, #50	; 0x32
 800c31c:	4a2c      	ldr	r2, [pc, #176]	; (800c3d0 <UART_SetConfig+0x734>)
 800c31e:	fba2 2303 	umull	r2, r3, r2, r3
 800c322:	095b      	lsrs	r3, r3, #5
 800c324:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c328:	441e      	add	r6, r3
 800c32a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c32e:	4618      	mov	r0, r3
 800c330:	f04f 0100 	mov.w	r1, #0
 800c334:	4602      	mov	r2, r0
 800c336:	460b      	mov	r3, r1
 800c338:	1894      	adds	r4, r2, r2
 800c33a:	603c      	str	r4, [r7, #0]
 800c33c:	415b      	adcs	r3, r3
 800c33e:	607b      	str	r3, [r7, #4]
 800c340:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c344:	1812      	adds	r2, r2, r0
 800c346:	eb41 0303 	adc.w	r3, r1, r3
 800c34a:	f04f 0400 	mov.w	r4, #0
 800c34e:	f04f 0500 	mov.w	r5, #0
 800c352:	00dd      	lsls	r5, r3, #3
 800c354:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c358:	00d4      	lsls	r4, r2, #3
 800c35a:	4622      	mov	r2, r4
 800c35c:	462b      	mov	r3, r5
 800c35e:	1814      	adds	r4, r2, r0
 800c360:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800c364:	414b      	adcs	r3, r1
 800c366:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c36a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c36e:	685b      	ldr	r3, [r3, #4]
 800c370:	4618      	mov	r0, r3
 800c372:	f04f 0100 	mov.w	r1, #0
 800c376:	f04f 0200 	mov.w	r2, #0
 800c37a:	f04f 0300 	mov.w	r3, #0
 800c37e:	008b      	lsls	r3, r1, #2
 800c380:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c384:	0082      	lsls	r2, r0, #2
 800c386:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800c38a:	f7f4 fce5 	bl	8000d58 <__aeabi_uldivmod>
 800c38e:	4602      	mov	r2, r0
 800c390:	460b      	mov	r3, r1
 800c392:	4b0f      	ldr	r3, [pc, #60]	; (800c3d0 <UART_SetConfig+0x734>)
 800c394:	fba3 1302 	umull	r1, r3, r3, r2
 800c398:	095b      	lsrs	r3, r3, #5
 800c39a:	2164      	movs	r1, #100	; 0x64
 800c39c:	fb01 f303 	mul.w	r3, r1, r3
 800c3a0:	1ad3      	subs	r3, r2, r3
 800c3a2:	011b      	lsls	r3, r3, #4
 800c3a4:	3332      	adds	r3, #50	; 0x32
 800c3a6:	4a0a      	ldr	r2, [pc, #40]	; (800c3d0 <UART_SetConfig+0x734>)
 800c3a8:	fba2 2303 	umull	r2, r3, r2, r3
 800c3ac:	095b      	lsrs	r3, r3, #5
 800c3ae:	f003 020f 	and.w	r2, r3, #15
 800c3b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	4432      	add	r2, r6
 800c3ba:	609a      	str	r2, [r3, #8]
}
 800c3bc:	e7ff      	b.n	800c3be <UART_SetConfig+0x722>
 800c3be:	bf00      	nop
 800c3c0:	37f4      	adds	r7, #244	; 0xf4
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3c8:	40011000 	.word	0x40011000
 800c3cc:	40011400 	.word	0x40011400
 800c3d0:	51eb851f 	.word	0x51eb851f

0800c3d4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800c3d4:	b084      	sub	sp, #16
 800c3d6:	b480      	push	{r7}
 800c3d8:	b085      	sub	sp, #20
 800c3da:	af00      	add	r7, sp, #0
 800c3dc:	6078      	str	r0, [r7, #4]
 800c3de:	f107 001c 	add.w	r0, r7, #28
 800c3e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800c3ea:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800c3ec:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800c3ee:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800c3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800c3f2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c3f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800c3f6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c3f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800c3fa:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800c3fe:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c400:	68fa      	ldr	r2, [r7, #12]
 800c402:	4313      	orrs	r3, r2
 800c404:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	685b      	ldr	r3, [r3, #4]
 800c40a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800c40e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c412:	68fa      	ldr	r2, [r7, #12]
 800c414:	431a      	orrs	r2, r3
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c41a:	2300      	movs	r3, #0
}
 800c41c:	4618      	mov	r0, r3
 800c41e:	3714      	adds	r7, #20
 800c420:	46bd      	mov	sp, r7
 800c422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c426:	b004      	add	sp, #16
 800c428:	4770      	bx	lr

0800c42a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800c42a:	b480      	push	{r7}
 800c42c:	b083      	sub	sp, #12
 800c42e:	af00      	add	r7, sp, #0
 800c430:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800c438:	4618      	mov	r0, r3
 800c43a:	370c      	adds	r7, #12
 800c43c:	46bd      	mov	sp, r7
 800c43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c442:	4770      	bx	lr

0800c444 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800c444:	b480      	push	{r7}
 800c446:	b083      	sub	sp, #12
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
 800c44c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	681a      	ldr	r2, [r3, #0]
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c458:	2300      	movs	r3, #0
}
 800c45a:	4618      	mov	r0, r3
 800c45c:	370c      	adds	r7, #12
 800c45e:	46bd      	mov	sp, r7
 800c460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c464:	4770      	bx	lr

0800c466 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800c466:	b580      	push	{r7, lr}
 800c468:	b082      	sub	sp, #8
 800c46a:	af00      	add	r7, sp, #0
 800c46c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	2203      	movs	r2, #3
 800c472:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800c474:	2002      	movs	r0, #2
 800c476:	f7fa f9d1 	bl	800681c <HAL_Delay>
  
  return HAL_OK;
 800c47a:	2300      	movs	r3, #0
}
 800c47c:	4618      	mov	r0, r3
 800c47e:	3708      	adds	r7, #8
 800c480:	46bd      	mov	sp, r7
 800c482:	bd80      	pop	{r7, pc}

0800c484 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800c484:	b480      	push	{r7}
 800c486:	b083      	sub	sp, #12
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	f003 0303 	and.w	r3, r3, #3
}
 800c494:	4618      	mov	r0, r3
 800c496:	370c      	adds	r7, #12
 800c498:	46bd      	mov	sp, r7
 800c49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49e:	4770      	bx	lr

0800c4a0 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800c4a0:	b480      	push	{r7}
 800c4a2:	b085      	sub	sp, #20
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
 800c4a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	681a      	ldr	r2, [r3, #0]
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c4b6:	683b      	ldr	r3, [r7, #0]
 800c4b8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c4be:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c4c0:	683b      	ldr	r3, [r7, #0]
 800c4c2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c4c4:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c4ca:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c4cc:	68fa      	ldr	r2, [r7, #12]
 800c4ce:	4313      	orrs	r3, r2
 800c4d0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	68db      	ldr	r3, [r3, #12]
 800c4d6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800c4da:	f023 030f 	bic.w	r3, r3, #15
 800c4de:	68fa      	ldr	r2, [r7, #12]
 800c4e0:	431a      	orrs	r2, r3
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800c4e6:	2300      	movs	r3, #0
}
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	3714      	adds	r7, #20
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f2:	4770      	bx	lr

0800c4f4 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800c4f4:	b480      	push	{r7}
 800c4f6:	b083      	sub	sp, #12
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	691b      	ldr	r3, [r3, #16]
 800c500:	b2db      	uxtb	r3, r3
}
 800c502:	4618      	mov	r0, r3
 800c504:	370c      	adds	r7, #12
 800c506:	46bd      	mov	sp, r7
 800c508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50c:	4770      	bx	lr

0800c50e <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800c50e:	b480      	push	{r7}
 800c510:	b085      	sub	sp, #20
 800c512:	af00      	add	r7, sp, #0
 800c514:	6078      	str	r0, [r7, #4]
 800c516:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	3314      	adds	r3, #20
 800c51c:	461a      	mov	r2, r3
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	4413      	add	r3, r2
 800c522:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	681b      	ldr	r3, [r3, #0]
}  
 800c528:	4618      	mov	r0, r3
 800c52a:	3714      	adds	r7, #20
 800c52c:	46bd      	mov	sp, r7
 800c52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c532:	4770      	bx	lr

0800c534 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800c534:	b480      	push	{r7}
 800c536:	b085      	sub	sp, #20
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
 800c53c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c53e:	2300      	movs	r3, #0
 800c540:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	681a      	ldr	r2, [r3, #0]
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	685a      	ldr	r2, [r3, #4]
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c55a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800c560:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800c566:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c568:	68fa      	ldr	r2, [r7, #12]
 800c56a:	4313      	orrs	r3, r2
 800c56c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c572:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	431a      	orrs	r2, r3
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800c57e:	2300      	movs	r3, #0

}
 800c580:	4618      	mov	r0, r3
 800c582:	3714      	adds	r7, #20
 800c584:	46bd      	mov	sp, r7
 800c586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58a:	4770      	bx	lr

0800c58c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b088      	sub	sp, #32
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
 800c594:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c59a:	2310      	movs	r3, #16
 800c59c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c59e:	2340      	movs	r3, #64	; 0x40
 800c5a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c5a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c5aa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c5ac:	f107 0308 	add.w	r3, r7, #8
 800c5b0:	4619      	mov	r1, r3
 800c5b2:	6878      	ldr	r0, [r7, #4]
 800c5b4:	f7ff ff74 	bl	800c4a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800c5b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c5bc:	2110      	movs	r1, #16
 800c5be:	6878      	ldr	r0, [r7, #4]
 800c5c0:	f000 fa40 	bl	800ca44 <SDMMC_GetCmdResp1>
 800c5c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c5c6:	69fb      	ldr	r3, [r7, #28]
}
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	3720      	adds	r7, #32
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	bd80      	pop	{r7, pc}

0800c5d0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b088      	sub	sp, #32
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
 800c5d8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c5de:	2311      	movs	r3, #17
 800c5e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c5e2:	2340      	movs	r3, #64	; 0x40
 800c5e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c5ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c5ee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c5f0:	f107 0308 	add.w	r3, r7, #8
 800c5f4:	4619      	mov	r1, r3
 800c5f6:	6878      	ldr	r0, [r7, #4]
 800c5f8:	f7ff ff52 	bl	800c4a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800c5fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800c600:	2111      	movs	r1, #17
 800c602:	6878      	ldr	r0, [r7, #4]
 800c604:	f000 fa1e 	bl	800ca44 <SDMMC_GetCmdResp1>
 800c608:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c60a:	69fb      	ldr	r3, [r7, #28]
}
 800c60c:	4618      	mov	r0, r3
 800c60e:	3720      	adds	r7, #32
 800c610:	46bd      	mov	sp, r7
 800c612:	bd80      	pop	{r7, pc}

0800c614 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b088      	sub	sp, #32
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
 800c61c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c622:	2312      	movs	r3, #18
 800c624:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c626:	2340      	movs	r3, #64	; 0x40
 800c628:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c62a:	2300      	movs	r3, #0
 800c62c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c62e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c632:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c634:	f107 0308 	add.w	r3, r7, #8
 800c638:	4619      	mov	r1, r3
 800c63a:	6878      	ldr	r0, [r7, #4]
 800c63c:	f7ff ff30 	bl	800c4a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800c640:	f241 3288 	movw	r2, #5000	; 0x1388
 800c644:	2112      	movs	r1, #18
 800c646:	6878      	ldr	r0, [r7, #4]
 800c648:	f000 f9fc 	bl	800ca44 <SDMMC_GetCmdResp1>
 800c64c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c64e:	69fb      	ldr	r3, [r7, #28]
}
 800c650:	4618      	mov	r0, r3
 800c652:	3720      	adds	r7, #32
 800c654:	46bd      	mov	sp, r7
 800c656:	bd80      	pop	{r7, pc}

0800c658 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b088      	sub	sp, #32
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
 800c660:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c666:	2318      	movs	r3, #24
 800c668:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c66a:	2340      	movs	r3, #64	; 0x40
 800c66c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c66e:	2300      	movs	r3, #0
 800c670:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c672:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c676:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c678:	f107 0308 	add.w	r3, r7, #8
 800c67c:	4619      	mov	r1, r3
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	f7ff ff0e 	bl	800c4a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800c684:	f241 3288 	movw	r2, #5000	; 0x1388
 800c688:	2118      	movs	r1, #24
 800c68a:	6878      	ldr	r0, [r7, #4]
 800c68c:	f000 f9da 	bl	800ca44 <SDMMC_GetCmdResp1>
 800c690:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c692:	69fb      	ldr	r3, [r7, #28]
}
 800c694:	4618      	mov	r0, r3
 800c696:	3720      	adds	r7, #32
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}

0800c69c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b088      	sub	sp, #32
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
 800c6a4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800c6aa:	2319      	movs	r3, #25
 800c6ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c6ae:	2340      	movs	r3, #64	; 0x40
 800c6b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c6b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c6ba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c6bc:	f107 0308 	add.w	r3, r7, #8
 800c6c0:	4619      	mov	r1, r3
 800c6c2:	6878      	ldr	r0, [r7, #4]
 800c6c4:	f7ff feec 	bl	800c4a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800c6c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c6cc:	2119      	movs	r1, #25
 800c6ce:	6878      	ldr	r0, [r7, #4]
 800c6d0:	f000 f9b8 	bl	800ca44 <SDMMC_GetCmdResp1>
 800c6d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c6d6:	69fb      	ldr	r3, [r7, #28]
}
 800c6d8:	4618      	mov	r0, r3
 800c6da:	3720      	adds	r7, #32
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	bd80      	pop	{r7, pc}

0800c6e0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b088      	sub	sp, #32
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c6ec:	230c      	movs	r3, #12
 800c6ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c6f0:	2340      	movs	r3, #64	; 0x40
 800c6f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c6f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c6fc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c6fe:	f107 0308 	add.w	r3, r7, #8
 800c702:	4619      	mov	r1, r3
 800c704:	6878      	ldr	r0, [r7, #4]
 800c706:	f7ff fecb 	bl	800c4a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800c70a:	4a05      	ldr	r2, [pc, #20]	; (800c720 <SDMMC_CmdStopTransfer+0x40>)
 800c70c:	210c      	movs	r1, #12
 800c70e:	6878      	ldr	r0, [r7, #4]
 800c710:	f000 f998 	bl	800ca44 <SDMMC_GetCmdResp1>
 800c714:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c716:	69fb      	ldr	r3, [r7, #28]
}
 800c718:	4618      	mov	r0, r3
 800c71a:	3720      	adds	r7, #32
 800c71c:	46bd      	mov	sp, r7
 800c71e:	bd80      	pop	{r7, pc}
 800c720:	05f5e100 	.word	0x05f5e100

0800c724 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b08a      	sub	sp, #40	; 0x28
 800c728:	af00      	add	r7, sp, #0
 800c72a:	60f8      	str	r0, [r7, #12]
 800c72c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c730:	683b      	ldr	r3, [r7, #0]
 800c732:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c734:	2307      	movs	r3, #7
 800c736:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c738:	2340      	movs	r3, #64	; 0x40
 800c73a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c73c:	2300      	movs	r3, #0
 800c73e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c740:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c744:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c746:	f107 0310 	add.w	r3, r7, #16
 800c74a:	4619      	mov	r1, r3
 800c74c:	68f8      	ldr	r0, [r7, #12]
 800c74e:	f7ff fea7 	bl	800c4a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800c752:	f241 3288 	movw	r2, #5000	; 0x1388
 800c756:	2107      	movs	r1, #7
 800c758:	68f8      	ldr	r0, [r7, #12]
 800c75a:	f000 f973 	bl	800ca44 <SDMMC_GetCmdResp1>
 800c75e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800c760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c762:	4618      	mov	r0, r3
 800c764:	3728      	adds	r7, #40	; 0x28
 800c766:	46bd      	mov	sp, r7
 800c768:	bd80      	pop	{r7, pc}

0800c76a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800c76a:	b580      	push	{r7, lr}
 800c76c:	b088      	sub	sp, #32
 800c76e:	af00      	add	r7, sp, #0
 800c770:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800c772:	2300      	movs	r3, #0
 800c774:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c776:	2300      	movs	r3, #0
 800c778:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800c77a:	2300      	movs	r3, #0
 800c77c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c77e:	2300      	movs	r3, #0
 800c780:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c782:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c786:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c788:	f107 0308 	add.w	r3, r7, #8
 800c78c:	4619      	mov	r1, r3
 800c78e:	6878      	ldr	r0, [r7, #4]
 800c790:	f7ff fe86 	bl	800c4a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800c794:	6878      	ldr	r0, [r7, #4]
 800c796:	f000 f92d 	bl	800c9f4 <SDMMC_GetCmdError>
 800c79a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c79c:	69fb      	ldr	r3, [r7, #28]
}
 800c79e:	4618      	mov	r0, r3
 800c7a0:	3720      	adds	r7, #32
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	bd80      	pop	{r7, pc}

0800c7a6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800c7a6:	b580      	push	{r7, lr}
 800c7a8:	b088      	sub	sp, #32
 800c7aa:	af00      	add	r7, sp, #0
 800c7ac:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c7ae:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800c7b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c7b4:	2308      	movs	r3, #8
 800c7b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c7b8:	2340      	movs	r3, #64	; 0x40
 800c7ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c7bc:	2300      	movs	r3, #0
 800c7be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c7c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c7c4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c7c6:	f107 0308 	add.w	r3, r7, #8
 800c7ca:	4619      	mov	r1, r3
 800c7cc:	6878      	ldr	r0, [r7, #4]
 800c7ce:	f7ff fe67 	bl	800c4a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800c7d2:	6878      	ldr	r0, [r7, #4]
 800c7d4:	f000 fb16 	bl	800ce04 <SDMMC_GetCmdResp7>
 800c7d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c7da:	69fb      	ldr	r3, [r7, #28]
}
 800c7dc:	4618      	mov	r0, r3
 800c7de:	3720      	adds	r7, #32
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	bd80      	pop	{r7, pc}

0800c7e4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b088      	sub	sp, #32
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
 800c7ec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c7ee:	683b      	ldr	r3, [r7, #0]
 800c7f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c7f2:	2337      	movs	r3, #55	; 0x37
 800c7f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c7f6:	2340      	movs	r3, #64	; 0x40
 800c7f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c7fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c802:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c804:	f107 0308 	add.w	r3, r7, #8
 800c808:	4619      	mov	r1, r3
 800c80a:	6878      	ldr	r0, [r7, #4]
 800c80c:	f7ff fe48 	bl	800c4a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800c810:	f241 3288 	movw	r2, #5000	; 0x1388
 800c814:	2137      	movs	r1, #55	; 0x37
 800c816:	6878      	ldr	r0, [r7, #4]
 800c818:	f000 f914 	bl	800ca44 <SDMMC_GetCmdResp1>
 800c81c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c81e:	69fb      	ldr	r3, [r7, #28]
}
 800c820:	4618      	mov	r0, r3
 800c822:	3720      	adds	r7, #32
 800c824:	46bd      	mov	sp, r7
 800c826:	bd80      	pop	{r7, pc}

0800c828 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b088      	sub	sp, #32
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
 800c830:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c838:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c83c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c83e:	2329      	movs	r3, #41	; 0x29
 800c840:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c842:	2340      	movs	r3, #64	; 0x40
 800c844:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c846:	2300      	movs	r3, #0
 800c848:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c84a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c84e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c850:	f107 0308 	add.w	r3, r7, #8
 800c854:	4619      	mov	r1, r3
 800c856:	6878      	ldr	r0, [r7, #4]
 800c858:	f7ff fe22 	bl	800c4a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800c85c:	6878      	ldr	r0, [r7, #4]
 800c85e:	f000 fa23 	bl	800cca8 <SDMMC_GetCmdResp3>
 800c862:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c864:	69fb      	ldr	r3, [r7, #28]
}
 800c866:	4618      	mov	r0, r3
 800c868:	3720      	adds	r7, #32
 800c86a:	46bd      	mov	sp, r7
 800c86c:	bd80      	pop	{r7, pc}

0800c86e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800c86e:	b580      	push	{r7, lr}
 800c870:	b088      	sub	sp, #32
 800c872:	af00      	add	r7, sp, #0
 800c874:	6078      	str	r0, [r7, #4]
 800c876:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800c87c:	2306      	movs	r3, #6
 800c87e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c880:	2340      	movs	r3, #64	; 0x40
 800c882:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c884:	2300      	movs	r3, #0
 800c886:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c888:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c88c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c88e:	f107 0308 	add.w	r3, r7, #8
 800c892:	4619      	mov	r1, r3
 800c894:	6878      	ldr	r0, [r7, #4]
 800c896:	f7ff fe03 	bl	800c4a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800c89a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c89e:	2106      	movs	r1, #6
 800c8a0:	6878      	ldr	r0, [r7, #4]
 800c8a2:	f000 f8cf 	bl	800ca44 <SDMMC_GetCmdResp1>
 800c8a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c8a8:	69fb      	ldr	r3, [r7, #28]
}
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	3720      	adds	r7, #32
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	bd80      	pop	{r7, pc}

0800c8b2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800c8b2:	b580      	push	{r7, lr}
 800c8b4:	b088      	sub	sp, #32
 800c8b6:	af00      	add	r7, sp, #0
 800c8b8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c8be:	2333      	movs	r3, #51	; 0x33
 800c8c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c8c2:	2340      	movs	r3, #64	; 0x40
 800c8c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c8ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c8ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c8d0:	f107 0308 	add.w	r3, r7, #8
 800c8d4:	4619      	mov	r1, r3
 800c8d6:	6878      	ldr	r0, [r7, #4]
 800c8d8:	f7ff fde2 	bl	800c4a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800c8dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800c8e0:	2133      	movs	r1, #51	; 0x33
 800c8e2:	6878      	ldr	r0, [r7, #4]
 800c8e4:	f000 f8ae 	bl	800ca44 <SDMMC_GetCmdResp1>
 800c8e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c8ea:	69fb      	ldr	r3, [r7, #28]
}
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	3720      	adds	r7, #32
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	bd80      	pop	{r7, pc}

0800c8f4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b088      	sub	sp, #32
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c900:	2302      	movs	r3, #2
 800c902:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800c904:	23c0      	movs	r3, #192	; 0xc0
 800c906:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c908:	2300      	movs	r3, #0
 800c90a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c90c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c910:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c912:	f107 0308 	add.w	r3, r7, #8
 800c916:	4619      	mov	r1, r3
 800c918:	6878      	ldr	r0, [r7, #4]
 800c91a:	f7ff fdc1 	bl	800c4a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800c91e:	6878      	ldr	r0, [r7, #4]
 800c920:	f000 f97c 	bl	800cc1c <SDMMC_GetCmdResp2>
 800c924:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c926:	69fb      	ldr	r3, [r7, #28]
}
 800c928:	4618      	mov	r0, r3
 800c92a:	3720      	adds	r7, #32
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bd80      	pop	{r7, pc}

0800c930 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b088      	sub	sp, #32
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
 800c938:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c93e:	2309      	movs	r3, #9
 800c940:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800c942:	23c0      	movs	r3, #192	; 0xc0
 800c944:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c946:	2300      	movs	r3, #0
 800c948:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c94a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c94e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c950:	f107 0308 	add.w	r3, r7, #8
 800c954:	4619      	mov	r1, r3
 800c956:	6878      	ldr	r0, [r7, #4]
 800c958:	f7ff fda2 	bl	800c4a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800c95c:	6878      	ldr	r0, [r7, #4]
 800c95e:	f000 f95d 	bl	800cc1c <SDMMC_GetCmdResp2>
 800c962:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c964:	69fb      	ldr	r3, [r7, #28]
}
 800c966:	4618      	mov	r0, r3
 800c968:	3720      	adds	r7, #32
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bd80      	pop	{r7, pc}

0800c96e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800c96e:	b580      	push	{r7, lr}
 800c970:	b088      	sub	sp, #32
 800c972:	af00      	add	r7, sp, #0
 800c974:	6078      	str	r0, [r7, #4]
 800c976:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c978:	2300      	movs	r3, #0
 800c97a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c97c:	2303      	movs	r3, #3
 800c97e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c980:	2340      	movs	r3, #64	; 0x40
 800c982:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c984:	2300      	movs	r3, #0
 800c986:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c988:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c98c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c98e:	f107 0308 	add.w	r3, r7, #8
 800c992:	4619      	mov	r1, r3
 800c994:	6878      	ldr	r0, [r7, #4]
 800c996:	f7ff fd83 	bl	800c4a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c99a:	683a      	ldr	r2, [r7, #0]
 800c99c:	2103      	movs	r1, #3
 800c99e:	6878      	ldr	r0, [r7, #4]
 800c9a0:	f000 f9bc 	bl	800cd1c <SDMMC_GetCmdResp6>
 800c9a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c9a6:	69fb      	ldr	r3, [r7, #28]
}
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	3720      	adds	r7, #32
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	bd80      	pop	{r7, pc}

0800c9b0 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b088      	sub	sp, #32
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
 800c9b8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c9be:	230d      	movs	r3, #13
 800c9c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c9c2:	2340      	movs	r3, #64	; 0x40
 800c9c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c9ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c9ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c9d0:	f107 0308 	add.w	r3, r7, #8
 800c9d4:	4619      	mov	r1, r3
 800c9d6:	6878      	ldr	r0, [r7, #4]
 800c9d8:	f7ff fd62 	bl	800c4a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800c9dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800c9e0:	210d      	movs	r1, #13
 800c9e2:	6878      	ldr	r0, [r7, #4]
 800c9e4:	f000 f82e 	bl	800ca44 <SDMMC_GetCmdResp1>
 800c9e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c9ea:	69fb      	ldr	r3, [r7, #28]
}
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	3720      	adds	r7, #32
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	bd80      	pop	{r7, pc}

0800c9f4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800c9f4:	b490      	push	{r4, r7}
 800c9f6:	b082      	sub	sp, #8
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c9fc:	4b0f      	ldr	r3, [pc, #60]	; (800ca3c <SDMMC_GetCmdError+0x48>)
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	4a0f      	ldr	r2, [pc, #60]	; (800ca40 <SDMMC_GetCmdError+0x4c>)
 800ca02:	fba2 2303 	umull	r2, r3, r2, r3
 800ca06:	0a5b      	lsrs	r3, r3, #9
 800ca08:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca0c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ca10:	4623      	mov	r3, r4
 800ca12:	1e5c      	subs	r4, r3, #1
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d102      	bne.n	800ca1e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ca18:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ca1c:	e009      	b.n	800ca32 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d0f2      	beq.n	800ca10 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	22c5      	movs	r2, #197	; 0xc5
 800ca2e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800ca30:	2300      	movs	r3, #0
}
 800ca32:	4618      	mov	r0, r3
 800ca34:	3708      	adds	r7, #8
 800ca36:	46bd      	mov	sp, r7
 800ca38:	bc90      	pop	{r4, r7}
 800ca3a:	4770      	bx	lr
 800ca3c:	20000014 	.word	0x20000014
 800ca40:	10624dd3 	.word	0x10624dd3

0800ca44 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ca44:	b590      	push	{r4, r7, lr}
 800ca46:	b087      	sub	sp, #28
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	60f8      	str	r0, [r7, #12]
 800ca4c:	460b      	mov	r3, r1
 800ca4e:	607a      	str	r2, [r7, #4]
 800ca50:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ca52:	4b6f      	ldr	r3, [pc, #444]	; (800cc10 <SDMMC_GetCmdResp1+0x1cc>)
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	4a6f      	ldr	r2, [pc, #444]	; (800cc14 <SDMMC_GetCmdResp1+0x1d0>)
 800ca58:	fba2 2303 	umull	r2, r3, r2, r3
 800ca5c:	0a5b      	lsrs	r3, r3, #9
 800ca5e:	687a      	ldr	r2, [r7, #4]
 800ca60:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ca64:	4623      	mov	r3, r4
 800ca66:	1e5c      	subs	r4, r3, #1
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d102      	bne.n	800ca72 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ca6c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ca70:	e0c9      	b.n	800cc06 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca76:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ca78:	697b      	ldr	r3, [r7, #20]
 800ca7a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d0f0      	beq.n	800ca64 <SDMMC_GetCmdResp1+0x20>
 800ca82:	697b      	ldr	r3, [r7, #20]
 800ca84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d1eb      	bne.n	800ca64 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca90:	f003 0304 	and.w	r3, r3, #4
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d004      	beq.n	800caa2 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	2204      	movs	r2, #4
 800ca9c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ca9e:	2304      	movs	r3, #4
 800caa0:	e0b1      	b.n	800cc06 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800caa6:	f003 0301 	and.w	r3, r3, #1
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d004      	beq.n	800cab8 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	2201      	movs	r2, #1
 800cab2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cab4:	2301      	movs	r3, #1
 800cab6:	e0a6      	b.n	800cc06 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	22c5      	movs	r2, #197	; 0xc5
 800cabc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800cabe:	68f8      	ldr	r0, [r7, #12]
 800cac0:	f7ff fd18 	bl	800c4f4 <SDIO_GetCommandResponse>
 800cac4:	4603      	mov	r3, r0
 800cac6:	461a      	mov	r2, r3
 800cac8:	7afb      	ldrb	r3, [r7, #11]
 800caca:	4293      	cmp	r3, r2
 800cacc:	d001      	beq.n	800cad2 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cace:	2301      	movs	r3, #1
 800cad0:	e099      	b.n	800cc06 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800cad2:	2100      	movs	r1, #0
 800cad4:	68f8      	ldr	r0, [r7, #12]
 800cad6:	f7ff fd1a 	bl	800c50e <SDIO_GetResponse>
 800cada:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800cadc:	693a      	ldr	r2, [r7, #16]
 800cade:	4b4e      	ldr	r3, [pc, #312]	; (800cc18 <SDMMC_GetCmdResp1+0x1d4>)
 800cae0:	4013      	ands	r3, r2
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d101      	bne.n	800caea <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800cae6:	2300      	movs	r3, #0
 800cae8:	e08d      	b.n	800cc06 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800caea:	693b      	ldr	r3, [r7, #16]
 800caec:	2b00      	cmp	r3, #0
 800caee:	da02      	bge.n	800caf6 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800caf0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800caf4:	e087      	b.n	800cc06 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800caf6:	693b      	ldr	r3, [r7, #16]
 800caf8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d001      	beq.n	800cb04 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800cb00:	2340      	movs	r3, #64	; 0x40
 800cb02:	e080      	b.n	800cc06 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800cb04:	693b      	ldr	r3, [r7, #16]
 800cb06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d001      	beq.n	800cb12 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800cb0e:	2380      	movs	r3, #128	; 0x80
 800cb10:	e079      	b.n	800cc06 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800cb12:	693b      	ldr	r3, [r7, #16]
 800cb14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d002      	beq.n	800cb22 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800cb1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cb20:	e071      	b.n	800cc06 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800cb22:	693b      	ldr	r3, [r7, #16]
 800cb24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d002      	beq.n	800cb32 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800cb2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cb30:	e069      	b.n	800cc06 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800cb32:	693b      	ldr	r3, [r7, #16]
 800cb34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d002      	beq.n	800cb42 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800cb3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb40:	e061      	b.n	800cc06 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800cb42:	693b      	ldr	r3, [r7, #16]
 800cb44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d002      	beq.n	800cb52 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800cb4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cb50:	e059      	b.n	800cc06 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800cb52:	693b      	ldr	r3, [r7, #16]
 800cb54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d002      	beq.n	800cb62 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cb5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cb60:	e051      	b.n	800cc06 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800cb62:	693b      	ldr	r3, [r7, #16]
 800cb64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d002      	beq.n	800cb72 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cb6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cb70:	e049      	b.n	800cc06 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800cb72:	693b      	ldr	r3, [r7, #16]
 800cb74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d002      	beq.n	800cb82 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800cb7c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cb80:	e041      	b.n	800cc06 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800cb82:	693b      	ldr	r3, [r7, #16]
 800cb84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d002      	beq.n	800cb92 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800cb8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cb90:	e039      	b.n	800cc06 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800cb92:	693b      	ldr	r3, [r7, #16]
 800cb94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d002      	beq.n	800cba2 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800cb9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800cba0:	e031      	b.n	800cc06 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800cba2:	693b      	ldr	r3, [r7, #16]
 800cba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d002      	beq.n	800cbb2 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800cbac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800cbb0:	e029      	b.n	800cc06 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800cbb2:	693b      	ldr	r3, [r7, #16]
 800cbb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d002      	beq.n	800cbc2 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800cbbc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800cbc0:	e021      	b.n	800cc06 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800cbc2:	693b      	ldr	r3, [r7, #16]
 800cbc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d002      	beq.n	800cbd2 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800cbcc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800cbd0:	e019      	b.n	800cc06 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800cbd2:	693b      	ldr	r3, [r7, #16]
 800cbd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d002      	beq.n	800cbe2 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800cbdc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800cbe0:	e011      	b.n	800cc06 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800cbe2:	693b      	ldr	r3, [r7, #16]
 800cbe4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d002      	beq.n	800cbf2 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800cbec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800cbf0:	e009      	b.n	800cc06 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800cbf2:	693b      	ldr	r3, [r7, #16]
 800cbf4:	f003 0308 	and.w	r3, r3, #8
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d002      	beq.n	800cc02 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800cbfc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800cc00:	e001      	b.n	800cc06 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cc02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800cc06:	4618      	mov	r0, r3
 800cc08:	371c      	adds	r7, #28
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	bd90      	pop	{r4, r7, pc}
 800cc0e:	bf00      	nop
 800cc10:	20000014 	.word	0x20000014
 800cc14:	10624dd3 	.word	0x10624dd3
 800cc18:	fdffe008 	.word	0xfdffe008

0800cc1c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800cc1c:	b490      	push	{r4, r7}
 800cc1e:	b084      	sub	sp, #16
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cc24:	4b1e      	ldr	r3, [pc, #120]	; (800cca0 <SDMMC_GetCmdResp2+0x84>)
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	4a1e      	ldr	r2, [pc, #120]	; (800cca4 <SDMMC_GetCmdResp2+0x88>)
 800cc2a:	fba2 2303 	umull	r2, r3, r2, r3
 800cc2e:	0a5b      	lsrs	r3, r3, #9
 800cc30:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc34:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800cc38:	4623      	mov	r3, r4
 800cc3a:	1e5c      	subs	r4, r3, #1
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d102      	bne.n	800cc46 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cc40:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cc44:	e026      	b.n	800cc94 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc4a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d0f0      	beq.n	800cc38 <SDMMC_GetCmdResp2+0x1c>
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d1eb      	bne.n	800cc38 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc64:	f003 0304 	and.w	r3, r3, #4
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d004      	beq.n	800cc76 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	2204      	movs	r2, #4
 800cc70:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cc72:	2304      	movs	r3, #4
 800cc74:	e00e      	b.n	800cc94 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc7a:	f003 0301 	and.w	r3, r3, #1
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d004      	beq.n	800cc8c <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	2201      	movs	r2, #1
 800cc86:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cc88:	2301      	movs	r3, #1
 800cc8a:	e003      	b.n	800cc94 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	22c5      	movs	r2, #197	; 0xc5
 800cc90:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800cc92:	2300      	movs	r3, #0
}
 800cc94:	4618      	mov	r0, r3
 800cc96:	3710      	adds	r7, #16
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	bc90      	pop	{r4, r7}
 800cc9c:	4770      	bx	lr
 800cc9e:	bf00      	nop
 800cca0:	20000014 	.word	0x20000014
 800cca4:	10624dd3 	.word	0x10624dd3

0800cca8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800cca8:	b490      	push	{r4, r7}
 800ccaa:	b084      	sub	sp, #16
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ccb0:	4b18      	ldr	r3, [pc, #96]	; (800cd14 <SDMMC_GetCmdResp3+0x6c>)
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	4a18      	ldr	r2, [pc, #96]	; (800cd18 <SDMMC_GetCmdResp3+0x70>)
 800ccb6:	fba2 2303 	umull	r2, r3, r2, r3
 800ccba:	0a5b      	lsrs	r3, r3, #9
 800ccbc:	f241 3288 	movw	r2, #5000	; 0x1388
 800ccc0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ccc4:	4623      	mov	r3, r4
 800ccc6:	1e5c      	subs	r4, r3, #1
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d102      	bne.n	800ccd2 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cccc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ccd0:	e01b      	b.n	800cd0a <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccd6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d0f0      	beq.n	800ccc4 <SDMMC_GetCmdResp3+0x1c>
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d1eb      	bne.n	800ccc4 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccf0:	f003 0304 	and.w	r3, r3, #4
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d004      	beq.n	800cd02 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	2204      	movs	r2, #4
 800ccfc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ccfe:	2304      	movs	r3, #4
 800cd00:	e003      	b.n	800cd0a <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	22c5      	movs	r2, #197	; 0xc5
 800cd06:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800cd08:	2300      	movs	r3, #0
}
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	3710      	adds	r7, #16
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	bc90      	pop	{r4, r7}
 800cd12:	4770      	bx	lr
 800cd14:	20000014 	.word	0x20000014
 800cd18:	10624dd3 	.word	0x10624dd3

0800cd1c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800cd1c:	b590      	push	{r4, r7, lr}
 800cd1e:	b087      	sub	sp, #28
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	60f8      	str	r0, [r7, #12]
 800cd24:	460b      	mov	r3, r1
 800cd26:	607a      	str	r2, [r7, #4]
 800cd28:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cd2a:	4b34      	ldr	r3, [pc, #208]	; (800cdfc <SDMMC_GetCmdResp6+0xe0>)
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	4a34      	ldr	r2, [pc, #208]	; (800ce00 <SDMMC_GetCmdResp6+0xe4>)
 800cd30:	fba2 2303 	umull	r2, r3, r2, r3
 800cd34:	0a5b      	lsrs	r3, r3, #9
 800cd36:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd3a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800cd3e:	4623      	mov	r3, r4
 800cd40:	1e5c      	subs	r4, r3, #1
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d102      	bne.n	800cd4c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cd46:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cd4a:	e052      	b.n	800cdf2 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd50:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cd52:	697b      	ldr	r3, [r7, #20]
 800cd54:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d0f0      	beq.n	800cd3e <SDMMC_GetCmdResp6+0x22>
 800cd5c:	697b      	ldr	r3, [r7, #20]
 800cd5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d1eb      	bne.n	800cd3e <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd6a:	f003 0304 	and.w	r3, r3, #4
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d004      	beq.n	800cd7c <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	2204      	movs	r2, #4
 800cd76:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cd78:	2304      	movs	r3, #4
 800cd7a:	e03a      	b.n	800cdf2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd80:	f003 0301 	and.w	r3, r3, #1
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d004      	beq.n	800cd92 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	2201      	movs	r2, #1
 800cd8c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cd8e:	2301      	movs	r3, #1
 800cd90:	e02f      	b.n	800cdf2 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800cd92:	68f8      	ldr	r0, [r7, #12]
 800cd94:	f7ff fbae 	bl	800c4f4 <SDIO_GetCommandResponse>
 800cd98:	4603      	mov	r3, r0
 800cd9a:	461a      	mov	r2, r3
 800cd9c:	7afb      	ldrb	r3, [r7, #11]
 800cd9e:	4293      	cmp	r3, r2
 800cda0:	d001      	beq.n	800cda6 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cda2:	2301      	movs	r3, #1
 800cda4:	e025      	b.n	800cdf2 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	22c5      	movs	r2, #197	; 0xc5
 800cdaa:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800cdac:	2100      	movs	r1, #0
 800cdae:	68f8      	ldr	r0, [r7, #12]
 800cdb0:	f7ff fbad 	bl	800c50e <SDIO_GetResponse>
 800cdb4:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800cdb6:	693b      	ldr	r3, [r7, #16]
 800cdb8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d106      	bne.n	800cdce <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800cdc0:	693b      	ldr	r3, [r7, #16]
 800cdc2:	0c1b      	lsrs	r3, r3, #16
 800cdc4:	b29a      	uxth	r2, r3
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800cdca:	2300      	movs	r3, #0
 800cdcc:	e011      	b.n	800cdf2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800cdce:	693b      	ldr	r3, [r7, #16]
 800cdd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d002      	beq.n	800cdde <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cdd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cddc:	e009      	b.n	800cdf2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800cdde:	693b      	ldr	r3, [r7, #16]
 800cde0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d002      	beq.n	800cdee <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cde8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cdec:	e001      	b.n	800cdf2 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cdee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	371c      	adds	r7, #28
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	bd90      	pop	{r4, r7, pc}
 800cdfa:	bf00      	nop
 800cdfc:	20000014 	.word	0x20000014
 800ce00:	10624dd3 	.word	0x10624dd3

0800ce04 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800ce04:	b490      	push	{r4, r7}
 800ce06:	b084      	sub	sp, #16
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ce0c:	4b21      	ldr	r3, [pc, #132]	; (800ce94 <SDMMC_GetCmdResp7+0x90>)
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	4a21      	ldr	r2, [pc, #132]	; (800ce98 <SDMMC_GetCmdResp7+0x94>)
 800ce12:	fba2 2303 	umull	r2, r3, r2, r3
 800ce16:	0a5b      	lsrs	r3, r3, #9
 800ce18:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce1c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ce20:	4623      	mov	r3, r4
 800ce22:	1e5c      	subs	r4, r3, #1
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d102      	bne.n	800ce2e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ce28:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ce2c:	e02c      	b.n	800ce88 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce32:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d0f0      	beq.n	800ce20 <SDMMC_GetCmdResp7+0x1c>
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d1eb      	bne.n	800ce20 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce4c:	f003 0304 	and.w	r3, r3, #4
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d004      	beq.n	800ce5e <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2204      	movs	r2, #4
 800ce58:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ce5a:	2304      	movs	r3, #4
 800ce5c:	e014      	b.n	800ce88 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce62:	f003 0301 	and.w	r3, r3, #1
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d004      	beq.n	800ce74 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	2201      	movs	r2, #1
 800ce6e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ce70:	2301      	movs	r3, #1
 800ce72:	e009      	b.n	800ce88 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d002      	beq.n	800ce86 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	2240      	movs	r2, #64	; 0x40
 800ce84:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ce86:	2300      	movs	r3, #0
  
}
 800ce88:	4618      	mov	r0, r3
 800ce8a:	3710      	adds	r7, #16
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	bc90      	pop	{r4, r7}
 800ce90:	4770      	bx	lr
 800ce92:	bf00      	nop
 800ce94:	20000014 	.word	0x20000014
 800ce98:	10624dd3 	.word	0x10624dd3

0800ce9c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800cea0:	4904      	ldr	r1, [pc, #16]	; (800ceb4 <MX_FATFS_Init+0x18>)
 800cea2:	4805      	ldr	r0, [pc, #20]	; (800ceb8 <MX_FATFS_Init+0x1c>)
 800cea4:	f003 fade 	bl	8010464 <FATFS_LinkDriver>
 800cea8:	4603      	mov	r3, r0
 800ceaa:	461a      	mov	r2, r3
 800ceac:	4b03      	ldr	r3, [pc, #12]	; (800cebc <MX_FATFS_Init+0x20>)
 800ceae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ceb0:	bf00      	nop
 800ceb2:	bd80      	pop	{r7, pc}
 800ceb4:	200079d4 	.word	0x200079d4
 800ceb8:	08018844 	.word	0x08018844
 800cebc:	200079d0 	.word	0x200079d0

0800cec0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800cec0:	b480      	push	{r7}
 800cec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800cec4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800cec6:	4618      	mov	r0, r3
 800cec8:	46bd      	mov	sp, r7
 800ceca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cece:	4770      	bx	lr

0800ced0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b082      	sub	sp, #8
 800ced4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ced6:	2300      	movs	r3, #0
 800ced8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ceda:	f000 f896 	bl	800d00a <BSP_SD_IsDetected>
 800cede:	4603      	mov	r3, r0
 800cee0:	2b01      	cmp	r3, #1
 800cee2:	d001      	beq.n	800cee8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800cee4:	2301      	movs	r3, #1
 800cee6:	e012      	b.n	800cf0e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800cee8:	480b      	ldr	r0, [pc, #44]	; (800cf18 <BSP_SD_Init+0x48>)
 800ceea:	f7fb ffcb 	bl	8008e84 <HAL_SD_Init>
 800ceee:	4603      	mov	r3, r0
 800cef0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800cef2:	79fb      	ldrb	r3, [r7, #7]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d109      	bne.n	800cf0c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800cef8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800cefc:	4806      	ldr	r0, [pc, #24]	; (800cf18 <BSP_SD_Init+0x48>)
 800cefe:	f7fc fd8b 	bl	8009a18 <HAL_SD_ConfigWideBusOperation>
 800cf02:	4603      	mov	r3, r0
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d001      	beq.n	800cf0c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800cf08:	2301      	movs	r3, #1
 800cf0a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800cf0c:	79fb      	ldrb	r3, [r7, #7]
}
 800cf0e:	4618      	mov	r0, r3
 800cf10:	3708      	adds	r7, #8
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bd80      	pop	{r7, pc}
 800cf16:	bf00      	nop
 800cf18:	20003f4c 	.word	0x20003f4c

0800cf1c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b086      	sub	sp, #24
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	60f8      	str	r0, [r7, #12]
 800cf24:	60b9      	str	r1, [r7, #8]
 800cf26:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800cf28:	2300      	movs	r3, #0
 800cf2a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	68ba      	ldr	r2, [r7, #8]
 800cf30:	68f9      	ldr	r1, [r7, #12]
 800cf32:	4806      	ldr	r0, [pc, #24]	; (800cf4c <BSP_SD_ReadBlocks_DMA+0x30>)
 800cf34:	f7fc f836 	bl	8008fa4 <HAL_SD_ReadBlocks_DMA>
 800cf38:	4603      	mov	r3, r0
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d001      	beq.n	800cf42 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800cf3e:	2301      	movs	r3, #1
 800cf40:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800cf42:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf44:	4618      	mov	r0, r3
 800cf46:	3718      	adds	r7, #24
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	bd80      	pop	{r7, pc}
 800cf4c:	20003f4c 	.word	0x20003f4c

0800cf50 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b086      	sub	sp, #24
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	60f8      	str	r0, [r7, #12]
 800cf58:	60b9      	str	r1, [r7, #8]
 800cf5a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	68ba      	ldr	r2, [r7, #8]
 800cf64:	68f9      	ldr	r1, [r7, #12]
 800cf66:	4806      	ldr	r0, [pc, #24]	; (800cf80 <BSP_SD_WriteBlocks_DMA+0x30>)
 800cf68:	f7fc f906 	bl	8009178 <HAL_SD_WriteBlocks_DMA>
 800cf6c:	4603      	mov	r3, r0
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d001      	beq.n	800cf76 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800cf72:	2301      	movs	r3, #1
 800cf74:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800cf76:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf78:	4618      	mov	r0, r3
 800cf7a:	3718      	adds	r7, #24
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd80      	pop	{r7, pc}
 800cf80:	20003f4c 	.word	0x20003f4c

0800cf84 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800cf88:	4805      	ldr	r0, [pc, #20]	; (800cfa0 <BSP_SD_GetCardState+0x1c>)
 800cf8a:	f7fc fdc1 	bl	8009b10 <HAL_SD_GetCardState>
 800cf8e:	4603      	mov	r3, r0
 800cf90:	2b04      	cmp	r3, #4
 800cf92:	bf14      	ite	ne
 800cf94:	2301      	movne	r3, #1
 800cf96:	2300      	moveq	r3, #0
 800cf98:	b2db      	uxtb	r3, r3
}
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	bd80      	pop	{r7, pc}
 800cf9e:	bf00      	nop
 800cfa0:	20003f4c 	.word	0x20003f4c

0800cfa4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b082      	sub	sp, #8
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800cfac:	6879      	ldr	r1, [r7, #4]
 800cfae:	4803      	ldr	r0, [pc, #12]	; (800cfbc <BSP_SD_GetCardInfo+0x18>)
 800cfb0:	f7fc fd06 	bl	80099c0 <HAL_SD_GetCardInfo>
}
 800cfb4:	bf00      	nop
 800cfb6:	3708      	adds	r7, #8
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	bd80      	pop	{r7, pc}
 800cfbc:	20003f4c 	.word	0x20003f4c

0800cfc0 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b082      	sub	sp, #8
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800cfc8:	f000 f818 	bl	800cffc <BSP_SD_AbortCallback>
}
 800cfcc:	bf00      	nop
 800cfce:	3708      	adds	r7, #8
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	bd80      	pop	{r7, pc}

0800cfd4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b082      	sub	sp, #8
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800cfdc:	f000 f9a8 	bl	800d330 <BSP_SD_WriteCpltCallback>
}
 800cfe0:	bf00      	nop
 800cfe2:	3708      	adds	r7, #8
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	bd80      	pop	{r7, pc}

0800cfe8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b082      	sub	sp, #8
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800cff0:	f000 f9aa 	bl	800d348 <BSP_SD_ReadCpltCallback>
}
 800cff4:	bf00      	nop
 800cff6:	3708      	adds	r7, #8
 800cff8:	46bd      	mov	sp, r7
 800cffa:	bd80      	pop	{r7, pc}

0800cffc <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800cffc:	b480      	push	{r7}
 800cffe:	af00      	add	r7, sp, #0

}
 800d000:	bf00      	nop
 800d002:	46bd      	mov	sp, r7
 800d004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d008:	4770      	bx	lr

0800d00a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d00a:	b580      	push	{r7, lr}
 800d00c:	b082      	sub	sp, #8
 800d00e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d010:	2301      	movs	r3, #1
 800d012:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800d014:	f000 f80c 	bl	800d030 <BSP_PlatformIsDetected>
 800d018:	4603      	mov	r3, r0
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d101      	bne.n	800d022 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d01e:	2300      	movs	r3, #0
 800d020:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d022:	79fb      	ldrb	r3, [r7, #7]
 800d024:	b2db      	uxtb	r3, r3
}
 800d026:	4618      	mov	r0, r3
 800d028:	3708      	adds	r7, #8
 800d02a:	46bd      	mov	sp, r7
 800d02c:	bd80      	pop	{r7, pc}
	...

0800d030 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d030:	b580      	push	{r7, lr}
 800d032:	b082      	sub	sp, #8
 800d034:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d036:	2301      	movs	r3, #1
 800d038:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d03a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d03e:	4806      	ldr	r0, [pc, #24]	; (800d058 <BSP_PlatformIsDetected+0x28>)
 800d040:	f7fa fe2a 	bl	8007c98 <HAL_GPIO_ReadPin>
 800d044:	4603      	mov	r3, r0
 800d046:	2b00      	cmp	r3, #0
 800d048:	d001      	beq.n	800d04e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800d04a:	2300      	movs	r3, #0
 800d04c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800d04e:	79fb      	ldrb	r3, [r7, #7]
}
 800d050:	4618      	mov	r0, r3
 800d052:	3708      	adds	r7, #8
 800d054:	46bd      	mov	sp, r7
 800d056:	bd80      	pop	{r7, pc}
 800d058:	40020000 	.word	0x40020000

0800d05c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b084      	sub	sp, #16
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800d064:	f7f9 fbce 	bl	8006804 <HAL_GetTick>
 800d068:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800d06a:	e006      	b.n	800d07a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d06c:	f7ff ff8a 	bl	800cf84 <BSP_SD_GetCardState>
 800d070:	4603      	mov	r3, r0
 800d072:	2b00      	cmp	r3, #0
 800d074:	d101      	bne.n	800d07a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800d076:	2300      	movs	r3, #0
 800d078:	e009      	b.n	800d08e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800d07a:	f7f9 fbc3 	bl	8006804 <HAL_GetTick>
 800d07e:	4602      	mov	r2, r0
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	1ad3      	subs	r3, r2, r3
 800d084:	687a      	ldr	r2, [r7, #4]
 800d086:	429a      	cmp	r2, r3
 800d088:	d8f0      	bhi.n	800d06c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800d08a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d08e:	4618      	mov	r0, r3
 800d090:	3710      	adds	r7, #16
 800d092:	46bd      	mov	sp, r7
 800d094:	bd80      	pop	{r7, pc}
	...

0800d098 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b082      	sub	sp, #8
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	4603      	mov	r3, r0
 800d0a0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d0a2:	4b0b      	ldr	r3, [pc, #44]	; (800d0d0 <SD_CheckStatus+0x38>)
 800d0a4:	2201      	movs	r2, #1
 800d0a6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800d0a8:	f7ff ff6c 	bl	800cf84 <BSP_SD_GetCardState>
 800d0ac:	4603      	mov	r3, r0
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d107      	bne.n	800d0c2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d0b2:	4b07      	ldr	r3, [pc, #28]	; (800d0d0 <SD_CheckStatus+0x38>)
 800d0b4:	781b      	ldrb	r3, [r3, #0]
 800d0b6:	b2db      	uxtb	r3, r3
 800d0b8:	f023 0301 	bic.w	r3, r3, #1
 800d0bc:	b2da      	uxtb	r2, r3
 800d0be:	4b04      	ldr	r3, [pc, #16]	; (800d0d0 <SD_CheckStatus+0x38>)
 800d0c0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d0c2:	4b03      	ldr	r3, [pc, #12]	; (800d0d0 <SD_CheckStatus+0x38>)
 800d0c4:	781b      	ldrb	r3, [r3, #0]
 800d0c6:	b2db      	uxtb	r3, r3
}
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	3708      	adds	r7, #8
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	bd80      	pop	{r7, pc}
 800d0d0:	2000001d 	.word	0x2000001d

0800d0d4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b082      	sub	sp, #8
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	4603      	mov	r3, r0
 800d0dc:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800d0de:	f7ff fef7 	bl	800ced0 <BSP_SD_Init>
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d107      	bne.n	800d0f8 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800d0e8:	79fb      	ldrb	r3, [r7, #7]
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	f7ff ffd4 	bl	800d098 <SD_CheckStatus>
 800d0f0:	4603      	mov	r3, r0
 800d0f2:	461a      	mov	r2, r3
 800d0f4:	4b04      	ldr	r3, [pc, #16]	; (800d108 <SD_initialize+0x34>)
 800d0f6:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800d0f8:	4b03      	ldr	r3, [pc, #12]	; (800d108 <SD_initialize+0x34>)
 800d0fa:	781b      	ldrb	r3, [r3, #0]
 800d0fc:	b2db      	uxtb	r3, r3
}
 800d0fe:	4618      	mov	r0, r3
 800d100:	3708      	adds	r7, #8
 800d102:	46bd      	mov	sp, r7
 800d104:	bd80      	pop	{r7, pc}
 800d106:	bf00      	nop
 800d108:	2000001d 	.word	0x2000001d

0800d10c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b082      	sub	sp, #8
 800d110:	af00      	add	r7, sp, #0
 800d112:	4603      	mov	r3, r0
 800d114:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d116:	79fb      	ldrb	r3, [r7, #7]
 800d118:	4618      	mov	r0, r3
 800d11a:	f7ff ffbd 	bl	800d098 <SD_CheckStatus>
 800d11e:	4603      	mov	r3, r0
}
 800d120:	4618      	mov	r0, r3
 800d122:	3708      	adds	r7, #8
 800d124:	46bd      	mov	sp, r7
 800d126:	bd80      	pop	{r7, pc}

0800d128 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b086      	sub	sp, #24
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	60b9      	str	r1, [r7, #8]
 800d130:	607a      	str	r2, [r7, #4]
 800d132:	603b      	str	r3, [r7, #0]
 800d134:	4603      	mov	r3, r0
 800d136:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d138:	2301      	movs	r3, #1
 800d13a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d13c:	f247 5030 	movw	r0, #30000	; 0x7530
 800d140:	f7ff ff8c 	bl	800d05c <SD_CheckStatusWithTimeout>
 800d144:	4603      	mov	r3, r0
 800d146:	2b00      	cmp	r3, #0
 800d148:	da01      	bge.n	800d14e <SD_read+0x26>
  {
    return res;
 800d14a:	7dfb      	ldrb	r3, [r7, #23]
 800d14c:	e03b      	b.n	800d1c6 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800d14e:	683a      	ldr	r2, [r7, #0]
 800d150:	6879      	ldr	r1, [r7, #4]
 800d152:	68b8      	ldr	r0, [r7, #8]
 800d154:	f7ff fee2 	bl	800cf1c <BSP_SD_ReadBlocks_DMA>
 800d158:	4603      	mov	r3, r0
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d132      	bne.n	800d1c4 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800d15e:	4b1c      	ldr	r3, [pc, #112]	; (800d1d0 <SD_read+0xa8>)
 800d160:	2200      	movs	r2, #0
 800d162:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800d164:	f7f9 fb4e 	bl	8006804 <HAL_GetTick>
 800d168:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800d16a:	bf00      	nop
 800d16c:	4b18      	ldr	r3, [pc, #96]	; (800d1d0 <SD_read+0xa8>)
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d108      	bne.n	800d186 <SD_read+0x5e>
 800d174:	f7f9 fb46 	bl	8006804 <HAL_GetTick>
 800d178:	4602      	mov	r2, r0
 800d17a:	693b      	ldr	r3, [r7, #16]
 800d17c:	1ad3      	subs	r3, r2, r3
 800d17e:	f247 522f 	movw	r2, #29999	; 0x752f
 800d182:	4293      	cmp	r3, r2
 800d184:	d9f2      	bls.n	800d16c <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800d186:	4b12      	ldr	r3, [pc, #72]	; (800d1d0 <SD_read+0xa8>)
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d102      	bne.n	800d194 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800d18e:	2301      	movs	r3, #1
 800d190:	75fb      	strb	r3, [r7, #23]
 800d192:	e017      	b.n	800d1c4 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800d194:	4b0e      	ldr	r3, [pc, #56]	; (800d1d0 <SD_read+0xa8>)
 800d196:	2200      	movs	r2, #0
 800d198:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800d19a:	f7f9 fb33 	bl	8006804 <HAL_GetTick>
 800d19e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d1a0:	e007      	b.n	800d1b2 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d1a2:	f7ff feef 	bl	800cf84 <BSP_SD_GetCardState>
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d102      	bne.n	800d1b2 <SD_read+0x8a>
          {
            res = RES_OK;
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800d1b0:	e008      	b.n	800d1c4 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d1b2:	f7f9 fb27 	bl	8006804 <HAL_GetTick>
 800d1b6:	4602      	mov	r2, r0
 800d1b8:	693b      	ldr	r3, [r7, #16]
 800d1ba:	1ad3      	subs	r3, r2, r3
 800d1bc:	f247 522f 	movw	r2, #29999	; 0x752f
 800d1c0:	4293      	cmp	r3, r2
 800d1c2:	d9ee      	bls.n	800d1a2 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800d1c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	3718      	adds	r7, #24
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bd80      	pop	{r7, pc}
 800d1ce:	bf00      	nop
 800d1d0:	20000ad0 	.word	0x20000ad0

0800d1d4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b086      	sub	sp, #24
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	60b9      	str	r1, [r7, #8]
 800d1dc:	607a      	str	r2, [r7, #4]
 800d1de:	603b      	str	r3, [r7, #0]
 800d1e0:	4603      	mov	r3, r0
 800d1e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d1e4:	2301      	movs	r3, #1
 800d1e6:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800d1e8:	4b24      	ldr	r3, [pc, #144]	; (800d27c <SD_write+0xa8>)
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d1ee:	f247 5030 	movw	r0, #30000	; 0x7530
 800d1f2:	f7ff ff33 	bl	800d05c <SD_CheckStatusWithTimeout>
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	da01      	bge.n	800d200 <SD_write+0x2c>
  {
    return res;
 800d1fc:	7dfb      	ldrb	r3, [r7, #23]
 800d1fe:	e038      	b.n	800d272 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800d200:	683a      	ldr	r2, [r7, #0]
 800d202:	6879      	ldr	r1, [r7, #4]
 800d204:	68b8      	ldr	r0, [r7, #8]
 800d206:	f7ff fea3 	bl	800cf50 <BSP_SD_WriteBlocks_DMA>
 800d20a:	4603      	mov	r3, r0
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d12f      	bne.n	800d270 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800d210:	f7f9 faf8 	bl	8006804 <HAL_GetTick>
 800d214:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800d216:	bf00      	nop
 800d218:	4b18      	ldr	r3, [pc, #96]	; (800d27c <SD_write+0xa8>)
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d108      	bne.n	800d232 <SD_write+0x5e>
 800d220:	f7f9 faf0 	bl	8006804 <HAL_GetTick>
 800d224:	4602      	mov	r2, r0
 800d226:	693b      	ldr	r3, [r7, #16]
 800d228:	1ad3      	subs	r3, r2, r3
 800d22a:	f247 522f 	movw	r2, #29999	; 0x752f
 800d22e:	4293      	cmp	r3, r2
 800d230:	d9f2      	bls.n	800d218 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800d232:	4b12      	ldr	r3, [pc, #72]	; (800d27c <SD_write+0xa8>)
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d102      	bne.n	800d240 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800d23a:	2301      	movs	r3, #1
 800d23c:	75fb      	strb	r3, [r7, #23]
 800d23e:	e017      	b.n	800d270 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800d240:	4b0e      	ldr	r3, [pc, #56]	; (800d27c <SD_write+0xa8>)
 800d242:	2200      	movs	r2, #0
 800d244:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800d246:	f7f9 fadd 	bl	8006804 <HAL_GetTick>
 800d24a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d24c:	e007      	b.n	800d25e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d24e:	f7ff fe99 	bl	800cf84 <BSP_SD_GetCardState>
 800d252:	4603      	mov	r3, r0
 800d254:	2b00      	cmp	r3, #0
 800d256:	d102      	bne.n	800d25e <SD_write+0x8a>
          {
            res = RES_OK;
 800d258:	2300      	movs	r3, #0
 800d25a:	75fb      	strb	r3, [r7, #23]
            break;
 800d25c:	e008      	b.n	800d270 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d25e:	f7f9 fad1 	bl	8006804 <HAL_GetTick>
 800d262:	4602      	mov	r2, r0
 800d264:	693b      	ldr	r3, [r7, #16]
 800d266:	1ad3      	subs	r3, r2, r3
 800d268:	f247 522f 	movw	r2, #29999	; 0x752f
 800d26c:	4293      	cmp	r3, r2
 800d26e:	d9ee      	bls.n	800d24e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800d270:	7dfb      	ldrb	r3, [r7, #23]
}
 800d272:	4618      	mov	r0, r3
 800d274:	3718      	adds	r7, #24
 800d276:	46bd      	mov	sp, r7
 800d278:	bd80      	pop	{r7, pc}
 800d27a:	bf00      	nop
 800d27c:	20000acc 	.word	0x20000acc

0800d280 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b08c      	sub	sp, #48	; 0x30
 800d284:	af00      	add	r7, sp, #0
 800d286:	4603      	mov	r3, r0
 800d288:	603a      	str	r2, [r7, #0]
 800d28a:	71fb      	strb	r3, [r7, #7]
 800d28c:	460b      	mov	r3, r1
 800d28e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d290:	2301      	movs	r3, #1
 800d292:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d296:	4b25      	ldr	r3, [pc, #148]	; (800d32c <SD_ioctl+0xac>)
 800d298:	781b      	ldrb	r3, [r3, #0]
 800d29a:	b2db      	uxtb	r3, r3
 800d29c:	f003 0301 	and.w	r3, r3, #1
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d001      	beq.n	800d2a8 <SD_ioctl+0x28>
 800d2a4:	2303      	movs	r3, #3
 800d2a6:	e03c      	b.n	800d322 <SD_ioctl+0xa2>

  switch (cmd)
 800d2a8:	79bb      	ldrb	r3, [r7, #6]
 800d2aa:	2b03      	cmp	r3, #3
 800d2ac:	d834      	bhi.n	800d318 <SD_ioctl+0x98>
 800d2ae:	a201      	add	r2, pc, #4	; (adr r2, 800d2b4 <SD_ioctl+0x34>)
 800d2b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2b4:	0800d2c5 	.word	0x0800d2c5
 800d2b8:	0800d2cd 	.word	0x0800d2cd
 800d2bc:	0800d2e5 	.word	0x0800d2e5
 800d2c0:	0800d2ff 	.word	0x0800d2ff
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d2ca:	e028      	b.n	800d31e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d2cc:	f107 030c 	add.w	r3, r7, #12
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f7ff fe67 	bl	800cfa4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d2d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d2dc:	2300      	movs	r3, #0
 800d2de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d2e2:	e01c      	b.n	800d31e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d2e4:	f107 030c 	add.w	r3, r7, #12
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	f7ff fe5b 	bl	800cfa4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d2ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2f0:	b29a      	uxth	r2, r3
 800d2f2:	683b      	ldr	r3, [r7, #0]
 800d2f4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d2fc:	e00f      	b.n	800d31e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d2fe:	f107 030c 	add.w	r3, r7, #12
 800d302:	4618      	mov	r0, r3
 800d304:	f7ff fe4e 	bl	800cfa4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d30a:	0a5a      	lsrs	r2, r3, #9
 800d30c:	683b      	ldr	r3, [r7, #0]
 800d30e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d310:	2300      	movs	r3, #0
 800d312:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d316:	e002      	b.n	800d31e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d318:	2304      	movs	r3, #4
 800d31a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800d31e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d322:	4618      	mov	r0, r3
 800d324:	3730      	adds	r7, #48	; 0x30
 800d326:	46bd      	mov	sp, r7
 800d328:	bd80      	pop	{r7, pc}
 800d32a:	bf00      	nop
 800d32c:	2000001d 	.word	0x2000001d

0800d330 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800d330:	b480      	push	{r7}
 800d332:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800d334:	4b03      	ldr	r3, [pc, #12]	; (800d344 <BSP_SD_WriteCpltCallback+0x14>)
 800d336:	2201      	movs	r2, #1
 800d338:	601a      	str	r2, [r3, #0]
}
 800d33a:	bf00      	nop
 800d33c:	46bd      	mov	sp, r7
 800d33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d342:	4770      	bx	lr
 800d344:	20000acc 	.word	0x20000acc

0800d348 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800d348:	b480      	push	{r7}
 800d34a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800d34c:	4b03      	ldr	r3, [pc, #12]	; (800d35c <BSP_SD_ReadCpltCallback+0x14>)
 800d34e:	2201      	movs	r2, #1
 800d350:	601a      	str	r2, [r3, #0]
}
 800d352:	bf00      	nop
 800d354:	46bd      	mov	sp, r7
 800d356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35a:	4770      	bx	lr
 800d35c:	20000ad0 	.word	0x20000ad0

0800d360 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b084      	sub	sp, #16
 800d364:	af00      	add	r7, sp, #0
 800d366:	4603      	mov	r3, r0
 800d368:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d36a:	79fb      	ldrb	r3, [r7, #7]
 800d36c:	4a08      	ldr	r2, [pc, #32]	; (800d390 <disk_status+0x30>)
 800d36e:	009b      	lsls	r3, r3, #2
 800d370:	4413      	add	r3, r2
 800d372:	685b      	ldr	r3, [r3, #4]
 800d374:	685b      	ldr	r3, [r3, #4]
 800d376:	79fa      	ldrb	r2, [r7, #7]
 800d378:	4905      	ldr	r1, [pc, #20]	; (800d390 <disk_status+0x30>)
 800d37a:	440a      	add	r2, r1
 800d37c:	7a12      	ldrb	r2, [r2, #8]
 800d37e:	4610      	mov	r0, r2
 800d380:	4798      	blx	r3
 800d382:	4603      	mov	r3, r0
 800d384:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d386:	7bfb      	ldrb	r3, [r7, #15]
}
 800d388:	4618      	mov	r0, r3
 800d38a:	3710      	adds	r7, #16
 800d38c:	46bd      	mov	sp, r7
 800d38e:	bd80      	pop	{r7, pc}
 800d390:	20000afc 	.word	0x20000afc

0800d394 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b084      	sub	sp, #16
 800d398:	af00      	add	r7, sp, #0
 800d39a:	4603      	mov	r3, r0
 800d39c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d39e:	2300      	movs	r3, #0
 800d3a0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d3a2:	79fb      	ldrb	r3, [r7, #7]
 800d3a4:	4a0d      	ldr	r2, [pc, #52]	; (800d3dc <disk_initialize+0x48>)
 800d3a6:	5cd3      	ldrb	r3, [r2, r3]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d111      	bne.n	800d3d0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800d3ac:	79fb      	ldrb	r3, [r7, #7]
 800d3ae:	4a0b      	ldr	r2, [pc, #44]	; (800d3dc <disk_initialize+0x48>)
 800d3b0:	2101      	movs	r1, #1
 800d3b2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d3b4:	79fb      	ldrb	r3, [r7, #7]
 800d3b6:	4a09      	ldr	r2, [pc, #36]	; (800d3dc <disk_initialize+0x48>)
 800d3b8:	009b      	lsls	r3, r3, #2
 800d3ba:	4413      	add	r3, r2
 800d3bc:	685b      	ldr	r3, [r3, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	79fa      	ldrb	r2, [r7, #7]
 800d3c2:	4906      	ldr	r1, [pc, #24]	; (800d3dc <disk_initialize+0x48>)
 800d3c4:	440a      	add	r2, r1
 800d3c6:	7a12      	ldrb	r2, [r2, #8]
 800d3c8:	4610      	mov	r0, r2
 800d3ca:	4798      	blx	r3
 800d3cc:	4603      	mov	r3, r0
 800d3ce:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800d3d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	3710      	adds	r7, #16
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	bd80      	pop	{r7, pc}
 800d3da:	bf00      	nop
 800d3dc:	20000afc 	.word	0x20000afc

0800d3e0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d3e0:	b590      	push	{r4, r7, lr}
 800d3e2:	b087      	sub	sp, #28
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	60b9      	str	r1, [r7, #8]
 800d3e8:	607a      	str	r2, [r7, #4]
 800d3ea:	603b      	str	r3, [r7, #0]
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d3f0:	7bfb      	ldrb	r3, [r7, #15]
 800d3f2:	4a0a      	ldr	r2, [pc, #40]	; (800d41c <disk_read+0x3c>)
 800d3f4:	009b      	lsls	r3, r3, #2
 800d3f6:	4413      	add	r3, r2
 800d3f8:	685b      	ldr	r3, [r3, #4]
 800d3fa:	689c      	ldr	r4, [r3, #8]
 800d3fc:	7bfb      	ldrb	r3, [r7, #15]
 800d3fe:	4a07      	ldr	r2, [pc, #28]	; (800d41c <disk_read+0x3c>)
 800d400:	4413      	add	r3, r2
 800d402:	7a18      	ldrb	r0, [r3, #8]
 800d404:	683b      	ldr	r3, [r7, #0]
 800d406:	687a      	ldr	r2, [r7, #4]
 800d408:	68b9      	ldr	r1, [r7, #8]
 800d40a:	47a0      	blx	r4
 800d40c:	4603      	mov	r3, r0
 800d40e:	75fb      	strb	r3, [r7, #23]
  return res;
 800d410:	7dfb      	ldrb	r3, [r7, #23]
}
 800d412:	4618      	mov	r0, r3
 800d414:	371c      	adds	r7, #28
 800d416:	46bd      	mov	sp, r7
 800d418:	bd90      	pop	{r4, r7, pc}
 800d41a:	bf00      	nop
 800d41c:	20000afc 	.word	0x20000afc

0800d420 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d420:	b590      	push	{r4, r7, lr}
 800d422:	b087      	sub	sp, #28
 800d424:	af00      	add	r7, sp, #0
 800d426:	60b9      	str	r1, [r7, #8]
 800d428:	607a      	str	r2, [r7, #4]
 800d42a:	603b      	str	r3, [r7, #0]
 800d42c:	4603      	mov	r3, r0
 800d42e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d430:	7bfb      	ldrb	r3, [r7, #15]
 800d432:	4a0a      	ldr	r2, [pc, #40]	; (800d45c <disk_write+0x3c>)
 800d434:	009b      	lsls	r3, r3, #2
 800d436:	4413      	add	r3, r2
 800d438:	685b      	ldr	r3, [r3, #4]
 800d43a:	68dc      	ldr	r4, [r3, #12]
 800d43c:	7bfb      	ldrb	r3, [r7, #15]
 800d43e:	4a07      	ldr	r2, [pc, #28]	; (800d45c <disk_write+0x3c>)
 800d440:	4413      	add	r3, r2
 800d442:	7a18      	ldrb	r0, [r3, #8]
 800d444:	683b      	ldr	r3, [r7, #0]
 800d446:	687a      	ldr	r2, [r7, #4]
 800d448:	68b9      	ldr	r1, [r7, #8]
 800d44a:	47a0      	blx	r4
 800d44c:	4603      	mov	r3, r0
 800d44e:	75fb      	strb	r3, [r7, #23]
  return res;
 800d450:	7dfb      	ldrb	r3, [r7, #23]
}
 800d452:	4618      	mov	r0, r3
 800d454:	371c      	adds	r7, #28
 800d456:	46bd      	mov	sp, r7
 800d458:	bd90      	pop	{r4, r7, pc}
 800d45a:	bf00      	nop
 800d45c:	20000afc 	.word	0x20000afc

0800d460 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b084      	sub	sp, #16
 800d464:	af00      	add	r7, sp, #0
 800d466:	4603      	mov	r3, r0
 800d468:	603a      	str	r2, [r7, #0]
 800d46a:	71fb      	strb	r3, [r7, #7]
 800d46c:	460b      	mov	r3, r1
 800d46e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d470:	79fb      	ldrb	r3, [r7, #7]
 800d472:	4a09      	ldr	r2, [pc, #36]	; (800d498 <disk_ioctl+0x38>)
 800d474:	009b      	lsls	r3, r3, #2
 800d476:	4413      	add	r3, r2
 800d478:	685b      	ldr	r3, [r3, #4]
 800d47a:	691b      	ldr	r3, [r3, #16]
 800d47c:	79fa      	ldrb	r2, [r7, #7]
 800d47e:	4906      	ldr	r1, [pc, #24]	; (800d498 <disk_ioctl+0x38>)
 800d480:	440a      	add	r2, r1
 800d482:	7a10      	ldrb	r0, [r2, #8]
 800d484:	79b9      	ldrb	r1, [r7, #6]
 800d486:	683a      	ldr	r2, [r7, #0]
 800d488:	4798      	blx	r3
 800d48a:	4603      	mov	r3, r0
 800d48c:	73fb      	strb	r3, [r7, #15]
  return res;
 800d48e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d490:	4618      	mov	r0, r3
 800d492:	3710      	adds	r7, #16
 800d494:	46bd      	mov	sp, r7
 800d496:	bd80      	pop	{r7, pc}
 800d498:	20000afc 	.word	0x20000afc

0800d49c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d49c:	b480      	push	{r7}
 800d49e:	b085      	sub	sp, #20
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	3301      	adds	r3, #1
 800d4a8:	781b      	ldrb	r3, [r3, #0]
 800d4aa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d4ac:	89fb      	ldrh	r3, [r7, #14]
 800d4ae:	021b      	lsls	r3, r3, #8
 800d4b0:	b21a      	sxth	r2, r3
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	781b      	ldrb	r3, [r3, #0]
 800d4b6:	b21b      	sxth	r3, r3
 800d4b8:	4313      	orrs	r3, r2
 800d4ba:	b21b      	sxth	r3, r3
 800d4bc:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d4be:	89fb      	ldrh	r3, [r7, #14]
}
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	3714      	adds	r7, #20
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ca:	4770      	bx	lr

0800d4cc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d4cc:	b480      	push	{r7}
 800d4ce:	b085      	sub	sp, #20
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	3303      	adds	r3, #3
 800d4d8:	781b      	ldrb	r3, [r3, #0]
 800d4da:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	021b      	lsls	r3, r3, #8
 800d4e0:	687a      	ldr	r2, [r7, #4]
 800d4e2:	3202      	adds	r2, #2
 800d4e4:	7812      	ldrb	r2, [r2, #0]
 800d4e6:	4313      	orrs	r3, r2
 800d4e8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	021b      	lsls	r3, r3, #8
 800d4ee:	687a      	ldr	r2, [r7, #4]
 800d4f0:	3201      	adds	r2, #1
 800d4f2:	7812      	ldrb	r2, [r2, #0]
 800d4f4:	4313      	orrs	r3, r2
 800d4f6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	021b      	lsls	r3, r3, #8
 800d4fc:	687a      	ldr	r2, [r7, #4]
 800d4fe:	7812      	ldrb	r2, [r2, #0]
 800d500:	4313      	orrs	r3, r2
 800d502:	60fb      	str	r3, [r7, #12]
	return rv;
 800d504:	68fb      	ldr	r3, [r7, #12]
}
 800d506:	4618      	mov	r0, r3
 800d508:	3714      	adds	r7, #20
 800d50a:	46bd      	mov	sp, r7
 800d50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d510:	4770      	bx	lr

0800d512 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d512:	b480      	push	{r7}
 800d514:	b083      	sub	sp, #12
 800d516:	af00      	add	r7, sp, #0
 800d518:	6078      	str	r0, [r7, #4]
 800d51a:	460b      	mov	r3, r1
 800d51c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	1c5a      	adds	r2, r3, #1
 800d522:	607a      	str	r2, [r7, #4]
 800d524:	887a      	ldrh	r2, [r7, #2]
 800d526:	b2d2      	uxtb	r2, r2
 800d528:	701a      	strb	r2, [r3, #0]
 800d52a:	887b      	ldrh	r3, [r7, #2]
 800d52c:	0a1b      	lsrs	r3, r3, #8
 800d52e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	1c5a      	adds	r2, r3, #1
 800d534:	607a      	str	r2, [r7, #4]
 800d536:	887a      	ldrh	r2, [r7, #2]
 800d538:	b2d2      	uxtb	r2, r2
 800d53a:	701a      	strb	r2, [r3, #0]
}
 800d53c:	bf00      	nop
 800d53e:	370c      	adds	r7, #12
 800d540:	46bd      	mov	sp, r7
 800d542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d546:	4770      	bx	lr

0800d548 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d548:	b480      	push	{r7}
 800d54a:	b083      	sub	sp, #12
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	6078      	str	r0, [r7, #4]
 800d550:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	1c5a      	adds	r2, r3, #1
 800d556:	607a      	str	r2, [r7, #4]
 800d558:	683a      	ldr	r2, [r7, #0]
 800d55a:	b2d2      	uxtb	r2, r2
 800d55c:	701a      	strb	r2, [r3, #0]
 800d55e:	683b      	ldr	r3, [r7, #0]
 800d560:	0a1b      	lsrs	r3, r3, #8
 800d562:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	1c5a      	adds	r2, r3, #1
 800d568:	607a      	str	r2, [r7, #4]
 800d56a:	683a      	ldr	r2, [r7, #0]
 800d56c:	b2d2      	uxtb	r2, r2
 800d56e:	701a      	strb	r2, [r3, #0]
 800d570:	683b      	ldr	r3, [r7, #0]
 800d572:	0a1b      	lsrs	r3, r3, #8
 800d574:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	1c5a      	adds	r2, r3, #1
 800d57a:	607a      	str	r2, [r7, #4]
 800d57c:	683a      	ldr	r2, [r7, #0]
 800d57e:	b2d2      	uxtb	r2, r2
 800d580:	701a      	strb	r2, [r3, #0]
 800d582:	683b      	ldr	r3, [r7, #0]
 800d584:	0a1b      	lsrs	r3, r3, #8
 800d586:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	1c5a      	adds	r2, r3, #1
 800d58c:	607a      	str	r2, [r7, #4]
 800d58e:	683a      	ldr	r2, [r7, #0]
 800d590:	b2d2      	uxtb	r2, r2
 800d592:	701a      	strb	r2, [r3, #0]
}
 800d594:	bf00      	nop
 800d596:	370c      	adds	r7, #12
 800d598:	46bd      	mov	sp, r7
 800d59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59e:	4770      	bx	lr

0800d5a0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d5a0:	b480      	push	{r7}
 800d5a2:	b087      	sub	sp, #28
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	60f8      	str	r0, [r7, #12]
 800d5a8:	60b9      	str	r1, [r7, #8]
 800d5aa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d5b0:	68bb      	ldr	r3, [r7, #8]
 800d5b2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d00d      	beq.n	800d5d6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d5ba:	693a      	ldr	r2, [r7, #16]
 800d5bc:	1c53      	adds	r3, r2, #1
 800d5be:	613b      	str	r3, [r7, #16]
 800d5c0:	697b      	ldr	r3, [r7, #20]
 800d5c2:	1c59      	adds	r1, r3, #1
 800d5c4:	6179      	str	r1, [r7, #20]
 800d5c6:	7812      	ldrb	r2, [r2, #0]
 800d5c8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	3b01      	subs	r3, #1
 800d5ce:	607b      	str	r3, [r7, #4]
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d1f1      	bne.n	800d5ba <mem_cpy+0x1a>
	}
}
 800d5d6:	bf00      	nop
 800d5d8:	371c      	adds	r7, #28
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e0:	4770      	bx	lr

0800d5e2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d5e2:	b480      	push	{r7}
 800d5e4:	b087      	sub	sp, #28
 800d5e6:	af00      	add	r7, sp, #0
 800d5e8:	60f8      	str	r0, [r7, #12]
 800d5ea:	60b9      	str	r1, [r7, #8]
 800d5ec:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d5f2:	697b      	ldr	r3, [r7, #20]
 800d5f4:	1c5a      	adds	r2, r3, #1
 800d5f6:	617a      	str	r2, [r7, #20]
 800d5f8:	68ba      	ldr	r2, [r7, #8]
 800d5fa:	b2d2      	uxtb	r2, r2
 800d5fc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	3b01      	subs	r3, #1
 800d602:	607b      	str	r3, [r7, #4]
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d1f3      	bne.n	800d5f2 <mem_set+0x10>
}
 800d60a:	bf00      	nop
 800d60c:	bf00      	nop
 800d60e:	371c      	adds	r7, #28
 800d610:	46bd      	mov	sp, r7
 800d612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d616:	4770      	bx	lr

0800d618 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d618:	b480      	push	{r7}
 800d61a:	b089      	sub	sp, #36	; 0x24
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	60f8      	str	r0, [r7, #12]
 800d620:	60b9      	str	r1, [r7, #8]
 800d622:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	61fb      	str	r3, [r7, #28]
 800d628:	68bb      	ldr	r3, [r7, #8]
 800d62a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d62c:	2300      	movs	r3, #0
 800d62e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d630:	69fb      	ldr	r3, [r7, #28]
 800d632:	1c5a      	adds	r2, r3, #1
 800d634:	61fa      	str	r2, [r7, #28]
 800d636:	781b      	ldrb	r3, [r3, #0]
 800d638:	4619      	mov	r1, r3
 800d63a:	69bb      	ldr	r3, [r7, #24]
 800d63c:	1c5a      	adds	r2, r3, #1
 800d63e:	61ba      	str	r2, [r7, #24]
 800d640:	781b      	ldrb	r3, [r3, #0]
 800d642:	1acb      	subs	r3, r1, r3
 800d644:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	3b01      	subs	r3, #1
 800d64a:	607b      	str	r3, [r7, #4]
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d002      	beq.n	800d658 <mem_cmp+0x40>
 800d652:	697b      	ldr	r3, [r7, #20]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d0eb      	beq.n	800d630 <mem_cmp+0x18>

	return r;
 800d658:	697b      	ldr	r3, [r7, #20]
}
 800d65a:	4618      	mov	r0, r3
 800d65c:	3724      	adds	r7, #36	; 0x24
 800d65e:	46bd      	mov	sp, r7
 800d660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d664:	4770      	bx	lr

0800d666 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d666:	b480      	push	{r7}
 800d668:	b083      	sub	sp, #12
 800d66a:	af00      	add	r7, sp, #0
 800d66c:	6078      	str	r0, [r7, #4]
 800d66e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d670:	e002      	b.n	800d678 <chk_chr+0x12>
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	3301      	adds	r3, #1
 800d676:	607b      	str	r3, [r7, #4]
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	781b      	ldrb	r3, [r3, #0]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d005      	beq.n	800d68c <chk_chr+0x26>
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	781b      	ldrb	r3, [r3, #0]
 800d684:	461a      	mov	r2, r3
 800d686:	683b      	ldr	r3, [r7, #0]
 800d688:	4293      	cmp	r3, r2
 800d68a:	d1f2      	bne.n	800d672 <chk_chr+0xc>
	return *str;
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	781b      	ldrb	r3, [r3, #0]
}
 800d690:	4618      	mov	r0, r3
 800d692:	370c      	adds	r7, #12
 800d694:	46bd      	mov	sp, r7
 800d696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69a:	4770      	bx	lr

0800d69c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d69c:	b480      	push	{r7}
 800d69e:	b085      	sub	sp, #20
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
 800d6a4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	60bb      	str	r3, [r7, #8]
 800d6aa:	68bb      	ldr	r3, [r7, #8]
 800d6ac:	60fb      	str	r3, [r7, #12]
 800d6ae:	e029      	b.n	800d704 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d6b0:	4a27      	ldr	r2, [pc, #156]	; (800d750 <chk_lock+0xb4>)
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	011b      	lsls	r3, r3, #4
 800d6b6:	4413      	add	r3, r2
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d01d      	beq.n	800d6fa <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d6be:	4a24      	ldr	r2, [pc, #144]	; (800d750 <chk_lock+0xb4>)
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	011b      	lsls	r3, r3, #4
 800d6c4:	4413      	add	r3, r2
 800d6c6:	681a      	ldr	r2, [r3, #0]
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	429a      	cmp	r2, r3
 800d6ce:	d116      	bne.n	800d6fe <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d6d0:	4a1f      	ldr	r2, [pc, #124]	; (800d750 <chk_lock+0xb4>)
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	011b      	lsls	r3, r3, #4
 800d6d6:	4413      	add	r3, r2
 800d6d8:	3304      	adds	r3, #4
 800d6da:	681a      	ldr	r2, [r3, #0]
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d6e0:	429a      	cmp	r2, r3
 800d6e2:	d10c      	bne.n	800d6fe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d6e4:	4a1a      	ldr	r2, [pc, #104]	; (800d750 <chk_lock+0xb4>)
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	011b      	lsls	r3, r3, #4
 800d6ea:	4413      	add	r3, r2
 800d6ec:	3308      	adds	r3, #8
 800d6ee:	681a      	ldr	r2, [r3, #0]
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d6f4:	429a      	cmp	r2, r3
 800d6f6:	d102      	bne.n	800d6fe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d6f8:	e007      	b.n	800d70a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d6fa:	2301      	movs	r3, #1
 800d6fc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	3301      	adds	r3, #1
 800d702:	60fb      	str	r3, [r7, #12]
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	2b01      	cmp	r3, #1
 800d708:	d9d2      	bls.n	800d6b0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	2b02      	cmp	r3, #2
 800d70e:	d109      	bne.n	800d724 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d710:	68bb      	ldr	r3, [r7, #8]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d102      	bne.n	800d71c <chk_lock+0x80>
 800d716:	683b      	ldr	r3, [r7, #0]
 800d718:	2b02      	cmp	r3, #2
 800d71a:	d101      	bne.n	800d720 <chk_lock+0x84>
 800d71c:	2300      	movs	r3, #0
 800d71e:	e010      	b.n	800d742 <chk_lock+0xa6>
 800d720:	2312      	movs	r3, #18
 800d722:	e00e      	b.n	800d742 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d724:	683b      	ldr	r3, [r7, #0]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d108      	bne.n	800d73c <chk_lock+0xa0>
 800d72a:	4a09      	ldr	r2, [pc, #36]	; (800d750 <chk_lock+0xb4>)
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	011b      	lsls	r3, r3, #4
 800d730:	4413      	add	r3, r2
 800d732:	330c      	adds	r3, #12
 800d734:	881b      	ldrh	r3, [r3, #0]
 800d736:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d73a:	d101      	bne.n	800d740 <chk_lock+0xa4>
 800d73c:	2310      	movs	r3, #16
 800d73e:	e000      	b.n	800d742 <chk_lock+0xa6>
 800d740:	2300      	movs	r3, #0
}
 800d742:	4618      	mov	r0, r3
 800d744:	3714      	adds	r7, #20
 800d746:	46bd      	mov	sp, r7
 800d748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d74c:	4770      	bx	lr
 800d74e:	bf00      	nop
 800d750:	20000adc 	.word	0x20000adc

0800d754 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d754:	b480      	push	{r7}
 800d756:	b083      	sub	sp, #12
 800d758:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d75a:	2300      	movs	r3, #0
 800d75c:	607b      	str	r3, [r7, #4]
 800d75e:	e002      	b.n	800d766 <enq_lock+0x12>
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	3301      	adds	r3, #1
 800d764:	607b      	str	r3, [r7, #4]
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	2b01      	cmp	r3, #1
 800d76a:	d806      	bhi.n	800d77a <enq_lock+0x26>
 800d76c:	4a09      	ldr	r2, [pc, #36]	; (800d794 <enq_lock+0x40>)
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	011b      	lsls	r3, r3, #4
 800d772:	4413      	add	r3, r2
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d1f2      	bne.n	800d760 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	2b02      	cmp	r3, #2
 800d77e:	bf14      	ite	ne
 800d780:	2301      	movne	r3, #1
 800d782:	2300      	moveq	r3, #0
 800d784:	b2db      	uxtb	r3, r3
}
 800d786:	4618      	mov	r0, r3
 800d788:	370c      	adds	r7, #12
 800d78a:	46bd      	mov	sp, r7
 800d78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d790:	4770      	bx	lr
 800d792:	bf00      	nop
 800d794:	20000adc 	.word	0x20000adc

0800d798 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d798:	b480      	push	{r7}
 800d79a:	b085      	sub	sp, #20
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
 800d7a0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	60fb      	str	r3, [r7, #12]
 800d7a6:	e01f      	b.n	800d7e8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d7a8:	4a41      	ldr	r2, [pc, #260]	; (800d8b0 <inc_lock+0x118>)
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	011b      	lsls	r3, r3, #4
 800d7ae:	4413      	add	r3, r2
 800d7b0:	681a      	ldr	r2, [r3, #0]
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	429a      	cmp	r2, r3
 800d7b8:	d113      	bne.n	800d7e2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d7ba:	4a3d      	ldr	r2, [pc, #244]	; (800d8b0 <inc_lock+0x118>)
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	011b      	lsls	r3, r3, #4
 800d7c0:	4413      	add	r3, r2
 800d7c2:	3304      	adds	r3, #4
 800d7c4:	681a      	ldr	r2, [r3, #0]
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d7ca:	429a      	cmp	r2, r3
 800d7cc:	d109      	bne.n	800d7e2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d7ce:	4a38      	ldr	r2, [pc, #224]	; (800d8b0 <inc_lock+0x118>)
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	011b      	lsls	r3, r3, #4
 800d7d4:	4413      	add	r3, r2
 800d7d6:	3308      	adds	r3, #8
 800d7d8:	681a      	ldr	r2, [r3, #0]
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d7de:	429a      	cmp	r2, r3
 800d7e0:	d006      	beq.n	800d7f0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	3301      	adds	r3, #1
 800d7e6:	60fb      	str	r3, [r7, #12]
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	2b01      	cmp	r3, #1
 800d7ec:	d9dc      	bls.n	800d7a8 <inc_lock+0x10>
 800d7ee:	e000      	b.n	800d7f2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d7f0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	2b02      	cmp	r3, #2
 800d7f6:	d132      	bne.n	800d85e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	60fb      	str	r3, [r7, #12]
 800d7fc:	e002      	b.n	800d804 <inc_lock+0x6c>
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	3301      	adds	r3, #1
 800d802:	60fb      	str	r3, [r7, #12]
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	2b01      	cmp	r3, #1
 800d808:	d806      	bhi.n	800d818 <inc_lock+0x80>
 800d80a:	4a29      	ldr	r2, [pc, #164]	; (800d8b0 <inc_lock+0x118>)
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	011b      	lsls	r3, r3, #4
 800d810:	4413      	add	r3, r2
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d1f2      	bne.n	800d7fe <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	2b02      	cmp	r3, #2
 800d81c:	d101      	bne.n	800d822 <inc_lock+0x8a>
 800d81e:	2300      	movs	r3, #0
 800d820:	e040      	b.n	800d8a4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681a      	ldr	r2, [r3, #0]
 800d826:	4922      	ldr	r1, [pc, #136]	; (800d8b0 <inc_lock+0x118>)
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	011b      	lsls	r3, r3, #4
 800d82c:	440b      	add	r3, r1
 800d82e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	689a      	ldr	r2, [r3, #8]
 800d834:	491e      	ldr	r1, [pc, #120]	; (800d8b0 <inc_lock+0x118>)
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	011b      	lsls	r3, r3, #4
 800d83a:	440b      	add	r3, r1
 800d83c:	3304      	adds	r3, #4
 800d83e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	695a      	ldr	r2, [r3, #20]
 800d844:	491a      	ldr	r1, [pc, #104]	; (800d8b0 <inc_lock+0x118>)
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	011b      	lsls	r3, r3, #4
 800d84a:	440b      	add	r3, r1
 800d84c:	3308      	adds	r3, #8
 800d84e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d850:	4a17      	ldr	r2, [pc, #92]	; (800d8b0 <inc_lock+0x118>)
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	011b      	lsls	r3, r3, #4
 800d856:	4413      	add	r3, r2
 800d858:	330c      	adds	r3, #12
 800d85a:	2200      	movs	r2, #0
 800d85c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d85e:	683b      	ldr	r3, [r7, #0]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d009      	beq.n	800d878 <inc_lock+0xe0>
 800d864:	4a12      	ldr	r2, [pc, #72]	; (800d8b0 <inc_lock+0x118>)
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	011b      	lsls	r3, r3, #4
 800d86a:	4413      	add	r3, r2
 800d86c:	330c      	adds	r3, #12
 800d86e:	881b      	ldrh	r3, [r3, #0]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d001      	beq.n	800d878 <inc_lock+0xe0>
 800d874:	2300      	movs	r3, #0
 800d876:	e015      	b.n	800d8a4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d878:	683b      	ldr	r3, [r7, #0]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d108      	bne.n	800d890 <inc_lock+0xf8>
 800d87e:	4a0c      	ldr	r2, [pc, #48]	; (800d8b0 <inc_lock+0x118>)
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	011b      	lsls	r3, r3, #4
 800d884:	4413      	add	r3, r2
 800d886:	330c      	adds	r3, #12
 800d888:	881b      	ldrh	r3, [r3, #0]
 800d88a:	3301      	adds	r3, #1
 800d88c:	b29a      	uxth	r2, r3
 800d88e:	e001      	b.n	800d894 <inc_lock+0xfc>
 800d890:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d894:	4906      	ldr	r1, [pc, #24]	; (800d8b0 <inc_lock+0x118>)
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	011b      	lsls	r3, r3, #4
 800d89a:	440b      	add	r3, r1
 800d89c:	330c      	adds	r3, #12
 800d89e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	3301      	adds	r3, #1
}
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	3714      	adds	r7, #20
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ae:	4770      	bx	lr
 800d8b0:	20000adc 	.word	0x20000adc

0800d8b4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d8b4:	b480      	push	{r7}
 800d8b6:	b085      	sub	sp, #20
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	3b01      	subs	r3, #1
 800d8c0:	607b      	str	r3, [r7, #4]
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	2b01      	cmp	r3, #1
 800d8c6:	d825      	bhi.n	800d914 <dec_lock+0x60>
		n = Files[i].ctr;
 800d8c8:	4a17      	ldr	r2, [pc, #92]	; (800d928 <dec_lock+0x74>)
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	011b      	lsls	r3, r3, #4
 800d8ce:	4413      	add	r3, r2
 800d8d0:	330c      	adds	r3, #12
 800d8d2:	881b      	ldrh	r3, [r3, #0]
 800d8d4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d8d6:	89fb      	ldrh	r3, [r7, #14]
 800d8d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d8dc:	d101      	bne.n	800d8e2 <dec_lock+0x2e>
 800d8de:	2300      	movs	r3, #0
 800d8e0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d8e2:	89fb      	ldrh	r3, [r7, #14]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d002      	beq.n	800d8ee <dec_lock+0x3a>
 800d8e8:	89fb      	ldrh	r3, [r7, #14]
 800d8ea:	3b01      	subs	r3, #1
 800d8ec:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d8ee:	4a0e      	ldr	r2, [pc, #56]	; (800d928 <dec_lock+0x74>)
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	011b      	lsls	r3, r3, #4
 800d8f4:	4413      	add	r3, r2
 800d8f6:	330c      	adds	r3, #12
 800d8f8:	89fa      	ldrh	r2, [r7, #14]
 800d8fa:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d8fc:	89fb      	ldrh	r3, [r7, #14]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d105      	bne.n	800d90e <dec_lock+0x5a>
 800d902:	4a09      	ldr	r2, [pc, #36]	; (800d928 <dec_lock+0x74>)
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	011b      	lsls	r3, r3, #4
 800d908:	4413      	add	r3, r2
 800d90a:	2200      	movs	r2, #0
 800d90c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d90e:	2300      	movs	r3, #0
 800d910:	737b      	strb	r3, [r7, #13]
 800d912:	e001      	b.n	800d918 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d914:	2302      	movs	r3, #2
 800d916:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d918:	7b7b      	ldrb	r3, [r7, #13]
}
 800d91a:	4618      	mov	r0, r3
 800d91c:	3714      	adds	r7, #20
 800d91e:	46bd      	mov	sp, r7
 800d920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d924:	4770      	bx	lr
 800d926:	bf00      	nop
 800d928:	20000adc 	.word	0x20000adc

0800d92c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d92c:	b480      	push	{r7}
 800d92e:	b085      	sub	sp, #20
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d934:	2300      	movs	r3, #0
 800d936:	60fb      	str	r3, [r7, #12]
 800d938:	e010      	b.n	800d95c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d93a:	4a0d      	ldr	r2, [pc, #52]	; (800d970 <clear_lock+0x44>)
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	011b      	lsls	r3, r3, #4
 800d940:	4413      	add	r3, r2
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	687a      	ldr	r2, [r7, #4]
 800d946:	429a      	cmp	r2, r3
 800d948:	d105      	bne.n	800d956 <clear_lock+0x2a>
 800d94a:	4a09      	ldr	r2, [pc, #36]	; (800d970 <clear_lock+0x44>)
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	011b      	lsls	r3, r3, #4
 800d950:	4413      	add	r3, r2
 800d952:	2200      	movs	r2, #0
 800d954:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	3301      	adds	r3, #1
 800d95a:	60fb      	str	r3, [r7, #12]
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	2b01      	cmp	r3, #1
 800d960:	d9eb      	bls.n	800d93a <clear_lock+0xe>
	}
}
 800d962:	bf00      	nop
 800d964:	bf00      	nop
 800d966:	3714      	adds	r7, #20
 800d968:	46bd      	mov	sp, r7
 800d96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96e:	4770      	bx	lr
 800d970:	20000adc 	.word	0x20000adc

0800d974 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d974:	b580      	push	{r7, lr}
 800d976:	b086      	sub	sp, #24
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d97c:	2300      	movs	r3, #0
 800d97e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	78db      	ldrb	r3, [r3, #3]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d034      	beq.n	800d9f2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d98c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	7858      	ldrb	r0, [r3, #1]
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d998:	2301      	movs	r3, #1
 800d99a:	697a      	ldr	r2, [r7, #20]
 800d99c:	f7ff fd40 	bl	800d420 <disk_write>
 800d9a0:	4603      	mov	r3, r0
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d002      	beq.n	800d9ac <sync_window+0x38>
			res = FR_DISK_ERR;
 800d9a6:	2301      	movs	r3, #1
 800d9a8:	73fb      	strb	r3, [r7, #15]
 800d9aa:	e022      	b.n	800d9f2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	2200      	movs	r2, #0
 800d9b0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9b6:	697a      	ldr	r2, [r7, #20]
 800d9b8:	1ad2      	subs	r2, r2, r3
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	69db      	ldr	r3, [r3, #28]
 800d9be:	429a      	cmp	r2, r3
 800d9c0:	d217      	bcs.n	800d9f2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	789b      	ldrb	r3, [r3, #2]
 800d9c6:	613b      	str	r3, [r7, #16]
 800d9c8:	e010      	b.n	800d9ec <sync_window+0x78>
					wsect += fs->fsize;
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	69db      	ldr	r3, [r3, #28]
 800d9ce:	697a      	ldr	r2, [r7, #20]
 800d9d0:	4413      	add	r3, r2
 800d9d2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	7858      	ldrb	r0, [r3, #1]
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d9de:	2301      	movs	r3, #1
 800d9e0:	697a      	ldr	r2, [r7, #20]
 800d9e2:	f7ff fd1d 	bl	800d420 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d9e6:	693b      	ldr	r3, [r7, #16]
 800d9e8:	3b01      	subs	r3, #1
 800d9ea:	613b      	str	r3, [r7, #16]
 800d9ec:	693b      	ldr	r3, [r7, #16]
 800d9ee:	2b01      	cmp	r3, #1
 800d9f0:	d8eb      	bhi.n	800d9ca <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d9f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	3718      	adds	r7, #24
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	bd80      	pop	{r7, pc}

0800d9fc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b084      	sub	sp, #16
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
 800da04:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800da06:	2300      	movs	r3, #0
 800da08:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da0e:	683a      	ldr	r2, [r7, #0]
 800da10:	429a      	cmp	r2, r3
 800da12:	d01b      	beq.n	800da4c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800da14:	6878      	ldr	r0, [r7, #4]
 800da16:	f7ff ffad 	bl	800d974 <sync_window>
 800da1a:	4603      	mov	r3, r0
 800da1c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800da1e:	7bfb      	ldrb	r3, [r7, #15]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d113      	bne.n	800da4c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	7858      	ldrb	r0, [r3, #1]
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800da2e:	2301      	movs	r3, #1
 800da30:	683a      	ldr	r2, [r7, #0]
 800da32:	f7ff fcd5 	bl	800d3e0 <disk_read>
 800da36:	4603      	mov	r3, r0
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d004      	beq.n	800da46 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800da3c:	f04f 33ff 	mov.w	r3, #4294967295
 800da40:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800da42:	2301      	movs	r3, #1
 800da44:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	683a      	ldr	r2, [r7, #0]
 800da4a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800da4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800da4e:	4618      	mov	r0, r3
 800da50:	3710      	adds	r7, #16
 800da52:	46bd      	mov	sp, r7
 800da54:	bd80      	pop	{r7, pc}
	...

0800da58 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800da58:	b580      	push	{r7, lr}
 800da5a:	b084      	sub	sp, #16
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800da60:	6878      	ldr	r0, [r7, #4]
 800da62:	f7ff ff87 	bl	800d974 <sync_window>
 800da66:	4603      	mov	r3, r0
 800da68:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800da6a:	7bfb      	ldrb	r3, [r7, #15]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d159      	bne.n	800db24 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	781b      	ldrb	r3, [r3, #0]
 800da74:	2b03      	cmp	r3, #3
 800da76:	d149      	bne.n	800db0c <sync_fs+0xb4>
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	791b      	ldrb	r3, [r3, #4]
 800da7c:	2b01      	cmp	r3, #1
 800da7e:	d145      	bne.n	800db0c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	899b      	ldrh	r3, [r3, #12]
 800da8a:	461a      	mov	r2, r3
 800da8c:	2100      	movs	r1, #0
 800da8e:	f7ff fda8 	bl	800d5e2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	3334      	adds	r3, #52	; 0x34
 800da96:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800da9a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800da9e:	4618      	mov	r0, r3
 800daa0:	f7ff fd37 	bl	800d512 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	3334      	adds	r3, #52	; 0x34
 800daa8:	4921      	ldr	r1, [pc, #132]	; (800db30 <sync_fs+0xd8>)
 800daaa:	4618      	mov	r0, r3
 800daac:	f7ff fd4c 	bl	800d548 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	3334      	adds	r3, #52	; 0x34
 800dab4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800dab8:	491e      	ldr	r1, [pc, #120]	; (800db34 <sync_fs+0xdc>)
 800daba:	4618      	mov	r0, r3
 800dabc:	f7ff fd44 	bl	800d548 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	3334      	adds	r3, #52	; 0x34
 800dac4:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	695b      	ldr	r3, [r3, #20]
 800dacc:	4619      	mov	r1, r3
 800dace:	4610      	mov	r0, r2
 800dad0:	f7ff fd3a 	bl	800d548 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	3334      	adds	r3, #52	; 0x34
 800dad8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	691b      	ldr	r3, [r3, #16]
 800dae0:	4619      	mov	r1, r3
 800dae2:	4610      	mov	r0, r2
 800dae4:	f7ff fd30 	bl	800d548 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	6a1b      	ldr	r3, [r3, #32]
 800daec:	1c5a      	adds	r2, r3, #1
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	7858      	ldrb	r0, [r3, #1]
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800db00:	2301      	movs	r3, #1
 800db02:	f7ff fc8d 	bl	800d420 <disk_write>
			fs->fsi_flag = 0;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	2200      	movs	r2, #0
 800db0a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	785b      	ldrb	r3, [r3, #1]
 800db10:	2200      	movs	r2, #0
 800db12:	2100      	movs	r1, #0
 800db14:	4618      	mov	r0, r3
 800db16:	f7ff fca3 	bl	800d460 <disk_ioctl>
 800db1a:	4603      	mov	r3, r0
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d001      	beq.n	800db24 <sync_fs+0xcc>
 800db20:	2301      	movs	r3, #1
 800db22:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800db24:	7bfb      	ldrb	r3, [r7, #15]
}
 800db26:	4618      	mov	r0, r3
 800db28:	3710      	adds	r7, #16
 800db2a:	46bd      	mov	sp, r7
 800db2c:	bd80      	pop	{r7, pc}
 800db2e:	bf00      	nop
 800db30:	41615252 	.word	0x41615252
 800db34:	61417272 	.word	0x61417272

0800db38 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800db38:	b480      	push	{r7}
 800db3a:	b083      	sub	sp, #12
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
 800db40:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800db42:	683b      	ldr	r3, [r7, #0]
 800db44:	3b02      	subs	r3, #2
 800db46:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	699b      	ldr	r3, [r3, #24]
 800db4c:	3b02      	subs	r3, #2
 800db4e:	683a      	ldr	r2, [r7, #0]
 800db50:	429a      	cmp	r2, r3
 800db52:	d301      	bcc.n	800db58 <clust2sect+0x20>
 800db54:	2300      	movs	r3, #0
 800db56:	e008      	b.n	800db6a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	895b      	ldrh	r3, [r3, #10]
 800db5c:	461a      	mov	r2, r3
 800db5e:	683b      	ldr	r3, [r7, #0]
 800db60:	fb03 f202 	mul.w	r2, r3, r2
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db68:	4413      	add	r3, r2
}
 800db6a:	4618      	mov	r0, r3
 800db6c:	370c      	adds	r7, #12
 800db6e:	46bd      	mov	sp, r7
 800db70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db74:	4770      	bx	lr

0800db76 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800db76:	b580      	push	{r7, lr}
 800db78:	b086      	sub	sp, #24
 800db7a:	af00      	add	r7, sp, #0
 800db7c:	6078      	str	r0, [r7, #4]
 800db7e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800db86:	683b      	ldr	r3, [r7, #0]
 800db88:	2b01      	cmp	r3, #1
 800db8a:	d904      	bls.n	800db96 <get_fat+0x20>
 800db8c:	693b      	ldr	r3, [r7, #16]
 800db8e:	699b      	ldr	r3, [r3, #24]
 800db90:	683a      	ldr	r2, [r7, #0]
 800db92:	429a      	cmp	r2, r3
 800db94:	d302      	bcc.n	800db9c <get_fat+0x26>
		val = 1;	/* Internal error */
 800db96:	2301      	movs	r3, #1
 800db98:	617b      	str	r3, [r7, #20]
 800db9a:	e0bb      	b.n	800dd14 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800db9c:	f04f 33ff 	mov.w	r3, #4294967295
 800dba0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800dba2:	693b      	ldr	r3, [r7, #16]
 800dba4:	781b      	ldrb	r3, [r3, #0]
 800dba6:	2b03      	cmp	r3, #3
 800dba8:	f000 8083 	beq.w	800dcb2 <get_fat+0x13c>
 800dbac:	2b03      	cmp	r3, #3
 800dbae:	f300 80a7 	bgt.w	800dd00 <get_fat+0x18a>
 800dbb2:	2b01      	cmp	r3, #1
 800dbb4:	d002      	beq.n	800dbbc <get_fat+0x46>
 800dbb6:	2b02      	cmp	r3, #2
 800dbb8:	d056      	beq.n	800dc68 <get_fat+0xf2>
 800dbba:	e0a1      	b.n	800dd00 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800dbbc:	683b      	ldr	r3, [r7, #0]
 800dbbe:	60fb      	str	r3, [r7, #12]
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	085b      	lsrs	r3, r3, #1
 800dbc4:	68fa      	ldr	r2, [r7, #12]
 800dbc6:	4413      	add	r3, r2
 800dbc8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dbca:	693b      	ldr	r3, [r7, #16]
 800dbcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dbce:	693b      	ldr	r3, [r7, #16]
 800dbd0:	899b      	ldrh	r3, [r3, #12]
 800dbd2:	4619      	mov	r1, r3
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	fbb3 f3f1 	udiv	r3, r3, r1
 800dbda:	4413      	add	r3, r2
 800dbdc:	4619      	mov	r1, r3
 800dbde:	6938      	ldr	r0, [r7, #16]
 800dbe0:	f7ff ff0c 	bl	800d9fc <move_window>
 800dbe4:	4603      	mov	r3, r0
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	f040 808d 	bne.w	800dd06 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	1c5a      	adds	r2, r3, #1
 800dbf0:	60fa      	str	r2, [r7, #12]
 800dbf2:	693a      	ldr	r2, [r7, #16]
 800dbf4:	8992      	ldrh	r2, [r2, #12]
 800dbf6:	fbb3 f1f2 	udiv	r1, r3, r2
 800dbfa:	fb02 f201 	mul.w	r2, r2, r1
 800dbfe:	1a9b      	subs	r3, r3, r2
 800dc00:	693a      	ldr	r2, [r7, #16]
 800dc02:	4413      	add	r3, r2
 800dc04:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dc08:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dc0a:	693b      	ldr	r3, [r7, #16]
 800dc0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dc0e:	693b      	ldr	r3, [r7, #16]
 800dc10:	899b      	ldrh	r3, [r3, #12]
 800dc12:	4619      	mov	r1, r3
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	fbb3 f3f1 	udiv	r3, r3, r1
 800dc1a:	4413      	add	r3, r2
 800dc1c:	4619      	mov	r1, r3
 800dc1e:	6938      	ldr	r0, [r7, #16]
 800dc20:	f7ff feec 	bl	800d9fc <move_window>
 800dc24:	4603      	mov	r3, r0
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d16f      	bne.n	800dd0a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800dc2a:	693b      	ldr	r3, [r7, #16]
 800dc2c:	899b      	ldrh	r3, [r3, #12]
 800dc2e:	461a      	mov	r2, r3
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	fbb3 f1f2 	udiv	r1, r3, r2
 800dc36:	fb02 f201 	mul.w	r2, r2, r1
 800dc3a:	1a9b      	subs	r3, r3, r2
 800dc3c:	693a      	ldr	r2, [r7, #16]
 800dc3e:	4413      	add	r3, r2
 800dc40:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dc44:	021b      	lsls	r3, r3, #8
 800dc46:	461a      	mov	r2, r3
 800dc48:	68bb      	ldr	r3, [r7, #8]
 800dc4a:	4313      	orrs	r3, r2
 800dc4c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800dc4e:	683b      	ldr	r3, [r7, #0]
 800dc50:	f003 0301 	and.w	r3, r3, #1
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d002      	beq.n	800dc5e <get_fat+0xe8>
 800dc58:	68bb      	ldr	r3, [r7, #8]
 800dc5a:	091b      	lsrs	r3, r3, #4
 800dc5c:	e002      	b.n	800dc64 <get_fat+0xee>
 800dc5e:	68bb      	ldr	r3, [r7, #8]
 800dc60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dc64:	617b      	str	r3, [r7, #20]
			break;
 800dc66:	e055      	b.n	800dd14 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800dc68:	693b      	ldr	r3, [r7, #16]
 800dc6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dc6c:	693b      	ldr	r3, [r7, #16]
 800dc6e:	899b      	ldrh	r3, [r3, #12]
 800dc70:	085b      	lsrs	r3, r3, #1
 800dc72:	b29b      	uxth	r3, r3
 800dc74:	4619      	mov	r1, r3
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	fbb3 f3f1 	udiv	r3, r3, r1
 800dc7c:	4413      	add	r3, r2
 800dc7e:	4619      	mov	r1, r3
 800dc80:	6938      	ldr	r0, [r7, #16]
 800dc82:	f7ff febb 	bl	800d9fc <move_window>
 800dc86:	4603      	mov	r3, r0
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d140      	bne.n	800dd0e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800dc8c:	693b      	ldr	r3, [r7, #16]
 800dc8e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800dc92:	683b      	ldr	r3, [r7, #0]
 800dc94:	005b      	lsls	r3, r3, #1
 800dc96:	693a      	ldr	r2, [r7, #16]
 800dc98:	8992      	ldrh	r2, [r2, #12]
 800dc9a:	fbb3 f0f2 	udiv	r0, r3, r2
 800dc9e:	fb02 f200 	mul.w	r2, r2, r0
 800dca2:	1a9b      	subs	r3, r3, r2
 800dca4:	440b      	add	r3, r1
 800dca6:	4618      	mov	r0, r3
 800dca8:	f7ff fbf8 	bl	800d49c <ld_word>
 800dcac:	4603      	mov	r3, r0
 800dcae:	617b      	str	r3, [r7, #20]
			break;
 800dcb0:	e030      	b.n	800dd14 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800dcb2:	693b      	ldr	r3, [r7, #16]
 800dcb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dcb6:	693b      	ldr	r3, [r7, #16]
 800dcb8:	899b      	ldrh	r3, [r3, #12]
 800dcba:	089b      	lsrs	r3, r3, #2
 800dcbc:	b29b      	uxth	r3, r3
 800dcbe:	4619      	mov	r1, r3
 800dcc0:	683b      	ldr	r3, [r7, #0]
 800dcc2:	fbb3 f3f1 	udiv	r3, r3, r1
 800dcc6:	4413      	add	r3, r2
 800dcc8:	4619      	mov	r1, r3
 800dcca:	6938      	ldr	r0, [r7, #16]
 800dccc:	f7ff fe96 	bl	800d9fc <move_window>
 800dcd0:	4603      	mov	r3, r0
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d11d      	bne.n	800dd12 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800dcd6:	693b      	ldr	r3, [r7, #16]
 800dcd8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800dcdc:	683b      	ldr	r3, [r7, #0]
 800dcde:	009b      	lsls	r3, r3, #2
 800dce0:	693a      	ldr	r2, [r7, #16]
 800dce2:	8992      	ldrh	r2, [r2, #12]
 800dce4:	fbb3 f0f2 	udiv	r0, r3, r2
 800dce8:	fb02 f200 	mul.w	r2, r2, r0
 800dcec:	1a9b      	subs	r3, r3, r2
 800dcee:	440b      	add	r3, r1
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	f7ff fbeb 	bl	800d4cc <ld_dword>
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800dcfc:	617b      	str	r3, [r7, #20]
			break;
 800dcfe:	e009      	b.n	800dd14 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800dd00:	2301      	movs	r3, #1
 800dd02:	617b      	str	r3, [r7, #20]
 800dd04:	e006      	b.n	800dd14 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dd06:	bf00      	nop
 800dd08:	e004      	b.n	800dd14 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dd0a:	bf00      	nop
 800dd0c:	e002      	b.n	800dd14 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800dd0e:	bf00      	nop
 800dd10:	e000      	b.n	800dd14 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800dd12:	bf00      	nop
		}
	}

	return val;
 800dd14:	697b      	ldr	r3, [r7, #20]
}
 800dd16:	4618      	mov	r0, r3
 800dd18:	3718      	adds	r7, #24
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	bd80      	pop	{r7, pc}

0800dd1e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800dd1e:	b590      	push	{r4, r7, lr}
 800dd20:	b089      	sub	sp, #36	; 0x24
 800dd22:	af00      	add	r7, sp, #0
 800dd24:	60f8      	str	r0, [r7, #12]
 800dd26:	60b9      	str	r1, [r7, #8]
 800dd28:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800dd2a:	2302      	movs	r3, #2
 800dd2c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800dd2e:	68bb      	ldr	r3, [r7, #8]
 800dd30:	2b01      	cmp	r3, #1
 800dd32:	f240 8102 	bls.w	800df3a <put_fat+0x21c>
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	699b      	ldr	r3, [r3, #24]
 800dd3a:	68ba      	ldr	r2, [r7, #8]
 800dd3c:	429a      	cmp	r2, r3
 800dd3e:	f080 80fc 	bcs.w	800df3a <put_fat+0x21c>
		switch (fs->fs_type) {
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	781b      	ldrb	r3, [r3, #0]
 800dd46:	2b03      	cmp	r3, #3
 800dd48:	f000 80b6 	beq.w	800deb8 <put_fat+0x19a>
 800dd4c:	2b03      	cmp	r3, #3
 800dd4e:	f300 80fd 	bgt.w	800df4c <put_fat+0x22e>
 800dd52:	2b01      	cmp	r3, #1
 800dd54:	d003      	beq.n	800dd5e <put_fat+0x40>
 800dd56:	2b02      	cmp	r3, #2
 800dd58:	f000 8083 	beq.w	800de62 <put_fat+0x144>
 800dd5c:	e0f6      	b.n	800df4c <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800dd5e:	68bb      	ldr	r3, [r7, #8]
 800dd60:	61bb      	str	r3, [r7, #24]
 800dd62:	69bb      	ldr	r3, [r7, #24]
 800dd64:	085b      	lsrs	r3, r3, #1
 800dd66:	69ba      	ldr	r2, [r7, #24]
 800dd68:	4413      	add	r3, r2
 800dd6a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	899b      	ldrh	r3, [r3, #12]
 800dd74:	4619      	mov	r1, r3
 800dd76:	69bb      	ldr	r3, [r7, #24]
 800dd78:	fbb3 f3f1 	udiv	r3, r3, r1
 800dd7c:	4413      	add	r3, r2
 800dd7e:	4619      	mov	r1, r3
 800dd80:	68f8      	ldr	r0, [r7, #12]
 800dd82:	f7ff fe3b 	bl	800d9fc <move_window>
 800dd86:	4603      	mov	r3, r0
 800dd88:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dd8a:	7ffb      	ldrb	r3, [r7, #31]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	f040 80d6 	bne.w	800df3e <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800dd98:	69bb      	ldr	r3, [r7, #24]
 800dd9a:	1c5a      	adds	r2, r3, #1
 800dd9c:	61ba      	str	r2, [r7, #24]
 800dd9e:	68fa      	ldr	r2, [r7, #12]
 800dda0:	8992      	ldrh	r2, [r2, #12]
 800dda2:	fbb3 f0f2 	udiv	r0, r3, r2
 800dda6:	fb02 f200 	mul.w	r2, r2, r0
 800ddaa:	1a9b      	subs	r3, r3, r2
 800ddac:	440b      	add	r3, r1
 800ddae:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ddb0:	68bb      	ldr	r3, [r7, #8]
 800ddb2:	f003 0301 	and.w	r3, r3, #1
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d00d      	beq.n	800ddd6 <put_fat+0xb8>
 800ddba:	697b      	ldr	r3, [r7, #20]
 800ddbc:	781b      	ldrb	r3, [r3, #0]
 800ddbe:	b25b      	sxtb	r3, r3
 800ddc0:	f003 030f 	and.w	r3, r3, #15
 800ddc4:	b25a      	sxtb	r2, r3
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	b2db      	uxtb	r3, r3
 800ddca:	011b      	lsls	r3, r3, #4
 800ddcc:	b25b      	sxtb	r3, r3
 800ddce:	4313      	orrs	r3, r2
 800ddd0:	b25b      	sxtb	r3, r3
 800ddd2:	b2db      	uxtb	r3, r3
 800ddd4:	e001      	b.n	800ddda <put_fat+0xbc>
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	b2db      	uxtb	r3, r3
 800ddda:	697a      	ldr	r2, [r7, #20]
 800dddc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	2201      	movs	r2, #1
 800dde2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	899b      	ldrh	r3, [r3, #12]
 800ddec:	4619      	mov	r1, r3
 800ddee:	69bb      	ldr	r3, [r7, #24]
 800ddf0:	fbb3 f3f1 	udiv	r3, r3, r1
 800ddf4:	4413      	add	r3, r2
 800ddf6:	4619      	mov	r1, r3
 800ddf8:	68f8      	ldr	r0, [r7, #12]
 800ddfa:	f7ff fdff 	bl	800d9fc <move_window>
 800ddfe:	4603      	mov	r3, r0
 800de00:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800de02:	7ffb      	ldrb	r3, [r7, #31]
 800de04:	2b00      	cmp	r3, #0
 800de06:	f040 809c 	bne.w	800df42 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	899b      	ldrh	r3, [r3, #12]
 800de14:	461a      	mov	r2, r3
 800de16:	69bb      	ldr	r3, [r7, #24]
 800de18:	fbb3 f0f2 	udiv	r0, r3, r2
 800de1c:	fb02 f200 	mul.w	r2, r2, r0
 800de20:	1a9b      	subs	r3, r3, r2
 800de22:	440b      	add	r3, r1
 800de24:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800de26:	68bb      	ldr	r3, [r7, #8]
 800de28:	f003 0301 	and.w	r3, r3, #1
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d003      	beq.n	800de38 <put_fat+0x11a>
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	091b      	lsrs	r3, r3, #4
 800de34:	b2db      	uxtb	r3, r3
 800de36:	e00e      	b.n	800de56 <put_fat+0x138>
 800de38:	697b      	ldr	r3, [r7, #20]
 800de3a:	781b      	ldrb	r3, [r3, #0]
 800de3c:	b25b      	sxtb	r3, r3
 800de3e:	f023 030f 	bic.w	r3, r3, #15
 800de42:	b25a      	sxtb	r2, r3
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	0a1b      	lsrs	r3, r3, #8
 800de48:	b25b      	sxtb	r3, r3
 800de4a:	f003 030f 	and.w	r3, r3, #15
 800de4e:	b25b      	sxtb	r3, r3
 800de50:	4313      	orrs	r3, r2
 800de52:	b25b      	sxtb	r3, r3
 800de54:	b2db      	uxtb	r3, r3
 800de56:	697a      	ldr	r2, [r7, #20]
 800de58:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	2201      	movs	r2, #1
 800de5e:	70da      	strb	r2, [r3, #3]
			break;
 800de60:	e074      	b.n	800df4c <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	899b      	ldrh	r3, [r3, #12]
 800de6a:	085b      	lsrs	r3, r3, #1
 800de6c:	b29b      	uxth	r3, r3
 800de6e:	4619      	mov	r1, r3
 800de70:	68bb      	ldr	r3, [r7, #8]
 800de72:	fbb3 f3f1 	udiv	r3, r3, r1
 800de76:	4413      	add	r3, r2
 800de78:	4619      	mov	r1, r3
 800de7a:	68f8      	ldr	r0, [r7, #12]
 800de7c:	f7ff fdbe 	bl	800d9fc <move_window>
 800de80:	4603      	mov	r3, r0
 800de82:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800de84:	7ffb      	ldrb	r3, [r7, #31]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d15d      	bne.n	800df46 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800de90:	68bb      	ldr	r3, [r7, #8]
 800de92:	005b      	lsls	r3, r3, #1
 800de94:	68fa      	ldr	r2, [r7, #12]
 800de96:	8992      	ldrh	r2, [r2, #12]
 800de98:	fbb3 f0f2 	udiv	r0, r3, r2
 800de9c:	fb02 f200 	mul.w	r2, r2, r0
 800dea0:	1a9b      	subs	r3, r3, r2
 800dea2:	440b      	add	r3, r1
 800dea4:	687a      	ldr	r2, [r7, #4]
 800dea6:	b292      	uxth	r2, r2
 800dea8:	4611      	mov	r1, r2
 800deaa:	4618      	mov	r0, r3
 800deac:	f7ff fb31 	bl	800d512 <st_word>
			fs->wflag = 1;
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	2201      	movs	r2, #1
 800deb4:	70da      	strb	r2, [r3, #3]
			break;
 800deb6:	e049      	b.n	800df4c <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	899b      	ldrh	r3, [r3, #12]
 800dec0:	089b      	lsrs	r3, r3, #2
 800dec2:	b29b      	uxth	r3, r3
 800dec4:	4619      	mov	r1, r3
 800dec6:	68bb      	ldr	r3, [r7, #8]
 800dec8:	fbb3 f3f1 	udiv	r3, r3, r1
 800decc:	4413      	add	r3, r2
 800dece:	4619      	mov	r1, r3
 800ded0:	68f8      	ldr	r0, [r7, #12]
 800ded2:	f7ff fd93 	bl	800d9fc <move_window>
 800ded6:	4603      	mov	r3, r0
 800ded8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800deda:	7ffb      	ldrb	r3, [r7, #31]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d134      	bne.n	800df4a <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800deec:	68bb      	ldr	r3, [r7, #8]
 800deee:	009b      	lsls	r3, r3, #2
 800def0:	68fa      	ldr	r2, [r7, #12]
 800def2:	8992      	ldrh	r2, [r2, #12]
 800def4:	fbb3 f0f2 	udiv	r0, r3, r2
 800def8:	fb02 f200 	mul.w	r2, r2, r0
 800defc:	1a9b      	subs	r3, r3, r2
 800defe:	440b      	add	r3, r1
 800df00:	4618      	mov	r0, r3
 800df02:	f7ff fae3 	bl	800d4cc <ld_dword>
 800df06:	4603      	mov	r3, r0
 800df08:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800df0c:	4323      	orrs	r3, r4
 800df0e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800df16:	68bb      	ldr	r3, [r7, #8]
 800df18:	009b      	lsls	r3, r3, #2
 800df1a:	68fa      	ldr	r2, [r7, #12]
 800df1c:	8992      	ldrh	r2, [r2, #12]
 800df1e:	fbb3 f0f2 	udiv	r0, r3, r2
 800df22:	fb02 f200 	mul.w	r2, r2, r0
 800df26:	1a9b      	subs	r3, r3, r2
 800df28:	440b      	add	r3, r1
 800df2a:	6879      	ldr	r1, [r7, #4]
 800df2c:	4618      	mov	r0, r3
 800df2e:	f7ff fb0b 	bl	800d548 <st_dword>
			fs->wflag = 1;
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	2201      	movs	r2, #1
 800df36:	70da      	strb	r2, [r3, #3]
			break;
 800df38:	e008      	b.n	800df4c <put_fat+0x22e>
		}
	}
 800df3a:	bf00      	nop
 800df3c:	e006      	b.n	800df4c <put_fat+0x22e>
			if (res != FR_OK) break;
 800df3e:	bf00      	nop
 800df40:	e004      	b.n	800df4c <put_fat+0x22e>
			if (res != FR_OK) break;
 800df42:	bf00      	nop
 800df44:	e002      	b.n	800df4c <put_fat+0x22e>
			if (res != FR_OK) break;
 800df46:	bf00      	nop
 800df48:	e000      	b.n	800df4c <put_fat+0x22e>
			if (res != FR_OK) break;
 800df4a:	bf00      	nop
	return res;
 800df4c:	7ffb      	ldrb	r3, [r7, #31]
}
 800df4e:	4618      	mov	r0, r3
 800df50:	3724      	adds	r7, #36	; 0x24
 800df52:	46bd      	mov	sp, r7
 800df54:	bd90      	pop	{r4, r7, pc}

0800df56 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800df56:	b580      	push	{r7, lr}
 800df58:	b088      	sub	sp, #32
 800df5a:	af00      	add	r7, sp, #0
 800df5c:	60f8      	str	r0, [r7, #12]
 800df5e:	60b9      	str	r1, [r7, #8]
 800df60:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800df62:	2300      	movs	r3, #0
 800df64:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800df6c:	68bb      	ldr	r3, [r7, #8]
 800df6e:	2b01      	cmp	r3, #1
 800df70:	d904      	bls.n	800df7c <remove_chain+0x26>
 800df72:	69bb      	ldr	r3, [r7, #24]
 800df74:	699b      	ldr	r3, [r3, #24]
 800df76:	68ba      	ldr	r2, [r7, #8]
 800df78:	429a      	cmp	r2, r3
 800df7a:	d301      	bcc.n	800df80 <remove_chain+0x2a>
 800df7c:	2302      	movs	r3, #2
 800df7e:	e04b      	b.n	800e018 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d00c      	beq.n	800dfa0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800df86:	f04f 32ff 	mov.w	r2, #4294967295
 800df8a:	6879      	ldr	r1, [r7, #4]
 800df8c:	69b8      	ldr	r0, [r7, #24]
 800df8e:	f7ff fec6 	bl	800dd1e <put_fat>
 800df92:	4603      	mov	r3, r0
 800df94:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800df96:	7ffb      	ldrb	r3, [r7, #31]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d001      	beq.n	800dfa0 <remove_chain+0x4a>
 800df9c:	7ffb      	ldrb	r3, [r7, #31]
 800df9e:	e03b      	b.n	800e018 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800dfa0:	68b9      	ldr	r1, [r7, #8]
 800dfa2:	68f8      	ldr	r0, [r7, #12]
 800dfa4:	f7ff fde7 	bl	800db76 <get_fat>
 800dfa8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800dfaa:	697b      	ldr	r3, [r7, #20]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d031      	beq.n	800e014 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800dfb0:	697b      	ldr	r3, [r7, #20]
 800dfb2:	2b01      	cmp	r3, #1
 800dfb4:	d101      	bne.n	800dfba <remove_chain+0x64>
 800dfb6:	2302      	movs	r3, #2
 800dfb8:	e02e      	b.n	800e018 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800dfba:	697b      	ldr	r3, [r7, #20]
 800dfbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfc0:	d101      	bne.n	800dfc6 <remove_chain+0x70>
 800dfc2:	2301      	movs	r3, #1
 800dfc4:	e028      	b.n	800e018 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	68b9      	ldr	r1, [r7, #8]
 800dfca:	69b8      	ldr	r0, [r7, #24]
 800dfcc:	f7ff fea7 	bl	800dd1e <put_fat>
 800dfd0:	4603      	mov	r3, r0
 800dfd2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800dfd4:	7ffb      	ldrb	r3, [r7, #31]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d001      	beq.n	800dfde <remove_chain+0x88>
 800dfda:	7ffb      	ldrb	r3, [r7, #31]
 800dfdc:	e01c      	b.n	800e018 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800dfde:	69bb      	ldr	r3, [r7, #24]
 800dfe0:	695a      	ldr	r2, [r3, #20]
 800dfe2:	69bb      	ldr	r3, [r7, #24]
 800dfe4:	699b      	ldr	r3, [r3, #24]
 800dfe6:	3b02      	subs	r3, #2
 800dfe8:	429a      	cmp	r2, r3
 800dfea:	d20b      	bcs.n	800e004 <remove_chain+0xae>
			fs->free_clst++;
 800dfec:	69bb      	ldr	r3, [r7, #24]
 800dfee:	695b      	ldr	r3, [r3, #20]
 800dff0:	1c5a      	adds	r2, r3, #1
 800dff2:	69bb      	ldr	r3, [r7, #24]
 800dff4:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800dff6:	69bb      	ldr	r3, [r7, #24]
 800dff8:	791b      	ldrb	r3, [r3, #4]
 800dffa:	f043 0301 	orr.w	r3, r3, #1
 800dffe:	b2da      	uxtb	r2, r3
 800e000:	69bb      	ldr	r3, [r7, #24]
 800e002:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800e004:	697b      	ldr	r3, [r7, #20]
 800e006:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800e008:	69bb      	ldr	r3, [r7, #24]
 800e00a:	699b      	ldr	r3, [r3, #24]
 800e00c:	68ba      	ldr	r2, [r7, #8]
 800e00e:	429a      	cmp	r2, r3
 800e010:	d3c6      	bcc.n	800dfa0 <remove_chain+0x4a>
 800e012:	e000      	b.n	800e016 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800e014:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800e016:	2300      	movs	r3, #0
}
 800e018:	4618      	mov	r0, r3
 800e01a:	3720      	adds	r7, #32
 800e01c:	46bd      	mov	sp, r7
 800e01e:	bd80      	pop	{r7, pc}

0800e020 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800e020:	b580      	push	{r7, lr}
 800e022:	b088      	sub	sp, #32
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
 800e028:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800e030:	683b      	ldr	r3, [r7, #0]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d10d      	bne.n	800e052 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800e036:	693b      	ldr	r3, [r7, #16]
 800e038:	691b      	ldr	r3, [r3, #16]
 800e03a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800e03c:	69bb      	ldr	r3, [r7, #24]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d004      	beq.n	800e04c <create_chain+0x2c>
 800e042:	693b      	ldr	r3, [r7, #16]
 800e044:	699b      	ldr	r3, [r3, #24]
 800e046:	69ba      	ldr	r2, [r7, #24]
 800e048:	429a      	cmp	r2, r3
 800e04a:	d31b      	bcc.n	800e084 <create_chain+0x64>
 800e04c:	2301      	movs	r3, #1
 800e04e:	61bb      	str	r3, [r7, #24]
 800e050:	e018      	b.n	800e084 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800e052:	6839      	ldr	r1, [r7, #0]
 800e054:	6878      	ldr	r0, [r7, #4]
 800e056:	f7ff fd8e 	bl	800db76 <get_fat>
 800e05a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	2b01      	cmp	r3, #1
 800e060:	d801      	bhi.n	800e066 <create_chain+0x46>
 800e062:	2301      	movs	r3, #1
 800e064:	e070      	b.n	800e148 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e06c:	d101      	bne.n	800e072 <create_chain+0x52>
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	e06a      	b.n	800e148 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800e072:	693b      	ldr	r3, [r7, #16]
 800e074:	699b      	ldr	r3, [r3, #24]
 800e076:	68fa      	ldr	r2, [r7, #12]
 800e078:	429a      	cmp	r2, r3
 800e07a:	d201      	bcs.n	800e080 <create_chain+0x60>
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	e063      	b.n	800e148 <create_chain+0x128>
		scl = clst;
 800e080:	683b      	ldr	r3, [r7, #0]
 800e082:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800e084:	69bb      	ldr	r3, [r7, #24]
 800e086:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800e088:	69fb      	ldr	r3, [r7, #28]
 800e08a:	3301      	adds	r3, #1
 800e08c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800e08e:	693b      	ldr	r3, [r7, #16]
 800e090:	699b      	ldr	r3, [r3, #24]
 800e092:	69fa      	ldr	r2, [r7, #28]
 800e094:	429a      	cmp	r2, r3
 800e096:	d307      	bcc.n	800e0a8 <create_chain+0x88>
				ncl = 2;
 800e098:	2302      	movs	r3, #2
 800e09a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800e09c:	69fa      	ldr	r2, [r7, #28]
 800e09e:	69bb      	ldr	r3, [r7, #24]
 800e0a0:	429a      	cmp	r2, r3
 800e0a2:	d901      	bls.n	800e0a8 <create_chain+0x88>
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	e04f      	b.n	800e148 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800e0a8:	69f9      	ldr	r1, [r7, #28]
 800e0aa:	6878      	ldr	r0, [r7, #4]
 800e0ac:	f7ff fd63 	bl	800db76 <get_fat>
 800e0b0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d00e      	beq.n	800e0d6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	2b01      	cmp	r3, #1
 800e0bc:	d003      	beq.n	800e0c6 <create_chain+0xa6>
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0c4:	d101      	bne.n	800e0ca <create_chain+0xaa>
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	e03e      	b.n	800e148 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800e0ca:	69fa      	ldr	r2, [r7, #28]
 800e0cc:	69bb      	ldr	r3, [r7, #24]
 800e0ce:	429a      	cmp	r2, r3
 800e0d0:	d1da      	bne.n	800e088 <create_chain+0x68>
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	e038      	b.n	800e148 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800e0d6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800e0d8:	f04f 32ff 	mov.w	r2, #4294967295
 800e0dc:	69f9      	ldr	r1, [r7, #28]
 800e0de:	6938      	ldr	r0, [r7, #16]
 800e0e0:	f7ff fe1d 	bl	800dd1e <put_fat>
 800e0e4:	4603      	mov	r3, r0
 800e0e6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800e0e8:	7dfb      	ldrb	r3, [r7, #23]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d109      	bne.n	800e102 <create_chain+0xe2>
 800e0ee:	683b      	ldr	r3, [r7, #0]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d006      	beq.n	800e102 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800e0f4:	69fa      	ldr	r2, [r7, #28]
 800e0f6:	6839      	ldr	r1, [r7, #0]
 800e0f8:	6938      	ldr	r0, [r7, #16]
 800e0fa:	f7ff fe10 	bl	800dd1e <put_fat>
 800e0fe:	4603      	mov	r3, r0
 800e100:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800e102:	7dfb      	ldrb	r3, [r7, #23]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d116      	bne.n	800e136 <create_chain+0x116>
		fs->last_clst = ncl;
 800e108:	693b      	ldr	r3, [r7, #16]
 800e10a:	69fa      	ldr	r2, [r7, #28]
 800e10c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800e10e:	693b      	ldr	r3, [r7, #16]
 800e110:	695a      	ldr	r2, [r3, #20]
 800e112:	693b      	ldr	r3, [r7, #16]
 800e114:	699b      	ldr	r3, [r3, #24]
 800e116:	3b02      	subs	r3, #2
 800e118:	429a      	cmp	r2, r3
 800e11a:	d804      	bhi.n	800e126 <create_chain+0x106>
 800e11c:	693b      	ldr	r3, [r7, #16]
 800e11e:	695b      	ldr	r3, [r3, #20]
 800e120:	1e5a      	subs	r2, r3, #1
 800e122:	693b      	ldr	r3, [r7, #16]
 800e124:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800e126:	693b      	ldr	r3, [r7, #16]
 800e128:	791b      	ldrb	r3, [r3, #4]
 800e12a:	f043 0301 	orr.w	r3, r3, #1
 800e12e:	b2da      	uxtb	r2, r3
 800e130:	693b      	ldr	r3, [r7, #16]
 800e132:	711a      	strb	r2, [r3, #4]
 800e134:	e007      	b.n	800e146 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800e136:	7dfb      	ldrb	r3, [r7, #23]
 800e138:	2b01      	cmp	r3, #1
 800e13a:	d102      	bne.n	800e142 <create_chain+0x122>
 800e13c:	f04f 33ff 	mov.w	r3, #4294967295
 800e140:	e000      	b.n	800e144 <create_chain+0x124>
 800e142:	2301      	movs	r3, #1
 800e144:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800e146:	69fb      	ldr	r3, [r7, #28]
}
 800e148:	4618      	mov	r0, r3
 800e14a:	3720      	adds	r7, #32
 800e14c:	46bd      	mov	sp, r7
 800e14e:	bd80      	pop	{r7, pc}

0800e150 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800e150:	b480      	push	{r7}
 800e152:	b087      	sub	sp, #28
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
 800e158:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e164:	3304      	adds	r3, #4
 800e166:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	899b      	ldrh	r3, [r3, #12]
 800e16c:	461a      	mov	r2, r3
 800e16e:	683b      	ldr	r3, [r7, #0]
 800e170:	fbb3 f3f2 	udiv	r3, r3, r2
 800e174:	68fa      	ldr	r2, [r7, #12]
 800e176:	8952      	ldrh	r2, [r2, #10]
 800e178:	fbb3 f3f2 	udiv	r3, r3, r2
 800e17c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e17e:	693b      	ldr	r3, [r7, #16]
 800e180:	1d1a      	adds	r2, r3, #4
 800e182:	613a      	str	r2, [r7, #16]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800e188:	68bb      	ldr	r3, [r7, #8]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d101      	bne.n	800e192 <clmt_clust+0x42>
 800e18e:	2300      	movs	r3, #0
 800e190:	e010      	b.n	800e1b4 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800e192:	697a      	ldr	r2, [r7, #20]
 800e194:	68bb      	ldr	r3, [r7, #8]
 800e196:	429a      	cmp	r2, r3
 800e198:	d307      	bcc.n	800e1aa <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800e19a:	697a      	ldr	r2, [r7, #20]
 800e19c:	68bb      	ldr	r3, [r7, #8]
 800e19e:	1ad3      	subs	r3, r2, r3
 800e1a0:	617b      	str	r3, [r7, #20]
 800e1a2:	693b      	ldr	r3, [r7, #16]
 800e1a4:	3304      	adds	r3, #4
 800e1a6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e1a8:	e7e9      	b.n	800e17e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800e1aa:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800e1ac:	693b      	ldr	r3, [r7, #16]
 800e1ae:	681a      	ldr	r2, [r3, #0]
 800e1b0:	697b      	ldr	r3, [r7, #20]
 800e1b2:	4413      	add	r3, r2
}
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	371c      	adds	r7, #28
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1be:	4770      	bx	lr

0800e1c0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	b086      	sub	sp, #24
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	6078      	str	r0, [r7, #4]
 800e1c8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800e1d0:	683b      	ldr	r3, [r7, #0]
 800e1d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e1d6:	d204      	bcs.n	800e1e2 <dir_sdi+0x22>
 800e1d8:	683b      	ldr	r3, [r7, #0]
 800e1da:	f003 031f 	and.w	r3, r3, #31
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d001      	beq.n	800e1e6 <dir_sdi+0x26>
		return FR_INT_ERR;
 800e1e2:	2302      	movs	r3, #2
 800e1e4:	e071      	b.n	800e2ca <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	683a      	ldr	r2, [r7, #0]
 800e1ea:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	689b      	ldr	r3, [r3, #8]
 800e1f0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800e1f2:	697b      	ldr	r3, [r7, #20]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d106      	bne.n	800e206 <dir_sdi+0x46>
 800e1f8:	693b      	ldr	r3, [r7, #16]
 800e1fa:	781b      	ldrb	r3, [r3, #0]
 800e1fc:	2b02      	cmp	r3, #2
 800e1fe:	d902      	bls.n	800e206 <dir_sdi+0x46>
		clst = fs->dirbase;
 800e200:	693b      	ldr	r3, [r7, #16]
 800e202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e204:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e206:	697b      	ldr	r3, [r7, #20]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d10c      	bne.n	800e226 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800e20c:	683b      	ldr	r3, [r7, #0]
 800e20e:	095b      	lsrs	r3, r3, #5
 800e210:	693a      	ldr	r2, [r7, #16]
 800e212:	8912      	ldrh	r2, [r2, #8]
 800e214:	4293      	cmp	r3, r2
 800e216:	d301      	bcc.n	800e21c <dir_sdi+0x5c>
 800e218:	2302      	movs	r3, #2
 800e21a:	e056      	b.n	800e2ca <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800e21c:	693b      	ldr	r3, [r7, #16]
 800e21e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	61da      	str	r2, [r3, #28]
 800e224:	e02d      	b.n	800e282 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800e226:	693b      	ldr	r3, [r7, #16]
 800e228:	895b      	ldrh	r3, [r3, #10]
 800e22a:	461a      	mov	r2, r3
 800e22c:	693b      	ldr	r3, [r7, #16]
 800e22e:	899b      	ldrh	r3, [r3, #12]
 800e230:	fb03 f302 	mul.w	r3, r3, r2
 800e234:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e236:	e019      	b.n	800e26c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	6979      	ldr	r1, [r7, #20]
 800e23c:	4618      	mov	r0, r3
 800e23e:	f7ff fc9a 	bl	800db76 <get_fat>
 800e242:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e244:	697b      	ldr	r3, [r7, #20]
 800e246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e24a:	d101      	bne.n	800e250 <dir_sdi+0x90>
 800e24c:	2301      	movs	r3, #1
 800e24e:	e03c      	b.n	800e2ca <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800e250:	697b      	ldr	r3, [r7, #20]
 800e252:	2b01      	cmp	r3, #1
 800e254:	d904      	bls.n	800e260 <dir_sdi+0xa0>
 800e256:	693b      	ldr	r3, [r7, #16]
 800e258:	699b      	ldr	r3, [r3, #24]
 800e25a:	697a      	ldr	r2, [r7, #20]
 800e25c:	429a      	cmp	r2, r3
 800e25e:	d301      	bcc.n	800e264 <dir_sdi+0xa4>
 800e260:	2302      	movs	r3, #2
 800e262:	e032      	b.n	800e2ca <dir_sdi+0x10a>
			ofs -= csz;
 800e264:	683a      	ldr	r2, [r7, #0]
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	1ad3      	subs	r3, r2, r3
 800e26a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e26c:	683a      	ldr	r2, [r7, #0]
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	429a      	cmp	r2, r3
 800e272:	d2e1      	bcs.n	800e238 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800e274:	6979      	ldr	r1, [r7, #20]
 800e276:	6938      	ldr	r0, [r7, #16]
 800e278:	f7ff fc5e 	bl	800db38 <clust2sect>
 800e27c:	4602      	mov	r2, r0
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	697a      	ldr	r2, [r7, #20]
 800e286:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	69db      	ldr	r3, [r3, #28]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d101      	bne.n	800e294 <dir_sdi+0xd4>
 800e290:	2302      	movs	r3, #2
 800e292:	e01a      	b.n	800e2ca <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	69da      	ldr	r2, [r3, #28]
 800e298:	693b      	ldr	r3, [r7, #16]
 800e29a:	899b      	ldrh	r3, [r3, #12]
 800e29c:	4619      	mov	r1, r3
 800e29e:	683b      	ldr	r3, [r7, #0]
 800e2a0:	fbb3 f3f1 	udiv	r3, r3, r1
 800e2a4:	441a      	add	r2, r3
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e2aa:	693b      	ldr	r3, [r7, #16]
 800e2ac:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e2b0:	693b      	ldr	r3, [r7, #16]
 800e2b2:	899b      	ldrh	r3, [r3, #12]
 800e2b4:	461a      	mov	r2, r3
 800e2b6:	683b      	ldr	r3, [r7, #0]
 800e2b8:	fbb3 f0f2 	udiv	r0, r3, r2
 800e2bc:	fb02 f200 	mul.w	r2, r2, r0
 800e2c0:	1a9b      	subs	r3, r3, r2
 800e2c2:	18ca      	adds	r2, r1, r3
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e2c8:	2300      	movs	r3, #0
}
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	3718      	adds	r7, #24
 800e2ce:	46bd      	mov	sp, r7
 800e2d0:	bd80      	pop	{r7, pc}

0800e2d2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e2d2:	b580      	push	{r7, lr}
 800e2d4:	b086      	sub	sp, #24
 800e2d6:	af00      	add	r7, sp, #0
 800e2d8:	6078      	str	r0, [r7, #4]
 800e2da:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	695b      	ldr	r3, [r3, #20]
 800e2e6:	3320      	adds	r3, #32
 800e2e8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	69db      	ldr	r3, [r3, #28]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d003      	beq.n	800e2fa <dir_next+0x28>
 800e2f2:	68bb      	ldr	r3, [r7, #8]
 800e2f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e2f8:	d301      	bcc.n	800e2fe <dir_next+0x2c>
 800e2fa:	2304      	movs	r3, #4
 800e2fc:	e0bb      	b.n	800e476 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	899b      	ldrh	r3, [r3, #12]
 800e302:	461a      	mov	r2, r3
 800e304:	68bb      	ldr	r3, [r7, #8]
 800e306:	fbb3 f1f2 	udiv	r1, r3, r2
 800e30a:	fb02 f201 	mul.w	r2, r2, r1
 800e30e:	1a9b      	subs	r3, r3, r2
 800e310:	2b00      	cmp	r3, #0
 800e312:	f040 809d 	bne.w	800e450 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	69db      	ldr	r3, [r3, #28]
 800e31a:	1c5a      	adds	r2, r3, #1
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	699b      	ldr	r3, [r3, #24]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d10b      	bne.n	800e340 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e328:	68bb      	ldr	r3, [r7, #8]
 800e32a:	095b      	lsrs	r3, r3, #5
 800e32c:	68fa      	ldr	r2, [r7, #12]
 800e32e:	8912      	ldrh	r2, [r2, #8]
 800e330:	4293      	cmp	r3, r2
 800e332:	f0c0 808d 	bcc.w	800e450 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	2200      	movs	r2, #0
 800e33a:	61da      	str	r2, [r3, #28]
 800e33c:	2304      	movs	r3, #4
 800e33e:	e09a      	b.n	800e476 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	899b      	ldrh	r3, [r3, #12]
 800e344:	461a      	mov	r2, r3
 800e346:	68bb      	ldr	r3, [r7, #8]
 800e348:	fbb3 f3f2 	udiv	r3, r3, r2
 800e34c:	68fa      	ldr	r2, [r7, #12]
 800e34e:	8952      	ldrh	r2, [r2, #10]
 800e350:	3a01      	subs	r2, #1
 800e352:	4013      	ands	r3, r2
 800e354:	2b00      	cmp	r3, #0
 800e356:	d17b      	bne.n	800e450 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e358:	687a      	ldr	r2, [r7, #4]
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	699b      	ldr	r3, [r3, #24]
 800e35e:	4619      	mov	r1, r3
 800e360:	4610      	mov	r0, r2
 800e362:	f7ff fc08 	bl	800db76 <get_fat>
 800e366:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e368:	697b      	ldr	r3, [r7, #20]
 800e36a:	2b01      	cmp	r3, #1
 800e36c:	d801      	bhi.n	800e372 <dir_next+0xa0>
 800e36e:	2302      	movs	r3, #2
 800e370:	e081      	b.n	800e476 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e372:	697b      	ldr	r3, [r7, #20]
 800e374:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e378:	d101      	bne.n	800e37e <dir_next+0xac>
 800e37a:	2301      	movs	r3, #1
 800e37c:	e07b      	b.n	800e476 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	699b      	ldr	r3, [r3, #24]
 800e382:	697a      	ldr	r2, [r7, #20]
 800e384:	429a      	cmp	r2, r3
 800e386:	d359      	bcc.n	800e43c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800e388:	683b      	ldr	r3, [r7, #0]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d104      	bne.n	800e398 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	2200      	movs	r2, #0
 800e392:	61da      	str	r2, [r3, #28]
 800e394:	2304      	movs	r3, #4
 800e396:	e06e      	b.n	800e476 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800e398:	687a      	ldr	r2, [r7, #4]
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	699b      	ldr	r3, [r3, #24]
 800e39e:	4619      	mov	r1, r3
 800e3a0:	4610      	mov	r0, r2
 800e3a2:	f7ff fe3d 	bl	800e020 <create_chain>
 800e3a6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e3a8:	697b      	ldr	r3, [r7, #20]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d101      	bne.n	800e3b2 <dir_next+0xe0>
 800e3ae:	2307      	movs	r3, #7
 800e3b0:	e061      	b.n	800e476 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800e3b2:	697b      	ldr	r3, [r7, #20]
 800e3b4:	2b01      	cmp	r3, #1
 800e3b6:	d101      	bne.n	800e3bc <dir_next+0xea>
 800e3b8:	2302      	movs	r3, #2
 800e3ba:	e05c      	b.n	800e476 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e3bc:	697b      	ldr	r3, [r7, #20]
 800e3be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3c2:	d101      	bne.n	800e3c8 <dir_next+0xf6>
 800e3c4:	2301      	movs	r3, #1
 800e3c6:	e056      	b.n	800e476 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800e3c8:	68f8      	ldr	r0, [r7, #12]
 800e3ca:	f7ff fad3 	bl	800d974 <sync_window>
 800e3ce:	4603      	mov	r3, r0
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d001      	beq.n	800e3d8 <dir_next+0x106>
 800e3d4:	2301      	movs	r3, #1
 800e3d6:	e04e      	b.n	800e476 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	899b      	ldrh	r3, [r3, #12]
 800e3e2:	461a      	mov	r2, r3
 800e3e4:	2100      	movs	r1, #0
 800e3e6:	f7ff f8fc 	bl	800d5e2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	613b      	str	r3, [r7, #16]
 800e3ee:	6979      	ldr	r1, [r7, #20]
 800e3f0:	68f8      	ldr	r0, [r7, #12]
 800e3f2:	f7ff fba1 	bl	800db38 <clust2sect>
 800e3f6:	4602      	mov	r2, r0
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	631a      	str	r2, [r3, #48]	; 0x30
 800e3fc:	e012      	b.n	800e424 <dir_next+0x152>
						fs->wflag = 1;
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	2201      	movs	r2, #1
 800e402:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800e404:	68f8      	ldr	r0, [r7, #12]
 800e406:	f7ff fab5 	bl	800d974 <sync_window>
 800e40a:	4603      	mov	r3, r0
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d001      	beq.n	800e414 <dir_next+0x142>
 800e410:	2301      	movs	r3, #1
 800e412:	e030      	b.n	800e476 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e414:	693b      	ldr	r3, [r7, #16]
 800e416:	3301      	adds	r3, #1
 800e418:	613b      	str	r3, [r7, #16]
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e41e:	1c5a      	adds	r2, r3, #1
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	631a      	str	r2, [r3, #48]	; 0x30
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	895b      	ldrh	r3, [r3, #10]
 800e428:	461a      	mov	r2, r3
 800e42a:	693b      	ldr	r3, [r7, #16]
 800e42c:	4293      	cmp	r3, r2
 800e42e:	d3e6      	bcc.n	800e3fe <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e434:	693b      	ldr	r3, [r7, #16]
 800e436:	1ad2      	subs	r2, r2, r3
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	697a      	ldr	r2, [r7, #20]
 800e440:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800e442:	6979      	ldr	r1, [r7, #20]
 800e444:	68f8      	ldr	r0, [r7, #12]
 800e446:	f7ff fb77 	bl	800db38 <clust2sect>
 800e44a:	4602      	mov	r2, r0
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	68ba      	ldr	r2, [r7, #8]
 800e454:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	899b      	ldrh	r3, [r3, #12]
 800e460:	461a      	mov	r2, r3
 800e462:	68bb      	ldr	r3, [r7, #8]
 800e464:	fbb3 f0f2 	udiv	r0, r3, r2
 800e468:	fb02 f200 	mul.w	r2, r2, r0
 800e46c:	1a9b      	subs	r3, r3, r2
 800e46e:	18ca      	adds	r2, r1, r3
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e474:	2300      	movs	r3, #0
}
 800e476:	4618      	mov	r0, r3
 800e478:	3718      	adds	r7, #24
 800e47a:	46bd      	mov	sp, r7
 800e47c:	bd80      	pop	{r7, pc}

0800e47e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800e47e:	b580      	push	{r7, lr}
 800e480:	b086      	sub	sp, #24
 800e482:	af00      	add	r7, sp, #0
 800e484:	6078      	str	r0, [r7, #4]
 800e486:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800e48e:	2100      	movs	r1, #0
 800e490:	6878      	ldr	r0, [r7, #4]
 800e492:	f7ff fe95 	bl	800e1c0 <dir_sdi>
 800e496:	4603      	mov	r3, r0
 800e498:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e49a:	7dfb      	ldrb	r3, [r7, #23]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d12b      	bne.n	800e4f8 <dir_alloc+0x7a>
		n = 0;
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	69db      	ldr	r3, [r3, #28]
 800e4a8:	4619      	mov	r1, r3
 800e4aa:	68f8      	ldr	r0, [r7, #12]
 800e4ac:	f7ff faa6 	bl	800d9fc <move_window>
 800e4b0:	4603      	mov	r3, r0
 800e4b2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e4b4:	7dfb      	ldrb	r3, [r7, #23]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d11d      	bne.n	800e4f6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	6a1b      	ldr	r3, [r3, #32]
 800e4be:	781b      	ldrb	r3, [r3, #0]
 800e4c0:	2be5      	cmp	r3, #229	; 0xe5
 800e4c2:	d004      	beq.n	800e4ce <dir_alloc+0x50>
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	6a1b      	ldr	r3, [r3, #32]
 800e4c8:	781b      	ldrb	r3, [r3, #0]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d107      	bne.n	800e4de <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e4ce:	693b      	ldr	r3, [r7, #16]
 800e4d0:	3301      	adds	r3, #1
 800e4d2:	613b      	str	r3, [r7, #16]
 800e4d4:	693a      	ldr	r2, [r7, #16]
 800e4d6:	683b      	ldr	r3, [r7, #0]
 800e4d8:	429a      	cmp	r2, r3
 800e4da:	d102      	bne.n	800e4e2 <dir_alloc+0x64>
 800e4dc:	e00c      	b.n	800e4f8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e4de:	2300      	movs	r3, #0
 800e4e0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800e4e2:	2101      	movs	r1, #1
 800e4e4:	6878      	ldr	r0, [r7, #4]
 800e4e6:	f7ff fef4 	bl	800e2d2 <dir_next>
 800e4ea:	4603      	mov	r3, r0
 800e4ec:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e4ee:	7dfb      	ldrb	r3, [r7, #23]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d0d7      	beq.n	800e4a4 <dir_alloc+0x26>
 800e4f4:	e000      	b.n	800e4f8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800e4f6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e4f8:	7dfb      	ldrb	r3, [r7, #23]
 800e4fa:	2b04      	cmp	r3, #4
 800e4fc:	d101      	bne.n	800e502 <dir_alloc+0x84>
 800e4fe:	2307      	movs	r3, #7
 800e500:	75fb      	strb	r3, [r7, #23]
	return res;
 800e502:	7dfb      	ldrb	r3, [r7, #23]
}
 800e504:	4618      	mov	r0, r3
 800e506:	3718      	adds	r7, #24
 800e508:	46bd      	mov	sp, r7
 800e50a:	bd80      	pop	{r7, pc}

0800e50c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b084      	sub	sp, #16
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
 800e514:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e516:	683b      	ldr	r3, [r7, #0]
 800e518:	331a      	adds	r3, #26
 800e51a:	4618      	mov	r0, r3
 800e51c:	f7fe ffbe 	bl	800d49c <ld_word>
 800e520:	4603      	mov	r3, r0
 800e522:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	781b      	ldrb	r3, [r3, #0]
 800e528:	2b03      	cmp	r3, #3
 800e52a:	d109      	bne.n	800e540 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e52c:	683b      	ldr	r3, [r7, #0]
 800e52e:	3314      	adds	r3, #20
 800e530:	4618      	mov	r0, r3
 800e532:	f7fe ffb3 	bl	800d49c <ld_word>
 800e536:	4603      	mov	r3, r0
 800e538:	041b      	lsls	r3, r3, #16
 800e53a:	68fa      	ldr	r2, [r7, #12]
 800e53c:	4313      	orrs	r3, r2
 800e53e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e540:	68fb      	ldr	r3, [r7, #12]
}
 800e542:	4618      	mov	r0, r3
 800e544:	3710      	adds	r7, #16
 800e546:	46bd      	mov	sp, r7
 800e548:	bd80      	pop	{r7, pc}

0800e54a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e54a:	b580      	push	{r7, lr}
 800e54c:	b084      	sub	sp, #16
 800e54e:	af00      	add	r7, sp, #0
 800e550:	60f8      	str	r0, [r7, #12]
 800e552:	60b9      	str	r1, [r7, #8]
 800e554:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e556:	68bb      	ldr	r3, [r7, #8]
 800e558:	331a      	adds	r3, #26
 800e55a:	687a      	ldr	r2, [r7, #4]
 800e55c:	b292      	uxth	r2, r2
 800e55e:	4611      	mov	r1, r2
 800e560:	4618      	mov	r0, r3
 800e562:	f7fe ffd6 	bl	800d512 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	781b      	ldrb	r3, [r3, #0]
 800e56a:	2b03      	cmp	r3, #3
 800e56c:	d109      	bne.n	800e582 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e56e:	68bb      	ldr	r3, [r7, #8]
 800e570:	f103 0214 	add.w	r2, r3, #20
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	0c1b      	lsrs	r3, r3, #16
 800e578:	b29b      	uxth	r3, r3
 800e57a:	4619      	mov	r1, r3
 800e57c:	4610      	mov	r0, r2
 800e57e:	f7fe ffc8 	bl	800d512 <st_word>
	}
}
 800e582:	bf00      	nop
 800e584:	3710      	adds	r7, #16
 800e586:	46bd      	mov	sp, r7
 800e588:	bd80      	pop	{r7, pc}

0800e58a <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800e58a:	b580      	push	{r7, lr}
 800e58c:	b086      	sub	sp, #24
 800e58e:	af00      	add	r7, sp, #0
 800e590:	6078      	str	r0, [r7, #4]
 800e592:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800e594:	2304      	movs	r3, #4
 800e596:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800e59e:	e03c      	b.n	800e61a <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	69db      	ldr	r3, [r3, #28]
 800e5a4:	4619      	mov	r1, r3
 800e5a6:	6938      	ldr	r0, [r7, #16]
 800e5a8:	f7ff fa28 	bl	800d9fc <move_window>
 800e5ac:	4603      	mov	r3, r0
 800e5ae:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e5b0:	7dfb      	ldrb	r3, [r7, #23]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d136      	bne.n	800e624 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	6a1b      	ldr	r3, [r3, #32]
 800e5ba:	781b      	ldrb	r3, [r3, #0]
 800e5bc:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800e5be:	7bfb      	ldrb	r3, [r7, #15]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d102      	bne.n	800e5ca <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800e5c4:	2304      	movs	r3, #4
 800e5c6:	75fb      	strb	r3, [r7, #23]
 800e5c8:	e031      	b.n	800e62e <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	6a1b      	ldr	r3, [r3, #32]
 800e5ce:	330b      	adds	r3, #11
 800e5d0:	781b      	ldrb	r3, [r3, #0]
 800e5d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e5d6:	73bb      	strb	r3, [r7, #14]
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	7bba      	ldrb	r2, [r7, #14]
 800e5dc:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800e5de:	7bfb      	ldrb	r3, [r7, #15]
 800e5e0:	2be5      	cmp	r3, #229	; 0xe5
 800e5e2:	d011      	beq.n	800e608 <dir_read+0x7e>
 800e5e4:	7bfb      	ldrb	r3, [r7, #15]
 800e5e6:	2b2e      	cmp	r3, #46	; 0x2e
 800e5e8:	d00e      	beq.n	800e608 <dir_read+0x7e>
 800e5ea:	7bbb      	ldrb	r3, [r7, #14]
 800e5ec:	2b0f      	cmp	r3, #15
 800e5ee:	d00b      	beq.n	800e608 <dir_read+0x7e>
 800e5f0:	7bbb      	ldrb	r3, [r7, #14]
 800e5f2:	f023 0320 	bic.w	r3, r3, #32
 800e5f6:	2b08      	cmp	r3, #8
 800e5f8:	bf0c      	ite	eq
 800e5fa:	2301      	moveq	r3, #1
 800e5fc:	2300      	movne	r3, #0
 800e5fe:	b2db      	uxtb	r3, r3
 800e600:	461a      	mov	r2, r3
 800e602:	683b      	ldr	r3, [r7, #0]
 800e604:	4293      	cmp	r3, r2
 800e606:	d00f      	beq.n	800e628 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800e608:	2100      	movs	r1, #0
 800e60a:	6878      	ldr	r0, [r7, #4]
 800e60c:	f7ff fe61 	bl	800e2d2 <dir_next>
 800e610:	4603      	mov	r3, r0
 800e612:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e614:	7dfb      	ldrb	r3, [r7, #23]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d108      	bne.n	800e62c <dir_read+0xa2>
	while (dp->sect) {
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	69db      	ldr	r3, [r3, #28]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d1be      	bne.n	800e5a0 <dir_read+0x16>
 800e622:	e004      	b.n	800e62e <dir_read+0xa4>
		if (res != FR_OK) break;
 800e624:	bf00      	nop
 800e626:	e002      	b.n	800e62e <dir_read+0xa4>
				break;
 800e628:	bf00      	nop
 800e62a:	e000      	b.n	800e62e <dir_read+0xa4>
		if (res != FR_OK) break;
 800e62c:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800e62e:	7dfb      	ldrb	r3, [r7, #23]
 800e630:	2b00      	cmp	r3, #0
 800e632:	d002      	beq.n	800e63a <dir_read+0xb0>
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	2200      	movs	r2, #0
 800e638:	61da      	str	r2, [r3, #28]
	return res;
 800e63a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e63c:	4618      	mov	r0, r3
 800e63e:	3718      	adds	r7, #24
 800e640:	46bd      	mov	sp, r7
 800e642:	bd80      	pop	{r7, pc}

0800e644 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e644:	b580      	push	{r7, lr}
 800e646:	b086      	sub	sp, #24
 800e648:	af00      	add	r7, sp, #0
 800e64a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e652:	2100      	movs	r1, #0
 800e654:	6878      	ldr	r0, [r7, #4]
 800e656:	f7ff fdb3 	bl	800e1c0 <dir_sdi>
 800e65a:	4603      	mov	r3, r0
 800e65c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e65e:	7dfb      	ldrb	r3, [r7, #23]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d001      	beq.n	800e668 <dir_find+0x24>
 800e664:	7dfb      	ldrb	r3, [r7, #23]
 800e666:	e03e      	b.n	800e6e6 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	69db      	ldr	r3, [r3, #28]
 800e66c:	4619      	mov	r1, r3
 800e66e:	6938      	ldr	r0, [r7, #16]
 800e670:	f7ff f9c4 	bl	800d9fc <move_window>
 800e674:	4603      	mov	r3, r0
 800e676:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e678:	7dfb      	ldrb	r3, [r7, #23]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d12f      	bne.n	800e6de <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	6a1b      	ldr	r3, [r3, #32]
 800e682:	781b      	ldrb	r3, [r3, #0]
 800e684:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e686:	7bfb      	ldrb	r3, [r7, #15]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d102      	bne.n	800e692 <dir_find+0x4e>
 800e68c:	2304      	movs	r3, #4
 800e68e:	75fb      	strb	r3, [r7, #23]
 800e690:	e028      	b.n	800e6e4 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	6a1b      	ldr	r3, [r3, #32]
 800e696:	330b      	adds	r3, #11
 800e698:	781b      	ldrb	r3, [r3, #0]
 800e69a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e69e:	b2da      	uxtb	r2, r3
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	6a1b      	ldr	r3, [r3, #32]
 800e6a8:	330b      	adds	r3, #11
 800e6aa:	781b      	ldrb	r3, [r3, #0]
 800e6ac:	f003 0308 	and.w	r3, r3, #8
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d10a      	bne.n	800e6ca <dir_find+0x86>
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	6a18      	ldr	r0, [r3, #32]
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	3324      	adds	r3, #36	; 0x24
 800e6bc:	220b      	movs	r2, #11
 800e6be:	4619      	mov	r1, r3
 800e6c0:	f7fe ffaa 	bl	800d618 <mem_cmp>
 800e6c4:	4603      	mov	r3, r0
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d00b      	beq.n	800e6e2 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e6ca:	2100      	movs	r1, #0
 800e6cc:	6878      	ldr	r0, [r7, #4]
 800e6ce:	f7ff fe00 	bl	800e2d2 <dir_next>
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e6d6:	7dfb      	ldrb	r3, [r7, #23]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d0c5      	beq.n	800e668 <dir_find+0x24>
 800e6dc:	e002      	b.n	800e6e4 <dir_find+0xa0>
		if (res != FR_OK) break;
 800e6de:	bf00      	nop
 800e6e0:	e000      	b.n	800e6e4 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800e6e2:	bf00      	nop

	return res;
 800e6e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	3718      	adds	r7, #24
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	bd80      	pop	{r7, pc}

0800e6ee <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e6ee:	b580      	push	{r7, lr}
 800e6f0:	b084      	sub	sp, #16
 800e6f2:	af00      	add	r7, sp, #0
 800e6f4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800e6fc:	2101      	movs	r1, #1
 800e6fe:	6878      	ldr	r0, [r7, #4]
 800e700:	f7ff febd 	bl	800e47e <dir_alloc>
 800e704:	4603      	mov	r3, r0
 800e706:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e708:	7bfb      	ldrb	r3, [r7, #15]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d11c      	bne.n	800e748 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	69db      	ldr	r3, [r3, #28]
 800e712:	4619      	mov	r1, r3
 800e714:	68b8      	ldr	r0, [r7, #8]
 800e716:	f7ff f971 	bl	800d9fc <move_window>
 800e71a:	4603      	mov	r3, r0
 800e71c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e71e:	7bfb      	ldrb	r3, [r7, #15]
 800e720:	2b00      	cmp	r3, #0
 800e722:	d111      	bne.n	800e748 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	6a1b      	ldr	r3, [r3, #32]
 800e728:	2220      	movs	r2, #32
 800e72a:	2100      	movs	r1, #0
 800e72c:	4618      	mov	r0, r3
 800e72e:	f7fe ff58 	bl	800d5e2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	6a18      	ldr	r0, [r3, #32]
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	3324      	adds	r3, #36	; 0x24
 800e73a:	220b      	movs	r2, #11
 800e73c:	4619      	mov	r1, r3
 800e73e:	f7fe ff2f 	bl	800d5a0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800e742:	68bb      	ldr	r3, [r7, #8]
 800e744:	2201      	movs	r2, #1
 800e746:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e748:	7bfb      	ldrb	r3, [r7, #15]
}
 800e74a:	4618      	mov	r0, r3
 800e74c:	3710      	adds	r7, #16
 800e74e:	46bd      	mov	sp, r7
 800e750:	bd80      	pop	{r7, pc}

0800e752 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800e752:	b580      	push	{r7, lr}
 800e754:	b084      	sub	sp, #16
 800e756:	af00      	add	r7, sp, #0
 800e758:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	69db      	ldr	r3, [r3, #28]
 800e764:	4619      	mov	r1, r3
 800e766:	68f8      	ldr	r0, [r7, #12]
 800e768:	f7ff f948 	bl	800d9fc <move_window>
 800e76c:	4603      	mov	r3, r0
 800e76e:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 800e770:	7afb      	ldrb	r3, [r7, #11]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d106      	bne.n	800e784 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	6a1b      	ldr	r3, [r3, #32]
 800e77a:	22e5      	movs	r2, #229	; 0xe5
 800e77c:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	2201      	movs	r2, #1
 800e782:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 800e784:	7afb      	ldrb	r3, [r7, #11]
}
 800e786:	4618      	mov	r0, r3
 800e788:	3710      	adds	r7, #16
 800e78a:	46bd      	mov	sp, r7
 800e78c:	bd80      	pop	{r7, pc}

0800e78e <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800e78e:	b580      	push	{r7, lr}
 800e790:	b086      	sub	sp, #24
 800e792:	af00      	add	r7, sp, #0
 800e794:	6078      	str	r0, [r7, #4]
 800e796:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800e798:	683b      	ldr	r3, [r7, #0]
 800e79a:	2200      	movs	r2, #0
 800e79c:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	69db      	ldr	r3, [r3, #28]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d04e      	beq.n	800e844 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	613b      	str	r3, [r7, #16]
 800e7aa:	693b      	ldr	r3, [r7, #16]
 800e7ac:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800e7ae:	e021      	b.n	800e7f4 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	6a1a      	ldr	r2, [r3, #32]
 800e7b4:	697b      	ldr	r3, [r7, #20]
 800e7b6:	1c59      	adds	r1, r3, #1
 800e7b8:	6179      	str	r1, [r7, #20]
 800e7ba:	4413      	add	r3, r2
 800e7bc:	781b      	ldrb	r3, [r3, #0]
 800e7be:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800e7c0:	7bfb      	ldrb	r3, [r7, #15]
 800e7c2:	2b20      	cmp	r3, #32
 800e7c4:	d100      	bne.n	800e7c8 <get_fileinfo+0x3a>
 800e7c6:	e015      	b.n	800e7f4 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800e7c8:	7bfb      	ldrb	r3, [r7, #15]
 800e7ca:	2b05      	cmp	r3, #5
 800e7cc:	d101      	bne.n	800e7d2 <get_fileinfo+0x44>
 800e7ce:	23e5      	movs	r3, #229	; 0xe5
 800e7d0:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800e7d2:	697b      	ldr	r3, [r7, #20]
 800e7d4:	2b09      	cmp	r3, #9
 800e7d6:	d106      	bne.n	800e7e6 <get_fileinfo+0x58>
 800e7d8:	693b      	ldr	r3, [r7, #16]
 800e7da:	1c5a      	adds	r2, r3, #1
 800e7dc:	613a      	str	r2, [r7, #16]
 800e7de:	683a      	ldr	r2, [r7, #0]
 800e7e0:	4413      	add	r3, r2
 800e7e2:	222e      	movs	r2, #46	; 0x2e
 800e7e4:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800e7e6:	693b      	ldr	r3, [r7, #16]
 800e7e8:	1c5a      	adds	r2, r3, #1
 800e7ea:	613a      	str	r2, [r7, #16]
 800e7ec:	683a      	ldr	r2, [r7, #0]
 800e7ee:	4413      	add	r3, r2
 800e7f0:	7bfa      	ldrb	r2, [r7, #15]
 800e7f2:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800e7f4:	697b      	ldr	r3, [r7, #20]
 800e7f6:	2b0a      	cmp	r3, #10
 800e7f8:	d9da      	bls.n	800e7b0 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800e7fa:	683a      	ldr	r2, [r7, #0]
 800e7fc:	693b      	ldr	r3, [r7, #16]
 800e7fe:	4413      	add	r3, r2
 800e800:	3309      	adds	r3, #9
 800e802:	2200      	movs	r2, #0
 800e804:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	6a1b      	ldr	r3, [r3, #32]
 800e80a:	7ada      	ldrb	r2, [r3, #11]
 800e80c:	683b      	ldr	r3, [r7, #0]
 800e80e:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	6a1b      	ldr	r3, [r3, #32]
 800e814:	331c      	adds	r3, #28
 800e816:	4618      	mov	r0, r3
 800e818:	f7fe fe58 	bl	800d4cc <ld_dword>
 800e81c:	4602      	mov	r2, r0
 800e81e:	683b      	ldr	r3, [r7, #0]
 800e820:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	6a1b      	ldr	r3, [r3, #32]
 800e826:	3316      	adds	r3, #22
 800e828:	4618      	mov	r0, r3
 800e82a:	f7fe fe4f 	bl	800d4cc <ld_dword>
 800e82e:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800e830:	68bb      	ldr	r3, [r7, #8]
 800e832:	b29a      	uxth	r2, r3
 800e834:	683b      	ldr	r3, [r7, #0]
 800e836:	80da      	strh	r2, [r3, #6]
 800e838:	68bb      	ldr	r3, [r7, #8]
 800e83a:	0c1b      	lsrs	r3, r3, #16
 800e83c:	b29a      	uxth	r2, r3
 800e83e:	683b      	ldr	r3, [r7, #0]
 800e840:	809a      	strh	r2, [r3, #4]
 800e842:	e000      	b.n	800e846 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800e844:	bf00      	nop
}
 800e846:	3718      	adds	r7, #24
 800e848:	46bd      	mov	sp, r7
 800e84a:	bd80      	pop	{r7, pc}

0800e84c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b088      	sub	sp, #32
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
 800e854:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800e856:	683b      	ldr	r3, [r7, #0]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	60fb      	str	r3, [r7, #12]
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	3324      	adds	r3, #36	; 0x24
 800e860:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800e862:	220b      	movs	r2, #11
 800e864:	2120      	movs	r1, #32
 800e866:	68b8      	ldr	r0, [r7, #8]
 800e868:	f7fe febb 	bl	800d5e2 <mem_set>
	si = i = 0; ni = 8;
 800e86c:	2300      	movs	r3, #0
 800e86e:	613b      	str	r3, [r7, #16]
 800e870:	693b      	ldr	r3, [r7, #16]
 800e872:	61fb      	str	r3, [r7, #28]
 800e874:	2308      	movs	r3, #8
 800e876:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800e878:	69fb      	ldr	r3, [r7, #28]
 800e87a:	1c5a      	adds	r2, r3, #1
 800e87c:	61fa      	str	r2, [r7, #28]
 800e87e:	68fa      	ldr	r2, [r7, #12]
 800e880:	4413      	add	r3, r2
 800e882:	781b      	ldrb	r3, [r3, #0]
 800e884:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800e886:	7efb      	ldrb	r3, [r7, #27]
 800e888:	2b20      	cmp	r3, #32
 800e88a:	d94e      	bls.n	800e92a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800e88c:	7efb      	ldrb	r3, [r7, #27]
 800e88e:	2b2f      	cmp	r3, #47	; 0x2f
 800e890:	d006      	beq.n	800e8a0 <create_name+0x54>
 800e892:	7efb      	ldrb	r3, [r7, #27]
 800e894:	2b5c      	cmp	r3, #92	; 0x5c
 800e896:	d110      	bne.n	800e8ba <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e898:	e002      	b.n	800e8a0 <create_name+0x54>
 800e89a:	69fb      	ldr	r3, [r7, #28]
 800e89c:	3301      	adds	r3, #1
 800e89e:	61fb      	str	r3, [r7, #28]
 800e8a0:	68fa      	ldr	r2, [r7, #12]
 800e8a2:	69fb      	ldr	r3, [r7, #28]
 800e8a4:	4413      	add	r3, r2
 800e8a6:	781b      	ldrb	r3, [r3, #0]
 800e8a8:	2b2f      	cmp	r3, #47	; 0x2f
 800e8aa:	d0f6      	beq.n	800e89a <create_name+0x4e>
 800e8ac:	68fa      	ldr	r2, [r7, #12]
 800e8ae:	69fb      	ldr	r3, [r7, #28]
 800e8b0:	4413      	add	r3, r2
 800e8b2:	781b      	ldrb	r3, [r3, #0]
 800e8b4:	2b5c      	cmp	r3, #92	; 0x5c
 800e8b6:	d0f0      	beq.n	800e89a <create_name+0x4e>
			break;
 800e8b8:	e038      	b.n	800e92c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800e8ba:	7efb      	ldrb	r3, [r7, #27]
 800e8bc:	2b2e      	cmp	r3, #46	; 0x2e
 800e8be:	d003      	beq.n	800e8c8 <create_name+0x7c>
 800e8c0:	693a      	ldr	r2, [r7, #16]
 800e8c2:	697b      	ldr	r3, [r7, #20]
 800e8c4:	429a      	cmp	r2, r3
 800e8c6:	d30c      	bcc.n	800e8e2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800e8c8:	697b      	ldr	r3, [r7, #20]
 800e8ca:	2b0b      	cmp	r3, #11
 800e8cc:	d002      	beq.n	800e8d4 <create_name+0x88>
 800e8ce:	7efb      	ldrb	r3, [r7, #27]
 800e8d0:	2b2e      	cmp	r3, #46	; 0x2e
 800e8d2:	d001      	beq.n	800e8d8 <create_name+0x8c>
 800e8d4:	2306      	movs	r3, #6
 800e8d6:	e044      	b.n	800e962 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800e8d8:	2308      	movs	r3, #8
 800e8da:	613b      	str	r3, [r7, #16]
 800e8dc:	230b      	movs	r3, #11
 800e8de:	617b      	str	r3, [r7, #20]
			continue;
 800e8e0:	e022      	b.n	800e928 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800e8e2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	da04      	bge.n	800e8f4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800e8ea:	7efb      	ldrb	r3, [r7, #27]
 800e8ec:	3b80      	subs	r3, #128	; 0x80
 800e8ee:	4a1f      	ldr	r2, [pc, #124]	; (800e96c <create_name+0x120>)
 800e8f0:	5cd3      	ldrb	r3, [r2, r3]
 800e8f2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800e8f4:	7efb      	ldrb	r3, [r7, #27]
 800e8f6:	4619      	mov	r1, r3
 800e8f8:	481d      	ldr	r0, [pc, #116]	; (800e970 <create_name+0x124>)
 800e8fa:	f7fe feb4 	bl	800d666 <chk_chr>
 800e8fe:	4603      	mov	r3, r0
 800e900:	2b00      	cmp	r3, #0
 800e902:	d001      	beq.n	800e908 <create_name+0xbc>
 800e904:	2306      	movs	r3, #6
 800e906:	e02c      	b.n	800e962 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800e908:	7efb      	ldrb	r3, [r7, #27]
 800e90a:	2b60      	cmp	r3, #96	; 0x60
 800e90c:	d905      	bls.n	800e91a <create_name+0xce>
 800e90e:	7efb      	ldrb	r3, [r7, #27]
 800e910:	2b7a      	cmp	r3, #122	; 0x7a
 800e912:	d802      	bhi.n	800e91a <create_name+0xce>
 800e914:	7efb      	ldrb	r3, [r7, #27]
 800e916:	3b20      	subs	r3, #32
 800e918:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800e91a:	693b      	ldr	r3, [r7, #16]
 800e91c:	1c5a      	adds	r2, r3, #1
 800e91e:	613a      	str	r2, [r7, #16]
 800e920:	68ba      	ldr	r2, [r7, #8]
 800e922:	4413      	add	r3, r2
 800e924:	7efa      	ldrb	r2, [r7, #27]
 800e926:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800e928:	e7a6      	b.n	800e878 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800e92a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800e92c:	68fa      	ldr	r2, [r7, #12]
 800e92e:	69fb      	ldr	r3, [r7, #28]
 800e930:	441a      	add	r2, r3
 800e932:	683b      	ldr	r3, [r7, #0]
 800e934:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800e936:	693b      	ldr	r3, [r7, #16]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d101      	bne.n	800e940 <create_name+0xf4>
 800e93c:	2306      	movs	r3, #6
 800e93e:	e010      	b.n	800e962 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e940:	68bb      	ldr	r3, [r7, #8]
 800e942:	781b      	ldrb	r3, [r3, #0]
 800e944:	2be5      	cmp	r3, #229	; 0xe5
 800e946:	d102      	bne.n	800e94e <create_name+0x102>
 800e948:	68bb      	ldr	r3, [r7, #8]
 800e94a:	2205      	movs	r2, #5
 800e94c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e94e:	7efb      	ldrb	r3, [r7, #27]
 800e950:	2b20      	cmp	r3, #32
 800e952:	d801      	bhi.n	800e958 <create_name+0x10c>
 800e954:	2204      	movs	r2, #4
 800e956:	e000      	b.n	800e95a <create_name+0x10e>
 800e958:	2200      	movs	r2, #0
 800e95a:	68bb      	ldr	r3, [r7, #8]
 800e95c:	330b      	adds	r3, #11
 800e95e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800e960:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800e962:	4618      	mov	r0, r3
 800e964:	3720      	adds	r7, #32
 800e966:	46bd      	mov	sp, r7
 800e968:	bd80      	pop	{r7, pc}
 800e96a:	bf00      	nop
 800e96c:	08018858 	.word	0x08018858
 800e970:	080187d4 	.word	0x080187d4

0800e974 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e974:	b580      	push	{r7, lr}
 800e976:	b086      	sub	sp, #24
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]
 800e97c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800e982:	693b      	ldr	r3, [r7, #16]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e988:	e002      	b.n	800e990 <follow_path+0x1c>
 800e98a:	683b      	ldr	r3, [r7, #0]
 800e98c:	3301      	adds	r3, #1
 800e98e:	603b      	str	r3, [r7, #0]
 800e990:	683b      	ldr	r3, [r7, #0]
 800e992:	781b      	ldrb	r3, [r3, #0]
 800e994:	2b2f      	cmp	r3, #47	; 0x2f
 800e996:	d0f8      	beq.n	800e98a <follow_path+0x16>
 800e998:	683b      	ldr	r3, [r7, #0]
 800e99a:	781b      	ldrb	r3, [r3, #0]
 800e99c:	2b5c      	cmp	r3, #92	; 0x5c
 800e99e:	d0f4      	beq.n	800e98a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800e9a0:	693b      	ldr	r3, [r7, #16]
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e9a6:	683b      	ldr	r3, [r7, #0]
 800e9a8:	781b      	ldrb	r3, [r3, #0]
 800e9aa:	2b1f      	cmp	r3, #31
 800e9ac:	d80a      	bhi.n	800e9c4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	2280      	movs	r2, #128	; 0x80
 800e9b2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800e9b6:	2100      	movs	r1, #0
 800e9b8:	6878      	ldr	r0, [r7, #4]
 800e9ba:	f7ff fc01 	bl	800e1c0 <dir_sdi>
 800e9be:	4603      	mov	r3, r0
 800e9c0:	75fb      	strb	r3, [r7, #23]
 800e9c2:	e048      	b.n	800ea56 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e9c4:	463b      	mov	r3, r7
 800e9c6:	4619      	mov	r1, r3
 800e9c8:	6878      	ldr	r0, [r7, #4]
 800e9ca:	f7ff ff3f 	bl	800e84c <create_name>
 800e9ce:	4603      	mov	r3, r0
 800e9d0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e9d2:	7dfb      	ldrb	r3, [r7, #23]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d139      	bne.n	800ea4c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e9d8:	6878      	ldr	r0, [r7, #4]
 800e9da:	f7ff fe33 	bl	800e644 <dir_find>
 800e9de:	4603      	mov	r3, r0
 800e9e0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e9e8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800e9ea:	7dfb      	ldrb	r3, [r7, #23]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d00a      	beq.n	800ea06 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e9f0:	7dfb      	ldrb	r3, [r7, #23]
 800e9f2:	2b04      	cmp	r3, #4
 800e9f4:	d12c      	bne.n	800ea50 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e9f6:	7afb      	ldrb	r3, [r7, #11]
 800e9f8:	f003 0304 	and.w	r3, r3, #4
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d127      	bne.n	800ea50 <follow_path+0xdc>
 800ea00:	2305      	movs	r3, #5
 800ea02:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ea04:	e024      	b.n	800ea50 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ea06:	7afb      	ldrb	r3, [r7, #11]
 800ea08:	f003 0304 	and.w	r3, r3, #4
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d121      	bne.n	800ea54 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ea10:	693b      	ldr	r3, [r7, #16]
 800ea12:	799b      	ldrb	r3, [r3, #6]
 800ea14:	f003 0310 	and.w	r3, r3, #16
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d102      	bne.n	800ea22 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ea1c:	2305      	movs	r3, #5
 800ea1e:	75fb      	strb	r3, [r7, #23]
 800ea20:	e019      	b.n	800ea56 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	695b      	ldr	r3, [r3, #20]
 800ea2c:	68fa      	ldr	r2, [r7, #12]
 800ea2e:	8992      	ldrh	r2, [r2, #12]
 800ea30:	fbb3 f0f2 	udiv	r0, r3, r2
 800ea34:	fb02 f200 	mul.w	r2, r2, r0
 800ea38:	1a9b      	subs	r3, r3, r2
 800ea3a:	440b      	add	r3, r1
 800ea3c:	4619      	mov	r1, r3
 800ea3e:	68f8      	ldr	r0, [r7, #12]
 800ea40:	f7ff fd64 	bl	800e50c <ld_clust>
 800ea44:	4602      	mov	r2, r0
 800ea46:	693b      	ldr	r3, [r7, #16]
 800ea48:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ea4a:	e7bb      	b.n	800e9c4 <follow_path+0x50>
			if (res != FR_OK) break;
 800ea4c:	bf00      	nop
 800ea4e:	e002      	b.n	800ea56 <follow_path+0xe2>
				break;
 800ea50:	bf00      	nop
 800ea52:	e000      	b.n	800ea56 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ea54:	bf00      	nop
			}
		}
	}

	return res;
 800ea56:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea58:	4618      	mov	r0, r3
 800ea5a:	3718      	adds	r7, #24
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	bd80      	pop	{r7, pc}

0800ea60 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ea60:	b480      	push	{r7}
 800ea62:	b087      	sub	sp, #28
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ea68:	f04f 33ff 	mov.w	r3, #4294967295
 800ea6c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d031      	beq.n	800eada <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	617b      	str	r3, [r7, #20]
 800ea7c:	e002      	b.n	800ea84 <get_ldnumber+0x24>
 800ea7e:	697b      	ldr	r3, [r7, #20]
 800ea80:	3301      	adds	r3, #1
 800ea82:	617b      	str	r3, [r7, #20]
 800ea84:	697b      	ldr	r3, [r7, #20]
 800ea86:	781b      	ldrb	r3, [r3, #0]
 800ea88:	2b20      	cmp	r3, #32
 800ea8a:	d903      	bls.n	800ea94 <get_ldnumber+0x34>
 800ea8c:	697b      	ldr	r3, [r7, #20]
 800ea8e:	781b      	ldrb	r3, [r3, #0]
 800ea90:	2b3a      	cmp	r3, #58	; 0x3a
 800ea92:	d1f4      	bne.n	800ea7e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ea94:	697b      	ldr	r3, [r7, #20]
 800ea96:	781b      	ldrb	r3, [r3, #0]
 800ea98:	2b3a      	cmp	r3, #58	; 0x3a
 800ea9a:	d11c      	bne.n	800ead6 <get_ldnumber+0x76>
			tp = *path;
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	1c5a      	adds	r2, r3, #1
 800eaa6:	60fa      	str	r2, [r7, #12]
 800eaa8:	781b      	ldrb	r3, [r3, #0]
 800eaaa:	3b30      	subs	r3, #48	; 0x30
 800eaac:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800eaae:	68bb      	ldr	r3, [r7, #8]
 800eab0:	2b09      	cmp	r3, #9
 800eab2:	d80e      	bhi.n	800ead2 <get_ldnumber+0x72>
 800eab4:	68fa      	ldr	r2, [r7, #12]
 800eab6:	697b      	ldr	r3, [r7, #20]
 800eab8:	429a      	cmp	r2, r3
 800eaba:	d10a      	bne.n	800ead2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800eabc:	68bb      	ldr	r3, [r7, #8]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d107      	bne.n	800ead2 <get_ldnumber+0x72>
					vol = (int)i;
 800eac2:	68bb      	ldr	r3, [r7, #8]
 800eac4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800eac6:	697b      	ldr	r3, [r7, #20]
 800eac8:	3301      	adds	r3, #1
 800eaca:	617b      	str	r3, [r7, #20]
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	697a      	ldr	r2, [r7, #20]
 800ead0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ead2:	693b      	ldr	r3, [r7, #16]
 800ead4:	e002      	b.n	800eadc <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ead6:	2300      	movs	r3, #0
 800ead8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800eada:	693b      	ldr	r3, [r7, #16]
}
 800eadc:	4618      	mov	r0, r3
 800eade:	371c      	adds	r7, #28
 800eae0:	46bd      	mov	sp, r7
 800eae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae6:	4770      	bx	lr

0800eae8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800eae8:	b580      	push	{r7, lr}
 800eaea:	b082      	sub	sp, #8
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	6078      	str	r0, [r7, #4]
 800eaf0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	2200      	movs	r2, #0
 800eaf6:	70da      	strb	r2, [r3, #3]
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	f04f 32ff 	mov.w	r2, #4294967295
 800eafe:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800eb00:	6839      	ldr	r1, [r7, #0]
 800eb02:	6878      	ldr	r0, [r7, #4]
 800eb04:	f7fe ff7a 	bl	800d9fc <move_window>
 800eb08:	4603      	mov	r3, r0
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d001      	beq.n	800eb12 <check_fs+0x2a>
 800eb0e:	2304      	movs	r3, #4
 800eb10:	e038      	b.n	800eb84 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	3334      	adds	r3, #52	; 0x34
 800eb16:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	f7fe fcbe 	bl	800d49c <ld_word>
 800eb20:	4603      	mov	r3, r0
 800eb22:	461a      	mov	r2, r3
 800eb24:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800eb28:	429a      	cmp	r2, r3
 800eb2a:	d001      	beq.n	800eb30 <check_fs+0x48>
 800eb2c:	2303      	movs	r3, #3
 800eb2e:	e029      	b.n	800eb84 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800eb36:	2be9      	cmp	r3, #233	; 0xe9
 800eb38:	d009      	beq.n	800eb4e <check_fs+0x66>
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800eb40:	2beb      	cmp	r3, #235	; 0xeb
 800eb42:	d11e      	bne.n	800eb82 <check_fs+0x9a>
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800eb4a:	2b90      	cmp	r3, #144	; 0x90
 800eb4c:	d119      	bne.n	800eb82 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	3334      	adds	r3, #52	; 0x34
 800eb52:	3336      	adds	r3, #54	; 0x36
 800eb54:	4618      	mov	r0, r3
 800eb56:	f7fe fcb9 	bl	800d4cc <ld_dword>
 800eb5a:	4603      	mov	r3, r0
 800eb5c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800eb60:	4a0a      	ldr	r2, [pc, #40]	; (800eb8c <check_fs+0xa4>)
 800eb62:	4293      	cmp	r3, r2
 800eb64:	d101      	bne.n	800eb6a <check_fs+0x82>
 800eb66:	2300      	movs	r3, #0
 800eb68:	e00c      	b.n	800eb84 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	3334      	adds	r3, #52	; 0x34
 800eb6e:	3352      	adds	r3, #82	; 0x52
 800eb70:	4618      	mov	r0, r3
 800eb72:	f7fe fcab 	bl	800d4cc <ld_dword>
 800eb76:	4603      	mov	r3, r0
 800eb78:	4a05      	ldr	r2, [pc, #20]	; (800eb90 <check_fs+0xa8>)
 800eb7a:	4293      	cmp	r3, r2
 800eb7c:	d101      	bne.n	800eb82 <check_fs+0x9a>
 800eb7e:	2300      	movs	r3, #0
 800eb80:	e000      	b.n	800eb84 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800eb82:	2302      	movs	r3, #2
}
 800eb84:	4618      	mov	r0, r3
 800eb86:	3708      	adds	r7, #8
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	bd80      	pop	{r7, pc}
 800eb8c:	00544146 	.word	0x00544146
 800eb90:	33544146 	.word	0x33544146

0800eb94 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800eb94:	b580      	push	{r7, lr}
 800eb96:	b096      	sub	sp, #88	; 0x58
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	60f8      	str	r0, [r7, #12]
 800eb9c:	60b9      	str	r1, [r7, #8]
 800eb9e:	4613      	mov	r3, r2
 800eba0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800eba2:	68bb      	ldr	r3, [r7, #8]
 800eba4:	2200      	movs	r2, #0
 800eba6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800eba8:	68f8      	ldr	r0, [r7, #12]
 800ebaa:	f7ff ff59 	bl	800ea60 <get_ldnumber>
 800ebae:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ebb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	da01      	bge.n	800ebba <find_volume+0x26>
 800ebb6:	230b      	movs	r3, #11
 800ebb8:	e265      	b.n	800f086 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ebba:	4ab0      	ldr	r2, [pc, #704]	; (800ee7c <find_volume+0x2e8>)
 800ebbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ebc2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ebc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d101      	bne.n	800ebce <find_volume+0x3a>
 800ebca:	230c      	movs	r3, #12
 800ebcc:	e25b      	b.n	800f086 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ebce:	68bb      	ldr	r3, [r7, #8]
 800ebd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ebd2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ebd4:	79fb      	ldrb	r3, [r7, #7]
 800ebd6:	f023 0301 	bic.w	r3, r3, #1
 800ebda:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ebdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebde:	781b      	ldrb	r3, [r3, #0]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d01a      	beq.n	800ec1a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800ebe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebe6:	785b      	ldrb	r3, [r3, #1]
 800ebe8:	4618      	mov	r0, r3
 800ebea:	f7fe fbb9 	bl	800d360 <disk_status>
 800ebee:	4603      	mov	r3, r0
 800ebf0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ebf4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ebf8:	f003 0301 	and.w	r3, r3, #1
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d10c      	bne.n	800ec1a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ec00:	79fb      	ldrb	r3, [r7, #7]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d007      	beq.n	800ec16 <find_volume+0x82>
 800ec06:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ec0a:	f003 0304 	and.w	r3, r3, #4
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d001      	beq.n	800ec16 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800ec12:	230a      	movs	r3, #10
 800ec14:	e237      	b.n	800f086 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800ec16:	2300      	movs	r3, #0
 800ec18:	e235      	b.n	800f086 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ec1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec1c:	2200      	movs	r2, #0
 800ec1e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ec20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec22:	b2da      	uxtb	r2, r3
 800ec24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec26:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ec28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec2a:	785b      	ldrb	r3, [r3, #1]
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	f7fe fbb1 	bl	800d394 <disk_initialize>
 800ec32:	4603      	mov	r3, r0
 800ec34:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ec38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ec3c:	f003 0301 	and.w	r3, r3, #1
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d001      	beq.n	800ec48 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ec44:	2303      	movs	r3, #3
 800ec46:	e21e      	b.n	800f086 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ec48:	79fb      	ldrb	r3, [r7, #7]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d007      	beq.n	800ec5e <find_volume+0xca>
 800ec4e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ec52:	f003 0304 	and.w	r3, r3, #4
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d001      	beq.n	800ec5e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800ec5a:	230a      	movs	r3, #10
 800ec5c:	e213      	b.n	800f086 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800ec5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec60:	7858      	ldrb	r0, [r3, #1]
 800ec62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec64:	330c      	adds	r3, #12
 800ec66:	461a      	mov	r2, r3
 800ec68:	2102      	movs	r1, #2
 800ec6a:	f7fe fbf9 	bl	800d460 <disk_ioctl>
 800ec6e:	4603      	mov	r3, r0
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d001      	beq.n	800ec78 <find_volume+0xe4>
 800ec74:	2301      	movs	r3, #1
 800ec76:	e206      	b.n	800f086 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800ec78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec7a:	899b      	ldrh	r3, [r3, #12]
 800ec7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ec80:	d80d      	bhi.n	800ec9e <find_volume+0x10a>
 800ec82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec84:	899b      	ldrh	r3, [r3, #12]
 800ec86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ec8a:	d308      	bcc.n	800ec9e <find_volume+0x10a>
 800ec8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec8e:	899b      	ldrh	r3, [r3, #12]
 800ec90:	461a      	mov	r2, r3
 800ec92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec94:	899b      	ldrh	r3, [r3, #12]
 800ec96:	3b01      	subs	r3, #1
 800ec98:	4013      	ands	r3, r2
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d001      	beq.n	800eca2 <find_volume+0x10e>
 800ec9e:	2301      	movs	r3, #1
 800eca0:	e1f1      	b.n	800f086 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800eca2:	2300      	movs	r3, #0
 800eca4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800eca6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800eca8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ecaa:	f7ff ff1d 	bl	800eae8 <check_fs>
 800ecae:	4603      	mov	r3, r0
 800ecb0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ecb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ecb8:	2b02      	cmp	r3, #2
 800ecba:	d14b      	bne.n	800ed54 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ecbc:	2300      	movs	r3, #0
 800ecbe:	643b      	str	r3, [r7, #64]	; 0x40
 800ecc0:	e01f      	b.n	800ed02 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ecc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecc4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ecc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ecca:	011b      	lsls	r3, r3, #4
 800eccc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ecd0:	4413      	add	r3, r2
 800ecd2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ecd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecd6:	3304      	adds	r3, #4
 800ecd8:	781b      	ldrb	r3, [r3, #0]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d006      	beq.n	800ecec <find_volume+0x158>
 800ecde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ece0:	3308      	adds	r3, #8
 800ece2:	4618      	mov	r0, r3
 800ece4:	f7fe fbf2 	bl	800d4cc <ld_dword>
 800ece8:	4602      	mov	r2, r0
 800ecea:	e000      	b.n	800ecee <find_volume+0x15a>
 800ecec:	2200      	movs	r2, #0
 800ecee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ecf0:	009b      	lsls	r3, r3, #2
 800ecf2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800ecf6:	440b      	add	r3, r1
 800ecf8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ecfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ecfe:	3301      	adds	r3, #1
 800ed00:	643b      	str	r3, [r7, #64]	; 0x40
 800ed02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed04:	2b03      	cmp	r3, #3
 800ed06:	d9dc      	bls.n	800ecc2 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ed08:	2300      	movs	r3, #0
 800ed0a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800ed0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d002      	beq.n	800ed18 <find_volume+0x184>
 800ed12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed14:	3b01      	subs	r3, #1
 800ed16:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ed18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed1a:	009b      	lsls	r3, r3, #2
 800ed1c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800ed20:	4413      	add	r3, r2
 800ed22:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ed26:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ed28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d005      	beq.n	800ed3a <find_volume+0x1a6>
 800ed2e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ed30:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ed32:	f7ff fed9 	bl	800eae8 <check_fs>
 800ed36:	4603      	mov	r3, r0
 800ed38:	e000      	b.n	800ed3c <find_volume+0x1a8>
 800ed3a:	2303      	movs	r3, #3
 800ed3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ed40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ed44:	2b01      	cmp	r3, #1
 800ed46:	d905      	bls.n	800ed54 <find_volume+0x1c0>
 800ed48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed4a:	3301      	adds	r3, #1
 800ed4c:	643b      	str	r3, [r7, #64]	; 0x40
 800ed4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed50:	2b03      	cmp	r3, #3
 800ed52:	d9e1      	bls.n	800ed18 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ed54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ed58:	2b04      	cmp	r3, #4
 800ed5a:	d101      	bne.n	800ed60 <find_volume+0x1cc>
 800ed5c:	2301      	movs	r3, #1
 800ed5e:	e192      	b.n	800f086 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ed60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ed64:	2b01      	cmp	r3, #1
 800ed66:	d901      	bls.n	800ed6c <find_volume+0x1d8>
 800ed68:	230d      	movs	r3, #13
 800ed6a:	e18c      	b.n	800f086 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ed6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed6e:	3334      	adds	r3, #52	; 0x34
 800ed70:	330b      	adds	r3, #11
 800ed72:	4618      	mov	r0, r3
 800ed74:	f7fe fb92 	bl	800d49c <ld_word>
 800ed78:	4603      	mov	r3, r0
 800ed7a:	461a      	mov	r2, r3
 800ed7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed7e:	899b      	ldrh	r3, [r3, #12]
 800ed80:	429a      	cmp	r2, r3
 800ed82:	d001      	beq.n	800ed88 <find_volume+0x1f4>
 800ed84:	230d      	movs	r3, #13
 800ed86:	e17e      	b.n	800f086 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ed88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed8a:	3334      	adds	r3, #52	; 0x34
 800ed8c:	3316      	adds	r3, #22
 800ed8e:	4618      	mov	r0, r3
 800ed90:	f7fe fb84 	bl	800d49c <ld_word>
 800ed94:	4603      	mov	r3, r0
 800ed96:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ed98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d106      	bne.n	800edac <find_volume+0x218>
 800ed9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eda0:	3334      	adds	r3, #52	; 0x34
 800eda2:	3324      	adds	r3, #36	; 0x24
 800eda4:	4618      	mov	r0, r3
 800eda6:	f7fe fb91 	bl	800d4cc <ld_dword>
 800edaa:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800edac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800edb0:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800edb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edb4:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800edb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edba:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800edbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edbe:	789b      	ldrb	r3, [r3, #2]
 800edc0:	2b01      	cmp	r3, #1
 800edc2:	d005      	beq.n	800edd0 <find_volume+0x23c>
 800edc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edc6:	789b      	ldrb	r3, [r3, #2]
 800edc8:	2b02      	cmp	r3, #2
 800edca:	d001      	beq.n	800edd0 <find_volume+0x23c>
 800edcc:	230d      	movs	r3, #13
 800edce:	e15a      	b.n	800f086 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800edd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edd2:	789b      	ldrb	r3, [r3, #2]
 800edd4:	461a      	mov	r2, r3
 800edd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800edd8:	fb02 f303 	mul.w	r3, r2, r3
 800eddc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800edde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ede0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ede4:	b29a      	uxth	r2, r3
 800ede6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ede8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800edea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edec:	895b      	ldrh	r3, [r3, #10]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d008      	beq.n	800ee04 <find_volume+0x270>
 800edf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edf4:	895b      	ldrh	r3, [r3, #10]
 800edf6:	461a      	mov	r2, r3
 800edf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edfa:	895b      	ldrh	r3, [r3, #10]
 800edfc:	3b01      	subs	r3, #1
 800edfe:	4013      	ands	r3, r2
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d001      	beq.n	800ee08 <find_volume+0x274>
 800ee04:	230d      	movs	r3, #13
 800ee06:	e13e      	b.n	800f086 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ee08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee0a:	3334      	adds	r3, #52	; 0x34
 800ee0c:	3311      	adds	r3, #17
 800ee0e:	4618      	mov	r0, r3
 800ee10:	f7fe fb44 	bl	800d49c <ld_word>
 800ee14:	4603      	mov	r3, r0
 800ee16:	461a      	mov	r2, r3
 800ee18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee1a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ee1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee1e:	891b      	ldrh	r3, [r3, #8]
 800ee20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ee22:	8992      	ldrh	r2, [r2, #12]
 800ee24:	0952      	lsrs	r2, r2, #5
 800ee26:	b292      	uxth	r2, r2
 800ee28:	fbb3 f1f2 	udiv	r1, r3, r2
 800ee2c:	fb02 f201 	mul.w	r2, r2, r1
 800ee30:	1a9b      	subs	r3, r3, r2
 800ee32:	b29b      	uxth	r3, r3
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d001      	beq.n	800ee3c <find_volume+0x2a8>
 800ee38:	230d      	movs	r3, #13
 800ee3a:	e124      	b.n	800f086 <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ee3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee3e:	3334      	adds	r3, #52	; 0x34
 800ee40:	3313      	adds	r3, #19
 800ee42:	4618      	mov	r0, r3
 800ee44:	f7fe fb2a 	bl	800d49c <ld_word>
 800ee48:	4603      	mov	r3, r0
 800ee4a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ee4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d106      	bne.n	800ee60 <find_volume+0x2cc>
 800ee52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee54:	3334      	adds	r3, #52	; 0x34
 800ee56:	3320      	adds	r3, #32
 800ee58:	4618      	mov	r0, r3
 800ee5a:	f7fe fb37 	bl	800d4cc <ld_dword>
 800ee5e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ee60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee62:	3334      	adds	r3, #52	; 0x34
 800ee64:	330e      	adds	r3, #14
 800ee66:	4618      	mov	r0, r3
 800ee68:	f7fe fb18 	bl	800d49c <ld_word>
 800ee6c:	4603      	mov	r3, r0
 800ee6e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ee70:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d104      	bne.n	800ee80 <find_volume+0x2ec>
 800ee76:	230d      	movs	r3, #13
 800ee78:	e105      	b.n	800f086 <find_volume+0x4f2>
 800ee7a:	bf00      	nop
 800ee7c:	20000ad4 	.word	0x20000ad4

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ee80:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ee82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee84:	4413      	add	r3, r2
 800ee86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ee88:	8911      	ldrh	r1, [r2, #8]
 800ee8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ee8c:	8992      	ldrh	r2, [r2, #12]
 800ee8e:	0952      	lsrs	r2, r2, #5
 800ee90:	b292      	uxth	r2, r2
 800ee92:	fbb1 f2f2 	udiv	r2, r1, r2
 800ee96:	b292      	uxth	r2, r2
 800ee98:	4413      	add	r3, r2
 800ee9a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ee9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ee9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eea0:	429a      	cmp	r2, r3
 800eea2:	d201      	bcs.n	800eea8 <find_volume+0x314>
 800eea4:	230d      	movs	r3, #13
 800eea6:	e0ee      	b.n	800f086 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800eea8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eeaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeac:	1ad3      	subs	r3, r2, r3
 800eeae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eeb0:	8952      	ldrh	r2, [r2, #10]
 800eeb2:	fbb3 f3f2 	udiv	r3, r3, r2
 800eeb6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800eeb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d101      	bne.n	800eec2 <find_volume+0x32e>
 800eebe:	230d      	movs	r3, #13
 800eec0:	e0e1      	b.n	800f086 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800eec2:	2303      	movs	r3, #3
 800eec4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800eec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeca:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800eece:	4293      	cmp	r3, r2
 800eed0:	d802      	bhi.n	800eed8 <find_volume+0x344>
 800eed2:	2302      	movs	r3, #2
 800eed4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800eed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeda:	f640 72f5 	movw	r2, #4085	; 0xff5
 800eede:	4293      	cmp	r3, r2
 800eee0:	d802      	bhi.n	800eee8 <find_volume+0x354>
 800eee2:	2301      	movs	r3, #1
 800eee4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800eee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeea:	1c9a      	adds	r2, r3, #2
 800eeec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeee:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800eef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eef2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800eef4:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800eef6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800eef8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eefa:	441a      	add	r2, r3
 800eefc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eefe:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800ef00:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ef02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef04:	441a      	add	r2, r3
 800ef06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef08:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800ef0a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ef0e:	2b03      	cmp	r3, #3
 800ef10:	d11e      	bne.n	800ef50 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ef12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef14:	3334      	adds	r3, #52	; 0x34
 800ef16:	332a      	adds	r3, #42	; 0x2a
 800ef18:	4618      	mov	r0, r3
 800ef1a:	f7fe fabf 	bl	800d49c <ld_word>
 800ef1e:	4603      	mov	r3, r0
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d001      	beq.n	800ef28 <find_volume+0x394>
 800ef24:	230d      	movs	r3, #13
 800ef26:	e0ae      	b.n	800f086 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ef28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef2a:	891b      	ldrh	r3, [r3, #8]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d001      	beq.n	800ef34 <find_volume+0x3a0>
 800ef30:	230d      	movs	r3, #13
 800ef32:	e0a8      	b.n	800f086 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ef34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef36:	3334      	adds	r3, #52	; 0x34
 800ef38:	332c      	adds	r3, #44	; 0x2c
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	f7fe fac6 	bl	800d4cc <ld_dword>
 800ef40:	4602      	mov	r2, r0
 800ef42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef44:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ef46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef48:	699b      	ldr	r3, [r3, #24]
 800ef4a:	009b      	lsls	r3, r3, #2
 800ef4c:	647b      	str	r3, [r7, #68]	; 0x44
 800ef4e:	e01f      	b.n	800ef90 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ef50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef52:	891b      	ldrh	r3, [r3, #8]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d101      	bne.n	800ef5c <find_volume+0x3c8>
 800ef58:	230d      	movs	r3, #13
 800ef5a:	e094      	b.n	800f086 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ef5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ef60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef62:	441a      	add	r2, r3
 800ef64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef66:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ef68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ef6c:	2b02      	cmp	r3, #2
 800ef6e:	d103      	bne.n	800ef78 <find_volume+0x3e4>
 800ef70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef72:	699b      	ldr	r3, [r3, #24]
 800ef74:	005b      	lsls	r3, r3, #1
 800ef76:	e00a      	b.n	800ef8e <find_volume+0x3fa>
 800ef78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef7a:	699a      	ldr	r2, [r3, #24]
 800ef7c:	4613      	mov	r3, r2
 800ef7e:	005b      	lsls	r3, r3, #1
 800ef80:	4413      	add	r3, r2
 800ef82:	085a      	lsrs	r2, r3, #1
 800ef84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef86:	699b      	ldr	r3, [r3, #24]
 800ef88:	f003 0301 	and.w	r3, r3, #1
 800ef8c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ef8e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ef90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef92:	69da      	ldr	r2, [r3, #28]
 800ef94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef96:	899b      	ldrh	r3, [r3, #12]
 800ef98:	4619      	mov	r1, r3
 800ef9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef9c:	440b      	add	r3, r1
 800ef9e:	3b01      	subs	r3, #1
 800efa0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800efa2:	8989      	ldrh	r1, [r1, #12]
 800efa4:	fbb3 f3f1 	udiv	r3, r3, r1
 800efa8:	429a      	cmp	r2, r3
 800efaa:	d201      	bcs.n	800efb0 <find_volume+0x41c>
 800efac:	230d      	movs	r3, #13
 800efae:	e06a      	b.n	800f086 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800efb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efb2:	f04f 32ff 	mov.w	r2, #4294967295
 800efb6:	615a      	str	r2, [r3, #20]
 800efb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efba:	695a      	ldr	r2, [r3, #20]
 800efbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efbe:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800efc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efc2:	2280      	movs	r2, #128	; 0x80
 800efc4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800efc6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800efca:	2b03      	cmp	r3, #3
 800efcc:	d149      	bne.n	800f062 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800efce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efd0:	3334      	adds	r3, #52	; 0x34
 800efd2:	3330      	adds	r3, #48	; 0x30
 800efd4:	4618      	mov	r0, r3
 800efd6:	f7fe fa61 	bl	800d49c <ld_word>
 800efda:	4603      	mov	r3, r0
 800efdc:	2b01      	cmp	r3, #1
 800efde:	d140      	bne.n	800f062 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800efe0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800efe2:	3301      	adds	r3, #1
 800efe4:	4619      	mov	r1, r3
 800efe6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800efe8:	f7fe fd08 	bl	800d9fc <move_window>
 800efec:	4603      	mov	r3, r0
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d137      	bne.n	800f062 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800eff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eff4:	2200      	movs	r2, #0
 800eff6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800eff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800effa:	3334      	adds	r3, #52	; 0x34
 800effc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f000:	4618      	mov	r0, r3
 800f002:	f7fe fa4b 	bl	800d49c <ld_word>
 800f006:	4603      	mov	r3, r0
 800f008:	461a      	mov	r2, r3
 800f00a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f00e:	429a      	cmp	r2, r3
 800f010:	d127      	bne.n	800f062 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f014:	3334      	adds	r3, #52	; 0x34
 800f016:	4618      	mov	r0, r3
 800f018:	f7fe fa58 	bl	800d4cc <ld_dword>
 800f01c:	4603      	mov	r3, r0
 800f01e:	4a1c      	ldr	r2, [pc, #112]	; (800f090 <find_volume+0x4fc>)
 800f020:	4293      	cmp	r3, r2
 800f022:	d11e      	bne.n	800f062 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f026:	3334      	adds	r3, #52	; 0x34
 800f028:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f02c:	4618      	mov	r0, r3
 800f02e:	f7fe fa4d 	bl	800d4cc <ld_dword>
 800f032:	4603      	mov	r3, r0
 800f034:	4a17      	ldr	r2, [pc, #92]	; (800f094 <find_volume+0x500>)
 800f036:	4293      	cmp	r3, r2
 800f038:	d113      	bne.n	800f062 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f03a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f03c:	3334      	adds	r3, #52	; 0x34
 800f03e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800f042:	4618      	mov	r0, r3
 800f044:	f7fe fa42 	bl	800d4cc <ld_dword>
 800f048:	4602      	mov	r2, r0
 800f04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f04c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f04e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f050:	3334      	adds	r3, #52	; 0x34
 800f052:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800f056:	4618      	mov	r0, r3
 800f058:	f7fe fa38 	bl	800d4cc <ld_dword>
 800f05c:	4602      	mov	r2, r0
 800f05e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f060:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f064:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800f068:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f06a:	4b0b      	ldr	r3, [pc, #44]	; (800f098 <find_volume+0x504>)
 800f06c:	881b      	ldrh	r3, [r3, #0]
 800f06e:	3301      	adds	r3, #1
 800f070:	b29a      	uxth	r2, r3
 800f072:	4b09      	ldr	r3, [pc, #36]	; (800f098 <find_volume+0x504>)
 800f074:	801a      	strh	r2, [r3, #0]
 800f076:	4b08      	ldr	r3, [pc, #32]	; (800f098 <find_volume+0x504>)
 800f078:	881a      	ldrh	r2, [r3, #0]
 800f07a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f07c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f07e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f080:	f7fe fc54 	bl	800d92c <clear_lock>
#endif
	return FR_OK;
 800f084:	2300      	movs	r3, #0
}
 800f086:	4618      	mov	r0, r3
 800f088:	3758      	adds	r7, #88	; 0x58
 800f08a:	46bd      	mov	sp, r7
 800f08c:	bd80      	pop	{r7, pc}
 800f08e:	bf00      	nop
 800f090:	41615252 	.word	0x41615252
 800f094:	61417272 	.word	0x61417272
 800f098:	20000ad8 	.word	0x20000ad8

0800f09c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b084      	sub	sp, #16
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	6078      	str	r0, [r7, #4]
 800f0a4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f0a6:	2309      	movs	r3, #9
 800f0a8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d01c      	beq.n	800f0ea <validate+0x4e>
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d018      	beq.n	800f0ea <validate+0x4e>
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	781b      	ldrb	r3, [r3, #0]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d013      	beq.n	800f0ea <validate+0x4e>
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	889a      	ldrh	r2, [r3, #4]
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	88db      	ldrh	r3, [r3, #6]
 800f0cc:	429a      	cmp	r2, r3
 800f0ce:	d10c      	bne.n	800f0ea <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	785b      	ldrb	r3, [r3, #1]
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	f7fe f942 	bl	800d360 <disk_status>
 800f0dc:	4603      	mov	r3, r0
 800f0de:	f003 0301 	and.w	r3, r3, #1
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d101      	bne.n	800f0ea <validate+0x4e>
			res = FR_OK;
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f0ea:	7bfb      	ldrb	r3, [r7, #15]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d102      	bne.n	800f0f6 <validate+0x5a>
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	e000      	b.n	800f0f8 <validate+0x5c>
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	683a      	ldr	r2, [r7, #0]
 800f0fa:	6013      	str	r3, [r2, #0]
	return res;
 800f0fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0fe:	4618      	mov	r0, r3
 800f100:	3710      	adds	r7, #16
 800f102:	46bd      	mov	sp, r7
 800f104:	bd80      	pop	{r7, pc}
	...

0800f108 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f108:	b580      	push	{r7, lr}
 800f10a:	b088      	sub	sp, #32
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	60f8      	str	r0, [r7, #12]
 800f110:	60b9      	str	r1, [r7, #8]
 800f112:	4613      	mov	r3, r2
 800f114:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f116:	68bb      	ldr	r3, [r7, #8]
 800f118:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f11a:	f107 0310 	add.w	r3, r7, #16
 800f11e:	4618      	mov	r0, r3
 800f120:	f7ff fc9e 	bl	800ea60 <get_ldnumber>
 800f124:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f126:	69fb      	ldr	r3, [r7, #28]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	da01      	bge.n	800f130 <f_mount+0x28>
 800f12c:	230b      	movs	r3, #11
 800f12e:	e02b      	b.n	800f188 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f130:	4a17      	ldr	r2, [pc, #92]	; (800f190 <f_mount+0x88>)
 800f132:	69fb      	ldr	r3, [r7, #28]
 800f134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f138:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f13a:	69bb      	ldr	r3, [r7, #24]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d005      	beq.n	800f14c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f140:	69b8      	ldr	r0, [r7, #24]
 800f142:	f7fe fbf3 	bl	800d92c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f146:	69bb      	ldr	r3, [r7, #24]
 800f148:	2200      	movs	r2, #0
 800f14a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d002      	beq.n	800f158 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	2200      	movs	r2, #0
 800f156:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f158:	68fa      	ldr	r2, [r7, #12]
 800f15a:	490d      	ldr	r1, [pc, #52]	; (800f190 <f_mount+0x88>)
 800f15c:	69fb      	ldr	r3, [r7, #28]
 800f15e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	2b00      	cmp	r3, #0
 800f166:	d002      	beq.n	800f16e <f_mount+0x66>
 800f168:	79fb      	ldrb	r3, [r7, #7]
 800f16a:	2b01      	cmp	r3, #1
 800f16c:	d001      	beq.n	800f172 <f_mount+0x6a>
 800f16e:	2300      	movs	r3, #0
 800f170:	e00a      	b.n	800f188 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f172:	f107 010c 	add.w	r1, r7, #12
 800f176:	f107 0308 	add.w	r3, r7, #8
 800f17a:	2200      	movs	r2, #0
 800f17c:	4618      	mov	r0, r3
 800f17e:	f7ff fd09 	bl	800eb94 <find_volume>
 800f182:	4603      	mov	r3, r0
 800f184:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f186:	7dfb      	ldrb	r3, [r7, #23]
}
 800f188:	4618      	mov	r0, r3
 800f18a:	3720      	adds	r7, #32
 800f18c:	46bd      	mov	sp, r7
 800f18e:	bd80      	pop	{r7, pc}
 800f190:	20000ad4 	.word	0x20000ad4

0800f194 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f194:	b580      	push	{r7, lr}
 800f196:	b098      	sub	sp, #96	; 0x60
 800f198:	af00      	add	r7, sp, #0
 800f19a:	60f8      	str	r0, [r7, #12]
 800f19c:	60b9      	str	r1, [r7, #8]
 800f19e:	4613      	mov	r3, r2
 800f1a0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d101      	bne.n	800f1ac <f_open+0x18>
 800f1a8:	2309      	movs	r3, #9
 800f1aa:	e1bb      	b.n	800f524 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f1ac:	79fb      	ldrb	r3, [r7, #7]
 800f1ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f1b2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800f1b4:	79fa      	ldrb	r2, [r7, #7]
 800f1b6:	f107 0110 	add.w	r1, r7, #16
 800f1ba:	f107 0308 	add.w	r3, r7, #8
 800f1be:	4618      	mov	r0, r3
 800f1c0:	f7ff fce8 	bl	800eb94 <find_volume>
 800f1c4:	4603      	mov	r3, r0
 800f1c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800f1ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	f040 819f 	bne.w	800f512 <f_open+0x37e>
		dj.obj.fs = fs;
 800f1d4:	693b      	ldr	r3, [r7, #16]
 800f1d6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f1d8:	68ba      	ldr	r2, [r7, #8]
 800f1da:	f107 0314 	add.w	r3, r7, #20
 800f1de:	4611      	mov	r1, r2
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	f7ff fbc7 	bl	800e974 <follow_path>
 800f1e6:	4603      	mov	r3, r0
 800f1e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f1ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d11a      	bne.n	800f22a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f1f4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f1f8:	b25b      	sxtb	r3, r3
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	da03      	bge.n	800f206 <f_open+0x72>
				res = FR_INVALID_NAME;
 800f1fe:	2306      	movs	r3, #6
 800f200:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f204:	e011      	b.n	800f22a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f206:	79fb      	ldrb	r3, [r7, #7]
 800f208:	f023 0301 	bic.w	r3, r3, #1
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	bf14      	ite	ne
 800f210:	2301      	movne	r3, #1
 800f212:	2300      	moveq	r3, #0
 800f214:	b2db      	uxtb	r3, r3
 800f216:	461a      	mov	r2, r3
 800f218:	f107 0314 	add.w	r3, r7, #20
 800f21c:	4611      	mov	r1, r2
 800f21e:	4618      	mov	r0, r3
 800f220:	f7fe fa3c 	bl	800d69c <chk_lock>
 800f224:	4603      	mov	r3, r0
 800f226:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f22a:	79fb      	ldrb	r3, [r7, #7]
 800f22c:	f003 031c 	and.w	r3, r3, #28
 800f230:	2b00      	cmp	r3, #0
 800f232:	d07f      	beq.n	800f334 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800f234:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d017      	beq.n	800f26c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f23c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f240:	2b04      	cmp	r3, #4
 800f242:	d10e      	bne.n	800f262 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f244:	f7fe fa86 	bl	800d754 <enq_lock>
 800f248:	4603      	mov	r3, r0
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d006      	beq.n	800f25c <f_open+0xc8>
 800f24e:	f107 0314 	add.w	r3, r7, #20
 800f252:	4618      	mov	r0, r3
 800f254:	f7ff fa4b 	bl	800e6ee <dir_register>
 800f258:	4603      	mov	r3, r0
 800f25a:	e000      	b.n	800f25e <f_open+0xca>
 800f25c:	2312      	movs	r3, #18
 800f25e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f262:	79fb      	ldrb	r3, [r7, #7]
 800f264:	f043 0308 	orr.w	r3, r3, #8
 800f268:	71fb      	strb	r3, [r7, #7]
 800f26a:	e010      	b.n	800f28e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f26c:	7ebb      	ldrb	r3, [r7, #26]
 800f26e:	f003 0311 	and.w	r3, r3, #17
 800f272:	2b00      	cmp	r3, #0
 800f274:	d003      	beq.n	800f27e <f_open+0xea>
					res = FR_DENIED;
 800f276:	2307      	movs	r3, #7
 800f278:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f27c:	e007      	b.n	800f28e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f27e:	79fb      	ldrb	r3, [r7, #7]
 800f280:	f003 0304 	and.w	r3, r3, #4
 800f284:	2b00      	cmp	r3, #0
 800f286:	d002      	beq.n	800f28e <f_open+0xfa>
 800f288:	2308      	movs	r3, #8
 800f28a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f28e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f292:	2b00      	cmp	r3, #0
 800f294:	d168      	bne.n	800f368 <f_open+0x1d4>
 800f296:	79fb      	ldrb	r3, [r7, #7]
 800f298:	f003 0308 	and.w	r3, r3, #8
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d063      	beq.n	800f368 <f_open+0x1d4>
				dw = GET_FATTIME();
 800f2a0:	f7fd fe0e 	bl	800cec0 <get_fattime>
 800f2a4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f2a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2a8:	330e      	adds	r3, #14
 800f2aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	f7fe f94b 	bl	800d548 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f2b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2b4:	3316      	adds	r3, #22
 800f2b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	f7fe f945 	bl	800d548 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f2be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2c0:	330b      	adds	r3, #11
 800f2c2:	2220      	movs	r2, #32
 800f2c4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f2c6:	693b      	ldr	r3, [r7, #16]
 800f2c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f2ca:	4611      	mov	r1, r2
 800f2cc:	4618      	mov	r0, r3
 800f2ce:	f7ff f91d 	bl	800e50c <ld_clust>
 800f2d2:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f2d4:	693b      	ldr	r3, [r7, #16]
 800f2d6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f2d8:	2200      	movs	r2, #0
 800f2da:	4618      	mov	r0, r3
 800f2dc:	f7ff f935 	bl	800e54a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f2e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2e2:	331c      	adds	r3, #28
 800f2e4:	2100      	movs	r1, #0
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	f7fe f92e 	bl	800d548 <st_dword>
					fs->wflag = 1;
 800f2ec:	693b      	ldr	r3, [r7, #16]
 800f2ee:	2201      	movs	r2, #1
 800f2f0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800f2f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d037      	beq.n	800f368 <f_open+0x1d4>
						dw = fs->winsect;
 800f2f8:	693b      	ldr	r3, [r7, #16]
 800f2fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2fc:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800f2fe:	f107 0314 	add.w	r3, r7, #20
 800f302:	2200      	movs	r2, #0
 800f304:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f306:	4618      	mov	r0, r3
 800f308:	f7fe fe25 	bl	800df56 <remove_chain>
 800f30c:	4603      	mov	r3, r0
 800f30e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800f312:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f316:	2b00      	cmp	r3, #0
 800f318:	d126      	bne.n	800f368 <f_open+0x1d4>
							res = move_window(fs, dw);
 800f31a:	693b      	ldr	r3, [r7, #16]
 800f31c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f31e:	4618      	mov	r0, r3
 800f320:	f7fe fb6c 	bl	800d9fc <move_window>
 800f324:	4603      	mov	r3, r0
 800f326:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f32a:	693b      	ldr	r3, [r7, #16]
 800f32c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f32e:	3a01      	subs	r2, #1
 800f330:	611a      	str	r2, [r3, #16]
 800f332:	e019      	b.n	800f368 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800f334:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d115      	bne.n	800f368 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f33c:	7ebb      	ldrb	r3, [r7, #26]
 800f33e:	f003 0310 	and.w	r3, r3, #16
 800f342:	2b00      	cmp	r3, #0
 800f344:	d003      	beq.n	800f34e <f_open+0x1ba>
					res = FR_NO_FILE;
 800f346:	2304      	movs	r3, #4
 800f348:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f34c:	e00c      	b.n	800f368 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f34e:	79fb      	ldrb	r3, [r7, #7]
 800f350:	f003 0302 	and.w	r3, r3, #2
 800f354:	2b00      	cmp	r3, #0
 800f356:	d007      	beq.n	800f368 <f_open+0x1d4>
 800f358:	7ebb      	ldrb	r3, [r7, #26]
 800f35a:	f003 0301 	and.w	r3, r3, #1
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d002      	beq.n	800f368 <f_open+0x1d4>
						res = FR_DENIED;
 800f362:	2307      	movs	r3, #7
 800f364:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800f368:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d128      	bne.n	800f3c2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f370:	79fb      	ldrb	r3, [r7, #7]
 800f372:	f003 0308 	and.w	r3, r3, #8
 800f376:	2b00      	cmp	r3, #0
 800f378:	d003      	beq.n	800f382 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800f37a:	79fb      	ldrb	r3, [r7, #7]
 800f37c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f380:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f382:	693b      	ldr	r3, [r7, #16]
 800f384:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800f38a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f390:	79fb      	ldrb	r3, [r7, #7]
 800f392:	f023 0301 	bic.w	r3, r3, #1
 800f396:	2b00      	cmp	r3, #0
 800f398:	bf14      	ite	ne
 800f39a:	2301      	movne	r3, #1
 800f39c:	2300      	moveq	r3, #0
 800f39e:	b2db      	uxtb	r3, r3
 800f3a0:	461a      	mov	r2, r3
 800f3a2:	f107 0314 	add.w	r3, r7, #20
 800f3a6:	4611      	mov	r1, r2
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	f7fe f9f5 	bl	800d798 <inc_lock>
 800f3ae:	4602      	mov	r2, r0
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	691b      	ldr	r3, [r3, #16]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d102      	bne.n	800f3c2 <f_open+0x22e>
 800f3bc:	2302      	movs	r3, #2
 800f3be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800f3c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	f040 80a3 	bne.w	800f512 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f3cc:	693b      	ldr	r3, [r7, #16]
 800f3ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f3d0:	4611      	mov	r1, r2
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	f7ff f89a 	bl	800e50c <ld_clust>
 800f3d8:	4602      	mov	r2, r0
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f3de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3e0:	331c      	adds	r3, #28
 800f3e2:	4618      	mov	r0, r3
 800f3e4:	f7fe f872 	bl	800d4cc <ld_dword>
 800f3e8:	4602      	mov	r2, r0
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	2200      	movs	r2, #0
 800f3f2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f3f4:	693a      	ldr	r2, [r7, #16]
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f3fa:	693b      	ldr	r3, [r7, #16]
 800f3fc:	88da      	ldrh	r2, [r3, #6]
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	79fa      	ldrb	r2, [r7, #7]
 800f406:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	2200      	movs	r2, #0
 800f40c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	2200      	movs	r2, #0
 800f412:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	2200      	movs	r2, #0
 800f418:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	3330      	adds	r3, #48	; 0x30
 800f41e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f422:	2100      	movs	r1, #0
 800f424:	4618      	mov	r0, r3
 800f426:	f7fe f8dc 	bl	800d5e2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f42a:	79fb      	ldrb	r3, [r7, #7]
 800f42c:	f003 0320 	and.w	r3, r3, #32
 800f430:	2b00      	cmp	r3, #0
 800f432:	d06e      	beq.n	800f512 <f_open+0x37e>
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	68db      	ldr	r3, [r3, #12]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d06a      	beq.n	800f512 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	68da      	ldr	r2, [r3, #12]
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f444:	693b      	ldr	r3, [r7, #16]
 800f446:	895b      	ldrh	r3, [r3, #10]
 800f448:	461a      	mov	r2, r3
 800f44a:	693b      	ldr	r3, [r7, #16]
 800f44c:	899b      	ldrh	r3, [r3, #12]
 800f44e:	fb03 f302 	mul.w	r3, r3, r2
 800f452:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	689b      	ldr	r3, [r3, #8]
 800f458:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	68db      	ldr	r3, [r3, #12]
 800f45e:	657b      	str	r3, [r7, #84]	; 0x54
 800f460:	e016      	b.n	800f490 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f466:	4618      	mov	r0, r3
 800f468:	f7fe fb85 	bl	800db76 <get_fat>
 800f46c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800f46e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f470:	2b01      	cmp	r3, #1
 800f472:	d802      	bhi.n	800f47a <f_open+0x2e6>
 800f474:	2302      	movs	r3, #2
 800f476:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f47a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f47c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f480:	d102      	bne.n	800f488 <f_open+0x2f4>
 800f482:	2301      	movs	r3, #1
 800f484:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f488:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f48a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f48c:	1ad3      	subs	r3, r2, r3
 800f48e:	657b      	str	r3, [r7, #84]	; 0x54
 800f490:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f494:	2b00      	cmp	r3, #0
 800f496:	d103      	bne.n	800f4a0 <f_open+0x30c>
 800f498:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f49a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f49c:	429a      	cmp	r2, r3
 800f49e:	d8e0      	bhi.n	800f462 <f_open+0x2ce>
				}
				fp->clust = clst;
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f4a4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f4a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d131      	bne.n	800f512 <f_open+0x37e>
 800f4ae:	693b      	ldr	r3, [r7, #16]
 800f4b0:	899b      	ldrh	r3, [r3, #12]
 800f4b2:	461a      	mov	r2, r3
 800f4b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f4b6:	fbb3 f1f2 	udiv	r1, r3, r2
 800f4ba:	fb02 f201 	mul.w	r2, r2, r1
 800f4be:	1a9b      	subs	r3, r3, r2
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d026      	beq.n	800f512 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f4c4:	693b      	ldr	r3, [r7, #16]
 800f4c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	f7fe fb35 	bl	800db38 <clust2sect>
 800f4ce:	6478      	str	r0, [r7, #68]	; 0x44
 800f4d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d103      	bne.n	800f4de <f_open+0x34a>
						res = FR_INT_ERR;
 800f4d6:	2302      	movs	r3, #2
 800f4d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f4dc:	e019      	b.n	800f512 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f4de:	693b      	ldr	r3, [r7, #16]
 800f4e0:	899b      	ldrh	r3, [r3, #12]
 800f4e2:	461a      	mov	r2, r3
 800f4e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f4e6:	fbb3 f2f2 	udiv	r2, r3, r2
 800f4ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f4ec:	441a      	add	r2, r3
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f4f2:	693b      	ldr	r3, [r7, #16]
 800f4f4:	7858      	ldrb	r0, [r3, #1]
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	6a1a      	ldr	r2, [r3, #32]
 800f500:	2301      	movs	r3, #1
 800f502:	f7fd ff6d 	bl	800d3e0 <disk_read>
 800f506:	4603      	mov	r3, r0
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d002      	beq.n	800f512 <f_open+0x37e>
 800f50c:	2301      	movs	r3, #1
 800f50e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800f512:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f516:	2b00      	cmp	r3, #0
 800f518:	d002      	beq.n	800f520 <f_open+0x38c>
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	2200      	movs	r2, #0
 800f51e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f520:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800f524:	4618      	mov	r0, r3
 800f526:	3760      	adds	r7, #96	; 0x60
 800f528:	46bd      	mov	sp, r7
 800f52a:	bd80      	pop	{r7, pc}

0800f52c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800f52c:	b580      	push	{r7, lr}
 800f52e:	b08e      	sub	sp, #56	; 0x38
 800f530:	af00      	add	r7, sp, #0
 800f532:	60f8      	str	r0, [r7, #12]
 800f534:	60b9      	str	r1, [r7, #8]
 800f536:	607a      	str	r2, [r7, #4]
 800f538:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800f53a:	68bb      	ldr	r3, [r7, #8]
 800f53c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800f53e:	683b      	ldr	r3, [r7, #0]
 800f540:	2200      	movs	r2, #0
 800f542:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	f107 0214 	add.w	r2, r7, #20
 800f54a:	4611      	mov	r1, r2
 800f54c:	4618      	mov	r0, r3
 800f54e:	f7ff fda5 	bl	800f09c <validate>
 800f552:	4603      	mov	r3, r0
 800f554:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f558:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d107      	bne.n	800f570 <f_read+0x44>
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	7d5b      	ldrb	r3, [r3, #21]
 800f564:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f568:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d002      	beq.n	800f576 <f_read+0x4a>
 800f570:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f574:	e135      	b.n	800f7e2 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	7d1b      	ldrb	r3, [r3, #20]
 800f57a:	f003 0301 	and.w	r3, r3, #1
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d101      	bne.n	800f586 <f_read+0x5a>
 800f582:	2307      	movs	r3, #7
 800f584:	e12d      	b.n	800f7e2 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	68da      	ldr	r2, [r3, #12]
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	699b      	ldr	r3, [r3, #24]
 800f58e:	1ad3      	subs	r3, r2, r3
 800f590:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800f592:	687a      	ldr	r2, [r7, #4]
 800f594:	6a3b      	ldr	r3, [r7, #32]
 800f596:	429a      	cmp	r2, r3
 800f598:	f240 811e 	bls.w	800f7d8 <f_read+0x2ac>
 800f59c:	6a3b      	ldr	r3, [r7, #32]
 800f59e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800f5a0:	e11a      	b.n	800f7d8 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	699b      	ldr	r3, [r3, #24]
 800f5a6:	697a      	ldr	r2, [r7, #20]
 800f5a8:	8992      	ldrh	r2, [r2, #12]
 800f5aa:	fbb3 f1f2 	udiv	r1, r3, r2
 800f5ae:	fb02 f201 	mul.w	r2, r2, r1
 800f5b2:	1a9b      	subs	r3, r3, r2
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	f040 80d5 	bne.w	800f764 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	699b      	ldr	r3, [r3, #24]
 800f5be:	697a      	ldr	r2, [r7, #20]
 800f5c0:	8992      	ldrh	r2, [r2, #12]
 800f5c2:	fbb3 f3f2 	udiv	r3, r3, r2
 800f5c6:	697a      	ldr	r2, [r7, #20]
 800f5c8:	8952      	ldrh	r2, [r2, #10]
 800f5ca:	3a01      	subs	r2, #1
 800f5cc:	4013      	ands	r3, r2
 800f5ce:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800f5d0:	69fb      	ldr	r3, [r7, #28]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d12f      	bne.n	800f636 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	699b      	ldr	r3, [r3, #24]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d103      	bne.n	800f5e6 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	689b      	ldr	r3, [r3, #8]
 800f5e2:	633b      	str	r3, [r7, #48]	; 0x30
 800f5e4:	e013      	b.n	800f60e <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d007      	beq.n	800f5fe <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	699b      	ldr	r3, [r3, #24]
 800f5f2:	4619      	mov	r1, r3
 800f5f4:	68f8      	ldr	r0, [r7, #12]
 800f5f6:	f7fe fdab 	bl	800e150 <clmt_clust>
 800f5fa:	6338      	str	r0, [r7, #48]	; 0x30
 800f5fc:	e007      	b.n	800f60e <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800f5fe:	68fa      	ldr	r2, [r7, #12]
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	69db      	ldr	r3, [r3, #28]
 800f604:	4619      	mov	r1, r3
 800f606:	4610      	mov	r0, r2
 800f608:	f7fe fab5 	bl	800db76 <get_fat>
 800f60c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800f60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f610:	2b01      	cmp	r3, #1
 800f612:	d804      	bhi.n	800f61e <f_read+0xf2>
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	2202      	movs	r2, #2
 800f618:	755a      	strb	r2, [r3, #21]
 800f61a:	2302      	movs	r3, #2
 800f61c:	e0e1      	b.n	800f7e2 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f620:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f624:	d104      	bne.n	800f630 <f_read+0x104>
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	2201      	movs	r2, #1
 800f62a:	755a      	strb	r2, [r3, #21]
 800f62c:	2301      	movs	r3, #1
 800f62e:	e0d8      	b.n	800f7e2 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f634:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f636:	697a      	ldr	r2, [r7, #20]
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	69db      	ldr	r3, [r3, #28]
 800f63c:	4619      	mov	r1, r3
 800f63e:	4610      	mov	r0, r2
 800f640:	f7fe fa7a 	bl	800db38 <clust2sect>
 800f644:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f646:	69bb      	ldr	r3, [r7, #24]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d104      	bne.n	800f656 <f_read+0x12a>
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	2202      	movs	r2, #2
 800f650:	755a      	strb	r2, [r3, #21]
 800f652:	2302      	movs	r3, #2
 800f654:	e0c5      	b.n	800f7e2 <f_read+0x2b6>
			sect += csect;
 800f656:	69ba      	ldr	r2, [r7, #24]
 800f658:	69fb      	ldr	r3, [r7, #28]
 800f65a:	4413      	add	r3, r2
 800f65c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800f65e:	697b      	ldr	r3, [r7, #20]
 800f660:	899b      	ldrh	r3, [r3, #12]
 800f662:	461a      	mov	r2, r3
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	fbb3 f3f2 	udiv	r3, r3, r2
 800f66a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800f66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d041      	beq.n	800f6f6 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f672:	69fa      	ldr	r2, [r7, #28]
 800f674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f676:	4413      	add	r3, r2
 800f678:	697a      	ldr	r2, [r7, #20]
 800f67a:	8952      	ldrh	r2, [r2, #10]
 800f67c:	4293      	cmp	r3, r2
 800f67e:	d905      	bls.n	800f68c <f_read+0x160>
					cc = fs->csize - csect;
 800f680:	697b      	ldr	r3, [r7, #20]
 800f682:	895b      	ldrh	r3, [r3, #10]
 800f684:	461a      	mov	r2, r3
 800f686:	69fb      	ldr	r3, [r7, #28]
 800f688:	1ad3      	subs	r3, r2, r3
 800f68a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f68c:	697b      	ldr	r3, [r7, #20]
 800f68e:	7858      	ldrb	r0, [r3, #1]
 800f690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f692:	69ba      	ldr	r2, [r7, #24]
 800f694:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f696:	f7fd fea3 	bl	800d3e0 <disk_read>
 800f69a:	4603      	mov	r3, r0
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d004      	beq.n	800f6aa <f_read+0x17e>
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	2201      	movs	r2, #1
 800f6a4:	755a      	strb	r2, [r3, #21]
 800f6a6:	2301      	movs	r3, #1
 800f6a8:	e09b      	b.n	800f7e2 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	7d1b      	ldrb	r3, [r3, #20]
 800f6ae:	b25b      	sxtb	r3, r3
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	da18      	bge.n	800f6e6 <f_read+0x1ba>
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	6a1a      	ldr	r2, [r3, #32]
 800f6b8:	69bb      	ldr	r3, [r7, #24]
 800f6ba:	1ad3      	subs	r3, r2, r3
 800f6bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f6be:	429a      	cmp	r2, r3
 800f6c0:	d911      	bls.n	800f6e6 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	6a1a      	ldr	r2, [r3, #32]
 800f6c6:	69bb      	ldr	r3, [r7, #24]
 800f6c8:	1ad3      	subs	r3, r2, r3
 800f6ca:	697a      	ldr	r2, [r7, #20]
 800f6cc:	8992      	ldrh	r2, [r2, #12]
 800f6ce:	fb02 f303 	mul.w	r3, r2, r3
 800f6d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f6d4:	18d0      	adds	r0, r2, r3
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f6dc:	697b      	ldr	r3, [r7, #20]
 800f6de:	899b      	ldrh	r3, [r3, #12]
 800f6e0:	461a      	mov	r2, r3
 800f6e2:	f7fd ff5d 	bl	800d5a0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800f6e6:	697b      	ldr	r3, [r7, #20]
 800f6e8:	899b      	ldrh	r3, [r3, #12]
 800f6ea:	461a      	mov	r2, r3
 800f6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6ee:	fb02 f303 	mul.w	r3, r2, r3
 800f6f2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800f6f4:	e05c      	b.n	800f7b0 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	6a1b      	ldr	r3, [r3, #32]
 800f6fa:	69ba      	ldr	r2, [r7, #24]
 800f6fc:	429a      	cmp	r2, r3
 800f6fe:	d02e      	beq.n	800f75e <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	7d1b      	ldrb	r3, [r3, #20]
 800f704:	b25b      	sxtb	r3, r3
 800f706:	2b00      	cmp	r3, #0
 800f708:	da18      	bge.n	800f73c <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f70a:	697b      	ldr	r3, [r7, #20]
 800f70c:	7858      	ldrb	r0, [r3, #1]
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	6a1a      	ldr	r2, [r3, #32]
 800f718:	2301      	movs	r3, #1
 800f71a:	f7fd fe81 	bl	800d420 <disk_write>
 800f71e:	4603      	mov	r3, r0
 800f720:	2b00      	cmp	r3, #0
 800f722:	d004      	beq.n	800f72e <f_read+0x202>
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	2201      	movs	r2, #1
 800f728:	755a      	strb	r2, [r3, #21]
 800f72a:	2301      	movs	r3, #1
 800f72c:	e059      	b.n	800f7e2 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	7d1b      	ldrb	r3, [r3, #20]
 800f732:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f736:	b2da      	uxtb	r2, r3
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f73c:	697b      	ldr	r3, [r7, #20]
 800f73e:	7858      	ldrb	r0, [r3, #1]
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f746:	2301      	movs	r3, #1
 800f748:	69ba      	ldr	r2, [r7, #24]
 800f74a:	f7fd fe49 	bl	800d3e0 <disk_read>
 800f74e:	4603      	mov	r3, r0
 800f750:	2b00      	cmp	r3, #0
 800f752:	d004      	beq.n	800f75e <f_read+0x232>
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	2201      	movs	r2, #1
 800f758:	755a      	strb	r2, [r3, #21]
 800f75a:	2301      	movs	r3, #1
 800f75c:	e041      	b.n	800f7e2 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	69ba      	ldr	r2, [r7, #24]
 800f762:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f764:	697b      	ldr	r3, [r7, #20]
 800f766:	899b      	ldrh	r3, [r3, #12]
 800f768:	4618      	mov	r0, r3
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	699b      	ldr	r3, [r3, #24]
 800f76e:	697a      	ldr	r2, [r7, #20]
 800f770:	8992      	ldrh	r2, [r2, #12]
 800f772:	fbb3 f1f2 	udiv	r1, r3, r2
 800f776:	fb02 f201 	mul.w	r2, r2, r1
 800f77a:	1a9b      	subs	r3, r3, r2
 800f77c:	1ac3      	subs	r3, r0, r3
 800f77e:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800f780:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	429a      	cmp	r2, r3
 800f786:	d901      	bls.n	800f78c <f_read+0x260>
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	699b      	ldr	r3, [r3, #24]
 800f796:	697a      	ldr	r2, [r7, #20]
 800f798:	8992      	ldrh	r2, [r2, #12]
 800f79a:	fbb3 f0f2 	udiv	r0, r3, r2
 800f79e:	fb02 f200 	mul.w	r2, r2, r0
 800f7a2:	1a9b      	subs	r3, r3, r2
 800f7a4:	440b      	add	r3, r1
 800f7a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f7a8:	4619      	mov	r1, r3
 800f7aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f7ac:	f7fd fef8 	bl	800d5a0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800f7b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f7b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7b4:	4413      	add	r3, r2
 800f7b6:	627b      	str	r3, [r7, #36]	; 0x24
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	699a      	ldr	r2, [r3, #24]
 800f7bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7be:	441a      	add	r2, r3
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	619a      	str	r2, [r3, #24]
 800f7c4:	683b      	ldr	r3, [r7, #0]
 800f7c6:	681a      	ldr	r2, [r3, #0]
 800f7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7ca:	441a      	add	r2, r3
 800f7cc:	683b      	ldr	r3, [r7, #0]
 800f7ce:	601a      	str	r2, [r3, #0]
 800f7d0:	687a      	ldr	r2, [r7, #4]
 800f7d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7d4:	1ad3      	subs	r3, r2, r3
 800f7d6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	f47f aee1 	bne.w	800f5a2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800f7e0:	2300      	movs	r3, #0
}
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	3738      	adds	r7, #56	; 0x38
 800f7e6:	46bd      	mov	sp, r7
 800f7e8:	bd80      	pop	{r7, pc}

0800f7ea <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800f7ea:	b580      	push	{r7, lr}
 800f7ec:	b08c      	sub	sp, #48	; 0x30
 800f7ee:	af00      	add	r7, sp, #0
 800f7f0:	60f8      	str	r0, [r7, #12]
 800f7f2:	60b9      	str	r1, [r7, #8]
 800f7f4:	607a      	str	r2, [r7, #4]
 800f7f6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800f7f8:	68bb      	ldr	r3, [r7, #8]
 800f7fa:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800f7fc:	683b      	ldr	r3, [r7, #0]
 800f7fe:	2200      	movs	r2, #0
 800f800:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	f107 0210 	add.w	r2, r7, #16
 800f808:	4611      	mov	r1, r2
 800f80a:	4618      	mov	r0, r3
 800f80c:	f7ff fc46 	bl	800f09c <validate>
 800f810:	4603      	mov	r3, r0
 800f812:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f816:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d107      	bne.n	800f82e <f_write+0x44>
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	7d5b      	ldrb	r3, [r3, #21]
 800f822:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800f826:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d002      	beq.n	800f834 <f_write+0x4a>
 800f82e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f832:	e16a      	b.n	800fb0a <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	7d1b      	ldrb	r3, [r3, #20]
 800f838:	f003 0302 	and.w	r3, r3, #2
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d101      	bne.n	800f844 <f_write+0x5a>
 800f840:	2307      	movs	r3, #7
 800f842:	e162      	b.n	800fb0a <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	699a      	ldr	r2, [r3, #24]
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	441a      	add	r2, r3
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	699b      	ldr	r3, [r3, #24]
 800f850:	429a      	cmp	r2, r3
 800f852:	f080 814c 	bcs.w	800faee <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	699b      	ldr	r3, [r3, #24]
 800f85a:	43db      	mvns	r3, r3
 800f85c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800f85e:	e146      	b.n	800faee <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	699b      	ldr	r3, [r3, #24]
 800f864:	693a      	ldr	r2, [r7, #16]
 800f866:	8992      	ldrh	r2, [r2, #12]
 800f868:	fbb3 f1f2 	udiv	r1, r3, r2
 800f86c:	fb02 f201 	mul.w	r2, r2, r1
 800f870:	1a9b      	subs	r3, r3, r2
 800f872:	2b00      	cmp	r3, #0
 800f874:	f040 80f1 	bne.w	800fa5a <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	699b      	ldr	r3, [r3, #24]
 800f87c:	693a      	ldr	r2, [r7, #16]
 800f87e:	8992      	ldrh	r2, [r2, #12]
 800f880:	fbb3 f3f2 	udiv	r3, r3, r2
 800f884:	693a      	ldr	r2, [r7, #16]
 800f886:	8952      	ldrh	r2, [r2, #10]
 800f888:	3a01      	subs	r2, #1
 800f88a:	4013      	ands	r3, r2
 800f88c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800f88e:	69bb      	ldr	r3, [r7, #24]
 800f890:	2b00      	cmp	r3, #0
 800f892:	d143      	bne.n	800f91c <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	699b      	ldr	r3, [r3, #24]
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d10c      	bne.n	800f8b6 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	689b      	ldr	r3, [r3, #8]
 800f8a0:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800f8a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d11a      	bne.n	800f8de <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	2100      	movs	r1, #0
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	f7fe fbb7 	bl	800e020 <create_chain>
 800f8b2:	62b8      	str	r0, [r7, #40]	; 0x28
 800f8b4:	e013      	b.n	800f8de <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d007      	beq.n	800f8ce <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	699b      	ldr	r3, [r3, #24]
 800f8c2:	4619      	mov	r1, r3
 800f8c4:	68f8      	ldr	r0, [r7, #12]
 800f8c6:	f7fe fc43 	bl	800e150 <clmt_clust>
 800f8ca:	62b8      	str	r0, [r7, #40]	; 0x28
 800f8cc:	e007      	b.n	800f8de <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800f8ce:	68fa      	ldr	r2, [r7, #12]
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	69db      	ldr	r3, [r3, #28]
 800f8d4:	4619      	mov	r1, r3
 800f8d6:	4610      	mov	r0, r2
 800f8d8:	f7fe fba2 	bl	800e020 <create_chain>
 800f8dc:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f8de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	f000 8109 	beq.w	800faf8 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f8e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8e8:	2b01      	cmp	r3, #1
 800f8ea:	d104      	bne.n	800f8f6 <f_write+0x10c>
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	2202      	movs	r2, #2
 800f8f0:	755a      	strb	r2, [r3, #21]
 800f8f2:	2302      	movs	r3, #2
 800f8f4:	e109      	b.n	800fb0a <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8fc:	d104      	bne.n	800f908 <f_write+0x11e>
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	2201      	movs	r2, #1
 800f902:	755a      	strb	r2, [r3, #21]
 800f904:	2301      	movs	r3, #1
 800f906:	e100      	b.n	800fb0a <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f90c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	689b      	ldr	r3, [r3, #8]
 800f912:	2b00      	cmp	r3, #0
 800f914:	d102      	bne.n	800f91c <f_write+0x132>
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f91a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	7d1b      	ldrb	r3, [r3, #20]
 800f920:	b25b      	sxtb	r3, r3
 800f922:	2b00      	cmp	r3, #0
 800f924:	da18      	bge.n	800f958 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f926:	693b      	ldr	r3, [r7, #16]
 800f928:	7858      	ldrb	r0, [r3, #1]
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	6a1a      	ldr	r2, [r3, #32]
 800f934:	2301      	movs	r3, #1
 800f936:	f7fd fd73 	bl	800d420 <disk_write>
 800f93a:	4603      	mov	r3, r0
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d004      	beq.n	800f94a <f_write+0x160>
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	2201      	movs	r2, #1
 800f944:	755a      	strb	r2, [r3, #21]
 800f946:	2301      	movs	r3, #1
 800f948:	e0df      	b.n	800fb0a <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	7d1b      	ldrb	r3, [r3, #20]
 800f94e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f952:	b2da      	uxtb	r2, r3
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f958:	693a      	ldr	r2, [r7, #16]
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	69db      	ldr	r3, [r3, #28]
 800f95e:	4619      	mov	r1, r3
 800f960:	4610      	mov	r0, r2
 800f962:	f7fe f8e9 	bl	800db38 <clust2sect>
 800f966:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f968:	697b      	ldr	r3, [r7, #20]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d104      	bne.n	800f978 <f_write+0x18e>
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	2202      	movs	r2, #2
 800f972:	755a      	strb	r2, [r3, #21]
 800f974:	2302      	movs	r3, #2
 800f976:	e0c8      	b.n	800fb0a <f_write+0x320>
			sect += csect;
 800f978:	697a      	ldr	r2, [r7, #20]
 800f97a:	69bb      	ldr	r3, [r7, #24]
 800f97c:	4413      	add	r3, r2
 800f97e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800f980:	693b      	ldr	r3, [r7, #16]
 800f982:	899b      	ldrh	r3, [r3, #12]
 800f984:	461a      	mov	r2, r3
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	fbb3 f3f2 	udiv	r3, r3, r2
 800f98c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f98e:	6a3b      	ldr	r3, [r7, #32]
 800f990:	2b00      	cmp	r3, #0
 800f992:	d043      	beq.n	800fa1c <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f994:	69ba      	ldr	r2, [r7, #24]
 800f996:	6a3b      	ldr	r3, [r7, #32]
 800f998:	4413      	add	r3, r2
 800f99a:	693a      	ldr	r2, [r7, #16]
 800f99c:	8952      	ldrh	r2, [r2, #10]
 800f99e:	4293      	cmp	r3, r2
 800f9a0:	d905      	bls.n	800f9ae <f_write+0x1c4>
					cc = fs->csize - csect;
 800f9a2:	693b      	ldr	r3, [r7, #16]
 800f9a4:	895b      	ldrh	r3, [r3, #10]
 800f9a6:	461a      	mov	r2, r3
 800f9a8:	69bb      	ldr	r3, [r7, #24]
 800f9aa:	1ad3      	subs	r3, r2, r3
 800f9ac:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f9ae:	693b      	ldr	r3, [r7, #16]
 800f9b0:	7858      	ldrb	r0, [r3, #1]
 800f9b2:	6a3b      	ldr	r3, [r7, #32]
 800f9b4:	697a      	ldr	r2, [r7, #20]
 800f9b6:	69f9      	ldr	r1, [r7, #28]
 800f9b8:	f7fd fd32 	bl	800d420 <disk_write>
 800f9bc:	4603      	mov	r3, r0
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d004      	beq.n	800f9cc <f_write+0x1e2>
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	2201      	movs	r2, #1
 800f9c6:	755a      	strb	r2, [r3, #21]
 800f9c8:	2301      	movs	r3, #1
 800f9ca:	e09e      	b.n	800fb0a <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	6a1a      	ldr	r2, [r3, #32]
 800f9d0:	697b      	ldr	r3, [r7, #20]
 800f9d2:	1ad3      	subs	r3, r2, r3
 800f9d4:	6a3a      	ldr	r2, [r7, #32]
 800f9d6:	429a      	cmp	r2, r3
 800f9d8:	d918      	bls.n	800fa0c <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	6a1a      	ldr	r2, [r3, #32]
 800f9e4:	697b      	ldr	r3, [r7, #20]
 800f9e6:	1ad3      	subs	r3, r2, r3
 800f9e8:	693a      	ldr	r2, [r7, #16]
 800f9ea:	8992      	ldrh	r2, [r2, #12]
 800f9ec:	fb02 f303 	mul.w	r3, r2, r3
 800f9f0:	69fa      	ldr	r2, [r7, #28]
 800f9f2:	18d1      	adds	r1, r2, r3
 800f9f4:	693b      	ldr	r3, [r7, #16]
 800f9f6:	899b      	ldrh	r3, [r3, #12]
 800f9f8:	461a      	mov	r2, r3
 800f9fa:	f7fd fdd1 	bl	800d5a0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	7d1b      	ldrb	r3, [r3, #20]
 800fa02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fa06:	b2da      	uxtb	r2, r3
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800fa0c:	693b      	ldr	r3, [r7, #16]
 800fa0e:	899b      	ldrh	r3, [r3, #12]
 800fa10:	461a      	mov	r2, r3
 800fa12:	6a3b      	ldr	r3, [r7, #32]
 800fa14:	fb02 f303 	mul.w	r3, r2, r3
 800fa18:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800fa1a:	e04b      	b.n	800fab4 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	6a1b      	ldr	r3, [r3, #32]
 800fa20:	697a      	ldr	r2, [r7, #20]
 800fa22:	429a      	cmp	r2, r3
 800fa24:	d016      	beq.n	800fa54 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	699a      	ldr	r2, [r3, #24]
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800fa2e:	429a      	cmp	r2, r3
 800fa30:	d210      	bcs.n	800fa54 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800fa32:	693b      	ldr	r3, [r7, #16]
 800fa34:	7858      	ldrb	r0, [r3, #1]
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fa3c:	2301      	movs	r3, #1
 800fa3e:	697a      	ldr	r2, [r7, #20]
 800fa40:	f7fd fcce 	bl	800d3e0 <disk_read>
 800fa44:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d004      	beq.n	800fa54 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	2201      	movs	r2, #1
 800fa4e:	755a      	strb	r2, [r3, #21]
 800fa50:	2301      	movs	r3, #1
 800fa52:	e05a      	b.n	800fb0a <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	697a      	ldr	r2, [r7, #20]
 800fa58:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800fa5a:	693b      	ldr	r3, [r7, #16]
 800fa5c:	899b      	ldrh	r3, [r3, #12]
 800fa5e:	4618      	mov	r0, r3
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	699b      	ldr	r3, [r3, #24]
 800fa64:	693a      	ldr	r2, [r7, #16]
 800fa66:	8992      	ldrh	r2, [r2, #12]
 800fa68:	fbb3 f1f2 	udiv	r1, r3, r2
 800fa6c:	fb02 f201 	mul.w	r2, r2, r1
 800fa70:	1a9b      	subs	r3, r3, r2
 800fa72:	1ac3      	subs	r3, r0, r3
 800fa74:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800fa76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	429a      	cmp	r2, r3
 800fa7c:	d901      	bls.n	800fa82 <f_write+0x298>
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	699b      	ldr	r3, [r3, #24]
 800fa8c:	693a      	ldr	r2, [r7, #16]
 800fa8e:	8992      	ldrh	r2, [r2, #12]
 800fa90:	fbb3 f0f2 	udiv	r0, r3, r2
 800fa94:	fb02 f200 	mul.w	r2, r2, r0
 800fa98:	1a9b      	subs	r3, r3, r2
 800fa9a:	440b      	add	r3, r1
 800fa9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa9e:	69f9      	ldr	r1, [r7, #28]
 800faa0:	4618      	mov	r0, r3
 800faa2:	f7fd fd7d 	bl	800d5a0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	7d1b      	ldrb	r3, [r3, #20]
 800faaa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800faae:	b2da      	uxtb	r2, r3
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800fab4:	69fa      	ldr	r2, [r7, #28]
 800fab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fab8:	4413      	add	r3, r2
 800faba:	61fb      	str	r3, [r7, #28]
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	699a      	ldr	r2, [r3, #24]
 800fac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fac2:	441a      	add	r2, r3
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	619a      	str	r2, [r3, #24]
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	68da      	ldr	r2, [r3, #12]
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	699b      	ldr	r3, [r3, #24]
 800fad0:	429a      	cmp	r2, r3
 800fad2:	bf38      	it	cc
 800fad4:	461a      	movcc	r2, r3
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	60da      	str	r2, [r3, #12]
 800fada:	683b      	ldr	r3, [r7, #0]
 800fadc:	681a      	ldr	r2, [r3, #0]
 800fade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fae0:	441a      	add	r2, r3
 800fae2:	683b      	ldr	r3, [r7, #0]
 800fae4:	601a      	str	r2, [r3, #0]
 800fae6:	687a      	ldr	r2, [r7, #4]
 800fae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faea:	1ad3      	subs	r3, r2, r3
 800faec:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	f47f aeb5 	bne.w	800f860 <f_write+0x76>
 800faf6:	e000      	b.n	800fafa <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800faf8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	7d1b      	ldrb	r3, [r3, #20]
 800fafe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fb02:	b2da      	uxtb	r2, r3
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800fb08:	2300      	movs	r3, #0
}
 800fb0a:	4618      	mov	r0, r3
 800fb0c:	3730      	adds	r7, #48	; 0x30
 800fb0e:	46bd      	mov	sp, r7
 800fb10:	bd80      	pop	{r7, pc}

0800fb12 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800fb12:	b580      	push	{r7, lr}
 800fb14:	b086      	sub	sp, #24
 800fb16:	af00      	add	r7, sp, #0
 800fb18:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	f107 0208 	add.w	r2, r7, #8
 800fb20:	4611      	mov	r1, r2
 800fb22:	4618      	mov	r0, r3
 800fb24:	f7ff faba 	bl	800f09c <validate>
 800fb28:	4603      	mov	r3, r0
 800fb2a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800fb2c:	7dfb      	ldrb	r3, [r7, #23]
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d168      	bne.n	800fc04 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	7d1b      	ldrb	r3, [r3, #20]
 800fb36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d062      	beq.n	800fc04 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	7d1b      	ldrb	r3, [r3, #20]
 800fb42:	b25b      	sxtb	r3, r3
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	da15      	bge.n	800fb74 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800fb48:	68bb      	ldr	r3, [r7, #8]
 800fb4a:	7858      	ldrb	r0, [r3, #1]
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	6a1a      	ldr	r2, [r3, #32]
 800fb56:	2301      	movs	r3, #1
 800fb58:	f7fd fc62 	bl	800d420 <disk_write>
 800fb5c:	4603      	mov	r3, r0
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d001      	beq.n	800fb66 <f_sync+0x54>
 800fb62:	2301      	movs	r3, #1
 800fb64:	e04f      	b.n	800fc06 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	7d1b      	ldrb	r3, [r3, #20]
 800fb6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fb6e:	b2da      	uxtb	r2, r3
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800fb74:	f7fd f9a4 	bl	800cec0 <get_fattime>
 800fb78:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800fb7a:	68ba      	ldr	r2, [r7, #8]
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb80:	4619      	mov	r1, r3
 800fb82:	4610      	mov	r0, r2
 800fb84:	f7fd ff3a 	bl	800d9fc <move_window>
 800fb88:	4603      	mov	r3, r0
 800fb8a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800fb8c:	7dfb      	ldrb	r3, [r7, #23]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d138      	bne.n	800fc04 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb96:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	330b      	adds	r3, #11
 800fb9c:	781a      	ldrb	r2, [r3, #0]
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	330b      	adds	r3, #11
 800fba2:	f042 0220 	orr.w	r2, r2, #32
 800fba6:	b2d2      	uxtb	r2, r2
 800fba8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	6818      	ldr	r0, [r3, #0]
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	689b      	ldr	r3, [r3, #8]
 800fbb2:	461a      	mov	r2, r3
 800fbb4:	68f9      	ldr	r1, [r7, #12]
 800fbb6:	f7fe fcc8 	bl	800e54a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	f103 021c 	add.w	r2, r3, #28
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	68db      	ldr	r3, [r3, #12]
 800fbc4:	4619      	mov	r1, r3
 800fbc6:	4610      	mov	r0, r2
 800fbc8:	f7fd fcbe 	bl	800d548 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	3316      	adds	r3, #22
 800fbd0:	6939      	ldr	r1, [r7, #16]
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	f7fd fcb8 	bl	800d548 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	3312      	adds	r3, #18
 800fbdc:	2100      	movs	r1, #0
 800fbde:	4618      	mov	r0, r3
 800fbe0:	f7fd fc97 	bl	800d512 <st_word>
					fs->wflag = 1;
 800fbe4:	68bb      	ldr	r3, [r7, #8]
 800fbe6:	2201      	movs	r2, #1
 800fbe8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800fbea:	68bb      	ldr	r3, [r7, #8]
 800fbec:	4618      	mov	r0, r3
 800fbee:	f7fd ff33 	bl	800da58 <sync_fs>
 800fbf2:	4603      	mov	r3, r0
 800fbf4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	7d1b      	ldrb	r3, [r3, #20]
 800fbfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fbfe:	b2da      	uxtb	r2, r3
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800fc04:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc06:	4618      	mov	r0, r3
 800fc08:	3718      	adds	r7, #24
 800fc0a:	46bd      	mov	sp, r7
 800fc0c:	bd80      	pop	{r7, pc}

0800fc0e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800fc0e:	b580      	push	{r7, lr}
 800fc10:	b084      	sub	sp, #16
 800fc12:	af00      	add	r7, sp, #0
 800fc14:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800fc16:	6878      	ldr	r0, [r7, #4]
 800fc18:	f7ff ff7b 	bl	800fb12 <f_sync>
 800fc1c:	4603      	mov	r3, r0
 800fc1e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800fc20:	7bfb      	ldrb	r3, [r7, #15]
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d118      	bne.n	800fc58 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	f107 0208 	add.w	r2, r7, #8
 800fc2c:	4611      	mov	r1, r2
 800fc2e:	4618      	mov	r0, r3
 800fc30:	f7ff fa34 	bl	800f09c <validate>
 800fc34:	4603      	mov	r3, r0
 800fc36:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800fc38:	7bfb      	ldrb	r3, [r7, #15]
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d10c      	bne.n	800fc58 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	691b      	ldr	r3, [r3, #16]
 800fc42:	4618      	mov	r0, r3
 800fc44:	f7fd fe36 	bl	800d8b4 <dec_lock>
 800fc48:	4603      	mov	r3, r0
 800fc4a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800fc4c:	7bfb      	ldrb	r3, [r7, #15]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d102      	bne.n	800fc58 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	2200      	movs	r2, #0
 800fc56:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800fc58:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	3710      	adds	r7, #16
 800fc5e:	46bd      	mov	sp, r7
 800fc60:	bd80      	pop	{r7, pc}

0800fc62 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800fc62:	b580      	push	{r7, lr}
 800fc64:	b086      	sub	sp, #24
 800fc66:	af00      	add	r7, sp, #0
 800fc68:	6078      	str	r0, [r7, #4]
 800fc6a:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d101      	bne.n	800fc76 <f_opendir+0x14>
 800fc72:	2309      	movs	r3, #9
 800fc74:	e064      	b.n	800fd40 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800fc7a:	f107 010c 	add.w	r1, r7, #12
 800fc7e:	463b      	mov	r3, r7
 800fc80:	2200      	movs	r2, #0
 800fc82:	4618      	mov	r0, r3
 800fc84:	f7fe ff86 	bl	800eb94 <find_volume>
 800fc88:	4603      	mov	r3, r0
 800fc8a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800fc8c:	7dfb      	ldrb	r3, [r7, #23]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d14f      	bne.n	800fd32 <f_opendir+0xd0>
		obj->fs = fs;
 800fc92:	68fa      	ldr	r2, [r7, #12]
 800fc94:	693b      	ldr	r3, [r7, #16]
 800fc96:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800fc98:	683b      	ldr	r3, [r7, #0]
 800fc9a:	4619      	mov	r1, r3
 800fc9c:	6878      	ldr	r0, [r7, #4]
 800fc9e:	f7fe fe69 	bl	800e974 <follow_path>
 800fca2:	4603      	mov	r3, r0
 800fca4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800fca6:	7dfb      	ldrb	r3, [r7, #23]
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d13d      	bne.n	800fd28 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fcb2:	b25b      	sxtb	r3, r3
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	db12      	blt.n	800fcde <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800fcb8:	693b      	ldr	r3, [r7, #16]
 800fcba:	799b      	ldrb	r3, [r3, #6]
 800fcbc:	f003 0310 	and.w	r3, r3, #16
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d00a      	beq.n	800fcda <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800fcc4:	68fa      	ldr	r2, [r7, #12]
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	6a1b      	ldr	r3, [r3, #32]
 800fcca:	4619      	mov	r1, r3
 800fccc:	4610      	mov	r0, r2
 800fcce:	f7fe fc1d 	bl	800e50c <ld_clust>
 800fcd2:	4602      	mov	r2, r0
 800fcd4:	693b      	ldr	r3, [r7, #16]
 800fcd6:	609a      	str	r2, [r3, #8]
 800fcd8:	e001      	b.n	800fcde <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800fcda:	2305      	movs	r3, #5
 800fcdc:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800fcde:	7dfb      	ldrb	r3, [r7, #23]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d121      	bne.n	800fd28 <f_opendir+0xc6>
				obj->id = fs->id;
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	88da      	ldrh	r2, [r3, #6]
 800fce8:	693b      	ldr	r3, [r7, #16]
 800fcea:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800fcec:	2100      	movs	r1, #0
 800fcee:	6878      	ldr	r0, [r7, #4]
 800fcf0:	f7fe fa66 	bl	800e1c0 <dir_sdi>
 800fcf4:	4603      	mov	r3, r0
 800fcf6:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800fcf8:	7dfb      	ldrb	r3, [r7, #23]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d114      	bne.n	800fd28 <f_opendir+0xc6>
					if (obj->sclust) {
 800fcfe:	693b      	ldr	r3, [r7, #16]
 800fd00:	689b      	ldr	r3, [r3, #8]
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d00d      	beq.n	800fd22 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800fd06:	2100      	movs	r1, #0
 800fd08:	6878      	ldr	r0, [r7, #4]
 800fd0a:	f7fd fd45 	bl	800d798 <inc_lock>
 800fd0e:	4602      	mov	r2, r0
 800fd10:	693b      	ldr	r3, [r7, #16]
 800fd12:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800fd14:	693b      	ldr	r3, [r7, #16]
 800fd16:	691b      	ldr	r3, [r3, #16]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d105      	bne.n	800fd28 <f_opendir+0xc6>
 800fd1c:	2312      	movs	r3, #18
 800fd1e:	75fb      	strb	r3, [r7, #23]
 800fd20:	e002      	b.n	800fd28 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800fd22:	693b      	ldr	r3, [r7, #16]
 800fd24:	2200      	movs	r2, #0
 800fd26:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800fd28:	7dfb      	ldrb	r3, [r7, #23]
 800fd2a:	2b04      	cmp	r3, #4
 800fd2c:	d101      	bne.n	800fd32 <f_opendir+0xd0>
 800fd2e:	2305      	movs	r3, #5
 800fd30:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800fd32:	7dfb      	ldrb	r3, [r7, #23]
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d002      	beq.n	800fd3e <f_opendir+0xdc>
 800fd38:	693b      	ldr	r3, [r7, #16]
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800fd3e:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd40:	4618      	mov	r0, r3
 800fd42:	3718      	adds	r7, #24
 800fd44:	46bd      	mov	sp, r7
 800fd46:	bd80      	pop	{r7, pc}

0800fd48 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800fd48:	b580      	push	{r7, lr}
 800fd4a:	b084      	sub	sp, #16
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	f107 0208 	add.w	r2, r7, #8
 800fd56:	4611      	mov	r1, r2
 800fd58:	4618      	mov	r0, r3
 800fd5a:	f7ff f99f 	bl	800f09c <validate>
 800fd5e:	4603      	mov	r3, r0
 800fd60:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800fd62:	7bfb      	ldrb	r3, [r7, #15]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d110      	bne.n	800fd8a <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	691b      	ldr	r3, [r3, #16]
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d006      	beq.n	800fd7e <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	691b      	ldr	r3, [r3, #16]
 800fd74:	4618      	mov	r0, r3
 800fd76:	f7fd fd9d 	bl	800d8b4 <dec_lock>
 800fd7a:	4603      	mov	r3, r0
 800fd7c:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800fd7e:	7bfb      	ldrb	r3, [r7, #15]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d102      	bne.n	800fd8a <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	2200      	movs	r2, #0
 800fd88:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800fd8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	3710      	adds	r7, #16
 800fd90:	46bd      	mov	sp, r7
 800fd92:	bd80      	pop	{r7, pc}

0800fd94 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800fd94:	b580      	push	{r7, lr}
 800fd96:	b084      	sub	sp, #16
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	6078      	str	r0, [r7, #4]
 800fd9c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	f107 0208 	add.w	r2, r7, #8
 800fda4:	4611      	mov	r1, r2
 800fda6:	4618      	mov	r0, r3
 800fda8:	f7ff f978 	bl	800f09c <validate>
 800fdac:	4603      	mov	r3, r0
 800fdae:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800fdb0:	7bfb      	ldrb	r3, [r7, #15]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d126      	bne.n	800fe04 <f_readdir+0x70>
		if (!fno) {
 800fdb6:	683b      	ldr	r3, [r7, #0]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d106      	bne.n	800fdca <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800fdbc:	2100      	movs	r1, #0
 800fdbe:	6878      	ldr	r0, [r7, #4]
 800fdc0:	f7fe f9fe 	bl	800e1c0 <dir_sdi>
 800fdc4:	4603      	mov	r3, r0
 800fdc6:	73fb      	strb	r3, [r7, #15]
 800fdc8:	e01c      	b.n	800fe04 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800fdca:	2100      	movs	r1, #0
 800fdcc:	6878      	ldr	r0, [r7, #4]
 800fdce:	f7fe fbdc 	bl	800e58a <dir_read>
 800fdd2:	4603      	mov	r3, r0
 800fdd4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800fdd6:	7bfb      	ldrb	r3, [r7, #15]
 800fdd8:	2b04      	cmp	r3, #4
 800fdda:	d101      	bne.n	800fde0 <f_readdir+0x4c>
 800fddc:	2300      	movs	r3, #0
 800fdde:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800fde0:	7bfb      	ldrb	r3, [r7, #15]
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d10e      	bne.n	800fe04 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800fde6:	6839      	ldr	r1, [r7, #0]
 800fde8:	6878      	ldr	r0, [r7, #4]
 800fdea:	f7fe fcd0 	bl	800e78e <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800fdee:	2100      	movs	r1, #0
 800fdf0:	6878      	ldr	r0, [r7, #4]
 800fdf2:	f7fe fa6e 	bl	800e2d2 <dir_next>
 800fdf6:	4603      	mov	r3, r0
 800fdf8:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800fdfa:	7bfb      	ldrb	r3, [r7, #15]
 800fdfc:	2b04      	cmp	r3, #4
 800fdfe:	d101      	bne.n	800fe04 <f_readdir+0x70>
 800fe00:	2300      	movs	r3, #0
 800fe02:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800fe04:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe06:	4618      	mov	r0, r3
 800fe08:	3710      	adds	r7, #16
 800fe0a:	46bd      	mov	sp, r7
 800fe0c:	bd80      	pop	{r7, pc}

0800fe0e <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800fe0e:	b580      	push	{r7, lr}
 800fe10:	b090      	sub	sp, #64	; 0x40
 800fe12:	af00      	add	r7, sp, #0
 800fe14:	6078      	str	r0, [r7, #4]
 800fe16:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800fe18:	f107 010c 	add.w	r1, r7, #12
 800fe1c:	1d3b      	adds	r3, r7, #4
 800fe1e:	2200      	movs	r2, #0
 800fe20:	4618      	mov	r0, r3
 800fe22:	f7fe feb7 	bl	800eb94 <find_volume>
 800fe26:	4603      	mov	r3, r0
 800fe28:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800fe2c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d11f      	bne.n	800fe74 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800fe34:	687a      	ldr	r2, [r7, #4]
 800fe36:	f107 030c 	add.w	r3, r7, #12
 800fe3a:	4611      	mov	r1, r2
 800fe3c:	4618      	mov	r0, r3
 800fe3e:	f7fe fd99 	bl	800e974 <follow_path>
 800fe42:	4603      	mov	r3, r0
 800fe44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800fe48:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d111      	bne.n	800fe74 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800fe50:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800fe54:	b25b      	sxtb	r3, r3
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	da03      	bge.n	800fe62 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800fe5a:	2306      	movs	r3, #6
 800fe5c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800fe60:	e008      	b.n	800fe74 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800fe62:	683b      	ldr	r3, [r7, #0]
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d005      	beq.n	800fe74 <f_stat+0x66>
 800fe68:	f107 030c 	add.w	r3, r7, #12
 800fe6c:	6839      	ldr	r1, [r7, #0]
 800fe6e:	4618      	mov	r0, r3
 800fe70:	f7fe fc8d 	bl	800e78e <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800fe74:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800fe78:	4618      	mov	r0, r3
 800fe7a:	3740      	adds	r7, #64	; 0x40
 800fe7c:	46bd      	mov	sp, r7
 800fe7e:	bd80      	pop	{r7, pc}

0800fe80 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800fe80:	b580      	push	{r7, lr}
 800fe82:	b092      	sub	sp, #72	; 0x48
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	60f8      	str	r0, [r7, #12]
 800fe88:	60b9      	str	r1, [r7, #8]
 800fe8a:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800fe8c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800fe90:	f107 030c 	add.w	r3, r7, #12
 800fe94:	2200      	movs	r2, #0
 800fe96:	4618      	mov	r0, r3
 800fe98:	f7fe fe7c 	bl	800eb94 <find_volume>
 800fe9c:	4603      	mov	r3, r0
 800fe9e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800fea2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	f040 8099 	bne.w	800ffde <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800feac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800feb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feb4:	695a      	ldr	r2, [r3, #20]
 800feb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feb8:	699b      	ldr	r3, [r3, #24]
 800feba:	3b02      	subs	r3, #2
 800febc:	429a      	cmp	r2, r3
 800febe:	d804      	bhi.n	800feca <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800fec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fec2:	695a      	ldr	r2, [r3, #20]
 800fec4:	68bb      	ldr	r3, [r7, #8]
 800fec6:	601a      	str	r2, [r3, #0]
 800fec8:	e089      	b.n	800ffde <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800feca:	2300      	movs	r3, #0
 800fecc:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800fece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fed0:	781b      	ldrb	r3, [r3, #0]
 800fed2:	2b01      	cmp	r3, #1
 800fed4:	d128      	bne.n	800ff28 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800fed6:	2302      	movs	r3, #2
 800fed8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800feda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fedc:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800fede:	f107 0314 	add.w	r3, r7, #20
 800fee2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fee4:	4618      	mov	r0, r3
 800fee6:	f7fd fe46 	bl	800db76 <get_fat>
 800feea:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800feec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800feee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fef2:	d103      	bne.n	800fefc <f_getfree+0x7c>
 800fef4:	2301      	movs	r3, #1
 800fef6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800fefa:	e063      	b.n	800ffc4 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800fefc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fefe:	2b01      	cmp	r3, #1
 800ff00:	d103      	bne.n	800ff0a <f_getfree+0x8a>
 800ff02:	2302      	movs	r3, #2
 800ff04:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800ff08:	e05c      	b.n	800ffc4 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800ff0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d102      	bne.n	800ff16 <f_getfree+0x96>
 800ff10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff12:	3301      	adds	r3, #1
 800ff14:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800ff16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff18:	3301      	adds	r3, #1
 800ff1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ff1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff1e:	699b      	ldr	r3, [r3, #24]
 800ff20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ff22:	429a      	cmp	r2, r3
 800ff24:	d3db      	bcc.n	800fede <f_getfree+0x5e>
 800ff26:	e04d      	b.n	800ffc4 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800ff28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff2a:	699b      	ldr	r3, [r3, #24]
 800ff2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ff2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff32:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800ff34:	2300      	movs	r3, #0
 800ff36:	637b      	str	r3, [r7, #52]	; 0x34
 800ff38:	2300      	movs	r3, #0
 800ff3a:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800ff3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d113      	bne.n	800ff6a <f_getfree+0xea>
							res = move_window(fs, sect++);
 800ff42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ff44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff46:	1c5a      	adds	r2, r3, #1
 800ff48:	63ba      	str	r2, [r7, #56]	; 0x38
 800ff4a:	4619      	mov	r1, r3
 800ff4c:	f7fd fd56 	bl	800d9fc <move_window>
 800ff50:	4603      	mov	r3, r0
 800ff52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800ff56:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d131      	bne.n	800ffc2 <f_getfree+0x142>
							p = fs->win;
 800ff5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff60:	3334      	adds	r3, #52	; 0x34
 800ff62:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800ff64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff66:	899b      	ldrh	r3, [r3, #12]
 800ff68:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800ff6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff6c:	781b      	ldrb	r3, [r3, #0]
 800ff6e:	2b02      	cmp	r3, #2
 800ff70:	d10f      	bne.n	800ff92 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800ff72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ff74:	f7fd fa92 	bl	800d49c <ld_word>
 800ff78:	4603      	mov	r3, r0
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d102      	bne.n	800ff84 <f_getfree+0x104>
 800ff7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff80:	3301      	adds	r3, #1
 800ff82:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800ff84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff86:	3302      	adds	r3, #2
 800ff88:	633b      	str	r3, [r7, #48]	; 0x30
 800ff8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff8c:	3b02      	subs	r3, #2
 800ff8e:	637b      	str	r3, [r7, #52]	; 0x34
 800ff90:	e010      	b.n	800ffb4 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800ff92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ff94:	f7fd fa9a 	bl	800d4cc <ld_dword>
 800ff98:	4603      	mov	r3, r0
 800ff9a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d102      	bne.n	800ffa8 <f_getfree+0x128>
 800ffa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ffa4:	3301      	adds	r3, #1
 800ffa6:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800ffa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffaa:	3304      	adds	r3, #4
 800ffac:	633b      	str	r3, [r7, #48]	; 0x30
 800ffae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffb0:	3b04      	subs	r3, #4
 800ffb2:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800ffb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ffb6:	3b01      	subs	r3, #1
 800ffb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ffba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d1bd      	bne.n	800ff3c <f_getfree+0xbc>
 800ffc0:	e000      	b.n	800ffc4 <f_getfree+0x144>
							if (res != FR_OK) break;
 800ffc2:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800ffc4:	68bb      	ldr	r3, [r7, #8]
 800ffc6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ffc8:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800ffca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffcc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ffce:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800ffd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffd2:	791a      	ldrb	r2, [r3, #4]
 800ffd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffd6:	f042 0201 	orr.w	r2, r2, #1
 800ffda:	b2d2      	uxtb	r2, r2
 800ffdc:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800ffde:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800ffe2:	4618      	mov	r0, r3
 800ffe4:	3748      	adds	r7, #72	; 0x48
 800ffe6:	46bd      	mov	sp, r7
 800ffe8:	bd80      	pop	{r7, pc}

0800ffea <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800ffea:	b580      	push	{r7, lr}
 800ffec:	b09e      	sub	sp, #120	; 0x78
 800ffee:	af00      	add	r7, sp, #0
 800fff0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800fff2:	2300      	movs	r3, #0
 800fff4:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800fff6:	f107 010c 	add.w	r1, r7, #12
 800fffa:	1d3b      	adds	r3, r7, #4
 800fffc:	2202      	movs	r2, #2
 800fffe:	4618      	mov	r0, r3
 8010000:	f7fe fdc8 	bl	800eb94 <find_volume>
 8010004:	4603      	mov	r3, r0
 8010006:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 801000e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8010012:	2b00      	cmp	r3, #0
 8010014:	f040 808e 	bne.w	8010134 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8010018:	687a      	ldr	r2, [r7, #4]
 801001a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801001e:	4611      	mov	r1, r2
 8010020:	4618      	mov	r0, r3
 8010022:	f7fe fca7 	bl	800e974 <follow_path>
 8010026:	4603      	mov	r3, r0
 8010028:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 801002c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8010030:	2b00      	cmp	r3, #0
 8010032:	d108      	bne.n	8010046 <f_unlink+0x5c>
 8010034:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010038:	2102      	movs	r1, #2
 801003a:	4618      	mov	r0, r3
 801003c:	f7fd fb2e 	bl	800d69c <chk_lock>
 8010040:	4603      	mov	r3, r0
 8010042:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8010046:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801004a:	2b00      	cmp	r3, #0
 801004c:	d172      	bne.n	8010134 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 801004e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8010052:	b25b      	sxtb	r3, r3
 8010054:	2b00      	cmp	r3, #0
 8010056:	da03      	bge.n	8010060 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8010058:	2306      	movs	r3, #6
 801005a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 801005e:	e008      	b.n	8010072 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8010060:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8010064:	f003 0301 	and.w	r3, r3, #1
 8010068:	2b00      	cmp	r3, #0
 801006a:	d002      	beq.n	8010072 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 801006c:	2307      	movs	r3, #7
 801006e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8010072:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8010076:	2b00      	cmp	r3, #0
 8010078:	d134      	bne.n	80100e4 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801007e:	4611      	mov	r1, r2
 8010080:	4618      	mov	r0, r3
 8010082:	f7fe fa43 	bl	800e50c <ld_clust>
 8010086:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8010088:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801008c:	f003 0310 	and.w	r3, r3, #16
 8010090:	2b00      	cmp	r3, #0
 8010092:	d027      	beq.n	80100e4 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8010098:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801009a:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 801009c:	f107 0310 	add.w	r3, r7, #16
 80100a0:	2100      	movs	r1, #0
 80100a2:	4618      	mov	r0, r3
 80100a4:	f7fe f88c 	bl	800e1c0 <dir_sdi>
 80100a8:	4603      	mov	r3, r0
 80100aa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 80100ae:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d116      	bne.n	80100e4 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 80100b6:	f107 0310 	add.w	r3, r7, #16
 80100ba:	2100      	movs	r1, #0
 80100bc:	4618      	mov	r0, r3
 80100be:	f7fe fa64 	bl	800e58a <dir_read>
 80100c2:	4603      	mov	r3, r0
 80100c4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 80100c8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d102      	bne.n	80100d6 <f_unlink+0xec>
 80100d0:	2307      	movs	r3, #7
 80100d2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 80100d6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80100da:	2b04      	cmp	r3, #4
 80100dc:	d102      	bne.n	80100e4 <f_unlink+0xfa>
 80100de:	2300      	movs	r3, #0
 80100e0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 80100e4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d123      	bne.n	8010134 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 80100ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80100f0:	4618      	mov	r0, r3
 80100f2:	f7fe fb2e 	bl	800e752 <dir_remove>
 80100f6:	4603      	mov	r3, r0
 80100f8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 80100fc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8010100:	2b00      	cmp	r3, #0
 8010102:	d10c      	bne.n	801011e <f_unlink+0x134>
 8010104:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010106:	2b00      	cmp	r3, #0
 8010108:	d009      	beq.n	801011e <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 801010a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801010e:	2200      	movs	r2, #0
 8010110:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8010112:	4618      	mov	r0, r3
 8010114:	f7fd ff1f 	bl	800df56 <remove_chain>
 8010118:	4603      	mov	r3, r0
 801011a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 801011e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8010122:	2b00      	cmp	r3, #0
 8010124:	d106      	bne.n	8010134 <f_unlink+0x14a>
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	4618      	mov	r0, r3
 801012a:	f7fd fc95 	bl	800da58 <sync_fs>
 801012e:	4603      	mov	r3, r0
 8010130:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8010134:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8010138:	4618      	mov	r0, r3
 801013a:	3778      	adds	r7, #120	; 0x78
 801013c:	46bd      	mov	sp, r7
 801013e:	bd80      	pop	{r7, pc}

08010140 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8010140:	b580      	push	{r7, lr}
 8010142:	b096      	sub	sp, #88	; 0x58
 8010144:	af00      	add	r7, sp, #0
 8010146:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8010148:	f107 0108 	add.w	r1, r7, #8
 801014c:	1d3b      	adds	r3, r7, #4
 801014e:	2202      	movs	r2, #2
 8010150:	4618      	mov	r0, r3
 8010152:	f7fe fd1f 	bl	800eb94 <find_volume>
 8010156:	4603      	mov	r3, r0
 8010158:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 801015c:	68bb      	ldr	r3, [r7, #8]
 801015e:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8010160:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010164:	2b00      	cmp	r3, #0
 8010166:	f040 80f2 	bne.w	801034e <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 801016a:	687a      	ldr	r2, [r7, #4]
 801016c:	f107 030c 	add.w	r3, r7, #12
 8010170:	4611      	mov	r1, r2
 8010172:	4618      	mov	r0, r3
 8010174:	f7fe fbfe 	bl	800e974 <follow_path>
 8010178:	4603      	mov	r3, r0
 801017a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 801017e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010182:	2b00      	cmp	r3, #0
 8010184:	d102      	bne.n	801018c <f_mkdir+0x4c>
 8010186:	2308      	movs	r3, #8
 8010188:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 801018c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010190:	2b04      	cmp	r3, #4
 8010192:	f040 80dc 	bne.w	801034e <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8010196:	f107 030c 	add.w	r3, r7, #12
 801019a:	2100      	movs	r1, #0
 801019c:	4618      	mov	r0, r3
 801019e:	f7fd ff3f 	bl	800e020 <create_chain>
 80101a2:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 80101a4:	68bb      	ldr	r3, [r7, #8]
 80101a6:	895b      	ldrh	r3, [r3, #10]
 80101a8:	461a      	mov	r2, r3
 80101aa:	68bb      	ldr	r3, [r7, #8]
 80101ac:	899b      	ldrh	r3, [r3, #12]
 80101ae:	fb03 f302 	mul.w	r3, r3, r2
 80101b2:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 80101b4:	2300      	movs	r3, #0
 80101b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 80101ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d102      	bne.n	80101c6 <f_mkdir+0x86>
 80101c0:	2307      	movs	r3, #7
 80101c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 80101c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80101c8:	2b01      	cmp	r3, #1
 80101ca:	d102      	bne.n	80101d2 <f_mkdir+0x92>
 80101cc:	2302      	movs	r3, #2
 80101ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 80101d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80101d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101d8:	d102      	bne.n	80101e0 <f_mkdir+0xa0>
 80101da:	2301      	movs	r3, #1
 80101dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 80101e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d106      	bne.n	80101f6 <f_mkdir+0xb6>
 80101e8:	68bb      	ldr	r3, [r7, #8]
 80101ea:	4618      	mov	r0, r3
 80101ec:	f7fd fbc2 	bl	800d974 <sync_window>
 80101f0:	4603      	mov	r3, r0
 80101f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 80101f6:	f7fc fe63 	bl	800cec0 <get_fattime>
 80101fa:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 80101fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010200:	2b00      	cmp	r3, #0
 8010202:	d16c      	bne.n	80102de <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 8010204:	68bb      	ldr	r3, [r7, #8]
 8010206:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010208:	4618      	mov	r0, r3
 801020a:	f7fd fc95 	bl	800db38 <clust2sect>
 801020e:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8010210:	68bb      	ldr	r3, [r7, #8]
 8010212:	3334      	adds	r3, #52	; 0x34
 8010214:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8010216:	68bb      	ldr	r3, [r7, #8]
 8010218:	899b      	ldrh	r3, [r3, #12]
 801021a:	461a      	mov	r2, r3
 801021c:	2100      	movs	r1, #0
 801021e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010220:	f7fd f9df 	bl	800d5e2 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8010224:	220b      	movs	r2, #11
 8010226:	2120      	movs	r1, #32
 8010228:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801022a:	f7fd f9da 	bl	800d5e2 <mem_set>
					dir[DIR_Name] = '.';
 801022e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010230:	222e      	movs	r2, #46	; 0x2e
 8010232:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8010234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010236:	330b      	adds	r3, #11
 8010238:	2210      	movs	r2, #16
 801023a:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 801023c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801023e:	3316      	adds	r3, #22
 8010240:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010242:	4618      	mov	r0, r3
 8010244:	f7fd f980 	bl	800d548 <st_dword>
					st_clust(fs, dir, dcl);
 8010248:	68bb      	ldr	r3, [r7, #8]
 801024a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801024c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801024e:	4618      	mov	r0, r3
 8010250:	f7fe f97b 	bl	800e54a <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8010254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010256:	3320      	adds	r3, #32
 8010258:	2220      	movs	r2, #32
 801025a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801025c:	4618      	mov	r0, r3
 801025e:	f7fd f99f 	bl	800d5a0 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8010262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010264:	3321      	adds	r3, #33	; 0x21
 8010266:	222e      	movs	r2, #46	; 0x2e
 8010268:	701a      	strb	r2, [r3, #0]
 801026a:	697b      	ldr	r3, [r7, #20]
 801026c:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 801026e:	68bb      	ldr	r3, [r7, #8]
 8010270:	781b      	ldrb	r3, [r3, #0]
 8010272:	2b03      	cmp	r3, #3
 8010274:	d106      	bne.n	8010284 <f_mkdir+0x144>
 8010276:	68bb      	ldr	r3, [r7, #8]
 8010278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801027a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801027c:	429a      	cmp	r2, r3
 801027e:	d101      	bne.n	8010284 <f_mkdir+0x144>
 8010280:	2300      	movs	r3, #0
 8010282:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8010284:	68b8      	ldr	r0, [r7, #8]
 8010286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010288:	3320      	adds	r3, #32
 801028a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801028c:	4619      	mov	r1, r3
 801028e:	f7fe f95c 	bl	800e54a <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8010292:	68bb      	ldr	r3, [r7, #8]
 8010294:	895b      	ldrh	r3, [r3, #10]
 8010296:	653b      	str	r3, [r7, #80]	; 0x50
 8010298:	e01c      	b.n	80102d4 <f_mkdir+0x194>
					fs->winsect = dsc++;
 801029a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801029c:	1c5a      	adds	r2, r3, #1
 801029e:	64fa      	str	r2, [r7, #76]	; 0x4c
 80102a0:	68ba      	ldr	r2, [r7, #8]
 80102a2:	6313      	str	r3, [r2, #48]	; 0x30
					fs->wflag = 1;
 80102a4:	68bb      	ldr	r3, [r7, #8]
 80102a6:	2201      	movs	r2, #1
 80102a8:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 80102aa:	68bb      	ldr	r3, [r7, #8]
 80102ac:	4618      	mov	r0, r3
 80102ae:	f7fd fb61 	bl	800d974 <sync_window>
 80102b2:	4603      	mov	r3, r0
 80102b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 80102b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d10d      	bne.n	80102dc <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 80102c0:	68bb      	ldr	r3, [r7, #8]
 80102c2:	899b      	ldrh	r3, [r3, #12]
 80102c4:	461a      	mov	r2, r3
 80102c6:	2100      	movs	r1, #0
 80102c8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80102ca:	f7fd f98a 	bl	800d5e2 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80102ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102d0:	3b01      	subs	r3, #1
 80102d2:	653b      	str	r3, [r7, #80]	; 0x50
 80102d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d1df      	bne.n	801029a <f_mkdir+0x15a>
 80102da:	e000      	b.n	80102de <f_mkdir+0x19e>
					if (res != FR_OK) break;
 80102dc:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 80102de:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d107      	bne.n	80102f6 <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 80102e6:	f107 030c 	add.w	r3, r7, #12
 80102ea:	4618      	mov	r0, r3
 80102ec:	f7fe f9ff 	bl	800e6ee <dir_register>
 80102f0:	4603      	mov	r3, r0
 80102f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 80102f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d120      	bne.n	8010340 <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 80102fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010300:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8010302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010304:	3316      	adds	r3, #22
 8010306:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010308:	4618      	mov	r0, r3
 801030a:	f7fd f91d 	bl	800d548 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 801030e:	68bb      	ldr	r3, [r7, #8]
 8010310:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010312:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010314:	4618      	mov	r0, r3
 8010316:	f7fe f918 	bl	800e54a <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 801031a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801031c:	330b      	adds	r3, #11
 801031e:	2210      	movs	r2, #16
 8010320:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8010322:	68bb      	ldr	r3, [r7, #8]
 8010324:	2201      	movs	r2, #1
 8010326:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8010328:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801032c:	2b00      	cmp	r3, #0
 801032e:	d10e      	bne.n	801034e <f_mkdir+0x20e>
					res = sync_fs(fs);
 8010330:	68bb      	ldr	r3, [r7, #8]
 8010332:	4618      	mov	r0, r3
 8010334:	f7fd fb90 	bl	800da58 <sync_fs>
 8010338:	4603      	mov	r3, r0
 801033a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 801033e:	e006      	b.n	801034e <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8010340:	f107 030c 	add.w	r3, r7, #12
 8010344:	2200      	movs	r2, #0
 8010346:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010348:	4618      	mov	r0, r3
 801034a:	f7fd fe04 	bl	800df56 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801034e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8010352:	4618      	mov	r0, r3
 8010354:	3758      	adds	r7, #88	; 0x58
 8010356:	46bd      	mov	sp, r7
 8010358:	bd80      	pop	{r7, pc}

0801035a <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 801035a:	b580      	push	{r7, lr}
 801035c:	b088      	sub	sp, #32
 801035e:	af00      	add	r7, sp, #0
 8010360:	60f8      	str	r0, [r7, #12]
 8010362:	60b9      	str	r1, [r7, #8]
 8010364:	607a      	str	r2, [r7, #4]
	int n = 0;
 8010366:	2300      	movs	r3, #0
 8010368:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 801036e:	e017      	b.n	80103a0 <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8010370:	f107 0310 	add.w	r3, r7, #16
 8010374:	f107 0114 	add.w	r1, r7, #20
 8010378:	2201      	movs	r2, #1
 801037a:	6878      	ldr	r0, [r7, #4]
 801037c:	f7ff f8d6 	bl	800f52c <f_read>
		if (rc != 1) break;
 8010380:	693b      	ldr	r3, [r7, #16]
 8010382:	2b01      	cmp	r3, #1
 8010384:	d112      	bne.n	80103ac <f_gets+0x52>
		c = s[0];
 8010386:	7d3b      	ldrb	r3, [r7, #20]
 8010388:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 801038a:	69bb      	ldr	r3, [r7, #24]
 801038c:	1c5a      	adds	r2, r3, #1
 801038e:	61ba      	str	r2, [r7, #24]
 8010390:	7dfa      	ldrb	r2, [r7, #23]
 8010392:	701a      	strb	r2, [r3, #0]
		n++;
 8010394:	69fb      	ldr	r3, [r7, #28]
 8010396:	3301      	adds	r3, #1
 8010398:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 801039a:	7dfb      	ldrb	r3, [r7, #23]
 801039c:	2b0a      	cmp	r3, #10
 801039e:	d007      	beq.n	80103b0 <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80103a0:	68bb      	ldr	r3, [r7, #8]
 80103a2:	3b01      	subs	r3, #1
 80103a4:	69fa      	ldr	r2, [r7, #28]
 80103a6:	429a      	cmp	r2, r3
 80103a8:	dbe2      	blt.n	8010370 <f_gets+0x16>
 80103aa:	e002      	b.n	80103b2 <f_gets+0x58>
		if (rc != 1) break;
 80103ac:	bf00      	nop
 80103ae:	e000      	b.n	80103b2 <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 80103b0:	bf00      	nop
	}
	*p = 0;
 80103b2:	69bb      	ldr	r3, [r7, #24]
 80103b4:	2200      	movs	r2, #0
 80103b6:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80103b8:	69fb      	ldr	r3, [r7, #28]
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d001      	beq.n	80103c2 <f_gets+0x68>
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	e000      	b.n	80103c4 <f_gets+0x6a>
 80103c2:	2300      	movs	r3, #0
}
 80103c4:	4618      	mov	r0, r3
 80103c6:	3720      	adds	r7, #32
 80103c8:	46bd      	mov	sp, r7
 80103ca:	bd80      	pop	{r7, pc}

080103cc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80103cc:	b480      	push	{r7}
 80103ce:	b087      	sub	sp, #28
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	60f8      	str	r0, [r7, #12]
 80103d4:	60b9      	str	r1, [r7, #8]
 80103d6:	4613      	mov	r3, r2
 80103d8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80103da:	2301      	movs	r3, #1
 80103dc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80103de:	2300      	movs	r3, #0
 80103e0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80103e2:	4b1f      	ldr	r3, [pc, #124]	; (8010460 <FATFS_LinkDriverEx+0x94>)
 80103e4:	7a5b      	ldrb	r3, [r3, #9]
 80103e6:	b2db      	uxtb	r3, r3
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d131      	bne.n	8010450 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80103ec:	4b1c      	ldr	r3, [pc, #112]	; (8010460 <FATFS_LinkDriverEx+0x94>)
 80103ee:	7a5b      	ldrb	r3, [r3, #9]
 80103f0:	b2db      	uxtb	r3, r3
 80103f2:	461a      	mov	r2, r3
 80103f4:	4b1a      	ldr	r3, [pc, #104]	; (8010460 <FATFS_LinkDriverEx+0x94>)
 80103f6:	2100      	movs	r1, #0
 80103f8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80103fa:	4b19      	ldr	r3, [pc, #100]	; (8010460 <FATFS_LinkDriverEx+0x94>)
 80103fc:	7a5b      	ldrb	r3, [r3, #9]
 80103fe:	b2db      	uxtb	r3, r3
 8010400:	4a17      	ldr	r2, [pc, #92]	; (8010460 <FATFS_LinkDriverEx+0x94>)
 8010402:	009b      	lsls	r3, r3, #2
 8010404:	4413      	add	r3, r2
 8010406:	68fa      	ldr	r2, [r7, #12]
 8010408:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801040a:	4b15      	ldr	r3, [pc, #84]	; (8010460 <FATFS_LinkDriverEx+0x94>)
 801040c:	7a5b      	ldrb	r3, [r3, #9]
 801040e:	b2db      	uxtb	r3, r3
 8010410:	461a      	mov	r2, r3
 8010412:	4b13      	ldr	r3, [pc, #76]	; (8010460 <FATFS_LinkDriverEx+0x94>)
 8010414:	4413      	add	r3, r2
 8010416:	79fa      	ldrb	r2, [r7, #7]
 8010418:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801041a:	4b11      	ldr	r3, [pc, #68]	; (8010460 <FATFS_LinkDriverEx+0x94>)
 801041c:	7a5b      	ldrb	r3, [r3, #9]
 801041e:	b2db      	uxtb	r3, r3
 8010420:	1c5a      	adds	r2, r3, #1
 8010422:	b2d1      	uxtb	r1, r2
 8010424:	4a0e      	ldr	r2, [pc, #56]	; (8010460 <FATFS_LinkDriverEx+0x94>)
 8010426:	7251      	strb	r1, [r2, #9]
 8010428:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801042a:	7dbb      	ldrb	r3, [r7, #22]
 801042c:	3330      	adds	r3, #48	; 0x30
 801042e:	b2da      	uxtb	r2, r3
 8010430:	68bb      	ldr	r3, [r7, #8]
 8010432:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010434:	68bb      	ldr	r3, [r7, #8]
 8010436:	3301      	adds	r3, #1
 8010438:	223a      	movs	r2, #58	; 0x3a
 801043a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801043c:	68bb      	ldr	r3, [r7, #8]
 801043e:	3302      	adds	r3, #2
 8010440:	222f      	movs	r2, #47	; 0x2f
 8010442:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010444:	68bb      	ldr	r3, [r7, #8]
 8010446:	3303      	adds	r3, #3
 8010448:	2200      	movs	r2, #0
 801044a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801044c:	2300      	movs	r3, #0
 801044e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010450:	7dfb      	ldrb	r3, [r7, #23]
}
 8010452:	4618      	mov	r0, r3
 8010454:	371c      	adds	r7, #28
 8010456:	46bd      	mov	sp, r7
 8010458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801045c:	4770      	bx	lr
 801045e:	bf00      	nop
 8010460:	20000afc 	.word	0x20000afc

08010464 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010464:	b580      	push	{r7, lr}
 8010466:	b082      	sub	sp, #8
 8010468:	af00      	add	r7, sp, #0
 801046a:	6078      	str	r0, [r7, #4]
 801046c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801046e:	2200      	movs	r2, #0
 8010470:	6839      	ldr	r1, [r7, #0]
 8010472:	6878      	ldr	r0, [r7, #4]
 8010474:	f7ff ffaa 	bl	80103cc <FATFS_LinkDriverEx>
 8010478:	4603      	mov	r3, r0
}
 801047a:	4618      	mov	r0, r3
 801047c:	3708      	adds	r7, #8
 801047e:	46bd      	mov	sp, r7
 8010480:	bd80      	pop	{r7, pc}

08010482 <atof>:
 8010482:	2100      	movs	r1, #0
 8010484:	f001 bf0a 	b.w	801229c <strtod>

08010488 <__errno>:
 8010488:	4b01      	ldr	r3, [pc, #4]	; (8010490 <__errno+0x8>)
 801048a:	6818      	ldr	r0, [r3, #0]
 801048c:	4770      	bx	lr
 801048e:	bf00      	nop
 8010490:	20000020 	.word	0x20000020

08010494 <gmtime>:
 8010494:	b538      	push	{r3, r4, r5, lr}
 8010496:	4b0b      	ldr	r3, [pc, #44]	; (80104c4 <gmtime+0x30>)
 8010498:	681d      	ldr	r5, [r3, #0]
 801049a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 801049c:	4604      	mov	r4, r0
 801049e:	b953      	cbnz	r3, 80104b6 <gmtime+0x22>
 80104a0:	2024      	movs	r0, #36	; 0x24
 80104a2:	f000 f8e9 	bl	8010678 <malloc>
 80104a6:	4602      	mov	r2, r0
 80104a8:	63e8      	str	r0, [r5, #60]	; 0x3c
 80104aa:	b920      	cbnz	r0, 80104b6 <gmtime+0x22>
 80104ac:	4b06      	ldr	r3, [pc, #24]	; (80104c8 <gmtime+0x34>)
 80104ae:	4807      	ldr	r0, [pc, #28]	; (80104cc <gmtime+0x38>)
 80104b0:	2139      	movs	r1, #57	; 0x39
 80104b2:	f002 f935 	bl	8012720 <__assert_func>
 80104b6:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 80104b8:	4620      	mov	r0, r4
 80104ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80104be:	f000 b807 	b.w	80104d0 <gmtime_r>
 80104c2:	bf00      	nop
 80104c4:	20000020 	.word	0x20000020
 80104c8:	080188d8 	.word	0x080188d8
 80104cc:	080188ef 	.word	0x080188ef

080104d0 <gmtime_r>:
 80104d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104d4:	e9d0 6700 	ldrd	r6, r7, [r0]
 80104d8:	460c      	mov	r4, r1
 80104da:	4a51      	ldr	r2, [pc, #324]	; (8010620 <gmtime_r+0x150>)
 80104dc:	2300      	movs	r3, #0
 80104de:	4630      	mov	r0, r6
 80104e0:	4639      	mov	r1, r7
 80104e2:	f7f0 fbe9 	bl	8000cb8 <__aeabi_ldivmod>
 80104e6:	4639      	mov	r1, r7
 80104e8:	4605      	mov	r5, r0
 80104ea:	4a4d      	ldr	r2, [pc, #308]	; (8010620 <gmtime_r+0x150>)
 80104ec:	4630      	mov	r0, r6
 80104ee:	2300      	movs	r3, #0
 80104f0:	f7f0 fbe2 	bl	8000cb8 <__aeabi_ldivmod>
 80104f4:	2a00      	cmp	r2, #0
 80104f6:	bfbc      	itt	lt
 80104f8:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80104fc:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8010500:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8010504:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8010508:	fbb2 f3f1 	udiv	r3, r2, r1
 801050c:	fb01 2213 	mls	r2, r1, r3, r2
 8010510:	f04f 013c 	mov.w	r1, #60	; 0x3c
 8010514:	bfac      	ite	ge
 8010516:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 801051a:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 801051e:	60a3      	str	r3, [r4, #8]
 8010520:	fbb2 f3f1 	udiv	r3, r2, r1
 8010524:	fb01 2213 	mls	r2, r1, r3, r2
 8010528:	6063      	str	r3, [r4, #4]
 801052a:	6022      	str	r2, [r4, #0]
 801052c:	1cc3      	adds	r3, r0, #3
 801052e:	2207      	movs	r2, #7
 8010530:	fb93 f2f2 	sdiv	r2, r3, r2
 8010534:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8010538:	1a9b      	subs	r3, r3, r2
 801053a:	bf48      	it	mi
 801053c:	3307      	addmi	r3, #7
 801053e:	2800      	cmp	r0, #0
 8010540:	61a3      	str	r3, [r4, #24]
 8010542:	bfb8      	it	lt
 8010544:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 8010548:	4936      	ldr	r1, [pc, #216]	; (8010624 <gmtime_r+0x154>)
 801054a:	bfae      	itee	ge
 801054c:	fb90 f1f1 	sdivge	r1, r0, r1
 8010550:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 8010554:	fb93 f1f1 	sdivlt	r1, r3, r1
 8010558:	4b33      	ldr	r3, [pc, #204]	; (8010628 <gmtime_r+0x158>)
 801055a:	fb03 0001 	mla	r0, r3, r1, r0
 801055e:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8010562:	fbb0 f2f2 	udiv	r2, r0, r2
 8010566:	4402      	add	r2, r0
 8010568:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 801056c:	fbb0 f3fc 	udiv	r3, r0, ip
 8010570:	1ad2      	subs	r2, r2, r3
 8010572:	f240 176d 	movw	r7, #365	; 0x16d
 8010576:	4b2d      	ldr	r3, [pc, #180]	; (801062c <gmtime_r+0x15c>)
 8010578:	fbb0 f3f3 	udiv	r3, r0, r3
 801057c:	2664      	movs	r6, #100	; 0x64
 801057e:	1ad3      	subs	r3, r2, r3
 8010580:	fbb3 f5f7 	udiv	r5, r3, r7
 8010584:	fbb3 f3fc 	udiv	r3, r3, ip
 8010588:	fbb5 f2f6 	udiv	r2, r5, r6
 801058c:	1ad3      	subs	r3, r2, r3
 801058e:	4403      	add	r3, r0
 8010590:	fb07 3315 	mls	r3, r7, r5, r3
 8010594:	2099      	movs	r0, #153	; 0x99
 8010596:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 801059a:	f10c 0c02 	add.w	ip, ip, #2
 801059e:	f103 0e01 	add.w	lr, r3, #1
 80105a2:	fbbc f7f0 	udiv	r7, ip, r0
 80105a6:	4378      	muls	r0, r7
 80105a8:	3002      	adds	r0, #2
 80105aa:	f04f 0805 	mov.w	r8, #5
 80105ae:	fbb0 f0f8 	udiv	r0, r0, r8
 80105b2:	ebae 0000 	sub.w	r0, lr, r0
 80105b6:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 80105ba:	45f4      	cmp	ip, lr
 80105bc:	bf94      	ite	ls
 80105be:	f04f 0c02 	movls.w	ip, #2
 80105c2:	f06f 0c09 	mvnhi.w	ip, #9
 80105c6:	4467      	add	r7, ip
 80105c8:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 80105cc:	fb0c 5101 	mla	r1, ip, r1, r5
 80105d0:	2f01      	cmp	r7, #1
 80105d2:	bf98      	it	ls
 80105d4:	3101      	addls	r1, #1
 80105d6:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80105da:	d30c      	bcc.n	80105f6 <gmtime_r+0x126>
 80105dc:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80105e0:	61e3      	str	r3, [r4, #28]
 80105e2:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 80105e6:	2300      	movs	r3, #0
 80105e8:	60e0      	str	r0, [r4, #12]
 80105ea:	e9c4 7104 	strd	r7, r1, [r4, #16]
 80105ee:	6223      	str	r3, [r4, #32]
 80105f0:	4620      	mov	r0, r4
 80105f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105f6:	f015 0f03 	tst.w	r5, #3
 80105fa:	d102      	bne.n	8010602 <gmtime_r+0x132>
 80105fc:	fb06 5212 	mls	r2, r6, r2, r5
 8010600:	b95a      	cbnz	r2, 801061a <gmtime_r+0x14a>
 8010602:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8010606:	fbb5 f2f6 	udiv	r2, r5, r6
 801060a:	fb06 5212 	mls	r2, r6, r2, r5
 801060e:	fab2 f282 	clz	r2, r2
 8010612:	0952      	lsrs	r2, r2, #5
 8010614:	333b      	adds	r3, #59	; 0x3b
 8010616:	4413      	add	r3, r2
 8010618:	e7e2      	b.n	80105e0 <gmtime_r+0x110>
 801061a:	2201      	movs	r2, #1
 801061c:	e7fa      	b.n	8010614 <gmtime_r+0x144>
 801061e:	bf00      	nop
 8010620:	00015180 	.word	0x00015180
 8010624:	00023ab1 	.word	0x00023ab1
 8010628:	fffdc54f 	.word	0xfffdc54f
 801062c:	00023ab0 	.word	0x00023ab0

08010630 <__libc_init_array>:
 8010630:	b570      	push	{r4, r5, r6, lr}
 8010632:	4d0d      	ldr	r5, [pc, #52]	; (8010668 <__libc_init_array+0x38>)
 8010634:	4c0d      	ldr	r4, [pc, #52]	; (801066c <__libc_init_array+0x3c>)
 8010636:	1b64      	subs	r4, r4, r5
 8010638:	10a4      	asrs	r4, r4, #2
 801063a:	2600      	movs	r6, #0
 801063c:	42a6      	cmp	r6, r4
 801063e:	d109      	bne.n	8010654 <__libc_init_array+0x24>
 8010640:	4d0b      	ldr	r5, [pc, #44]	; (8010670 <__libc_init_array+0x40>)
 8010642:	4c0c      	ldr	r4, [pc, #48]	; (8010674 <__libc_init_array+0x44>)
 8010644:	f006 ff8e 	bl	8017564 <_init>
 8010648:	1b64      	subs	r4, r4, r5
 801064a:	10a4      	asrs	r4, r4, #2
 801064c:	2600      	movs	r6, #0
 801064e:	42a6      	cmp	r6, r4
 8010650:	d105      	bne.n	801065e <__libc_init_array+0x2e>
 8010652:	bd70      	pop	{r4, r5, r6, pc}
 8010654:	f855 3b04 	ldr.w	r3, [r5], #4
 8010658:	4798      	blx	r3
 801065a:	3601      	adds	r6, #1
 801065c:	e7ee      	b.n	801063c <__libc_init_array+0xc>
 801065e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010662:	4798      	blx	r3
 8010664:	3601      	adds	r6, #1
 8010666:	e7f2      	b.n	801064e <__libc_init_array+0x1e>
 8010668:	08019150 	.word	0x08019150
 801066c:	08019150 	.word	0x08019150
 8010670:	08019150 	.word	0x08019150
 8010674:	08019154 	.word	0x08019154

08010678 <malloc>:
 8010678:	4b02      	ldr	r3, [pc, #8]	; (8010684 <malloc+0xc>)
 801067a:	4601      	mov	r1, r0
 801067c:	6818      	ldr	r0, [r3, #0]
 801067e:	f000 bae1 	b.w	8010c44 <_malloc_r>
 8010682:	bf00      	nop
 8010684:	20000020 	.word	0x20000020

08010688 <free>:
 8010688:	4b02      	ldr	r3, [pc, #8]	; (8010694 <free+0xc>)
 801068a:	4601      	mov	r1, r0
 801068c:	6818      	ldr	r0, [r3, #0]
 801068e:	f000 ba89 	b.w	8010ba4 <_free_r>
 8010692:	bf00      	nop
 8010694:	20000020 	.word	0x20000020

08010698 <memset>:
 8010698:	4402      	add	r2, r0
 801069a:	4603      	mov	r3, r0
 801069c:	4293      	cmp	r3, r2
 801069e:	d100      	bne.n	80106a2 <memset+0xa>
 80106a0:	4770      	bx	lr
 80106a2:	f803 1b01 	strb.w	r1, [r3], #1
 80106a6:	e7f9      	b.n	801069c <memset+0x4>

080106a8 <validate_structure>:
 80106a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80106aa:	6801      	ldr	r1, [r0, #0]
 80106ac:	293b      	cmp	r1, #59	; 0x3b
 80106ae:	4604      	mov	r4, r0
 80106b0:	d911      	bls.n	80106d6 <validate_structure+0x2e>
 80106b2:	223c      	movs	r2, #60	; 0x3c
 80106b4:	4668      	mov	r0, sp
 80106b6:	f002 f851 	bl	801275c <div>
 80106ba:	9a01      	ldr	r2, [sp, #4]
 80106bc:	6863      	ldr	r3, [r4, #4]
 80106be:	9900      	ldr	r1, [sp, #0]
 80106c0:	2a00      	cmp	r2, #0
 80106c2:	440b      	add	r3, r1
 80106c4:	6063      	str	r3, [r4, #4]
 80106c6:	bfbb      	ittet	lt
 80106c8:	323c      	addlt	r2, #60	; 0x3c
 80106ca:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80106ce:	6022      	strge	r2, [r4, #0]
 80106d0:	6022      	strlt	r2, [r4, #0]
 80106d2:	bfb8      	it	lt
 80106d4:	6063      	strlt	r3, [r4, #4]
 80106d6:	6861      	ldr	r1, [r4, #4]
 80106d8:	293b      	cmp	r1, #59	; 0x3b
 80106da:	d911      	bls.n	8010700 <validate_structure+0x58>
 80106dc:	223c      	movs	r2, #60	; 0x3c
 80106de:	4668      	mov	r0, sp
 80106e0:	f002 f83c 	bl	801275c <div>
 80106e4:	9a01      	ldr	r2, [sp, #4]
 80106e6:	68a3      	ldr	r3, [r4, #8]
 80106e8:	9900      	ldr	r1, [sp, #0]
 80106ea:	2a00      	cmp	r2, #0
 80106ec:	440b      	add	r3, r1
 80106ee:	60a3      	str	r3, [r4, #8]
 80106f0:	bfbb      	ittet	lt
 80106f2:	323c      	addlt	r2, #60	; 0x3c
 80106f4:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80106f8:	6062      	strge	r2, [r4, #4]
 80106fa:	6062      	strlt	r2, [r4, #4]
 80106fc:	bfb8      	it	lt
 80106fe:	60a3      	strlt	r3, [r4, #8]
 8010700:	68a1      	ldr	r1, [r4, #8]
 8010702:	2917      	cmp	r1, #23
 8010704:	d911      	bls.n	801072a <validate_structure+0x82>
 8010706:	2218      	movs	r2, #24
 8010708:	4668      	mov	r0, sp
 801070a:	f002 f827 	bl	801275c <div>
 801070e:	9a01      	ldr	r2, [sp, #4]
 8010710:	68e3      	ldr	r3, [r4, #12]
 8010712:	9900      	ldr	r1, [sp, #0]
 8010714:	2a00      	cmp	r2, #0
 8010716:	440b      	add	r3, r1
 8010718:	60e3      	str	r3, [r4, #12]
 801071a:	bfbb      	ittet	lt
 801071c:	3218      	addlt	r2, #24
 801071e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8010722:	60a2      	strge	r2, [r4, #8]
 8010724:	60a2      	strlt	r2, [r4, #8]
 8010726:	bfb8      	it	lt
 8010728:	60e3      	strlt	r3, [r4, #12]
 801072a:	6921      	ldr	r1, [r4, #16]
 801072c:	290b      	cmp	r1, #11
 801072e:	d911      	bls.n	8010754 <validate_structure+0xac>
 8010730:	220c      	movs	r2, #12
 8010732:	4668      	mov	r0, sp
 8010734:	f002 f812 	bl	801275c <div>
 8010738:	9a01      	ldr	r2, [sp, #4]
 801073a:	6963      	ldr	r3, [r4, #20]
 801073c:	9900      	ldr	r1, [sp, #0]
 801073e:	2a00      	cmp	r2, #0
 8010740:	440b      	add	r3, r1
 8010742:	6163      	str	r3, [r4, #20]
 8010744:	bfbb      	ittet	lt
 8010746:	320c      	addlt	r2, #12
 8010748:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801074c:	6122      	strge	r2, [r4, #16]
 801074e:	6122      	strlt	r2, [r4, #16]
 8010750:	bfb8      	it	lt
 8010752:	6163      	strlt	r3, [r4, #20]
 8010754:	6963      	ldr	r3, [r4, #20]
 8010756:	0799      	lsls	r1, r3, #30
 8010758:	d120      	bne.n	801079c <validate_structure+0xf4>
 801075a:	2164      	movs	r1, #100	; 0x64
 801075c:	fb93 f2f1 	sdiv	r2, r3, r1
 8010760:	fb01 3212 	mls	r2, r1, r2, r3
 8010764:	b9e2      	cbnz	r2, 80107a0 <validate_structure+0xf8>
 8010766:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 801076a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801076e:	fb93 f2f1 	sdiv	r2, r3, r1
 8010772:	fb01 3312 	mls	r3, r1, r2, r3
 8010776:	2b00      	cmp	r3, #0
 8010778:	bf14      	ite	ne
 801077a:	231c      	movne	r3, #28
 801077c:	231d      	moveq	r3, #29
 801077e:	68e2      	ldr	r2, [r4, #12]
 8010780:	2a00      	cmp	r2, #0
 8010782:	dc0f      	bgt.n	80107a4 <validate_structure+0xfc>
 8010784:	4f33      	ldr	r7, [pc, #204]	; (8010854 <validate_structure+0x1ac>)
 8010786:	260b      	movs	r6, #11
 8010788:	2064      	movs	r0, #100	; 0x64
 801078a:	f44f 75c8 	mov.w	r5, #400	; 0x190
 801078e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8010792:	f1bc 0f00 	cmp.w	ip, #0
 8010796:	dd31      	ble.n	80107fc <validate_structure+0x154>
 8010798:	b003      	add	sp, #12
 801079a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801079c:	231c      	movs	r3, #28
 801079e:	e7ee      	b.n	801077e <validate_structure+0xd6>
 80107a0:	231d      	movs	r3, #29
 80107a2:	e7ec      	b.n	801077e <validate_structure+0xd6>
 80107a4:	4f2b      	ldr	r7, [pc, #172]	; (8010854 <validate_structure+0x1ac>)
 80107a6:	f04f 0c00 	mov.w	ip, #0
 80107aa:	2564      	movs	r5, #100	; 0x64
 80107ac:	f44f 76c8 	mov.w	r6, #400	; 0x190
 80107b0:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 80107b4:	2a01      	cmp	r2, #1
 80107b6:	bf14      	ite	ne
 80107b8:	f857 0022 	ldrne.w	r0, [r7, r2, lsl #2]
 80107bc:	4618      	moveq	r0, r3
 80107be:	4281      	cmp	r1, r0
 80107c0:	ddea      	ble.n	8010798 <validate_structure+0xf0>
 80107c2:	3201      	adds	r2, #1
 80107c4:	1a09      	subs	r1, r1, r0
 80107c6:	2a0c      	cmp	r2, #12
 80107c8:	60e1      	str	r1, [r4, #12]
 80107ca:	6122      	str	r2, [r4, #16]
 80107cc:	d1f0      	bne.n	80107b0 <validate_structure+0x108>
 80107ce:	6963      	ldr	r3, [r4, #20]
 80107d0:	1c5a      	adds	r2, r3, #1
 80107d2:	0791      	lsls	r1, r2, #30
 80107d4:	e9c4 c204 	strd	ip, r2, [r4, #16]
 80107d8:	d137      	bne.n	801084a <validate_structure+0x1a2>
 80107da:	fb92 f1f5 	sdiv	r1, r2, r5
 80107de:	fb05 2211 	mls	r2, r5, r1, r2
 80107e2:	2a00      	cmp	r2, #0
 80107e4:	d133      	bne.n	801084e <validate_structure+0x1a6>
 80107e6:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 80107ea:	fb93 f2f6 	sdiv	r2, r3, r6
 80107ee:	fb06 3312 	mls	r3, r6, r2, r3
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	bf14      	ite	ne
 80107f6:	231c      	movne	r3, #28
 80107f8:	231d      	moveq	r3, #29
 80107fa:	e7d9      	b.n	80107b0 <validate_structure+0x108>
 80107fc:	6921      	ldr	r1, [r4, #16]
 80107fe:	3901      	subs	r1, #1
 8010800:	6121      	str	r1, [r4, #16]
 8010802:	3101      	adds	r1, #1
 8010804:	d114      	bne.n	8010830 <validate_structure+0x188>
 8010806:	6963      	ldr	r3, [r4, #20]
 8010808:	1e59      	subs	r1, r3, #1
 801080a:	078a      	lsls	r2, r1, #30
 801080c:	e9c4 6104 	strd	r6, r1, [r4, #16]
 8010810:	d117      	bne.n	8010842 <validate_structure+0x19a>
 8010812:	fb91 f2f0 	sdiv	r2, r1, r0
 8010816:	fb00 1112 	mls	r1, r0, r2, r1
 801081a:	b9a1      	cbnz	r1, 8010846 <validate_structure+0x19e>
 801081c:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8010820:	fb93 f2f5 	sdiv	r2, r3, r5
 8010824:	fb05 3312 	mls	r3, r5, r2, r3
 8010828:	2b00      	cmp	r3, #0
 801082a:	bf14      	ite	ne
 801082c:	231c      	movne	r3, #28
 801082e:	231d      	moveq	r3, #29
 8010830:	6922      	ldr	r2, [r4, #16]
 8010832:	2a01      	cmp	r2, #1
 8010834:	bf14      	ite	ne
 8010836:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 801083a:	461a      	moveq	r2, r3
 801083c:	4462      	add	r2, ip
 801083e:	60e2      	str	r2, [r4, #12]
 8010840:	e7a5      	b.n	801078e <validate_structure+0xe6>
 8010842:	231c      	movs	r3, #28
 8010844:	e7f4      	b.n	8010830 <validate_structure+0x188>
 8010846:	231d      	movs	r3, #29
 8010848:	e7f2      	b.n	8010830 <validate_structure+0x188>
 801084a:	231c      	movs	r3, #28
 801084c:	e7b0      	b.n	80107b0 <validate_structure+0x108>
 801084e:	231d      	movs	r3, #29
 8010850:	e7ae      	b.n	80107b0 <validate_structure+0x108>
 8010852:	bf00      	nop
 8010854:	08018954 	.word	0x08018954

08010858 <mktime>:
 8010858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801085c:	b08b      	sub	sp, #44	; 0x2c
 801085e:	4605      	mov	r5, r0
 8010860:	f003 f9ce 	bl	8013c00 <__gettzinfo>
 8010864:	4607      	mov	r7, r0
 8010866:	4628      	mov	r0, r5
 8010868:	f7ff ff1e 	bl	80106a8 <validate_structure>
 801086c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010870:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 8010874:	68a8      	ldr	r0, [r5, #8]
 8010876:	696e      	ldr	r6, [r5, #20]
 8010878:	fb0a 2303 	mla	r3, sl, r3, r2
 801087c:	f44f 6a61 	mov.w	sl, #3600	; 0xe10
 8010880:	fb0a 3a00 	mla	sl, sl, r0, r3
 8010884:	e9d5 4303 	ldrd	r4, r3, [r5, #12]
 8010888:	4ac3      	ldr	r2, [pc, #780]	; (8010b98 <mktime+0x340>)
 801088a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801088e:	3c01      	subs	r4, #1
 8010890:	2b01      	cmp	r3, #1
 8010892:	4414      	add	r4, r2
 8010894:	dd11      	ble.n	80108ba <mktime+0x62>
 8010896:	07b1      	lsls	r1, r6, #30
 8010898:	d10f      	bne.n	80108ba <mktime+0x62>
 801089a:	2264      	movs	r2, #100	; 0x64
 801089c:	fb96 f3f2 	sdiv	r3, r6, r2
 80108a0:	fb02 6313 	mls	r3, r2, r3, r6
 80108a4:	b943      	cbnz	r3, 80108b8 <mktime+0x60>
 80108a6:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 80108aa:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80108ae:	fb91 f3f2 	sdiv	r3, r1, r2
 80108b2:	fb02 1313 	mls	r3, r2, r3, r1
 80108b6:	b903      	cbnz	r3, 80108ba <mktime+0x62>
 80108b8:	3401      	adds	r4, #1
 80108ba:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 80108be:	3310      	adds	r3, #16
 80108c0:	f644 6220 	movw	r2, #20000	; 0x4e20
 80108c4:	4293      	cmp	r3, r2
 80108c6:	61ec      	str	r4, [r5, #28]
 80108c8:	f200 8161 	bhi.w	8010b8e <mktime+0x336>
 80108cc:	2e46      	cmp	r6, #70	; 0x46
 80108ce:	dd77      	ble.n	80109c0 <mktime+0x168>
 80108d0:	2346      	movs	r3, #70	; 0x46
 80108d2:	f240 1e6d 	movw	lr, #365	; 0x16d
 80108d6:	2164      	movs	r1, #100	; 0x64
 80108d8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80108dc:	079a      	lsls	r2, r3, #30
 80108de:	d169      	bne.n	80109b4 <mktime+0x15c>
 80108e0:	fb93 f2f1 	sdiv	r2, r3, r1
 80108e4:	fb01 3212 	mls	r2, r1, r2, r3
 80108e8:	2a00      	cmp	r2, #0
 80108ea:	d166      	bne.n	80109ba <mktime+0x162>
 80108ec:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 80108f0:	fb9c f2f0 	sdiv	r2, ip, r0
 80108f4:	fb00 c212 	mls	r2, r0, r2, ip
 80108f8:	2a00      	cmp	r2, #0
 80108fa:	bf14      	ite	ne
 80108fc:	4672      	movne	r2, lr
 80108fe:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8010902:	3301      	adds	r3, #1
 8010904:	429e      	cmp	r6, r3
 8010906:	4414      	add	r4, r2
 8010908:	d1e8      	bne.n	80108dc <mktime+0x84>
 801090a:	4ba4      	ldr	r3, [pc, #656]	; (8010b9c <mktime+0x344>)
 801090c:	ea4f 7bea 	mov.w	fp, sl, asr #31
 8010910:	fbc3 ab04 	smlal	sl, fp, r3, r4
 8010914:	f001 fd76 	bl	8012404 <__tz_lock>
 8010918:	f001 fd80 	bl	801241c <_tzset_unlocked>
 801091c:	4ba0      	ldr	r3, [pc, #640]	; (8010ba0 <mktime+0x348>)
 801091e:	f8d3 9000 	ldr.w	r9, [r3]
 8010922:	f1b9 0f00 	cmp.w	r9, #0
 8010926:	d03f      	beq.n	80109a8 <mktime+0x150>
 8010928:	f8d5 9020 	ldr.w	r9, [r5, #32]
 801092c:	6968      	ldr	r0, [r5, #20]
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	f1b9 0f01 	cmp.w	r9, #1
 8010934:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8010938:	46c8      	mov	r8, r9
 801093a:	bfa8      	it	ge
 801093c:	f04f 0801 	movge.w	r8, #1
 8010940:	4283      	cmp	r3, r0
 8010942:	d17f      	bne.n	8010a44 <mktime+0x1ec>
 8010944:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010946:	4619      	mov	r1, r3
 8010948:	17da      	asrs	r2, r3, #31
 801094a:	e9cd 1200 	strd	r1, r2, [sp]
 801094e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8010952:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8010956:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801095a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801095c:	1a80      	subs	r0, r0, r2
 801095e:	eb61 71e2 	sbc.w	r1, r1, r2, asr #31
 8010962:	4582      	cmp	sl, r0
 8010964:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010968:	eb7b 0101 	sbcs.w	r1, fp, r1
 801096c:	da71      	bge.n	8010a52 <mktime+0x1fa>
 801096e:	9800      	ldr	r0, [sp, #0]
 8010970:	6a39      	ldr	r1, [r7, #32]
 8010972:	1a09      	subs	r1, r1, r0
 8010974:	9104      	str	r1, [sp, #16]
 8010976:	9801      	ldr	r0, [sp, #4]
 8010978:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801097a:	eb61 0100 	sbc.w	r1, r1, r0
 801097e:	9105      	str	r1, [sp, #20]
 8010980:	6839      	ldr	r1, [r7, #0]
 8010982:	2900      	cmp	r1, #0
 8010984:	d075      	beq.n	8010a72 <mktime+0x21a>
 8010986:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801098a:	4582      	cmp	sl, r0
 801098c:	eb7b 0101 	sbcs.w	r1, fp, r1
 8010990:	db05      	blt.n	801099e <mktime+0x146>
 8010992:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010996:	4582      	cmp	sl, r0
 8010998:	eb7b 0101 	sbcs.w	r1, fp, r1
 801099c:	db6f      	blt.n	8010a7e <mktime+0x226>
 801099e:	f1b9 0f00 	cmp.w	r9, #0
 80109a2:	f04f 0900 	mov.w	r9, #0
 80109a6:	da6f      	bge.n	8010a88 <mktime+0x230>
 80109a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109aa:	eb1a 0a03 	adds.w	sl, sl, r3
 80109ae:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 80109b2:	e0ae      	b.n	8010b12 <mktime+0x2ba>
 80109b4:	f240 126d 	movw	r2, #365	; 0x16d
 80109b8:	e7a3      	b.n	8010902 <mktime+0xaa>
 80109ba:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80109be:	e7a0      	b.n	8010902 <mktime+0xaa>
 80109c0:	d0a3      	beq.n	801090a <mktime+0xb2>
 80109c2:	2345      	movs	r3, #69	; 0x45
 80109c4:	f240 1e6d 	movw	lr, #365	; 0x16d
 80109c8:	2164      	movs	r1, #100	; 0x64
 80109ca:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80109ce:	e012      	b.n	80109f6 <mktime+0x19e>
 80109d0:	bb62      	cbnz	r2, 8010a2c <mktime+0x1d4>
 80109d2:	fb93 f2f1 	sdiv	r2, r3, r1
 80109d6:	fb01 3212 	mls	r2, r1, r2, r3
 80109da:	bb52      	cbnz	r2, 8010a32 <mktime+0x1da>
 80109dc:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 80109e0:	fb9c f2f0 	sdiv	r2, ip, r0
 80109e4:	fb00 c212 	mls	r2, r0, r2, ip
 80109e8:	2a00      	cmp	r2, #0
 80109ea:	bf14      	ite	ne
 80109ec:	4672      	movne	r2, lr
 80109ee:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80109f2:	1aa4      	subs	r4, r4, r2
 80109f4:	3b01      	subs	r3, #1
 80109f6:	429e      	cmp	r6, r3
 80109f8:	f003 0203 	and.w	r2, r3, #3
 80109fc:	dbe8      	blt.n	80109d0 <mktime+0x178>
 80109fe:	b9da      	cbnz	r2, 8010a38 <mktime+0x1e0>
 8010a00:	2264      	movs	r2, #100	; 0x64
 8010a02:	fb96 f3f2 	sdiv	r3, r6, r2
 8010a06:	fb02 6313 	mls	r3, r2, r3, r6
 8010a0a:	b9c3      	cbnz	r3, 8010a3e <mktime+0x1e6>
 8010a0c:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 8010a10:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8010a14:	fb91 f3f2 	sdiv	r3, r1, r2
 8010a18:	fb02 1313 	mls	r3, r2, r3, r1
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	f240 136d 	movw	r3, #365	; 0x16d
 8010a22:	bf08      	it	eq
 8010a24:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8010a28:	1ae4      	subs	r4, r4, r3
 8010a2a:	e76e      	b.n	801090a <mktime+0xb2>
 8010a2c:	f240 126d 	movw	r2, #365	; 0x16d
 8010a30:	e7df      	b.n	80109f2 <mktime+0x19a>
 8010a32:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8010a36:	e7dc      	b.n	80109f2 <mktime+0x19a>
 8010a38:	f240 136d 	movw	r3, #365	; 0x16d
 8010a3c:	e7f4      	b.n	8010a28 <mktime+0x1d0>
 8010a3e:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8010a42:	e7f1      	b.n	8010a28 <mktime+0x1d0>
 8010a44:	f001 fc36 	bl	80122b4 <__tzcalc_limits>
 8010a48:	2800      	cmp	r0, #0
 8010a4a:	f47f af7b 	bne.w	8010944 <mktime+0xec>
 8010a4e:	46c1      	mov	r9, r8
 8010a50:	e054      	b.n	8010afc <mktime+0x2a4>
 8010a52:	9800      	ldr	r0, [sp, #0]
 8010a54:	9902      	ldr	r1, [sp, #8]
 8010a56:	1a09      	subs	r1, r1, r0
 8010a58:	9108      	str	r1, [sp, #32]
 8010a5a:	9801      	ldr	r0, [sp, #4]
 8010a5c:	9903      	ldr	r1, [sp, #12]
 8010a5e:	eb61 0100 	sbc.w	r1, r1, r0
 8010a62:	9109      	str	r1, [sp, #36]	; 0x24
 8010a64:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010a68:	4582      	cmp	sl, r0
 8010a6a:	eb7b 0101 	sbcs.w	r1, fp, r1
 8010a6e:	dbee      	blt.n	8010a4e <mktime+0x1f6>
 8010a70:	e77d      	b.n	801096e <mktime+0x116>
 8010a72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010a76:	4582      	cmp	sl, r0
 8010a78:	eb7b 0101 	sbcs.w	r1, fp, r1
 8010a7c:	db89      	blt.n	8010992 <mktime+0x13a>
 8010a7e:	f1b9 0f00 	cmp.w	r9, #0
 8010a82:	db3f      	blt.n	8010b04 <mktime+0x2ac>
 8010a84:	f04f 0901 	mov.w	r9, #1
 8010a88:	ea88 0809 	eor.w	r8, r8, r9
 8010a8c:	f1b8 0f01 	cmp.w	r8, #1
 8010a90:	d134      	bne.n	8010afc <mktime+0x2a4>
 8010a92:	f1b9 0f00 	cmp.w	r9, #0
 8010a96:	d04f      	beq.n	8010b38 <mktime+0x2e0>
 8010a98:	1ad3      	subs	r3, r2, r3
 8010a9a:	682a      	ldr	r2, [r5, #0]
 8010a9c:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8010aa0:	441a      	add	r2, r3
 8010aa2:	eb1a 0a03 	adds.w	sl, sl, r3
 8010aa6:	602a      	str	r2, [r5, #0]
 8010aa8:	4628      	mov	r0, r5
 8010aaa:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 8010aae:	f7ff fdfb 	bl	80106a8 <validate_structure>
 8010ab2:	68ea      	ldr	r2, [r5, #12]
 8010ab4:	ebb2 0208 	subs.w	r2, r2, r8
 8010ab8:	d020      	beq.n	8010afc <mktime+0x2a4>
 8010aba:	2a01      	cmp	r2, #1
 8010abc:	dc3e      	bgt.n	8010b3c <mktime+0x2e4>
 8010abe:	1c90      	adds	r0, r2, #2
 8010ac0:	bfd8      	it	le
 8010ac2:	2201      	movle	r2, #1
 8010ac4:	69eb      	ldr	r3, [r5, #28]
 8010ac6:	18d3      	adds	r3, r2, r3
 8010ac8:	4414      	add	r4, r2
 8010aca:	d540      	bpl.n	8010b4e <mktime+0x2f6>
 8010acc:	1e72      	subs	r2, r6, #1
 8010ace:	0791      	lsls	r1, r2, #30
 8010ad0:	d137      	bne.n	8010b42 <mktime+0x2ea>
 8010ad2:	2164      	movs	r1, #100	; 0x64
 8010ad4:	fb92 f3f1 	sdiv	r3, r2, r1
 8010ad8:	fb01 2313 	mls	r3, r1, r3, r2
 8010adc:	bba3      	cbnz	r3, 8010b48 <mktime+0x2f0>
 8010ade:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 8010ae2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8010ae6:	fb96 f3f2 	sdiv	r3, r6, r2
 8010aea:	fb02 6613 	mls	r6, r2, r3, r6
 8010aee:	2e00      	cmp	r6, #0
 8010af0:	f240 136d 	movw	r3, #365	; 0x16d
 8010af4:	bf18      	it	ne
 8010af6:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8010afa:	61eb      	str	r3, [r5, #28]
 8010afc:	f1b9 0f01 	cmp.w	r9, #1
 8010b00:	f47f af52 	bne.w	80109a8 <mktime+0x150>
 8010b04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b06:	eb1a 0a03 	adds.w	sl, sl, r3
 8010b0a:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 8010b0e:	f04f 0901 	mov.w	r9, #1
 8010b12:	f001 fc7d 	bl	8012410 <__tz_unlock>
 8010b16:	3404      	adds	r4, #4
 8010b18:	2307      	movs	r3, #7
 8010b1a:	fb94 f3f3 	sdiv	r3, r4, r3
 8010b1e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8010b22:	1ae4      	subs	r4, r4, r3
 8010b24:	bf48      	it	mi
 8010b26:	3407      	addmi	r4, #7
 8010b28:	f8c5 9020 	str.w	r9, [r5, #32]
 8010b2c:	61ac      	str	r4, [r5, #24]
 8010b2e:	4650      	mov	r0, sl
 8010b30:	4659      	mov	r1, fp
 8010b32:	b00b      	add	sp, #44	; 0x2c
 8010b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b38:	1a9b      	subs	r3, r3, r2
 8010b3a:	e7ae      	b.n	8010a9a <mktime+0x242>
 8010b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8010b40:	e7c0      	b.n	8010ac4 <mktime+0x26c>
 8010b42:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8010b46:	e7d8      	b.n	8010afa <mktime+0x2a2>
 8010b48:	f240 136d 	movw	r3, #365	; 0x16d
 8010b4c:	e7d5      	b.n	8010afa <mktime+0x2a2>
 8010b4e:	07b2      	lsls	r2, r6, #30
 8010b50:	d117      	bne.n	8010b82 <mktime+0x32a>
 8010b52:	2164      	movs	r1, #100	; 0x64
 8010b54:	fb96 f2f1 	sdiv	r2, r6, r1
 8010b58:	fb01 6212 	mls	r2, r1, r2, r6
 8010b5c:	b9a2      	cbnz	r2, 8010b88 <mktime+0x330>
 8010b5e:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8010b62:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8010b66:	fb96 f2f1 	sdiv	r2, r6, r1
 8010b6a:	fb01 6612 	mls	r6, r1, r2, r6
 8010b6e:	2e00      	cmp	r6, #0
 8010b70:	f240 126d 	movw	r2, #365	; 0x16d
 8010b74:	bf08      	it	eq
 8010b76:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8010b7a:	4293      	cmp	r3, r2
 8010b7c:	bfa8      	it	ge
 8010b7e:	1a9b      	subge	r3, r3, r2
 8010b80:	e7bb      	b.n	8010afa <mktime+0x2a2>
 8010b82:	f240 126d 	movw	r2, #365	; 0x16d
 8010b86:	e7f8      	b.n	8010b7a <mktime+0x322>
 8010b88:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8010b8c:	e7f5      	b.n	8010b7a <mktime+0x322>
 8010b8e:	f04f 3aff 	mov.w	sl, #4294967295
 8010b92:	f04f 3bff 	mov.w	fp, #4294967295
 8010b96:	e7ca      	b.n	8010b2e <mktime+0x2d6>
 8010b98:	08018984 	.word	0x08018984
 8010b9c:	00015180 	.word	0x00015180
 8010ba0:	20000b2c 	.word	0x20000b2c

08010ba4 <_free_r>:
 8010ba4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010ba6:	2900      	cmp	r1, #0
 8010ba8:	d048      	beq.n	8010c3c <_free_r+0x98>
 8010baa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010bae:	9001      	str	r0, [sp, #4]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	f1a1 0404 	sub.w	r4, r1, #4
 8010bb6:	bfb8      	it	lt
 8010bb8:	18e4      	addlt	r4, r4, r3
 8010bba:	f003 f84f 	bl	8013c5c <__malloc_lock>
 8010bbe:	4a20      	ldr	r2, [pc, #128]	; (8010c40 <_free_r+0x9c>)
 8010bc0:	9801      	ldr	r0, [sp, #4]
 8010bc2:	6813      	ldr	r3, [r2, #0]
 8010bc4:	4615      	mov	r5, r2
 8010bc6:	b933      	cbnz	r3, 8010bd6 <_free_r+0x32>
 8010bc8:	6063      	str	r3, [r4, #4]
 8010bca:	6014      	str	r4, [r2, #0]
 8010bcc:	b003      	add	sp, #12
 8010bce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010bd2:	f003 b849 	b.w	8013c68 <__malloc_unlock>
 8010bd6:	42a3      	cmp	r3, r4
 8010bd8:	d90b      	bls.n	8010bf2 <_free_r+0x4e>
 8010bda:	6821      	ldr	r1, [r4, #0]
 8010bdc:	1862      	adds	r2, r4, r1
 8010bde:	4293      	cmp	r3, r2
 8010be0:	bf04      	itt	eq
 8010be2:	681a      	ldreq	r2, [r3, #0]
 8010be4:	685b      	ldreq	r3, [r3, #4]
 8010be6:	6063      	str	r3, [r4, #4]
 8010be8:	bf04      	itt	eq
 8010bea:	1852      	addeq	r2, r2, r1
 8010bec:	6022      	streq	r2, [r4, #0]
 8010bee:	602c      	str	r4, [r5, #0]
 8010bf0:	e7ec      	b.n	8010bcc <_free_r+0x28>
 8010bf2:	461a      	mov	r2, r3
 8010bf4:	685b      	ldr	r3, [r3, #4]
 8010bf6:	b10b      	cbz	r3, 8010bfc <_free_r+0x58>
 8010bf8:	42a3      	cmp	r3, r4
 8010bfa:	d9fa      	bls.n	8010bf2 <_free_r+0x4e>
 8010bfc:	6811      	ldr	r1, [r2, #0]
 8010bfe:	1855      	adds	r5, r2, r1
 8010c00:	42a5      	cmp	r5, r4
 8010c02:	d10b      	bne.n	8010c1c <_free_r+0x78>
 8010c04:	6824      	ldr	r4, [r4, #0]
 8010c06:	4421      	add	r1, r4
 8010c08:	1854      	adds	r4, r2, r1
 8010c0a:	42a3      	cmp	r3, r4
 8010c0c:	6011      	str	r1, [r2, #0]
 8010c0e:	d1dd      	bne.n	8010bcc <_free_r+0x28>
 8010c10:	681c      	ldr	r4, [r3, #0]
 8010c12:	685b      	ldr	r3, [r3, #4]
 8010c14:	6053      	str	r3, [r2, #4]
 8010c16:	4421      	add	r1, r4
 8010c18:	6011      	str	r1, [r2, #0]
 8010c1a:	e7d7      	b.n	8010bcc <_free_r+0x28>
 8010c1c:	d902      	bls.n	8010c24 <_free_r+0x80>
 8010c1e:	230c      	movs	r3, #12
 8010c20:	6003      	str	r3, [r0, #0]
 8010c22:	e7d3      	b.n	8010bcc <_free_r+0x28>
 8010c24:	6825      	ldr	r5, [r4, #0]
 8010c26:	1961      	adds	r1, r4, r5
 8010c28:	428b      	cmp	r3, r1
 8010c2a:	bf04      	itt	eq
 8010c2c:	6819      	ldreq	r1, [r3, #0]
 8010c2e:	685b      	ldreq	r3, [r3, #4]
 8010c30:	6063      	str	r3, [r4, #4]
 8010c32:	bf04      	itt	eq
 8010c34:	1949      	addeq	r1, r1, r5
 8010c36:	6021      	streq	r1, [r4, #0]
 8010c38:	6054      	str	r4, [r2, #4]
 8010c3a:	e7c7      	b.n	8010bcc <_free_r+0x28>
 8010c3c:	b003      	add	sp, #12
 8010c3e:	bd30      	pop	{r4, r5, pc}
 8010c40:	20000b08 	.word	0x20000b08

08010c44 <_malloc_r>:
 8010c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c46:	1ccd      	adds	r5, r1, #3
 8010c48:	f025 0503 	bic.w	r5, r5, #3
 8010c4c:	3508      	adds	r5, #8
 8010c4e:	2d0c      	cmp	r5, #12
 8010c50:	bf38      	it	cc
 8010c52:	250c      	movcc	r5, #12
 8010c54:	2d00      	cmp	r5, #0
 8010c56:	4606      	mov	r6, r0
 8010c58:	db01      	blt.n	8010c5e <_malloc_r+0x1a>
 8010c5a:	42a9      	cmp	r1, r5
 8010c5c:	d903      	bls.n	8010c66 <_malloc_r+0x22>
 8010c5e:	230c      	movs	r3, #12
 8010c60:	6033      	str	r3, [r6, #0]
 8010c62:	2000      	movs	r0, #0
 8010c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c66:	f002 fff9 	bl	8013c5c <__malloc_lock>
 8010c6a:	4921      	ldr	r1, [pc, #132]	; (8010cf0 <_malloc_r+0xac>)
 8010c6c:	680a      	ldr	r2, [r1, #0]
 8010c6e:	4614      	mov	r4, r2
 8010c70:	b99c      	cbnz	r4, 8010c9a <_malloc_r+0x56>
 8010c72:	4f20      	ldr	r7, [pc, #128]	; (8010cf4 <_malloc_r+0xb0>)
 8010c74:	683b      	ldr	r3, [r7, #0]
 8010c76:	b923      	cbnz	r3, 8010c82 <_malloc_r+0x3e>
 8010c78:	4621      	mov	r1, r4
 8010c7a:	4630      	mov	r0, r6
 8010c7c:	f000 fca6 	bl	80115cc <_sbrk_r>
 8010c80:	6038      	str	r0, [r7, #0]
 8010c82:	4629      	mov	r1, r5
 8010c84:	4630      	mov	r0, r6
 8010c86:	f000 fca1 	bl	80115cc <_sbrk_r>
 8010c8a:	1c43      	adds	r3, r0, #1
 8010c8c:	d123      	bne.n	8010cd6 <_malloc_r+0x92>
 8010c8e:	230c      	movs	r3, #12
 8010c90:	6033      	str	r3, [r6, #0]
 8010c92:	4630      	mov	r0, r6
 8010c94:	f002 ffe8 	bl	8013c68 <__malloc_unlock>
 8010c98:	e7e3      	b.n	8010c62 <_malloc_r+0x1e>
 8010c9a:	6823      	ldr	r3, [r4, #0]
 8010c9c:	1b5b      	subs	r3, r3, r5
 8010c9e:	d417      	bmi.n	8010cd0 <_malloc_r+0x8c>
 8010ca0:	2b0b      	cmp	r3, #11
 8010ca2:	d903      	bls.n	8010cac <_malloc_r+0x68>
 8010ca4:	6023      	str	r3, [r4, #0]
 8010ca6:	441c      	add	r4, r3
 8010ca8:	6025      	str	r5, [r4, #0]
 8010caa:	e004      	b.n	8010cb6 <_malloc_r+0x72>
 8010cac:	6863      	ldr	r3, [r4, #4]
 8010cae:	42a2      	cmp	r2, r4
 8010cb0:	bf0c      	ite	eq
 8010cb2:	600b      	streq	r3, [r1, #0]
 8010cb4:	6053      	strne	r3, [r2, #4]
 8010cb6:	4630      	mov	r0, r6
 8010cb8:	f002 ffd6 	bl	8013c68 <__malloc_unlock>
 8010cbc:	f104 000b 	add.w	r0, r4, #11
 8010cc0:	1d23      	adds	r3, r4, #4
 8010cc2:	f020 0007 	bic.w	r0, r0, #7
 8010cc6:	1ac2      	subs	r2, r0, r3
 8010cc8:	d0cc      	beq.n	8010c64 <_malloc_r+0x20>
 8010cca:	1a1b      	subs	r3, r3, r0
 8010ccc:	50a3      	str	r3, [r4, r2]
 8010cce:	e7c9      	b.n	8010c64 <_malloc_r+0x20>
 8010cd0:	4622      	mov	r2, r4
 8010cd2:	6864      	ldr	r4, [r4, #4]
 8010cd4:	e7cc      	b.n	8010c70 <_malloc_r+0x2c>
 8010cd6:	1cc4      	adds	r4, r0, #3
 8010cd8:	f024 0403 	bic.w	r4, r4, #3
 8010cdc:	42a0      	cmp	r0, r4
 8010cde:	d0e3      	beq.n	8010ca8 <_malloc_r+0x64>
 8010ce0:	1a21      	subs	r1, r4, r0
 8010ce2:	4630      	mov	r0, r6
 8010ce4:	f000 fc72 	bl	80115cc <_sbrk_r>
 8010ce8:	3001      	adds	r0, #1
 8010cea:	d1dd      	bne.n	8010ca8 <_malloc_r+0x64>
 8010cec:	e7cf      	b.n	8010c8e <_malloc_r+0x4a>
 8010cee:	bf00      	nop
 8010cf0:	20000b08 	.word	0x20000b08
 8010cf4:	20000b0c 	.word	0x20000b0c

08010cf8 <__cvt>:
 8010cf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010cfc:	ec55 4b10 	vmov	r4, r5, d0
 8010d00:	2d00      	cmp	r5, #0
 8010d02:	460e      	mov	r6, r1
 8010d04:	4619      	mov	r1, r3
 8010d06:	462b      	mov	r3, r5
 8010d08:	bfbb      	ittet	lt
 8010d0a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010d0e:	461d      	movlt	r5, r3
 8010d10:	2300      	movge	r3, #0
 8010d12:	232d      	movlt	r3, #45	; 0x2d
 8010d14:	700b      	strb	r3, [r1, #0]
 8010d16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010d18:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010d1c:	4691      	mov	r9, r2
 8010d1e:	f023 0820 	bic.w	r8, r3, #32
 8010d22:	bfbc      	itt	lt
 8010d24:	4622      	movlt	r2, r4
 8010d26:	4614      	movlt	r4, r2
 8010d28:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010d2c:	d005      	beq.n	8010d3a <__cvt+0x42>
 8010d2e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010d32:	d100      	bne.n	8010d36 <__cvt+0x3e>
 8010d34:	3601      	adds	r6, #1
 8010d36:	2102      	movs	r1, #2
 8010d38:	e000      	b.n	8010d3c <__cvt+0x44>
 8010d3a:	2103      	movs	r1, #3
 8010d3c:	ab03      	add	r3, sp, #12
 8010d3e:	9301      	str	r3, [sp, #4]
 8010d40:	ab02      	add	r3, sp, #8
 8010d42:	9300      	str	r3, [sp, #0]
 8010d44:	ec45 4b10 	vmov	d0, r4, r5
 8010d48:	4653      	mov	r3, sl
 8010d4a:	4632      	mov	r2, r6
 8010d4c:	f001 fda8 	bl	80128a0 <_dtoa_r>
 8010d50:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010d54:	4607      	mov	r7, r0
 8010d56:	d102      	bne.n	8010d5e <__cvt+0x66>
 8010d58:	f019 0f01 	tst.w	r9, #1
 8010d5c:	d022      	beq.n	8010da4 <__cvt+0xac>
 8010d5e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010d62:	eb07 0906 	add.w	r9, r7, r6
 8010d66:	d110      	bne.n	8010d8a <__cvt+0x92>
 8010d68:	783b      	ldrb	r3, [r7, #0]
 8010d6a:	2b30      	cmp	r3, #48	; 0x30
 8010d6c:	d10a      	bne.n	8010d84 <__cvt+0x8c>
 8010d6e:	2200      	movs	r2, #0
 8010d70:	2300      	movs	r3, #0
 8010d72:	4620      	mov	r0, r4
 8010d74:	4629      	mov	r1, r5
 8010d76:	f7ef febf 	bl	8000af8 <__aeabi_dcmpeq>
 8010d7a:	b918      	cbnz	r0, 8010d84 <__cvt+0x8c>
 8010d7c:	f1c6 0601 	rsb	r6, r6, #1
 8010d80:	f8ca 6000 	str.w	r6, [sl]
 8010d84:	f8da 3000 	ldr.w	r3, [sl]
 8010d88:	4499      	add	r9, r3
 8010d8a:	2200      	movs	r2, #0
 8010d8c:	2300      	movs	r3, #0
 8010d8e:	4620      	mov	r0, r4
 8010d90:	4629      	mov	r1, r5
 8010d92:	f7ef feb1 	bl	8000af8 <__aeabi_dcmpeq>
 8010d96:	b108      	cbz	r0, 8010d9c <__cvt+0xa4>
 8010d98:	f8cd 900c 	str.w	r9, [sp, #12]
 8010d9c:	2230      	movs	r2, #48	; 0x30
 8010d9e:	9b03      	ldr	r3, [sp, #12]
 8010da0:	454b      	cmp	r3, r9
 8010da2:	d307      	bcc.n	8010db4 <__cvt+0xbc>
 8010da4:	9b03      	ldr	r3, [sp, #12]
 8010da6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010da8:	1bdb      	subs	r3, r3, r7
 8010daa:	4638      	mov	r0, r7
 8010dac:	6013      	str	r3, [r2, #0]
 8010dae:	b004      	add	sp, #16
 8010db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010db4:	1c59      	adds	r1, r3, #1
 8010db6:	9103      	str	r1, [sp, #12]
 8010db8:	701a      	strb	r2, [r3, #0]
 8010dba:	e7f0      	b.n	8010d9e <__cvt+0xa6>

08010dbc <__exponent>:
 8010dbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010dbe:	4603      	mov	r3, r0
 8010dc0:	2900      	cmp	r1, #0
 8010dc2:	bfb8      	it	lt
 8010dc4:	4249      	neglt	r1, r1
 8010dc6:	f803 2b02 	strb.w	r2, [r3], #2
 8010dca:	bfb4      	ite	lt
 8010dcc:	222d      	movlt	r2, #45	; 0x2d
 8010dce:	222b      	movge	r2, #43	; 0x2b
 8010dd0:	2909      	cmp	r1, #9
 8010dd2:	7042      	strb	r2, [r0, #1]
 8010dd4:	dd2a      	ble.n	8010e2c <__exponent+0x70>
 8010dd6:	f10d 0407 	add.w	r4, sp, #7
 8010dda:	46a4      	mov	ip, r4
 8010ddc:	270a      	movs	r7, #10
 8010dde:	46a6      	mov	lr, r4
 8010de0:	460a      	mov	r2, r1
 8010de2:	fb91 f6f7 	sdiv	r6, r1, r7
 8010de6:	fb07 1516 	mls	r5, r7, r6, r1
 8010dea:	3530      	adds	r5, #48	; 0x30
 8010dec:	2a63      	cmp	r2, #99	; 0x63
 8010dee:	f104 34ff 	add.w	r4, r4, #4294967295
 8010df2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8010df6:	4631      	mov	r1, r6
 8010df8:	dcf1      	bgt.n	8010dde <__exponent+0x22>
 8010dfa:	3130      	adds	r1, #48	; 0x30
 8010dfc:	f1ae 0502 	sub.w	r5, lr, #2
 8010e00:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010e04:	1c44      	adds	r4, r0, #1
 8010e06:	4629      	mov	r1, r5
 8010e08:	4561      	cmp	r1, ip
 8010e0a:	d30a      	bcc.n	8010e22 <__exponent+0x66>
 8010e0c:	f10d 0209 	add.w	r2, sp, #9
 8010e10:	eba2 020e 	sub.w	r2, r2, lr
 8010e14:	4565      	cmp	r5, ip
 8010e16:	bf88      	it	hi
 8010e18:	2200      	movhi	r2, #0
 8010e1a:	4413      	add	r3, r2
 8010e1c:	1a18      	subs	r0, r3, r0
 8010e1e:	b003      	add	sp, #12
 8010e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010e26:	f804 2f01 	strb.w	r2, [r4, #1]!
 8010e2a:	e7ed      	b.n	8010e08 <__exponent+0x4c>
 8010e2c:	2330      	movs	r3, #48	; 0x30
 8010e2e:	3130      	adds	r1, #48	; 0x30
 8010e30:	7083      	strb	r3, [r0, #2]
 8010e32:	70c1      	strb	r1, [r0, #3]
 8010e34:	1d03      	adds	r3, r0, #4
 8010e36:	e7f1      	b.n	8010e1c <__exponent+0x60>

08010e38 <_printf_float>:
 8010e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e3c:	ed2d 8b02 	vpush	{d8}
 8010e40:	b08d      	sub	sp, #52	; 0x34
 8010e42:	460c      	mov	r4, r1
 8010e44:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010e48:	4616      	mov	r6, r2
 8010e4a:	461f      	mov	r7, r3
 8010e4c:	4605      	mov	r5, r0
 8010e4e:	f002 fedb 	bl	8013c08 <_localeconv_r>
 8010e52:	f8d0 a000 	ldr.w	sl, [r0]
 8010e56:	4650      	mov	r0, sl
 8010e58:	f7ef f9cc 	bl	80001f4 <strlen>
 8010e5c:	2300      	movs	r3, #0
 8010e5e:	930a      	str	r3, [sp, #40]	; 0x28
 8010e60:	6823      	ldr	r3, [r4, #0]
 8010e62:	9305      	str	r3, [sp, #20]
 8010e64:	f8d8 3000 	ldr.w	r3, [r8]
 8010e68:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010e6c:	3307      	adds	r3, #7
 8010e6e:	f023 0307 	bic.w	r3, r3, #7
 8010e72:	f103 0208 	add.w	r2, r3, #8
 8010e76:	f8c8 2000 	str.w	r2, [r8]
 8010e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e7e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010e82:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8010e86:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010e8a:	9307      	str	r3, [sp, #28]
 8010e8c:	f8cd 8018 	str.w	r8, [sp, #24]
 8010e90:	ee08 0a10 	vmov	s16, r0
 8010e94:	4b9f      	ldr	r3, [pc, #636]	; (8011114 <_printf_float+0x2dc>)
 8010e96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8010e9e:	f7ef fe5d 	bl	8000b5c <__aeabi_dcmpun>
 8010ea2:	bb88      	cbnz	r0, 8010f08 <_printf_float+0xd0>
 8010ea4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010ea8:	4b9a      	ldr	r3, [pc, #616]	; (8011114 <_printf_float+0x2dc>)
 8010eaa:	f04f 32ff 	mov.w	r2, #4294967295
 8010eae:	f7ef fe37 	bl	8000b20 <__aeabi_dcmple>
 8010eb2:	bb48      	cbnz	r0, 8010f08 <_printf_float+0xd0>
 8010eb4:	2200      	movs	r2, #0
 8010eb6:	2300      	movs	r3, #0
 8010eb8:	4640      	mov	r0, r8
 8010eba:	4649      	mov	r1, r9
 8010ebc:	f7ef fe26 	bl	8000b0c <__aeabi_dcmplt>
 8010ec0:	b110      	cbz	r0, 8010ec8 <_printf_float+0x90>
 8010ec2:	232d      	movs	r3, #45	; 0x2d
 8010ec4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010ec8:	4b93      	ldr	r3, [pc, #588]	; (8011118 <_printf_float+0x2e0>)
 8010eca:	4894      	ldr	r0, [pc, #592]	; (801111c <_printf_float+0x2e4>)
 8010ecc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010ed0:	bf94      	ite	ls
 8010ed2:	4698      	movls	r8, r3
 8010ed4:	4680      	movhi	r8, r0
 8010ed6:	2303      	movs	r3, #3
 8010ed8:	6123      	str	r3, [r4, #16]
 8010eda:	9b05      	ldr	r3, [sp, #20]
 8010edc:	f023 0204 	bic.w	r2, r3, #4
 8010ee0:	6022      	str	r2, [r4, #0]
 8010ee2:	f04f 0900 	mov.w	r9, #0
 8010ee6:	9700      	str	r7, [sp, #0]
 8010ee8:	4633      	mov	r3, r6
 8010eea:	aa0b      	add	r2, sp, #44	; 0x2c
 8010eec:	4621      	mov	r1, r4
 8010eee:	4628      	mov	r0, r5
 8010ef0:	f000 f9d8 	bl	80112a4 <_printf_common>
 8010ef4:	3001      	adds	r0, #1
 8010ef6:	f040 8090 	bne.w	801101a <_printf_float+0x1e2>
 8010efa:	f04f 30ff 	mov.w	r0, #4294967295
 8010efe:	b00d      	add	sp, #52	; 0x34
 8010f00:	ecbd 8b02 	vpop	{d8}
 8010f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f08:	4642      	mov	r2, r8
 8010f0a:	464b      	mov	r3, r9
 8010f0c:	4640      	mov	r0, r8
 8010f0e:	4649      	mov	r1, r9
 8010f10:	f7ef fe24 	bl	8000b5c <__aeabi_dcmpun>
 8010f14:	b140      	cbz	r0, 8010f28 <_printf_float+0xf0>
 8010f16:	464b      	mov	r3, r9
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	bfbc      	itt	lt
 8010f1c:	232d      	movlt	r3, #45	; 0x2d
 8010f1e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010f22:	487f      	ldr	r0, [pc, #508]	; (8011120 <_printf_float+0x2e8>)
 8010f24:	4b7f      	ldr	r3, [pc, #508]	; (8011124 <_printf_float+0x2ec>)
 8010f26:	e7d1      	b.n	8010ecc <_printf_float+0x94>
 8010f28:	6863      	ldr	r3, [r4, #4]
 8010f2a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010f2e:	9206      	str	r2, [sp, #24]
 8010f30:	1c5a      	adds	r2, r3, #1
 8010f32:	d13f      	bne.n	8010fb4 <_printf_float+0x17c>
 8010f34:	2306      	movs	r3, #6
 8010f36:	6063      	str	r3, [r4, #4]
 8010f38:	9b05      	ldr	r3, [sp, #20]
 8010f3a:	6861      	ldr	r1, [r4, #4]
 8010f3c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010f40:	2300      	movs	r3, #0
 8010f42:	9303      	str	r3, [sp, #12]
 8010f44:	ab0a      	add	r3, sp, #40	; 0x28
 8010f46:	e9cd b301 	strd	fp, r3, [sp, #4]
 8010f4a:	ab09      	add	r3, sp, #36	; 0x24
 8010f4c:	ec49 8b10 	vmov	d0, r8, r9
 8010f50:	9300      	str	r3, [sp, #0]
 8010f52:	6022      	str	r2, [r4, #0]
 8010f54:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010f58:	4628      	mov	r0, r5
 8010f5a:	f7ff fecd 	bl	8010cf8 <__cvt>
 8010f5e:	9b06      	ldr	r3, [sp, #24]
 8010f60:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010f62:	2b47      	cmp	r3, #71	; 0x47
 8010f64:	4680      	mov	r8, r0
 8010f66:	d108      	bne.n	8010f7a <_printf_float+0x142>
 8010f68:	1cc8      	adds	r0, r1, #3
 8010f6a:	db02      	blt.n	8010f72 <_printf_float+0x13a>
 8010f6c:	6863      	ldr	r3, [r4, #4]
 8010f6e:	4299      	cmp	r1, r3
 8010f70:	dd41      	ble.n	8010ff6 <_printf_float+0x1be>
 8010f72:	f1ab 0b02 	sub.w	fp, fp, #2
 8010f76:	fa5f fb8b 	uxtb.w	fp, fp
 8010f7a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010f7e:	d820      	bhi.n	8010fc2 <_printf_float+0x18a>
 8010f80:	3901      	subs	r1, #1
 8010f82:	465a      	mov	r2, fp
 8010f84:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010f88:	9109      	str	r1, [sp, #36]	; 0x24
 8010f8a:	f7ff ff17 	bl	8010dbc <__exponent>
 8010f8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010f90:	1813      	adds	r3, r2, r0
 8010f92:	2a01      	cmp	r2, #1
 8010f94:	4681      	mov	r9, r0
 8010f96:	6123      	str	r3, [r4, #16]
 8010f98:	dc02      	bgt.n	8010fa0 <_printf_float+0x168>
 8010f9a:	6822      	ldr	r2, [r4, #0]
 8010f9c:	07d2      	lsls	r2, r2, #31
 8010f9e:	d501      	bpl.n	8010fa4 <_printf_float+0x16c>
 8010fa0:	3301      	adds	r3, #1
 8010fa2:	6123      	str	r3, [r4, #16]
 8010fa4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d09c      	beq.n	8010ee6 <_printf_float+0xae>
 8010fac:	232d      	movs	r3, #45	; 0x2d
 8010fae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010fb2:	e798      	b.n	8010ee6 <_printf_float+0xae>
 8010fb4:	9a06      	ldr	r2, [sp, #24]
 8010fb6:	2a47      	cmp	r2, #71	; 0x47
 8010fb8:	d1be      	bne.n	8010f38 <_printf_float+0x100>
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d1bc      	bne.n	8010f38 <_printf_float+0x100>
 8010fbe:	2301      	movs	r3, #1
 8010fc0:	e7b9      	b.n	8010f36 <_printf_float+0xfe>
 8010fc2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8010fc6:	d118      	bne.n	8010ffa <_printf_float+0x1c2>
 8010fc8:	2900      	cmp	r1, #0
 8010fca:	6863      	ldr	r3, [r4, #4]
 8010fcc:	dd0b      	ble.n	8010fe6 <_printf_float+0x1ae>
 8010fce:	6121      	str	r1, [r4, #16]
 8010fd0:	b913      	cbnz	r3, 8010fd8 <_printf_float+0x1a0>
 8010fd2:	6822      	ldr	r2, [r4, #0]
 8010fd4:	07d0      	lsls	r0, r2, #31
 8010fd6:	d502      	bpl.n	8010fde <_printf_float+0x1a6>
 8010fd8:	3301      	adds	r3, #1
 8010fda:	440b      	add	r3, r1
 8010fdc:	6123      	str	r3, [r4, #16]
 8010fde:	65a1      	str	r1, [r4, #88]	; 0x58
 8010fe0:	f04f 0900 	mov.w	r9, #0
 8010fe4:	e7de      	b.n	8010fa4 <_printf_float+0x16c>
 8010fe6:	b913      	cbnz	r3, 8010fee <_printf_float+0x1b6>
 8010fe8:	6822      	ldr	r2, [r4, #0]
 8010fea:	07d2      	lsls	r2, r2, #31
 8010fec:	d501      	bpl.n	8010ff2 <_printf_float+0x1ba>
 8010fee:	3302      	adds	r3, #2
 8010ff0:	e7f4      	b.n	8010fdc <_printf_float+0x1a4>
 8010ff2:	2301      	movs	r3, #1
 8010ff4:	e7f2      	b.n	8010fdc <_printf_float+0x1a4>
 8010ff6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8010ffa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ffc:	4299      	cmp	r1, r3
 8010ffe:	db05      	blt.n	801100c <_printf_float+0x1d4>
 8011000:	6823      	ldr	r3, [r4, #0]
 8011002:	6121      	str	r1, [r4, #16]
 8011004:	07d8      	lsls	r0, r3, #31
 8011006:	d5ea      	bpl.n	8010fde <_printf_float+0x1a6>
 8011008:	1c4b      	adds	r3, r1, #1
 801100a:	e7e7      	b.n	8010fdc <_printf_float+0x1a4>
 801100c:	2900      	cmp	r1, #0
 801100e:	bfd4      	ite	le
 8011010:	f1c1 0202 	rsble	r2, r1, #2
 8011014:	2201      	movgt	r2, #1
 8011016:	4413      	add	r3, r2
 8011018:	e7e0      	b.n	8010fdc <_printf_float+0x1a4>
 801101a:	6823      	ldr	r3, [r4, #0]
 801101c:	055a      	lsls	r2, r3, #21
 801101e:	d407      	bmi.n	8011030 <_printf_float+0x1f8>
 8011020:	6923      	ldr	r3, [r4, #16]
 8011022:	4642      	mov	r2, r8
 8011024:	4631      	mov	r1, r6
 8011026:	4628      	mov	r0, r5
 8011028:	47b8      	blx	r7
 801102a:	3001      	adds	r0, #1
 801102c:	d12c      	bne.n	8011088 <_printf_float+0x250>
 801102e:	e764      	b.n	8010efa <_printf_float+0xc2>
 8011030:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011034:	f240 80e0 	bls.w	80111f8 <_printf_float+0x3c0>
 8011038:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801103c:	2200      	movs	r2, #0
 801103e:	2300      	movs	r3, #0
 8011040:	f7ef fd5a 	bl	8000af8 <__aeabi_dcmpeq>
 8011044:	2800      	cmp	r0, #0
 8011046:	d034      	beq.n	80110b2 <_printf_float+0x27a>
 8011048:	4a37      	ldr	r2, [pc, #220]	; (8011128 <_printf_float+0x2f0>)
 801104a:	2301      	movs	r3, #1
 801104c:	4631      	mov	r1, r6
 801104e:	4628      	mov	r0, r5
 8011050:	47b8      	blx	r7
 8011052:	3001      	adds	r0, #1
 8011054:	f43f af51 	beq.w	8010efa <_printf_float+0xc2>
 8011058:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801105c:	429a      	cmp	r2, r3
 801105e:	db02      	blt.n	8011066 <_printf_float+0x22e>
 8011060:	6823      	ldr	r3, [r4, #0]
 8011062:	07d8      	lsls	r0, r3, #31
 8011064:	d510      	bpl.n	8011088 <_printf_float+0x250>
 8011066:	ee18 3a10 	vmov	r3, s16
 801106a:	4652      	mov	r2, sl
 801106c:	4631      	mov	r1, r6
 801106e:	4628      	mov	r0, r5
 8011070:	47b8      	blx	r7
 8011072:	3001      	adds	r0, #1
 8011074:	f43f af41 	beq.w	8010efa <_printf_float+0xc2>
 8011078:	f04f 0800 	mov.w	r8, #0
 801107c:	f104 091a 	add.w	r9, r4, #26
 8011080:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011082:	3b01      	subs	r3, #1
 8011084:	4543      	cmp	r3, r8
 8011086:	dc09      	bgt.n	801109c <_printf_float+0x264>
 8011088:	6823      	ldr	r3, [r4, #0]
 801108a:	079b      	lsls	r3, r3, #30
 801108c:	f100 8105 	bmi.w	801129a <_printf_float+0x462>
 8011090:	68e0      	ldr	r0, [r4, #12]
 8011092:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011094:	4298      	cmp	r0, r3
 8011096:	bfb8      	it	lt
 8011098:	4618      	movlt	r0, r3
 801109a:	e730      	b.n	8010efe <_printf_float+0xc6>
 801109c:	2301      	movs	r3, #1
 801109e:	464a      	mov	r2, r9
 80110a0:	4631      	mov	r1, r6
 80110a2:	4628      	mov	r0, r5
 80110a4:	47b8      	blx	r7
 80110a6:	3001      	adds	r0, #1
 80110a8:	f43f af27 	beq.w	8010efa <_printf_float+0xc2>
 80110ac:	f108 0801 	add.w	r8, r8, #1
 80110b0:	e7e6      	b.n	8011080 <_printf_float+0x248>
 80110b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	dc39      	bgt.n	801112c <_printf_float+0x2f4>
 80110b8:	4a1b      	ldr	r2, [pc, #108]	; (8011128 <_printf_float+0x2f0>)
 80110ba:	2301      	movs	r3, #1
 80110bc:	4631      	mov	r1, r6
 80110be:	4628      	mov	r0, r5
 80110c0:	47b8      	blx	r7
 80110c2:	3001      	adds	r0, #1
 80110c4:	f43f af19 	beq.w	8010efa <_printf_float+0xc2>
 80110c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80110cc:	4313      	orrs	r3, r2
 80110ce:	d102      	bne.n	80110d6 <_printf_float+0x29e>
 80110d0:	6823      	ldr	r3, [r4, #0]
 80110d2:	07d9      	lsls	r1, r3, #31
 80110d4:	d5d8      	bpl.n	8011088 <_printf_float+0x250>
 80110d6:	ee18 3a10 	vmov	r3, s16
 80110da:	4652      	mov	r2, sl
 80110dc:	4631      	mov	r1, r6
 80110de:	4628      	mov	r0, r5
 80110e0:	47b8      	blx	r7
 80110e2:	3001      	adds	r0, #1
 80110e4:	f43f af09 	beq.w	8010efa <_printf_float+0xc2>
 80110e8:	f04f 0900 	mov.w	r9, #0
 80110ec:	f104 0a1a 	add.w	sl, r4, #26
 80110f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80110f2:	425b      	negs	r3, r3
 80110f4:	454b      	cmp	r3, r9
 80110f6:	dc01      	bgt.n	80110fc <_printf_float+0x2c4>
 80110f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80110fa:	e792      	b.n	8011022 <_printf_float+0x1ea>
 80110fc:	2301      	movs	r3, #1
 80110fe:	4652      	mov	r2, sl
 8011100:	4631      	mov	r1, r6
 8011102:	4628      	mov	r0, r5
 8011104:	47b8      	blx	r7
 8011106:	3001      	adds	r0, #1
 8011108:	f43f aef7 	beq.w	8010efa <_printf_float+0xc2>
 801110c:	f109 0901 	add.w	r9, r9, #1
 8011110:	e7ee      	b.n	80110f0 <_printf_float+0x2b8>
 8011112:	bf00      	nop
 8011114:	7fefffff 	.word	0x7fefffff
 8011118:	080189b4 	.word	0x080189b4
 801111c:	080189b8 	.word	0x080189b8
 8011120:	080189c0 	.word	0x080189c0
 8011124:	080189bc 	.word	0x080189bc
 8011128:	08018ee4 	.word	0x08018ee4
 801112c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801112e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011130:	429a      	cmp	r2, r3
 8011132:	bfa8      	it	ge
 8011134:	461a      	movge	r2, r3
 8011136:	2a00      	cmp	r2, #0
 8011138:	4691      	mov	r9, r2
 801113a:	dc37      	bgt.n	80111ac <_printf_float+0x374>
 801113c:	f04f 0b00 	mov.w	fp, #0
 8011140:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011144:	f104 021a 	add.w	r2, r4, #26
 8011148:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801114a:	9305      	str	r3, [sp, #20]
 801114c:	eba3 0309 	sub.w	r3, r3, r9
 8011150:	455b      	cmp	r3, fp
 8011152:	dc33      	bgt.n	80111bc <_printf_float+0x384>
 8011154:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011158:	429a      	cmp	r2, r3
 801115a:	db3b      	blt.n	80111d4 <_printf_float+0x39c>
 801115c:	6823      	ldr	r3, [r4, #0]
 801115e:	07da      	lsls	r2, r3, #31
 8011160:	d438      	bmi.n	80111d4 <_printf_float+0x39c>
 8011162:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011164:	9b05      	ldr	r3, [sp, #20]
 8011166:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011168:	1ad3      	subs	r3, r2, r3
 801116a:	eba2 0901 	sub.w	r9, r2, r1
 801116e:	4599      	cmp	r9, r3
 8011170:	bfa8      	it	ge
 8011172:	4699      	movge	r9, r3
 8011174:	f1b9 0f00 	cmp.w	r9, #0
 8011178:	dc35      	bgt.n	80111e6 <_printf_float+0x3ae>
 801117a:	f04f 0800 	mov.w	r8, #0
 801117e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011182:	f104 0a1a 	add.w	sl, r4, #26
 8011186:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801118a:	1a9b      	subs	r3, r3, r2
 801118c:	eba3 0309 	sub.w	r3, r3, r9
 8011190:	4543      	cmp	r3, r8
 8011192:	f77f af79 	ble.w	8011088 <_printf_float+0x250>
 8011196:	2301      	movs	r3, #1
 8011198:	4652      	mov	r2, sl
 801119a:	4631      	mov	r1, r6
 801119c:	4628      	mov	r0, r5
 801119e:	47b8      	blx	r7
 80111a0:	3001      	adds	r0, #1
 80111a2:	f43f aeaa 	beq.w	8010efa <_printf_float+0xc2>
 80111a6:	f108 0801 	add.w	r8, r8, #1
 80111aa:	e7ec      	b.n	8011186 <_printf_float+0x34e>
 80111ac:	4613      	mov	r3, r2
 80111ae:	4631      	mov	r1, r6
 80111b0:	4642      	mov	r2, r8
 80111b2:	4628      	mov	r0, r5
 80111b4:	47b8      	blx	r7
 80111b6:	3001      	adds	r0, #1
 80111b8:	d1c0      	bne.n	801113c <_printf_float+0x304>
 80111ba:	e69e      	b.n	8010efa <_printf_float+0xc2>
 80111bc:	2301      	movs	r3, #1
 80111be:	4631      	mov	r1, r6
 80111c0:	4628      	mov	r0, r5
 80111c2:	9205      	str	r2, [sp, #20]
 80111c4:	47b8      	blx	r7
 80111c6:	3001      	adds	r0, #1
 80111c8:	f43f ae97 	beq.w	8010efa <_printf_float+0xc2>
 80111cc:	9a05      	ldr	r2, [sp, #20]
 80111ce:	f10b 0b01 	add.w	fp, fp, #1
 80111d2:	e7b9      	b.n	8011148 <_printf_float+0x310>
 80111d4:	ee18 3a10 	vmov	r3, s16
 80111d8:	4652      	mov	r2, sl
 80111da:	4631      	mov	r1, r6
 80111dc:	4628      	mov	r0, r5
 80111de:	47b8      	blx	r7
 80111e0:	3001      	adds	r0, #1
 80111e2:	d1be      	bne.n	8011162 <_printf_float+0x32a>
 80111e4:	e689      	b.n	8010efa <_printf_float+0xc2>
 80111e6:	9a05      	ldr	r2, [sp, #20]
 80111e8:	464b      	mov	r3, r9
 80111ea:	4442      	add	r2, r8
 80111ec:	4631      	mov	r1, r6
 80111ee:	4628      	mov	r0, r5
 80111f0:	47b8      	blx	r7
 80111f2:	3001      	adds	r0, #1
 80111f4:	d1c1      	bne.n	801117a <_printf_float+0x342>
 80111f6:	e680      	b.n	8010efa <_printf_float+0xc2>
 80111f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80111fa:	2a01      	cmp	r2, #1
 80111fc:	dc01      	bgt.n	8011202 <_printf_float+0x3ca>
 80111fe:	07db      	lsls	r3, r3, #31
 8011200:	d538      	bpl.n	8011274 <_printf_float+0x43c>
 8011202:	2301      	movs	r3, #1
 8011204:	4642      	mov	r2, r8
 8011206:	4631      	mov	r1, r6
 8011208:	4628      	mov	r0, r5
 801120a:	47b8      	blx	r7
 801120c:	3001      	adds	r0, #1
 801120e:	f43f ae74 	beq.w	8010efa <_printf_float+0xc2>
 8011212:	ee18 3a10 	vmov	r3, s16
 8011216:	4652      	mov	r2, sl
 8011218:	4631      	mov	r1, r6
 801121a:	4628      	mov	r0, r5
 801121c:	47b8      	blx	r7
 801121e:	3001      	adds	r0, #1
 8011220:	f43f ae6b 	beq.w	8010efa <_printf_float+0xc2>
 8011224:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011228:	2200      	movs	r2, #0
 801122a:	2300      	movs	r3, #0
 801122c:	f7ef fc64 	bl	8000af8 <__aeabi_dcmpeq>
 8011230:	b9d8      	cbnz	r0, 801126a <_printf_float+0x432>
 8011232:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011234:	f108 0201 	add.w	r2, r8, #1
 8011238:	3b01      	subs	r3, #1
 801123a:	4631      	mov	r1, r6
 801123c:	4628      	mov	r0, r5
 801123e:	47b8      	blx	r7
 8011240:	3001      	adds	r0, #1
 8011242:	d10e      	bne.n	8011262 <_printf_float+0x42a>
 8011244:	e659      	b.n	8010efa <_printf_float+0xc2>
 8011246:	2301      	movs	r3, #1
 8011248:	4652      	mov	r2, sl
 801124a:	4631      	mov	r1, r6
 801124c:	4628      	mov	r0, r5
 801124e:	47b8      	blx	r7
 8011250:	3001      	adds	r0, #1
 8011252:	f43f ae52 	beq.w	8010efa <_printf_float+0xc2>
 8011256:	f108 0801 	add.w	r8, r8, #1
 801125a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801125c:	3b01      	subs	r3, #1
 801125e:	4543      	cmp	r3, r8
 8011260:	dcf1      	bgt.n	8011246 <_printf_float+0x40e>
 8011262:	464b      	mov	r3, r9
 8011264:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011268:	e6dc      	b.n	8011024 <_printf_float+0x1ec>
 801126a:	f04f 0800 	mov.w	r8, #0
 801126e:	f104 0a1a 	add.w	sl, r4, #26
 8011272:	e7f2      	b.n	801125a <_printf_float+0x422>
 8011274:	2301      	movs	r3, #1
 8011276:	4642      	mov	r2, r8
 8011278:	e7df      	b.n	801123a <_printf_float+0x402>
 801127a:	2301      	movs	r3, #1
 801127c:	464a      	mov	r2, r9
 801127e:	4631      	mov	r1, r6
 8011280:	4628      	mov	r0, r5
 8011282:	47b8      	blx	r7
 8011284:	3001      	adds	r0, #1
 8011286:	f43f ae38 	beq.w	8010efa <_printf_float+0xc2>
 801128a:	f108 0801 	add.w	r8, r8, #1
 801128e:	68e3      	ldr	r3, [r4, #12]
 8011290:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011292:	1a5b      	subs	r3, r3, r1
 8011294:	4543      	cmp	r3, r8
 8011296:	dcf0      	bgt.n	801127a <_printf_float+0x442>
 8011298:	e6fa      	b.n	8011090 <_printf_float+0x258>
 801129a:	f04f 0800 	mov.w	r8, #0
 801129e:	f104 0919 	add.w	r9, r4, #25
 80112a2:	e7f4      	b.n	801128e <_printf_float+0x456>

080112a4 <_printf_common>:
 80112a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80112a8:	4616      	mov	r6, r2
 80112aa:	4699      	mov	r9, r3
 80112ac:	688a      	ldr	r2, [r1, #8]
 80112ae:	690b      	ldr	r3, [r1, #16]
 80112b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80112b4:	4293      	cmp	r3, r2
 80112b6:	bfb8      	it	lt
 80112b8:	4613      	movlt	r3, r2
 80112ba:	6033      	str	r3, [r6, #0]
 80112bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80112c0:	4607      	mov	r7, r0
 80112c2:	460c      	mov	r4, r1
 80112c4:	b10a      	cbz	r2, 80112ca <_printf_common+0x26>
 80112c6:	3301      	adds	r3, #1
 80112c8:	6033      	str	r3, [r6, #0]
 80112ca:	6823      	ldr	r3, [r4, #0]
 80112cc:	0699      	lsls	r1, r3, #26
 80112ce:	bf42      	ittt	mi
 80112d0:	6833      	ldrmi	r3, [r6, #0]
 80112d2:	3302      	addmi	r3, #2
 80112d4:	6033      	strmi	r3, [r6, #0]
 80112d6:	6825      	ldr	r5, [r4, #0]
 80112d8:	f015 0506 	ands.w	r5, r5, #6
 80112dc:	d106      	bne.n	80112ec <_printf_common+0x48>
 80112de:	f104 0a19 	add.w	sl, r4, #25
 80112e2:	68e3      	ldr	r3, [r4, #12]
 80112e4:	6832      	ldr	r2, [r6, #0]
 80112e6:	1a9b      	subs	r3, r3, r2
 80112e8:	42ab      	cmp	r3, r5
 80112ea:	dc26      	bgt.n	801133a <_printf_common+0x96>
 80112ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80112f0:	1e13      	subs	r3, r2, #0
 80112f2:	6822      	ldr	r2, [r4, #0]
 80112f4:	bf18      	it	ne
 80112f6:	2301      	movne	r3, #1
 80112f8:	0692      	lsls	r2, r2, #26
 80112fa:	d42b      	bmi.n	8011354 <_printf_common+0xb0>
 80112fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011300:	4649      	mov	r1, r9
 8011302:	4638      	mov	r0, r7
 8011304:	47c0      	blx	r8
 8011306:	3001      	adds	r0, #1
 8011308:	d01e      	beq.n	8011348 <_printf_common+0xa4>
 801130a:	6823      	ldr	r3, [r4, #0]
 801130c:	68e5      	ldr	r5, [r4, #12]
 801130e:	6832      	ldr	r2, [r6, #0]
 8011310:	f003 0306 	and.w	r3, r3, #6
 8011314:	2b04      	cmp	r3, #4
 8011316:	bf08      	it	eq
 8011318:	1aad      	subeq	r5, r5, r2
 801131a:	68a3      	ldr	r3, [r4, #8]
 801131c:	6922      	ldr	r2, [r4, #16]
 801131e:	bf0c      	ite	eq
 8011320:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011324:	2500      	movne	r5, #0
 8011326:	4293      	cmp	r3, r2
 8011328:	bfc4      	itt	gt
 801132a:	1a9b      	subgt	r3, r3, r2
 801132c:	18ed      	addgt	r5, r5, r3
 801132e:	2600      	movs	r6, #0
 8011330:	341a      	adds	r4, #26
 8011332:	42b5      	cmp	r5, r6
 8011334:	d11a      	bne.n	801136c <_printf_common+0xc8>
 8011336:	2000      	movs	r0, #0
 8011338:	e008      	b.n	801134c <_printf_common+0xa8>
 801133a:	2301      	movs	r3, #1
 801133c:	4652      	mov	r2, sl
 801133e:	4649      	mov	r1, r9
 8011340:	4638      	mov	r0, r7
 8011342:	47c0      	blx	r8
 8011344:	3001      	adds	r0, #1
 8011346:	d103      	bne.n	8011350 <_printf_common+0xac>
 8011348:	f04f 30ff 	mov.w	r0, #4294967295
 801134c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011350:	3501      	adds	r5, #1
 8011352:	e7c6      	b.n	80112e2 <_printf_common+0x3e>
 8011354:	18e1      	adds	r1, r4, r3
 8011356:	1c5a      	adds	r2, r3, #1
 8011358:	2030      	movs	r0, #48	; 0x30
 801135a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801135e:	4422      	add	r2, r4
 8011360:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011364:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011368:	3302      	adds	r3, #2
 801136a:	e7c7      	b.n	80112fc <_printf_common+0x58>
 801136c:	2301      	movs	r3, #1
 801136e:	4622      	mov	r2, r4
 8011370:	4649      	mov	r1, r9
 8011372:	4638      	mov	r0, r7
 8011374:	47c0      	blx	r8
 8011376:	3001      	adds	r0, #1
 8011378:	d0e6      	beq.n	8011348 <_printf_common+0xa4>
 801137a:	3601      	adds	r6, #1
 801137c:	e7d9      	b.n	8011332 <_printf_common+0x8e>
	...

08011380 <_printf_i>:
 8011380:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011384:	460c      	mov	r4, r1
 8011386:	4691      	mov	r9, r2
 8011388:	7e27      	ldrb	r7, [r4, #24]
 801138a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801138c:	2f78      	cmp	r7, #120	; 0x78
 801138e:	4680      	mov	r8, r0
 8011390:	469a      	mov	sl, r3
 8011392:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011396:	d807      	bhi.n	80113a8 <_printf_i+0x28>
 8011398:	2f62      	cmp	r7, #98	; 0x62
 801139a:	d80a      	bhi.n	80113b2 <_printf_i+0x32>
 801139c:	2f00      	cmp	r7, #0
 801139e:	f000 80d8 	beq.w	8011552 <_printf_i+0x1d2>
 80113a2:	2f58      	cmp	r7, #88	; 0x58
 80113a4:	f000 80a3 	beq.w	80114ee <_printf_i+0x16e>
 80113a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80113ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80113b0:	e03a      	b.n	8011428 <_printf_i+0xa8>
 80113b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80113b6:	2b15      	cmp	r3, #21
 80113b8:	d8f6      	bhi.n	80113a8 <_printf_i+0x28>
 80113ba:	a001      	add	r0, pc, #4	; (adr r0, 80113c0 <_printf_i+0x40>)
 80113bc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80113c0:	08011419 	.word	0x08011419
 80113c4:	0801142d 	.word	0x0801142d
 80113c8:	080113a9 	.word	0x080113a9
 80113cc:	080113a9 	.word	0x080113a9
 80113d0:	080113a9 	.word	0x080113a9
 80113d4:	080113a9 	.word	0x080113a9
 80113d8:	0801142d 	.word	0x0801142d
 80113dc:	080113a9 	.word	0x080113a9
 80113e0:	080113a9 	.word	0x080113a9
 80113e4:	080113a9 	.word	0x080113a9
 80113e8:	080113a9 	.word	0x080113a9
 80113ec:	08011539 	.word	0x08011539
 80113f0:	0801145d 	.word	0x0801145d
 80113f4:	0801151b 	.word	0x0801151b
 80113f8:	080113a9 	.word	0x080113a9
 80113fc:	080113a9 	.word	0x080113a9
 8011400:	0801155b 	.word	0x0801155b
 8011404:	080113a9 	.word	0x080113a9
 8011408:	0801145d 	.word	0x0801145d
 801140c:	080113a9 	.word	0x080113a9
 8011410:	080113a9 	.word	0x080113a9
 8011414:	08011523 	.word	0x08011523
 8011418:	680b      	ldr	r3, [r1, #0]
 801141a:	1d1a      	adds	r2, r3, #4
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	600a      	str	r2, [r1, #0]
 8011420:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011424:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011428:	2301      	movs	r3, #1
 801142a:	e0a3      	b.n	8011574 <_printf_i+0x1f4>
 801142c:	6825      	ldr	r5, [r4, #0]
 801142e:	6808      	ldr	r0, [r1, #0]
 8011430:	062e      	lsls	r6, r5, #24
 8011432:	f100 0304 	add.w	r3, r0, #4
 8011436:	d50a      	bpl.n	801144e <_printf_i+0xce>
 8011438:	6805      	ldr	r5, [r0, #0]
 801143a:	600b      	str	r3, [r1, #0]
 801143c:	2d00      	cmp	r5, #0
 801143e:	da03      	bge.n	8011448 <_printf_i+0xc8>
 8011440:	232d      	movs	r3, #45	; 0x2d
 8011442:	426d      	negs	r5, r5
 8011444:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011448:	485e      	ldr	r0, [pc, #376]	; (80115c4 <_printf_i+0x244>)
 801144a:	230a      	movs	r3, #10
 801144c:	e019      	b.n	8011482 <_printf_i+0x102>
 801144e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8011452:	6805      	ldr	r5, [r0, #0]
 8011454:	600b      	str	r3, [r1, #0]
 8011456:	bf18      	it	ne
 8011458:	b22d      	sxthne	r5, r5
 801145a:	e7ef      	b.n	801143c <_printf_i+0xbc>
 801145c:	680b      	ldr	r3, [r1, #0]
 801145e:	6825      	ldr	r5, [r4, #0]
 8011460:	1d18      	adds	r0, r3, #4
 8011462:	6008      	str	r0, [r1, #0]
 8011464:	0628      	lsls	r0, r5, #24
 8011466:	d501      	bpl.n	801146c <_printf_i+0xec>
 8011468:	681d      	ldr	r5, [r3, #0]
 801146a:	e002      	b.n	8011472 <_printf_i+0xf2>
 801146c:	0669      	lsls	r1, r5, #25
 801146e:	d5fb      	bpl.n	8011468 <_printf_i+0xe8>
 8011470:	881d      	ldrh	r5, [r3, #0]
 8011472:	4854      	ldr	r0, [pc, #336]	; (80115c4 <_printf_i+0x244>)
 8011474:	2f6f      	cmp	r7, #111	; 0x6f
 8011476:	bf0c      	ite	eq
 8011478:	2308      	moveq	r3, #8
 801147a:	230a      	movne	r3, #10
 801147c:	2100      	movs	r1, #0
 801147e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011482:	6866      	ldr	r6, [r4, #4]
 8011484:	60a6      	str	r6, [r4, #8]
 8011486:	2e00      	cmp	r6, #0
 8011488:	bfa2      	ittt	ge
 801148a:	6821      	ldrge	r1, [r4, #0]
 801148c:	f021 0104 	bicge.w	r1, r1, #4
 8011490:	6021      	strge	r1, [r4, #0]
 8011492:	b90d      	cbnz	r5, 8011498 <_printf_i+0x118>
 8011494:	2e00      	cmp	r6, #0
 8011496:	d04d      	beq.n	8011534 <_printf_i+0x1b4>
 8011498:	4616      	mov	r6, r2
 801149a:	fbb5 f1f3 	udiv	r1, r5, r3
 801149e:	fb03 5711 	mls	r7, r3, r1, r5
 80114a2:	5dc7      	ldrb	r7, [r0, r7]
 80114a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80114a8:	462f      	mov	r7, r5
 80114aa:	42bb      	cmp	r3, r7
 80114ac:	460d      	mov	r5, r1
 80114ae:	d9f4      	bls.n	801149a <_printf_i+0x11a>
 80114b0:	2b08      	cmp	r3, #8
 80114b2:	d10b      	bne.n	80114cc <_printf_i+0x14c>
 80114b4:	6823      	ldr	r3, [r4, #0]
 80114b6:	07df      	lsls	r7, r3, #31
 80114b8:	d508      	bpl.n	80114cc <_printf_i+0x14c>
 80114ba:	6923      	ldr	r3, [r4, #16]
 80114bc:	6861      	ldr	r1, [r4, #4]
 80114be:	4299      	cmp	r1, r3
 80114c0:	bfde      	ittt	le
 80114c2:	2330      	movle	r3, #48	; 0x30
 80114c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80114c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80114cc:	1b92      	subs	r2, r2, r6
 80114ce:	6122      	str	r2, [r4, #16]
 80114d0:	f8cd a000 	str.w	sl, [sp]
 80114d4:	464b      	mov	r3, r9
 80114d6:	aa03      	add	r2, sp, #12
 80114d8:	4621      	mov	r1, r4
 80114da:	4640      	mov	r0, r8
 80114dc:	f7ff fee2 	bl	80112a4 <_printf_common>
 80114e0:	3001      	adds	r0, #1
 80114e2:	d14c      	bne.n	801157e <_printf_i+0x1fe>
 80114e4:	f04f 30ff 	mov.w	r0, #4294967295
 80114e8:	b004      	add	sp, #16
 80114ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80114ee:	4835      	ldr	r0, [pc, #212]	; (80115c4 <_printf_i+0x244>)
 80114f0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80114f4:	6823      	ldr	r3, [r4, #0]
 80114f6:	680e      	ldr	r6, [r1, #0]
 80114f8:	061f      	lsls	r7, r3, #24
 80114fa:	f856 5b04 	ldr.w	r5, [r6], #4
 80114fe:	600e      	str	r6, [r1, #0]
 8011500:	d514      	bpl.n	801152c <_printf_i+0x1ac>
 8011502:	07d9      	lsls	r1, r3, #31
 8011504:	bf44      	itt	mi
 8011506:	f043 0320 	orrmi.w	r3, r3, #32
 801150a:	6023      	strmi	r3, [r4, #0]
 801150c:	b91d      	cbnz	r5, 8011516 <_printf_i+0x196>
 801150e:	6823      	ldr	r3, [r4, #0]
 8011510:	f023 0320 	bic.w	r3, r3, #32
 8011514:	6023      	str	r3, [r4, #0]
 8011516:	2310      	movs	r3, #16
 8011518:	e7b0      	b.n	801147c <_printf_i+0xfc>
 801151a:	6823      	ldr	r3, [r4, #0]
 801151c:	f043 0320 	orr.w	r3, r3, #32
 8011520:	6023      	str	r3, [r4, #0]
 8011522:	2378      	movs	r3, #120	; 0x78
 8011524:	4828      	ldr	r0, [pc, #160]	; (80115c8 <_printf_i+0x248>)
 8011526:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801152a:	e7e3      	b.n	80114f4 <_printf_i+0x174>
 801152c:	065e      	lsls	r6, r3, #25
 801152e:	bf48      	it	mi
 8011530:	b2ad      	uxthmi	r5, r5
 8011532:	e7e6      	b.n	8011502 <_printf_i+0x182>
 8011534:	4616      	mov	r6, r2
 8011536:	e7bb      	b.n	80114b0 <_printf_i+0x130>
 8011538:	680b      	ldr	r3, [r1, #0]
 801153a:	6826      	ldr	r6, [r4, #0]
 801153c:	6960      	ldr	r0, [r4, #20]
 801153e:	1d1d      	adds	r5, r3, #4
 8011540:	600d      	str	r5, [r1, #0]
 8011542:	0635      	lsls	r5, r6, #24
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	d501      	bpl.n	801154c <_printf_i+0x1cc>
 8011548:	6018      	str	r0, [r3, #0]
 801154a:	e002      	b.n	8011552 <_printf_i+0x1d2>
 801154c:	0671      	lsls	r1, r6, #25
 801154e:	d5fb      	bpl.n	8011548 <_printf_i+0x1c8>
 8011550:	8018      	strh	r0, [r3, #0]
 8011552:	2300      	movs	r3, #0
 8011554:	6123      	str	r3, [r4, #16]
 8011556:	4616      	mov	r6, r2
 8011558:	e7ba      	b.n	80114d0 <_printf_i+0x150>
 801155a:	680b      	ldr	r3, [r1, #0]
 801155c:	1d1a      	adds	r2, r3, #4
 801155e:	600a      	str	r2, [r1, #0]
 8011560:	681e      	ldr	r6, [r3, #0]
 8011562:	6862      	ldr	r2, [r4, #4]
 8011564:	2100      	movs	r1, #0
 8011566:	4630      	mov	r0, r6
 8011568:	f7ee fe52 	bl	8000210 <memchr>
 801156c:	b108      	cbz	r0, 8011572 <_printf_i+0x1f2>
 801156e:	1b80      	subs	r0, r0, r6
 8011570:	6060      	str	r0, [r4, #4]
 8011572:	6863      	ldr	r3, [r4, #4]
 8011574:	6123      	str	r3, [r4, #16]
 8011576:	2300      	movs	r3, #0
 8011578:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801157c:	e7a8      	b.n	80114d0 <_printf_i+0x150>
 801157e:	6923      	ldr	r3, [r4, #16]
 8011580:	4632      	mov	r2, r6
 8011582:	4649      	mov	r1, r9
 8011584:	4640      	mov	r0, r8
 8011586:	47d0      	blx	sl
 8011588:	3001      	adds	r0, #1
 801158a:	d0ab      	beq.n	80114e4 <_printf_i+0x164>
 801158c:	6823      	ldr	r3, [r4, #0]
 801158e:	079b      	lsls	r3, r3, #30
 8011590:	d413      	bmi.n	80115ba <_printf_i+0x23a>
 8011592:	68e0      	ldr	r0, [r4, #12]
 8011594:	9b03      	ldr	r3, [sp, #12]
 8011596:	4298      	cmp	r0, r3
 8011598:	bfb8      	it	lt
 801159a:	4618      	movlt	r0, r3
 801159c:	e7a4      	b.n	80114e8 <_printf_i+0x168>
 801159e:	2301      	movs	r3, #1
 80115a0:	4632      	mov	r2, r6
 80115a2:	4649      	mov	r1, r9
 80115a4:	4640      	mov	r0, r8
 80115a6:	47d0      	blx	sl
 80115a8:	3001      	adds	r0, #1
 80115aa:	d09b      	beq.n	80114e4 <_printf_i+0x164>
 80115ac:	3501      	adds	r5, #1
 80115ae:	68e3      	ldr	r3, [r4, #12]
 80115b0:	9903      	ldr	r1, [sp, #12]
 80115b2:	1a5b      	subs	r3, r3, r1
 80115b4:	42ab      	cmp	r3, r5
 80115b6:	dcf2      	bgt.n	801159e <_printf_i+0x21e>
 80115b8:	e7eb      	b.n	8011592 <_printf_i+0x212>
 80115ba:	2500      	movs	r5, #0
 80115bc:	f104 0619 	add.w	r6, r4, #25
 80115c0:	e7f5      	b.n	80115ae <_printf_i+0x22e>
 80115c2:	bf00      	nop
 80115c4:	080189c4 	.word	0x080189c4
 80115c8:	080189d5 	.word	0x080189d5

080115cc <_sbrk_r>:
 80115cc:	b538      	push	{r3, r4, r5, lr}
 80115ce:	4d06      	ldr	r5, [pc, #24]	; (80115e8 <_sbrk_r+0x1c>)
 80115d0:	2300      	movs	r3, #0
 80115d2:	4604      	mov	r4, r0
 80115d4:	4608      	mov	r0, r1
 80115d6:	602b      	str	r3, [r5, #0]
 80115d8:	f7f4 fd2e 	bl	8006038 <_sbrk>
 80115dc:	1c43      	adds	r3, r0, #1
 80115de:	d102      	bne.n	80115e6 <_sbrk_r+0x1a>
 80115e0:	682b      	ldr	r3, [r5, #0]
 80115e2:	b103      	cbz	r3, 80115e6 <_sbrk_r+0x1a>
 80115e4:	6023      	str	r3, [r4, #0]
 80115e6:	bd38      	pop	{r3, r4, r5, pc}
 80115e8:	20009a48 	.word	0x20009a48

080115ec <siprintf>:
 80115ec:	b40e      	push	{r1, r2, r3}
 80115ee:	b500      	push	{lr}
 80115f0:	b09c      	sub	sp, #112	; 0x70
 80115f2:	ab1d      	add	r3, sp, #116	; 0x74
 80115f4:	9002      	str	r0, [sp, #8]
 80115f6:	9006      	str	r0, [sp, #24]
 80115f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80115fc:	4809      	ldr	r0, [pc, #36]	; (8011624 <siprintf+0x38>)
 80115fe:	9107      	str	r1, [sp, #28]
 8011600:	9104      	str	r1, [sp, #16]
 8011602:	4909      	ldr	r1, [pc, #36]	; (8011628 <siprintf+0x3c>)
 8011604:	f853 2b04 	ldr.w	r2, [r3], #4
 8011608:	9105      	str	r1, [sp, #20]
 801160a:	6800      	ldr	r0, [r0, #0]
 801160c:	9301      	str	r3, [sp, #4]
 801160e:	a902      	add	r1, sp, #8
 8011610:	f003 f856 	bl	80146c0 <_svfiprintf_r>
 8011614:	9b02      	ldr	r3, [sp, #8]
 8011616:	2200      	movs	r2, #0
 8011618:	701a      	strb	r2, [r3, #0]
 801161a:	b01c      	add	sp, #112	; 0x70
 801161c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011620:	b003      	add	sp, #12
 8011622:	4770      	bx	lr
 8011624:	20000020 	.word	0x20000020
 8011628:	ffff0208 	.word	0xffff0208

0801162c <strncmp>:
 801162c:	b510      	push	{r4, lr}
 801162e:	b16a      	cbz	r2, 801164c <strncmp+0x20>
 8011630:	3901      	subs	r1, #1
 8011632:	1884      	adds	r4, r0, r2
 8011634:	f810 3b01 	ldrb.w	r3, [r0], #1
 8011638:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801163c:	4293      	cmp	r3, r2
 801163e:	d103      	bne.n	8011648 <strncmp+0x1c>
 8011640:	42a0      	cmp	r0, r4
 8011642:	d001      	beq.n	8011648 <strncmp+0x1c>
 8011644:	2b00      	cmp	r3, #0
 8011646:	d1f5      	bne.n	8011634 <strncmp+0x8>
 8011648:	1a98      	subs	r0, r3, r2
 801164a:	bd10      	pop	{r4, pc}
 801164c:	4610      	mov	r0, r2
 801164e:	e7fc      	b.n	801164a <strncmp+0x1e>

08011650 <sulp>:
 8011650:	b570      	push	{r4, r5, r6, lr}
 8011652:	4604      	mov	r4, r0
 8011654:	460d      	mov	r5, r1
 8011656:	ec45 4b10 	vmov	d0, r4, r5
 801165a:	4616      	mov	r6, r2
 801165c:	f002 fe76 	bl	801434c <__ulp>
 8011660:	ec51 0b10 	vmov	r0, r1, d0
 8011664:	b17e      	cbz	r6, 8011686 <sulp+0x36>
 8011666:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801166a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801166e:	2b00      	cmp	r3, #0
 8011670:	dd09      	ble.n	8011686 <sulp+0x36>
 8011672:	051b      	lsls	r3, r3, #20
 8011674:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8011678:	2400      	movs	r4, #0
 801167a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801167e:	4622      	mov	r2, r4
 8011680:	462b      	mov	r3, r5
 8011682:	f7ee ffd1 	bl	8000628 <__aeabi_dmul>
 8011686:	bd70      	pop	{r4, r5, r6, pc}

08011688 <_strtod_l>:
 8011688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801168c:	b0a3      	sub	sp, #140	; 0x8c
 801168e:	461f      	mov	r7, r3
 8011690:	2300      	movs	r3, #0
 8011692:	931e      	str	r3, [sp, #120]	; 0x78
 8011694:	4ba4      	ldr	r3, [pc, #656]	; (8011928 <_strtod_l+0x2a0>)
 8011696:	9219      	str	r2, [sp, #100]	; 0x64
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	9307      	str	r3, [sp, #28]
 801169c:	4604      	mov	r4, r0
 801169e:	4618      	mov	r0, r3
 80116a0:	4688      	mov	r8, r1
 80116a2:	f7ee fda7 	bl	80001f4 <strlen>
 80116a6:	f04f 0a00 	mov.w	sl, #0
 80116aa:	4605      	mov	r5, r0
 80116ac:	f04f 0b00 	mov.w	fp, #0
 80116b0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80116b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80116b6:	781a      	ldrb	r2, [r3, #0]
 80116b8:	2a2b      	cmp	r2, #43	; 0x2b
 80116ba:	d04c      	beq.n	8011756 <_strtod_l+0xce>
 80116bc:	d839      	bhi.n	8011732 <_strtod_l+0xaa>
 80116be:	2a0d      	cmp	r2, #13
 80116c0:	d832      	bhi.n	8011728 <_strtod_l+0xa0>
 80116c2:	2a08      	cmp	r2, #8
 80116c4:	d832      	bhi.n	801172c <_strtod_l+0xa4>
 80116c6:	2a00      	cmp	r2, #0
 80116c8:	d03c      	beq.n	8011744 <_strtod_l+0xbc>
 80116ca:	2300      	movs	r3, #0
 80116cc:	930e      	str	r3, [sp, #56]	; 0x38
 80116ce:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80116d0:	7833      	ldrb	r3, [r6, #0]
 80116d2:	2b30      	cmp	r3, #48	; 0x30
 80116d4:	f040 80b4 	bne.w	8011840 <_strtod_l+0x1b8>
 80116d8:	7873      	ldrb	r3, [r6, #1]
 80116da:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80116de:	2b58      	cmp	r3, #88	; 0x58
 80116e0:	d16c      	bne.n	80117bc <_strtod_l+0x134>
 80116e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80116e4:	9301      	str	r3, [sp, #4]
 80116e6:	ab1e      	add	r3, sp, #120	; 0x78
 80116e8:	9702      	str	r7, [sp, #8]
 80116ea:	9300      	str	r3, [sp, #0]
 80116ec:	4a8f      	ldr	r2, [pc, #572]	; (801192c <_strtod_l+0x2a4>)
 80116ee:	ab1f      	add	r3, sp, #124	; 0x7c
 80116f0:	a91d      	add	r1, sp, #116	; 0x74
 80116f2:	4620      	mov	r0, r4
 80116f4:	f001 ff3a 	bl	801356c <__gethex>
 80116f8:	f010 0707 	ands.w	r7, r0, #7
 80116fc:	4605      	mov	r5, r0
 80116fe:	d005      	beq.n	801170c <_strtod_l+0x84>
 8011700:	2f06      	cmp	r7, #6
 8011702:	d12a      	bne.n	801175a <_strtod_l+0xd2>
 8011704:	3601      	adds	r6, #1
 8011706:	2300      	movs	r3, #0
 8011708:	961d      	str	r6, [sp, #116]	; 0x74
 801170a:	930e      	str	r3, [sp, #56]	; 0x38
 801170c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801170e:	2b00      	cmp	r3, #0
 8011710:	f040 8596 	bne.w	8012240 <_strtod_l+0xbb8>
 8011714:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011716:	b1db      	cbz	r3, 8011750 <_strtod_l+0xc8>
 8011718:	4652      	mov	r2, sl
 801171a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801171e:	ec43 2b10 	vmov	d0, r2, r3
 8011722:	b023      	add	sp, #140	; 0x8c
 8011724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011728:	2a20      	cmp	r2, #32
 801172a:	d1ce      	bne.n	80116ca <_strtod_l+0x42>
 801172c:	3301      	adds	r3, #1
 801172e:	931d      	str	r3, [sp, #116]	; 0x74
 8011730:	e7c0      	b.n	80116b4 <_strtod_l+0x2c>
 8011732:	2a2d      	cmp	r2, #45	; 0x2d
 8011734:	d1c9      	bne.n	80116ca <_strtod_l+0x42>
 8011736:	2201      	movs	r2, #1
 8011738:	920e      	str	r2, [sp, #56]	; 0x38
 801173a:	1c5a      	adds	r2, r3, #1
 801173c:	921d      	str	r2, [sp, #116]	; 0x74
 801173e:	785b      	ldrb	r3, [r3, #1]
 8011740:	2b00      	cmp	r3, #0
 8011742:	d1c4      	bne.n	80116ce <_strtod_l+0x46>
 8011744:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011746:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801174a:	2b00      	cmp	r3, #0
 801174c:	f040 8576 	bne.w	801223c <_strtod_l+0xbb4>
 8011750:	4652      	mov	r2, sl
 8011752:	465b      	mov	r3, fp
 8011754:	e7e3      	b.n	801171e <_strtod_l+0x96>
 8011756:	2200      	movs	r2, #0
 8011758:	e7ee      	b.n	8011738 <_strtod_l+0xb0>
 801175a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801175c:	b13a      	cbz	r2, 801176e <_strtod_l+0xe6>
 801175e:	2135      	movs	r1, #53	; 0x35
 8011760:	a820      	add	r0, sp, #128	; 0x80
 8011762:	f002 fefe 	bl	8014562 <__copybits>
 8011766:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011768:	4620      	mov	r0, r4
 801176a:	f002 fac3 	bl	8013cf4 <_Bfree>
 801176e:	3f01      	subs	r7, #1
 8011770:	2f05      	cmp	r7, #5
 8011772:	d807      	bhi.n	8011784 <_strtod_l+0xfc>
 8011774:	e8df f007 	tbb	[pc, r7]
 8011778:	1d180b0e 	.word	0x1d180b0e
 801177c:	030e      	.short	0x030e
 801177e:	f04f 0b00 	mov.w	fp, #0
 8011782:	46da      	mov	sl, fp
 8011784:	0728      	lsls	r0, r5, #28
 8011786:	d5c1      	bpl.n	801170c <_strtod_l+0x84>
 8011788:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801178c:	e7be      	b.n	801170c <_strtod_l+0x84>
 801178e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8011792:	e7f7      	b.n	8011784 <_strtod_l+0xfc>
 8011794:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8011798:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801179a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801179e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80117a2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80117a6:	e7ed      	b.n	8011784 <_strtod_l+0xfc>
 80117a8:	f8df b184 	ldr.w	fp, [pc, #388]	; 8011930 <_strtod_l+0x2a8>
 80117ac:	f04f 0a00 	mov.w	sl, #0
 80117b0:	e7e8      	b.n	8011784 <_strtod_l+0xfc>
 80117b2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80117b6:	f04f 3aff 	mov.w	sl, #4294967295
 80117ba:	e7e3      	b.n	8011784 <_strtod_l+0xfc>
 80117bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80117be:	1c5a      	adds	r2, r3, #1
 80117c0:	921d      	str	r2, [sp, #116]	; 0x74
 80117c2:	785b      	ldrb	r3, [r3, #1]
 80117c4:	2b30      	cmp	r3, #48	; 0x30
 80117c6:	d0f9      	beq.n	80117bc <_strtod_l+0x134>
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d09f      	beq.n	801170c <_strtod_l+0x84>
 80117cc:	2301      	movs	r3, #1
 80117ce:	f04f 0900 	mov.w	r9, #0
 80117d2:	9304      	str	r3, [sp, #16]
 80117d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80117d6:	930a      	str	r3, [sp, #40]	; 0x28
 80117d8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80117dc:	464f      	mov	r7, r9
 80117de:	220a      	movs	r2, #10
 80117e0:	981d      	ldr	r0, [sp, #116]	; 0x74
 80117e2:	7806      	ldrb	r6, [r0, #0]
 80117e4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80117e8:	b2d9      	uxtb	r1, r3
 80117ea:	2909      	cmp	r1, #9
 80117ec:	d92a      	bls.n	8011844 <_strtod_l+0x1bc>
 80117ee:	9907      	ldr	r1, [sp, #28]
 80117f0:	462a      	mov	r2, r5
 80117f2:	f7ff ff1b 	bl	801162c <strncmp>
 80117f6:	b398      	cbz	r0, 8011860 <_strtod_l+0x1d8>
 80117f8:	2000      	movs	r0, #0
 80117fa:	4633      	mov	r3, r6
 80117fc:	463d      	mov	r5, r7
 80117fe:	9007      	str	r0, [sp, #28]
 8011800:	4602      	mov	r2, r0
 8011802:	2b65      	cmp	r3, #101	; 0x65
 8011804:	d001      	beq.n	801180a <_strtod_l+0x182>
 8011806:	2b45      	cmp	r3, #69	; 0x45
 8011808:	d118      	bne.n	801183c <_strtod_l+0x1b4>
 801180a:	b91d      	cbnz	r5, 8011814 <_strtod_l+0x18c>
 801180c:	9b04      	ldr	r3, [sp, #16]
 801180e:	4303      	orrs	r3, r0
 8011810:	d098      	beq.n	8011744 <_strtod_l+0xbc>
 8011812:	2500      	movs	r5, #0
 8011814:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8011818:	f108 0301 	add.w	r3, r8, #1
 801181c:	931d      	str	r3, [sp, #116]	; 0x74
 801181e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8011822:	2b2b      	cmp	r3, #43	; 0x2b
 8011824:	d075      	beq.n	8011912 <_strtod_l+0x28a>
 8011826:	2b2d      	cmp	r3, #45	; 0x2d
 8011828:	d07b      	beq.n	8011922 <_strtod_l+0x29a>
 801182a:	f04f 0c00 	mov.w	ip, #0
 801182e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8011832:	2909      	cmp	r1, #9
 8011834:	f240 8082 	bls.w	801193c <_strtod_l+0x2b4>
 8011838:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801183c:	2600      	movs	r6, #0
 801183e:	e09d      	b.n	801197c <_strtod_l+0x2f4>
 8011840:	2300      	movs	r3, #0
 8011842:	e7c4      	b.n	80117ce <_strtod_l+0x146>
 8011844:	2f08      	cmp	r7, #8
 8011846:	bfd8      	it	le
 8011848:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801184a:	f100 0001 	add.w	r0, r0, #1
 801184e:	bfda      	itte	le
 8011850:	fb02 3301 	mlale	r3, r2, r1, r3
 8011854:	9309      	strle	r3, [sp, #36]	; 0x24
 8011856:	fb02 3909 	mlagt	r9, r2, r9, r3
 801185a:	3701      	adds	r7, #1
 801185c:	901d      	str	r0, [sp, #116]	; 0x74
 801185e:	e7bf      	b.n	80117e0 <_strtod_l+0x158>
 8011860:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011862:	195a      	adds	r2, r3, r5
 8011864:	921d      	str	r2, [sp, #116]	; 0x74
 8011866:	5d5b      	ldrb	r3, [r3, r5]
 8011868:	2f00      	cmp	r7, #0
 801186a:	d037      	beq.n	80118dc <_strtod_l+0x254>
 801186c:	9007      	str	r0, [sp, #28]
 801186e:	463d      	mov	r5, r7
 8011870:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8011874:	2a09      	cmp	r2, #9
 8011876:	d912      	bls.n	801189e <_strtod_l+0x216>
 8011878:	2201      	movs	r2, #1
 801187a:	e7c2      	b.n	8011802 <_strtod_l+0x17a>
 801187c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801187e:	1c5a      	adds	r2, r3, #1
 8011880:	921d      	str	r2, [sp, #116]	; 0x74
 8011882:	785b      	ldrb	r3, [r3, #1]
 8011884:	3001      	adds	r0, #1
 8011886:	2b30      	cmp	r3, #48	; 0x30
 8011888:	d0f8      	beq.n	801187c <_strtod_l+0x1f4>
 801188a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801188e:	2a08      	cmp	r2, #8
 8011890:	f200 84db 	bhi.w	801224a <_strtod_l+0xbc2>
 8011894:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8011896:	9007      	str	r0, [sp, #28]
 8011898:	2000      	movs	r0, #0
 801189a:	920a      	str	r2, [sp, #40]	; 0x28
 801189c:	4605      	mov	r5, r0
 801189e:	3b30      	subs	r3, #48	; 0x30
 80118a0:	f100 0201 	add.w	r2, r0, #1
 80118a4:	d014      	beq.n	80118d0 <_strtod_l+0x248>
 80118a6:	9907      	ldr	r1, [sp, #28]
 80118a8:	4411      	add	r1, r2
 80118aa:	9107      	str	r1, [sp, #28]
 80118ac:	462a      	mov	r2, r5
 80118ae:	eb00 0e05 	add.w	lr, r0, r5
 80118b2:	210a      	movs	r1, #10
 80118b4:	4572      	cmp	r2, lr
 80118b6:	d113      	bne.n	80118e0 <_strtod_l+0x258>
 80118b8:	182a      	adds	r2, r5, r0
 80118ba:	2a08      	cmp	r2, #8
 80118bc:	f105 0501 	add.w	r5, r5, #1
 80118c0:	4405      	add	r5, r0
 80118c2:	dc1c      	bgt.n	80118fe <_strtod_l+0x276>
 80118c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80118c6:	220a      	movs	r2, #10
 80118c8:	fb02 3301 	mla	r3, r2, r1, r3
 80118cc:	9309      	str	r3, [sp, #36]	; 0x24
 80118ce:	2200      	movs	r2, #0
 80118d0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80118d2:	1c59      	adds	r1, r3, #1
 80118d4:	911d      	str	r1, [sp, #116]	; 0x74
 80118d6:	785b      	ldrb	r3, [r3, #1]
 80118d8:	4610      	mov	r0, r2
 80118da:	e7c9      	b.n	8011870 <_strtod_l+0x1e8>
 80118dc:	4638      	mov	r0, r7
 80118de:	e7d2      	b.n	8011886 <_strtod_l+0x1fe>
 80118e0:	2a08      	cmp	r2, #8
 80118e2:	dc04      	bgt.n	80118ee <_strtod_l+0x266>
 80118e4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80118e6:	434e      	muls	r6, r1
 80118e8:	9609      	str	r6, [sp, #36]	; 0x24
 80118ea:	3201      	adds	r2, #1
 80118ec:	e7e2      	b.n	80118b4 <_strtod_l+0x22c>
 80118ee:	f102 0c01 	add.w	ip, r2, #1
 80118f2:	f1bc 0f10 	cmp.w	ip, #16
 80118f6:	bfd8      	it	le
 80118f8:	fb01 f909 	mulle.w	r9, r1, r9
 80118fc:	e7f5      	b.n	80118ea <_strtod_l+0x262>
 80118fe:	2d10      	cmp	r5, #16
 8011900:	bfdc      	itt	le
 8011902:	220a      	movle	r2, #10
 8011904:	fb02 3909 	mlale	r9, r2, r9, r3
 8011908:	e7e1      	b.n	80118ce <_strtod_l+0x246>
 801190a:	2300      	movs	r3, #0
 801190c:	9307      	str	r3, [sp, #28]
 801190e:	2201      	movs	r2, #1
 8011910:	e77c      	b.n	801180c <_strtod_l+0x184>
 8011912:	f04f 0c00 	mov.w	ip, #0
 8011916:	f108 0302 	add.w	r3, r8, #2
 801191a:	931d      	str	r3, [sp, #116]	; 0x74
 801191c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8011920:	e785      	b.n	801182e <_strtod_l+0x1a6>
 8011922:	f04f 0c01 	mov.w	ip, #1
 8011926:	e7f6      	b.n	8011916 <_strtod_l+0x28e>
 8011928:	08018b98 	.word	0x08018b98
 801192c:	080189e8 	.word	0x080189e8
 8011930:	7ff00000 	.word	0x7ff00000
 8011934:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011936:	1c59      	adds	r1, r3, #1
 8011938:	911d      	str	r1, [sp, #116]	; 0x74
 801193a:	785b      	ldrb	r3, [r3, #1]
 801193c:	2b30      	cmp	r3, #48	; 0x30
 801193e:	d0f9      	beq.n	8011934 <_strtod_l+0x2ac>
 8011940:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8011944:	2908      	cmp	r1, #8
 8011946:	f63f af79 	bhi.w	801183c <_strtod_l+0x1b4>
 801194a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801194e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011950:	9308      	str	r3, [sp, #32]
 8011952:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011954:	1c59      	adds	r1, r3, #1
 8011956:	911d      	str	r1, [sp, #116]	; 0x74
 8011958:	785b      	ldrb	r3, [r3, #1]
 801195a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801195e:	2e09      	cmp	r6, #9
 8011960:	d937      	bls.n	80119d2 <_strtod_l+0x34a>
 8011962:	9e08      	ldr	r6, [sp, #32]
 8011964:	1b89      	subs	r1, r1, r6
 8011966:	2908      	cmp	r1, #8
 8011968:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801196c:	dc02      	bgt.n	8011974 <_strtod_l+0x2ec>
 801196e:	4576      	cmp	r6, lr
 8011970:	bfa8      	it	ge
 8011972:	4676      	movge	r6, lr
 8011974:	f1bc 0f00 	cmp.w	ip, #0
 8011978:	d000      	beq.n	801197c <_strtod_l+0x2f4>
 801197a:	4276      	negs	r6, r6
 801197c:	2d00      	cmp	r5, #0
 801197e:	d14f      	bne.n	8011a20 <_strtod_l+0x398>
 8011980:	9904      	ldr	r1, [sp, #16]
 8011982:	4301      	orrs	r1, r0
 8011984:	f47f aec2 	bne.w	801170c <_strtod_l+0x84>
 8011988:	2a00      	cmp	r2, #0
 801198a:	f47f aedb 	bne.w	8011744 <_strtod_l+0xbc>
 801198e:	2b69      	cmp	r3, #105	; 0x69
 8011990:	d027      	beq.n	80119e2 <_strtod_l+0x35a>
 8011992:	dc24      	bgt.n	80119de <_strtod_l+0x356>
 8011994:	2b49      	cmp	r3, #73	; 0x49
 8011996:	d024      	beq.n	80119e2 <_strtod_l+0x35a>
 8011998:	2b4e      	cmp	r3, #78	; 0x4e
 801199a:	f47f aed3 	bne.w	8011744 <_strtod_l+0xbc>
 801199e:	499e      	ldr	r1, [pc, #632]	; (8011c18 <_strtod_l+0x590>)
 80119a0:	a81d      	add	r0, sp, #116	; 0x74
 80119a2:	f002 f83b 	bl	8013a1c <__match>
 80119a6:	2800      	cmp	r0, #0
 80119a8:	f43f aecc 	beq.w	8011744 <_strtod_l+0xbc>
 80119ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80119ae:	781b      	ldrb	r3, [r3, #0]
 80119b0:	2b28      	cmp	r3, #40	; 0x28
 80119b2:	d12d      	bne.n	8011a10 <_strtod_l+0x388>
 80119b4:	4999      	ldr	r1, [pc, #612]	; (8011c1c <_strtod_l+0x594>)
 80119b6:	aa20      	add	r2, sp, #128	; 0x80
 80119b8:	a81d      	add	r0, sp, #116	; 0x74
 80119ba:	f002 f843 	bl	8013a44 <__hexnan>
 80119be:	2805      	cmp	r0, #5
 80119c0:	d126      	bne.n	8011a10 <_strtod_l+0x388>
 80119c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80119c4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80119c8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80119cc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80119d0:	e69c      	b.n	801170c <_strtod_l+0x84>
 80119d2:	210a      	movs	r1, #10
 80119d4:	fb01 3e0e 	mla	lr, r1, lr, r3
 80119d8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80119dc:	e7b9      	b.n	8011952 <_strtod_l+0x2ca>
 80119de:	2b6e      	cmp	r3, #110	; 0x6e
 80119e0:	e7db      	b.n	801199a <_strtod_l+0x312>
 80119e2:	498f      	ldr	r1, [pc, #572]	; (8011c20 <_strtod_l+0x598>)
 80119e4:	a81d      	add	r0, sp, #116	; 0x74
 80119e6:	f002 f819 	bl	8013a1c <__match>
 80119ea:	2800      	cmp	r0, #0
 80119ec:	f43f aeaa 	beq.w	8011744 <_strtod_l+0xbc>
 80119f0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80119f2:	498c      	ldr	r1, [pc, #560]	; (8011c24 <_strtod_l+0x59c>)
 80119f4:	3b01      	subs	r3, #1
 80119f6:	a81d      	add	r0, sp, #116	; 0x74
 80119f8:	931d      	str	r3, [sp, #116]	; 0x74
 80119fa:	f002 f80f 	bl	8013a1c <__match>
 80119fe:	b910      	cbnz	r0, 8011a06 <_strtod_l+0x37e>
 8011a00:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011a02:	3301      	adds	r3, #1
 8011a04:	931d      	str	r3, [sp, #116]	; 0x74
 8011a06:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8011c34 <_strtod_l+0x5ac>
 8011a0a:	f04f 0a00 	mov.w	sl, #0
 8011a0e:	e67d      	b.n	801170c <_strtod_l+0x84>
 8011a10:	4885      	ldr	r0, [pc, #532]	; (8011c28 <_strtod_l+0x5a0>)
 8011a12:	f003 f8b1 	bl	8014b78 <nan>
 8011a16:	ed8d 0b04 	vstr	d0, [sp, #16]
 8011a1a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8011a1e:	e675      	b.n	801170c <_strtod_l+0x84>
 8011a20:	9b07      	ldr	r3, [sp, #28]
 8011a22:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011a24:	1af3      	subs	r3, r6, r3
 8011a26:	2f00      	cmp	r7, #0
 8011a28:	bf08      	it	eq
 8011a2a:	462f      	moveq	r7, r5
 8011a2c:	2d10      	cmp	r5, #16
 8011a2e:	9308      	str	r3, [sp, #32]
 8011a30:	46a8      	mov	r8, r5
 8011a32:	bfa8      	it	ge
 8011a34:	f04f 0810 	movge.w	r8, #16
 8011a38:	f7ee fd7c 	bl	8000534 <__aeabi_ui2d>
 8011a3c:	2d09      	cmp	r5, #9
 8011a3e:	4682      	mov	sl, r0
 8011a40:	468b      	mov	fp, r1
 8011a42:	dd13      	ble.n	8011a6c <_strtod_l+0x3e4>
 8011a44:	4b79      	ldr	r3, [pc, #484]	; (8011c2c <_strtod_l+0x5a4>)
 8011a46:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8011a4a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8011a4e:	f7ee fdeb 	bl	8000628 <__aeabi_dmul>
 8011a52:	4682      	mov	sl, r0
 8011a54:	4648      	mov	r0, r9
 8011a56:	468b      	mov	fp, r1
 8011a58:	f7ee fd6c 	bl	8000534 <__aeabi_ui2d>
 8011a5c:	4602      	mov	r2, r0
 8011a5e:	460b      	mov	r3, r1
 8011a60:	4650      	mov	r0, sl
 8011a62:	4659      	mov	r1, fp
 8011a64:	f7ee fc2a 	bl	80002bc <__adddf3>
 8011a68:	4682      	mov	sl, r0
 8011a6a:	468b      	mov	fp, r1
 8011a6c:	2d0f      	cmp	r5, #15
 8011a6e:	dc38      	bgt.n	8011ae2 <_strtod_l+0x45a>
 8011a70:	9b08      	ldr	r3, [sp, #32]
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	f43f ae4a 	beq.w	801170c <_strtod_l+0x84>
 8011a78:	dd24      	ble.n	8011ac4 <_strtod_l+0x43c>
 8011a7a:	2b16      	cmp	r3, #22
 8011a7c:	dc0b      	bgt.n	8011a96 <_strtod_l+0x40e>
 8011a7e:	4d6b      	ldr	r5, [pc, #428]	; (8011c2c <_strtod_l+0x5a4>)
 8011a80:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8011a84:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011a88:	4652      	mov	r2, sl
 8011a8a:	465b      	mov	r3, fp
 8011a8c:	f7ee fdcc 	bl	8000628 <__aeabi_dmul>
 8011a90:	4682      	mov	sl, r0
 8011a92:	468b      	mov	fp, r1
 8011a94:	e63a      	b.n	801170c <_strtod_l+0x84>
 8011a96:	9a08      	ldr	r2, [sp, #32]
 8011a98:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8011a9c:	4293      	cmp	r3, r2
 8011a9e:	db20      	blt.n	8011ae2 <_strtod_l+0x45a>
 8011aa0:	4c62      	ldr	r4, [pc, #392]	; (8011c2c <_strtod_l+0x5a4>)
 8011aa2:	f1c5 050f 	rsb	r5, r5, #15
 8011aa6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8011aaa:	4652      	mov	r2, sl
 8011aac:	465b      	mov	r3, fp
 8011aae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011ab2:	f7ee fdb9 	bl	8000628 <__aeabi_dmul>
 8011ab6:	9b08      	ldr	r3, [sp, #32]
 8011ab8:	1b5d      	subs	r5, r3, r5
 8011aba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8011abe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011ac2:	e7e3      	b.n	8011a8c <_strtod_l+0x404>
 8011ac4:	9b08      	ldr	r3, [sp, #32]
 8011ac6:	3316      	adds	r3, #22
 8011ac8:	db0b      	blt.n	8011ae2 <_strtod_l+0x45a>
 8011aca:	9b07      	ldr	r3, [sp, #28]
 8011acc:	4a57      	ldr	r2, [pc, #348]	; (8011c2c <_strtod_l+0x5a4>)
 8011ace:	1b9e      	subs	r6, r3, r6
 8011ad0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8011ad4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011ad8:	4650      	mov	r0, sl
 8011ada:	4659      	mov	r1, fp
 8011adc:	f7ee fece 	bl	800087c <__aeabi_ddiv>
 8011ae0:	e7d6      	b.n	8011a90 <_strtod_l+0x408>
 8011ae2:	9b08      	ldr	r3, [sp, #32]
 8011ae4:	eba5 0808 	sub.w	r8, r5, r8
 8011ae8:	4498      	add	r8, r3
 8011aea:	f1b8 0f00 	cmp.w	r8, #0
 8011aee:	dd71      	ble.n	8011bd4 <_strtod_l+0x54c>
 8011af0:	f018 030f 	ands.w	r3, r8, #15
 8011af4:	d00a      	beq.n	8011b0c <_strtod_l+0x484>
 8011af6:	494d      	ldr	r1, [pc, #308]	; (8011c2c <_strtod_l+0x5a4>)
 8011af8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011afc:	4652      	mov	r2, sl
 8011afe:	465b      	mov	r3, fp
 8011b00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011b04:	f7ee fd90 	bl	8000628 <__aeabi_dmul>
 8011b08:	4682      	mov	sl, r0
 8011b0a:	468b      	mov	fp, r1
 8011b0c:	f038 080f 	bics.w	r8, r8, #15
 8011b10:	d04d      	beq.n	8011bae <_strtod_l+0x526>
 8011b12:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8011b16:	dd22      	ble.n	8011b5e <_strtod_l+0x4d6>
 8011b18:	2500      	movs	r5, #0
 8011b1a:	462e      	mov	r6, r5
 8011b1c:	9509      	str	r5, [sp, #36]	; 0x24
 8011b1e:	9507      	str	r5, [sp, #28]
 8011b20:	2322      	movs	r3, #34	; 0x22
 8011b22:	f8df b110 	ldr.w	fp, [pc, #272]	; 8011c34 <_strtod_l+0x5ac>
 8011b26:	6023      	str	r3, [r4, #0]
 8011b28:	f04f 0a00 	mov.w	sl, #0
 8011b2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	f43f adec 	beq.w	801170c <_strtod_l+0x84>
 8011b34:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011b36:	4620      	mov	r0, r4
 8011b38:	f002 f8dc 	bl	8013cf4 <_Bfree>
 8011b3c:	9907      	ldr	r1, [sp, #28]
 8011b3e:	4620      	mov	r0, r4
 8011b40:	f002 f8d8 	bl	8013cf4 <_Bfree>
 8011b44:	4631      	mov	r1, r6
 8011b46:	4620      	mov	r0, r4
 8011b48:	f002 f8d4 	bl	8013cf4 <_Bfree>
 8011b4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011b4e:	4620      	mov	r0, r4
 8011b50:	f002 f8d0 	bl	8013cf4 <_Bfree>
 8011b54:	4629      	mov	r1, r5
 8011b56:	4620      	mov	r0, r4
 8011b58:	f002 f8cc 	bl	8013cf4 <_Bfree>
 8011b5c:	e5d6      	b.n	801170c <_strtod_l+0x84>
 8011b5e:	2300      	movs	r3, #0
 8011b60:	ea4f 1828 	mov.w	r8, r8, asr #4
 8011b64:	4650      	mov	r0, sl
 8011b66:	4659      	mov	r1, fp
 8011b68:	4699      	mov	r9, r3
 8011b6a:	f1b8 0f01 	cmp.w	r8, #1
 8011b6e:	dc21      	bgt.n	8011bb4 <_strtod_l+0x52c>
 8011b70:	b10b      	cbz	r3, 8011b76 <_strtod_l+0x4ee>
 8011b72:	4682      	mov	sl, r0
 8011b74:	468b      	mov	fp, r1
 8011b76:	4b2e      	ldr	r3, [pc, #184]	; (8011c30 <_strtod_l+0x5a8>)
 8011b78:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8011b7c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8011b80:	4652      	mov	r2, sl
 8011b82:	465b      	mov	r3, fp
 8011b84:	e9d9 0100 	ldrd	r0, r1, [r9]
 8011b88:	f7ee fd4e 	bl	8000628 <__aeabi_dmul>
 8011b8c:	4b29      	ldr	r3, [pc, #164]	; (8011c34 <_strtod_l+0x5ac>)
 8011b8e:	460a      	mov	r2, r1
 8011b90:	400b      	ands	r3, r1
 8011b92:	4929      	ldr	r1, [pc, #164]	; (8011c38 <_strtod_l+0x5b0>)
 8011b94:	428b      	cmp	r3, r1
 8011b96:	4682      	mov	sl, r0
 8011b98:	d8be      	bhi.n	8011b18 <_strtod_l+0x490>
 8011b9a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8011b9e:	428b      	cmp	r3, r1
 8011ba0:	bf86      	itte	hi
 8011ba2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8011c3c <_strtod_l+0x5b4>
 8011ba6:	f04f 3aff 	movhi.w	sl, #4294967295
 8011baa:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8011bae:	2300      	movs	r3, #0
 8011bb0:	9304      	str	r3, [sp, #16]
 8011bb2:	e081      	b.n	8011cb8 <_strtod_l+0x630>
 8011bb4:	f018 0f01 	tst.w	r8, #1
 8011bb8:	d007      	beq.n	8011bca <_strtod_l+0x542>
 8011bba:	4b1d      	ldr	r3, [pc, #116]	; (8011c30 <_strtod_l+0x5a8>)
 8011bbc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8011bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bc4:	f7ee fd30 	bl	8000628 <__aeabi_dmul>
 8011bc8:	2301      	movs	r3, #1
 8011bca:	f109 0901 	add.w	r9, r9, #1
 8011bce:	ea4f 0868 	mov.w	r8, r8, asr #1
 8011bd2:	e7ca      	b.n	8011b6a <_strtod_l+0x4e2>
 8011bd4:	d0eb      	beq.n	8011bae <_strtod_l+0x526>
 8011bd6:	f1c8 0800 	rsb	r8, r8, #0
 8011bda:	f018 020f 	ands.w	r2, r8, #15
 8011bde:	d00a      	beq.n	8011bf6 <_strtod_l+0x56e>
 8011be0:	4b12      	ldr	r3, [pc, #72]	; (8011c2c <_strtod_l+0x5a4>)
 8011be2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011be6:	4650      	mov	r0, sl
 8011be8:	4659      	mov	r1, fp
 8011bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bee:	f7ee fe45 	bl	800087c <__aeabi_ddiv>
 8011bf2:	4682      	mov	sl, r0
 8011bf4:	468b      	mov	fp, r1
 8011bf6:	ea5f 1828 	movs.w	r8, r8, asr #4
 8011bfa:	d0d8      	beq.n	8011bae <_strtod_l+0x526>
 8011bfc:	f1b8 0f1f 	cmp.w	r8, #31
 8011c00:	dd1e      	ble.n	8011c40 <_strtod_l+0x5b8>
 8011c02:	2500      	movs	r5, #0
 8011c04:	462e      	mov	r6, r5
 8011c06:	9509      	str	r5, [sp, #36]	; 0x24
 8011c08:	9507      	str	r5, [sp, #28]
 8011c0a:	2322      	movs	r3, #34	; 0x22
 8011c0c:	f04f 0a00 	mov.w	sl, #0
 8011c10:	f04f 0b00 	mov.w	fp, #0
 8011c14:	6023      	str	r3, [r4, #0]
 8011c16:	e789      	b.n	8011b2c <_strtod_l+0x4a4>
 8011c18:	080189c1 	.word	0x080189c1
 8011c1c:	080189fc 	.word	0x080189fc
 8011c20:	080189b9 	.word	0x080189b9
 8011c24:	08018ab3 	.word	0x08018ab3
 8011c28:	08018aaf 	.word	0x08018aaf
 8011c2c:	08018c98 	.word	0x08018c98
 8011c30:	08018c70 	.word	0x08018c70
 8011c34:	7ff00000 	.word	0x7ff00000
 8011c38:	7ca00000 	.word	0x7ca00000
 8011c3c:	7fefffff 	.word	0x7fefffff
 8011c40:	f018 0310 	ands.w	r3, r8, #16
 8011c44:	bf18      	it	ne
 8011c46:	236a      	movne	r3, #106	; 0x6a
 8011c48:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8012000 <_strtod_l+0x978>
 8011c4c:	9304      	str	r3, [sp, #16]
 8011c4e:	4650      	mov	r0, sl
 8011c50:	4659      	mov	r1, fp
 8011c52:	2300      	movs	r3, #0
 8011c54:	f018 0f01 	tst.w	r8, #1
 8011c58:	d004      	beq.n	8011c64 <_strtod_l+0x5dc>
 8011c5a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8011c5e:	f7ee fce3 	bl	8000628 <__aeabi_dmul>
 8011c62:	2301      	movs	r3, #1
 8011c64:	ea5f 0868 	movs.w	r8, r8, asr #1
 8011c68:	f109 0908 	add.w	r9, r9, #8
 8011c6c:	d1f2      	bne.n	8011c54 <_strtod_l+0x5cc>
 8011c6e:	b10b      	cbz	r3, 8011c74 <_strtod_l+0x5ec>
 8011c70:	4682      	mov	sl, r0
 8011c72:	468b      	mov	fp, r1
 8011c74:	9b04      	ldr	r3, [sp, #16]
 8011c76:	b1bb      	cbz	r3, 8011ca8 <_strtod_l+0x620>
 8011c78:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8011c7c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	4659      	mov	r1, fp
 8011c84:	dd10      	ble.n	8011ca8 <_strtod_l+0x620>
 8011c86:	2b1f      	cmp	r3, #31
 8011c88:	f340 8128 	ble.w	8011edc <_strtod_l+0x854>
 8011c8c:	2b34      	cmp	r3, #52	; 0x34
 8011c8e:	bfde      	ittt	le
 8011c90:	3b20      	suble	r3, #32
 8011c92:	f04f 32ff 	movle.w	r2, #4294967295
 8011c96:	fa02 f303 	lslle.w	r3, r2, r3
 8011c9a:	f04f 0a00 	mov.w	sl, #0
 8011c9e:	bfcc      	ite	gt
 8011ca0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8011ca4:	ea03 0b01 	andle.w	fp, r3, r1
 8011ca8:	2200      	movs	r2, #0
 8011caa:	2300      	movs	r3, #0
 8011cac:	4650      	mov	r0, sl
 8011cae:	4659      	mov	r1, fp
 8011cb0:	f7ee ff22 	bl	8000af8 <__aeabi_dcmpeq>
 8011cb4:	2800      	cmp	r0, #0
 8011cb6:	d1a4      	bne.n	8011c02 <_strtod_l+0x57a>
 8011cb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011cba:	9300      	str	r3, [sp, #0]
 8011cbc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011cbe:	462b      	mov	r3, r5
 8011cc0:	463a      	mov	r2, r7
 8011cc2:	4620      	mov	r0, r4
 8011cc4:	f002 f882 	bl	8013dcc <__s2b>
 8011cc8:	9009      	str	r0, [sp, #36]	; 0x24
 8011cca:	2800      	cmp	r0, #0
 8011ccc:	f43f af24 	beq.w	8011b18 <_strtod_l+0x490>
 8011cd0:	9b07      	ldr	r3, [sp, #28]
 8011cd2:	1b9e      	subs	r6, r3, r6
 8011cd4:	9b08      	ldr	r3, [sp, #32]
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	bfb4      	ite	lt
 8011cda:	4633      	movlt	r3, r6
 8011cdc:	2300      	movge	r3, #0
 8011cde:	9310      	str	r3, [sp, #64]	; 0x40
 8011ce0:	9b08      	ldr	r3, [sp, #32]
 8011ce2:	2500      	movs	r5, #0
 8011ce4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011ce8:	9318      	str	r3, [sp, #96]	; 0x60
 8011cea:	462e      	mov	r6, r5
 8011cec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011cee:	4620      	mov	r0, r4
 8011cf0:	6859      	ldr	r1, [r3, #4]
 8011cf2:	f001 ffbf 	bl	8013c74 <_Balloc>
 8011cf6:	9007      	str	r0, [sp, #28]
 8011cf8:	2800      	cmp	r0, #0
 8011cfa:	f43f af11 	beq.w	8011b20 <_strtod_l+0x498>
 8011cfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d00:	691a      	ldr	r2, [r3, #16]
 8011d02:	3202      	adds	r2, #2
 8011d04:	f103 010c 	add.w	r1, r3, #12
 8011d08:	0092      	lsls	r2, r2, #2
 8011d0a:	300c      	adds	r0, #12
 8011d0c:	f001 ff97 	bl	8013c3e <memcpy>
 8011d10:	ec4b ab10 	vmov	d0, sl, fp
 8011d14:	aa20      	add	r2, sp, #128	; 0x80
 8011d16:	a91f      	add	r1, sp, #124	; 0x7c
 8011d18:	4620      	mov	r0, r4
 8011d1a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8011d1e:	f002 fb91 	bl	8014444 <__d2b>
 8011d22:	901e      	str	r0, [sp, #120]	; 0x78
 8011d24:	2800      	cmp	r0, #0
 8011d26:	f43f aefb 	beq.w	8011b20 <_strtod_l+0x498>
 8011d2a:	2101      	movs	r1, #1
 8011d2c:	4620      	mov	r0, r4
 8011d2e:	f002 f8e7 	bl	8013f00 <__i2b>
 8011d32:	4606      	mov	r6, r0
 8011d34:	2800      	cmp	r0, #0
 8011d36:	f43f aef3 	beq.w	8011b20 <_strtod_l+0x498>
 8011d3a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011d3c:	9904      	ldr	r1, [sp, #16]
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	bfab      	itete	ge
 8011d42:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8011d44:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8011d46:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8011d48:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8011d4c:	bfac      	ite	ge
 8011d4e:	eb03 0902 	addge.w	r9, r3, r2
 8011d52:	1ad7      	sublt	r7, r2, r3
 8011d54:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011d56:	eba3 0801 	sub.w	r8, r3, r1
 8011d5a:	4490      	add	r8, r2
 8011d5c:	4ba3      	ldr	r3, [pc, #652]	; (8011fec <_strtod_l+0x964>)
 8011d5e:	f108 38ff 	add.w	r8, r8, #4294967295
 8011d62:	4598      	cmp	r8, r3
 8011d64:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8011d68:	f280 80cc 	bge.w	8011f04 <_strtod_l+0x87c>
 8011d6c:	eba3 0308 	sub.w	r3, r3, r8
 8011d70:	2b1f      	cmp	r3, #31
 8011d72:	eba2 0203 	sub.w	r2, r2, r3
 8011d76:	f04f 0101 	mov.w	r1, #1
 8011d7a:	f300 80b6 	bgt.w	8011eea <_strtod_l+0x862>
 8011d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8011d82:	9311      	str	r3, [sp, #68]	; 0x44
 8011d84:	2300      	movs	r3, #0
 8011d86:	930c      	str	r3, [sp, #48]	; 0x30
 8011d88:	eb09 0802 	add.w	r8, r9, r2
 8011d8c:	9b04      	ldr	r3, [sp, #16]
 8011d8e:	45c1      	cmp	r9, r8
 8011d90:	4417      	add	r7, r2
 8011d92:	441f      	add	r7, r3
 8011d94:	464b      	mov	r3, r9
 8011d96:	bfa8      	it	ge
 8011d98:	4643      	movge	r3, r8
 8011d9a:	42bb      	cmp	r3, r7
 8011d9c:	bfa8      	it	ge
 8011d9e:	463b      	movge	r3, r7
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	bfc2      	ittt	gt
 8011da4:	eba8 0803 	subgt.w	r8, r8, r3
 8011da8:	1aff      	subgt	r7, r7, r3
 8011daa:	eba9 0903 	subgt.w	r9, r9, r3
 8011dae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	dd17      	ble.n	8011de4 <_strtod_l+0x75c>
 8011db4:	4631      	mov	r1, r6
 8011db6:	461a      	mov	r2, r3
 8011db8:	4620      	mov	r0, r4
 8011dba:	f002 f95d 	bl	8014078 <__pow5mult>
 8011dbe:	4606      	mov	r6, r0
 8011dc0:	2800      	cmp	r0, #0
 8011dc2:	f43f aead 	beq.w	8011b20 <_strtod_l+0x498>
 8011dc6:	4601      	mov	r1, r0
 8011dc8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8011dca:	4620      	mov	r0, r4
 8011dcc:	f002 f8ae 	bl	8013f2c <__multiply>
 8011dd0:	900f      	str	r0, [sp, #60]	; 0x3c
 8011dd2:	2800      	cmp	r0, #0
 8011dd4:	f43f aea4 	beq.w	8011b20 <_strtod_l+0x498>
 8011dd8:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011dda:	4620      	mov	r0, r4
 8011ddc:	f001 ff8a 	bl	8013cf4 <_Bfree>
 8011de0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011de2:	931e      	str	r3, [sp, #120]	; 0x78
 8011de4:	f1b8 0f00 	cmp.w	r8, #0
 8011de8:	f300 8091 	bgt.w	8011f0e <_strtod_l+0x886>
 8011dec:	9b08      	ldr	r3, [sp, #32]
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	dd08      	ble.n	8011e04 <_strtod_l+0x77c>
 8011df2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011df4:	9907      	ldr	r1, [sp, #28]
 8011df6:	4620      	mov	r0, r4
 8011df8:	f002 f93e 	bl	8014078 <__pow5mult>
 8011dfc:	9007      	str	r0, [sp, #28]
 8011dfe:	2800      	cmp	r0, #0
 8011e00:	f43f ae8e 	beq.w	8011b20 <_strtod_l+0x498>
 8011e04:	2f00      	cmp	r7, #0
 8011e06:	dd08      	ble.n	8011e1a <_strtod_l+0x792>
 8011e08:	9907      	ldr	r1, [sp, #28]
 8011e0a:	463a      	mov	r2, r7
 8011e0c:	4620      	mov	r0, r4
 8011e0e:	f002 f98d 	bl	801412c <__lshift>
 8011e12:	9007      	str	r0, [sp, #28]
 8011e14:	2800      	cmp	r0, #0
 8011e16:	f43f ae83 	beq.w	8011b20 <_strtod_l+0x498>
 8011e1a:	f1b9 0f00 	cmp.w	r9, #0
 8011e1e:	dd08      	ble.n	8011e32 <_strtod_l+0x7aa>
 8011e20:	4631      	mov	r1, r6
 8011e22:	464a      	mov	r2, r9
 8011e24:	4620      	mov	r0, r4
 8011e26:	f002 f981 	bl	801412c <__lshift>
 8011e2a:	4606      	mov	r6, r0
 8011e2c:	2800      	cmp	r0, #0
 8011e2e:	f43f ae77 	beq.w	8011b20 <_strtod_l+0x498>
 8011e32:	9a07      	ldr	r2, [sp, #28]
 8011e34:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011e36:	4620      	mov	r0, r4
 8011e38:	f002 fa00 	bl	801423c <__mdiff>
 8011e3c:	4605      	mov	r5, r0
 8011e3e:	2800      	cmp	r0, #0
 8011e40:	f43f ae6e 	beq.w	8011b20 <_strtod_l+0x498>
 8011e44:	68c3      	ldr	r3, [r0, #12]
 8011e46:	930f      	str	r3, [sp, #60]	; 0x3c
 8011e48:	2300      	movs	r3, #0
 8011e4a:	60c3      	str	r3, [r0, #12]
 8011e4c:	4631      	mov	r1, r6
 8011e4e:	f002 f9d9 	bl	8014204 <__mcmp>
 8011e52:	2800      	cmp	r0, #0
 8011e54:	da65      	bge.n	8011f22 <_strtod_l+0x89a>
 8011e56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011e58:	ea53 030a 	orrs.w	r3, r3, sl
 8011e5c:	f040 8087 	bne.w	8011f6e <_strtod_l+0x8e6>
 8011e60:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	f040 8082 	bne.w	8011f6e <_strtod_l+0x8e6>
 8011e6a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011e6e:	0d1b      	lsrs	r3, r3, #20
 8011e70:	051b      	lsls	r3, r3, #20
 8011e72:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8011e76:	d97a      	bls.n	8011f6e <_strtod_l+0x8e6>
 8011e78:	696b      	ldr	r3, [r5, #20]
 8011e7a:	b913      	cbnz	r3, 8011e82 <_strtod_l+0x7fa>
 8011e7c:	692b      	ldr	r3, [r5, #16]
 8011e7e:	2b01      	cmp	r3, #1
 8011e80:	dd75      	ble.n	8011f6e <_strtod_l+0x8e6>
 8011e82:	4629      	mov	r1, r5
 8011e84:	2201      	movs	r2, #1
 8011e86:	4620      	mov	r0, r4
 8011e88:	f002 f950 	bl	801412c <__lshift>
 8011e8c:	4631      	mov	r1, r6
 8011e8e:	4605      	mov	r5, r0
 8011e90:	f002 f9b8 	bl	8014204 <__mcmp>
 8011e94:	2800      	cmp	r0, #0
 8011e96:	dd6a      	ble.n	8011f6e <_strtod_l+0x8e6>
 8011e98:	9904      	ldr	r1, [sp, #16]
 8011e9a:	4a55      	ldr	r2, [pc, #340]	; (8011ff0 <_strtod_l+0x968>)
 8011e9c:	465b      	mov	r3, fp
 8011e9e:	2900      	cmp	r1, #0
 8011ea0:	f000 8085 	beq.w	8011fae <_strtod_l+0x926>
 8011ea4:	ea02 010b 	and.w	r1, r2, fp
 8011ea8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8011eac:	dc7f      	bgt.n	8011fae <_strtod_l+0x926>
 8011eae:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8011eb2:	f77f aeaa 	ble.w	8011c0a <_strtod_l+0x582>
 8011eb6:	4a4f      	ldr	r2, [pc, #316]	; (8011ff4 <_strtod_l+0x96c>)
 8011eb8:	2300      	movs	r3, #0
 8011eba:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8011ebe:	4650      	mov	r0, sl
 8011ec0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8011ec4:	4659      	mov	r1, fp
 8011ec6:	f7ee fbaf 	bl	8000628 <__aeabi_dmul>
 8011eca:	460b      	mov	r3, r1
 8011ecc:	4303      	orrs	r3, r0
 8011ece:	bf08      	it	eq
 8011ed0:	2322      	moveq	r3, #34	; 0x22
 8011ed2:	4682      	mov	sl, r0
 8011ed4:	468b      	mov	fp, r1
 8011ed6:	bf08      	it	eq
 8011ed8:	6023      	streq	r3, [r4, #0]
 8011eda:	e62b      	b.n	8011b34 <_strtod_l+0x4ac>
 8011edc:	f04f 32ff 	mov.w	r2, #4294967295
 8011ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8011ee4:	ea03 0a0a 	and.w	sl, r3, sl
 8011ee8:	e6de      	b.n	8011ca8 <_strtod_l+0x620>
 8011eea:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8011eee:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8011ef2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8011ef6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8011efa:	fa01 f308 	lsl.w	r3, r1, r8
 8011efe:	930c      	str	r3, [sp, #48]	; 0x30
 8011f00:	9111      	str	r1, [sp, #68]	; 0x44
 8011f02:	e741      	b.n	8011d88 <_strtod_l+0x700>
 8011f04:	2300      	movs	r3, #0
 8011f06:	930c      	str	r3, [sp, #48]	; 0x30
 8011f08:	2301      	movs	r3, #1
 8011f0a:	9311      	str	r3, [sp, #68]	; 0x44
 8011f0c:	e73c      	b.n	8011d88 <_strtod_l+0x700>
 8011f0e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011f10:	4642      	mov	r2, r8
 8011f12:	4620      	mov	r0, r4
 8011f14:	f002 f90a 	bl	801412c <__lshift>
 8011f18:	901e      	str	r0, [sp, #120]	; 0x78
 8011f1a:	2800      	cmp	r0, #0
 8011f1c:	f47f af66 	bne.w	8011dec <_strtod_l+0x764>
 8011f20:	e5fe      	b.n	8011b20 <_strtod_l+0x498>
 8011f22:	465f      	mov	r7, fp
 8011f24:	d16e      	bne.n	8012004 <_strtod_l+0x97c>
 8011f26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011f28:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011f2c:	b342      	cbz	r2, 8011f80 <_strtod_l+0x8f8>
 8011f2e:	4a32      	ldr	r2, [pc, #200]	; (8011ff8 <_strtod_l+0x970>)
 8011f30:	4293      	cmp	r3, r2
 8011f32:	d128      	bne.n	8011f86 <_strtod_l+0x8fe>
 8011f34:	9b04      	ldr	r3, [sp, #16]
 8011f36:	4650      	mov	r0, sl
 8011f38:	b1eb      	cbz	r3, 8011f76 <_strtod_l+0x8ee>
 8011f3a:	4a2d      	ldr	r2, [pc, #180]	; (8011ff0 <_strtod_l+0x968>)
 8011f3c:	403a      	ands	r2, r7
 8011f3e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8011f42:	f04f 31ff 	mov.w	r1, #4294967295
 8011f46:	d819      	bhi.n	8011f7c <_strtod_l+0x8f4>
 8011f48:	0d12      	lsrs	r2, r2, #20
 8011f4a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8011f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8011f52:	4298      	cmp	r0, r3
 8011f54:	d117      	bne.n	8011f86 <_strtod_l+0x8fe>
 8011f56:	4b29      	ldr	r3, [pc, #164]	; (8011ffc <_strtod_l+0x974>)
 8011f58:	429f      	cmp	r7, r3
 8011f5a:	d102      	bne.n	8011f62 <_strtod_l+0x8da>
 8011f5c:	3001      	adds	r0, #1
 8011f5e:	f43f addf 	beq.w	8011b20 <_strtod_l+0x498>
 8011f62:	4b23      	ldr	r3, [pc, #140]	; (8011ff0 <_strtod_l+0x968>)
 8011f64:	403b      	ands	r3, r7
 8011f66:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8011f6a:	f04f 0a00 	mov.w	sl, #0
 8011f6e:	9b04      	ldr	r3, [sp, #16]
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d1a0      	bne.n	8011eb6 <_strtod_l+0x82e>
 8011f74:	e5de      	b.n	8011b34 <_strtod_l+0x4ac>
 8011f76:	f04f 33ff 	mov.w	r3, #4294967295
 8011f7a:	e7ea      	b.n	8011f52 <_strtod_l+0x8ca>
 8011f7c:	460b      	mov	r3, r1
 8011f7e:	e7e8      	b.n	8011f52 <_strtod_l+0x8ca>
 8011f80:	ea53 030a 	orrs.w	r3, r3, sl
 8011f84:	d088      	beq.n	8011e98 <_strtod_l+0x810>
 8011f86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011f88:	b1db      	cbz	r3, 8011fc2 <_strtod_l+0x93a>
 8011f8a:	423b      	tst	r3, r7
 8011f8c:	d0ef      	beq.n	8011f6e <_strtod_l+0x8e6>
 8011f8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011f90:	9a04      	ldr	r2, [sp, #16]
 8011f92:	4650      	mov	r0, sl
 8011f94:	4659      	mov	r1, fp
 8011f96:	b1c3      	cbz	r3, 8011fca <_strtod_l+0x942>
 8011f98:	f7ff fb5a 	bl	8011650 <sulp>
 8011f9c:	4602      	mov	r2, r0
 8011f9e:	460b      	mov	r3, r1
 8011fa0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011fa4:	f7ee f98a 	bl	80002bc <__adddf3>
 8011fa8:	4682      	mov	sl, r0
 8011faa:	468b      	mov	fp, r1
 8011fac:	e7df      	b.n	8011f6e <_strtod_l+0x8e6>
 8011fae:	4013      	ands	r3, r2
 8011fb0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011fb4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8011fb8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8011fbc:	f04f 3aff 	mov.w	sl, #4294967295
 8011fc0:	e7d5      	b.n	8011f6e <_strtod_l+0x8e6>
 8011fc2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011fc4:	ea13 0f0a 	tst.w	r3, sl
 8011fc8:	e7e0      	b.n	8011f8c <_strtod_l+0x904>
 8011fca:	f7ff fb41 	bl	8011650 <sulp>
 8011fce:	4602      	mov	r2, r0
 8011fd0:	460b      	mov	r3, r1
 8011fd2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011fd6:	f7ee f96f 	bl	80002b8 <__aeabi_dsub>
 8011fda:	2200      	movs	r2, #0
 8011fdc:	2300      	movs	r3, #0
 8011fde:	4682      	mov	sl, r0
 8011fe0:	468b      	mov	fp, r1
 8011fe2:	f7ee fd89 	bl	8000af8 <__aeabi_dcmpeq>
 8011fe6:	2800      	cmp	r0, #0
 8011fe8:	d0c1      	beq.n	8011f6e <_strtod_l+0x8e6>
 8011fea:	e60e      	b.n	8011c0a <_strtod_l+0x582>
 8011fec:	fffffc02 	.word	0xfffffc02
 8011ff0:	7ff00000 	.word	0x7ff00000
 8011ff4:	39500000 	.word	0x39500000
 8011ff8:	000fffff 	.word	0x000fffff
 8011ffc:	7fefffff 	.word	0x7fefffff
 8012000:	08018a10 	.word	0x08018a10
 8012004:	4631      	mov	r1, r6
 8012006:	4628      	mov	r0, r5
 8012008:	f002 fa78 	bl	80144fc <__ratio>
 801200c:	ec59 8b10 	vmov	r8, r9, d0
 8012010:	ee10 0a10 	vmov	r0, s0
 8012014:	2200      	movs	r2, #0
 8012016:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801201a:	4649      	mov	r1, r9
 801201c:	f7ee fd80 	bl	8000b20 <__aeabi_dcmple>
 8012020:	2800      	cmp	r0, #0
 8012022:	d07c      	beq.n	801211e <_strtod_l+0xa96>
 8012024:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012026:	2b00      	cmp	r3, #0
 8012028:	d04c      	beq.n	80120c4 <_strtod_l+0xa3c>
 801202a:	4b95      	ldr	r3, [pc, #596]	; (8012280 <_strtod_l+0xbf8>)
 801202c:	2200      	movs	r2, #0
 801202e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8012032:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8012280 <_strtod_l+0xbf8>
 8012036:	f04f 0800 	mov.w	r8, #0
 801203a:	4b92      	ldr	r3, [pc, #584]	; (8012284 <_strtod_l+0xbfc>)
 801203c:	403b      	ands	r3, r7
 801203e:	9311      	str	r3, [sp, #68]	; 0x44
 8012040:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012042:	4b91      	ldr	r3, [pc, #580]	; (8012288 <_strtod_l+0xc00>)
 8012044:	429a      	cmp	r2, r3
 8012046:	f040 80b2 	bne.w	80121ae <_strtod_l+0xb26>
 801204a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801204e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012052:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8012056:	ec4b ab10 	vmov	d0, sl, fp
 801205a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801205e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012062:	f002 f973 	bl	801434c <__ulp>
 8012066:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801206a:	ec53 2b10 	vmov	r2, r3, d0
 801206e:	f7ee fadb 	bl	8000628 <__aeabi_dmul>
 8012072:	4652      	mov	r2, sl
 8012074:	465b      	mov	r3, fp
 8012076:	f7ee f921 	bl	80002bc <__adddf3>
 801207a:	460b      	mov	r3, r1
 801207c:	4981      	ldr	r1, [pc, #516]	; (8012284 <_strtod_l+0xbfc>)
 801207e:	4a83      	ldr	r2, [pc, #524]	; (801228c <_strtod_l+0xc04>)
 8012080:	4019      	ands	r1, r3
 8012082:	4291      	cmp	r1, r2
 8012084:	4682      	mov	sl, r0
 8012086:	d95e      	bls.n	8012146 <_strtod_l+0xabe>
 8012088:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801208a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801208e:	4293      	cmp	r3, r2
 8012090:	d103      	bne.n	801209a <_strtod_l+0xa12>
 8012092:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012094:	3301      	adds	r3, #1
 8012096:	f43f ad43 	beq.w	8011b20 <_strtod_l+0x498>
 801209a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8012298 <_strtod_l+0xc10>
 801209e:	f04f 3aff 	mov.w	sl, #4294967295
 80120a2:	991e      	ldr	r1, [sp, #120]	; 0x78
 80120a4:	4620      	mov	r0, r4
 80120a6:	f001 fe25 	bl	8013cf4 <_Bfree>
 80120aa:	9907      	ldr	r1, [sp, #28]
 80120ac:	4620      	mov	r0, r4
 80120ae:	f001 fe21 	bl	8013cf4 <_Bfree>
 80120b2:	4631      	mov	r1, r6
 80120b4:	4620      	mov	r0, r4
 80120b6:	f001 fe1d 	bl	8013cf4 <_Bfree>
 80120ba:	4629      	mov	r1, r5
 80120bc:	4620      	mov	r0, r4
 80120be:	f001 fe19 	bl	8013cf4 <_Bfree>
 80120c2:	e613      	b.n	8011cec <_strtod_l+0x664>
 80120c4:	f1ba 0f00 	cmp.w	sl, #0
 80120c8:	d11b      	bne.n	8012102 <_strtod_l+0xa7a>
 80120ca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80120ce:	b9f3      	cbnz	r3, 801210e <_strtod_l+0xa86>
 80120d0:	4b6b      	ldr	r3, [pc, #428]	; (8012280 <_strtod_l+0xbf8>)
 80120d2:	2200      	movs	r2, #0
 80120d4:	4640      	mov	r0, r8
 80120d6:	4649      	mov	r1, r9
 80120d8:	f7ee fd18 	bl	8000b0c <__aeabi_dcmplt>
 80120dc:	b9d0      	cbnz	r0, 8012114 <_strtod_l+0xa8c>
 80120de:	4640      	mov	r0, r8
 80120e0:	4649      	mov	r1, r9
 80120e2:	4b6b      	ldr	r3, [pc, #428]	; (8012290 <_strtod_l+0xc08>)
 80120e4:	2200      	movs	r2, #0
 80120e6:	f7ee fa9f 	bl	8000628 <__aeabi_dmul>
 80120ea:	4680      	mov	r8, r0
 80120ec:	4689      	mov	r9, r1
 80120ee:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80120f2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80120f6:	931b      	str	r3, [sp, #108]	; 0x6c
 80120f8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80120fc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8012100:	e79b      	b.n	801203a <_strtod_l+0x9b2>
 8012102:	f1ba 0f01 	cmp.w	sl, #1
 8012106:	d102      	bne.n	801210e <_strtod_l+0xa86>
 8012108:	2f00      	cmp	r7, #0
 801210a:	f43f ad7e 	beq.w	8011c0a <_strtod_l+0x582>
 801210e:	4b61      	ldr	r3, [pc, #388]	; (8012294 <_strtod_l+0xc0c>)
 8012110:	2200      	movs	r2, #0
 8012112:	e78c      	b.n	801202e <_strtod_l+0x9a6>
 8012114:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8012290 <_strtod_l+0xc08>
 8012118:	f04f 0800 	mov.w	r8, #0
 801211c:	e7e7      	b.n	80120ee <_strtod_l+0xa66>
 801211e:	4b5c      	ldr	r3, [pc, #368]	; (8012290 <_strtod_l+0xc08>)
 8012120:	4640      	mov	r0, r8
 8012122:	4649      	mov	r1, r9
 8012124:	2200      	movs	r2, #0
 8012126:	f7ee fa7f 	bl	8000628 <__aeabi_dmul>
 801212a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801212c:	4680      	mov	r8, r0
 801212e:	4689      	mov	r9, r1
 8012130:	b933      	cbnz	r3, 8012140 <_strtod_l+0xab8>
 8012132:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012136:	9012      	str	r0, [sp, #72]	; 0x48
 8012138:	9313      	str	r3, [sp, #76]	; 0x4c
 801213a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801213e:	e7dd      	b.n	80120fc <_strtod_l+0xa74>
 8012140:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8012144:	e7f9      	b.n	801213a <_strtod_l+0xab2>
 8012146:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801214a:	9b04      	ldr	r3, [sp, #16]
 801214c:	2b00      	cmp	r3, #0
 801214e:	d1a8      	bne.n	80120a2 <_strtod_l+0xa1a>
 8012150:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012154:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012156:	0d1b      	lsrs	r3, r3, #20
 8012158:	051b      	lsls	r3, r3, #20
 801215a:	429a      	cmp	r2, r3
 801215c:	d1a1      	bne.n	80120a2 <_strtod_l+0xa1a>
 801215e:	4640      	mov	r0, r8
 8012160:	4649      	mov	r1, r9
 8012162:	f7ee fe11 	bl	8000d88 <__aeabi_d2lz>
 8012166:	f7ee fa31 	bl	80005cc <__aeabi_l2d>
 801216a:	4602      	mov	r2, r0
 801216c:	460b      	mov	r3, r1
 801216e:	4640      	mov	r0, r8
 8012170:	4649      	mov	r1, r9
 8012172:	f7ee f8a1 	bl	80002b8 <__aeabi_dsub>
 8012176:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012178:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801217c:	ea43 030a 	orr.w	r3, r3, sl
 8012180:	4313      	orrs	r3, r2
 8012182:	4680      	mov	r8, r0
 8012184:	4689      	mov	r9, r1
 8012186:	d053      	beq.n	8012230 <_strtod_l+0xba8>
 8012188:	a335      	add	r3, pc, #212	; (adr r3, 8012260 <_strtod_l+0xbd8>)
 801218a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801218e:	f7ee fcbd 	bl	8000b0c <__aeabi_dcmplt>
 8012192:	2800      	cmp	r0, #0
 8012194:	f47f acce 	bne.w	8011b34 <_strtod_l+0x4ac>
 8012198:	a333      	add	r3, pc, #204	; (adr r3, 8012268 <_strtod_l+0xbe0>)
 801219a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801219e:	4640      	mov	r0, r8
 80121a0:	4649      	mov	r1, r9
 80121a2:	f7ee fcd1 	bl	8000b48 <__aeabi_dcmpgt>
 80121a6:	2800      	cmp	r0, #0
 80121a8:	f43f af7b 	beq.w	80120a2 <_strtod_l+0xa1a>
 80121ac:	e4c2      	b.n	8011b34 <_strtod_l+0x4ac>
 80121ae:	9b04      	ldr	r3, [sp, #16]
 80121b0:	b333      	cbz	r3, 8012200 <_strtod_l+0xb78>
 80121b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80121b4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80121b8:	d822      	bhi.n	8012200 <_strtod_l+0xb78>
 80121ba:	a32d      	add	r3, pc, #180	; (adr r3, 8012270 <_strtod_l+0xbe8>)
 80121bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121c0:	4640      	mov	r0, r8
 80121c2:	4649      	mov	r1, r9
 80121c4:	f7ee fcac 	bl	8000b20 <__aeabi_dcmple>
 80121c8:	b1a0      	cbz	r0, 80121f4 <_strtod_l+0xb6c>
 80121ca:	4649      	mov	r1, r9
 80121cc:	4640      	mov	r0, r8
 80121ce:	f7ee fd03 	bl	8000bd8 <__aeabi_d2uiz>
 80121d2:	2801      	cmp	r0, #1
 80121d4:	bf38      	it	cc
 80121d6:	2001      	movcc	r0, #1
 80121d8:	f7ee f9ac 	bl	8000534 <__aeabi_ui2d>
 80121dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80121de:	4680      	mov	r8, r0
 80121e0:	4689      	mov	r9, r1
 80121e2:	bb13      	cbnz	r3, 801222a <_strtod_l+0xba2>
 80121e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80121e8:	9014      	str	r0, [sp, #80]	; 0x50
 80121ea:	9315      	str	r3, [sp, #84]	; 0x54
 80121ec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80121f0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80121f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80121f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80121f8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80121fc:	1a9b      	subs	r3, r3, r2
 80121fe:	930d      	str	r3, [sp, #52]	; 0x34
 8012200:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012204:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8012208:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801220c:	f002 f89e 	bl	801434c <__ulp>
 8012210:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012214:	ec53 2b10 	vmov	r2, r3, d0
 8012218:	f7ee fa06 	bl	8000628 <__aeabi_dmul>
 801221c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012220:	f7ee f84c 	bl	80002bc <__adddf3>
 8012224:	4682      	mov	sl, r0
 8012226:	468b      	mov	fp, r1
 8012228:	e78f      	b.n	801214a <_strtod_l+0xac2>
 801222a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801222e:	e7dd      	b.n	80121ec <_strtod_l+0xb64>
 8012230:	a311      	add	r3, pc, #68	; (adr r3, 8012278 <_strtod_l+0xbf0>)
 8012232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012236:	f7ee fc69 	bl	8000b0c <__aeabi_dcmplt>
 801223a:	e7b4      	b.n	80121a6 <_strtod_l+0xb1e>
 801223c:	2300      	movs	r3, #0
 801223e:	930e      	str	r3, [sp, #56]	; 0x38
 8012240:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8012242:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012244:	6013      	str	r3, [r2, #0]
 8012246:	f7ff ba65 	b.w	8011714 <_strtod_l+0x8c>
 801224a:	2b65      	cmp	r3, #101	; 0x65
 801224c:	f43f ab5d 	beq.w	801190a <_strtod_l+0x282>
 8012250:	2b45      	cmp	r3, #69	; 0x45
 8012252:	f43f ab5a 	beq.w	801190a <_strtod_l+0x282>
 8012256:	2201      	movs	r2, #1
 8012258:	f7ff bb92 	b.w	8011980 <_strtod_l+0x2f8>
 801225c:	f3af 8000 	nop.w
 8012260:	94a03595 	.word	0x94a03595
 8012264:	3fdfffff 	.word	0x3fdfffff
 8012268:	35afe535 	.word	0x35afe535
 801226c:	3fe00000 	.word	0x3fe00000
 8012270:	ffc00000 	.word	0xffc00000
 8012274:	41dfffff 	.word	0x41dfffff
 8012278:	94a03595 	.word	0x94a03595
 801227c:	3fcfffff 	.word	0x3fcfffff
 8012280:	3ff00000 	.word	0x3ff00000
 8012284:	7ff00000 	.word	0x7ff00000
 8012288:	7fe00000 	.word	0x7fe00000
 801228c:	7c9fffff 	.word	0x7c9fffff
 8012290:	3fe00000 	.word	0x3fe00000
 8012294:	bff00000 	.word	0xbff00000
 8012298:	7fefffff 	.word	0x7fefffff

0801229c <strtod>:
 801229c:	460a      	mov	r2, r1
 801229e:	4601      	mov	r1, r0
 80122a0:	4802      	ldr	r0, [pc, #8]	; (80122ac <strtod+0x10>)
 80122a2:	4b03      	ldr	r3, [pc, #12]	; (80122b0 <strtod+0x14>)
 80122a4:	6800      	ldr	r0, [r0, #0]
 80122a6:	f7ff b9ef 	b.w	8011688 <_strtod_l>
 80122aa:	bf00      	nop
 80122ac:	20000020 	.word	0x20000020
 80122b0:	200000ec 	.word	0x200000ec

080122b4 <__tzcalc_limits>:
 80122b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122b8:	4680      	mov	r8, r0
 80122ba:	f001 fca1 	bl	8013c00 <__gettzinfo>
 80122be:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80122c2:	4598      	cmp	r8, r3
 80122c4:	f340 8098 	ble.w	80123f8 <__tzcalc_limits+0x144>
 80122c8:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80122cc:	4443      	add	r3, r8
 80122ce:	109b      	asrs	r3, r3, #2
 80122d0:	f240 126d 	movw	r2, #365	; 0x16d
 80122d4:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 80122d8:	fb02 3505 	mla	r5, r2, r5, r3
 80122dc:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80122e0:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 80122e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80122e8:	441d      	add	r5, r3
 80122ea:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80122ee:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80122f2:	fb98 f7f3 	sdiv	r7, r8, r3
 80122f6:	fb03 8717 	mls	r7, r3, r7, r8
 80122fa:	4442      	add	r2, r8
 80122fc:	fab7 fc87 	clz	ip, r7
 8012300:	fbb2 f2f3 	udiv	r2, r2, r3
 8012304:	f008 0303 	and.w	r3, r8, #3
 8012308:	4415      	add	r5, r2
 801230a:	2264      	movs	r2, #100	; 0x64
 801230c:	f8c0 8004 	str.w	r8, [r0, #4]
 8012310:	fb98 f6f2 	sdiv	r6, r8, r2
 8012314:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8012318:	fb02 8616 	mls	r6, r2, r6, r8
 801231c:	4604      	mov	r4, r0
 801231e:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8012322:	9300      	str	r3, [sp, #0]
 8012324:	f04f 0e07 	mov.w	lr, #7
 8012328:	7a22      	ldrb	r2, [r4, #8]
 801232a:	6963      	ldr	r3, [r4, #20]
 801232c:	2a4a      	cmp	r2, #74	; 0x4a
 801232e:	d128      	bne.n	8012382 <__tzcalc_limits+0xce>
 8012330:	9900      	ldr	r1, [sp, #0]
 8012332:	18ea      	adds	r2, r5, r3
 8012334:	b901      	cbnz	r1, 8012338 <__tzcalc_limits+0x84>
 8012336:	b906      	cbnz	r6, 801233a <__tzcalc_limits+0x86>
 8012338:	bb0f      	cbnz	r7, 801237e <__tzcalc_limits+0xca>
 801233a:	2b3b      	cmp	r3, #59	; 0x3b
 801233c:	bfd4      	ite	le
 801233e:	2300      	movle	r3, #0
 8012340:	2301      	movgt	r3, #1
 8012342:	4413      	add	r3, r2
 8012344:	1e5a      	subs	r2, r3, #1
 8012346:	69a3      	ldr	r3, [r4, #24]
 8012348:	492c      	ldr	r1, [pc, #176]	; (80123fc <__tzcalc_limits+0x148>)
 801234a:	fb01 3202 	mla	r2, r1, r2, r3
 801234e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012350:	4413      	add	r3, r2
 8012352:	461a      	mov	r2, r3
 8012354:	17db      	asrs	r3, r3, #31
 8012356:	e9c4 2308 	strd	r2, r3, [r4, #32]
 801235a:	3428      	adds	r4, #40	; 0x28
 801235c:	45a3      	cmp	fp, r4
 801235e:	d1e3      	bne.n	8012328 <__tzcalc_limits+0x74>
 8012360:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 8012364:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 8012368:	4294      	cmp	r4, r2
 801236a:	eb75 0303 	sbcs.w	r3, r5, r3
 801236e:	bfb4      	ite	lt
 8012370:	2301      	movlt	r3, #1
 8012372:	2300      	movge	r3, #0
 8012374:	6003      	str	r3, [r0, #0]
 8012376:	2001      	movs	r0, #1
 8012378:	b003      	add	sp, #12
 801237a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801237e:	2300      	movs	r3, #0
 8012380:	e7df      	b.n	8012342 <__tzcalc_limits+0x8e>
 8012382:	2a44      	cmp	r2, #68	; 0x44
 8012384:	d101      	bne.n	801238a <__tzcalc_limits+0xd6>
 8012386:	18ea      	adds	r2, r5, r3
 8012388:	e7dd      	b.n	8012346 <__tzcalc_limits+0x92>
 801238a:	9a00      	ldr	r2, [sp, #0]
 801238c:	bb72      	cbnz	r2, 80123ec <__tzcalc_limits+0x138>
 801238e:	2e00      	cmp	r6, #0
 8012390:	bf0c      	ite	eq
 8012392:	46e0      	moveq	r8, ip
 8012394:	f04f 0801 	movne.w	r8, #1
 8012398:	4919      	ldr	r1, [pc, #100]	; (8012400 <__tzcalc_limits+0x14c>)
 801239a:	68e2      	ldr	r2, [r4, #12]
 801239c:	9201      	str	r2, [sp, #4]
 801239e:	f04f 0a30 	mov.w	sl, #48	; 0x30
 80123a2:	fb0a 1808 	mla	r8, sl, r8, r1
 80123a6:	462a      	mov	r2, r5
 80123a8:	f04f 0900 	mov.w	r9, #0
 80123ac:	f1a8 0804 	sub.w	r8, r8, #4
 80123b0:	9901      	ldr	r1, [sp, #4]
 80123b2:	f109 0901 	add.w	r9, r9, #1
 80123b6:	4549      	cmp	r1, r9
 80123b8:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 80123bc:	dc18      	bgt.n	80123f0 <__tzcalc_limits+0x13c>
 80123be:	f102 0804 	add.w	r8, r2, #4
 80123c2:	fb98 f9fe 	sdiv	r9, r8, lr
 80123c6:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 80123ca:	eba8 0909 	sub.w	r9, r8, r9
 80123ce:	ebb3 0909 	subs.w	r9, r3, r9
 80123d2:	6923      	ldr	r3, [r4, #16]
 80123d4:	f103 33ff 	add.w	r3, r3, #4294967295
 80123d8:	bf48      	it	mi
 80123da:	f109 0907 	addmi.w	r9, r9, #7
 80123de:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80123e2:	444b      	add	r3, r9
 80123e4:	4553      	cmp	r3, sl
 80123e6:	da05      	bge.n	80123f4 <__tzcalc_limits+0x140>
 80123e8:	441a      	add	r2, r3
 80123ea:	e7ac      	b.n	8012346 <__tzcalc_limits+0x92>
 80123ec:	46e0      	mov	r8, ip
 80123ee:	e7d3      	b.n	8012398 <__tzcalc_limits+0xe4>
 80123f0:	4452      	add	r2, sl
 80123f2:	e7dd      	b.n	80123b0 <__tzcalc_limits+0xfc>
 80123f4:	3b07      	subs	r3, #7
 80123f6:	e7f5      	b.n	80123e4 <__tzcalc_limits+0x130>
 80123f8:	2000      	movs	r0, #0
 80123fa:	e7bd      	b.n	8012378 <__tzcalc_limits+0xc4>
 80123fc:	00015180 	.word	0x00015180
 8012400:	08018bac 	.word	0x08018bac

08012404 <__tz_lock>:
 8012404:	4801      	ldr	r0, [pc, #4]	; (801240c <__tz_lock+0x8>)
 8012406:	f001 bc04 	b.w	8013c12 <__retarget_lock_acquire>
 801240a:	bf00      	nop
 801240c:	20009a43 	.word	0x20009a43

08012410 <__tz_unlock>:
 8012410:	4801      	ldr	r0, [pc, #4]	; (8012418 <__tz_unlock+0x8>)
 8012412:	f001 bc00 	b.w	8013c16 <__retarget_lock_release>
 8012416:	bf00      	nop
 8012418:	20009a43 	.word	0x20009a43

0801241c <_tzset_unlocked>:
 801241c:	4b01      	ldr	r3, [pc, #4]	; (8012424 <_tzset_unlocked+0x8>)
 801241e:	6818      	ldr	r0, [r3, #0]
 8012420:	f000 b802 	b.w	8012428 <_tzset_unlocked_r>
 8012424:	20000020 	.word	0x20000020

08012428 <_tzset_unlocked_r>:
 8012428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801242c:	b08d      	sub	sp, #52	; 0x34
 801242e:	4607      	mov	r7, r0
 8012430:	f001 fbe6 	bl	8013c00 <__gettzinfo>
 8012434:	49ae      	ldr	r1, [pc, #696]	; (80126f0 <_tzset_unlocked_r+0x2c8>)
 8012436:	4eaf      	ldr	r6, [pc, #700]	; (80126f4 <_tzset_unlocked_r+0x2cc>)
 8012438:	4605      	mov	r5, r0
 801243a:	4638      	mov	r0, r7
 801243c:	f001 fbd8 	bl	8013bf0 <_getenv_r>
 8012440:	4604      	mov	r4, r0
 8012442:	b970      	cbnz	r0, 8012462 <_tzset_unlocked_r+0x3a>
 8012444:	4bac      	ldr	r3, [pc, #688]	; (80126f8 <_tzset_unlocked_r+0x2d0>)
 8012446:	4aad      	ldr	r2, [pc, #692]	; (80126fc <_tzset_unlocked_r+0x2d4>)
 8012448:	6018      	str	r0, [r3, #0]
 801244a:	4bad      	ldr	r3, [pc, #692]	; (8012700 <_tzset_unlocked_r+0x2d8>)
 801244c:	6018      	str	r0, [r3, #0]
 801244e:	4bad      	ldr	r3, [pc, #692]	; (8012704 <_tzset_unlocked_r+0x2dc>)
 8012450:	6830      	ldr	r0, [r6, #0]
 8012452:	e9c3 2200 	strd	r2, r2, [r3]
 8012456:	f7fe f917 	bl	8010688 <free>
 801245a:	6034      	str	r4, [r6, #0]
 801245c:	b00d      	add	sp, #52	; 0x34
 801245e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012462:	6831      	ldr	r1, [r6, #0]
 8012464:	2900      	cmp	r1, #0
 8012466:	d15f      	bne.n	8012528 <_tzset_unlocked_r+0x100>
 8012468:	6830      	ldr	r0, [r6, #0]
 801246a:	f7fe f90d 	bl	8010688 <free>
 801246e:	4620      	mov	r0, r4
 8012470:	f7ed fec0 	bl	80001f4 <strlen>
 8012474:	1c41      	adds	r1, r0, #1
 8012476:	4638      	mov	r0, r7
 8012478:	f7fe fbe4 	bl	8010c44 <_malloc_r>
 801247c:	6030      	str	r0, [r6, #0]
 801247e:	2800      	cmp	r0, #0
 8012480:	d157      	bne.n	8012532 <_tzset_unlocked_r+0x10a>
 8012482:	7823      	ldrb	r3, [r4, #0]
 8012484:	4aa0      	ldr	r2, [pc, #640]	; (8012708 <_tzset_unlocked_r+0x2e0>)
 8012486:	49a1      	ldr	r1, [pc, #644]	; (801270c <_tzset_unlocked_r+0x2e4>)
 8012488:	2b3a      	cmp	r3, #58	; 0x3a
 801248a:	bf08      	it	eq
 801248c:	3401      	addeq	r4, #1
 801248e:	ae0a      	add	r6, sp, #40	; 0x28
 8012490:	4633      	mov	r3, r6
 8012492:	4620      	mov	r0, r4
 8012494:	f002 fb78 	bl	8014b88 <siscanf>
 8012498:	2800      	cmp	r0, #0
 801249a:	dddf      	ble.n	801245c <_tzset_unlocked_r+0x34>
 801249c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801249e:	18e7      	adds	r7, r4, r3
 80124a0:	5ce3      	ldrb	r3, [r4, r3]
 80124a2:	2b2d      	cmp	r3, #45	; 0x2d
 80124a4:	d149      	bne.n	801253a <_tzset_unlocked_r+0x112>
 80124a6:	3701      	adds	r7, #1
 80124a8:	f04f 34ff 	mov.w	r4, #4294967295
 80124ac:	f10d 0a20 	add.w	sl, sp, #32
 80124b0:	f10d 0b1e 	add.w	fp, sp, #30
 80124b4:	f04f 0800 	mov.w	r8, #0
 80124b8:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 80124bc:	4994      	ldr	r1, [pc, #592]	; (8012710 <_tzset_unlocked_r+0x2e8>)
 80124be:	9603      	str	r6, [sp, #12]
 80124c0:	f8cd b000 	str.w	fp, [sp]
 80124c4:	4633      	mov	r3, r6
 80124c6:	aa07      	add	r2, sp, #28
 80124c8:	4638      	mov	r0, r7
 80124ca:	f8ad 801e 	strh.w	r8, [sp, #30]
 80124ce:	f8ad 8020 	strh.w	r8, [sp, #32]
 80124d2:	f002 fb59 	bl	8014b88 <siscanf>
 80124d6:	4540      	cmp	r0, r8
 80124d8:	ddc0      	ble.n	801245c <_tzset_unlocked_r+0x34>
 80124da:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80124de:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80124e2:	f8df 9238 	ldr.w	r9, [pc, #568]	; 801271c <_tzset_unlocked_r+0x2f4>
 80124e6:	213c      	movs	r1, #60	; 0x3c
 80124e8:	fb01 2203 	mla	r2, r1, r3, r2
 80124ec:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80124f0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80124f4:	fb01 2303 	mla	r3, r1, r3, r2
 80124f8:	435c      	muls	r4, r3
 80124fa:	62ac      	str	r4, [r5, #40]	; 0x28
 80124fc:	4c81      	ldr	r4, [pc, #516]	; (8012704 <_tzset_unlocked_r+0x2dc>)
 80124fe:	4b82      	ldr	r3, [pc, #520]	; (8012708 <_tzset_unlocked_r+0x2e0>)
 8012500:	6023      	str	r3, [r4, #0]
 8012502:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012504:	4981      	ldr	r1, [pc, #516]	; (801270c <_tzset_unlocked_r+0x2e4>)
 8012506:	441f      	add	r7, r3
 8012508:	464a      	mov	r2, r9
 801250a:	4633      	mov	r3, r6
 801250c:	4638      	mov	r0, r7
 801250e:	f002 fb3b 	bl	8014b88 <siscanf>
 8012512:	4540      	cmp	r0, r8
 8012514:	dc16      	bgt.n	8012544 <_tzset_unlocked_r+0x11c>
 8012516:	6823      	ldr	r3, [r4, #0]
 8012518:	6063      	str	r3, [r4, #4]
 801251a:	4b77      	ldr	r3, [pc, #476]	; (80126f8 <_tzset_unlocked_r+0x2d0>)
 801251c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801251e:	601a      	str	r2, [r3, #0]
 8012520:	4b77      	ldr	r3, [pc, #476]	; (8012700 <_tzset_unlocked_r+0x2d8>)
 8012522:	f8c3 8000 	str.w	r8, [r3]
 8012526:	e799      	b.n	801245c <_tzset_unlocked_r+0x34>
 8012528:	f7ed fe5a 	bl	80001e0 <strcmp>
 801252c:	2800      	cmp	r0, #0
 801252e:	d19b      	bne.n	8012468 <_tzset_unlocked_r+0x40>
 8012530:	e794      	b.n	801245c <_tzset_unlocked_r+0x34>
 8012532:	4621      	mov	r1, r4
 8012534:	f002 fb99 	bl	8014c6a <strcpy>
 8012538:	e7a3      	b.n	8012482 <_tzset_unlocked_r+0x5a>
 801253a:	2b2b      	cmp	r3, #43	; 0x2b
 801253c:	bf08      	it	eq
 801253e:	3701      	addeq	r7, #1
 8012540:	2401      	movs	r4, #1
 8012542:	e7b3      	b.n	80124ac <_tzset_unlocked_r+0x84>
 8012544:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012546:	f8c4 9004 	str.w	r9, [r4, #4]
 801254a:	18fc      	adds	r4, r7, r3
 801254c:	5cfb      	ldrb	r3, [r7, r3]
 801254e:	2b2d      	cmp	r3, #45	; 0x2d
 8012550:	f040 808b 	bne.w	801266a <_tzset_unlocked_r+0x242>
 8012554:	3401      	adds	r4, #1
 8012556:	f04f 37ff 	mov.w	r7, #4294967295
 801255a:	2300      	movs	r3, #0
 801255c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8012560:	f8ad 301e 	strh.w	r3, [sp, #30]
 8012564:	f8ad 3020 	strh.w	r3, [sp, #32]
 8012568:	930a      	str	r3, [sp, #40]	; 0x28
 801256a:	e9cd a602 	strd	sl, r6, [sp, #8]
 801256e:	e9cd b600 	strd	fp, r6, [sp]
 8012572:	4967      	ldr	r1, [pc, #412]	; (8012710 <_tzset_unlocked_r+0x2e8>)
 8012574:	4633      	mov	r3, r6
 8012576:	aa07      	add	r2, sp, #28
 8012578:	4620      	mov	r0, r4
 801257a:	f002 fb05 	bl	8014b88 <siscanf>
 801257e:	2800      	cmp	r0, #0
 8012580:	dc78      	bgt.n	8012674 <_tzset_unlocked_r+0x24c>
 8012582:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 8012584:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 8012588:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801258a:	652f      	str	r7, [r5, #80]	; 0x50
 801258c:	441c      	add	r4, r3
 801258e:	462f      	mov	r7, r5
 8012590:	f04f 0900 	mov.w	r9, #0
 8012594:	7823      	ldrb	r3, [r4, #0]
 8012596:	2b2c      	cmp	r3, #44	; 0x2c
 8012598:	bf08      	it	eq
 801259a:	3401      	addeq	r4, #1
 801259c:	f894 8000 	ldrb.w	r8, [r4]
 80125a0:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80125a4:	d178      	bne.n	8012698 <_tzset_unlocked_r+0x270>
 80125a6:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80125aa:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80125ae:	ab09      	add	r3, sp, #36	; 0x24
 80125b0:	9300      	str	r3, [sp, #0]
 80125b2:	4958      	ldr	r1, [pc, #352]	; (8012714 <_tzset_unlocked_r+0x2ec>)
 80125b4:	9603      	str	r6, [sp, #12]
 80125b6:	4633      	mov	r3, r6
 80125b8:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80125bc:	4620      	mov	r0, r4
 80125be:	f002 fae3 	bl	8014b88 <siscanf>
 80125c2:	2803      	cmp	r0, #3
 80125c4:	f47f af4a 	bne.w	801245c <_tzset_unlocked_r+0x34>
 80125c8:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80125cc:	1e4b      	subs	r3, r1, #1
 80125ce:	2b0b      	cmp	r3, #11
 80125d0:	f63f af44 	bhi.w	801245c <_tzset_unlocked_r+0x34>
 80125d4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80125d8:	1e53      	subs	r3, r2, #1
 80125da:	2b04      	cmp	r3, #4
 80125dc:	f63f af3e 	bhi.w	801245c <_tzset_unlocked_r+0x34>
 80125e0:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80125e4:	2b06      	cmp	r3, #6
 80125e6:	f63f af39 	bhi.w	801245c <_tzset_unlocked_r+0x34>
 80125ea:	e9c7 1203 	strd	r1, r2, [r7, #12]
 80125ee:	f887 8008 	strb.w	r8, [r7, #8]
 80125f2:	617b      	str	r3, [r7, #20]
 80125f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80125f6:	eb04 0803 	add.w	r8, r4, r3
 80125fa:	2302      	movs	r3, #2
 80125fc:	f8ad 301c 	strh.w	r3, [sp, #28]
 8012600:	2300      	movs	r3, #0
 8012602:	f8ad 301e 	strh.w	r3, [sp, #30]
 8012606:	f8ad 3020 	strh.w	r3, [sp, #32]
 801260a:	930a      	str	r3, [sp, #40]	; 0x28
 801260c:	f898 3000 	ldrb.w	r3, [r8]
 8012610:	2b2f      	cmp	r3, #47	; 0x2f
 8012612:	d109      	bne.n	8012628 <_tzset_unlocked_r+0x200>
 8012614:	e9cd a602 	strd	sl, r6, [sp, #8]
 8012618:	e9cd b600 	strd	fp, r6, [sp]
 801261c:	493e      	ldr	r1, [pc, #248]	; (8012718 <_tzset_unlocked_r+0x2f0>)
 801261e:	4633      	mov	r3, r6
 8012620:	aa07      	add	r2, sp, #28
 8012622:	4640      	mov	r0, r8
 8012624:	f002 fab0 	bl	8014b88 <siscanf>
 8012628:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801262c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8012630:	213c      	movs	r1, #60	; 0x3c
 8012632:	fb01 2203 	mla	r2, r1, r3, r2
 8012636:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801263a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801263e:	fb01 2303 	mla	r3, r1, r3, r2
 8012642:	61bb      	str	r3, [r7, #24]
 8012644:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8012646:	3728      	adds	r7, #40	; 0x28
 8012648:	4444      	add	r4, r8
 801264a:	f1b9 0f00 	cmp.w	r9, #0
 801264e:	d020      	beq.n	8012692 <_tzset_unlocked_r+0x26a>
 8012650:	6868      	ldr	r0, [r5, #4]
 8012652:	f7ff fe2f 	bl	80122b4 <__tzcalc_limits>
 8012656:	4b28      	ldr	r3, [pc, #160]	; (80126f8 <_tzset_unlocked_r+0x2d0>)
 8012658:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801265a:	601a      	str	r2, [r3, #0]
 801265c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 801265e:	1a9b      	subs	r3, r3, r2
 8012660:	4a27      	ldr	r2, [pc, #156]	; (8012700 <_tzset_unlocked_r+0x2d8>)
 8012662:	bf18      	it	ne
 8012664:	2301      	movne	r3, #1
 8012666:	6013      	str	r3, [r2, #0]
 8012668:	e6f8      	b.n	801245c <_tzset_unlocked_r+0x34>
 801266a:	2b2b      	cmp	r3, #43	; 0x2b
 801266c:	bf08      	it	eq
 801266e:	3401      	addeq	r4, #1
 8012670:	2701      	movs	r7, #1
 8012672:	e772      	b.n	801255a <_tzset_unlocked_r+0x132>
 8012674:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8012678:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801267c:	213c      	movs	r1, #60	; 0x3c
 801267e:	fb01 2203 	mla	r2, r1, r3, r2
 8012682:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8012686:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801268a:	fb01 2303 	mla	r3, r1, r3, r2
 801268e:	435f      	muls	r7, r3
 8012690:	e77a      	b.n	8012588 <_tzset_unlocked_r+0x160>
 8012692:	f04f 0901 	mov.w	r9, #1
 8012696:	e77d      	b.n	8012594 <_tzset_unlocked_r+0x16c>
 8012698:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 801269c:	bf06      	itte	eq
 801269e:	3401      	addeq	r4, #1
 80126a0:	4643      	moveq	r3, r8
 80126a2:	2344      	movne	r3, #68	; 0x44
 80126a4:	220a      	movs	r2, #10
 80126a6:	a90b      	add	r1, sp, #44	; 0x2c
 80126a8:	4620      	mov	r0, r4
 80126aa:	9305      	str	r3, [sp, #20]
 80126ac:	f002 fb64 	bl	8014d78 <strtoul>
 80126b0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80126b4:	9b05      	ldr	r3, [sp, #20]
 80126b6:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80126ba:	45a0      	cmp	r8, r4
 80126bc:	d114      	bne.n	80126e8 <_tzset_unlocked_r+0x2c0>
 80126be:	234d      	movs	r3, #77	; 0x4d
 80126c0:	f1b9 0f00 	cmp.w	r9, #0
 80126c4:	d107      	bne.n	80126d6 <_tzset_unlocked_r+0x2ae>
 80126c6:	722b      	strb	r3, [r5, #8]
 80126c8:	2103      	movs	r1, #3
 80126ca:	2302      	movs	r3, #2
 80126cc:	e9c5 1303 	strd	r1, r3, [r5, #12]
 80126d0:	f8c5 9014 	str.w	r9, [r5, #20]
 80126d4:	e791      	b.n	80125fa <_tzset_unlocked_r+0x1d2>
 80126d6:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 80126da:	220b      	movs	r2, #11
 80126dc:	2301      	movs	r3, #1
 80126de:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 80126e2:	2300      	movs	r3, #0
 80126e4:	63eb      	str	r3, [r5, #60]	; 0x3c
 80126e6:	e788      	b.n	80125fa <_tzset_unlocked_r+0x1d2>
 80126e8:	b280      	uxth	r0, r0
 80126ea:	723b      	strb	r3, [r7, #8]
 80126ec:	6178      	str	r0, [r7, #20]
 80126ee:	e784      	b.n	80125fa <_tzset_unlocked_r+0x1d2>
 80126f0:	08018a38 	.word	0x08018a38
 80126f4:	20000b28 	.word	0x20000b28
 80126f8:	20000b30 	.word	0x20000b30
 80126fc:	08018a3b 	.word	0x08018a3b
 8012700:	20000b2c 	.word	0x20000b2c
 8012704:	20000084 	.word	0x20000084
 8012708:	20000b1b 	.word	0x20000b1b
 801270c:	08018a3f 	.word	0x08018a3f
 8012710:	08018a62 	.word	0x08018a62
 8012714:	08018a4e 	.word	0x08018a4e
 8012718:	08018a61 	.word	0x08018a61
 801271c:	20000b10 	.word	0x20000b10

08012720 <__assert_func>:
 8012720:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012722:	4614      	mov	r4, r2
 8012724:	461a      	mov	r2, r3
 8012726:	4b09      	ldr	r3, [pc, #36]	; (801274c <__assert_func+0x2c>)
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	4605      	mov	r5, r0
 801272c:	68d8      	ldr	r0, [r3, #12]
 801272e:	b14c      	cbz	r4, 8012744 <__assert_func+0x24>
 8012730:	4b07      	ldr	r3, [pc, #28]	; (8012750 <__assert_func+0x30>)
 8012732:	9100      	str	r1, [sp, #0]
 8012734:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012738:	4906      	ldr	r1, [pc, #24]	; (8012754 <__assert_func+0x34>)
 801273a:	462b      	mov	r3, r5
 801273c:	f000 fe9c 	bl	8013478 <fiprintf>
 8012740:	f002 fc04 	bl	8014f4c <abort>
 8012744:	4b04      	ldr	r3, [pc, #16]	; (8012758 <__assert_func+0x38>)
 8012746:	461c      	mov	r4, r3
 8012748:	e7f3      	b.n	8012732 <__assert_func+0x12>
 801274a:	bf00      	nop
 801274c:	20000020 	.word	0x20000020
 8012750:	08018a74 	.word	0x08018a74
 8012754:	08018a81 	.word	0x08018a81
 8012758:	08018aaf 	.word	0x08018aaf

0801275c <div>:
 801275c:	2900      	cmp	r1, #0
 801275e:	b510      	push	{r4, lr}
 8012760:	fb91 f4f2 	sdiv	r4, r1, r2
 8012764:	fb02 1314 	mls	r3, r2, r4, r1
 8012768:	db06      	blt.n	8012778 <div+0x1c>
 801276a:	2b00      	cmp	r3, #0
 801276c:	da01      	bge.n	8012772 <div+0x16>
 801276e:	3401      	adds	r4, #1
 8012770:	1a9b      	subs	r3, r3, r2
 8012772:	e9c0 4300 	strd	r4, r3, [r0]
 8012776:	bd10      	pop	{r4, pc}
 8012778:	2b00      	cmp	r3, #0
 801277a:	bfc4      	itt	gt
 801277c:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8012780:	189b      	addgt	r3, r3, r2
 8012782:	e7f6      	b.n	8012772 <div+0x16>

08012784 <quorem>:
 8012784:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012788:	6903      	ldr	r3, [r0, #16]
 801278a:	690c      	ldr	r4, [r1, #16]
 801278c:	42a3      	cmp	r3, r4
 801278e:	4607      	mov	r7, r0
 8012790:	f2c0 8081 	blt.w	8012896 <quorem+0x112>
 8012794:	3c01      	subs	r4, #1
 8012796:	f101 0814 	add.w	r8, r1, #20
 801279a:	f100 0514 	add.w	r5, r0, #20
 801279e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80127a2:	9301      	str	r3, [sp, #4]
 80127a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80127a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80127ac:	3301      	adds	r3, #1
 80127ae:	429a      	cmp	r2, r3
 80127b0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80127b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80127b8:	fbb2 f6f3 	udiv	r6, r2, r3
 80127bc:	d331      	bcc.n	8012822 <quorem+0x9e>
 80127be:	f04f 0e00 	mov.w	lr, #0
 80127c2:	4640      	mov	r0, r8
 80127c4:	46ac      	mov	ip, r5
 80127c6:	46f2      	mov	sl, lr
 80127c8:	f850 2b04 	ldr.w	r2, [r0], #4
 80127cc:	b293      	uxth	r3, r2
 80127ce:	fb06 e303 	mla	r3, r6, r3, lr
 80127d2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80127d6:	b29b      	uxth	r3, r3
 80127d8:	ebaa 0303 	sub.w	r3, sl, r3
 80127dc:	0c12      	lsrs	r2, r2, #16
 80127de:	f8dc a000 	ldr.w	sl, [ip]
 80127e2:	fb06 e202 	mla	r2, r6, r2, lr
 80127e6:	fa13 f38a 	uxtah	r3, r3, sl
 80127ea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80127ee:	fa1f fa82 	uxth.w	sl, r2
 80127f2:	f8dc 2000 	ldr.w	r2, [ip]
 80127f6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80127fa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80127fe:	b29b      	uxth	r3, r3
 8012800:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012804:	4581      	cmp	r9, r0
 8012806:	f84c 3b04 	str.w	r3, [ip], #4
 801280a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801280e:	d2db      	bcs.n	80127c8 <quorem+0x44>
 8012810:	f855 300b 	ldr.w	r3, [r5, fp]
 8012814:	b92b      	cbnz	r3, 8012822 <quorem+0x9e>
 8012816:	9b01      	ldr	r3, [sp, #4]
 8012818:	3b04      	subs	r3, #4
 801281a:	429d      	cmp	r5, r3
 801281c:	461a      	mov	r2, r3
 801281e:	d32e      	bcc.n	801287e <quorem+0xfa>
 8012820:	613c      	str	r4, [r7, #16]
 8012822:	4638      	mov	r0, r7
 8012824:	f001 fcee 	bl	8014204 <__mcmp>
 8012828:	2800      	cmp	r0, #0
 801282a:	db24      	blt.n	8012876 <quorem+0xf2>
 801282c:	3601      	adds	r6, #1
 801282e:	4628      	mov	r0, r5
 8012830:	f04f 0c00 	mov.w	ip, #0
 8012834:	f858 2b04 	ldr.w	r2, [r8], #4
 8012838:	f8d0 e000 	ldr.w	lr, [r0]
 801283c:	b293      	uxth	r3, r2
 801283e:	ebac 0303 	sub.w	r3, ip, r3
 8012842:	0c12      	lsrs	r2, r2, #16
 8012844:	fa13 f38e 	uxtah	r3, r3, lr
 8012848:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801284c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012850:	b29b      	uxth	r3, r3
 8012852:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012856:	45c1      	cmp	r9, r8
 8012858:	f840 3b04 	str.w	r3, [r0], #4
 801285c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012860:	d2e8      	bcs.n	8012834 <quorem+0xb0>
 8012862:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012866:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801286a:	b922      	cbnz	r2, 8012876 <quorem+0xf2>
 801286c:	3b04      	subs	r3, #4
 801286e:	429d      	cmp	r5, r3
 8012870:	461a      	mov	r2, r3
 8012872:	d30a      	bcc.n	801288a <quorem+0x106>
 8012874:	613c      	str	r4, [r7, #16]
 8012876:	4630      	mov	r0, r6
 8012878:	b003      	add	sp, #12
 801287a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801287e:	6812      	ldr	r2, [r2, #0]
 8012880:	3b04      	subs	r3, #4
 8012882:	2a00      	cmp	r2, #0
 8012884:	d1cc      	bne.n	8012820 <quorem+0x9c>
 8012886:	3c01      	subs	r4, #1
 8012888:	e7c7      	b.n	801281a <quorem+0x96>
 801288a:	6812      	ldr	r2, [r2, #0]
 801288c:	3b04      	subs	r3, #4
 801288e:	2a00      	cmp	r2, #0
 8012890:	d1f0      	bne.n	8012874 <quorem+0xf0>
 8012892:	3c01      	subs	r4, #1
 8012894:	e7eb      	b.n	801286e <quorem+0xea>
 8012896:	2000      	movs	r0, #0
 8012898:	e7ee      	b.n	8012878 <quorem+0xf4>
 801289a:	0000      	movs	r0, r0
 801289c:	0000      	movs	r0, r0
	...

080128a0 <_dtoa_r>:
 80128a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128a4:	ed2d 8b02 	vpush	{d8}
 80128a8:	ec57 6b10 	vmov	r6, r7, d0
 80128ac:	b095      	sub	sp, #84	; 0x54
 80128ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80128b0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80128b4:	9105      	str	r1, [sp, #20]
 80128b6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80128ba:	4604      	mov	r4, r0
 80128bc:	9209      	str	r2, [sp, #36]	; 0x24
 80128be:	930f      	str	r3, [sp, #60]	; 0x3c
 80128c0:	b975      	cbnz	r5, 80128e0 <_dtoa_r+0x40>
 80128c2:	2010      	movs	r0, #16
 80128c4:	f7fd fed8 	bl	8010678 <malloc>
 80128c8:	4602      	mov	r2, r0
 80128ca:	6260      	str	r0, [r4, #36]	; 0x24
 80128cc:	b920      	cbnz	r0, 80128d8 <_dtoa_r+0x38>
 80128ce:	4bb2      	ldr	r3, [pc, #712]	; (8012b98 <_dtoa_r+0x2f8>)
 80128d0:	21ea      	movs	r1, #234	; 0xea
 80128d2:	48b2      	ldr	r0, [pc, #712]	; (8012b9c <_dtoa_r+0x2fc>)
 80128d4:	f7ff ff24 	bl	8012720 <__assert_func>
 80128d8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80128dc:	6005      	str	r5, [r0, #0]
 80128de:	60c5      	str	r5, [r0, #12]
 80128e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80128e2:	6819      	ldr	r1, [r3, #0]
 80128e4:	b151      	cbz	r1, 80128fc <_dtoa_r+0x5c>
 80128e6:	685a      	ldr	r2, [r3, #4]
 80128e8:	604a      	str	r2, [r1, #4]
 80128ea:	2301      	movs	r3, #1
 80128ec:	4093      	lsls	r3, r2
 80128ee:	608b      	str	r3, [r1, #8]
 80128f0:	4620      	mov	r0, r4
 80128f2:	f001 f9ff 	bl	8013cf4 <_Bfree>
 80128f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80128f8:	2200      	movs	r2, #0
 80128fa:	601a      	str	r2, [r3, #0]
 80128fc:	1e3b      	subs	r3, r7, #0
 80128fe:	bfb9      	ittee	lt
 8012900:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012904:	9303      	strlt	r3, [sp, #12]
 8012906:	2300      	movge	r3, #0
 8012908:	f8c8 3000 	strge.w	r3, [r8]
 801290c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8012910:	4ba3      	ldr	r3, [pc, #652]	; (8012ba0 <_dtoa_r+0x300>)
 8012912:	bfbc      	itt	lt
 8012914:	2201      	movlt	r2, #1
 8012916:	f8c8 2000 	strlt.w	r2, [r8]
 801291a:	ea33 0309 	bics.w	r3, r3, r9
 801291e:	d11b      	bne.n	8012958 <_dtoa_r+0xb8>
 8012920:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012922:	f242 730f 	movw	r3, #9999	; 0x270f
 8012926:	6013      	str	r3, [r2, #0]
 8012928:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801292c:	4333      	orrs	r3, r6
 801292e:	f000 857a 	beq.w	8013426 <_dtoa_r+0xb86>
 8012932:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012934:	b963      	cbnz	r3, 8012950 <_dtoa_r+0xb0>
 8012936:	4b9b      	ldr	r3, [pc, #620]	; (8012ba4 <_dtoa_r+0x304>)
 8012938:	e024      	b.n	8012984 <_dtoa_r+0xe4>
 801293a:	4b9b      	ldr	r3, [pc, #620]	; (8012ba8 <_dtoa_r+0x308>)
 801293c:	9300      	str	r3, [sp, #0]
 801293e:	3308      	adds	r3, #8
 8012940:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012942:	6013      	str	r3, [r2, #0]
 8012944:	9800      	ldr	r0, [sp, #0]
 8012946:	b015      	add	sp, #84	; 0x54
 8012948:	ecbd 8b02 	vpop	{d8}
 801294c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012950:	4b94      	ldr	r3, [pc, #592]	; (8012ba4 <_dtoa_r+0x304>)
 8012952:	9300      	str	r3, [sp, #0]
 8012954:	3303      	adds	r3, #3
 8012956:	e7f3      	b.n	8012940 <_dtoa_r+0xa0>
 8012958:	ed9d 7b02 	vldr	d7, [sp, #8]
 801295c:	2200      	movs	r2, #0
 801295e:	ec51 0b17 	vmov	r0, r1, d7
 8012962:	2300      	movs	r3, #0
 8012964:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8012968:	f7ee f8c6 	bl	8000af8 <__aeabi_dcmpeq>
 801296c:	4680      	mov	r8, r0
 801296e:	b158      	cbz	r0, 8012988 <_dtoa_r+0xe8>
 8012970:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012972:	2301      	movs	r3, #1
 8012974:	6013      	str	r3, [r2, #0]
 8012976:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012978:	2b00      	cmp	r3, #0
 801297a:	f000 8551 	beq.w	8013420 <_dtoa_r+0xb80>
 801297e:	488b      	ldr	r0, [pc, #556]	; (8012bac <_dtoa_r+0x30c>)
 8012980:	6018      	str	r0, [r3, #0]
 8012982:	1e43      	subs	r3, r0, #1
 8012984:	9300      	str	r3, [sp, #0]
 8012986:	e7dd      	b.n	8012944 <_dtoa_r+0xa4>
 8012988:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801298c:	aa12      	add	r2, sp, #72	; 0x48
 801298e:	a913      	add	r1, sp, #76	; 0x4c
 8012990:	4620      	mov	r0, r4
 8012992:	f001 fd57 	bl	8014444 <__d2b>
 8012996:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801299a:	4683      	mov	fp, r0
 801299c:	2d00      	cmp	r5, #0
 801299e:	d07c      	beq.n	8012a9a <_dtoa_r+0x1fa>
 80129a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80129a2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80129a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80129aa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80129ae:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80129b2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80129b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80129ba:	4b7d      	ldr	r3, [pc, #500]	; (8012bb0 <_dtoa_r+0x310>)
 80129bc:	2200      	movs	r2, #0
 80129be:	4630      	mov	r0, r6
 80129c0:	4639      	mov	r1, r7
 80129c2:	f7ed fc79 	bl	80002b8 <__aeabi_dsub>
 80129c6:	a36e      	add	r3, pc, #440	; (adr r3, 8012b80 <_dtoa_r+0x2e0>)
 80129c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129cc:	f7ed fe2c 	bl	8000628 <__aeabi_dmul>
 80129d0:	a36d      	add	r3, pc, #436	; (adr r3, 8012b88 <_dtoa_r+0x2e8>)
 80129d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129d6:	f7ed fc71 	bl	80002bc <__adddf3>
 80129da:	4606      	mov	r6, r0
 80129dc:	4628      	mov	r0, r5
 80129de:	460f      	mov	r7, r1
 80129e0:	f7ed fdb8 	bl	8000554 <__aeabi_i2d>
 80129e4:	a36a      	add	r3, pc, #424	; (adr r3, 8012b90 <_dtoa_r+0x2f0>)
 80129e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129ea:	f7ed fe1d 	bl	8000628 <__aeabi_dmul>
 80129ee:	4602      	mov	r2, r0
 80129f0:	460b      	mov	r3, r1
 80129f2:	4630      	mov	r0, r6
 80129f4:	4639      	mov	r1, r7
 80129f6:	f7ed fc61 	bl	80002bc <__adddf3>
 80129fa:	4606      	mov	r6, r0
 80129fc:	460f      	mov	r7, r1
 80129fe:	f7ee f8c3 	bl	8000b88 <__aeabi_d2iz>
 8012a02:	2200      	movs	r2, #0
 8012a04:	4682      	mov	sl, r0
 8012a06:	2300      	movs	r3, #0
 8012a08:	4630      	mov	r0, r6
 8012a0a:	4639      	mov	r1, r7
 8012a0c:	f7ee f87e 	bl	8000b0c <__aeabi_dcmplt>
 8012a10:	b148      	cbz	r0, 8012a26 <_dtoa_r+0x186>
 8012a12:	4650      	mov	r0, sl
 8012a14:	f7ed fd9e 	bl	8000554 <__aeabi_i2d>
 8012a18:	4632      	mov	r2, r6
 8012a1a:	463b      	mov	r3, r7
 8012a1c:	f7ee f86c 	bl	8000af8 <__aeabi_dcmpeq>
 8012a20:	b908      	cbnz	r0, 8012a26 <_dtoa_r+0x186>
 8012a22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012a26:	f1ba 0f16 	cmp.w	sl, #22
 8012a2a:	d854      	bhi.n	8012ad6 <_dtoa_r+0x236>
 8012a2c:	4b61      	ldr	r3, [pc, #388]	; (8012bb4 <_dtoa_r+0x314>)
 8012a2e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a36:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012a3a:	f7ee f867 	bl	8000b0c <__aeabi_dcmplt>
 8012a3e:	2800      	cmp	r0, #0
 8012a40:	d04b      	beq.n	8012ada <_dtoa_r+0x23a>
 8012a42:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012a46:	2300      	movs	r3, #0
 8012a48:	930e      	str	r3, [sp, #56]	; 0x38
 8012a4a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012a4c:	1b5d      	subs	r5, r3, r5
 8012a4e:	1e6b      	subs	r3, r5, #1
 8012a50:	9304      	str	r3, [sp, #16]
 8012a52:	bf43      	ittte	mi
 8012a54:	2300      	movmi	r3, #0
 8012a56:	f1c5 0801 	rsbmi	r8, r5, #1
 8012a5a:	9304      	strmi	r3, [sp, #16]
 8012a5c:	f04f 0800 	movpl.w	r8, #0
 8012a60:	f1ba 0f00 	cmp.w	sl, #0
 8012a64:	db3b      	blt.n	8012ade <_dtoa_r+0x23e>
 8012a66:	9b04      	ldr	r3, [sp, #16]
 8012a68:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8012a6c:	4453      	add	r3, sl
 8012a6e:	9304      	str	r3, [sp, #16]
 8012a70:	2300      	movs	r3, #0
 8012a72:	9306      	str	r3, [sp, #24]
 8012a74:	9b05      	ldr	r3, [sp, #20]
 8012a76:	2b09      	cmp	r3, #9
 8012a78:	d869      	bhi.n	8012b4e <_dtoa_r+0x2ae>
 8012a7a:	2b05      	cmp	r3, #5
 8012a7c:	bfc4      	itt	gt
 8012a7e:	3b04      	subgt	r3, #4
 8012a80:	9305      	strgt	r3, [sp, #20]
 8012a82:	9b05      	ldr	r3, [sp, #20]
 8012a84:	f1a3 0302 	sub.w	r3, r3, #2
 8012a88:	bfcc      	ite	gt
 8012a8a:	2500      	movgt	r5, #0
 8012a8c:	2501      	movle	r5, #1
 8012a8e:	2b03      	cmp	r3, #3
 8012a90:	d869      	bhi.n	8012b66 <_dtoa_r+0x2c6>
 8012a92:	e8df f003 	tbb	[pc, r3]
 8012a96:	4e2c      	.short	0x4e2c
 8012a98:	5a4c      	.short	0x5a4c
 8012a9a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8012a9e:	441d      	add	r5, r3
 8012aa0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8012aa4:	2b20      	cmp	r3, #32
 8012aa6:	bfc1      	itttt	gt
 8012aa8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012aac:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8012ab0:	fa09 f303 	lslgt.w	r3, r9, r3
 8012ab4:	fa26 f000 	lsrgt.w	r0, r6, r0
 8012ab8:	bfda      	itte	le
 8012aba:	f1c3 0320 	rsble	r3, r3, #32
 8012abe:	fa06 f003 	lslle.w	r0, r6, r3
 8012ac2:	4318      	orrgt	r0, r3
 8012ac4:	f7ed fd36 	bl	8000534 <__aeabi_ui2d>
 8012ac8:	2301      	movs	r3, #1
 8012aca:	4606      	mov	r6, r0
 8012acc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8012ad0:	3d01      	subs	r5, #1
 8012ad2:	9310      	str	r3, [sp, #64]	; 0x40
 8012ad4:	e771      	b.n	80129ba <_dtoa_r+0x11a>
 8012ad6:	2301      	movs	r3, #1
 8012ad8:	e7b6      	b.n	8012a48 <_dtoa_r+0x1a8>
 8012ada:	900e      	str	r0, [sp, #56]	; 0x38
 8012adc:	e7b5      	b.n	8012a4a <_dtoa_r+0x1aa>
 8012ade:	f1ca 0300 	rsb	r3, sl, #0
 8012ae2:	9306      	str	r3, [sp, #24]
 8012ae4:	2300      	movs	r3, #0
 8012ae6:	eba8 080a 	sub.w	r8, r8, sl
 8012aea:	930d      	str	r3, [sp, #52]	; 0x34
 8012aec:	e7c2      	b.n	8012a74 <_dtoa_r+0x1d4>
 8012aee:	2300      	movs	r3, #0
 8012af0:	9308      	str	r3, [sp, #32]
 8012af2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	dc39      	bgt.n	8012b6c <_dtoa_r+0x2cc>
 8012af8:	f04f 0901 	mov.w	r9, #1
 8012afc:	f8cd 9004 	str.w	r9, [sp, #4]
 8012b00:	464b      	mov	r3, r9
 8012b02:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8012b06:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012b08:	2200      	movs	r2, #0
 8012b0a:	6042      	str	r2, [r0, #4]
 8012b0c:	2204      	movs	r2, #4
 8012b0e:	f102 0614 	add.w	r6, r2, #20
 8012b12:	429e      	cmp	r6, r3
 8012b14:	6841      	ldr	r1, [r0, #4]
 8012b16:	d92f      	bls.n	8012b78 <_dtoa_r+0x2d8>
 8012b18:	4620      	mov	r0, r4
 8012b1a:	f001 f8ab 	bl	8013c74 <_Balloc>
 8012b1e:	9000      	str	r0, [sp, #0]
 8012b20:	2800      	cmp	r0, #0
 8012b22:	d14b      	bne.n	8012bbc <_dtoa_r+0x31c>
 8012b24:	4b24      	ldr	r3, [pc, #144]	; (8012bb8 <_dtoa_r+0x318>)
 8012b26:	4602      	mov	r2, r0
 8012b28:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8012b2c:	e6d1      	b.n	80128d2 <_dtoa_r+0x32>
 8012b2e:	2301      	movs	r3, #1
 8012b30:	e7de      	b.n	8012af0 <_dtoa_r+0x250>
 8012b32:	2300      	movs	r3, #0
 8012b34:	9308      	str	r3, [sp, #32]
 8012b36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b38:	eb0a 0903 	add.w	r9, sl, r3
 8012b3c:	f109 0301 	add.w	r3, r9, #1
 8012b40:	2b01      	cmp	r3, #1
 8012b42:	9301      	str	r3, [sp, #4]
 8012b44:	bfb8      	it	lt
 8012b46:	2301      	movlt	r3, #1
 8012b48:	e7dd      	b.n	8012b06 <_dtoa_r+0x266>
 8012b4a:	2301      	movs	r3, #1
 8012b4c:	e7f2      	b.n	8012b34 <_dtoa_r+0x294>
 8012b4e:	2501      	movs	r5, #1
 8012b50:	2300      	movs	r3, #0
 8012b52:	9305      	str	r3, [sp, #20]
 8012b54:	9508      	str	r5, [sp, #32]
 8012b56:	f04f 39ff 	mov.w	r9, #4294967295
 8012b5a:	2200      	movs	r2, #0
 8012b5c:	f8cd 9004 	str.w	r9, [sp, #4]
 8012b60:	2312      	movs	r3, #18
 8012b62:	9209      	str	r2, [sp, #36]	; 0x24
 8012b64:	e7cf      	b.n	8012b06 <_dtoa_r+0x266>
 8012b66:	2301      	movs	r3, #1
 8012b68:	9308      	str	r3, [sp, #32]
 8012b6a:	e7f4      	b.n	8012b56 <_dtoa_r+0x2b6>
 8012b6c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8012b70:	f8cd 9004 	str.w	r9, [sp, #4]
 8012b74:	464b      	mov	r3, r9
 8012b76:	e7c6      	b.n	8012b06 <_dtoa_r+0x266>
 8012b78:	3101      	adds	r1, #1
 8012b7a:	6041      	str	r1, [r0, #4]
 8012b7c:	0052      	lsls	r2, r2, #1
 8012b7e:	e7c6      	b.n	8012b0e <_dtoa_r+0x26e>
 8012b80:	636f4361 	.word	0x636f4361
 8012b84:	3fd287a7 	.word	0x3fd287a7
 8012b88:	8b60c8b3 	.word	0x8b60c8b3
 8012b8c:	3fc68a28 	.word	0x3fc68a28
 8012b90:	509f79fb 	.word	0x509f79fb
 8012b94:	3fd34413 	.word	0x3fd34413
 8012b98:	080188d8 	.word	0x080188d8
 8012b9c:	08018abd 	.word	0x08018abd
 8012ba0:	7ff00000 	.word	0x7ff00000
 8012ba4:	08018ab9 	.word	0x08018ab9
 8012ba8:	08018ab0 	.word	0x08018ab0
 8012bac:	08018ee5 	.word	0x08018ee5
 8012bb0:	3ff80000 	.word	0x3ff80000
 8012bb4:	08018c98 	.word	0x08018c98
 8012bb8:	08018b1c 	.word	0x08018b1c
 8012bbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012bbe:	9a00      	ldr	r2, [sp, #0]
 8012bc0:	601a      	str	r2, [r3, #0]
 8012bc2:	9b01      	ldr	r3, [sp, #4]
 8012bc4:	2b0e      	cmp	r3, #14
 8012bc6:	f200 80ad 	bhi.w	8012d24 <_dtoa_r+0x484>
 8012bca:	2d00      	cmp	r5, #0
 8012bcc:	f000 80aa 	beq.w	8012d24 <_dtoa_r+0x484>
 8012bd0:	f1ba 0f00 	cmp.w	sl, #0
 8012bd4:	dd36      	ble.n	8012c44 <_dtoa_r+0x3a4>
 8012bd6:	4ac3      	ldr	r2, [pc, #780]	; (8012ee4 <_dtoa_r+0x644>)
 8012bd8:	f00a 030f 	and.w	r3, sl, #15
 8012bdc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012be0:	ed93 7b00 	vldr	d7, [r3]
 8012be4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8012be8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8012bec:	eeb0 8a47 	vmov.f32	s16, s14
 8012bf0:	eef0 8a67 	vmov.f32	s17, s15
 8012bf4:	d016      	beq.n	8012c24 <_dtoa_r+0x384>
 8012bf6:	4bbc      	ldr	r3, [pc, #752]	; (8012ee8 <_dtoa_r+0x648>)
 8012bf8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012bfc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012c00:	f7ed fe3c 	bl	800087c <__aeabi_ddiv>
 8012c04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012c08:	f007 070f 	and.w	r7, r7, #15
 8012c0c:	2503      	movs	r5, #3
 8012c0e:	4eb6      	ldr	r6, [pc, #728]	; (8012ee8 <_dtoa_r+0x648>)
 8012c10:	b957      	cbnz	r7, 8012c28 <_dtoa_r+0x388>
 8012c12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012c16:	ec53 2b18 	vmov	r2, r3, d8
 8012c1a:	f7ed fe2f 	bl	800087c <__aeabi_ddiv>
 8012c1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012c22:	e029      	b.n	8012c78 <_dtoa_r+0x3d8>
 8012c24:	2502      	movs	r5, #2
 8012c26:	e7f2      	b.n	8012c0e <_dtoa_r+0x36e>
 8012c28:	07f9      	lsls	r1, r7, #31
 8012c2a:	d508      	bpl.n	8012c3e <_dtoa_r+0x39e>
 8012c2c:	ec51 0b18 	vmov	r0, r1, d8
 8012c30:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012c34:	f7ed fcf8 	bl	8000628 <__aeabi_dmul>
 8012c38:	ec41 0b18 	vmov	d8, r0, r1
 8012c3c:	3501      	adds	r5, #1
 8012c3e:	107f      	asrs	r7, r7, #1
 8012c40:	3608      	adds	r6, #8
 8012c42:	e7e5      	b.n	8012c10 <_dtoa_r+0x370>
 8012c44:	f000 80a6 	beq.w	8012d94 <_dtoa_r+0x4f4>
 8012c48:	f1ca 0600 	rsb	r6, sl, #0
 8012c4c:	4ba5      	ldr	r3, [pc, #660]	; (8012ee4 <_dtoa_r+0x644>)
 8012c4e:	4fa6      	ldr	r7, [pc, #664]	; (8012ee8 <_dtoa_r+0x648>)
 8012c50:	f006 020f 	and.w	r2, r6, #15
 8012c54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c5c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012c60:	f7ed fce2 	bl	8000628 <__aeabi_dmul>
 8012c64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012c68:	1136      	asrs	r6, r6, #4
 8012c6a:	2300      	movs	r3, #0
 8012c6c:	2502      	movs	r5, #2
 8012c6e:	2e00      	cmp	r6, #0
 8012c70:	f040 8085 	bne.w	8012d7e <_dtoa_r+0x4de>
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d1d2      	bne.n	8012c1e <_dtoa_r+0x37e>
 8012c78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	f000 808c 	beq.w	8012d98 <_dtoa_r+0x4f8>
 8012c80:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012c84:	4b99      	ldr	r3, [pc, #612]	; (8012eec <_dtoa_r+0x64c>)
 8012c86:	2200      	movs	r2, #0
 8012c88:	4630      	mov	r0, r6
 8012c8a:	4639      	mov	r1, r7
 8012c8c:	f7ed ff3e 	bl	8000b0c <__aeabi_dcmplt>
 8012c90:	2800      	cmp	r0, #0
 8012c92:	f000 8081 	beq.w	8012d98 <_dtoa_r+0x4f8>
 8012c96:	9b01      	ldr	r3, [sp, #4]
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d07d      	beq.n	8012d98 <_dtoa_r+0x4f8>
 8012c9c:	f1b9 0f00 	cmp.w	r9, #0
 8012ca0:	dd3c      	ble.n	8012d1c <_dtoa_r+0x47c>
 8012ca2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8012ca6:	9307      	str	r3, [sp, #28]
 8012ca8:	2200      	movs	r2, #0
 8012caa:	4b91      	ldr	r3, [pc, #580]	; (8012ef0 <_dtoa_r+0x650>)
 8012cac:	4630      	mov	r0, r6
 8012cae:	4639      	mov	r1, r7
 8012cb0:	f7ed fcba 	bl	8000628 <__aeabi_dmul>
 8012cb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012cb8:	3501      	adds	r5, #1
 8012cba:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8012cbe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012cc2:	4628      	mov	r0, r5
 8012cc4:	f7ed fc46 	bl	8000554 <__aeabi_i2d>
 8012cc8:	4632      	mov	r2, r6
 8012cca:	463b      	mov	r3, r7
 8012ccc:	f7ed fcac 	bl	8000628 <__aeabi_dmul>
 8012cd0:	4b88      	ldr	r3, [pc, #544]	; (8012ef4 <_dtoa_r+0x654>)
 8012cd2:	2200      	movs	r2, #0
 8012cd4:	f7ed faf2 	bl	80002bc <__adddf3>
 8012cd8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8012cdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012ce0:	9303      	str	r3, [sp, #12]
 8012ce2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d15c      	bne.n	8012da2 <_dtoa_r+0x502>
 8012ce8:	4b83      	ldr	r3, [pc, #524]	; (8012ef8 <_dtoa_r+0x658>)
 8012cea:	2200      	movs	r2, #0
 8012cec:	4630      	mov	r0, r6
 8012cee:	4639      	mov	r1, r7
 8012cf0:	f7ed fae2 	bl	80002b8 <__aeabi_dsub>
 8012cf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012cf8:	4606      	mov	r6, r0
 8012cfa:	460f      	mov	r7, r1
 8012cfc:	f7ed ff24 	bl	8000b48 <__aeabi_dcmpgt>
 8012d00:	2800      	cmp	r0, #0
 8012d02:	f040 8296 	bne.w	8013232 <_dtoa_r+0x992>
 8012d06:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8012d0a:	4630      	mov	r0, r6
 8012d0c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012d10:	4639      	mov	r1, r7
 8012d12:	f7ed fefb 	bl	8000b0c <__aeabi_dcmplt>
 8012d16:	2800      	cmp	r0, #0
 8012d18:	f040 8288 	bne.w	801322c <_dtoa_r+0x98c>
 8012d1c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012d20:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012d24:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	f2c0 8158 	blt.w	8012fdc <_dtoa_r+0x73c>
 8012d2c:	f1ba 0f0e 	cmp.w	sl, #14
 8012d30:	f300 8154 	bgt.w	8012fdc <_dtoa_r+0x73c>
 8012d34:	4b6b      	ldr	r3, [pc, #428]	; (8012ee4 <_dtoa_r+0x644>)
 8012d36:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012d3a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	f280 80e3 	bge.w	8012f0c <_dtoa_r+0x66c>
 8012d46:	9b01      	ldr	r3, [sp, #4]
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	f300 80df 	bgt.w	8012f0c <_dtoa_r+0x66c>
 8012d4e:	f040 826d 	bne.w	801322c <_dtoa_r+0x98c>
 8012d52:	4b69      	ldr	r3, [pc, #420]	; (8012ef8 <_dtoa_r+0x658>)
 8012d54:	2200      	movs	r2, #0
 8012d56:	4640      	mov	r0, r8
 8012d58:	4649      	mov	r1, r9
 8012d5a:	f7ed fc65 	bl	8000628 <__aeabi_dmul>
 8012d5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012d62:	f7ed fee7 	bl	8000b34 <__aeabi_dcmpge>
 8012d66:	9e01      	ldr	r6, [sp, #4]
 8012d68:	4637      	mov	r7, r6
 8012d6a:	2800      	cmp	r0, #0
 8012d6c:	f040 8243 	bne.w	80131f6 <_dtoa_r+0x956>
 8012d70:	9d00      	ldr	r5, [sp, #0]
 8012d72:	2331      	movs	r3, #49	; 0x31
 8012d74:	f805 3b01 	strb.w	r3, [r5], #1
 8012d78:	f10a 0a01 	add.w	sl, sl, #1
 8012d7c:	e23f      	b.n	80131fe <_dtoa_r+0x95e>
 8012d7e:	07f2      	lsls	r2, r6, #31
 8012d80:	d505      	bpl.n	8012d8e <_dtoa_r+0x4ee>
 8012d82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012d86:	f7ed fc4f 	bl	8000628 <__aeabi_dmul>
 8012d8a:	3501      	adds	r5, #1
 8012d8c:	2301      	movs	r3, #1
 8012d8e:	1076      	asrs	r6, r6, #1
 8012d90:	3708      	adds	r7, #8
 8012d92:	e76c      	b.n	8012c6e <_dtoa_r+0x3ce>
 8012d94:	2502      	movs	r5, #2
 8012d96:	e76f      	b.n	8012c78 <_dtoa_r+0x3d8>
 8012d98:	9b01      	ldr	r3, [sp, #4]
 8012d9a:	f8cd a01c 	str.w	sl, [sp, #28]
 8012d9e:	930c      	str	r3, [sp, #48]	; 0x30
 8012da0:	e78d      	b.n	8012cbe <_dtoa_r+0x41e>
 8012da2:	9900      	ldr	r1, [sp, #0]
 8012da4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8012da6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012da8:	4b4e      	ldr	r3, [pc, #312]	; (8012ee4 <_dtoa_r+0x644>)
 8012daa:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012dae:	4401      	add	r1, r0
 8012db0:	9102      	str	r1, [sp, #8]
 8012db2:	9908      	ldr	r1, [sp, #32]
 8012db4:	eeb0 8a47 	vmov.f32	s16, s14
 8012db8:	eef0 8a67 	vmov.f32	s17, s15
 8012dbc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012dc0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012dc4:	2900      	cmp	r1, #0
 8012dc6:	d045      	beq.n	8012e54 <_dtoa_r+0x5b4>
 8012dc8:	494c      	ldr	r1, [pc, #304]	; (8012efc <_dtoa_r+0x65c>)
 8012dca:	2000      	movs	r0, #0
 8012dcc:	f7ed fd56 	bl	800087c <__aeabi_ddiv>
 8012dd0:	ec53 2b18 	vmov	r2, r3, d8
 8012dd4:	f7ed fa70 	bl	80002b8 <__aeabi_dsub>
 8012dd8:	9d00      	ldr	r5, [sp, #0]
 8012dda:	ec41 0b18 	vmov	d8, r0, r1
 8012dde:	4639      	mov	r1, r7
 8012de0:	4630      	mov	r0, r6
 8012de2:	f7ed fed1 	bl	8000b88 <__aeabi_d2iz>
 8012de6:	900c      	str	r0, [sp, #48]	; 0x30
 8012de8:	f7ed fbb4 	bl	8000554 <__aeabi_i2d>
 8012dec:	4602      	mov	r2, r0
 8012dee:	460b      	mov	r3, r1
 8012df0:	4630      	mov	r0, r6
 8012df2:	4639      	mov	r1, r7
 8012df4:	f7ed fa60 	bl	80002b8 <__aeabi_dsub>
 8012df8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012dfa:	3330      	adds	r3, #48	; 0x30
 8012dfc:	f805 3b01 	strb.w	r3, [r5], #1
 8012e00:	ec53 2b18 	vmov	r2, r3, d8
 8012e04:	4606      	mov	r6, r0
 8012e06:	460f      	mov	r7, r1
 8012e08:	f7ed fe80 	bl	8000b0c <__aeabi_dcmplt>
 8012e0c:	2800      	cmp	r0, #0
 8012e0e:	d165      	bne.n	8012edc <_dtoa_r+0x63c>
 8012e10:	4632      	mov	r2, r6
 8012e12:	463b      	mov	r3, r7
 8012e14:	4935      	ldr	r1, [pc, #212]	; (8012eec <_dtoa_r+0x64c>)
 8012e16:	2000      	movs	r0, #0
 8012e18:	f7ed fa4e 	bl	80002b8 <__aeabi_dsub>
 8012e1c:	ec53 2b18 	vmov	r2, r3, d8
 8012e20:	f7ed fe74 	bl	8000b0c <__aeabi_dcmplt>
 8012e24:	2800      	cmp	r0, #0
 8012e26:	f040 80b9 	bne.w	8012f9c <_dtoa_r+0x6fc>
 8012e2a:	9b02      	ldr	r3, [sp, #8]
 8012e2c:	429d      	cmp	r5, r3
 8012e2e:	f43f af75 	beq.w	8012d1c <_dtoa_r+0x47c>
 8012e32:	4b2f      	ldr	r3, [pc, #188]	; (8012ef0 <_dtoa_r+0x650>)
 8012e34:	ec51 0b18 	vmov	r0, r1, d8
 8012e38:	2200      	movs	r2, #0
 8012e3a:	f7ed fbf5 	bl	8000628 <__aeabi_dmul>
 8012e3e:	4b2c      	ldr	r3, [pc, #176]	; (8012ef0 <_dtoa_r+0x650>)
 8012e40:	ec41 0b18 	vmov	d8, r0, r1
 8012e44:	2200      	movs	r2, #0
 8012e46:	4630      	mov	r0, r6
 8012e48:	4639      	mov	r1, r7
 8012e4a:	f7ed fbed 	bl	8000628 <__aeabi_dmul>
 8012e4e:	4606      	mov	r6, r0
 8012e50:	460f      	mov	r7, r1
 8012e52:	e7c4      	b.n	8012dde <_dtoa_r+0x53e>
 8012e54:	ec51 0b17 	vmov	r0, r1, d7
 8012e58:	f7ed fbe6 	bl	8000628 <__aeabi_dmul>
 8012e5c:	9b02      	ldr	r3, [sp, #8]
 8012e5e:	9d00      	ldr	r5, [sp, #0]
 8012e60:	930c      	str	r3, [sp, #48]	; 0x30
 8012e62:	ec41 0b18 	vmov	d8, r0, r1
 8012e66:	4639      	mov	r1, r7
 8012e68:	4630      	mov	r0, r6
 8012e6a:	f7ed fe8d 	bl	8000b88 <__aeabi_d2iz>
 8012e6e:	9011      	str	r0, [sp, #68]	; 0x44
 8012e70:	f7ed fb70 	bl	8000554 <__aeabi_i2d>
 8012e74:	4602      	mov	r2, r0
 8012e76:	460b      	mov	r3, r1
 8012e78:	4630      	mov	r0, r6
 8012e7a:	4639      	mov	r1, r7
 8012e7c:	f7ed fa1c 	bl	80002b8 <__aeabi_dsub>
 8012e80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012e82:	3330      	adds	r3, #48	; 0x30
 8012e84:	f805 3b01 	strb.w	r3, [r5], #1
 8012e88:	9b02      	ldr	r3, [sp, #8]
 8012e8a:	429d      	cmp	r5, r3
 8012e8c:	4606      	mov	r6, r0
 8012e8e:	460f      	mov	r7, r1
 8012e90:	f04f 0200 	mov.w	r2, #0
 8012e94:	d134      	bne.n	8012f00 <_dtoa_r+0x660>
 8012e96:	4b19      	ldr	r3, [pc, #100]	; (8012efc <_dtoa_r+0x65c>)
 8012e98:	ec51 0b18 	vmov	r0, r1, d8
 8012e9c:	f7ed fa0e 	bl	80002bc <__adddf3>
 8012ea0:	4602      	mov	r2, r0
 8012ea2:	460b      	mov	r3, r1
 8012ea4:	4630      	mov	r0, r6
 8012ea6:	4639      	mov	r1, r7
 8012ea8:	f7ed fe4e 	bl	8000b48 <__aeabi_dcmpgt>
 8012eac:	2800      	cmp	r0, #0
 8012eae:	d175      	bne.n	8012f9c <_dtoa_r+0x6fc>
 8012eb0:	ec53 2b18 	vmov	r2, r3, d8
 8012eb4:	4911      	ldr	r1, [pc, #68]	; (8012efc <_dtoa_r+0x65c>)
 8012eb6:	2000      	movs	r0, #0
 8012eb8:	f7ed f9fe 	bl	80002b8 <__aeabi_dsub>
 8012ebc:	4602      	mov	r2, r0
 8012ebe:	460b      	mov	r3, r1
 8012ec0:	4630      	mov	r0, r6
 8012ec2:	4639      	mov	r1, r7
 8012ec4:	f7ed fe22 	bl	8000b0c <__aeabi_dcmplt>
 8012ec8:	2800      	cmp	r0, #0
 8012eca:	f43f af27 	beq.w	8012d1c <_dtoa_r+0x47c>
 8012ece:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012ed0:	1e6b      	subs	r3, r5, #1
 8012ed2:	930c      	str	r3, [sp, #48]	; 0x30
 8012ed4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012ed8:	2b30      	cmp	r3, #48	; 0x30
 8012eda:	d0f8      	beq.n	8012ece <_dtoa_r+0x62e>
 8012edc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8012ee0:	e04a      	b.n	8012f78 <_dtoa_r+0x6d8>
 8012ee2:	bf00      	nop
 8012ee4:	08018c98 	.word	0x08018c98
 8012ee8:	08018c70 	.word	0x08018c70
 8012eec:	3ff00000 	.word	0x3ff00000
 8012ef0:	40240000 	.word	0x40240000
 8012ef4:	401c0000 	.word	0x401c0000
 8012ef8:	40140000 	.word	0x40140000
 8012efc:	3fe00000 	.word	0x3fe00000
 8012f00:	4baf      	ldr	r3, [pc, #700]	; (80131c0 <_dtoa_r+0x920>)
 8012f02:	f7ed fb91 	bl	8000628 <__aeabi_dmul>
 8012f06:	4606      	mov	r6, r0
 8012f08:	460f      	mov	r7, r1
 8012f0a:	e7ac      	b.n	8012e66 <_dtoa_r+0x5c6>
 8012f0c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012f10:	9d00      	ldr	r5, [sp, #0]
 8012f12:	4642      	mov	r2, r8
 8012f14:	464b      	mov	r3, r9
 8012f16:	4630      	mov	r0, r6
 8012f18:	4639      	mov	r1, r7
 8012f1a:	f7ed fcaf 	bl	800087c <__aeabi_ddiv>
 8012f1e:	f7ed fe33 	bl	8000b88 <__aeabi_d2iz>
 8012f22:	9002      	str	r0, [sp, #8]
 8012f24:	f7ed fb16 	bl	8000554 <__aeabi_i2d>
 8012f28:	4642      	mov	r2, r8
 8012f2a:	464b      	mov	r3, r9
 8012f2c:	f7ed fb7c 	bl	8000628 <__aeabi_dmul>
 8012f30:	4602      	mov	r2, r0
 8012f32:	460b      	mov	r3, r1
 8012f34:	4630      	mov	r0, r6
 8012f36:	4639      	mov	r1, r7
 8012f38:	f7ed f9be 	bl	80002b8 <__aeabi_dsub>
 8012f3c:	9e02      	ldr	r6, [sp, #8]
 8012f3e:	9f01      	ldr	r7, [sp, #4]
 8012f40:	3630      	adds	r6, #48	; 0x30
 8012f42:	f805 6b01 	strb.w	r6, [r5], #1
 8012f46:	9e00      	ldr	r6, [sp, #0]
 8012f48:	1bae      	subs	r6, r5, r6
 8012f4a:	42b7      	cmp	r7, r6
 8012f4c:	4602      	mov	r2, r0
 8012f4e:	460b      	mov	r3, r1
 8012f50:	d137      	bne.n	8012fc2 <_dtoa_r+0x722>
 8012f52:	f7ed f9b3 	bl	80002bc <__adddf3>
 8012f56:	4642      	mov	r2, r8
 8012f58:	464b      	mov	r3, r9
 8012f5a:	4606      	mov	r6, r0
 8012f5c:	460f      	mov	r7, r1
 8012f5e:	f7ed fdf3 	bl	8000b48 <__aeabi_dcmpgt>
 8012f62:	b9c8      	cbnz	r0, 8012f98 <_dtoa_r+0x6f8>
 8012f64:	4642      	mov	r2, r8
 8012f66:	464b      	mov	r3, r9
 8012f68:	4630      	mov	r0, r6
 8012f6a:	4639      	mov	r1, r7
 8012f6c:	f7ed fdc4 	bl	8000af8 <__aeabi_dcmpeq>
 8012f70:	b110      	cbz	r0, 8012f78 <_dtoa_r+0x6d8>
 8012f72:	9b02      	ldr	r3, [sp, #8]
 8012f74:	07d9      	lsls	r1, r3, #31
 8012f76:	d40f      	bmi.n	8012f98 <_dtoa_r+0x6f8>
 8012f78:	4620      	mov	r0, r4
 8012f7a:	4659      	mov	r1, fp
 8012f7c:	f000 feba 	bl	8013cf4 <_Bfree>
 8012f80:	2300      	movs	r3, #0
 8012f82:	702b      	strb	r3, [r5, #0]
 8012f84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012f86:	f10a 0001 	add.w	r0, sl, #1
 8012f8a:	6018      	str	r0, [r3, #0]
 8012f8c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	f43f acd8 	beq.w	8012944 <_dtoa_r+0xa4>
 8012f94:	601d      	str	r5, [r3, #0]
 8012f96:	e4d5      	b.n	8012944 <_dtoa_r+0xa4>
 8012f98:	f8cd a01c 	str.w	sl, [sp, #28]
 8012f9c:	462b      	mov	r3, r5
 8012f9e:	461d      	mov	r5, r3
 8012fa0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012fa4:	2a39      	cmp	r2, #57	; 0x39
 8012fa6:	d108      	bne.n	8012fba <_dtoa_r+0x71a>
 8012fa8:	9a00      	ldr	r2, [sp, #0]
 8012faa:	429a      	cmp	r2, r3
 8012fac:	d1f7      	bne.n	8012f9e <_dtoa_r+0x6fe>
 8012fae:	9a07      	ldr	r2, [sp, #28]
 8012fb0:	9900      	ldr	r1, [sp, #0]
 8012fb2:	3201      	adds	r2, #1
 8012fb4:	9207      	str	r2, [sp, #28]
 8012fb6:	2230      	movs	r2, #48	; 0x30
 8012fb8:	700a      	strb	r2, [r1, #0]
 8012fba:	781a      	ldrb	r2, [r3, #0]
 8012fbc:	3201      	adds	r2, #1
 8012fbe:	701a      	strb	r2, [r3, #0]
 8012fc0:	e78c      	b.n	8012edc <_dtoa_r+0x63c>
 8012fc2:	4b7f      	ldr	r3, [pc, #508]	; (80131c0 <_dtoa_r+0x920>)
 8012fc4:	2200      	movs	r2, #0
 8012fc6:	f7ed fb2f 	bl	8000628 <__aeabi_dmul>
 8012fca:	2200      	movs	r2, #0
 8012fcc:	2300      	movs	r3, #0
 8012fce:	4606      	mov	r6, r0
 8012fd0:	460f      	mov	r7, r1
 8012fd2:	f7ed fd91 	bl	8000af8 <__aeabi_dcmpeq>
 8012fd6:	2800      	cmp	r0, #0
 8012fd8:	d09b      	beq.n	8012f12 <_dtoa_r+0x672>
 8012fda:	e7cd      	b.n	8012f78 <_dtoa_r+0x6d8>
 8012fdc:	9a08      	ldr	r2, [sp, #32]
 8012fde:	2a00      	cmp	r2, #0
 8012fe0:	f000 80c4 	beq.w	801316c <_dtoa_r+0x8cc>
 8012fe4:	9a05      	ldr	r2, [sp, #20]
 8012fe6:	2a01      	cmp	r2, #1
 8012fe8:	f300 80a8 	bgt.w	801313c <_dtoa_r+0x89c>
 8012fec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012fee:	2a00      	cmp	r2, #0
 8012ff0:	f000 80a0 	beq.w	8013134 <_dtoa_r+0x894>
 8012ff4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012ff8:	9e06      	ldr	r6, [sp, #24]
 8012ffa:	4645      	mov	r5, r8
 8012ffc:	9a04      	ldr	r2, [sp, #16]
 8012ffe:	2101      	movs	r1, #1
 8013000:	441a      	add	r2, r3
 8013002:	4620      	mov	r0, r4
 8013004:	4498      	add	r8, r3
 8013006:	9204      	str	r2, [sp, #16]
 8013008:	f000 ff7a 	bl	8013f00 <__i2b>
 801300c:	4607      	mov	r7, r0
 801300e:	2d00      	cmp	r5, #0
 8013010:	dd0b      	ble.n	801302a <_dtoa_r+0x78a>
 8013012:	9b04      	ldr	r3, [sp, #16]
 8013014:	2b00      	cmp	r3, #0
 8013016:	dd08      	ble.n	801302a <_dtoa_r+0x78a>
 8013018:	42ab      	cmp	r3, r5
 801301a:	9a04      	ldr	r2, [sp, #16]
 801301c:	bfa8      	it	ge
 801301e:	462b      	movge	r3, r5
 8013020:	eba8 0803 	sub.w	r8, r8, r3
 8013024:	1aed      	subs	r5, r5, r3
 8013026:	1ad3      	subs	r3, r2, r3
 8013028:	9304      	str	r3, [sp, #16]
 801302a:	9b06      	ldr	r3, [sp, #24]
 801302c:	b1fb      	cbz	r3, 801306e <_dtoa_r+0x7ce>
 801302e:	9b08      	ldr	r3, [sp, #32]
 8013030:	2b00      	cmp	r3, #0
 8013032:	f000 809f 	beq.w	8013174 <_dtoa_r+0x8d4>
 8013036:	2e00      	cmp	r6, #0
 8013038:	dd11      	ble.n	801305e <_dtoa_r+0x7be>
 801303a:	4639      	mov	r1, r7
 801303c:	4632      	mov	r2, r6
 801303e:	4620      	mov	r0, r4
 8013040:	f001 f81a 	bl	8014078 <__pow5mult>
 8013044:	465a      	mov	r2, fp
 8013046:	4601      	mov	r1, r0
 8013048:	4607      	mov	r7, r0
 801304a:	4620      	mov	r0, r4
 801304c:	f000 ff6e 	bl	8013f2c <__multiply>
 8013050:	4659      	mov	r1, fp
 8013052:	9007      	str	r0, [sp, #28]
 8013054:	4620      	mov	r0, r4
 8013056:	f000 fe4d 	bl	8013cf4 <_Bfree>
 801305a:	9b07      	ldr	r3, [sp, #28]
 801305c:	469b      	mov	fp, r3
 801305e:	9b06      	ldr	r3, [sp, #24]
 8013060:	1b9a      	subs	r2, r3, r6
 8013062:	d004      	beq.n	801306e <_dtoa_r+0x7ce>
 8013064:	4659      	mov	r1, fp
 8013066:	4620      	mov	r0, r4
 8013068:	f001 f806 	bl	8014078 <__pow5mult>
 801306c:	4683      	mov	fp, r0
 801306e:	2101      	movs	r1, #1
 8013070:	4620      	mov	r0, r4
 8013072:	f000 ff45 	bl	8013f00 <__i2b>
 8013076:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013078:	2b00      	cmp	r3, #0
 801307a:	4606      	mov	r6, r0
 801307c:	dd7c      	ble.n	8013178 <_dtoa_r+0x8d8>
 801307e:	461a      	mov	r2, r3
 8013080:	4601      	mov	r1, r0
 8013082:	4620      	mov	r0, r4
 8013084:	f000 fff8 	bl	8014078 <__pow5mult>
 8013088:	9b05      	ldr	r3, [sp, #20]
 801308a:	2b01      	cmp	r3, #1
 801308c:	4606      	mov	r6, r0
 801308e:	dd76      	ble.n	801317e <_dtoa_r+0x8de>
 8013090:	2300      	movs	r3, #0
 8013092:	9306      	str	r3, [sp, #24]
 8013094:	6933      	ldr	r3, [r6, #16]
 8013096:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801309a:	6918      	ldr	r0, [r3, #16]
 801309c:	f000 fee0 	bl	8013e60 <__hi0bits>
 80130a0:	f1c0 0020 	rsb	r0, r0, #32
 80130a4:	9b04      	ldr	r3, [sp, #16]
 80130a6:	4418      	add	r0, r3
 80130a8:	f010 001f 	ands.w	r0, r0, #31
 80130ac:	f000 8086 	beq.w	80131bc <_dtoa_r+0x91c>
 80130b0:	f1c0 0320 	rsb	r3, r0, #32
 80130b4:	2b04      	cmp	r3, #4
 80130b6:	dd7f      	ble.n	80131b8 <_dtoa_r+0x918>
 80130b8:	f1c0 001c 	rsb	r0, r0, #28
 80130bc:	9b04      	ldr	r3, [sp, #16]
 80130be:	4403      	add	r3, r0
 80130c0:	4480      	add	r8, r0
 80130c2:	4405      	add	r5, r0
 80130c4:	9304      	str	r3, [sp, #16]
 80130c6:	f1b8 0f00 	cmp.w	r8, #0
 80130ca:	dd05      	ble.n	80130d8 <_dtoa_r+0x838>
 80130cc:	4659      	mov	r1, fp
 80130ce:	4642      	mov	r2, r8
 80130d0:	4620      	mov	r0, r4
 80130d2:	f001 f82b 	bl	801412c <__lshift>
 80130d6:	4683      	mov	fp, r0
 80130d8:	9b04      	ldr	r3, [sp, #16]
 80130da:	2b00      	cmp	r3, #0
 80130dc:	dd05      	ble.n	80130ea <_dtoa_r+0x84a>
 80130de:	4631      	mov	r1, r6
 80130e0:	461a      	mov	r2, r3
 80130e2:	4620      	mov	r0, r4
 80130e4:	f001 f822 	bl	801412c <__lshift>
 80130e8:	4606      	mov	r6, r0
 80130ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d069      	beq.n	80131c4 <_dtoa_r+0x924>
 80130f0:	4631      	mov	r1, r6
 80130f2:	4658      	mov	r0, fp
 80130f4:	f001 f886 	bl	8014204 <__mcmp>
 80130f8:	2800      	cmp	r0, #0
 80130fa:	da63      	bge.n	80131c4 <_dtoa_r+0x924>
 80130fc:	2300      	movs	r3, #0
 80130fe:	4659      	mov	r1, fp
 8013100:	220a      	movs	r2, #10
 8013102:	4620      	mov	r0, r4
 8013104:	f000 fe18 	bl	8013d38 <__multadd>
 8013108:	9b08      	ldr	r3, [sp, #32]
 801310a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801310e:	4683      	mov	fp, r0
 8013110:	2b00      	cmp	r3, #0
 8013112:	f000 818f 	beq.w	8013434 <_dtoa_r+0xb94>
 8013116:	4639      	mov	r1, r7
 8013118:	2300      	movs	r3, #0
 801311a:	220a      	movs	r2, #10
 801311c:	4620      	mov	r0, r4
 801311e:	f000 fe0b 	bl	8013d38 <__multadd>
 8013122:	f1b9 0f00 	cmp.w	r9, #0
 8013126:	4607      	mov	r7, r0
 8013128:	f300 808e 	bgt.w	8013248 <_dtoa_r+0x9a8>
 801312c:	9b05      	ldr	r3, [sp, #20]
 801312e:	2b02      	cmp	r3, #2
 8013130:	dc50      	bgt.n	80131d4 <_dtoa_r+0x934>
 8013132:	e089      	b.n	8013248 <_dtoa_r+0x9a8>
 8013134:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013136:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801313a:	e75d      	b.n	8012ff8 <_dtoa_r+0x758>
 801313c:	9b01      	ldr	r3, [sp, #4]
 801313e:	1e5e      	subs	r6, r3, #1
 8013140:	9b06      	ldr	r3, [sp, #24]
 8013142:	42b3      	cmp	r3, r6
 8013144:	bfbf      	itttt	lt
 8013146:	9b06      	ldrlt	r3, [sp, #24]
 8013148:	9606      	strlt	r6, [sp, #24]
 801314a:	1af2      	sublt	r2, r6, r3
 801314c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801314e:	bfb6      	itet	lt
 8013150:	189b      	addlt	r3, r3, r2
 8013152:	1b9e      	subge	r6, r3, r6
 8013154:	930d      	strlt	r3, [sp, #52]	; 0x34
 8013156:	9b01      	ldr	r3, [sp, #4]
 8013158:	bfb8      	it	lt
 801315a:	2600      	movlt	r6, #0
 801315c:	2b00      	cmp	r3, #0
 801315e:	bfb5      	itete	lt
 8013160:	eba8 0503 	sublt.w	r5, r8, r3
 8013164:	9b01      	ldrge	r3, [sp, #4]
 8013166:	2300      	movlt	r3, #0
 8013168:	4645      	movge	r5, r8
 801316a:	e747      	b.n	8012ffc <_dtoa_r+0x75c>
 801316c:	9e06      	ldr	r6, [sp, #24]
 801316e:	9f08      	ldr	r7, [sp, #32]
 8013170:	4645      	mov	r5, r8
 8013172:	e74c      	b.n	801300e <_dtoa_r+0x76e>
 8013174:	9a06      	ldr	r2, [sp, #24]
 8013176:	e775      	b.n	8013064 <_dtoa_r+0x7c4>
 8013178:	9b05      	ldr	r3, [sp, #20]
 801317a:	2b01      	cmp	r3, #1
 801317c:	dc18      	bgt.n	80131b0 <_dtoa_r+0x910>
 801317e:	9b02      	ldr	r3, [sp, #8]
 8013180:	b9b3      	cbnz	r3, 80131b0 <_dtoa_r+0x910>
 8013182:	9b03      	ldr	r3, [sp, #12]
 8013184:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013188:	b9a3      	cbnz	r3, 80131b4 <_dtoa_r+0x914>
 801318a:	9b03      	ldr	r3, [sp, #12]
 801318c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013190:	0d1b      	lsrs	r3, r3, #20
 8013192:	051b      	lsls	r3, r3, #20
 8013194:	b12b      	cbz	r3, 80131a2 <_dtoa_r+0x902>
 8013196:	9b04      	ldr	r3, [sp, #16]
 8013198:	3301      	adds	r3, #1
 801319a:	9304      	str	r3, [sp, #16]
 801319c:	f108 0801 	add.w	r8, r8, #1
 80131a0:	2301      	movs	r3, #1
 80131a2:	9306      	str	r3, [sp, #24]
 80131a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	f47f af74 	bne.w	8013094 <_dtoa_r+0x7f4>
 80131ac:	2001      	movs	r0, #1
 80131ae:	e779      	b.n	80130a4 <_dtoa_r+0x804>
 80131b0:	2300      	movs	r3, #0
 80131b2:	e7f6      	b.n	80131a2 <_dtoa_r+0x902>
 80131b4:	9b02      	ldr	r3, [sp, #8]
 80131b6:	e7f4      	b.n	80131a2 <_dtoa_r+0x902>
 80131b8:	d085      	beq.n	80130c6 <_dtoa_r+0x826>
 80131ba:	4618      	mov	r0, r3
 80131bc:	301c      	adds	r0, #28
 80131be:	e77d      	b.n	80130bc <_dtoa_r+0x81c>
 80131c0:	40240000 	.word	0x40240000
 80131c4:	9b01      	ldr	r3, [sp, #4]
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	dc38      	bgt.n	801323c <_dtoa_r+0x99c>
 80131ca:	9b05      	ldr	r3, [sp, #20]
 80131cc:	2b02      	cmp	r3, #2
 80131ce:	dd35      	ble.n	801323c <_dtoa_r+0x99c>
 80131d0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80131d4:	f1b9 0f00 	cmp.w	r9, #0
 80131d8:	d10d      	bne.n	80131f6 <_dtoa_r+0x956>
 80131da:	4631      	mov	r1, r6
 80131dc:	464b      	mov	r3, r9
 80131de:	2205      	movs	r2, #5
 80131e0:	4620      	mov	r0, r4
 80131e2:	f000 fda9 	bl	8013d38 <__multadd>
 80131e6:	4601      	mov	r1, r0
 80131e8:	4606      	mov	r6, r0
 80131ea:	4658      	mov	r0, fp
 80131ec:	f001 f80a 	bl	8014204 <__mcmp>
 80131f0:	2800      	cmp	r0, #0
 80131f2:	f73f adbd 	bgt.w	8012d70 <_dtoa_r+0x4d0>
 80131f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80131f8:	9d00      	ldr	r5, [sp, #0]
 80131fa:	ea6f 0a03 	mvn.w	sl, r3
 80131fe:	f04f 0800 	mov.w	r8, #0
 8013202:	4631      	mov	r1, r6
 8013204:	4620      	mov	r0, r4
 8013206:	f000 fd75 	bl	8013cf4 <_Bfree>
 801320a:	2f00      	cmp	r7, #0
 801320c:	f43f aeb4 	beq.w	8012f78 <_dtoa_r+0x6d8>
 8013210:	f1b8 0f00 	cmp.w	r8, #0
 8013214:	d005      	beq.n	8013222 <_dtoa_r+0x982>
 8013216:	45b8      	cmp	r8, r7
 8013218:	d003      	beq.n	8013222 <_dtoa_r+0x982>
 801321a:	4641      	mov	r1, r8
 801321c:	4620      	mov	r0, r4
 801321e:	f000 fd69 	bl	8013cf4 <_Bfree>
 8013222:	4639      	mov	r1, r7
 8013224:	4620      	mov	r0, r4
 8013226:	f000 fd65 	bl	8013cf4 <_Bfree>
 801322a:	e6a5      	b.n	8012f78 <_dtoa_r+0x6d8>
 801322c:	2600      	movs	r6, #0
 801322e:	4637      	mov	r7, r6
 8013230:	e7e1      	b.n	80131f6 <_dtoa_r+0x956>
 8013232:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8013234:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8013238:	4637      	mov	r7, r6
 801323a:	e599      	b.n	8012d70 <_dtoa_r+0x4d0>
 801323c:	9b08      	ldr	r3, [sp, #32]
 801323e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8013242:	2b00      	cmp	r3, #0
 8013244:	f000 80fd 	beq.w	8013442 <_dtoa_r+0xba2>
 8013248:	2d00      	cmp	r5, #0
 801324a:	dd05      	ble.n	8013258 <_dtoa_r+0x9b8>
 801324c:	4639      	mov	r1, r7
 801324e:	462a      	mov	r2, r5
 8013250:	4620      	mov	r0, r4
 8013252:	f000 ff6b 	bl	801412c <__lshift>
 8013256:	4607      	mov	r7, r0
 8013258:	9b06      	ldr	r3, [sp, #24]
 801325a:	2b00      	cmp	r3, #0
 801325c:	d05c      	beq.n	8013318 <_dtoa_r+0xa78>
 801325e:	6879      	ldr	r1, [r7, #4]
 8013260:	4620      	mov	r0, r4
 8013262:	f000 fd07 	bl	8013c74 <_Balloc>
 8013266:	4605      	mov	r5, r0
 8013268:	b928      	cbnz	r0, 8013276 <_dtoa_r+0x9d6>
 801326a:	4b80      	ldr	r3, [pc, #512]	; (801346c <_dtoa_r+0xbcc>)
 801326c:	4602      	mov	r2, r0
 801326e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8013272:	f7ff bb2e 	b.w	80128d2 <_dtoa_r+0x32>
 8013276:	693a      	ldr	r2, [r7, #16]
 8013278:	3202      	adds	r2, #2
 801327a:	0092      	lsls	r2, r2, #2
 801327c:	f107 010c 	add.w	r1, r7, #12
 8013280:	300c      	adds	r0, #12
 8013282:	f000 fcdc 	bl	8013c3e <memcpy>
 8013286:	2201      	movs	r2, #1
 8013288:	4629      	mov	r1, r5
 801328a:	4620      	mov	r0, r4
 801328c:	f000 ff4e 	bl	801412c <__lshift>
 8013290:	9b00      	ldr	r3, [sp, #0]
 8013292:	3301      	adds	r3, #1
 8013294:	9301      	str	r3, [sp, #4]
 8013296:	9b00      	ldr	r3, [sp, #0]
 8013298:	444b      	add	r3, r9
 801329a:	9307      	str	r3, [sp, #28]
 801329c:	9b02      	ldr	r3, [sp, #8]
 801329e:	f003 0301 	and.w	r3, r3, #1
 80132a2:	46b8      	mov	r8, r7
 80132a4:	9306      	str	r3, [sp, #24]
 80132a6:	4607      	mov	r7, r0
 80132a8:	9b01      	ldr	r3, [sp, #4]
 80132aa:	4631      	mov	r1, r6
 80132ac:	3b01      	subs	r3, #1
 80132ae:	4658      	mov	r0, fp
 80132b0:	9302      	str	r3, [sp, #8]
 80132b2:	f7ff fa67 	bl	8012784 <quorem>
 80132b6:	4603      	mov	r3, r0
 80132b8:	3330      	adds	r3, #48	; 0x30
 80132ba:	9004      	str	r0, [sp, #16]
 80132bc:	4641      	mov	r1, r8
 80132be:	4658      	mov	r0, fp
 80132c0:	9308      	str	r3, [sp, #32]
 80132c2:	f000 ff9f 	bl	8014204 <__mcmp>
 80132c6:	463a      	mov	r2, r7
 80132c8:	4681      	mov	r9, r0
 80132ca:	4631      	mov	r1, r6
 80132cc:	4620      	mov	r0, r4
 80132ce:	f000 ffb5 	bl	801423c <__mdiff>
 80132d2:	68c2      	ldr	r2, [r0, #12]
 80132d4:	9b08      	ldr	r3, [sp, #32]
 80132d6:	4605      	mov	r5, r0
 80132d8:	bb02      	cbnz	r2, 801331c <_dtoa_r+0xa7c>
 80132da:	4601      	mov	r1, r0
 80132dc:	4658      	mov	r0, fp
 80132de:	f000 ff91 	bl	8014204 <__mcmp>
 80132e2:	9b08      	ldr	r3, [sp, #32]
 80132e4:	4602      	mov	r2, r0
 80132e6:	4629      	mov	r1, r5
 80132e8:	4620      	mov	r0, r4
 80132ea:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80132ee:	f000 fd01 	bl	8013cf4 <_Bfree>
 80132f2:	9b05      	ldr	r3, [sp, #20]
 80132f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80132f6:	9d01      	ldr	r5, [sp, #4]
 80132f8:	ea43 0102 	orr.w	r1, r3, r2
 80132fc:	9b06      	ldr	r3, [sp, #24]
 80132fe:	430b      	orrs	r3, r1
 8013300:	9b08      	ldr	r3, [sp, #32]
 8013302:	d10d      	bne.n	8013320 <_dtoa_r+0xa80>
 8013304:	2b39      	cmp	r3, #57	; 0x39
 8013306:	d029      	beq.n	801335c <_dtoa_r+0xabc>
 8013308:	f1b9 0f00 	cmp.w	r9, #0
 801330c:	dd01      	ble.n	8013312 <_dtoa_r+0xa72>
 801330e:	9b04      	ldr	r3, [sp, #16]
 8013310:	3331      	adds	r3, #49	; 0x31
 8013312:	9a02      	ldr	r2, [sp, #8]
 8013314:	7013      	strb	r3, [r2, #0]
 8013316:	e774      	b.n	8013202 <_dtoa_r+0x962>
 8013318:	4638      	mov	r0, r7
 801331a:	e7b9      	b.n	8013290 <_dtoa_r+0x9f0>
 801331c:	2201      	movs	r2, #1
 801331e:	e7e2      	b.n	80132e6 <_dtoa_r+0xa46>
 8013320:	f1b9 0f00 	cmp.w	r9, #0
 8013324:	db06      	blt.n	8013334 <_dtoa_r+0xa94>
 8013326:	9905      	ldr	r1, [sp, #20]
 8013328:	ea41 0909 	orr.w	r9, r1, r9
 801332c:	9906      	ldr	r1, [sp, #24]
 801332e:	ea59 0101 	orrs.w	r1, r9, r1
 8013332:	d120      	bne.n	8013376 <_dtoa_r+0xad6>
 8013334:	2a00      	cmp	r2, #0
 8013336:	ddec      	ble.n	8013312 <_dtoa_r+0xa72>
 8013338:	4659      	mov	r1, fp
 801333a:	2201      	movs	r2, #1
 801333c:	4620      	mov	r0, r4
 801333e:	9301      	str	r3, [sp, #4]
 8013340:	f000 fef4 	bl	801412c <__lshift>
 8013344:	4631      	mov	r1, r6
 8013346:	4683      	mov	fp, r0
 8013348:	f000 ff5c 	bl	8014204 <__mcmp>
 801334c:	2800      	cmp	r0, #0
 801334e:	9b01      	ldr	r3, [sp, #4]
 8013350:	dc02      	bgt.n	8013358 <_dtoa_r+0xab8>
 8013352:	d1de      	bne.n	8013312 <_dtoa_r+0xa72>
 8013354:	07da      	lsls	r2, r3, #31
 8013356:	d5dc      	bpl.n	8013312 <_dtoa_r+0xa72>
 8013358:	2b39      	cmp	r3, #57	; 0x39
 801335a:	d1d8      	bne.n	801330e <_dtoa_r+0xa6e>
 801335c:	9a02      	ldr	r2, [sp, #8]
 801335e:	2339      	movs	r3, #57	; 0x39
 8013360:	7013      	strb	r3, [r2, #0]
 8013362:	462b      	mov	r3, r5
 8013364:	461d      	mov	r5, r3
 8013366:	3b01      	subs	r3, #1
 8013368:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801336c:	2a39      	cmp	r2, #57	; 0x39
 801336e:	d050      	beq.n	8013412 <_dtoa_r+0xb72>
 8013370:	3201      	adds	r2, #1
 8013372:	701a      	strb	r2, [r3, #0]
 8013374:	e745      	b.n	8013202 <_dtoa_r+0x962>
 8013376:	2a00      	cmp	r2, #0
 8013378:	dd03      	ble.n	8013382 <_dtoa_r+0xae2>
 801337a:	2b39      	cmp	r3, #57	; 0x39
 801337c:	d0ee      	beq.n	801335c <_dtoa_r+0xabc>
 801337e:	3301      	adds	r3, #1
 8013380:	e7c7      	b.n	8013312 <_dtoa_r+0xa72>
 8013382:	9a01      	ldr	r2, [sp, #4]
 8013384:	9907      	ldr	r1, [sp, #28]
 8013386:	f802 3c01 	strb.w	r3, [r2, #-1]
 801338a:	428a      	cmp	r2, r1
 801338c:	d02a      	beq.n	80133e4 <_dtoa_r+0xb44>
 801338e:	4659      	mov	r1, fp
 8013390:	2300      	movs	r3, #0
 8013392:	220a      	movs	r2, #10
 8013394:	4620      	mov	r0, r4
 8013396:	f000 fccf 	bl	8013d38 <__multadd>
 801339a:	45b8      	cmp	r8, r7
 801339c:	4683      	mov	fp, r0
 801339e:	f04f 0300 	mov.w	r3, #0
 80133a2:	f04f 020a 	mov.w	r2, #10
 80133a6:	4641      	mov	r1, r8
 80133a8:	4620      	mov	r0, r4
 80133aa:	d107      	bne.n	80133bc <_dtoa_r+0xb1c>
 80133ac:	f000 fcc4 	bl	8013d38 <__multadd>
 80133b0:	4680      	mov	r8, r0
 80133b2:	4607      	mov	r7, r0
 80133b4:	9b01      	ldr	r3, [sp, #4]
 80133b6:	3301      	adds	r3, #1
 80133b8:	9301      	str	r3, [sp, #4]
 80133ba:	e775      	b.n	80132a8 <_dtoa_r+0xa08>
 80133bc:	f000 fcbc 	bl	8013d38 <__multadd>
 80133c0:	4639      	mov	r1, r7
 80133c2:	4680      	mov	r8, r0
 80133c4:	2300      	movs	r3, #0
 80133c6:	220a      	movs	r2, #10
 80133c8:	4620      	mov	r0, r4
 80133ca:	f000 fcb5 	bl	8013d38 <__multadd>
 80133ce:	4607      	mov	r7, r0
 80133d0:	e7f0      	b.n	80133b4 <_dtoa_r+0xb14>
 80133d2:	f1b9 0f00 	cmp.w	r9, #0
 80133d6:	9a00      	ldr	r2, [sp, #0]
 80133d8:	bfcc      	ite	gt
 80133da:	464d      	movgt	r5, r9
 80133dc:	2501      	movle	r5, #1
 80133de:	4415      	add	r5, r2
 80133e0:	f04f 0800 	mov.w	r8, #0
 80133e4:	4659      	mov	r1, fp
 80133e6:	2201      	movs	r2, #1
 80133e8:	4620      	mov	r0, r4
 80133ea:	9301      	str	r3, [sp, #4]
 80133ec:	f000 fe9e 	bl	801412c <__lshift>
 80133f0:	4631      	mov	r1, r6
 80133f2:	4683      	mov	fp, r0
 80133f4:	f000 ff06 	bl	8014204 <__mcmp>
 80133f8:	2800      	cmp	r0, #0
 80133fa:	dcb2      	bgt.n	8013362 <_dtoa_r+0xac2>
 80133fc:	d102      	bne.n	8013404 <_dtoa_r+0xb64>
 80133fe:	9b01      	ldr	r3, [sp, #4]
 8013400:	07db      	lsls	r3, r3, #31
 8013402:	d4ae      	bmi.n	8013362 <_dtoa_r+0xac2>
 8013404:	462b      	mov	r3, r5
 8013406:	461d      	mov	r5, r3
 8013408:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801340c:	2a30      	cmp	r2, #48	; 0x30
 801340e:	d0fa      	beq.n	8013406 <_dtoa_r+0xb66>
 8013410:	e6f7      	b.n	8013202 <_dtoa_r+0x962>
 8013412:	9a00      	ldr	r2, [sp, #0]
 8013414:	429a      	cmp	r2, r3
 8013416:	d1a5      	bne.n	8013364 <_dtoa_r+0xac4>
 8013418:	f10a 0a01 	add.w	sl, sl, #1
 801341c:	2331      	movs	r3, #49	; 0x31
 801341e:	e779      	b.n	8013314 <_dtoa_r+0xa74>
 8013420:	4b13      	ldr	r3, [pc, #76]	; (8013470 <_dtoa_r+0xbd0>)
 8013422:	f7ff baaf 	b.w	8012984 <_dtoa_r+0xe4>
 8013426:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013428:	2b00      	cmp	r3, #0
 801342a:	f47f aa86 	bne.w	801293a <_dtoa_r+0x9a>
 801342e:	4b11      	ldr	r3, [pc, #68]	; (8013474 <_dtoa_r+0xbd4>)
 8013430:	f7ff baa8 	b.w	8012984 <_dtoa_r+0xe4>
 8013434:	f1b9 0f00 	cmp.w	r9, #0
 8013438:	dc03      	bgt.n	8013442 <_dtoa_r+0xba2>
 801343a:	9b05      	ldr	r3, [sp, #20]
 801343c:	2b02      	cmp	r3, #2
 801343e:	f73f aec9 	bgt.w	80131d4 <_dtoa_r+0x934>
 8013442:	9d00      	ldr	r5, [sp, #0]
 8013444:	4631      	mov	r1, r6
 8013446:	4658      	mov	r0, fp
 8013448:	f7ff f99c 	bl	8012784 <quorem>
 801344c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8013450:	f805 3b01 	strb.w	r3, [r5], #1
 8013454:	9a00      	ldr	r2, [sp, #0]
 8013456:	1aaa      	subs	r2, r5, r2
 8013458:	4591      	cmp	r9, r2
 801345a:	ddba      	ble.n	80133d2 <_dtoa_r+0xb32>
 801345c:	4659      	mov	r1, fp
 801345e:	2300      	movs	r3, #0
 8013460:	220a      	movs	r2, #10
 8013462:	4620      	mov	r0, r4
 8013464:	f000 fc68 	bl	8013d38 <__multadd>
 8013468:	4683      	mov	fp, r0
 801346a:	e7eb      	b.n	8013444 <_dtoa_r+0xba4>
 801346c:	08018b1c 	.word	0x08018b1c
 8013470:	08018ee4 	.word	0x08018ee4
 8013474:	08018ab0 	.word	0x08018ab0

08013478 <fiprintf>:
 8013478:	b40e      	push	{r1, r2, r3}
 801347a:	b503      	push	{r0, r1, lr}
 801347c:	4601      	mov	r1, r0
 801347e:	ab03      	add	r3, sp, #12
 8013480:	4805      	ldr	r0, [pc, #20]	; (8013498 <fiprintf+0x20>)
 8013482:	f853 2b04 	ldr.w	r2, [r3], #4
 8013486:	6800      	ldr	r0, [r0, #0]
 8013488:	9301      	str	r3, [sp, #4]
 801348a:	f001 fa43 	bl	8014914 <_vfiprintf_r>
 801348e:	b002      	add	sp, #8
 8013490:	f85d eb04 	ldr.w	lr, [sp], #4
 8013494:	b003      	add	sp, #12
 8013496:	4770      	bx	lr
 8013498:	20000020 	.word	0x20000020

0801349c <rshift>:
 801349c:	6903      	ldr	r3, [r0, #16]
 801349e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80134a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80134a6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80134aa:	f100 0414 	add.w	r4, r0, #20
 80134ae:	dd45      	ble.n	801353c <rshift+0xa0>
 80134b0:	f011 011f 	ands.w	r1, r1, #31
 80134b4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80134b8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80134bc:	d10c      	bne.n	80134d8 <rshift+0x3c>
 80134be:	f100 0710 	add.w	r7, r0, #16
 80134c2:	4629      	mov	r1, r5
 80134c4:	42b1      	cmp	r1, r6
 80134c6:	d334      	bcc.n	8013532 <rshift+0x96>
 80134c8:	1a9b      	subs	r3, r3, r2
 80134ca:	009b      	lsls	r3, r3, #2
 80134cc:	1eea      	subs	r2, r5, #3
 80134ce:	4296      	cmp	r6, r2
 80134d0:	bf38      	it	cc
 80134d2:	2300      	movcc	r3, #0
 80134d4:	4423      	add	r3, r4
 80134d6:	e015      	b.n	8013504 <rshift+0x68>
 80134d8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80134dc:	f1c1 0820 	rsb	r8, r1, #32
 80134e0:	40cf      	lsrs	r7, r1
 80134e2:	f105 0e04 	add.w	lr, r5, #4
 80134e6:	46a1      	mov	r9, r4
 80134e8:	4576      	cmp	r6, lr
 80134ea:	46f4      	mov	ip, lr
 80134ec:	d815      	bhi.n	801351a <rshift+0x7e>
 80134ee:	1a9b      	subs	r3, r3, r2
 80134f0:	009a      	lsls	r2, r3, #2
 80134f2:	3a04      	subs	r2, #4
 80134f4:	3501      	adds	r5, #1
 80134f6:	42ae      	cmp	r6, r5
 80134f8:	bf38      	it	cc
 80134fa:	2200      	movcc	r2, #0
 80134fc:	18a3      	adds	r3, r4, r2
 80134fe:	50a7      	str	r7, [r4, r2]
 8013500:	b107      	cbz	r7, 8013504 <rshift+0x68>
 8013502:	3304      	adds	r3, #4
 8013504:	1b1a      	subs	r2, r3, r4
 8013506:	42a3      	cmp	r3, r4
 8013508:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801350c:	bf08      	it	eq
 801350e:	2300      	moveq	r3, #0
 8013510:	6102      	str	r2, [r0, #16]
 8013512:	bf08      	it	eq
 8013514:	6143      	streq	r3, [r0, #20]
 8013516:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801351a:	f8dc c000 	ldr.w	ip, [ip]
 801351e:	fa0c fc08 	lsl.w	ip, ip, r8
 8013522:	ea4c 0707 	orr.w	r7, ip, r7
 8013526:	f849 7b04 	str.w	r7, [r9], #4
 801352a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801352e:	40cf      	lsrs	r7, r1
 8013530:	e7da      	b.n	80134e8 <rshift+0x4c>
 8013532:	f851 cb04 	ldr.w	ip, [r1], #4
 8013536:	f847 cf04 	str.w	ip, [r7, #4]!
 801353a:	e7c3      	b.n	80134c4 <rshift+0x28>
 801353c:	4623      	mov	r3, r4
 801353e:	e7e1      	b.n	8013504 <rshift+0x68>

08013540 <__hexdig_fun>:
 8013540:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8013544:	2b09      	cmp	r3, #9
 8013546:	d802      	bhi.n	801354e <__hexdig_fun+0xe>
 8013548:	3820      	subs	r0, #32
 801354a:	b2c0      	uxtb	r0, r0
 801354c:	4770      	bx	lr
 801354e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8013552:	2b05      	cmp	r3, #5
 8013554:	d801      	bhi.n	801355a <__hexdig_fun+0x1a>
 8013556:	3847      	subs	r0, #71	; 0x47
 8013558:	e7f7      	b.n	801354a <__hexdig_fun+0xa>
 801355a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801355e:	2b05      	cmp	r3, #5
 8013560:	d801      	bhi.n	8013566 <__hexdig_fun+0x26>
 8013562:	3827      	subs	r0, #39	; 0x27
 8013564:	e7f1      	b.n	801354a <__hexdig_fun+0xa>
 8013566:	2000      	movs	r0, #0
 8013568:	4770      	bx	lr
	...

0801356c <__gethex>:
 801356c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013570:	ed2d 8b02 	vpush	{d8}
 8013574:	b089      	sub	sp, #36	; 0x24
 8013576:	ee08 0a10 	vmov	s16, r0
 801357a:	9304      	str	r3, [sp, #16]
 801357c:	4bbc      	ldr	r3, [pc, #752]	; (8013870 <__gethex+0x304>)
 801357e:	681b      	ldr	r3, [r3, #0]
 8013580:	9301      	str	r3, [sp, #4]
 8013582:	4618      	mov	r0, r3
 8013584:	468b      	mov	fp, r1
 8013586:	4690      	mov	r8, r2
 8013588:	f7ec fe34 	bl	80001f4 <strlen>
 801358c:	9b01      	ldr	r3, [sp, #4]
 801358e:	f8db 2000 	ldr.w	r2, [fp]
 8013592:	4403      	add	r3, r0
 8013594:	4682      	mov	sl, r0
 8013596:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801359a:	9305      	str	r3, [sp, #20]
 801359c:	1c93      	adds	r3, r2, #2
 801359e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80135a2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80135a6:	32fe      	adds	r2, #254	; 0xfe
 80135a8:	18d1      	adds	r1, r2, r3
 80135aa:	461f      	mov	r7, r3
 80135ac:	f813 0b01 	ldrb.w	r0, [r3], #1
 80135b0:	9100      	str	r1, [sp, #0]
 80135b2:	2830      	cmp	r0, #48	; 0x30
 80135b4:	d0f8      	beq.n	80135a8 <__gethex+0x3c>
 80135b6:	f7ff ffc3 	bl	8013540 <__hexdig_fun>
 80135ba:	4604      	mov	r4, r0
 80135bc:	2800      	cmp	r0, #0
 80135be:	d13a      	bne.n	8013636 <__gethex+0xca>
 80135c0:	9901      	ldr	r1, [sp, #4]
 80135c2:	4652      	mov	r2, sl
 80135c4:	4638      	mov	r0, r7
 80135c6:	f7fe f831 	bl	801162c <strncmp>
 80135ca:	4605      	mov	r5, r0
 80135cc:	2800      	cmp	r0, #0
 80135ce:	d168      	bne.n	80136a2 <__gethex+0x136>
 80135d0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80135d4:	eb07 060a 	add.w	r6, r7, sl
 80135d8:	f7ff ffb2 	bl	8013540 <__hexdig_fun>
 80135dc:	2800      	cmp	r0, #0
 80135de:	d062      	beq.n	80136a6 <__gethex+0x13a>
 80135e0:	4633      	mov	r3, r6
 80135e2:	7818      	ldrb	r0, [r3, #0]
 80135e4:	2830      	cmp	r0, #48	; 0x30
 80135e6:	461f      	mov	r7, r3
 80135e8:	f103 0301 	add.w	r3, r3, #1
 80135ec:	d0f9      	beq.n	80135e2 <__gethex+0x76>
 80135ee:	f7ff ffa7 	bl	8013540 <__hexdig_fun>
 80135f2:	2301      	movs	r3, #1
 80135f4:	fab0 f480 	clz	r4, r0
 80135f8:	0964      	lsrs	r4, r4, #5
 80135fa:	4635      	mov	r5, r6
 80135fc:	9300      	str	r3, [sp, #0]
 80135fe:	463a      	mov	r2, r7
 8013600:	4616      	mov	r6, r2
 8013602:	3201      	adds	r2, #1
 8013604:	7830      	ldrb	r0, [r6, #0]
 8013606:	f7ff ff9b 	bl	8013540 <__hexdig_fun>
 801360a:	2800      	cmp	r0, #0
 801360c:	d1f8      	bne.n	8013600 <__gethex+0x94>
 801360e:	9901      	ldr	r1, [sp, #4]
 8013610:	4652      	mov	r2, sl
 8013612:	4630      	mov	r0, r6
 8013614:	f7fe f80a 	bl	801162c <strncmp>
 8013618:	b980      	cbnz	r0, 801363c <__gethex+0xd0>
 801361a:	b94d      	cbnz	r5, 8013630 <__gethex+0xc4>
 801361c:	eb06 050a 	add.w	r5, r6, sl
 8013620:	462a      	mov	r2, r5
 8013622:	4616      	mov	r6, r2
 8013624:	3201      	adds	r2, #1
 8013626:	7830      	ldrb	r0, [r6, #0]
 8013628:	f7ff ff8a 	bl	8013540 <__hexdig_fun>
 801362c:	2800      	cmp	r0, #0
 801362e:	d1f8      	bne.n	8013622 <__gethex+0xb6>
 8013630:	1bad      	subs	r5, r5, r6
 8013632:	00ad      	lsls	r5, r5, #2
 8013634:	e004      	b.n	8013640 <__gethex+0xd4>
 8013636:	2400      	movs	r4, #0
 8013638:	4625      	mov	r5, r4
 801363a:	e7e0      	b.n	80135fe <__gethex+0x92>
 801363c:	2d00      	cmp	r5, #0
 801363e:	d1f7      	bne.n	8013630 <__gethex+0xc4>
 8013640:	7833      	ldrb	r3, [r6, #0]
 8013642:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013646:	2b50      	cmp	r3, #80	; 0x50
 8013648:	d13b      	bne.n	80136c2 <__gethex+0x156>
 801364a:	7873      	ldrb	r3, [r6, #1]
 801364c:	2b2b      	cmp	r3, #43	; 0x2b
 801364e:	d02c      	beq.n	80136aa <__gethex+0x13e>
 8013650:	2b2d      	cmp	r3, #45	; 0x2d
 8013652:	d02e      	beq.n	80136b2 <__gethex+0x146>
 8013654:	1c71      	adds	r1, r6, #1
 8013656:	f04f 0900 	mov.w	r9, #0
 801365a:	7808      	ldrb	r0, [r1, #0]
 801365c:	f7ff ff70 	bl	8013540 <__hexdig_fun>
 8013660:	1e43      	subs	r3, r0, #1
 8013662:	b2db      	uxtb	r3, r3
 8013664:	2b18      	cmp	r3, #24
 8013666:	d82c      	bhi.n	80136c2 <__gethex+0x156>
 8013668:	f1a0 0210 	sub.w	r2, r0, #16
 801366c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8013670:	f7ff ff66 	bl	8013540 <__hexdig_fun>
 8013674:	1e43      	subs	r3, r0, #1
 8013676:	b2db      	uxtb	r3, r3
 8013678:	2b18      	cmp	r3, #24
 801367a:	d91d      	bls.n	80136b8 <__gethex+0x14c>
 801367c:	f1b9 0f00 	cmp.w	r9, #0
 8013680:	d000      	beq.n	8013684 <__gethex+0x118>
 8013682:	4252      	negs	r2, r2
 8013684:	4415      	add	r5, r2
 8013686:	f8cb 1000 	str.w	r1, [fp]
 801368a:	b1e4      	cbz	r4, 80136c6 <__gethex+0x15a>
 801368c:	9b00      	ldr	r3, [sp, #0]
 801368e:	2b00      	cmp	r3, #0
 8013690:	bf14      	ite	ne
 8013692:	2700      	movne	r7, #0
 8013694:	2706      	moveq	r7, #6
 8013696:	4638      	mov	r0, r7
 8013698:	b009      	add	sp, #36	; 0x24
 801369a:	ecbd 8b02 	vpop	{d8}
 801369e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136a2:	463e      	mov	r6, r7
 80136a4:	4625      	mov	r5, r4
 80136a6:	2401      	movs	r4, #1
 80136a8:	e7ca      	b.n	8013640 <__gethex+0xd4>
 80136aa:	f04f 0900 	mov.w	r9, #0
 80136ae:	1cb1      	adds	r1, r6, #2
 80136b0:	e7d3      	b.n	801365a <__gethex+0xee>
 80136b2:	f04f 0901 	mov.w	r9, #1
 80136b6:	e7fa      	b.n	80136ae <__gethex+0x142>
 80136b8:	230a      	movs	r3, #10
 80136ba:	fb03 0202 	mla	r2, r3, r2, r0
 80136be:	3a10      	subs	r2, #16
 80136c0:	e7d4      	b.n	801366c <__gethex+0x100>
 80136c2:	4631      	mov	r1, r6
 80136c4:	e7df      	b.n	8013686 <__gethex+0x11a>
 80136c6:	1bf3      	subs	r3, r6, r7
 80136c8:	3b01      	subs	r3, #1
 80136ca:	4621      	mov	r1, r4
 80136cc:	2b07      	cmp	r3, #7
 80136ce:	dc0b      	bgt.n	80136e8 <__gethex+0x17c>
 80136d0:	ee18 0a10 	vmov	r0, s16
 80136d4:	f000 face 	bl	8013c74 <_Balloc>
 80136d8:	4604      	mov	r4, r0
 80136da:	b940      	cbnz	r0, 80136ee <__gethex+0x182>
 80136dc:	4b65      	ldr	r3, [pc, #404]	; (8013874 <__gethex+0x308>)
 80136de:	4602      	mov	r2, r0
 80136e0:	21de      	movs	r1, #222	; 0xde
 80136e2:	4865      	ldr	r0, [pc, #404]	; (8013878 <__gethex+0x30c>)
 80136e4:	f7ff f81c 	bl	8012720 <__assert_func>
 80136e8:	3101      	adds	r1, #1
 80136ea:	105b      	asrs	r3, r3, #1
 80136ec:	e7ee      	b.n	80136cc <__gethex+0x160>
 80136ee:	f100 0914 	add.w	r9, r0, #20
 80136f2:	f04f 0b00 	mov.w	fp, #0
 80136f6:	f1ca 0301 	rsb	r3, sl, #1
 80136fa:	f8cd 9008 	str.w	r9, [sp, #8]
 80136fe:	f8cd b000 	str.w	fp, [sp]
 8013702:	9306      	str	r3, [sp, #24]
 8013704:	42b7      	cmp	r7, r6
 8013706:	d340      	bcc.n	801378a <__gethex+0x21e>
 8013708:	9802      	ldr	r0, [sp, #8]
 801370a:	9b00      	ldr	r3, [sp, #0]
 801370c:	f840 3b04 	str.w	r3, [r0], #4
 8013710:	eba0 0009 	sub.w	r0, r0, r9
 8013714:	1080      	asrs	r0, r0, #2
 8013716:	0146      	lsls	r6, r0, #5
 8013718:	6120      	str	r0, [r4, #16]
 801371a:	4618      	mov	r0, r3
 801371c:	f000 fba0 	bl	8013e60 <__hi0bits>
 8013720:	1a30      	subs	r0, r6, r0
 8013722:	f8d8 6000 	ldr.w	r6, [r8]
 8013726:	42b0      	cmp	r0, r6
 8013728:	dd63      	ble.n	80137f2 <__gethex+0x286>
 801372a:	1b87      	subs	r7, r0, r6
 801372c:	4639      	mov	r1, r7
 801372e:	4620      	mov	r0, r4
 8013730:	f000 ff3a 	bl	80145a8 <__any_on>
 8013734:	4682      	mov	sl, r0
 8013736:	b1a8      	cbz	r0, 8013764 <__gethex+0x1f8>
 8013738:	1e7b      	subs	r3, r7, #1
 801373a:	1159      	asrs	r1, r3, #5
 801373c:	f003 021f 	and.w	r2, r3, #31
 8013740:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8013744:	f04f 0a01 	mov.w	sl, #1
 8013748:	fa0a f202 	lsl.w	r2, sl, r2
 801374c:	420a      	tst	r2, r1
 801374e:	d009      	beq.n	8013764 <__gethex+0x1f8>
 8013750:	4553      	cmp	r3, sl
 8013752:	dd05      	ble.n	8013760 <__gethex+0x1f4>
 8013754:	1eb9      	subs	r1, r7, #2
 8013756:	4620      	mov	r0, r4
 8013758:	f000 ff26 	bl	80145a8 <__any_on>
 801375c:	2800      	cmp	r0, #0
 801375e:	d145      	bne.n	80137ec <__gethex+0x280>
 8013760:	f04f 0a02 	mov.w	sl, #2
 8013764:	4639      	mov	r1, r7
 8013766:	4620      	mov	r0, r4
 8013768:	f7ff fe98 	bl	801349c <rshift>
 801376c:	443d      	add	r5, r7
 801376e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013772:	42ab      	cmp	r3, r5
 8013774:	da4c      	bge.n	8013810 <__gethex+0x2a4>
 8013776:	ee18 0a10 	vmov	r0, s16
 801377a:	4621      	mov	r1, r4
 801377c:	f000 faba 	bl	8013cf4 <_Bfree>
 8013780:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013782:	2300      	movs	r3, #0
 8013784:	6013      	str	r3, [r2, #0]
 8013786:	27a3      	movs	r7, #163	; 0xa3
 8013788:	e785      	b.n	8013696 <__gethex+0x12a>
 801378a:	1e73      	subs	r3, r6, #1
 801378c:	9a05      	ldr	r2, [sp, #20]
 801378e:	9303      	str	r3, [sp, #12]
 8013790:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013794:	4293      	cmp	r3, r2
 8013796:	d019      	beq.n	80137cc <__gethex+0x260>
 8013798:	f1bb 0f20 	cmp.w	fp, #32
 801379c:	d107      	bne.n	80137ae <__gethex+0x242>
 801379e:	9b02      	ldr	r3, [sp, #8]
 80137a0:	9a00      	ldr	r2, [sp, #0]
 80137a2:	f843 2b04 	str.w	r2, [r3], #4
 80137a6:	9302      	str	r3, [sp, #8]
 80137a8:	2300      	movs	r3, #0
 80137aa:	9300      	str	r3, [sp, #0]
 80137ac:	469b      	mov	fp, r3
 80137ae:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80137b2:	f7ff fec5 	bl	8013540 <__hexdig_fun>
 80137b6:	9b00      	ldr	r3, [sp, #0]
 80137b8:	f000 000f 	and.w	r0, r0, #15
 80137bc:	fa00 f00b 	lsl.w	r0, r0, fp
 80137c0:	4303      	orrs	r3, r0
 80137c2:	9300      	str	r3, [sp, #0]
 80137c4:	f10b 0b04 	add.w	fp, fp, #4
 80137c8:	9b03      	ldr	r3, [sp, #12]
 80137ca:	e00d      	b.n	80137e8 <__gethex+0x27c>
 80137cc:	9b03      	ldr	r3, [sp, #12]
 80137ce:	9a06      	ldr	r2, [sp, #24]
 80137d0:	4413      	add	r3, r2
 80137d2:	42bb      	cmp	r3, r7
 80137d4:	d3e0      	bcc.n	8013798 <__gethex+0x22c>
 80137d6:	4618      	mov	r0, r3
 80137d8:	9901      	ldr	r1, [sp, #4]
 80137da:	9307      	str	r3, [sp, #28]
 80137dc:	4652      	mov	r2, sl
 80137de:	f7fd ff25 	bl	801162c <strncmp>
 80137e2:	9b07      	ldr	r3, [sp, #28]
 80137e4:	2800      	cmp	r0, #0
 80137e6:	d1d7      	bne.n	8013798 <__gethex+0x22c>
 80137e8:	461e      	mov	r6, r3
 80137ea:	e78b      	b.n	8013704 <__gethex+0x198>
 80137ec:	f04f 0a03 	mov.w	sl, #3
 80137f0:	e7b8      	b.n	8013764 <__gethex+0x1f8>
 80137f2:	da0a      	bge.n	801380a <__gethex+0x29e>
 80137f4:	1a37      	subs	r7, r6, r0
 80137f6:	4621      	mov	r1, r4
 80137f8:	ee18 0a10 	vmov	r0, s16
 80137fc:	463a      	mov	r2, r7
 80137fe:	f000 fc95 	bl	801412c <__lshift>
 8013802:	1bed      	subs	r5, r5, r7
 8013804:	4604      	mov	r4, r0
 8013806:	f100 0914 	add.w	r9, r0, #20
 801380a:	f04f 0a00 	mov.w	sl, #0
 801380e:	e7ae      	b.n	801376e <__gethex+0x202>
 8013810:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8013814:	42a8      	cmp	r0, r5
 8013816:	dd72      	ble.n	80138fe <__gethex+0x392>
 8013818:	1b45      	subs	r5, r0, r5
 801381a:	42ae      	cmp	r6, r5
 801381c:	dc36      	bgt.n	801388c <__gethex+0x320>
 801381e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013822:	2b02      	cmp	r3, #2
 8013824:	d02a      	beq.n	801387c <__gethex+0x310>
 8013826:	2b03      	cmp	r3, #3
 8013828:	d02c      	beq.n	8013884 <__gethex+0x318>
 801382a:	2b01      	cmp	r3, #1
 801382c:	d115      	bne.n	801385a <__gethex+0x2ee>
 801382e:	42ae      	cmp	r6, r5
 8013830:	d113      	bne.n	801385a <__gethex+0x2ee>
 8013832:	2e01      	cmp	r6, #1
 8013834:	d10b      	bne.n	801384e <__gethex+0x2e2>
 8013836:	9a04      	ldr	r2, [sp, #16]
 8013838:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801383c:	6013      	str	r3, [r2, #0]
 801383e:	2301      	movs	r3, #1
 8013840:	6123      	str	r3, [r4, #16]
 8013842:	f8c9 3000 	str.w	r3, [r9]
 8013846:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013848:	2762      	movs	r7, #98	; 0x62
 801384a:	601c      	str	r4, [r3, #0]
 801384c:	e723      	b.n	8013696 <__gethex+0x12a>
 801384e:	1e71      	subs	r1, r6, #1
 8013850:	4620      	mov	r0, r4
 8013852:	f000 fea9 	bl	80145a8 <__any_on>
 8013856:	2800      	cmp	r0, #0
 8013858:	d1ed      	bne.n	8013836 <__gethex+0x2ca>
 801385a:	ee18 0a10 	vmov	r0, s16
 801385e:	4621      	mov	r1, r4
 8013860:	f000 fa48 	bl	8013cf4 <_Bfree>
 8013864:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013866:	2300      	movs	r3, #0
 8013868:	6013      	str	r3, [r2, #0]
 801386a:	2750      	movs	r7, #80	; 0x50
 801386c:	e713      	b.n	8013696 <__gethex+0x12a>
 801386e:	bf00      	nop
 8013870:	08018b98 	.word	0x08018b98
 8013874:	08018b1c 	.word	0x08018b1c
 8013878:	08018b2d 	.word	0x08018b2d
 801387c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801387e:	2b00      	cmp	r3, #0
 8013880:	d1eb      	bne.n	801385a <__gethex+0x2ee>
 8013882:	e7d8      	b.n	8013836 <__gethex+0x2ca>
 8013884:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013886:	2b00      	cmp	r3, #0
 8013888:	d1d5      	bne.n	8013836 <__gethex+0x2ca>
 801388a:	e7e6      	b.n	801385a <__gethex+0x2ee>
 801388c:	1e6f      	subs	r7, r5, #1
 801388e:	f1ba 0f00 	cmp.w	sl, #0
 8013892:	d131      	bne.n	80138f8 <__gethex+0x38c>
 8013894:	b127      	cbz	r7, 80138a0 <__gethex+0x334>
 8013896:	4639      	mov	r1, r7
 8013898:	4620      	mov	r0, r4
 801389a:	f000 fe85 	bl	80145a8 <__any_on>
 801389e:	4682      	mov	sl, r0
 80138a0:	117b      	asrs	r3, r7, #5
 80138a2:	2101      	movs	r1, #1
 80138a4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80138a8:	f007 071f 	and.w	r7, r7, #31
 80138ac:	fa01 f707 	lsl.w	r7, r1, r7
 80138b0:	421f      	tst	r7, r3
 80138b2:	4629      	mov	r1, r5
 80138b4:	4620      	mov	r0, r4
 80138b6:	bf18      	it	ne
 80138b8:	f04a 0a02 	orrne.w	sl, sl, #2
 80138bc:	1b76      	subs	r6, r6, r5
 80138be:	f7ff fded 	bl	801349c <rshift>
 80138c2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80138c6:	2702      	movs	r7, #2
 80138c8:	f1ba 0f00 	cmp.w	sl, #0
 80138cc:	d048      	beq.n	8013960 <__gethex+0x3f4>
 80138ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80138d2:	2b02      	cmp	r3, #2
 80138d4:	d015      	beq.n	8013902 <__gethex+0x396>
 80138d6:	2b03      	cmp	r3, #3
 80138d8:	d017      	beq.n	801390a <__gethex+0x39e>
 80138da:	2b01      	cmp	r3, #1
 80138dc:	d109      	bne.n	80138f2 <__gethex+0x386>
 80138de:	f01a 0f02 	tst.w	sl, #2
 80138e2:	d006      	beq.n	80138f2 <__gethex+0x386>
 80138e4:	f8d9 0000 	ldr.w	r0, [r9]
 80138e8:	ea4a 0a00 	orr.w	sl, sl, r0
 80138ec:	f01a 0f01 	tst.w	sl, #1
 80138f0:	d10e      	bne.n	8013910 <__gethex+0x3a4>
 80138f2:	f047 0710 	orr.w	r7, r7, #16
 80138f6:	e033      	b.n	8013960 <__gethex+0x3f4>
 80138f8:	f04f 0a01 	mov.w	sl, #1
 80138fc:	e7d0      	b.n	80138a0 <__gethex+0x334>
 80138fe:	2701      	movs	r7, #1
 8013900:	e7e2      	b.n	80138c8 <__gethex+0x35c>
 8013902:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013904:	f1c3 0301 	rsb	r3, r3, #1
 8013908:	9315      	str	r3, [sp, #84]	; 0x54
 801390a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801390c:	2b00      	cmp	r3, #0
 801390e:	d0f0      	beq.n	80138f2 <__gethex+0x386>
 8013910:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8013914:	f104 0314 	add.w	r3, r4, #20
 8013918:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801391c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8013920:	f04f 0c00 	mov.w	ip, #0
 8013924:	4618      	mov	r0, r3
 8013926:	f853 2b04 	ldr.w	r2, [r3], #4
 801392a:	f1b2 3fff 	cmp.w	r2, #4294967295
 801392e:	d01c      	beq.n	801396a <__gethex+0x3fe>
 8013930:	3201      	adds	r2, #1
 8013932:	6002      	str	r2, [r0, #0]
 8013934:	2f02      	cmp	r7, #2
 8013936:	f104 0314 	add.w	r3, r4, #20
 801393a:	d13f      	bne.n	80139bc <__gethex+0x450>
 801393c:	f8d8 2000 	ldr.w	r2, [r8]
 8013940:	3a01      	subs	r2, #1
 8013942:	42b2      	cmp	r2, r6
 8013944:	d10a      	bne.n	801395c <__gethex+0x3f0>
 8013946:	1171      	asrs	r1, r6, #5
 8013948:	2201      	movs	r2, #1
 801394a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801394e:	f006 061f 	and.w	r6, r6, #31
 8013952:	fa02 f606 	lsl.w	r6, r2, r6
 8013956:	421e      	tst	r6, r3
 8013958:	bf18      	it	ne
 801395a:	4617      	movne	r7, r2
 801395c:	f047 0720 	orr.w	r7, r7, #32
 8013960:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013962:	601c      	str	r4, [r3, #0]
 8013964:	9b04      	ldr	r3, [sp, #16]
 8013966:	601d      	str	r5, [r3, #0]
 8013968:	e695      	b.n	8013696 <__gethex+0x12a>
 801396a:	4299      	cmp	r1, r3
 801396c:	f843 cc04 	str.w	ip, [r3, #-4]
 8013970:	d8d8      	bhi.n	8013924 <__gethex+0x3b8>
 8013972:	68a3      	ldr	r3, [r4, #8]
 8013974:	459b      	cmp	fp, r3
 8013976:	db19      	blt.n	80139ac <__gethex+0x440>
 8013978:	6861      	ldr	r1, [r4, #4]
 801397a:	ee18 0a10 	vmov	r0, s16
 801397e:	3101      	adds	r1, #1
 8013980:	f000 f978 	bl	8013c74 <_Balloc>
 8013984:	4681      	mov	r9, r0
 8013986:	b918      	cbnz	r0, 8013990 <__gethex+0x424>
 8013988:	4b1a      	ldr	r3, [pc, #104]	; (80139f4 <__gethex+0x488>)
 801398a:	4602      	mov	r2, r0
 801398c:	2184      	movs	r1, #132	; 0x84
 801398e:	e6a8      	b.n	80136e2 <__gethex+0x176>
 8013990:	6922      	ldr	r2, [r4, #16]
 8013992:	3202      	adds	r2, #2
 8013994:	f104 010c 	add.w	r1, r4, #12
 8013998:	0092      	lsls	r2, r2, #2
 801399a:	300c      	adds	r0, #12
 801399c:	f000 f94f 	bl	8013c3e <memcpy>
 80139a0:	4621      	mov	r1, r4
 80139a2:	ee18 0a10 	vmov	r0, s16
 80139a6:	f000 f9a5 	bl	8013cf4 <_Bfree>
 80139aa:	464c      	mov	r4, r9
 80139ac:	6923      	ldr	r3, [r4, #16]
 80139ae:	1c5a      	adds	r2, r3, #1
 80139b0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80139b4:	6122      	str	r2, [r4, #16]
 80139b6:	2201      	movs	r2, #1
 80139b8:	615a      	str	r2, [r3, #20]
 80139ba:	e7bb      	b.n	8013934 <__gethex+0x3c8>
 80139bc:	6922      	ldr	r2, [r4, #16]
 80139be:	455a      	cmp	r2, fp
 80139c0:	dd0b      	ble.n	80139da <__gethex+0x46e>
 80139c2:	2101      	movs	r1, #1
 80139c4:	4620      	mov	r0, r4
 80139c6:	f7ff fd69 	bl	801349c <rshift>
 80139ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80139ce:	3501      	adds	r5, #1
 80139d0:	42ab      	cmp	r3, r5
 80139d2:	f6ff aed0 	blt.w	8013776 <__gethex+0x20a>
 80139d6:	2701      	movs	r7, #1
 80139d8:	e7c0      	b.n	801395c <__gethex+0x3f0>
 80139da:	f016 061f 	ands.w	r6, r6, #31
 80139de:	d0fa      	beq.n	80139d6 <__gethex+0x46a>
 80139e0:	449a      	add	sl, r3
 80139e2:	f1c6 0620 	rsb	r6, r6, #32
 80139e6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80139ea:	f000 fa39 	bl	8013e60 <__hi0bits>
 80139ee:	42b0      	cmp	r0, r6
 80139f0:	dbe7      	blt.n	80139c2 <__gethex+0x456>
 80139f2:	e7f0      	b.n	80139d6 <__gethex+0x46a>
 80139f4:	08018b1c 	.word	0x08018b1c

080139f8 <L_shift>:
 80139f8:	f1c2 0208 	rsb	r2, r2, #8
 80139fc:	0092      	lsls	r2, r2, #2
 80139fe:	b570      	push	{r4, r5, r6, lr}
 8013a00:	f1c2 0620 	rsb	r6, r2, #32
 8013a04:	6843      	ldr	r3, [r0, #4]
 8013a06:	6804      	ldr	r4, [r0, #0]
 8013a08:	fa03 f506 	lsl.w	r5, r3, r6
 8013a0c:	432c      	orrs	r4, r5
 8013a0e:	40d3      	lsrs	r3, r2
 8013a10:	6004      	str	r4, [r0, #0]
 8013a12:	f840 3f04 	str.w	r3, [r0, #4]!
 8013a16:	4288      	cmp	r0, r1
 8013a18:	d3f4      	bcc.n	8013a04 <L_shift+0xc>
 8013a1a:	bd70      	pop	{r4, r5, r6, pc}

08013a1c <__match>:
 8013a1c:	b530      	push	{r4, r5, lr}
 8013a1e:	6803      	ldr	r3, [r0, #0]
 8013a20:	3301      	adds	r3, #1
 8013a22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013a26:	b914      	cbnz	r4, 8013a2e <__match+0x12>
 8013a28:	6003      	str	r3, [r0, #0]
 8013a2a:	2001      	movs	r0, #1
 8013a2c:	bd30      	pop	{r4, r5, pc}
 8013a2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013a32:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8013a36:	2d19      	cmp	r5, #25
 8013a38:	bf98      	it	ls
 8013a3a:	3220      	addls	r2, #32
 8013a3c:	42a2      	cmp	r2, r4
 8013a3e:	d0f0      	beq.n	8013a22 <__match+0x6>
 8013a40:	2000      	movs	r0, #0
 8013a42:	e7f3      	b.n	8013a2c <__match+0x10>

08013a44 <__hexnan>:
 8013a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a48:	680b      	ldr	r3, [r1, #0]
 8013a4a:	6801      	ldr	r1, [r0, #0]
 8013a4c:	115e      	asrs	r6, r3, #5
 8013a4e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8013a52:	f013 031f 	ands.w	r3, r3, #31
 8013a56:	b087      	sub	sp, #28
 8013a58:	bf18      	it	ne
 8013a5a:	3604      	addne	r6, #4
 8013a5c:	2500      	movs	r5, #0
 8013a5e:	1f37      	subs	r7, r6, #4
 8013a60:	4682      	mov	sl, r0
 8013a62:	4690      	mov	r8, r2
 8013a64:	9301      	str	r3, [sp, #4]
 8013a66:	f846 5c04 	str.w	r5, [r6, #-4]
 8013a6a:	46b9      	mov	r9, r7
 8013a6c:	463c      	mov	r4, r7
 8013a6e:	9502      	str	r5, [sp, #8]
 8013a70:	46ab      	mov	fp, r5
 8013a72:	784a      	ldrb	r2, [r1, #1]
 8013a74:	1c4b      	adds	r3, r1, #1
 8013a76:	9303      	str	r3, [sp, #12]
 8013a78:	b342      	cbz	r2, 8013acc <__hexnan+0x88>
 8013a7a:	4610      	mov	r0, r2
 8013a7c:	9105      	str	r1, [sp, #20]
 8013a7e:	9204      	str	r2, [sp, #16]
 8013a80:	f7ff fd5e 	bl	8013540 <__hexdig_fun>
 8013a84:	2800      	cmp	r0, #0
 8013a86:	d14f      	bne.n	8013b28 <__hexnan+0xe4>
 8013a88:	9a04      	ldr	r2, [sp, #16]
 8013a8a:	9905      	ldr	r1, [sp, #20]
 8013a8c:	2a20      	cmp	r2, #32
 8013a8e:	d818      	bhi.n	8013ac2 <__hexnan+0x7e>
 8013a90:	9b02      	ldr	r3, [sp, #8]
 8013a92:	459b      	cmp	fp, r3
 8013a94:	dd13      	ble.n	8013abe <__hexnan+0x7a>
 8013a96:	454c      	cmp	r4, r9
 8013a98:	d206      	bcs.n	8013aa8 <__hexnan+0x64>
 8013a9a:	2d07      	cmp	r5, #7
 8013a9c:	dc04      	bgt.n	8013aa8 <__hexnan+0x64>
 8013a9e:	462a      	mov	r2, r5
 8013aa0:	4649      	mov	r1, r9
 8013aa2:	4620      	mov	r0, r4
 8013aa4:	f7ff ffa8 	bl	80139f8 <L_shift>
 8013aa8:	4544      	cmp	r4, r8
 8013aaa:	d950      	bls.n	8013b4e <__hexnan+0x10a>
 8013aac:	2300      	movs	r3, #0
 8013aae:	f1a4 0904 	sub.w	r9, r4, #4
 8013ab2:	f844 3c04 	str.w	r3, [r4, #-4]
 8013ab6:	f8cd b008 	str.w	fp, [sp, #8]
 8013aba:	464c      	mov	r4, r9
 8013abc:	461d      	mov	r5, r3
 8013abe:	9903      	ldr	r1, [sp, #12]
 8013ac0:	e7d7      	b.n	8013a72 <__hexnan+0x2e>
 8013ac2:	2a29      	cmp	r2, #41	; 0x29
 8013ac4:	d156      	bne.n	8013b74 <__hexnan+0x130>
 8013ac6:	3102      	adds	r1, #2
 8013ac8:	f8ca 1000 	str.w	r1, [sl]
 8013acc:	f1bb 0f00 	cmp.w	fp, #0
 8013ad0:	d050      	beq.n	8013b74 <__hexnan+0x130>
 8013ad2:	454c      	cmp	r4, r9
 8013ad4:	d206      	bcs.n	8013ae4 <__hexnan+0xa0>
 8013ad6:	2d07      	cmp	r5, #7
 8013ad8:	dc04      	bgt.n	8013ae4 <__hexnan+0xa0>
 8013ada:	462a      	mov	r2, r5
 8013adc:	4649      	mov	r1, r9
 8013ade:	4620      	mov	r0, r4
 8013ae0:	f7ff ff8a 	bl	80139f8 <L_shift>
 8013ae4:	4544      	cmp	r4, r8
 8013ae6:	d934      	bls.n	8013b52 <__hexnan+0x10e>
 8013ae8:	f1a8 0204 	sub.w	r2, r8, #4
 8013aec:	4623      	mov	r3, r4
 8013aee:	f853 1b04 	ldr.w	r1, [r3], #4
 8013af2:	f842 1f04 	str.w	r1, [r2, #4]!
 8013af6:	429f      	cmp	r7, r3
 8013af8:	d2f9      	bcs.n	8013aee <__hexnan+0xaa>
 8013afa:	1b3b      	subs	r3, r7, r4
 8013afc:	f023 0303 	bic.w	r3, r3, #3
 8013b00:	3304      	adds	r3, #4
 8013b02:	3401      	adds	r4, #1
 8013b04:	3e03      	subs	r6, #3
 8013b06:	42b4      	cmp	r4, r6
 8013b08:	bf88      	it	hi
 8013b0a:	2304      	movhi	r3, #4
 8013b0c:	4443      	add	r3, r8
 8013b0e:	2200      	movs	r2, #0
 8013b10:	f843 2b04 	str.w	r2, [r3], #4
 8013b14:	429f      	cmp	r7, r3
 8013b16:	d2fb      	bcs.n	8013b10 <__hexnan+0xcc>
 8013b18:	683b      	ldr	r3, [r7, #0]
 8013b1a:	b91b      	cbnz	r3, 8013b24 <__hexnan+0xe0>
 8013b1c:	4547      	cmp	r7, r8
 8013b1e:	d127      	bne.n	8013b70 <__hexnan+0x12c>
 8013b20:	2301      	movs	r3, #1
 8013b22:	603b      	str	r3, [r7, #0]
 8013b24:	2005      	movs	r0, #5
 8013b26:	e026      	b.n	8013b76 <__hexnan+0x132>
 8013b28:	3501      	adds	r5, #1
 8013b2a:	2d08      	cmp	r5, #8
 8013b2c:	f10b 0b01 	add.w	fp, fp, #1
 8013b30:	dd06      	ble.n	8013b40 <__hexnan+0xfc>
 8013b32:	4544      	cmp	r4, r8
 8013b34:	d9c3      	bls.n	8013abe <__hexnan+0x7a>
 8013b36:	2300      	movs	r3, #0
 8013b38:	f844 3c04 	str.w	r3, [r4, #-4]
 8013b3c:	2501      	movs	r5, #1
 8013b3e:	3c04      	subs	r4, #4
 8013b40:	6822      	ldr	r2, [r4, #0]
 8013b42:	f000 000f 	and.w	r0, r0, #15
 8013b46:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8013b4a:	6022      	str	r2, [r4, #0]
 8013b4c:	e7b7      	b.n	8013abe <__hexnan+0x7a>
 8013b4e:	2508      	movs	r5, #8
 8013b50:	e7b5      	b.n	8013abe <__hexnan+0x7a>
 8013b52:	9b01      	ldr	r3, [sp, #4]
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	d0df      	beq.n	8013b18 <__hexnan+0xd4>
 8013b58:	f04f 32ff 	mov.w	r2, #4294967295
 8013b5c:	f1c3 0320 	rsb	r3, r3, #32
 8013b60:	fa22 f303 	lsr.w	r3, r2, r3
 8013b64:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8013b68:	401a      	ands	r2, r3
 8013b6a:	f846 2c04 	str.w	r2, [r6, #-4]
 8013b6e:	e7d3      	b.n	8013b18 <__hexnan+0xd4>
 8013b70:	3f04      	subs	r7, #4
 8013b72:	e7d1      	b.n	8013b18 <__hexnan+0xd4>
 8013b74:	2004      	movs	r0, #4
 8013b76:	b007      	add	sp, #28
 8013b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013b7c <_findenv_r>:
 8013b7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b80:	4607      	mov	r7, r0
 8013b82:	4689      	mov	r9, r1
 8013b84:	4616      	mov	r6, r2
 8013b86:	f001 f9f9 	bl	8014f7c <__env_lock>
 8013b8a:	4b18      	ldr	r3, [pc, #96]	; (8013bec <_findenv_r+0x70>)
 8013b8c:	681c      	ldr	r4, [r3, #0]
 8013b8e:	469a      	mov	sl, r3
 8013b90:	b134      	cbz	r4, 8013ba0 <_findenv_r+0x24>
 8013b92:	464b      	mov	r3, r9
 8013b94:	4698      	mov	r8, r3
 8013b96:	f813 1b01 	ldrb.w	r1, [r3], #1
 8013b9a:	b139      	cbz	r1, 8013bac <_findenv_r+0x30>
 8013b9c:	293d      	cmp	r1, #61	; 0x3d
 8013b9e:	d1f9      	bne.n	8013b94 <_findenv_r+0x18>
 8013ba0:	4638      	mov	r0, r7
 8013ba2:	f001 f9f1 	bl	8014f88 <__env_unlock>
 8013ba6:	2000      	movs	r0, #0
 8013ba8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bac:	eba8 0809 	sub.w	r8, r8, r9
 8013bb0:	46a3      	mov	fp, r4
 8013bb2:	f854 0b04 	ldr.w	r0, [r4], #4
 8013bb6:	2800      	cmp	r0, #0
 8013bb8:	d0f2      	beq.n	8013ba0 <_findenv_r+0x24>
 8013bba:	4642      	mov	r2, r8
 8013bbc:	4649      	mov	r1, r9
 8013bbe:	f7fd fd35 	bl	801162c <strncmp>
 8013bc2:	2800      	cmp	r0, #0
 8013bc4:	d1f4      	bne.n	8013bb0 <_findenv_r+0x34>
 8013bc6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8013bca:	eb03 0508 	add.w	r5, r3, r8
 8013bce:	f813 3008 	ldrb.w	r3, [r3, r8]
 8013bd2:	2b3d      	cmp	r3, #61	; 0x3d
 8013bd4:	d1ec      	bne.n	8013bb0 <_findenv_r+0x34>
 8013bd6:	f8da 3000 	ldr.w	r3, [sl]
 8013bda:	ebab 0303 	sub.w	r3, fp, r3
 8013bde:	109b      	asrs	r3, r3, #2
 8013be0:	4638      	mov	r0, r7
 8013be2:	6033      	str	r3, [r6, #0]
 8013be4:	f001 f9d0 	bl	8014f88 <__env_unlock>
 8013be8:	1c68      	adds	r0, r5, #1
 8013bea:	e7dd      	b.n	8013ba8 <_findenv_r+0x2c>
 8013bec:	20000010 	.word	0x20000010

08013bf0 <_getenv_r>:
 8013bf0:	b507      	push	{r0, r1, r2, lr}
 8013bf2:	aa01      	add	r2, sp, #4
 8013bf4:	f7ff ffc2 	bl	8013b7c <_findenv_r>
 8013bf8:	b003      	add	sp, #12
 8013bfa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08013c00 <__gettzinfo>:
 8013c00:	4800      	ldr	r0, [pc, #0]	; (8013c04 <__gettzinfo+0x4>)
 8013c02:	4770      	bx	lr
 8013c04:	20000090 	.word	0x20000090

08013c08 <_localeconv_r>:
 8013c08:	4800      	ldr	r0, [pc, #0]	; (8013c0c <_localeconv_r+0x4>)
 8013c0a:	4770      	bx	lr
 8013c0c:	200001dc 	.word	0x200001dc

08013c10 <__retarget_lock_init_recursive>:
 8013c10:	4770      	bx	lr

08013c12 <__retarget_lock_acquire>:
 8013c12:	4770      	bx	lr

08013c14 <__retarget_lock_acquire_recursive>:
 8013c14:	4770      	bx	lr

08013c16 <__retarget_lock_release>:
 8013c16:	4770      	bx	lr

08013c18 <__retarget_lock_release_recursive>:
 8013c18:	4770      	bx	lr

08013c1a <__ascii_mbtowc>:
 8013c1a:	b082      	sub	sp, #8
 8013c1c:	b901      	cbnz	r1, 8013c20 <__ascii_mbtowc+0x6>
 8013c1e:	a901      	add	r1, sp, #4
 8013c20:	b142      	cbz	r2, 8013c34 <__ascii_mbtowc+0x1a>
 8013c22:	b14b      	cbz	r3, 8013c38 <__ascii_mbtowc+0x1e>
 8013c24:	7813      	ldrb	r3, [r2, #0]
 8013c26:	600b      	str	r3, [r1, #0]
 8013c28:	7812      	ldrb	r2, [r2, #0]
 8013c2a:	1e10      	subs	r0, r2, #0
 8013c2c:	bf18      	it	ne
 8013c2e:	2001      	movne	r0, #1
 8013c30:	b002      	add	sp, #8
 8013c32:	4770      	bx	lr
 8013c34:	4610      	mov	r0, r2
 8013c36:	e7fb      	b.n	8013c30 <__ascii_mbtowc+0x16>
 8013c38:	f06f 0001 	mvn.w	r0, #1
 8013c3c:	e7f8      	b.n	8013c30 <__ascii_mbtowc+0x16>

08013c3e <memcpy>:
 8013c3e:	440a      	add	r2, r1
 8013c40:	4291      	cmp	r1, r2
 8013c42:	f100 33ff 	add.w	r3, r0, #4294967295
 8013c46:	d100      	bne.n	8013c4a <memcpy+0xc>
 8013c48:	4770      	bx	lr
 8013c4a:	b510      	push	{r4, lr}
 8013c4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013c50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013c54:	4291      	cmp	r1, r2
 8013c56:	d1f9      	bne.n	8013c4c <memcpy+0xe>
 8013c58:	bd10      	pop	{r4, pc}
	...

08013c5c <__malloc_lock>:
 8013c5c:	4801      	ldr	r0, [pc, #4]	; (8013c64 <__malloc_lock+0x8>)
 8013c5e:	f7ff bfd9 	b.w	8013c14 <__retarget_lock_acquire_recursive>
 8013c62:	bf00      	nop
 8013c64:	20009a40 	.word	0x20009a40

08013c68 <__malloc_unlock>:
 8013c68:	4801      	ldr	r0, [pc, #4]	; (8013c70 <__malloc_unlock+0x8>)
 8013c6a:	f7ff bfd5 	b.w	8013c18 <__retarget_lock_release_recursive>
 8013c6e:	bf00      	nop
 8013c70:	20009a40 	.word	0x20009a40

08013c74 <_Balloc>:
 8013c74:	b570      	push	{r4, r5, r6, lr}
 8013c76:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013c78:	4604      	mov	r4, r0
 8013c7a:	460d      	mov	r5, r1
 8013c7c:	b976      	cbnz	r6, 8013c9c <_Balloc+0x28>
 8013c7e:	2010      	movs	r0, #16
 8013c80:	f7fc fcfa 	bl	8010678 <malloc>
 8013c84:	4602      	mov	r2, r0
 8013c86:	6260      	str	r0, [r4, #36]	; 0x24
 8013c88:	b920      	cbnz	r0, 8013c94 <_Balloc+0x20>
 8013c8a:	4b18      	ldr	r3, [pc, #96]	; (8013cec <_Balloc+0x78>)
 8013c8c:	4818      	ldr	r0, [pc, #96]	; (8013cf0 <_Balloc+0x7c>)
 8013c8e:	2166      	movs	r1, #102	; 0x66
 8013c90:	f7fe fd46 	bl	8012720 <__assert_func>
 8013c94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013c98:	6006      	str	r6, [r0, #0]
 8013c9a:	60c6      	str	r6, [r0, #12]
 8013c9c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013c9e:	68f3      	ldr	r3, [r6, #12]
 8013ca0:	b183      	cbz	r3, 8013cc4 <_Balloc+0x50>
 8013ca2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013ca4:	68db      	ldr	r3, [r3, #12]
 8013ca6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013caa:	b9b8      	cbnz	r0, 8013cdc <_Balloc+0x68>
 8013cac:	2101      	movs	r1, #1
 8013cae:	fa01 f605 	lsl.w	r6, r1, r5
 8013cb2:	1d72      	adds	r2, r6, #5
 8013cb4:	0092      	lsls	r2, r2, #2
 8013cb6:	4620      	mov	r0, r4
 8013cb8:	f000 fc97 	bl	80145ea <_calloc_r>
 8013cbc:	b160      	cbz	r0, 8013cd8 <_Balloc+0x64>
 8013cbe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013cc2:	e00e      	b.n	8013ce2 <_Balloc+0x6e>
 8013cc4:	2221      	movs	r2, #33	; 0x21
 8013cc6:	2104      	movs	r1, #4
 8013cc8:	4620      	mov	r0, r4
 8013cca:	f000 fc8e 	bl	80145ea <_calloc_r>
 8013cce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013cd0:	60f0      	str	r0, [r6, #12]
 8013cd2:	68db      	ldr	r3, [r3, #12]
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	d1e4      	bne.n	8013ca2 <_Balloc+0x2e>
 8013cd8:	2000      	movs	r0, #0
 8013cda:	bd70      	pop	{r4, r5, r6, pc}
 8013cdc:	6802      	ldr	r2, [r0, #0]
 8013cde:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013ce2:	2300      	movs	r3, #0
 8013ce4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013ce8:	e7f7      	b.n	8013cda <_Balloc+0x66>
 8013cea:	bf00      	nop
 8013cec:	080188d8 	.word	0x080188d8
 8013cf0:	08018c0c 	.word	0x08018c0c

08013cf4 <_Bfree>:
 8013cf4:	b570      	push	{r4, r5, r6, lr}
 8013cf6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013cf8:	4605      	mov	r5, r0
 8013cfa:	460c      	mov	r4, r1
 8013cfc:	b976      	cbnz	r6, 8013d1c <_Bfree+0x28>
 8013cfe:	2010      	movs	r0, #16
 8013d00:	f7fc fcba 	bl	8010678 <malloc>
 8013d04:	4602      	mov	r2, r0
 8013d06:	6268      	str	r0, [r5, #36]	; 0x24
 8013d08:	b920      	cbnz	r0, 8013d14 <_Bfree+0x20>
 8013d0a:	4b09      	ldr	r3, [pc, #36]	; (8013d30 <_Bfree+0x3c>)
 8013d0c:	4809      	ldr	r0, [pc, #36]	; (8013d34 <_Bfree+0x40>)
 8013d0e:	218a      	movs	r1, #138	; 0x8a
 8013d10:	f7fe fd06 	bl	8012720 <__assert_func>
 8013d14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013d18:	6006      	str	r6, [r0, #0]
 8013d1a:	60c6      	str	r6, [r0, #12]
 8013d1c:	b13c      	cbz	r4, 8013d2e <_Bfree+0x3a>
 8013d1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013d20:	6862      	ldr	r2, [r4, #4]
 8013d22:	68db      	ldr	r3, [r3, #12]
 8013d24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013d28:	6021      	str	r1, [r4, #0]
 8013d2a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013d2e:	bd70      	pop	{r4, r5, r6, pc}
 8013d30:	080188d8 	.word	0x080188d8
 8013d34:	08018c0c 	.word	0x08018c0c

08013d38 <__multadd>:
 8013d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d3c:	690e      	ldr	r6, [r1, #16]
 8013d3e:	4607      	mov	r7, r0
 8013d40:	4698      	mov	r8, r3
 8013d42:	460c      	mov	r4, r1
 8013d44:	f101 0014 	add.w	r0, r1, #20
 8013d48:	2300      	movs	r3, #0
 8013d4a:	6805      	ldr	r5, [r0, #0]
 8013d4c:	b2a9      	uxth	r1, r5
 8013d4e:	fb02 8101 	mla	r1, r2, r1, r8
 8013d52:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8013d56:	0c2d      	lsrs	r5, r5, #16
 8013d58:	fb02 c505 	mla	r5, r2, r5, ip
 8013d5c:	b289      	uxth	r1, r1
 8013d5e:	3301      	adds	r3, #1
 8013d60:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8013d64:	429e      	cmp	r6, r3
 8013d66:	f840 1b04 	str.w	r1, [r0], #4
 8013d6a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8013d6e:	dcec      	bgt.n	8013d4a <__multadd+0x12>
 8013d70:	f1b8 0f00 	cmp.w	r8, #0
 8013d74:	d022      	beq.n	8013dbc <__multadd+0x84>
 8013d76:	68a3      	ldr	r3, [r4, #8]
 8013d78:	42b3      	cmp	r3, r6
 8013d7a:	dc19      	bgt.n	8013db0 <__multadd+0x78>
 8013d7c:	6861      	ldr	r1, [r4, #4]
 8013d7e:	4638      	mov	r0, r7
 8013d80:	3101      	adds	r1, #1
 8013d82:	f7ff ff77 	bl	8013c74 <_Balloc>
 8013d86:	4605      	mov	r5, r0
 8013d88:	b928      	cbnz	r0, 8013d96 <__multadd+0x5e>
 8013d8a:	4602      	mov	r2, r0
 8013d8c:	4b0d      	ldr	r3, [pc, #52]	; (8013dc4 <__multadd+0x8c>)
 8013d8e:	480e      	ldr	r0, [pc, #56]	; (8013dc8 <__multadd+0x90>)
 8013d90:	21b5      	movs	r1, #181	; 0xb5
 8013d92:	f7fe fcc5 	bl	8012720 <__assert_func>
 8013d96:	6922      	ldr	r2, [r4, #16]
 8013d98:	3202      	adds	r2, #2
 8013d9a:	f104 010c 	add.w	r1, r4, #12
 8013d9e:	0092      	lsls	r2, r2, #2
 8013da0:	300c      	adds	r0, #12
 8013da2:	f7ff ff4c 	bl	8013c3e <memcpy>
 8013da6:	4621      	mov	r1, r4
 8013da8:	4638      	mov	r0, r7
 8013daa:	f7ff ffa3 	bl	8013cf4 <_Bfree>
 8013dae:	462c      	mov	r4, r5
 8013db0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8013db4:	3601      	adds	r6, #1
 8013db6:	f8c3 8014 	str.w	r8, [r3, #20]
 8013dba:	6126      	str	r6, [r4, #16]
 8013dbc:	4620      	mov	r0, r4
 8013dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013dc2:	bf00      	nop
 8013dc4:	08018b1c 	.word	0x08018b1c
 8013dc8:	08018c0c 	.word	0x08018c0c

08013dcc <__s2b>:
 8013dcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013dd0:	460c      	mov	r4, r1
 8013dd2:	4615      	mov	r5, r2
 8013dd4:	461f      	mov	r7, r3
 8013dd6:	2209      	movs	r2, #9
 8013dd8:	3308      	adds	r3, #8
 8013dda:	4606      	mov	r6, r0
 8013ddc:	fb93 f3f2 	sdiv	r3, r3, r2
 8013de0:	2100      	movs	r1, #0
 8013de2:	2201      	movs	r2, #1
 8013de4:	429a      	cmp	r2, r3
 8013de6:	db09      	blt.n	8013dfc <__s2b+0x30>
 8013de8:	4630      	mov	r0, r6
 8013dea:	f7ff ff43 	bl	8013c74 <_Balloc>
 8013dee:	b940      	cbnz	r0, 8013e02 <__s2b+0x36>
 8013df0:	4602      	mov	r2, r0
 8013df2:	4b19      	ldr	r3, [pc, #100]	; (8013e58 <__s2b+0x8c>)
 8013df4:	4819      	ldr	r0, [pc, #100]	; (8013e5c <__s2b+0x90>)
 8013df6:	21ce      	movs	r1, #206	; 0xce
 8013df8:	f7fe fc92 	bl	8012720 <__assert_func>
 8013dfc:	0052      	lsls	r2, r2, #1
 8013dfe:	3101      	adds	r1, #1
 8013e00:	e7f0      	b.n	8013de4 <__s2b+0x18>
 8013e02:	9b08      	ldr	r3, [sp, #32]
 8013e04:	6143      	str	r3, [r0, #20]
 8013e06:	2d09      	cmp	r5, #9
 8013e08:	f04f 0301 	mov.w	r3, #1
 8013e0c:	6103      	str	r3, [r0, #16]
 8013e0e:	dd16      	ble.n	8013e3e <__s2b+0x72>
 8013e10:	f104 0909 	add.w	r9, r4, #9
 8013e14:	46c8      	mov	r8, r9
 8013e16:	442c      	add	r4, r5
 8013e18:	f818 3b01 	ldrb.w	r3, [r8], #1
 8013e1c:	4601      	mov	r1, r0
 8013e1e:	3b30      	subs	r3, #48	; 0x30
 8013e20:	220a      	movs	r2, #10
 8013e22:	4630      	mov	r0, r6
 8013e24:	f7ff ff88 	bl	8013d38 <__multadd>
 8013e28:	45a0      	cmp	r8, r4
 8013e2a:	d1f5      	bne.n	8013e18 <__s2b+0x4c>
 8013e2c:	f1a5 0408 	sub.w	r4, r5, #8
 8013e30:	444c      	add	r4, r9
 8013e32:	1b2d      	subs	r5, r5, r4
 8013e34:	1963      	adds	r3, r4, r5
 8013e36:	42bb      	cmp	r3, r7
 8013e38:	db04      	blt.n	8013e44 <__s2b+0x78>
 8013e3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013e3e:	340a      	adds	r4, #10
 8013e40:	2509      	movs	r5, #9
 8013e42:	e7f6      	b.n	8013e32 <__s2b+0x66>
 8013e44:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013e48:	4601      	mov	r1, r0
 8013e4a:	3b30      	subs	r3, #48	; 0x30
 8013e4c:	220a      	movs	r2, #10
 8013e4e:	4630      	mov	r0, r6
 8013e50:	f7ff ff72 	bl	8013d38 <__multadd>
 8013e54:	e7ee      	b.n	8013e34 <__s2b+0x68>
 8013e56:	bf00      	nop
 8013e58:	08018b1c 	.word	0x08018b1c
 8013e5c:	08018c0c 	.word	0x08018c0c

08013e60 <__hi0bits>:
 8013e60:	0c03      	lsrs	r3, r0, #16
 8013e62:	041b      	lsls	r3, r3, #16
 8013e64:	b9d3      	cbnz	r3, 8013e9c <__hi0bits+0x3c>
 8013e66:	0400      	lsls	r0, r0, #16
 8013e68:	2310      	movs	r3, #16
 8013e6a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013e6e:	bf04      	itt	eq
 8013e70:	0200      	lsleq	r0, r0, #8
 8013e72:	3308      	addeq	r3, #8
 8013e74:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013e78:	bf04      	itt	eq
 8013e7a:	0100      	lsleq	r0, r0, #4
 8013e7c:	3304      	addeq	r3, #4
 8013e7e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013e82:	bf04      	itt	eq
 8013e84:	0080      	lsleq	r0, r0, #2
 8013e86:	3302      	addeq	r3, #2
 8013e88:	2800      	cmp	r0, #0
 8013e8a:	db05      	blt.n	8013e98 <__hi0bits+0x38>
 8013e8c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013e90:	f103 0301 	add.w	r3, r3, #1
 8013e94:	bf08      	it	eq
 8013e96:	2320      	moveq	r3, #32
 8013e98:	4618      	mov	r0, r3
 8013e9a:	4770      	bx	lr
 8013e9c:	2300      	movs	r3, #0
 8013e9e:	e7e4      	b.n	8013e6a <__hi0bits+0xa>

08013ea0 <__lo0bits>:
 8013ea0:	6803      	ldr	r3, [r0, #0]
 8013ea2:	f013 0207 	ands.w	r2, r3, #7
 8013ea6:	4601      	mov	r1, r0
 8013ea8:	d00b      	beq.n	8013ec2 <__lo0bits+0x22>
 8013eaa:	07da      	lsls	r2, r3, #31
 8013eac:	d424      	bmi.n	8013ef8 <__lo0bits+0x58>
 8013eae:	0798      	lsls	r0, r3, #30
 8013eb0:	bf49      	itett	mi
 8013eb2:	085b      	lsrmi	r3, r3, #1
 8013eb4:	089b      	lsrpl	r3, r3, #2
 8013eb6:	2001      	movmi	r0, #1
 8013eb8:	600b      	strmi	r3, [r1, #0]
 8013eba:	bf5c      	itt	pl
 8013ebc:	600b      	strpl	r3, [r1, #0]
 8013ebe:	2002      	movpl	r0, #2
 8013ec0:	4770      	bx	lr
 8013ec2:	b298      	uxth	r0, r3
 8013ec4:	b9b0      	cbnz	r0, 8013ef4 <__lo0bits+0x54>
 8013ec6:	0c1b      	lsrs	r3, r3, #16
 8013ec8:	2010      	movs	r0, #16
 8013eca:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013ece:	bf04      	itt	eq
 8013ed0:	0a1b      	lsreq	r3, r3, #8
 8013ed2:	3008      	addeq	r0, #8
 8013ed4:	071a      	lsls	r2, r3, #28
 8013ed6:	bf04      	itt	eq
 8013ed8:	091b      	lsreq	r3, r3, #4
 8013eda:	3004      	addeq	r0, #4
 8013edc:	079a      	lsls	r2, r3, #30
 8013ede:	bf04      	itt	eq
 8013ee0:	089b      	lsreq	r3, r3, #2
 8013ee2:	3002      	addeq	r0, #2
 8013ee4:	07da      	lsls	r2, r3, #31
 8013ee6:	d403      	bmi.n	8013ef0 <__lo0bits+0x50>
 8013ee8:	085b      	lsrs	r3, r3, #1
 8013eea:	f100 0001 	add.w	r0, r0, #1
 8013eee:	d005      	beq.n	8013efc <__lo0bits+0x5c>
 8013ef0:	600b      	str	r3, [r1, #0]
 8013ef2:	4770      	bx	lr
 8013ef4:	4610      	mov	r0, r2
 8013ef6:	e7e8      	b.n	8013eca <__lo0bits+0x2a>
 8013ef8:	2000      	movs	r0, #0
 8013efa:	4770      	bx	lr
 8013efc:	2020      	movs	r0, #32
 8013efe:	4770      	bx	lr

08013f00 <__i2b>:
 8013f00:	b510      	push	{r4, lr}
 8013f02:	460c      	mov	r4, r1
 8013f04:	2101      	movs	r1, #1
 8013f06:	f7ff feb5 	bl	8013c74 <_Balloc>
 8013f0a:	4602      	mov	r2, r0
 8013f0c:	b928      	cbnz	r0, 8013f1a <__i2b+0x1a>
 8013f0e:	4b05      	ldr	r3, [pc, #20]	; (8013f24 <__i2b+0x24>)
 8013f10:	4805      	ldr	r0, [pc, #20]	; (8013f28 <__i2b+0x28>)
 8013f12:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8013f16:	f7fe fc03 	bl	8012720 <__assert_func>
 8013f1a:	2301      	movs	r3, #1
 8013f1c:	6144      	str	r4, [r0, #20]
 8013f1e:	6103      	str	r3, [r0, #16]
 8013f20:	bd10      	pop	{r4, pc}
 8013f22:	bf00      	nop
 8013f24:	08018b1c 	.word	0x08018b1c
 8013f28:	08018c0c 	.word	0x08018c0c

08013f2c <__multiply>:
 8013f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f30:	4614      	mov	r4, r2
 8013f32:	690a      	ldr	r2, [r1, #16]
 8013f34:	6923      	ldr	r3, [r4, #16]
 8013f36:	429a      	cmp	r2, r3
 8013f38:	bfb8      	it	lt
 8013f3a:	460b      	movlt	r3, r1
 8013f3c:	460d      	mov	r5, r1
 8013f3e:	bfbc      	itt	lt
 8013f40:	4625      	movlt	r5, r4
 8013f42:	461c      	movlt	r4, r3
 8013f44:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8013f48:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8013f4c:	68ab      	ldr	r3, [r5, #8]
 8013f4e:	6869      	ldr	r1, [r5, #4]
 8013f50:	eb0a 0709 	add.w	r7, sl, r9
 8013f54:	42bb      	cmp	r3, r7
 8013f56:	b085      	sub	sp, #20
 8013f58:	bfb8      	it	lt
 8013f5a:	3101      	addlt	r1, #1
 8013f5c:	f7ff fe8a 	bl	8013c74 <_Balloc>
 8013f60:	b930      	cbnz	r0, 8013f70 <__multiply+0x44>
 8013f62:	4602      	mov	r2, r0
 8013f64:	4b42      	ldr	r3, [pc, #264]	; (8014070 <__multiply+0x144>)
 8013f66:	4843      	ldr	r0, [pc, #268]	; (8014074 <__multiply+0x148>)
 8013f68:	f240 115d 	movw	r1, #349	; 0x15d
 8013f6c:	f7fe fbd8 	bl	8012720 <__assert_func>
 8013f70:	f100 0614 	add.w	r6, r0, #20
 8013f74:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8013f78:	4633      	mov	r3, r6
 8013f7a:	2200      	movs	r2, #0
 8013f7c:	4543      	cmp	r3, r8
 8013f7e:	d31e      	bcc.n	8013fbe <__multiply+0x92>
 8013f80:	f105 0c14 	add.w	ip, r5, #20
 8013f84:	f104 0314 	add.w	r3, r4, #20
 8013f88:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8013f8c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8013f90:	9202      	str	r2, [sp, #8]
 8013f92:	ebac 0205 	sub.w	r2, ip, r5
 8013f96:	3a15      	subs	r2, #21
 8013f98:	f022 0203 	bic.w	r2, r2, #3
 8013f9c:	3204      	adds	r2, #4
 8013f9e:	f105 0115 	add.w	r1, r5, #21
 8013fa2:	458c      	cmp	ip, r1
 8013fa4:	bf38      	it	cc
 8013fa6:	2204      	movcc	r2, #4
 8013fa8:	9201      	str	r2, [sp, #4]
 8013faa:	9a02      	ldr	r2, [sp, #8]
 8013fac:	9303      	str	r3, [sp, #12]
 8013fae:	429a      	cmp	r2, r3
 8013fb0:	d808      	bhi.n	8013fc4 <__multiply+0x98>
 8013fb2:	2f00      	cmp	r7, #0
 8013fb4:	dc55      	bgt.n	8014062 <__multiply+0x136>
 8013fb6:	6107      	str	r7, [r0, #16]
 8013fb8:	b005      	add	sp, #20
 8013fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fbe:	f843 2b04 	str.w	r2, [r3], #4
 8013fc2:	e7db      	b.n	8013f7c <__multiply+0x50>
 8013fc4:	f8b3 a000 	ldrh.w	sl, [r3]
 8013fc8:	f1ba 0f00 	cmp.w	sl, #0
 8013fcc:	d020      	beq.n	8014010 <__multiply+0xe4>
 8013fce:	f105 0e14 	add.w	lr, r5, #20
 8013fd2:	46b1      	mov	r9, r6
 8013fd4:	2200      	movs	r2, #0
 8013fd6:	f85e 4b04 	ldr.w	r4, [lr], #4
 8013fda:	f8d9 b000 	ldr.w	fp, [r9]
 8013fde:	b2a1      	uxth	r1, r4
 8013fe0:	fa1f fb8b 	uxth.w	fp, fp
 8013fe4:	fb0a b101 	mla	r1, sl, r1, fp
 8013fe8:	4411      	add	r1, r2
 8013fea:	f8d9 2000 	ldr.w	r2, [r9]
 8013fee:	0c24      	lsrs	r4, r4, #16
 8013ff0:	0c12      	lsrs	r2, r2, #16
 8013ff2:	fb0a 2404 	mla	r4, sl, r4, r2
 8013ff6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8013ffa:	b289      	uxth	r1, r1
 8013ffc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8014000:	45f4      	cmp	ip, lr
 8014002:	f849 1b04 	str.w	r1, [r9], #4
 8014006:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801400a:	d8e4      	bhi.n	8013fd6 <__multiply+0xaa>
 801400c:	9901      	ldr	r1, [sp, #4]
 801400e:	5072      	str	r2, [r6, r1]
 8014010:	9a03      	ldr	r2, [sp, #12]
 8014012:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014016:	3304      	adds	r3, #4
 8014018:	f1b9 0f00 	cmp.w	r9, #0
 801401c:	d01f      	beq.n	801405e <__multiply+0x132>
 801401e:	6834      	ldr	r4, [r6, #0]
 8014020:	f105 0114 	add.w	r1, r5, #20
 8014024:	46b6      	mov	lr, r6
 8014026:	f04f 0a00 	mov.w	sl, #0
 801402a:	880a      	ldrh	r2, [r1, #0]
 801402c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8014030:	fb09 b202 	mla	r2, r9, r2, fp
 8014034:	4492      	add	sl, r2
 8014036:	b2a4      	uxth	r4, r4
 8014038:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801403c:	f84e 4b04 	str.w	r4, [lr], #4
 8014040:	f851 4b04 	ldr.w	r4, [r1], #4
 8014044:	f8be 2000 	ldrh.w	r2, [lr]
 8014048:	0c24      	lsrs	r4, r4, #16
 801404a:	fb09 2404 	mla	r4, r9, r4, r2
 801404e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8014052:	458c      	cmp	ip, r1
 8014054:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8014058:	d8e7      	bhi.n	801402a <__multiply+0xfe>
 801405a:	9a01      	ldr	r2, [sp, #4]
 801405c:	50b4      	str	r4, [r6, r2]
 801405e:	3604      	adds	r6, #4
 8014060:	e7a3      	b.n	8013faa <__multiply+0x7e>
 8014062:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014066:	2b00      	cmp	r3, #0
 8014068:	d1a5      	bne.n	8013fb6 <__multiply+0x8a>
 801406a:	3f01      	subs	r7, #1
 801406c:	e7a1      	b.n	8013fb2 <__multiply+0x86>
 801406e:	bf00      	nop
 8014070:	08018b1c 	.word	0x08018b1c
 8014074:	08018c0c 	.word	0x08018c0c

08014078 <__pow5mult>:
 8014078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801407c:	4615      	mov	r5, r2
 801407e:	f012 0203 	ands.w	r2, r2, #3
 8014082:	4606      	mov	r6, r0
 8014084:	460f      	mov	r7, r1
 8014086:	d007      	beq.n	8014098 <__pow5mult+0x20>
 8014088:	4c25      	ldr	r4, [pc, #148]	; (8014120 <__pow5mult+0xa8>)
 801408a:	3a01      	subs	r2, #1
 801408c:	2300      	movs	r3, #0
 801408e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014092:	f7ff fe51 	bl	8013d38 <__multadd>
 8014096:	4607      	mov	r7, r0
 8014098:	10ad      	asrs	r5, r5, #2
 801409a:	d03d      	beq.n	8014118 <__pow5mult+0xa0>
 801409c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801409e:	b97c      	cbnz	r4, 80140c0 <__pow5mult+0x48>
 80140a0:	2010      	movs	r0, #16
 80140a2:	f7fc fae9 	bl	8010678 <malloc>
 80140a6:	4602      	mov	r2, r0
 80140a8:	6270      	str	r0, [r6, #36]	; 0x24
 80140aa:	b928      	cbnz	r0, 80140b8 <__pow5mult+0x40>
 80140ac:	4b1d      	ldr	r3, [pc, #116]	; (8014124 <__pow5mult+0xac>)
 80140ae:	481e      	ldr	r0, [pc, #120]	; (8014128 <__pow5mult+0xb0>)
 80140b0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80140b4:	f7fe fb34 	bl	8012720 <__assert_func>
 80140b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80140bc:	6004      	str	r4, [r0, #0]
 80140be:	60c4      	str	r4, [r0, #12]
 80140c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80140c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80140c8:	b94c      	cbnz	r4, 80140de <__pow5mult+0x66>
 80140ca:	f240 2171 	movw	r1, #625	; 0x271
 80140ce:	4630      	mov	r0, r6
 80140d0:	f7ff ff16 	bl	8013f00 <__i2b>
 80140d4:	2300      	movs	r3, #0
 80140d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80140da:	4604      	mov	r4, r0
 80140dc:	6003      	str	r3, [r0, #0]
 80140de:	f04f 0900 	mov.w	r9, #0
 80140e2:	07eb      	lsls	r3, r5, #31
 80140e4:	d50a      	bpl.n	80140fc <__pow5mult+0x84>
 80140e6:	4639      	mov	r1, r7
 80140e8:	4622      	mov	r2, r4
 80140ea:	4630      	mov	r0, r6
 80140ec:	f7ff ff1e 	bl	8013f2c <__multiply>
 80140f0:	4639      	mov	r1, r7
 80140f2:	4680      	mov	r8, r0
 80140f4:	4630      	mov	r0, r6
 80140f6:	f7ff fdfd 	bl	8013cf4 <_Bfree>
 80140fa:	4647      	mov	r7, r8
 80140fc:	106d      	asrs	r5, r5, #1
 80140fe:	d00b      	beq.n	8014118 <__pow5mult+0xa0>
 8014100:	6820      	ldr	r0, [r4, #0]
 8014102:	b938      	cbnz	r0, 8014114 <__pow5mult+0x9c>
 8014104:	4622      	mov	r2, r4
 8014106:	4621      	mov	r1, r4
 8014108:	4630      	mov	r0, r6
 801410a:	f7ff ff0f 	bl	8013f2c <__multiply>
 801410e:	6020      	str	r0, [r4, #0]
 8014110:	f8c0 9000 	str.w	r9, [r0]
 8014114:	4604      	mov	r4, r0
 8014116:	e7e4      	b.n	80140e2 <__pow5mult+0x6a>
 8014118:	4638      	mov	r0, r7
 801411a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801411e:	bf00      	nop
 8014120:	08018d60 	.word	0x08018d60
 8014124:	080188d8 	.word	0x080188d8
 8014128:	08018c0c 	.word	0x08018c0c

0801412c <__lshift>:
 801412c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014130:	460c      	mov	r4, r1
 8014132:	6849      	ldr	r1, [r1, #4]
 8014134:	6923      	ldr	r3, [r4, #16]
 8014136:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801413a:	68a3      	ldr	r3, [r4, #8]
 801413c:	4607      	mov	r7, r0
 801413e:	4691      	mov	r9, r2
 8014140:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014144:	f108 0601 	add.w	r6, r8, #1
 8014148:	42b3      	cmp	r3, r6
 801414a:	db0b      	blt.n	8014164 <__lshift+0x38>
 801414c:	4638      	mov	r0, r7
 801414e:	f7ff fd91 	bl	8013c74 <_Balloc>
 8014152:	4605      	mov	r5, r0
 8014154:	b948      	cbnz	r0, 801416a <__lshift+0x3e>
 8014156:	4602      	mov	r2, r0
 8014158:	4b28      	ldr	r3, [pc, #160]	; (80141fc <__lshift+0xd0>)
 801415a:	4829      	ldr	r0, [pc, #164]	; (8014200 <__lshift+0xd4>)
 801415c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8014160:	f7fe fade 	bl	8012720 <__assert_func>
 8014164:	3101      	adds	r1, #1
 8014166:	005b      	lsls	r3, r3, #1
 8014168:	e7ee      	b.n	8014148 <__lshift+0x1c>
 801416a:	2300      	movs	r3, #0
 801416c:	f100 0114 	add.w	r1, r0, #20
 8014170:	f100 0210 	add.w	r2, r0, #16
 8014174:	4618      	mov	r0, r3
 8014176:	4553      	cmp	r3, sl
 8014178:	db33      	blt.n	80141e2 <__lshift+0xb6>
 801417a:	6920      	ldr	r0, [r4, #16]
 801417c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014180:	f104 0314 	add.w	r3, r4, #20
 8014184:	f019 091f 	ands.w	r9, r9, #31
 8014188:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801418c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014190:	d02b      	beq.n	80141ea <__lshift+0xbe>
 8014192:	f1c9 0e20 	rsb	lr, r9, #32
 8014196:	468a      	mov	sl, r1
 8014198:	2200      	movs	r2, #0
 801419a:	6818      	ldr	r0, [r3, #0]
 801419c:	fa00 f009 	lsl.w	r0, r0, r9
 80141a0:	4302      	orrs	r2, r0
 80141a2:	f84a 2b04 	str.w	r2, [sl], #4
 80141a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80141aa:	459c      	cmp	ip, r3
 80141ac:	fa22 f20e 	lsr.w	r2, r2, lr
 80141b0:	d8f3      	bhi.n	801419a <__lshift+0x6e>
 80141b2:	ebac 0304 	sub.w	r3, ip, r4
 80141b6:	3b15      	subs	r3, #21
 80141b8:	f023 0303 	bic.w	r3, r3, #3
 80141bc:	3304      	adds	r3, #4
 80141be:	f104 0015 	add.w	r0, r4, #21
 80141c2:	4584      	cmp	ip, r0
 80141c4:	bf38      	it	cc
 80141c6:	2304      	movcc	r3, #4
 80141c8:	50ca      	str	r2, [r1, r3]
 80141ca:	b10a      	cbz	r2, 80141d0 <__lshift+0xa4>
 80141cc:	f108 0602 	add.w	r6, r8, #2
 80141d0:	3e01      	subs	r6, #1
 80141d2:	4638      	mov	r0, r7
 80141d4:	612e      	str	r6, [r5, #16]
 80141d6:	4621      	mov	r1, r4
 80141d8:	f7ff fd8c 	bl	8013cf4 <_Bfree>
 80141dc:	4628      	mov	r0, r5
 80141de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80141e2:	f842 0f04 	str.w	r0, [r2, #4]!
 80141e6:	3301      	adds	r3, #1
 80141e8:	e7c5      	b.n	8014176 <__lshift+0x4a>
 80141ea:	3904      	subs	r1, #4
 80141ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80141f0:	f841 2f04 	str.w	r2, [r1, #4]!
 80141f4:	459c      	cmp	ip, r3
 80141f6:	d8f9      	bhi.n	80141ec <__lshift+0xc0>
 80141f8:	e7ea      	b.n	80141d0 <__lshift+0xa4>
 80141fa:	bf00      	nop
 80141fc:	08018b1c 	.word	0x08018b1c
 8014200:	08018c0c 	.word	0x08018c0c

08014204 <__mcmp>:
 8014204:	b530      	push	{r4, r5, lr}
 8014206:	6902      	ldr	r2, [r0, #16]
 8014208:	690c      	ldr	r4, [r1, #16]
 801420a:	1b12      	subs	r2, r2, r4
 801420c:	d10e      	bne.n	801422c <__mcmp+0x28>
 801420e:	f100 0314 	add.w	r3, r0, #20
 8014212:	3114      	adds	r1, #20
 8014214:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8014218:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801421c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8014220:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8014224:	42a5      	cmp	r5, r4
 8014226:	d003      	beq.n	8014230 <__mcmp+0x2c>
 8014228:	d305      	bcc.n	8014236 <__mcmp+0x32>
 801422a:	2201      	movs	r2, #1
 801422c:	4610      	mov	r0, r2
 801422e:	bd30      	pop	{r4, r5, pc}
 8014230:	4283      	cmp	r3, r0
 8014232:	d3f3      	bcc.n	801421c <__mcmp+0x18>
 8014234:	e7fa      	b.n	801422c <__mcmp+0x28>
 8014236:	f04f 32ff 	mov.w	r2, #4294967295
 801423a:	e7f7      	b.n	801422c <__mcmp+0x28>

0801423c <__mdiff>:
 801423c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014240:	460c      	mov	r4, r1
 8014242:	4606      	mov	r6, r0
 8014244:	4611      	mov	r1, r2
 8014246:	4620      	mov	r0, r4
 8014248:	4617      	mov	r7, r2
 801424a:	f7ff ffdb 	bl	8014204 <__mcmp>
 801424e:	1e05      	subs	r5, r0, #0
 8014250:	d110      	bne.n	8014274 <__mdiff+0x38>
 8014252:	4629      	mov	r1, r5
 8014254:	4630      	mov	r0, r6
 8014256:	f7ff fd0d 	bl	8013c74 <_Balloc>
 801425a:	b930      	cbnz	r0, 801426a <__mdiff+0x2e>
 801425c:	4b39      	ldr	r3, [pc, #228]	; (8014344 <__mdiff+0x108>)
 801425e:	4602      	mov	r2, r0
 8014260:	f240 2132 	movw	r1, #562	; 0x232
 8014264:	4838      	ldr	r0, [pc, #224]	; (8014348 <__mdiff+0x10c>)
 8014266:	f7fe fa5b 	bl	8012720 <__assert_func>
 801426a:	2301      	movs	r3, #1
 801426c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014270:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014274:	bfa4      	itt	ge
 8014276:	463b      	movge	r3, r7
 8014278:	4627      	movge	r7, r4
 801427a:	4630      	mov	r0, r6
 801427c:	6879      	ldr	r1, [r7, #4]
 801427e:	bfa6      	itte	ge
 8014280:	461c      	movge	r4, r3
 8014282:	2500      	movge	r5, #0
 8014284:	2501      	movlt	r5, #1
 8014286:	f7ff fcf5 	bl	8013c74 <_Balloc>
 801428a:	b920      	cbnz	r0, 8014296 <__mdiff+0x5a>
 801428c:	4b2d      	ldr	r3, [pc, #180]	; (8014344 <__mdiff+0x108>)
 801428e:	4602      	mov	r2, r0
 8014290:	f44f 7110 	mov.w	r1, #576	; 0x240
 8014294:	e7e6      	b.n	8014264 <__mdiff+0x28>
 8014296:	693e      	ldr	r6, [r7, #16]
 8014298:	60c5      	str	r5, [r0, #12]
 801429a:	6925      	ldr	r5, [r4, #16]
 801429c:	f107 0114 	add.w	r1, r7, #20
 80142a0:	f104 0914 	add.w	r9, r4, #20
 80142a4:	f100 0e14 	add.w	lr, r0, #20
 80142a8:	f107 0210 	add.w	r2, r7, #16
 80142ac:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80142b0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80142b4:	46f2      	mov	sl, lr
 80142b6:	2700      	movs	r7, #0
 80142b8:	f859 3b04 	ldr.w	r3, [r9], #4
 80142bc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80142c0:	fa1f f883 	uxth.w	r8, r3
 80142c4:	fa17 f78b 	uxtah	r7, r7, fp
 80142c8:	0c1b      	lsrs	r3, r3, #16
 80142ca:	eba7 0808 	sub.w	r8, r7, r8
 80142ce:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80142d2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80142d6:	fa1f f888 	uxth.w	r8, r8
 80142da:	141f      	asrs	r7, r3, #16
 80142dc:	454d      	cmp	r5, r9
 80142de:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80142e2:	f84a 3b04 	str.w	r3, [sl], #4
 80142e6:	d8e7      	bhi.n	80142b8 <__mdiff+0x7c>
 80142e8:	1b2b      	subs	r3, r5, r4
 80142ea:	3b15      	subs	r3, #21
 80142ec:	f023 0303 	bic.w	r3, r3, #3
 80142f0:	3304      	adds	r3, #4
 80142f2:	3415      	adds	r4, #21
 80142f4:	42a5      	cmp	r5, r4
 80142f6:	bf38      	it	cc
 80142f8:	2304      	movcc	r3, #4
 80142fa:	4419      	add	r1, r3
 80142fc:	4473      	add	r3, lr
 80142fe:	469e      	mov	lr, r3
 8014300:	460d      	mov	r5, r1
 8014302:	4565      	cmp	r5, ip
 8014304:	d30e      	bcc.n	8014324 <__mdiff+0xe8>
 8014306:	f10c 0203 	add.w	r2, ip, #3
 801430a:	1a52      	subs	r2, r2, r1
 801430c:	f022 0203 	bic.w	r2, r2, #3
 8014310:	3903      	subs	r1, #3
 8014312:	458c      	cmp	ip, r1
 8014314:	bf38      	it	cc
 8014316:	2200      	movcc	r2, #0
 8014318:	441a      	add	r2, r3
 801431a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801431e:	b17b      	cbz	r3, 8014340 <__mdiff+0x104>
 8014320:	6106      	str	r6, [r0, #16]
 8014322:	e7a5      	b.n	8014270 <__mdiff+0x34>
 8014324:	f855 8b04 	ldr.w	r8, [r5], #4
 8014328:	fa17 f488 	uxtah	r4, r7, r8
 801432c:	1422      	asrs	r2, r4, #16
 801432e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8014332:	b2a4      	uxth	r4, r4
 8014334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8014338:	f84e 4b04 	str.w	r4, [lr], #4
 801433c:	1417      	asrs	r7, r2, #16
 801433e:	e7e0      	b.n	8014302 <__mdiff+0xc6>
 8014340:	3e01      	subs	r6, #1
 8014342:	e7ea      	b.n	801431a <__mdiff+0xde>
 8014344:	08018b1c 	.word	0x08018b1c
 8014348:	08018c0c 	.word	0x08018c0c

0801434c <__ulp>:
 801434c:	b082      	sub	sp, #8
 801434e:	ed8d 0b00 	vstr	d0, [sp]
 8014352:	9b01      	ldr	r3, [sp, #4]
 8014354:	4912      	ldr	r1, [pc, #72]	; (80143a0 <__ulp+0x54>)
 8014356:	4019      	ands	r1, r3
 8014358:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801435c:	2900      	cmp	r1, #0
 801435e:	dd05      	ble.n	801436c <__ulp+0x20>
 8014360:	2200      	movs	r2, #0
 8014362:	460b      	mov	r3, r1
 8014364:	ec43 2b10 	vmov	d0, r2, r3
 8014368:	b002      	add	sp, #8
 801436a:	4770      	bx	lr
 801436c:	4249      	negs	r1, r1
 801436e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8014372:	ea4f 5021 	mov.w	r0, r1, asr #20
 8014376:	f04f 0200 	mov.w	r2, #0
 801437a:	f04f 0300 	mov.w	r3, #0
 801437e:	da04      	bge.n	801438a <__ulp+0x3e>
 8014380:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8014384:	fa41 f300 	asr.w	r3, r1, r0
 8014388:	e7ec      	b.n	8014364 <__ulp+0x18>
 801438a:	f1a0 0114 	sub.w	r1, r0, #20
 801438e:	291e      	cmp	r1, #30
 8014390:	bfda      	itte	le
 8014392:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8014396:	fa20 f101 	lsrle.w	r1, r0, r1
 801439a:	2101      	movgt	r1, #1
 801439c:	460a      	mov	r2, r1
 801439e:	e7e1      	b.n	8014364 <__ulp+0x18>
 80143a0:	7ff00000 	.word	0x7ff00000

080143a4 <__b2d>:
 80143a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143a6:	6905      	ldr	r5, [r0, #16]
 80143a8:	f100 0714 	add.w	r7, r0, #20
 80143ac:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80143b0:	1f2e      	subs	r6, r5, #4
 80143b2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80143b6:	4620      	mov	r0, r4
 80143b8:	f7ff fd52 	bl	8013e60 <__hi0bits>
 80143bc:	f1c0 0320 	rsb	r3, r0, #32
 80143c0:	280a      	cmp	r0, #10
 80143c2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8014440 <__b2d+0x9c>
 80143c6:	600b      	str	r3, [r1, #0]
 80143c8:	dc14      	bgt.n	80143f4 <__b2d+0x50>
 80143ca:	f1c0 0e0b 	rsb	lr, r0, #11
 80143ce:	fa24 f10e 	lsr.w	r1, r4, lr
 80143d2:	42b7      	cmp	r7, r6
 80143d4:	ea41 030c 	orr.w	r3, r1, ip
 80143d8:	bf34      	ite	cc
 80143da:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80143de:	2100      	movcs	r1, #0
 80143e0:	3015      	adds	r0, #21
 80143e2:	fa04 f000 	lsl.w	r0, r4, r0
 80143e6:	fa21 f10e 	lsr.w	r1, r1, lr
 80143ea:	ea40 0201 	orr.w	r2, r0, r1
 80143ee:	ec43 2b10 	vmov	d0, r2, r3
 80143f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80143f4:	42b7      	cmp	r7, r6
 80143f6:	bf3a      	itte	cc
 80143f8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80143fc:	f1a5 0608 	subcc.w	r6, r5, #8
 8014400:	2100      	movcs	r1, #0
 8014402:	380b      	subs	r0, #11
 8014404:	d017      	beq.n	8014436 <__b2d+0x92>
 8014406:	f1c0 0c20 	rsb	ip, r0, #32
 801440a:	fa04 f500 	lsl.w	r5, r4, r0
 801440e:	42be      	cmp	r6, r7
 8014410:	fa21 f40c 	lsr.w	r4, r1, ip
 8014414:	ea45 0504 	orr.w	r5, r5, r4
 8014418:	bf8c      	ite	hi
 801441a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801441e:	2400      	movls	r4, #0
 8014420:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8014424:	fa01 f000 	lsl.w	r0, r1, r0
 8014428:	fa24 f40c 	lsr.w	r4, r4, ip
 801442c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8014430:	ea40 0204 	orr.w	r2, r0, r4
 8014434:	e7db      	b.n	80143ee <__b2d+0x4a>
 8014436:	ea44 030c 	orr.w	r3, r4, ip
 801443a:	460a      	mov	r2, r1
 801443c:	e7d7      	b.n	80143ee <__b2d+0x4a>
 801443e:	bf00      	nop
 8014440:	3ff00000 	.word	0x3ff00000

08014444 <__d2b>:
 8014444:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014448:	4689      	mov	r9, r1
 801444a:	2101      	movs	r1, #1
 801444c:	ec57 6b10 	vmov	r6, r7, d0
 8014450:	4690      	mov	r8, r2
 8014452:	f7ff fc0f 	bl	8013c74 <_Balloc>
 8014456:	4604      	mov	r4, r0
 8014458:	b930      	cbnz	r0, 8014468 <__d2b+0x24>
 801445a:	4602      	mov	r2, r0
 801445c:	4b25      	ldr	r3, [pc, #148]	; (80144f4 <__d2b+0xb0>)
 801445e:	4826      	ldr	r0, [pc, #152]	; (80144f8 <__d2b+0xb4>)
 8014460:	f240 310a 	movw	r1, #778	; 0x30a
 8014464:	f7fe f95c 	bl	8012720 <__assert_func>
 8014468:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801446c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014470:	bb35      	cbnz	r5, 80144c0 <__d2b+0x7c>
 8014472:	2e00      	cmp	r6, #0
 8014474:	9301      	str	r3, [sp, #4]
 8014476:	d028      	beq.n	80144ca <__d2b+0x86>
 8014478:	4668      	mov	r0, sp
 801447a:	9600      	str	r6, [sp, #0]
 801447c:	f7ff fd10 	bl	8013ea0 <__lo0bits>
 8014480:	9900      	ldr	r1, [sp, #0]
 8014482:	b300      	cbz	r0, 80144c6 <__d2b+0x82>
 8014484:	9a01      	ldr	r2, [sp, #4]
 8014486:	f1c0 0320 	rsb	r3, r0, #32
 801448a:	fa02 f303 	lsl.w	r3, r2, r3
 801448e:	430b      	orrs	r3, r1
 8014490:	40c2      	lsrs	r2, r0
 8014492:	6163      	str	r3, [r4, #20]
 8014494:	9201      	str	r2, [sp, #4]
 8014496:	9b01      	ldr	r3, [sp, #4]
 8014498:	61a3      	str	r3, [r4, #24]
 801449a:	2b00      	cmp	r3, #0
 801449c:	bf14      	ite	ne
 801449e:	2202      	movne	r2, #2
 80144a0:	2201      	moveq	r2, #1
 80144a2:	6122      	str	r2, [r4, #16]
 80144a4:	b1d5      	cbz	r5, 80144dc <__d2b+0x98>
 80144a6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80144aa:	4405      	add	r5, r0
 80144ac:	f8c9 5000 	str.w	r5, [r9]
 80144b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80144b4:	f8c8 0000 	str.w	r0, [r8]
 80144b8:	4620      	mov	r0, r4
 80144ba:	b003      	add	sp, #12
 80144bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80144c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80144c4:	e7d5      	b.n	8014472 <__d2b+0x2e>
 80144c6:	6161      	str	r1, [r4, #20]
 80144c8:	e7e5      	b.n	8014496 <__d2b+0x52>
 80144ca:	a801      	add	r0, sp, #4
 80144cc:	f7ff fce8 	bl	8013ea0 <__lo0bits>
 80144d0:	9b01      	ldr	r3, [sp, #4]
 80144d2:	6163      	str	r3, [r4, #20]
 80144d4:	2201      	movs	r2, #1
 80144d6:	6122      	str	r2, [r4, #16]
 80144d8:	3020      	adds	r0, #32
 80144da:	e7e3      	b.n	80144a4 <__d2b+0x60>
 80144dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80144e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80144e4:	f8c9 0000 	str.w	r0, [r9]
 80144e8:	6918      	ldr	r0, [r3, #16]
 80144ea:	f7ff fcb9 	bl	8013e60 <__hi0bits>
 80144ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80144f2:	e7df      	b.n	80144b4 <__d2b+0x70>
 80144f4:	08018b1c 	.word	0x08018b1c
 80144f8:	08018c0c 	.word	0x08018c0c

080144fc <__ratio>:
 80144fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014500:	4688      	mov	r8, r1
 8014502:	4669      	mov	r1, sp
 8014504:	4681      	mov	r9, r0
 8014506:	f7ff ff4d 	bl	80143a4 <__b2d>
 801450a:	a901      	add	r1, sp, #4
 801450c:	4640      	mov	r0, r8
 801450e:	ec55 4b10 	vmov	r4, r5, d0
 8014512:	f7ff ff47 	bl	80143a4 <__b2d>
 8014516:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801451a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801451e:	eba3 0c02 	sub.w	ip, r3, r2
 8014522:	e9dd 3200 	ldrd	r3, r2, [sp]
 8014526:	1a9b      	subs	r3, r3, r2
 8014528:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801452c:	ec51 0b10 	vmov	r0, r1, d0
 8014530:	2b00      	cmp	r3, #0
 8014532:	bfd6      	itet	le
 8014534:	460a      	movle	r2, r1
 8014536:	462a      	movgt	r2, r5
 8014538:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801453c:	468b      	mov	fp, r1
 801453e:	462f      	mov	r7, r5
 8014540:	bfd4      	ite	le
 8014542:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8014546:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801454a:	4620      	mov	r0, r4
 801454c:	ee10 2a10 	vmov	r2, s0
 8014550:	465b      	mov	r3, fp
 8014552:	4639      	mov	r1, r7
 8014554:	f7ec f992 	bl	800087c <__aeabi_ddiv>
 8014558:	ec41 0b10 	vmov	d0, r0, r1
 801455c:	b003      	add	sp, #12
 801455e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014562 <__copybits>:
 8014562:	3901      	subs	r1, #1
 8014564:	b570      	push	{r4, r5, r6, lr}
 8014566:	1149      	asrs	r1, r1, #5
 8014568:	6914      	ldr	r4, [r2, #16]
 801456a:	3101      	adds	r1, #1
 801456c:	f102 0314 	add.w	r3, r2, #20
 8014570:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8014574:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014578:	1f05      	subs	r5, r0, #4
 801457a:	42a3      	cmp	r3, r4
 801457c:	d30c      	bcc.n	8014598 <__copybits+0x36>
 801457e:	1aa3      	subs	r3, r4, r2
 8014580:	3b11      	subs	r3, #17
 8014582:	f023 0303 	bic.w	r3, r3, #3
 8014586:	3211      	adds	r2, #17
 8014588:	42a2      	cmp	r2, r4
 801458a:	bf88      	it	hi
 801458c:	2300      	movhi	r3, #0
 801458e:	4418      	add	r0, r3
 8014590:	2300      	movs	r3, #0
 8014592:	4288      	cmp	r0, r1
 8014594:	d305      	bcc.n	80145a2 <__copybits+0x40>
 8014596:	bd70      	pop	{r4, r5, r6, pc}
 8014598:	f853 6b04 	ldr.w	r6, [r3], #4
 801459c:	f845 6f04 	str.w	r6, [r5, #4]!
 80145a0:	e7eb      	b.n	801457a <__copybits+0x18>
 80145a2:	f840 3b04 	str.w	r3, [r0], #4
 80145a6:	e7f4      	b.n	8014592 <__copybits+0x30>

080145a8 <__any_on>:
 80145a8:	f100 0214 	add.w	r2, r0, #20
 80145ac:	6900      	ldr	r0, [r0, #16]
 80145ae:	114b      	asrs	r3, r1, #5
 80145b0:	4298      	cmp	r0, r3
 80145b2:	b510      	push	{r4, lr}
 80145b4:	db11      	blt.n	80145da <__any_on+0x32>
 80145b6:	dd0a      	ble.n	80145ce <__any_on+0x26>
 80145b8:	f011 011f 	ands.w	r1, r1, #31
 80145bc:	d007      	beq.n	80145ce <__any_on+0x26>
 80145be:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80145c2:	fa24 f001 	lsr.w	r0, r4, r1
 80145c6:	fa00 f101 	lsl.w	r1, r0, r1
 80145ca:	428c      	cmp	r4, r1
 80145cc:	d10b      	bne.n	80145e6 <__any_on+0x3e>
 80145ce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80145d2:	4293      	cmp	r3, r2
 80145d4:	d803      	bhi.n	80145de <__any_on+0x36>
 80145d6:	2000      	movs	r0, #0
 80145d8:	bd10      	pop	{r4, pc}
 80145da:	4603      	mov	r3, r0
 80145dc:	e7f7      	b.n	80145ce <__any_on+0x26>
 80145de:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80145e2:	2900      	cmp	r1, #0
 80145e4:	d0f5      	beq.n	80145d2 <__any_on+0x2a>
 80145e6:	2001      	movs	r0, #1
 80145e8:	e7f6      	b.n	80145d8 <__any_on+0x30>

080145ea <_calloc_r>:
 80145ea:	b513      	push	{r0, r1, r4, lr}
 80145ec:	434a      	muls	r2, r1
 80145ee:	4611      	mov	r1, r2
 80145f0:	9201      	str	r2, [sp, #4]
 80145f2:	f7fc fb27 	bl	8010c44 <_malloc_r>
 80145f6:	4604      	mov	r4, r0
 80145f8:	b118      	cbz	r0, 8014602 <_calloc_r+0x18>
 80145fa:	9a01      	ldr	r2, [sp, #4]
 80145fc:	2100      	movs	r1, #0
 80145fe:	f7fc f84b 	bl	8010698 <memset>
 8014602:	4620      	mov	r0, r4
 8014604:	b002      	add	sp, #8
 8014606:	bd10      	pop	{r4, pc}

08014608 <__ssputs_r>:
 8014608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801460c:	688e      	ldr	r6, [r1, #8]
 801460e:	429e      	cmp	r6, r3
 8014610:	4682      	mov	sl, r0
 8014612:	460c      	mov	r4, r1
 8014614:	4690      	mov	r8, r2
 8014616:	461f      	mov	r7, r3
 8014618:	d838      	bhi.n	801468c <__ssputs_r+0x84>
 801461a:	898a      	ldrh	r2, [r1, #12]
 801461c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014620:	d032      	beq.n	8014688 <__ssputs_r+0x80>
 8014622:	6825      	ldr	r5, [r4, #0]
 8014624:	6909      	ldr	r1, [r1, #16]
 8014626:	eba5 0901 	sub.w	r9, r5, r1
 801462a:	6965      	ldr	r5, [r4, #20]
 801462c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014630:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014634:	3301      	adds	r3, #1
 8014636:	444b      	add	r3, r9
 8014638:	106d      	asrs	r5, r5, #1
 801463a:	429d      	cmp	r5, r3
 801463c:	bf38      	it	cc
 801463e:	461d      	movcc	r5, r3
 8014640:	0553      	lsls	r3, r2, #21
 8014642:	d531      	bpl.n	80146a8 <__ssputs_r+0xa0>
 8014644:	4629      	mov	r1, r5
 8014646:	f7fc fafd 	bl	8010c44 <_malloc_r>
 801464a:	4606      	mov	r6, r0
 801464c:	b950      	cbnz	r0, 8014664 <__ssputs_r+0x5c>
 801464e:	230c      	movs	r3, #12
 8014650:	f8ca 3000 	str.w	r3, [sl]
 8014654:	89a3      	ldrh	r3, [r4, #12]
 8014656:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801465a:	81a3      	strh	r3, [r4, #12]
 801465c:	f04f 30ff 	mov.w	r0, #4294967295
 8014660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014664:	6921      	ldr	r1, [r4, #16]
 8014666:	464a      	mov	r2, r9
 8014668:	f7ff fae9 	bl	8013c3e <memcpy>
 801466c:	89a3      	ldrh	r3, [r4, #12]
 801466e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014672:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014676:	81a3      	strh	r3, [r4, #12]
 8014678:	6126      	str	r6, [r4, #16]
 801467a:	6165      	str	r5, [r4, #20]
 801467c:	444e      	add	r6, r9
 801467e:	eba5 0509 	sub.w	r5, r5, r9
 8014682:	6026      	str	r6, [r4, #0]
 8014684:	60a5      	str	r5, [r4, #8]
 8014686:	463e      	mov	r6, r7
 8014688:	42be      	cmp	r6, r7
 801468a:	d900      	bls.n	801468e <__ssputs_r+0x86>
 801468c:	463e      	mov	r6, r7
 801468e:	4632      	mov	r2, r6
 8014690:	6820      	ldr	r0, [r4, #0]
 8014692:	4641      	mov	r1, r8
 8014694:	f000 feac 	bl	80153f0 <memmove>
 8014698:	68a3      	ldr	r3, [r4, #8]
 801469a:	6822      	ldr	r2, [r4, #0]
 801469c:	1b9b      	subs	r3, r3, r6
 801469e:	4432      	add	r2, r6
 80146a0:	60a3      	str	r3, [r4, #8]
 80146a2:	6022      	str	r2, [r4, #0]
 80146a4:	2000      	movs	r0, #0
 80146a6:	e7db      	b.n	8014660 <__ssputs_r+0x58>
 80146a8:	462a      	mov	r2, r5
 80146aa:	f000 febb 	bl	8015424 <_realloc_r>
 80146ae:	4606      	mov	r6, r0
 80146b0:	2800      	cmp	r0, #0
 80146b2:	d1e1      	bne.n	8014678 <__ssputs_r+0x70>
 80146b4:	6921      	ldr	r1, [r4, #16]
 80146b6:	4650      	mov	r0, sl
 80146b8:	f7fc fa74 	bl	8010ba4 <_free_r>
 80146bc:	e7c7      	b.n	801464e <__ssputs_r+0x46>
	...

080146c0 <_svfiprintf_r>:
 80146c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146c4:	4698      	mov	r8, r3
 80146c6:	898b      	ldrh	r3, [r1, #12]
 80146c8:	061b      	lsls	r3, r3, #24
 80146ca:	b09d      	sub	sp, #116	; 0x74
 80146cc:	4607      	mov	r7, r0
 80146ce:	460d      	mov	r5, r1
 80146d0:	4614      	mov	r4, r2
 80146d2:	d50e      	bpl.n	80146f2 <_svfiprintf_r+0x32>
 80146d4:	690b      	ldr	r3, [r1, #16]
 80146d6:	b963      	cbnz	r3, 80146f2 <_svfiprintf_r+0x32>
 80146d8:	2140      	movs	r1, #64	; 0x40
 80146da:	f7fc fab3 	bl	8010c44 <_malloc_r>
 80146de:	6028      	str	r0, [r5, #0]
 80146e0:	6128      	str	r0, [r5, #16]
 80146e2:	b920      	cbnz	r0, 80146ee <_svfiprintf_r+0x2e>
 80146e4:	230c      	movs	r3, #12
 80146e6:	603b      	str	r3, [r7, #0]
 80146e8:	f04f 30ff 	mov.w	r0, #4294967295
 80146ec:	e0d1      	b.n	8014892 <_svfiprintf_r+0x1d2>
 80146ee:	2340      	movs	r3, #64	; 0x40
 80146f0:	616b      	str	r3, [r5, #20]
 80146f2:	2300      	movs	r3, #0
 80146f4:	9309      	str	r3, [sp, #36]	; 0x24
 80146f6:	2320      	movs	r3, #32
 80146f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80146fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8014700:	2330      	movs	r3, #48	; 0x30
 8014702:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80148ac <_svfiprintf_r+0x1ec>
 8014706:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801470a:	f04f 0901 	mov.w	r9, #1
 801470e:	4623      	mov	r3, r4
 8014710:	469a      	mov	sl, r3
 8014712:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014716:	b10a      	cbz	r2, 801471c <_svfiprintf_r+0x5c>
 8014718:	2a25      	cmp	r2, #37	; 0x25
 801471a:	d1f9      	bne.n	8014710 <_svfiprintf_r+0x50>
 801471c:	ebba 0b04 	subs.w	fp, sl, r4
 8014720:	d00b      	beq.n	801473a <_svfiprintf_r+0x7a>
 8014722:	465b      	mov	r3, fp
 8014724:	4622      	mov	r2, r4
 8014726:	4629      	mov	r1, r5
 8014728:	4638      	mov	r0, r7
 801472a:	f7ff ff6d 	bl	8014608 <__ssputs_r>
 801472e:	3001      	adds	r0, #1
 8014730:	f000 80aa 	beq.w	8014888 <_svfiprintf_r+0x1c8>
 8014734:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014736:	445a      	add	r2, fp
 8014738:	9209      	str	r2, [sp, #36]	; 0x24
 801473a:	f89a 3000 	ldrb.w	r3, [sl]
 801473e:	2b00      	cmp	r3, #0
 8014740:	f000 80a2 	beq.w	8014888 <_svfiprintf_r+0x1c8>
 8014744:	2300      	movs	r3, #0
 8014746:	f04f 32ff 	mov.w	r2, #4294967295
 801474a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801474e:	f10a 0a01 	add.w	sl, sl, #1
 8014752:	9304      	str	r3, [sp, #16]
 8014754:	9307      	str	r3, [sp, #28]
 8014756:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801475a:	931a      	str	r3, [sp, #104]	; 0x68
 801475c:	4654      	mov	r4, sl
 801475e:	2205      	movs	r2, #5
 8014760:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014764:	4851      	ldr	r0, [pc, #324]	; (80148ac <_svfiprintf_r+0x1ec>)
 8014766:	f7eb fd53 	bl	8000210 <memchr>
 801476a:	9a04      	ldr	r2, [sp, #16]
 801476c:	b9d8      	cbnz	r0, 80147a6 <_svfiprintf_r+0xe6>
 801476e:	06d0      	lsls	r0, r2, #27
 8014770:	bf44      	itt	mi
 8014772:	2320      	movmi	r3, #32
 8014774:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014778:	0711      	lsls	r1, r2, #28
 801477a:	bf44      	itt	mi
 801477c:	232b      	movmi	r3, #43	; 0x2b
 801477e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014782:	f89a 3000 	ldrb.w	r3, [sl]
 8014786:	2b2a      	cmp	r3, #42	; 0x2a
 8014788:	d015      	beq.n	80147b6 <_svfiprintf_r+0xf6>
 801478a:	9a07      	ldr	r2, [sp, #28]
 801478c:	4654      	mov	r4, sl
 801478e:	2000      	movs	r0, #0
 8014790:	f04f 0c0a 	mov.w	ip, #10
 8014794:	4621      	mov	r1, r4
 8014796:	f811 3b01 	ldrb.w	r3, [r1], #1
 801479a:	3b30      	subs	r3, #48	; 0x30
 801479c:	2b09      	cmp	r3, #9
 801479e:	d94e      	bls.n	801483e <_svfiprintf_r+0x17e>
 80147a0:	b1b0      	cbz	r0, 80147d0 <_svfiprintf_r+0x110>
 80147a2:	9207      	str	r2, [sp, #28]
 80147a4:	e014      	b.n	80147d0 <_svfiprintf_r+0x110>
 80147a6:	eba0 0308 	sub.w	r3, r0, r8
 80147aa:	fa09 f303 	lsl.w	r3, r9, r3
 80147ae:	4313      	orrs	r3, r2
 80147b0:	9304      	str	r3, [sp, #16]
 80147b2:	46a2      	mov	sl, r4
 80147b4:	e7d2      	b.n	801475c <_svfiprintf_r+0x9c>
 80147b6:	9b03      	ldr	r3, [sp, #12]
 80147b8:	1d19      	adds	r1, r3, #4
 80147ba:	681b      	ldr	r3, [r3, #0]
 80147bc:	9103      	str	r1, [sp, #12]
 80147be:	2b00      	cmp	r3, #0
 80147c0:	bfbb      	ittet	lt
 80147c2:	425b      	neglt	r3, r3
 80147c4:	f042 0202 	orrlt.w	r2, r2, #2
 80147c8:	9307      	strge	r3, [sp, #28]
 80147ca:	9307      	strlt	r3, [sp, #28]
 80147cc:	bfb8      	it	lt
 80147ce:	9204      	strlt	r2, [sp, #16]
 80147d0:	7823      	ldrb	r3, [r4, #0]
 80147d2:	2b2e      	cmp	r3, #46	; 0x2e
 80147d4:	d10c      	bne.n	80147f0 <_svfiprintf_r+0x130>
 80147d6:	7863      	ldrb	r3, [r4, #1]
 80147d8:	2b2a      	cmp	r3, #42	; 0x2a
 80147da:	d135      	bne.n	8014848 <_svfiprintf_r+0x188>
 80147dc:	9b03      	ldr	r3, [sp, #12]
 80147de:	1d1a      	adds	r2, r3, #4
 80147e0:	681b      	ldr	r3, [r3, #0]
 80147e2:	9203      	str	r2, [sp, #12]
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	bfb8      	it	lt
 80147e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80147ec:	3402      	adds	r4, #2
 80147ee:	9305      	str	r3, [sp, #20]
 80147f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80148bc <_svfiprintf_r+0x1fc>
 80147f4:	7821      	ldrb	r1, [r4, #0]
 80147f6:	2203      	movs	r2, #3
 80147f8:	4650      	mov	r0, sl
 80147fa:	f7eb fd09 	bl	8000210 <memchr>
 80147fe:	b140      	cbz	r0, 8014812 <_svfiprintf_r+0x152>
 8014800:	2340      	movs	r3, #64	; 0x40
 8014802:	eba0 000a 	sub.w	r0, r0, sl
 8014806:	fa03 f000 	lsl.w	r0, r3, r0
 801480a:	9b04      	ldr	r3, [sp, #16]
 801480c:	4303      	orrs	r3, r0
 801480e:	3401      	adds	r4, #1
 8014810:	9304      	str	r3, [sp, #16]
 8014812:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014816:	4826      	ldr	r0, [pc, #152]	; (80148b0 <_svfiprintf_r+0x1f0>)
 8014818:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801481c:	2206      	movs	r2, #6
 801481e:	f7eb fcf7 	bl	8000210 <memchr>
 8014822:	2800      	cmp	r0, #0
 8014824:	d038      	beq.n	8014898 <_svfiprintf_r+0x1d8>
 8014826:	4b23      	ldr	r3, [pc, #140]	; (80148b4 <_svfiprintf_r+0x1f4>)
 8014828:	bb1b      	cbnz	r3, 8014872 <_svfiprintf_r+0x1b2>
 801482a:	9b03      	ldr	r3, [sp, #12]
 801482c:	3307      	adds	r3, #7
 801482e:	f023 0307 	bic.w	r3, r3, #7
 8014832:	3308      	adds	r3, #8
 8014834:	9303      	str	r3, [sp, #12]
 8014836:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014838:	4433      	add	r3, r6
 801483a:	9309      	str	r3, [sp, #36]	; 0x24
 801483c:	e767      	b.n	801470e <_svfiprintf_r+0x4e>
 801483e:	fb0c 3202 	mla	r2, ip, r2, r3
 8014842:	460c      	mov	r4, r1
 8014844:	2001      	movs	r0, #1
 8014846:	e7a5      	b.n	8014794 <_svfiprintf_r+0xd4>
 8014848:	2300      	movs	r3, #0
 801484a:	3401      	adds	r4, #1
 801484c:	9305      	str	r3, [sp, #20]
 801484e:	4619      	mov	r1, r3
 8014850:	f04f 0c0a 	mov.w	ip, #10
 8014854:	4620      	mov	r0, r4
 8014856:	f810 2b01 	ldrb.w	r2, [r0], #1
 801485a:	3a30      	subs	r2, #48	; 0x30
 801485c:	2a09      	cmp	r2, #9
 801485e:	d903      	bls.n	8014868 <_svfiprintf_r+0x1a8>
 8014860:	2b00      	cmp	r3, #0
 8014862:	d0c5      	beq.n	80147f0 <_svfiprintf_r+0x130>
 8014864:	9105      	str	r1, [sp, #20]
 8014866:	e7c3      	b.n	80147f0 <_svfiprintf_r+0x130>
 8014868:	fb0c 2101 	mla	r1, ip, r1, r2
 801486c:	4604      	mov	r4, r0
 801486e:	2301      	movs	r3, #1
 8014870:	e7f0      	b.n	8014854 <_svfiprintf_r+0x194>
 8014872:	ab03      	add	r3, sp, #12
 8014874:	9300      	str	r3, [sp, #0]
 8014876:	462a      	mov	r2, r5
 8014878:	4b0f      	ldr	r3, [pc, #60]	; (80148b8 <_svfiprintf_r+0x1f8>)
 801487a:	a904      	add	r1, sp, #16
 801487c:	4638      	mov	r0, r7
 801487e:	f7fc fadb 	bl	8010e38 <_printf_float>
 8014882:	1c42      	adds	r2, r0, #1
 8014884:	4606      	mov	r6, r0
 8014886:	d1d6      	bne.n	8014836 <_svfiprintf_r+0x176>
 8014888:	89ab      	ldrh	r3, [r5, #12]
 801488a:	065b      	lsls	r3, r3, #25
 801488c:	f53f af2c 	bmi.w	80146e8 <_svfiprintf_r+0x28>
 8014890:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014892:	b01d      	add	sp, #116	; 0x74
 8014894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014898:	ab03      	add	r3, sp, #12
 801489a:	9300      	str	r3, [sp, #0]
 801489c:	462a      	mov	r2, r5
 801489e:	4b06      	ldr	r3, [pc, #24]	; (80148b8 <_svfiprintf_r+0x1f8>)
 80148a0:	a904      	add	r1, sp, #16
 80148a2:	4638      	mov	r0, r7
 80148a4:	f7fc fd6c 	bl	8011380 <_printf_i>
 80148a8:	e7eb      	b.n	8014882 <_svfiprintf_r+0x1c2>
 80148aa:	bf00      	nop
 80148ac:	08018d6c 	.word	0x08018d6c
 80148b0:	08018d76 	.word	0x08018d76
 80148b4:	08010e39 	.word	0x08010e39
 80148b8:	08014609 	.word	0x08014609
 80148bc:	08018d72 	.word	0x08018d72

080148c0 <__sfputc_r>:
 80148c0:	6893      	ldr	r3, [r2, #8]
 80148c2:	3b01      	subs	r3, #1
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	b410      	push	{r4}
 80148c8:	6093      	str	r3, [r2, #8]
 80148ca:	da08      	bge.n	80148de <__sfputc_r+0x1e>
 80148cc:	6994      	ldr	r4, [r2, #24]
 80148ce:	42a3      	cmp	r3, r4
 80148d0:	db01      	blt.n	80148d6 <__sfputc_r+0x16>
 80148d2:	290a      	cmp	r1, #10
 80148d4:	d103      	bne.n	80148de <__sfputc_r+0x1e>
 80148d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80148da:	f000 ba57 	b.w	8014d8c <__swbuf_r>
 80148de:	6813      	ldr	r3, [r2, #0]
 80148e0:	1c58      	adds	r0, r3, #1
 80148e2:	6010      	str	r0, [r2, #0]
 80148e4:	7019      	strb	r1, [r3, #0]
 80148e6:	4608      	mov	r0, r1
 80148e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80148ec:	4770      	bx	lr

080148ee <__sfputs_r>:
 80148ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148f0:	4606      	mov	r6, r0
 80148f2:	460f      	mov	r7, r1
 80148f4:	4614      	mov	r4, r2
 80148f6:	18d5      	adds	r5, r2, r3
 80148f8:	42ac      	cmp	r4, r5
 80148fa:	d101      	bne.n	8014900 <__sfputs_r+0x12>
 80148fc:	2000      	movs	r0, #0
 80148fe:	e007      	b.n	8014910 <__sfputs_r+0x22>
 8014900:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014904:	463a      	mov	r2, r7
 8014906:	4630      	mov	r0, r6
 8014908:	f7ff ffda 	bl	80148c0 <__sfputc_r>
 801490c:	1c43      	adds	r3, r0, #1
 801490e:	d1f3      	bne.n	80148f8 <__sfputs_r+0xa>
 8014910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014914 <_vfiprintf_r>:
 8014914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014918:	460d      	mov	r5, r1
 801491a:	b09d      	sub	sp, #116	; 0x74
 801491c:	4614      	mov	r4, r2
 801491e:	4698      	mov	r8, r3
 8014920:	4606      	mov	r6, r0
 8014922:	b118      	cbz	r0, 801492c <_vfiprintf_r+0x18>
 8014924:	6983      	ldr	r3, [r0, #24]
 8014926:	b90b      	cbnz	r3, 801492c <_vfiprintf_r+0x18>
 8014928:	f000 fc4e 	bl	80151c8 <__sinit>
 801492c:	4b89      	ldr	r3, [pc, #548]	; (8014b54 <_vfiprintf_r+0x240>)
 801492e:	429d      	cmp	r5, r3
 8014930:	d11b      	bne.n	801496a <_vfiprintf_r+0x56>
 8014932:	6875      	ldr	r5, [r6, #4]
 8014934:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014936:	07d9      	lsls	r1, r3, #31
 8014938:	d405      	bmi.n	8014946 <_vfiprintf_r+0x32>
 801493a:	89ab      	ldrh	r3, [r5, #12]
 801493c:	059a      	lsls	r2, r3, #22
 801493e:	d402      	bmi.n	8014946 <_vfiprintf_r+0x32>
 8014940:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014942:	f7ff f967 	bl	8013c14 <__retarget_lock_acquire_recursive>
 8014946:	89ab      	ldrh	r3, [r5, #12]
 8014948:	071b      	lsls	r3, r3, #28
 801494a:	d501      	bpl.n	8014950 <_vfiprintf_r+0x3c>
 801494c:	692b      	ldr	r3, [r5, #16]
 801494e:	b9eb      	cbnz	r3, 801498c <_vfiprintf_r+0x78>
 8014950:	4629      	mov	r1, r5
 8014952:	4630      	mov	r0, r6
 8014954:	f000 fa8c 	bl	8014e70 <__swsetup_r>
 8014958:	b1c0      	cbz	r0, 801498c <_vfiprintf_r+0x78>
 801495a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801495c:	07dc      	lsls	r4, r3, #31
 801495e:	d50e      	bpl.n	801497e <_vfiprintf_r+0x6a>
 8014960:	f04f 30ff 	mov.w	r0, #4294967295
 8014964:	b01d      	add	sp, #116	; 0x74
 8014966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801496a:	4b7b      	ldr	r3, [pc, #492]	; (8014b58 <_vfiprintf_r+0x244>)
 801496c:	429d      	cmp	r5, r3
 801496e:	d101      	bne.n	8014974 <_vfiprintf_r+0x60>
 8014970:	68b5      	ldr	r5, [r6, #8]
 8014972:	e7df      	b.n	8014934 <_vfiprintf_r+0x20>
 8014974:	4b79      	ldr	r3, [pc, #484]	; (8014b5c <_vfiprintf_r+0x248>)
 8014976:	429d      	cmp	r5, r3
 8014978:	bf08      	it	eq
 801497a:	68f5      	ldreq	r5, [r6, #12]
 801497c:	e7da      	b.n	8014934 <_vfiprintf_r+0x20>
 801497e:	89ab      	ldrh	r3, [r5, #12]
 8014980:	0598      	lsls	r0, r3, #22
 8014982:	d4ed      	bmi.n	8014960 <_vfiprintf_r+0x4c>
 8014984:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014986:	f7ff f947 	bl	8013c18 <__retarget_lock_release_recursive>
 801498a:	e7e9      	b.n	8014960 <_vfiprintf_r+0x4c>
 801498c:	2300      	movs	r3, #0
 801498e:	9309      	str	r3, [sp, #36]	; 0x24
 8014990:	2320      	movs	r3, #32
 8014992:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014996:	f8cd 800c 	str.w	r8, [sp, #12]
 801499a:	2330      	movs	r3, #48	; 0x30
 801499c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014b60 <_vfiprintf_r+0x24c>
 80149a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80149a4:	f04f 0901 	mov.w	r9, #1
 80149a8:	4623      	mov	r3, r4
 80149aa:	469a      	mov	sl, r3
 80149ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80149b0:	b10a      	cbz	r2, 80149b6 <_vfiprintf_r+0xa2>
 80149b2:	2a25      	cmp	r2, #37	; 0x25
 80149b4:	d1f9      	bne.n	80149aa <_vfiprintf_r+0x96>
 80149b6:	ebba 0b04 	subs.w	fp, sl, r4
 80149ba:	d00b      	beq.n	80149d4 <_vfiprintf_r+0xc0>
 80149bc:	465b      	mov	r3, fp
 80149be:	4622      	mov	r2, r4
 80149c0:	4629      	mov	r1, r5
 80149c2:	4630      	mov	r0, r6
 80149c4:	f7ff ff93 	bl	80148ee <__sfputs_r>
 80149c8:	3001      	adds	r0, #1
 80149ca:	f000 80aa 	beq.w	8014b22 <_vfiprintf_r+0x20e>
 80149ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80149d0:	445a      	add	r2, fp
 80149d2:	9209      	str	r2, [sp, #36]	; 0x24
 80149d4:	f89a 3000 	ldrb.w	r3, [sl]
 80149d8:	2b00      	cmp	r3, #0
 80149da:	f000 80a2 	beq.w	8014b22 <_vfiprintf_r+0x20e>
 80149de:	2300      	movs	r3, #0
 80149e0:	f04f 32ff 	mov.w	r2, #4294967295
 80149e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80149e8:	f10a 0a01 	add.w	sl, sl, #1
 80149ec:	9304      	str	r3, [sp, #16]
 80149ee:	9307      	str	r3, [sp, #28]
 80149f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80149f4:	931a      	str	r3, [sp, #104]	; 0x68
 80149f6:	4654      	mov	r4, sl
 80149f8:	2205      	movs	r2, #5
 80149fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80149fe:	4858      	ldr	r0, [pc, #352]	; (8014b60 <_vfiprintf_r+0x24c>)
 8014a00:	f7eb fc06 	bl	8000210 <memchr>
 8014a04:	9a04      	ldr	r2, [sp, #16]
 8014a06:	b9d8      	cbnz	r0, 8014a40 <_vfiprintf_r+0x12c>
 8014a08:	06d1      	lsls	r1, r2, #27
 8014a0a:	bf44      	itt	mi
 8014a0c:	2320      	movmi	r3, #32
 8014a0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014a12:	0713      	lsls	r3, r2, #28
 8014a14:	bf44      	itt	mi
 8014a16:	232b      	movmi	r3, #43	; 0x2b
 8014a18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014a1c:	f89a 3000 	ldrb.w	r3, [sl]
 8014a20:	2b2a      	cmp	r3, #42	; 0x2a
 8014a22:	d015      	beq.n	8014a50 <_vfiprintf_r+0x13c>
 8014a24:	9a07      	ldr	r2, [sp, #28]
 8014a26:	4654      	mov	r4, sl
 8014a28:	2000      	movs	r0, #0
 8014a2a:	f04f 0c0a 	mov.w	ip, #10
 8014a2e:	4621      	mov	r1, r4
 8014a30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014a34:	3b30      	subs	r3, #48	; 0x30
 8014a36:	2b09      	cmp	r3, #9
 8014a38:	d94e      	bls.n	8014ad8 <_vfiprintf_r+0x1c4>
 8014a3a:	b1b0      	cbz	r0, 8014a6a <_vfiprintf_r+0x156>
 8014a3c:	9207      	str	r2, [sp, #28]
 8014a3e:	e014      	b.n	8014a6a <_vfiprintf_r+0x156>
 8014a40:	eba0 0308 	sub.w	r3, r0, r8
 8014a44:	fa09 f303 	lsl.w	r3, r9, r3
 8014a48:	4313      	orrs	r3, r2
 8014a4a:	9304      	str	r3, [sp, #16]
 8014a4c:	46a2      	mov	sl, r4
 8014a4e:	e7d2      	b.n	80149f6 <_vfiprintf_r+0xe2>
 8014a50:	9b03      	ldr	r3, [sp, #12]
 8014a52:	1d19      	adds	r1, r3, #4
 8014a54:	681b      	ldr	r3, [r3, #0]
 8014a56:	9103      	str	r1, [sp, #12]
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	bfbb      	ittet	lt
 8014a5c:	425b      	neglt	r3, r3
 8014a5e:	f042 0202 	orrlt.w	r2, r2, #2
 8014a62:	9307      	strge	r3, [sp, #28]
 8014a64:	9307      	strlt	r3, [sp, #28]
 8014a66:	bfb8      	it	lt
 8014a68:	9204      	strlt	r2, [sp, #16]
 8014a6a:	7823      	ldrb	r3, [r4, #0]
 8014a6c:	2b2e      	cmp	r3, #46	; 0x2e
 8014a6e:	d10c      	bne.n	8014a8a <_vfiprintf_r+0x176>
 8014a70:	7863      	ldrb	r3, [r4, #1]
 8014a72:	2b2a      	cmp	r3, #42	; 0x2a
 8014a74:	d135      	bne.n	8014ae2 <_vfiprintf_r+0x1ce>
 8014a76:	9b03      	ldr	r3, [sp, #12]
 8014a78:	1d1a      	adds	r2, r3, #4
 8014a7a:	681b      	ldr	r3, [r3, #0]
 8014a7c:	9203      	str	r2, [sp, #12]
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	bfb8      	it	lt
 8014a82:	f04f 33ff 	movlt.w	r3, #4294967295
 8014a86:	3402      	adds	r4, #2
 8014a88:	9305      	str	r3, [sp, #20]
 8014a8a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014b70 <_vfiprintf_r+0x25c>
 8014a8e:	7821      	ldrb	r1, [r4, #0]
 8014a90:	2203      	movs	r2, #3
 8014a92:	4650      	mov	r0, sl
 8014a94:	f7eb fbbc 	bl	8000210 <memchr>
 8014a98:	b140      	cbz	r0, 8014aac <_vfiprintf_r+0x198>
 8014a9a:	2340      	movs	r3, #64	; 0x40
 8014a9c:	eba0 000a 	sub.w	r0, r0, sl
 8014aa0:	fa03 f000 	lsl.w	r0, r3, r0
 8014aa4:	9b04      	ldr	r3, [sp, #16]
 8014aa6:	4303      	orrs	r3, r0
 8014aa8:	3401      	adds	r4, #1
 8014aaa:	9304      	str	r3, [sp, #16]
 8014aac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014ab0:	482c      	ldr	r0, [pc, #176]	; (8014b64 <_vfiprintf_r+0x250>)
 8014ab2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014ab6:	2206      	movs	r2, #6
 8014ab8:	f7eb fbaa 	bl	8000210 <memchr>
 8014abc:	2800      	cmp	r0, #0
 8014abe:	d03f      	beq.n	8014b40 <_vfiprintf_r+0x22c>
 8014ac0:	4b29      	ldr	r3, [pc, #164]	; (8014b68 <_vfiprintf_r+0x254>)
 8014ac2:	bb1b      	cbnz	r3, 8014b0c <_vfiprintf_r+0x1f8>
 8014ac4:	9b03      	ldr	r3, [sp, #12]
 8014ac6:	3307      	adds	r3, #7
 8014ac8:	f023 0307 	bic.w	r3, r3, #7
 8014acc:	3308      	adds	r3, #8
 8014ace:	9303      	str	r3, [sp, #12]
 8014ad0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ad2:	443b      	add	r3, r7
 8014ad4:	9309      	str	r3, [sp, #36]	; 0x24
 8014ad6:	e767      	b.n	80149a8 <_vfiprintf_r+0x94>
 8014ad8:	fb0c 3202 	mla	r2, ip, r2, r3
 8014adc:	460c      	mov	r4, r1
 8014ade:	2001      	movs	r0, #1
 8014ae0:	e7a5      	b.n	8014a2e <_vfiprintf_r+0x11a>
 8014ae2:	2300      	movs	r3, #0
 8014ae4:	3401      	adds	r4, #1
 8014ae6:	9305      	str	r3, [sp, #20]
 8014ae8:	4619      	mov	r1, r3
 8014aea:	f04f 0c0a 	mov.w	ip, #10
 8014aee:	4620      	mov	r0, r4
 8014af0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014af4:	3a30      	subs	r2, #48	; 0x30
 8014af6:	2a09      	cmp	r2, #9
 8014af8:	d903      	bls.n	8014b02 <_vfiprintf_r+0x1ee>
 8014afa:	2b00      	cmp	r3, #0
 8014afc:	d0c5      	beq.n	8014a8a <_vfiprintf_r+0x176>
 8014afe:	9105      	str	r1, [sp, #20]
 8014b00:	e7c3      	b.n	8014a8a <_vfiprintf_r+0x176>
 8014b02:	fb0c 2101 	mla	r1, ip, r1, r2
 8014b06:	4604      	mov	r4, r0
 8014b08:	2301      	movs	r3, #1
 8014b0a:	e7f0      	b.n	8014aee <_vfiprintf_r+0x1da>
 8014b0c:	ab03      	add	r3, sp, #12
 8014b0e:	9300      	str	r3, [sp, #0]
 8014b10:	462a      	mov	r2, r5
 8014b12:	4b16      	ldr	r3, [pc, #88]	; (8014b6c <_vfiprintf_r+0x258>)
 8014b14:	a904      	add	r1, sp, #16
 8014b16:	4630      	mov	r0, r6
 8014b18:	f7fc f98e 	bl	8010e38 <_printf_float>
 8014b1c:	4607      	mov	r7, r0
 8014b1e:	1c78      	adds	r0, r7, #1
 8014b20:	d1d6      	bne.n	8014ad0 <_vfiprintf_r+0x1bc>
 8014b22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014b24:	07d9      	lsls	r1, r3, #31
 8014b26:	d405      	bmi.n	8014b34 <_vfiprintf_r+0x220>
 8014b28:	89ab      	ldrh	r3, [r5, #12]
 8014b2a:	059a      	lsls	r2, r3, #22
 8014b2c:	d402      	bmi.n	8014b34 <_vfiprintf_r+0x220>
 8014b2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014b30:	f7ff f872 	bl	8013c18 <__retarget_lock_release_recursive>
 8014b34:	89ab      	ldrh	r3, [r5, #12]
 8014b36:	065b      	lsls	r3, r3, #25
 8014b38:	f53f af12 	bmi.w	8014960 <_vfiprintf_r+0x4c>
 8014b3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014b3e:	e711      	b.n	8014964 <_vfiprintf_r+0x50>
 8014b40:	ab03      	add	r3, sp, #12
 8014b42:	9300      	str	r3, [sp, #0]
 8014b44:	462a      	mov	r2, r5
 8014b46:	4b09      	ldr	r3, [pc, #36]	; (8014b6c <_vfiprintf_r+0x258>)
 8014b48:	a904      	add	r1, sp, #16
 8014b4a:	4630      	mov	r0, r6
 8014b4c:	f7fc fc18 	bl	8011380 <_printf_i>
 8014b50:	e7e4      	b.n	8014b1c <_vfiprintf_r+0x208>
 8014b52:	bf00      	nop
 8014b54:	08018ea0 	.word	0x08018ea0
 8014b58:	08018ec0 	.word	0x08018ec0
 8014b5c:	08018e80 	.word	0x08018e80
 8014b60:	08018d6c 	.word	0x08018d6c
 8014b64:	08018d76 	.word	0x08018d76
 8014b68:	08010e39 	.word	0x08010e39
 8014b6c:	080148ef 	.word	0x080148ef
 8014b70:	08018d72 	.word	0x08018d72
 8014b74:	00000000 	.word	0x00000000

08014b78 <nan>:
 8014b78:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014b80 <nan+0x8>
 8014b7c:	4770      	bx	lr
 8014b7e:	bf00      	nop
 8014b80:	00000000 	.word	0x00000000
 8014b84:	7ff80000 	.word	0x7ff80000

08014b88 <siscanf>:
 8014b88:	b40e      	push	{r1, r2, r3}
 8014b8a:	b510      	push	{r4, lr}
 8014b8c:	b09f      	sub	sp, #124	; 0x7c
 8014b8e:	ac21      	add	r4, sp, #132	; 0x84
 8014b90:	f44f 7101 	mov.w	r1, #516	; 0x204
 8014b94:	f854 2b04 	ldr.w	r2, [r4], #4
 8014b98:	9201      	str	r2, [sp, #4]
 8014b9a:	f8ad 101c 	strh.w	r1, [sp, #28]
 8014b9e:	9004      	str	r0, [sp, #16]
 8014ba0:	9008      	str	r0, [sp, #32]
 8014ba2:	f7eb fb27 	bl	80001f4 <strlen>
 8014ba6:	4b0c      	ldr	r3, [pc, #48]	; (8014bd8 <siscanf+0x50>)
 8014ba8:	9005      	str	r0, [sp, #20]
 8014baa:	9009      	str	r0, [sp, #36]	; 0x24
 8014bac:	930d      	str	r3, [sp, #52]	; 0x34
 8014bae:	480b      	ldr	r0, [pc, #44]	; (8014bdc <siscanf+0x54>)
 8014bb0:	9a01      	ldr	r2, [sp, #4]
 8014bb2:	6800      	ldr	r0, [r0, #0]
 8014bb4:	9403      	str	r4, [sp, #12]
 8014bb6:	2300      	movs	r3, #0
 8014bb8:	9311      	str	r3, [sp, #68]	; 0x44
 8014bba:	9316      	str	r3, [sp, #88]	; 0x58
 8014bbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014bc0:	f8ad 301e 	strh.w	r3, [sp, #30]
 8014bc4:	a904      	add	r1, sp, #16
 8014bc6:	4623      	mov	r3, r4
 8014bc8:	f000 fcac 	bl	8015524 <__ssvfiscanf_r>
 8014bcc:	b01f      	add	sp, #124	; 0x7c
 8014bce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014bd2:	b003      	add	sp, #12
 8014bd4:	4770      	bx	lr
 8014bd6:	bf00      	nop
 8014bd8:	08014c03 	.word	0x08014c03
 8014bdc:	20000020 	.word	0x20000020

08014be0 <__sread>:
 8014be0:	b510      	push	{r4, lr}
 8014be2:	460c      	mov	r4, r1
 8014be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014be8:	f000 ff60 	bl	8015aac <_read_r>
 8014bec:	2800      	cmp	r0, #0
 8014bee:	bfab      	itete	ge
 8014bf0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014bf2:	89a3      	ldrhlt	r3, [r4, #12]
 8014bf4:	181b      	addge	r3, r3, r0
 8014bf6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014bfa:	bfac      	ite	ge
 8014bfc:	6563      	strge	r3, [r4, #84]	; 0x54
 8014bfe:	81a3      	strhlt	r3, [r4, #12]
 8014c00:	bd10      	pop	{r4, pc}

08014c02 <__seofread>:
 8014c02:	2000      	movs	r0, #0
 8014c04:	4770      	bx	lr

08014c06 <__swrite>:
 8014c06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c0a:	461f      	mov	r7, r3
 8014c0c:	898b      	ldrh	r3, [r1, #12]
 8014c0e:	05db      	lsls	r3, r3, #23
 8014c10:	4605      	mov	r5, r0
 8014c12:	460c      	mov	r4, r1
 8014c14:	4616      	mov	r6, r2
 8014c16:	d505      	bpl.n	8014c24 <__swrite+0x1e>
 8014c18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c1c:	2302      	movs	r3, #2
 8014c1e:	2200      	movs	r2, #0
 8014c20:	f000 fb70 	bl	8015304 <_lseek_r>
 8014c24:	89a3      	ldrh	r3, [r4, #12]
 8014c26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014c2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014c2e:	81a3      	strh	r3, [r4, #12]
 8014c30:	4632      	mov	r2, r6
 8014c32:	463b      	mov	r3, r7
 8014c34:	4628      	mov	r0, r5
 8014c36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014c3a:	f000 b907 	b.w	8014e4c <_write_r>

08014c3e <__sseek>:
 8014c3e:	b510      	push	{r4, lr}
 8014c40:	460c      	mov	r4, r1
 8014c42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c46:	f000 fb5d 	bl	8015304 <_lseek_r>
 8014c4a:	1c43      	adds	r3, r0, #1
 8014c4c:	89a3      	ldrh	r3, [r4, #12]
 8014c4e:	bf15      	itete	ne
 8014c50:	6560      	strne	r0, [r4, #84]	; 0x54
 8014c52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014c56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014c5a:	81a3      	strheq	r3, [r4, #12]
 8014c5c:	bf18      	it	ne
 8014c5e:	81a3      	strhne	r3, [r4, #12]
 8014c60:	bd10      	pop	{r4, pc}

08014c62 <__sclose>:
 8014c62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c66:	f000 b979 	b.w	8014f5c <_close_r>

08014c6a <strcpy>:
 8014c6a:	4603      	mov	r3, r0
 8014c6c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014c70:	f803 2b01 	strb.w	r2, [r3], #1
 8014c74:	2a00      	cmp	r2, #0
 8014c76:	d1f9      	bne.n	8014c6c <strcpy+0x2>
 8014c78:	4770      	bx	lr
	...

08014c7c <_strtoul_l.isra.0>:
 8014c7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014c80:	4e3b      	ldr	r6, [pc, #236]	; (8014d70 <_strtoul_l.isra.0+0xf4>)
 8014c82:	4686      	mov	lr, r0
 8014c84:	468c      	mov	ip, r1
 8014c86:	4660      	mov	r0, ip
 8014c88:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8014c8c:	5da5      	ldrb	r5, [r4, r6]
 8014c8e:	f015 0508 	ands.w	r5, r5, #8
 8014c92:	d1f8      	bne.n	8014c86 <_strtoul_l.isra.0+0xa>
 8014c94:	2c2d      	cmp	r4, #45	; 0x2d
 8014c96:	d134      	bne.n	8014d02 <_strtoul_l.isra.0+0x86>
 8014c98:	f89c 4000 	ldrb.w	r4, [ip]
 8014c9c:	f04f 0801 	mov.w	r8, #1
 8014ca0:	f100 0c02 	add.w	ip, r0, #2
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	d05e      	beq.n	8014d66 <_strtoul_l.isra.0+0xea>
 8014ca8:	2b10      	cmp	r3, #16
 8014caa:	d10c      	bne.n	8014cc6 <_strtoul_l.isra.0+0x4a>
 8014cac:	2c30      	cmp	r4, #48	; 0x30
 8014cae:	d10a      	bne.n	8014cc6 <_strtoul_l.isra.0+0x4a>
 8014cb0:	f89c 0000 	ldrb.w	r0, [ip]
 8014cb4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8014cb8:	2858      	cmp	r0, #88	; 0x58
 8014cba:	d14f      	bne.n	8014d5c <_strtoul_l.isra.0+0xe0>
 8014cbc:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8014cc0:	2310      	movs	r3, #16
 8014cc2:	f10c 0c02 	add.w	ip, ip, #2
 8014cc6:	f04f 37ff 	mov.w	r7, #4294967295
 8014cca:	2500      	movs	r5, #0
 8014ccc:	fbb7 f7f3 	udiv	r7, r7, r3
 8014cd0:	fb03 f907 	mul.w	r9, r3, r7
 8014cd4:	ea6f 0909 	mvn.w	r9, r9
 8014cd8:	4628      	mov	r0, r5
 8014cda:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8014cde:	2e09      	cmp	r6, #9
 8014ce0:	d818      	bhi.n	8014d14 <_strtoul_l.isra.0+0x98>
 8014ce2:	4634      	mov	r4, r6
 8014ce4:	42a3      	cmp	r3, r4
 8014ce6:	dd24      	ble.n	8014d32 <_strtoul_l.isra.0+0xb6>
 8014ce8:	2d00      	cmp	r5, #0
 8014cea:	db1f      	blt.n	8014d2c <_strtoul_l.isra.0+0xb0>
 8014cec:	4287      	cmp	r7, r0
 8014cee:	d31d      	bcc.n	8014d2c <_strtoul_l.isra.0+0xb0>
 8014cf0:	d101      	bne.n	8014cf6 <_strtoul_l.isra.0+0x7a>
 8014cf2:	45a1      	cmp	r9, r4
 8014cf4:	db1a      	blt.n	8014d2c <_strtoul_l.isra.0+0xb0>
 8014cf6:	fb00 4003 	mla	r0, r0, r3, r4
 8014cfa:	2501      	movs	r5, #1
 8014cfc:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8014d00:	e7eb      	b.n	8014cda <_strtoul_l.isra.0+0x5e>
 8014d02:	2c2b      	cmp	r4, #43	; 0x2b
 8014d04:	bf08      	it	eq
 8014d06:	f89c 4000 	ldrbeq.w	r4, [ip]
 8014d0a:	46a8      	mov	r8, r5
 8014d0c:	bf08      	it	eq
 8014d0e:	f100 0c02 	addeq.w	ip, r0, #2
 8014d12:	e7c7      	b.n	8014ca4 <_strtoul_l.isra.0+0x28>
 8014d14:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8014d18:	2e19      	cmp	r6, #25
 8014d1a:	d801      	bhi.n	8014d20 <_strtoul_l.isra.0+0xa4>
 8014d1c:	3c37      	subs	r4, #55	; 0x37
 8014d1e:	e7e1      	b.n	8014ce4 <_strtoul_l.isra.0+0x68>
 8014d20:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8014d24:	2e19      	cmp	r6, #25
 8014d26:	d804      	bhi.n	8014d32 <_strtoul_l.isra.0+0xb6>
 8014d28:	3c57      	subs	r4, #87	; 0x57
 8014d2a:	e7db      	b.n	8014ce4 <_strtoul_l.isra.0+0x68>
 8014d2c:	f04f 35ff 	mov.w	r5, #4294967295
 8014d30:	e7e4      	b.n	8014cfc <_strtoul_l.isra.0+0x80>
 8014d32:	2d00      	cmp	r5, #0
 8014d34:	da07      	bge.n	8014d46 <_strtoul_l.isra.0+0xca>
 8014d36:	2322      	movs	r3, #34	; 0x22
 8014d38:	f8ce 3000 	str.w	r3, [lr]
 8014d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8014d40:	b942      	cbnz	r2, 8014d54 <_strtoul_l.isra.0+0xd8>
 8014d42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014d46:	f1b8 0f00 	cmp.w	r8, #0
 8014d4a:	d000      	beq.n	8014d4e <_strtoul_l.isra.0+0xd2>
 8014d4c:	4240      	negs	r0, r0
 8014d4e:	2a00      	cmp	r2, #0
 8014d50:	d0f7      	beq.n	8014d42 <_strtoul_l.isra.0+0xc6>
 8014d52:	b10d      	cbz	r5, 8014d58 <_strtoul_l.isra.0+0xdc>
 8014d54:	f10c 31ff 	add.w	r1, ip, #4294967295
 8014d58:	6011      	str	r1, [r2, #0]
 8014d5a:	e7f2      	b.n	8014d42 <_strtoul_l.isra.0+0xc6>
 8014d5c:	2430      	movs	r4, #48	; 0x30
 8014d5e:	2b00      	cmp	r3, #0
 8014d60:	d1b1      	bne.n	8014cc6 <_strtoul_l.isra.0+0x4a>
 8014d62:	2308      	movs	r3, #8
 8014d64:	e7af      	b.n	8014cc6 <_strtoul_l.isra.0+0x4a>
 8014d66:	2c30      	cmp	r4, #48	; 0x30
 8014d68:	d0a2      	beq.n	8014cb0 <_strtoul_l.isra.0+0x34>
 8014d6a:	230a      	movs	r3, #10
 8014d6c:	e7ab      	b.n	8014cc6 <_strtoul_l.isra.0+0x4a>
 8014d6e:	bf00      	nop
 8014d70:	08018d7e 	.word	0x08018d7e

08014d74 <_strtoul_r>:
 8014d74:	f7ff bf82 	b.w	8014c7c <_strtoul_l.isra.0>

08014d78 <strtoul>:
 8014d78:	4613      	mov	r3, r2
 8014d7a:	460a      	mov	r2, r1
 8014d7c:	4601      	mov	r1, r0
 8014d7e:	4802      	ldr	r0, [pc, #8]	; (8014d88 <strtoul+0x10>)
 8014d80:	6800      	ldr	r0, [r0, #0]
 8014d82:	f7ff bf7b 	b.w	8014c7c <_strtoul_l.isra.0>
 8014d86:	bf00      	nop
 8014d88:	20000020 	.word	0x20000020

08014d8c <__swbuf_r>:
 8014d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d8e:	460e      	mov	r6, r1
 8014d90:	4614      	mov	r4, r2
 8014d92:	4605      	mov	r5, r0
 8014d94:	b118      	cbz	r0, 8014d9e <__swbuf_r+0x12>
 8014d96:	6983      	ldr	r3, [r0, #24]
 8014d98:	b90b      	cbnz	r3, 8014d9e <__swbuf_r+0x12>
 8014d9a:	f000 fa15 	bl	80151c8 <__sinit>
 8014d9e:	4b21      	ldr	r3, [pc, #132]	; (8014e24 <__swbuf_r+0x98>)
 8014da0:	429c      	cmp	r4, r3
 8014da2:	d12b      	bne.n	8014dfc <__swbuf_r+0x70>
 8014da4:	686c      	ldr	r4, [r5, #4]
 8014da6:	69a3      	ldr	r3, [r4, #24]
 8014da8:	60a3      	str	r3, [r4, #8]
 8014daa:	89a3      	ldrh	r3, [r4, #12]
 8014dac:	071a      	lsls	r2, r3, #28
 8014dae:	d52f      	bpl.n	8014e10 <__swbuf_r+0x84>
 8014db0:	6923      	ldr	r3, [r4, #16]
 8014db2:	b36b      	cbz	r3, 8014e10 <__swbuf_r+0x84>
 8014db4:	6923      	ldr	r3, [r4, #16]
 8014db6:	6820      	ldr	r0, [r4, #0]
 8014db8:	1ac0      	subs	r0, r0, r3
 8014dba:	6963      	ldr	r3, [r4, #20]
 8014dbc:	b2f6      	uxtb	r6, r6
 8014dbe:	4283      	cmp	r3, r0
 8014dc0:	4637      	mov	r7, r6
 8014dc2:	dc04      	bgt.n	8014dce <__swbuf_r+0x42>
 8014dc4:	4621      	mov	r1, r4
 8014dc6:	4628      	mov	r0, r5
 8014dc8:	f000 f96a 	bl	80150a0 <_fflush_r>
 8014dcc:	bb30      	cbnz	r0, 8014e1c <__swbuf_r+0x90>
 8014dce:	68a3      	ldr	r3, [r4, #8]
 8014dd0:	3b01      	subs	r3, #1
 8014dd2:	60a3      	str	r3, [r4, #8]
 8014dd4:	6823      	ldr	r3, [r4, #0]
 8014dd6:	1c5a      	adds	r2, r3, #1
 8014dd8:	6022      	str	r2, [r4, #0]
 8014dda:	701e      	strb	r6, [r3, #0]
 8014ddc:	6963      	ldr	r3, [r4, #20]
 8014dde:	3001      	adds	r0, #1
 8014de0:	4283      	cmp	r3, r0
 8014de2:	d004      	beq.n	8014dee <__swbuf_r+0x62>
 8014de4:	89a3      	ldrh	r3, [r4, #12]
 8014de6:	07db      	lsls	r3, r3, #31
 8014de8:	d506      	bpl.n	8014df8 <__swbuf_r+0x6c>
 8014dea:	2e0a      	cmp	r6, #10
 8014dec:	d104      	bne.n	8014df8 <__swbuf_r+0x6c>
 8014dee:	4621      	mov	r1, r4
 8014df0:	4628      	mov	r0, r5
 8014df2:	f000 f955 	bl	80150a0 <_fflush_r>
 8014df6:	b988      	cbnz	r0, 8014e1c <__swbuf_r+0x90>
 8014df8:	4638      	mov	r0, r7
 8014dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014dfc:	4b0a      	ldr	r3, [pc, #40]	; (8014e28 <__swbuf_r+0x9c>)
 8014dfe:	429c      	cmp	r4, r3
 8014e00:	d101      	bne.n	8014e06 <__swbuf_r+0x7a>
 8014e02:	68ac      	ldr	r4, [r5, #8]
 8014e04:	e7cf      	b.n	8014da6 <__swbuf_r+0x1a>
 8014e06:	4b09      	ldr	r3, [pc, #36]	; (8014e2c <__swbuf_r+0xa0>)
 8014e08:	429c      	cmp	r4, r3
 8014e0a:	bf08      	it	eq
 8014e0c:	68ec      	ldreq	r4, [r5, #12]
 8014e0e:	e7ca      	b.n	8014da6 <__swbuf_r+0x1a>
 8014e10:	4621      	mov	r1, r4
 8014e12:	4628      	mov	r0, r5
 8014e14:	f000 f82c 	bl	8014e70 <__swsetup_r>
 8014e18:	2800      	cmp	r0, #0
 8014e1a:	d0cb      	beq.n	8014db4 <__swbuf_r+0x28>
 8014e1c:	f04f 37ff 	mov.w	r7, #4294967295
 8014e20:	e7ea      	b.n	8014df8 <__swbuf_r+0x6c>
 8014e22:	bf00      	nop
 8014e24:	08018ea0 	.word	0x08018ea0
 8014e28:	08018ec0 	.word	0x08018ec0
 8014e2c:	08018e80 	.word	0x08018e80

08014e30 <__ascii_wctomb>:
 8014e30:	b149      	cbz	r1, 8014e46 <__ascii_wctomb+0x16>
 8014e32:	2aff      	cmp	r2, #255	; 0xff
 8014e34:	bf85      	ittet	hi
 8014e36:	238a      	movhi	r3, #138	; 0x8a
 8014e38:	6003      	strhi	r3, [r0, #0]
 8014e3a:	700a      	strbls	r2, [r1, #0]
 8014e3c:	f04f 30ff 	movhi.w	r0, #4294967295
 8014e40:	bf98      	it	ls
 8014e42:	2001      	movls	r0, #1
 8014e44:	4770      	bx	lr
 8014e46:	4608      	mov	r0, r1
 8014e48:	4770      	bx	lr
	...

08014e4c <_write_r>:
 8014e4c:	b538      	push	{r3, r4, r5, lr}
 8014e4e:	4d07      	ldr	r5, [pc, #28]	; (8014e6c <_write_r+0x20>)
 8014e50:	4604      	mov	r4, r0
 8014e52:	4608      	mov	r0, r1
 8014e54:	4611      	mov	r1, r2
 8014e56:	2200      	movs	r2, #0
 8014e58:	602a      	str	r2, [r5, #0]
 8014e5a:	461a      	mov	r2, r3
 8014e5c:	f7f1 f89b 	bl	8005f96 <_write>
 8014e60:	1c43      	adds	r3, r0, #1
 8014e62:	d102      	bne.n	8014e6a <_write_r+0x1e>
 8014e64:	682b      	ldr	r3, [r5, #0]
 8014e66:	b103      	cbz	r3, 8014e6a <_write_r+0x1e>
 8014e68:	6023      	str	r3, [r4, #0]
 8014e6a:	bd38      	pop	{r3, r4, r5, pc}
 8014e6c:	20009a48 	.word	0x20009a48

08014e70 <__swsetup_r>:
 8014e70:	4b32      	ldr	r3, [pc, #200]	; (8014f3c <__swsetup_r+0xcc>)
 8014e72:	b570      	push	{r4, r5, r6, lr}
 8014e74:	681d      	ldr	r5, [r3, #0]
 8014e76:	4606      	mov	r6, r0
 8014e78:	460c      	mov	r4, r1
 8014e7a:	b125      	cbz	r5, 8014e86 <__swsetup_r+0x16>
 8014e7c:	69ab      	ldr	r3, [r5, #24]
 8014e7e:	b913      	cbnz	r3, 8014e86 <__swsetup_r+0x16>
 8014e80:	4628      	mov	r0, r5
 8014e82:	f000 f9a1 	bl	80151c8 <__sinit>
 8014e86:	4b2e      	ldr	r3, [pc, #184]	; (8014f40 <__swsetup_r+0xd0>)
 8014e88:	429c      	cmp	r4, r3
 8014e8a:	d10f      	bne.n	8014eac <__swsetup_r+0x3c>
 8014e8c:	686c      	ldr	r4, [r5, #4]
 8014e8e:	89a3      	ldrh	r3, [r4, #12]
 8014e90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014e94:	0719      	lsls	r1, r3, #28
 8014e96:	d42c      	bmi.n	8014ef2 <__swsetup_r+0x82>
 8014e98:	06dd      	lsls	r5, r3, #27
 8014e9a:	d411      	bmi.n	8014ec0 <__swsetup_r+0x50>
 8014e9c:	2309      	movs	r3, #9
 8014e9e:	6033      	str	r3, [r6, #0]
 8014ea0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014ea4:	81a3      	strh	r3, [r4, #12]
 8014ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8014eaa:	e03e      	b.n	8014f2a <__swsetup_r+0xba>
 8014eac:	4b25      	ldr	r3, [pc, #148]	; (8014f44 <__swsetup_r+0xd4>)
 8014eae:	429c      	cmp	r4, r3
 8014eb0:	d101      	bne.n	8014eb6 <__swsetup_r+0x46>
 8014eb2:	68ac      	ldr	r4, [r5, #8]
 8014eb4:	e7eb      	b.n	8014e8e <__swsetup_r+0x1e>
 8014eb6:	4b24      	ldr	r3, [pc, #144]	; (8014f48 <__swsetup_r+0xd8>)
 8014eb8:	429c      	cmp	r4, r3
 8014eba:	bf08      	it	eq
 8014ebc:	68ec      	ldreq	r4, [r5, #12]
 8014ebe:	e7e6      	b.n	8014e8e <__swsetup_r+0x1e>
 8014ec0:	0758      	lsls	r0, r3, #29
 8014ec2:	d512      	bpl.n	8014eea <__swsetup_r+0x7a>
 8014ec4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014ec6:	b141      	cbz	r1, 8014eda <__swsetup_r+0x6a>
 8014ec8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014ecc:	4299      	cmp	r1, r3
 8014ece:	d002      	beq.n	8014ed6 <__swsetup_r+0x66>
 8014ed0:	4630      	mov	r0, r6
 8014ed2:	f7fb fe67 	bl	8010ba4 <_free_r>
 8014ed6:	2300      	movs	r3, #0
 8014ed8:	6363      	str	r3, [r4, #52]	; 0x34
 8014eda:	89a3      	ldrh	r3, [r4, #12]
 8014edc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014ee0:	81a3      	strh	r3, [r4, #12]
 8014ee2:	2300      	movs	r3, #0
 8014ee4:	6063      	str	r3, [r4, #4]
 8014ee6:	6923      	ldr	r3, [r4, #16]
 8014ee8:	6023      	str	r3, [r4, #0]
 8014eea:	89a3      	ldrh	r3, [r4, #12]
 8014eec:	f043 0308 	orr.w	r3, r3, #8
 8014ef0:	81a3      	strh	r3, [r4, #12]
 8014ef2:	6923      	ldr	r3, [r4, #16]
 8014ef4:	b94b      	cbnz	r3, 8014f0a <__swsetup_r+0x9a>
 8014ef6:	89a3      	ldrh	r3, [r4, #12]
 8014ef8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014efc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014f00:	d003      	beq.n	8014f0a <__swsetup_r+0x9a>
 8014f02:	4621      	mov	r1, r4
 8014f04:	4630      	mov	r0, r6
 8014f06:	f000 fa33 	bl	8015370 <__smakebuf_r>
 8014f0a:	89a0      	ldrh	r0, [r4, #12]
 8014f0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014f10:	f010 0301 	ands.w	r3, r0, #1
 8014f14:	d00a      	beq.n	8014f2c <__swsetup_r+0xbc>
 8014f16:	2300      	movs	r3, #0
 8014f18:	60a3      	str	r3, [r4, #8]
 8014f1a:	6963      	ldr	r3, [r4, #20]
 8014f1c:	425b      	negs	r3, r3
 8014f1e:	61a3      	str	r3, [r4, #24]
 8014f20:	6923      	ldr	r3, [r4, #16]
 8014f22:	b943      	cbnz	r3, 8014f36 <__swsetup_r+0xc6>
 8014f24:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014f28:	d1ba      	bne.n	8014ea0 <__swsetup_r+0x30>
 8014f2a:	bd70      	pop	{r4, r5, r6, pc}
 8014f2c:	0781      	lsls	r1, r0, #30
 8014f2e:	bf58      	it	pl
 8014f30:	6963      	ldrpl	r3, [r4, #20]
 8014f32:	60a3      	str	r3, [r4, #8]
 8014f34:	e7f4      	b.n	8014f20 <__swsetup_r+0xb0>
 8014f36:	2000      	movs	r0, #0
 8014f38:	e7f7      	b.n	8014f2a <__swsetup_r+0xba>
 8014f3a:	bf00      	nop
 8014f3c:	20000020 	.word	0x20000020
 8014f40:	08018ea0 	.word	0x08018ea0
 8014f44:	08018ec0 	.word	0x08018ec0
 8014f48:	08018e80 	.word	0x08018e80

08014f4c <abort>:
 8014f4c:	b508      	push	{r3, lr}
 8014f4e:	2006      	movs	r0, #6
 8014f50:	f000 fe20 	bl	8015b94 <raise>
 8014f54:	2001      	movs	r0, #1
 8014f56:	f7f0 fff7 	bl	8005f48 <_exit>
	...

08014f5c <_close_r>:
 8014f5c:	b538      	push	{r3, r4, r5, lr}
 8014f5e:	4d06      	ldr	r5, [pc, #24]	; (8014f78 <_close_r+0x1c>)
 8014f60:	2300      	movs	r3, #0
 8014f62:	4604      	mov	r4, r0
 8014f64:	4608      	mov	r0, r1
 8014f66:	602b      	str	r3, [r5, #0]
 8014f68:	f7f1 f831 	bl	8005fce <_close>
 8014f6c:	1c43      	adds	r3, r0, #1
 8014f6e:	d102      	bne.n	8014f76 <_close_r+0x1a>
 8014f70:	682b      	ldr	r3, [r5, #0]
 8014f72:	b103      	cbz	r3, 8014f76 <_close_r+0x1a>
 8014f74:	6023      	str	r3, [r4, #0]
 8014f76:	bd38      	pop	{r3, r4, r5, pc}
 8014f78:	20009a48 	.word	0x20009a48

08014f7c <__env_lock>:
 8014f7c:	4801      	ldr	r0, [pc, #4]	; (8014f84 <__env_lock+0x8>)
 8014f7e:	f7fe be49 	b.w	8013c14 <__retarget_lock_acquire_recursive>
 8014f82:	bf00      	nop
 8014f84:	20009a3e 	.word	0x20009a3e

08014f88 <__env_unlock>:
 8014f88:	4801      	ldr	r0, [pc, #4]	; (8014f90 <__env_unlock+0x8>)
 8014f8a:	f7fe be45 	b.w	8013c18 <__retarget_lock_release_recursive>
 8014f8e:	bf00      	nop
 8014f90:	20009a3e 	.word	0x20009a3e

08014f94 <__sflush_r>:
 8014f94:	898a      	ldrh	r2, [r1, #12]
 8014f96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f9a:	4605      	mov	r5, r0
 8014f9c:	0710      	lsls	r0, r2, #28
 8014f9e:	460c      	mov	r4, r1
 8014fa0:	d458      	bmi.n	8015054 <__sflush_r+0xc0>
 8014fa2:	684b      	ldr	r3, [r1, #4]
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	dc05      	bgt.n	8014fb4 <__sflush_r+0x20>
 8014fa8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	dc02      	bgt.n	8014fb4 <__sflush_r+0x20>
 8014fae:	2000      	movs	r0, #0
 8014fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014fb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014fb6:	2e00      	cmp	r6, #0
 8014fb8:	d0f9      	beq.n	8014fae <__sflush_r+0x1a>
 8014fba:	2300      	movs	r3, #0
 8014fbc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014fc0:	682f      	ldr	r7, [r5, #0]
 8014fc2:	602b      	str	r3, [r5, #0]
 8014fc4:	d032      	beq.n	801502c <__sflush_r+0x98>
 8014fc6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014fc8:	89a3      	ldrh	r3, [r4, #12]
 8014fca:	075a      	lsls	r2, r3, #29
 8014fcc:	d505      	bpl.n	8014fda <__sflush_r+0x46>
 8014fce:	6863      	ldr	r3, [r4, #4]
 8014fd0:	1ac0      	subs	r0, r0, r3
 8014fd2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014fd4:	b10b      	cbz	r3, 8014fda <__sflush_r+0x46>
 8014fd6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014fd8:	1ac0      	subs	r0, r0, r3
 8014fda:	2300      	movs	r3, #0
 8014fdc:	4602      	mov	r2, r0
 8014fde:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014fe0:	6a21      	ldr	r1, [r4, #32]
 8014fe2:	4628      	mov	r0, r5
 8014fe4:	47b0      	blx	r6
 8014fe6:	1c43      	adds	r3, r0, #1
 8014fe8:	89a3      	ldrh	r3, [r4, #12]
 8014fea:	d106      	bne.n	8014ffa <__sflush_r+0x66>
 8014fec:	6829      	ldr	r1, [r5, #0]
 8014fee:	291d      	cmp	r1, #29
 8014ff0:	d82c      	bhi.n	801504c <__sflush_r+0xb8>
 8014ff2:	4a2a      	ldr	r2, [pc, #168]	; (801509c <__sflush_r+0x108>)
 8014ff4:	40ca      	lsrs	r2, r1
 8014ff6:	07d6      	lsls	r6, r2, #31
 8014ff8:	d528      	bpl.n	801504c <__sflush_r+0xb8>
 8014ffa:	2200      	movs	r2, #0
 8014ffc:	6062      	str	r2, [r4, #4]
 8014ffe:	04d9      	lsls	r1, r3, #19
 8015000:	6922      	ldr	r2, [r4, #16]
 8015002:	6022      	str	r2, [r4, #0]
 8015004:	d504      	bpl.n	8015010 <__sflush_r+0x7c>
 8015006:	1c42      	adds	r2, r0, #1
 8015008:	d101      	bne.n	801500e <__sflush_r+0x7a>
 801500a:	682b      	ldr	r3, [r5, #0]
 801500c:	b903      	cbnz	r3, 8015010 <__sflush_r+0x7c>
 801500e:	6560      	str	r0, [r4, #84]	; 0x54
 8015010:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015012:	602f      	str	r7, [r5, #0]
 8015014:	2900      	cmp	r1, #0
 8015016:	d0ca      	beq.n	8014fae <__sflush_r+0x1a>
 8015018:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801501c:	4299      	cmp	r1, r3
 801501e:	d002      	beq.n	8015026 <__sflush_r+0x92>
 8015020:	4628      	mov	r0, r5
 8015022:	f7fb fdbf 	bl	8010ba4 <_free_r>
 8015026:	2000      	movs	r0, #0
 8015028:	6360      	str	r0, [r4, #52]	; 0x34
 801502a:	e7c1      	b.n	8014fb0 <__sflush_r+0x1c>
 801502c:	6a21      	ldr	r1, [r4, #32]
 801502e:	2301      	movs	r3, #1
 8015030:	4628      	mov	r0, r5
 8015032:	47b0      	blx	r6
 8015034:	1c41      	adds	r1, r0, #1
 8015036:	d1c7      	bne.n	8014fc8 <__sflush_r+0x34>
 8015038:	682b      	ldr	r3, [r5, #0]
 801503a:	2b00      	cmp	r3, #0
 801503c:	d0c4      	beq.n	8014fc8 <__sflush_r+0x34>
 801503e:	2b1d      	cmp	r3, #29
 8015040:	d001      	beq.n	8015046 <__sflush_r+0xb2>
 8015042:	2b16      	cmp	r3, #22
 8015044:	d101      	bne.n	801504a <__sflush_r+0xb6>
 8015046:	602f      	str	r7, [r5, #0]
 8015048:	e7b1      	b.n	8014fae <__sflush_r+0x1a>
 801504a:	89a3      	ldrh	r3, [r4, #12]
 801504c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015050:	81a3      	strh	r3, [r4, #12]
 8015052:	e7ad      	b.n	8014fb0 <__sflush_r+0x1c>
 8015054:	690f      	ldr	r7, [r1, #16]
 8015056:	2f00      	cmp	r7, #0
 8015058:	d0a9      	beq.n	8014fae <__sflush_r+0x1a>
 801505a:	0793      	lsls	r3, r2, #30
 801505c:	680e      	ldr	r6, [r1, #0]
 801505e:	bf08      	it	eq
 8015060:	694b      	ldreq	r3, [r1, #20]
 8015062:	600f      	str	r7, [r1, #0]
 8015064:	bf18      	it	ne
 8015066:	2300      	movne	r3, #0
 8015068:	eba6 0807 	sub.w	r8, r6, r7
 801506c:	608b      	str	r3, [r1, #8]
 801506e:	f1b8 0f00 	cmp.w	r8, #0
 8015072:	dd9c      	ble.n	8014fae <__sflush_r+0x1a>
 8015074:	6a21      	ldr	r1, [r4, #32]
 8015076:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015078:	4643      	mov	r3, r8
 801507a:	463a      	mov	r2, r7
 801507c:	4628      	mov	r0, r5
 801507e:	47b0      	blx	r6
 8015080:	2800      	cmp	r0, #0
 8015082:	dc06      	bgt.n	8015092 <__sflush_r+0xfe>
 8015084:	89a3      	ldrh	r3, [r4, #12]
 8015086:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801508a:	81a3      	strh	r3, [r4, #12]
 801508c:	f04f 30ff 	mov.w	r0, #4294967295
 8015090:	e78e      	b.n	8014fb0 <__sflush_r+0x1c>
 8015092:	4407      	add	r7, r0
 8015094:	eba8 0800 	sub.w	r8, r8, r0
 8015098:	e7e9      	b.n	801506e <__sflush_r+0xda>
 801509a:	bf00      	nop
 801509c:	20400001 	.word	0x20400001

080150a0 <_fflush_r>:
 80150a0:	b538      	push	{r3, r4, r5, lr}
 80150a2:	690b      	ldr	r3, [r1, #16]
 80150a4:	4605      	mov	r5, r0
 80150a6:	460c      	mov	r4, r1
 80150a8:	b913      	cbnz	r3, 80150b0 <_fflush_r+0x10>
 80150aa:	2500      	movs	r5, #0
 80150ac:	4628      	mov	r0, r5
 80150ae:	bd38      	pop	{r3, r4, r5, pc}
 80150b0:	b118      	cbz	r0, 80150ba <_fflush_r+0x1a>
 80150b2:	6983      	ldr	r3, [r0, #24]
 80150b4:	b90b      	cbnz	r3, 80150ba <_fflush_r+0x1a>
 80150b6:	f000 f887 	bl	80151c8 <__sinit>
 80150ba:	4b14      	ldr	r3, [pc, #80]	; (801510c <_fflush_r+0x6c>)
 80150bc:	429c      	cmp	r4, r3
 80150be:	d11b      	bne.n	80150f8 <_fflush_r+0x58>
 80150c0:	686c      	ldr	r4, [r5, #4]
 80150c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	d0ef      	beq.n	80150aa <_fflush_r+0xa>
 80150ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80150cc:	07d0      	lsls	r0, r2, #31
 80150ce:	d404      	bmi.n	80150da <_fflush_r+0x3a>
 80150d0:	0599      	lsls	r1, r3, #22
 80150d2:	d402      	bmi.n	80150da <_fflush_r+0x3a>
 80150d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80150d6:	f7fe fd9d 	bl	8013c14 <__retarget_lock_acquire_recursive>
 80150da:	4628      	mov	r0, r5
 80150dc:	4621      	mov	r1, r4
 80150de:	f7ff ff59 	bl	8014f94 <__sflush_r>
 80150e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80150e4:	07da      	lsls	r2, r3, #31
 80150e6:	4605      	mov	r5, r0
 80150e8:	d4e0      	bmi.n	80150ac <_fflush_r+0xc>
 80150ea:	89a3      	ldrh	r3, [r4, #12]
 80150ec:	059b      	lsls	r3, r3, #22
 80150ee:	d4dd      	bmi.n	80150ac <_fflush_r+0xc>
 80150f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80150f2:	f7fe fd91 	bl	8013c18 <__retarget_lock_release_recursive>
 80150f6:	e7d9      	b.n	80150ac <_fflush_r+0xc>
 80150f8:	4b05      	ldr	r3, [pc, #20]	; (8015110 <_fflush_r+0x70>)
 80150fa:	429c      	cmp	r4, r3
 80150fc:	d101      	bne.n	8015102 <_fflush_r+0x62>
 80150fe:	68ac      	ldr	r4, [r5, #8]
 8015100:	e7df      	b.n	80150c2 <_fflush_r+0x22>
 8015102:	4b04      	ldr	r3, [pc, #16]	; (8015114 <_fflush_r+0x74>)
 8015104:	429c      	cmp	r4, r3
 8015106:	bf08      	it	eq
 8015108:	68ec      	ldreq	r4, [r5, #12]
 801510a:	e7da      	b.n	80150c2 <_fflush_r+0x22>
 801510c:	08018ea0 	.word	0x08018ea0
 8015110:	08018ec0 	.word	0x08018ec0
 8015114:	08018e80 	.word	0x08018e80

08015118 <std>:
 8015118:	2300      	movs	r3, #0
 801511a:	b510      	push	{r4, lr}
 801511c:	4604      	mov	r4, r0
 801511e:	e9c0 3300 	strd	r3, r3, [r0]
 8015122:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015126:	6083      	str	r3, [r0, #8]
 8015128:	8181      	strh	r1, [r0, #12]
 801512a:	6643      	str	r3, [r0, #100]	; 0x64
 801512c:	81c2      	strh	r2, [r0, #14]
 801512e:	6183      	str	r3, [r0, #24]
 8015130:	4619      	mov	r1, r3
 8015132:	2208      	movs	r2, #8
 8015134:	305c      	adds	r0, #92	; 0x5c
 8015136:	f7fb faaf 	bl	8010698 <memset>
 801513a:	4b05      	ldr	r3, [pc, #20]	; (8015150 <std+0x38>)
 801513c:	6263      	str	r3, [r4, #36]	; 0x24
 801513e:	4b05      	ldr	r3, [pc, #20]	; (8015154 <std+0x3c>)
 8015140:	62a3      	str	r3, [r4, #40]	; 0x28
 8015142:	4b05      	ldr	r3, [pc, #20]	; (8015158 <std+0x40>)
 8015144:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015146:	4b05      	ldr	r3, [pc, #20]	; (801515c <std+0x44>)
 8015148:	6224      	str	r4, [r4, #32]
 801514a:	6323      	str	r3, [r4, #48]	; 0x30
 801514c:	bd10      	pop	{r4, pc}
 801514e:	bf00      	nop
 8015150:	08014be1 	.word	0x08014be1
 8015154:	08014c07 	.word	0x08014c07
 8015158:	08014c3f 	.word	0x08014c3f
 801515c:	08014c63 	.word	0x08014c63

08015160 <_cleanup_r>:
 8015160:	4901      	ldr	r1, [pc, #4]	; (8015168 <_cleanup_r+0x8>)
 8015162:	f000 b8af 	b.w	80152c4 <_fwalk_reent>
 8015166:	bf00      	nop
 8015168:	080150a1 	.word	0x080150a1

0801516c <__sfmoreglue>:
 801516c:	b570      	push	{r4, r5, r6, lr}
 801516e:	1e4a      	subs	r2, r1, #1
 8015170:	2568      	movs	r5, #104	; 0x68
 8015172:	4355      	muls	r5, r2
 8015174:	460e      	mov	r6, r1
 8015176:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801517a:	f7fb fd63 	bl	8010c44 <_malloc_r>
 801517e:	4604      	mov	r4, r0
 8015180:	b140      	cbz	r0, 8015194 <__sfmoreglue+0x28>
 8015182:	2100      	movs	r1, #0
 8015184:	e9c0 1600 	strd	r1, r6, [r0]
 8015188:	300c      	adds	r0, #12
 801518a:	60a0      	str	r0, [r4, #8]
 801518c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015190:	f7fb fa82 	bl	8010698 <memset>
 8015194:	4620      	mov	r0, r4
 8015196:	bd70      	pop	{r4, r5, r6, pc}

08015198 <__sfp_lock_acquire>:
 8015198:	4801      	ldr	r0, [pc, #4]	; (80151a0 <__sfp_lock_acquire+0x8>)
 801519a:	f7fe bd3b 	b.w	8013c14 <__retarget_lock_acquire_recursive>
 801519e:	bf00      	nop
 80151a0:	20009a44 	.word	0x20009a44

080151a4 <__sfp_lock_release>:
 80151a4:	4801      	ldr	r0, [pc, #4]	; (80151ac <__sfp_lock_release+0x8>)
 80151a6:	f7fe bd37 	b.w	8013c18 <__retarget_lock_release_recursive>
 80151aa:	bf00      	nop
 80151ac:	20009a44 	.word	0x20009a44

080151b0 <__sinit_lock_acquire>:
 80151b0:	4801      	ldr	r0, [pc, #4]	; (80151b8 <__sinit_lock_acquire+0x8>)
 80151b2:	f7fe bd2f 	b.w	8013c14 <__retarget_lock_acquire_recursive>
 80151b6:	bf00      	nop
 80151b8:	20009a3f 	.word	0x20009a3f

080151bc <__sinit_lock_release>:
 80151bc:	4801      	ldr	r0, [pc, #4]	; (80151c4 <__sinit_lock_release+0x8>)
 80151be:	f7fe bd2b 	b.w	8013c18 <__retarget_lock_release_recursive>
 80151c2:	bf00      	nop
 80151c4:	20009a3f 	.word	0x20009a3f

080151c8 <__sinit>:
 80151c8:	b510      	push	{r4, lr}
 80151ca:	4604      	mov	r4, r0
 80151cc:	f7ff fff0 	bl	80151b0 <__sinit_lock_acquire>
 80151d0:	69a3      	ldr	r3, [r4, #24]
 80151d2:	b11b      	cbz	r3, 80151dc <__sinit+0x14>
 80151d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80151d8:	f7ff bff0 	b.w	80151bc <__sinit_lock_release>
 80151dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80151e0:	6523      	str	r3, [r4, #80]	; 0x50
 80151e2:	4b13      	ldr	r3, [pc, #76]	; (8015230 <__sinit+0x68>)
 80151e4:	4a13      	ldr	r2, [pc, #76]	; (8015234 <__sinit+0x6c>)
 80151e6:	681b      	ldr	r3, [r3, #0]
 80151e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80151ea:	42a3      	cmp	r3, r4
 80151ec:	bf04      	itt	eq
 80151ee:	2301      	moveq	r3, #1
 80151f0:	61a3      	streq	r3, [r4, #24]
 80151f2:	4620      	mov	r0, r4
 80151f4:	f000 f820 	bl	8015238 <__sfp>
 80151f8:	6060      	str	r0, [r4, #4]
 80151fa:	4620      	mov	r0, r4
 80151fc:	f000 f81c 	bl	8015238 <__sfp>
 8015200:	60a0      	str	r0, [r4, #8]
 8015202:	4620      	mov	r0, r4
 8015204:	f000 f818 	bl	8015238 <__sfp>
 8015208:	2200      	movs	r2, #0
 801520a:	60e0      	str	r0, [r4, #12]
 801520c:	2104      	movs	r1, #4
 801520e:	6860      	ldr	r0, [r4, #4]
 8015210:	f7ff ff82 	bl	8015118 <std>
 8015214:	68a0      	ldr	r0, [r4, #8]
 8015216:	2201      	movs	r2, #1
 8015218:	2109      	movs	r1, #9
 801521a:	f7ff ff7d 	bl	8015118 <std>
 801521e:	68e0      	ldr	r0, [r4, #12]
 8015220:	2202      	movs	r2, #2
 8015222:	2112      	movs	r1, #18
 8015224:	f7ff ff78 	bl	8015118 <std>
 8015228:	2301      	movs	r3, #1
 801522a:	61a3      	str	r3, [r4, #24]
 801522c:	e7d2      	b.n	80151d4 <__sinit+0xc>
 801522e:	bf00      	nop
 8015230:	08018950 	.word	0x08018950
 8015234:	08015161 	.word	0x08015161

08015238 <__sfp>:
 8015238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801523a:	4607      	mov	r7, r0
 801523c:	f7ff ffac 	bl	8015198 <__sfp_lock_acquire>
 8015240:	4b1e      	ldr	r3, [pc, #120]	; (80152bc <__sfp+0x84>)
 8015242:	681e      	ldr	r6, [r3, #0]
 8015244:	69b3      	ldr	r3, [r6, #24]
 8015246:	b913      	cbnz	r3, 801524e <__sfp+0x16>
 8015248:	4630      	mov	r0, r6
 801524a:	f7ff ffbd 	bl	80151c8 <__sinit>
 801524e:	3648      	adds	r6, #72	; 0x48
 8015250:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015254:	3b01      	subs	r3, #1
 8015256:	d503      	bpl.n	8015260 <__sfp+0x28>
 8015258:	6833      	ldr	r3, [r6, #0]
 801525a:	b30b      	cbz	r3, 80152a0 <__sfp+0x68>
 801525c:	6836      	ldr	r6, [r6, #0]
 801525e:	e7f7      	b.n	8015250 <__sfp+0x18>
 8015260:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015264:	b9d5      	cbnz	r5, 801529c <__sfp+0x64>
 8015266:	4b16      	ldr	r3, [pc, #88]	; (80152c0 <__sfp+0x88>)
 8015268:	60e3      	str	r3, [r4, #12]
 801526a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801526e:	6665      	str	r5, [r4, #100]	; 0x64
 8015270:	f7fe fcce 	bl	8013c10 <__retarget_lock_init_recursive>
 8015274:	f7ff ff96 	bl	80151a4 <__sfp_lock_release>
 8015278:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801527c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8015280:	6025      	str	r5, [r4, #0]
 8015282:	61a5      	str	r5, [r4, #24]
 8015284:	2208      	movs	r2, #8
 8015286:	4629      	mov	r1, r5
 8015288:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801528c:	f7fb fa04 	bl	8010698 <memset>
 8015290:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015294:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015298:	4620      	mov	r0, r4
 801529a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801529c:	3468      	adds	r4, #104	; 0x68
 801529e:	e7d9      	b.n	8015254 <__sfp+0x1c>
 80152a0:	2104      	movs	r1, #4
 80152a2:	4638      	mov	r0, r7
 80152a4:	f7ff ff62 	bl	801516c <__sfmoreglue>
 80152a8:	4604      	mov	r4, r0
 80152aa:	6030      	str	r0, [r6, #0]
 80152ac:	2800      	cmp	r0, #0
 80152ae:	d1d5      	bne.n	801525c <__sfp+0x24>
 80152b0:	f7ff ff78 	bl	80151a4 <__sfp_lock_release>
 80152b4:	230c      	movs	r3, #12
 80152b6:	603b      	str	r3, [r7, #0]
 80152b8:	e7ee      	b.n	8015298 <__sfp+0x60>
 80152ba:	bf00      	nop
 80152bc:	08018950 	.word	0x08018950
 80152c0:	ffff0001 	.word	0xffff0001

080152c4 <_fwalk_reent>:
 80152c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80152c8:	4606      	mov	r6, r0
 80152ca:	4688      	mov	r8, r1
 80152cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80152d0:	2700      	movs	r7, #0
 80152d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80152d6:	f1b9 0901 	subs.w	r9, r9, #1
 80152da:	d505      	bpl.n	80152e8 <_fwalk_reent+0x24>
 80152dc:	6824      	ldr	r4, [r4, #0]
 80152de:	2c00      	cmp	r4, #0
 80152e0:	d1f7      	bne.n	80152d2 <_fwalk_reent+0xe>
 80152e2:	4638      	mov	r0, r7
 80152e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80152e8:	89ab      	ldrh	r3, [r5, #12]
 80152ea:	2b01      	cmp	r3, #1
 80152ec:	d907      	bls.n	80152fe <_fwalk_reent+0x3a>
 80152ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80152f2:	3301      	adds	r3, #1
 80152f4:	d003      	beq.n	80152fe <_fwalk_reent+0x3a>
 80152f6:	4629      	mov	r1, r5
 80152f8:	4630      	mov	r0, r6
 80152fa:	47c0      	blx	r8
 80152fc:	4307      	orrs	r7, r0
 80152fe:	3568      	adds	r5, #104	; 0x68
 8015300:	e7e9      	b.n	80152d6 <_fwalk_reent+0x12>
	...

08015304 <_lseek_r>:
 8015304:	b538      	push	{r3, r4, r5, lr}
 8015306:	4d07      	ldr	r5, [pc, #28]	; (8015324 <_lseek_r+0x20>)
 8015308:	4604      	mov	r4, r0
 801530a:	4608      	mov	r0, r1
 801530c:	4611      	mov	r1, r2
 801530e:	2200      	movs	r2, #0
 8015310:	602a      	str	r2, [r5, #0]
 8015312:	461a      	mov	r2, r3
 8015314:	f7f0 fe82 	bl	800601c <_lseek>
 8015318:	1c43      	adds	r3, r0, #1
 801531a:	d102      	bne.n	8015322 <_lseek_r+0x1e>
 801531c:	682b      	ldr	r3, [r5, #0]
 801531e:	b103      	cbz	r3, 8015322 <_lseek_r+0x1e>
 8015320:	6023      	str	r3, [r4, #0]
 8015322:	bd38      	pop	{r3, r4, r5, pc}
 8015324:	20009a48 	.word	0x20009a48

08015328 <__swhatbuf_r>:
 8015328:	b570      	push	{r4, r5, r6, lr}
 801532a:	460e      	mov	r6, r1
 801532c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015330:	2900      	cmp	r1, #0
 8015332:	b096      	sub	sp, #88	; 0x58
 8015334:	4614      	mov	r4, r2
 8015336:	461d      	mov	r5, r3
 8015338:	da07      	bge.n	801534a <__swhatbuf_r+0x22>
 801533a:	2300      	movs	r3, #0
 801533c:	602b      	str	r3, [r5, #0]
 801533e:	89b3      	ldrh	r3, [r6, #12]
 8015340:	061a      	lsls	r2, r3, #24
 8015342:	d410      	bmi.n	8015366 <__swhatbuf_r+0x3e>
 8015344:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015348:	e00e      	b.n	8015368 <__swhatbuf_r+0x40>
 801534a:	466a      	mov	r2, sp
 801534c:	f000 fcfe 	bl	8015d4c <_fstat_r>
 8015350:	2800      	cmp	r0, #0
 8015352:	dbf2      	blt.n	801533a <__swhatbuf_r+0x12>
 8015354:	9a01      	ldr	r2, [sp, #4]
 8015356:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801535a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801535e:	425a      	negs	r2, r3
 8015360:	415a      	adcs	r2, r3
 8015362:	602a      	str	r2, [r5, #0]
 8015364:	e7ee      	b.n	8015344 <__swhatbuf_r+0x1c>
 8015366:	2340      	movs	r3, #64	; 0x40
 8015368:	2000      	movs	r0, #0
 801536a:	6023      	str	r3, [r4, #0]
 801536c:	b016      	add	sp, #88	; 0x58
 801536e:	bd70      	pop	{r4, r5, r6, pc}

08015370 <__smakebuf_r>:
 8015370:	898b      	ldrh	r3, [r1, #12]
 8015372:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015374:	079d      	lsls	r5, r3, #30
 8015376:	4606      	mov	r6, r0
 8015378:	460c      	mov	r4, r1
 801537a:	d507      	bpl.n	801538c <__smakebuf_r+0x1c>
 801537c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015380:	6023      	str	r3, [r4, #0]
 8015382:	6123      	str	r3, [r4, #16]
 8015384:	2301      	movs	r3, #1
 8015386:	6163      	str	r3, [r4, #20]
 8015388:	b002      	add	sp, #8
 801538a:	bd70      	pop	{r4, r5, r6, pc}
 801538c:	ab01      	add	r3, sp, #4
 801538e:	466a      	mov	r2, sp
 8015390:	f7ff ffca 	bl	8015328 <__swhatbuf_r>
 8015394:	9900      	ldr	r1, [sp, #0]
 8015396:	4605      	mov	r5, r0
 8015398:	4630      	mov	r0, r6
 801539a:	f7fb fc53 	bl	8010c44 <_malloc_r>
 801539e:	b948      	cbnz	r0, 80153b4 <__smakebuf_r+0x44>
 80153a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80153a4:	059a      	lsls	r2, r3, #22
 80153a6:	d4ef      	bmi.n	8015388 <__smakebuf_r+0x18>
 80153a8:	f023 0303 	bic.w	r3, r3, #3
 80153ac:	f043 0302 	orr.w	r3, r3, #2
 80153b0:	81a3      	strh	r3, [r4, #12]
 80153b2:	e7e3      	b.n	801537c <__smakebuf_r+0xc>
 80153b4:	4b0d      	ldr	r3, [pc, #52]	; (80153ec <__smakebuf_r+0x7c>)
 80153b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80153b8:	89a3      	ldrh	r3, [r4, #12]
 80153ba:	6020      	str	r0, [r4, #0]
 80153bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80153c0:	81a3      	strh	r3, [r4, #12]
 80153c2:	9b00      	ldr	r3, [sp, #0]
 80153c4:	6163      	str	r3, [r4, #20]
 80153c6:	9b01      	ldr	r3, [sp, #4]
 80153c8:	6120      	str	r0, [r4, #16]
 80153ca:	b15b      	cbz	r3, 80153e4 <__smakebuf_r+0x74>
 80153cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80153d0:	4630      	mov	r0, r6
 80153d2:	f000 fccd 	bl	8015d70 <_isatty_r>
 80153d6:	b128      	cbz	r0, 80153e4 <__smakebuf_r+0x74>
 80153d8:	89a3      	ldrh	r3, [r4, #12]
 80153da:	f023 0303 	bic.w	r3, r3, #3
 80153de:	f043 0301 	orr.w	r3, r3, #1
 80153e2:	81a3      	strh	r3, [r4, #12]
 80153e4:	89a0      	ldrh	r0, [r4, #12]
 80153e6:	4305      	orrs	r5, r0
 80153e8:	81a5      	strh	r5, [r4, #12]
 80153ea:	e7cd      	b.n	8015388 <__smakebuf_r+0x18>
 80153ec:	08015161 	.word	0x08015161

080153f0 <memmove>:
 80153f0:	4288      	cmp	r0, r1
 80153f2:	b510      	push	{r4, lr}
 80153f4:	eb01 0402 	add.w	r4, r1, r2
 80153f8:	d902      	bls.n	8015400 <memmove+0x10>
 80153fa:	4284      	cmp	r4, r0
 80153fc:	4623      	mov	r3, r4
 80153fe:	d807      	bhi.n	8015410 <memmove+0x20>
 8015400:	1e43      	subs	r3, r0, #1
 8015402:	42a1      	cmp	r1, r4
 8015404:	d008      	beq.n	8015418 <memmove+0x28>
 8015406:	f811 2b01 	ldrb.w	r2, [r1], #1
 801540a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801540e:	e7f8      	b.n	8015402 <memmove+0x12>
 8015410:	4402      	add	r2, r0
 8015412:	4601      	mov	r1, r0
 8015414:	428a      	cmp	r2, r1
 8015416:	d100      	bne.n	801541a <memmove+0x2a>
 8015418:	bd10      	pop	{r4, pc}
 801541a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801541e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015422:	e7f7      	b.n	8015414 <memmove+0x24>

08015424 <_realloc_r>:
 8015424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015426:	4607      	mov	r7, r0
 8015428:	4614      	mov	r4, r2
 801542a:	460e      	mov	r6, r1
 801542c:	b921      	cbnz	r1, 8015438 <_realloc_r+0x14>
 801542e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015432:	4611      	mov	r1, r2
 8015434:	f7fb bc06 	b.w	8010c44 <_malloc_r>
 8015438:	b922      	cbnz	r2, 8015444 <_realloc_r+0x20>
 801543a:	f7fb fbb3 	bl	8010ba4 <_free_r>
 801543e:	4625      	mov	r5, r4
 8015440:	4628      	mov	r0, r5
 8015442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015444:	f000 fca4 	bl	8015d90 <_malloc_usable_size_r>
 8015448:	42a0      	cmp	r0, r4
 801544a:	d20f      	bcs.n	801546c <_realloc_r+0x48>
 801544c:	4621      	mov	r1, r4
 801544e:	4638      	mov	r0, r7
 8015450:	f7fb fbf8 	bl	8010c44 <_malloc_r>
 8015454:	4605      	mov	r5, r0
 8015456:	2800      	cmp	r0, #0
 8015458:	d0f2      	beq.n	8015440 <_realloc_r+0x1c>
 801545a:	4631      	mov	r1, r6
 801545c:	4622      	mov	r2, r4
 801545e:	f7fe fbee 	bl	8013c3e <memcpy>
 8015462:	4631      	mov	r1, r6
 8015464:	4638      	mov	r0, r7
 8015466:	f7fb fb9d 	bl	8010ba4 <_free_r>
 801546a:	e7e9      	b.n	8015440 <_realloc_r+0x1c>
 801546c:	4635      	mov	r5, r6
 801546e:	e7e7      	b.n	8015440 <_realloc_r+0x1c>

08015470 <_sungetc_r>:
 8015470:	b538      	push	{r3, r4, r5, lr}
 8015472:	1c4b      	adds	r3, r1, #1
 8015474:	4614      	mov	r4, r2
 8015476:	d103      	bne.n	8015480 <_sungetc_r+0x10>
 8015478:	f04f 35ff 	mov.w	r5, #4294967295
 801547c:	4628      	mov	r0, r5
 801547e:	bd38      	pop	{r3, r4, r5, pc}
 8015480:	8993      	ldrh	r3, [r2, #12]
 8015482:	f023 0320 	bic.w	r3, r3, #32
 8015486:	8193      	strh	r3, [r2, #12]
 8015488:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801548a:	6852      	ldr	r2, [r2, #4]
 801548c:	b2cd      	uxtb	r5, r1
 801548e:	b18b      	cbz	r3, 80154b4 <_sungetc_r+0x44>
 8015490:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015492:	4293      	cmp	r3, r2
 8015494:	dd08      	ble.n	80154a8 <_sungetc_r+0x38>
 8015496:	6823      	ldr	r3, [r4, #0]
 8015498:	1e5a      	subs	r2, r3, #1
 801549a:	6022      	str	r2, [r4, #0]
 801549c:	f803 5c01 	strb.w	r5, [r3, #-1]
 80154a0:	6863      	ldr	r3, [r4, #4]
 80154a2:	3301      	adds	r3, #1
 80154a4:	6063      	str	r3, [r4, #4]
 80154a6:	e7e9      	b.n	801547c <_sungetc_r+0xc>
 80154a8:	4621      	mov	r1, r4
 80154aa:	f000 fc15 	bl	8015cd8 <__submore>
 80154ae:	2800      	cmp	r0, #0
 80154b0:	d0f1      	beq.n	8015496 <_sungetc_r+0x26>
 80154b2:	e7e1      	b.n	8015478 <_sungetc_r+0x8>
 80154b4:	6921      	ldr	r1, [r4, #16]
 80154b6:	6823      	ldr	r3, [r4, #0]
 80154b8:	b151      	cbz	r1, 80154d0 <_sungetc_r+0x60>
 80154ba:	4299      	cmp	r1, r3
 80154bc:	d208      	bcs.n	80154d0 <_sungetc_r+0x60>
 80154be:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80154c2:	42a9      	cmp	r1, r5
 80154c4:	d104      	bne.n	80154d0 <_sungetc_r+0x60>
 80154c6:	3b01      	subs	r3, #1
 80154c8:	3201      	adds	r2, #1
 80154ca:	6023      	str	r3, [r4, #0]
 80154cc:	6062      	str	r2, [r4, #4]
 80154ce:	e7d5      	b.n	801547c <_sungetc_r+0xc>
 80154d0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80154d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80154d8:	6363      	str	r3, [r4, #52]	; 0x34
 80154da:	2303      	movs	r3, #3
 80154dc:	63a3      	str	r3, [r4, #56]	; 0x38
 80154de:	4623      	mov	r3, r4
 80154e0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80154e4:	6023      	str	r3, [r4, #0]
 80154e6:	2301      	movs	r3, #1
 80154e8:	e7dc      	b.n	80154a4 <_sungetc_r+0x34>

080154ea <__ssrefill_r>:
 80154ea:	b510      	push	{r4, lr}
 80154ec:	460c      	mov	r4, r1
 80154ee:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80154f0:	b169      	cbz	r1, 801550e <__ssrefill_r+0x24>
 80154f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80154f6:	4299      	cmp	r1, r3
 80154f8:	d001      	beq.n	80154fe <__ssrefill_r+0x14>
 80154fa:	f7fb fb53 	bl	8010ba4 <_free_r>
 80154fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015500:	6063      	str	r3, [r4, #4]
 8015502:	2000      	movs	r0, #0
 8015504:	6360      	str	r0, [r4, #52]	; 0x34
 8015506:	b113      	cbz	r3, 801550e <__ssrefill_r+0x24>
 8015508:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801550a:	6023      	str	r3, [r4, #0]
 801550c:	bd10      	pop	{r4, pc}
 801550e:	6923      	ldr	r3, [r4, #16]
 8015510:	6023      	str	r3, [r4, #0]
 8015512:	2300      	movs	r3, #0
 8015514:	6063      	str	r3, [r4, #4]
 8015516:	89a3      	ldrh	r3, [r4, #12]
 8015518:	f043 0320 	orr.w	r3, r3, #32
 801551c:	81a3      	strh	r3, [r4, #12]
 801551e:	f04f 30ff 	mov.w	r0, #4294967295
 8015522:	e7f3      	b.n	801550c <__ssrefill_r+0x22>

08015524 <__ssvfiscanf_r>:
 8015524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015528:	460c      	mov	r4, r1
 801552a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801552e:	2100      	movs	r1, #0
 8015530:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8015534:	49b2      	ldr	r1, [pc, #712]	; (8015800 <__ssvfiscanf_r+0x2dc>)
 8015536:	91a0      	str	r1, [sp, #640]	; 0x280
 8015538:	f10d 0804 	add.w	r8, sp, #4
 801553c:	49b1      	ldr	r1, [pc, #708]	; (8015804 <__ssvfiscanf_r+0x2e0>)
 801553e:	4fb2      	ldr	r7, [pc, #712]	; (8015808 <__ssvfiscanf_r+0x2e4>)
 8015540:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 801580c <__ssvfiscanf_r+0x2e8>
 8015544:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8015548:	4606      	mov	r6, r0
 801554a:	91a1      	str	r1, [sp, #644]	; 0x284
 801554c:	9300      	str	r3, [sp, #0]
 801554e:	f892 a000 	ldrb.w	sl, [r2]
 8015552:	f1ba 0f00 	cmp.w	sl, #0
 8015556:	f000 8151 	beq.w	80157fc <__ssvfiscanf_r+0x2d8>
 801555a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 801555e:	f013 0308 	ands.w	r3, r3, #8
 8015562:	f102 0501 	add.w	r5, r2, #1
 8015566:	d019      	beq.n	801559c <__ssvfiscanf_r+0x78>
 8015568:	6863      	ldr	r3, [r4, #4]
 801556a:	2b00      	cmp	r3, #0
 801556c:	dd0f      	ble.n	801558e <__ssvfiscanf_r+0x6a>
 801556e:	6823      	ldr	r3, [r4, #0]
 8015570:	781a      	ldrb	r2, [r3, #0]
 8015572:	5cba      	ldrb	r2, [r7, r2]
 8015574:	0712      	lsls	r2, r2, #28
 8015576:	d401      	bmi.n	801557c <__ssvfiscanf_r+0x58>
 8015578:	462a      	mov	r2, r5
 801557a:	e7e8      	b.n	801554e <__ssvfiscanf_r+0x2a>
 801557c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801557e:	3201      	adds	r2, #1
 8015580:	9245      	str	r2, [sp, #276]	; 0x114
 8015582:	6862      	ldr	r2, [r4, #4]
 8015584:	3301      	adds	r3, #1
 8015586:	3a01      	subs	r2, #1
 8015588:	6062      	str	r2, [r4, #4]
 801558a:	6023      	str	r3, [r4, #0]
 801558c:	e7ec      	b.n	8015568 <__ssvfiscanf_r+0x44>
 801558e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015590:	4621      	mov	r1, r4
 8015592:	4630      	mov	r0, r6
 8015594:	4798      	blx	r3
 8015596:	2800      	cmp	r0, #0
 8015598:	d0e9      	beq.n	801556e <__ssvfiscanf_r+0x4a>
 801559a:	e7ed      	b.n	8015578 <__ssvfiscanf_r+0x54>
 801559c:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 80155a0:	f040 8083 	bne.w	80156aa <__ssvfiscanf_r+0x186>
 80155a4:	9341      	str	r3, [sp, #260]	; 0x104
 80155a6:	9343      	str	r3, [sp, #268]	; 0x10c
 80155a8:	7853      	ldrb	r3, [r2, #1]
 80155aa:	2b2a      	cmp	r3, #42	; 0x2a
 80155ac:	bf02      	ittt	eq
 80155ae:	2310      	moveq	r3, #16
 80155b0:	1c95      	addeq	r5, r2, #2
 80155b2:	9341      	streq	r3, [sp, #260]	; 0x104
 80155b4:	220a      	movs	r2, #10
 80155b6:	46ab      	mov	fp, r5
 80155b8:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80155bc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80155c0:	2b09      	cmp	r3, #9
 80155c2:	d91d      	bls.n	8015600 <__ssvfiscanf_r+0xdc>
 80155c4:	4891      	ldr	r0, [pc, #580]	; (801580c <__ssvfiscanf_r+0x2e8>)
 80155c6:	2203      	movs	r2, #3
 80155c8:	f7ea fe22 	bl	8000210 <memchr>
 80155cc:	b140      	cbz	r0, 80155e0 <__ssvfiscanf_r+0xbc>
 80155ce:	2301      	movs	r3, #1
 80155d0:	eba0 0009 	sub.w	r0, r0, r9
 80155d4:	fa03 f000 	lsl.w	r0, r3, r0
 80155d8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80155da:	4318      	orrs	r0, r3
 80155dc:	9041      	str	r0, [sp, #260]	; 0x104
 80155de:	465d      	mov	r5, fp
 80155e0:	f815 3b01 	ldrb.w	r3, [r5], #1
 80155e4:	2b78      	cmp	r3, #120	; 0x78
 80155e6:	d806      	bhi.n	80155f6 <__ssvfiscanf_r+0xd2>
 80155e8:	2b57      	cmp	r3, #87	; 0x57
 80155ea:	d810      	bhi.n	801560e <__ssvfiscanf_r+0xea>
 80155ec:	2b25      	cmp	r3, #37	; 0x25
 80155ee:	d05c      	beq.n	80156aa <__ssvfiscanf_r+0x186>
 80155f0:	d856      	bhi.n	80156a0 <__ssvfiscanf_r+0x17c>
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	d074      	beq.n	80156e0 <__ssvfiscanf_r+0x1bc>
 80155f6:	2303      	movs	r3, #3
 80155f8:	9347      	str	r3, [sp, #284]	; 0x11c
 80155fa:	230a      	movs	r3, #10
 80155fc:	9342      	str	r3, [sp, #264]	; 0x108
 80155fe:	e081      	b.n	8015704 <__ssvfiscanf_r+0x1e0>
 8015600:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8015602:	fb02 1303 	mla	r3, r2, r3, r1
 8015606:	3b30      	subs	r3, #48	; 0x30
 8015608:	9343      	str	r3, [sp, #268]	; 0x10c
 801560a:	465d      	mov	r5, fp
 801560c:	e7d3      	b.n	80155b6 <__ssvfiscanf_r+0x92>
 801560e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8015612:	2a20      	cmp	r2, #32
 8015614:	d8ef      	bhi.n	80155f6 <__ssvfiscanf_r+0xd2>
 8015616:	a101      	add	r1, pc, #4	; (adr r1, 801561c <__ssvfiscanf_r+0xf8>)
 8015618:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801561c:	080156ef 	.word	0x080156ef
 8015620:	080155f7 	.word	0x080155f7
 8015624:	080155f7 	.word	0x080155f7
 8015628:	0801574d 	.word	0x0801574d
 801562c:	080155f7 	.word	0x080155f7
 8015630:	080155f7 	.word	0x080155f7
 8015634:	080155f7 	.word	0x080155f7
 8015638:	080155f7 	.word	0x080155f7
 801563c:	080155f7 	.word	0x080155f7
 8015640:	080155f7 	.word	0x080155f7
 8015644:	080155f7 	.word	0x080155f7
 8015648:	08015763 	.word	0x08015763
 801564c:	08015739 	.word	0x08015739
 8015650:	080156a7 	.word	0x080156a7
 8015654:	080156a7 	.word	0x080156a7
 8015658:	080156a7 	.word	0x080156a7
 801565c:	080155f7 	.word	0x080155f7
 8015660:	0801573d 	.word	0x0801573d
 8015664:	080155f7 	.word	0x080155f7
 8015668:	080155f7 	.word	0x080155f7
 801566c:	080155f7 	.word	0x080155f7
 8015670:	080155f7 	.word	0x080155f7
 8015674:	08015773 	.word	0x08015773
 8015678:	08015745 	.word	0x08015745
 801567c:	080156e7 	.word	0x080156e7
 8015680:	080155f7 	.word	0x080155f7
 8015684:	080155f7 	.word	0x080155f7
 8015688:	0801576f 	.word	0x0801576f
 801568c:	080155f7 	.word	0x080155f7
 8015690:	08015739 	.word	0x08015739
 8015694:	080155f7 	.word	0x080155f7
 8015698:	080155f7 	.word	0x080155f7
 801569c:	080156ef 	.word	0x080156ef
 80156a0:	3b45      	subs	r3, #69	; 0x45
 80156a2:	2b02      	cmp	r3, #2
 80156a4:	d8a7      	bhi.n	80155f6 <__ssvfiscanf_r+0xd2>
 80156a6:	2305      	movs	r3, #5
 80156a8:	e02b      	b.n	8015702 <__ssvfiscanf_r+0x1de>
 80156aa:	6863      	ldr	r3, [r4, #4]
 80156ac:	2b00      	cmp	r3, #0
 80156ae:	dd0d      	ble.n	80156cc <__ssvfiscanf_r+0x1a8>
 80156b0:	6823      	ldr	r3, [r4, #0]
 80156b2:	781a      	ldrb	r2, [r3, #0]
 80156b4:	4552      	cmp	r2, sl
 80156b6:	f040 80a1 	bne.w	80157fc <__ssvfiscanf_r+0x2d8>
 80156ba:	3301      	adds	r3, #1
 80156bc:	6862      	ldr	r2, [r4, #4]
 80156be:	6023      	str	r3, [r4, #0]
 80156c0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80156c2:	3a01      	subs	r2, #1
 80156c4:	3301      	adds	r3, #1
 80156c6:	6062      	str	r2, [r4, #4]
 80156c8:	9345      	str	r3, [sp, #276]	; 0x114
 80156ca:	e755      	b.n	8015578 <__ssvfiscanf_r+0x54>
 80156cc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80156ce:	4621      	mov	r1, r4
 80156d0:	4630      	mov	r0, r6
 80156d2:	4798      	blx	r3
 80156d4:	2800      	cmp	r0, #0
 80156d6:	d0eb      	beq.n	80156b0 <__ssvfiscanf_r+0x18c>
 80156d8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80156da:	2800      	cmp	r0, #0
 80156dc:	f040 8084 	bne.w	80157e8 <__ssvfiscanf_r+0x2c4>
 80156e0:	f04f 30ff 	mov.w	r0, #4294967295
 80156e4:	e086      	b.n	80157f4 <__ssvfiscanf_r+0x2d0>
 80156e6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80156e8:	f042 0220 	orr.w	r2, r2, #32
 80156ec:	9241      	str	r2, [sp, #260]	; 0x104
 80156ee:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80156f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80156f4:	9241      	str	r2, [sp, #260]	; 0x104
 80156f6:	2210      	movs	r2, #16
 80156f8:	2b6f      	cmp	r3, #111	; 0x6f
 80156fa:	9242      	str	r2, [sp, #264]	; 0x108
 80156fc:	bf34      	ite	cc
 80156fe:	2303      	movcc	r3, #3
 8015700:	2304      	movcs	r3, #4
 8015702:	9347      	str	r3, [sp, #284]	; 0x11c
 8015704:	6863      	ldr	r3, [r4, #4]
 8015706:	2b00      	cmp	r3, #0
 8015708:	dd41      	ble.n	801578e <__ssvfiscanf_r+0x26a>
 801570a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801570c:	0659      	lsls	r1, r3, #25
 801570e:	d404      	bmi.n	801571a <__ssvfiscanf_r+0x1f6>
 8015710:	6823      	ldr	r3, [r4, #0]
 8015712:	781a      	ldrb	r2, [r3, #0]
 8015714:	5cba      	ldrb	r2, [r7, r2]
 8015716:	0712      	lsls	r2, r2, #28
 8015718:	d440      	bmi.n	801579c <__ssvfiscanf_r+0x278>
 801571a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801571c:	2b02      	cmp	r3, #2
 801571e:	dc4f      	bgt.n	80157c0 <__ssvfiscanf_r+0x29c>
 8015720:	466b      	mov	r3, sp
 8015722:	4622      	mov	r2, r4
 8015724:	a941      	add	r1, sp, #260	; 0x104
 8015726:	4630      	mov	r0, r6
 8015728:	f000 f874 	bl	8015814 <_scanf_chars>
 801572c:	2801      	cmp	r0, #1
 801572e:	d065      	beq.n	80157fc <__ssvfiscanf_r+0x2d8>
 8015730:	2802      	cmp	r0, #2
 8015732:	f47f af21 	bne.w	8015578 <__ssvfiscanf_r+0x54>
 8015736:	e7cf      	b.n	80156d8 <__ssvfiscanf_r+0x1b4>
 8015738:	220a      	movs	r2, #10
 801573a:	e7dd      	b.n	80156f8 <__ssvfiscanf_r+0x1d4>
 801573c:	2300      	movs	r3, #0
 801573e:	9342      	str	r3, [sp, #264]	; 0x108
 8015740:	2303      	movs	r3, #3
 8015742:	e7de      	b.n	8015702 <__ssvfiscanf_r+0x1de>
 8015744:	2308      	movs	r3, #8
 8015746:	9342      	str	r3, [sp, #264]	; 0x108
 8015748:	2304      	movs	r3, #4
 801574a:	e7da      	b.n	8015702 <__ssvfiscanf_r+0x1de>
 801574c:	4629      	mov	r1, r5
 801574e:	4640      	mov	r0, r8
 8015750:	f000 f9be 	bl	8015ad0 <__sccl>
 8015754:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8015756:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801575a:	9341      	str	r3, [sp, #260]	; 0x104
 801575c:	4605      	mov	r5, r0
 801575e:	2301      	movs	r3, #1
 8015760:	e7cf      	b.n	8015702 <__ssvfiscanf_r+0x1de>
 8015762:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8015764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015768:	9341      	str	r3, [sp, #260]	; 0x104
 801576a:	2300      	movs	r3, #0
 801576c:	e7c9      	b.n	8015702 <__ssvfiscanf_r+0x1de>
 801576e:	2302      	movs	r3, #2
 8015770:	e7c7      	b.n	8015702 <__ssvfiscanf_r+0x1de>
 8015772:	9841      	ldr	r0, [sp, #260]	; 0x104
 8015774:	06c3      	lsls	r3, r0, #27
 8015776:	f53f aeff 	bmi.w	8015578 <__ssvfiscanf_r+0x54>
 801577a:	9b00      	ldr	r3, [sp, #0]
 801577c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801577e:	1d19      	adds	r1, r3, #4
 8015780:	9100      	str	r1, [sp, #0]
 8015782:	681b      	ldr	r3, [r3, #0]
 8015784:	07c0      	lsls	r0, r0, #31
 8015786:	bf4c      	ite	mi
 8015788:	801a      	strhmi	r2, [r3, #0]
 801578a:	601a      	strpl	r2, [r3, #0]
 801578c:	e6f4      	b.n	8015578 <__ssvfiscanf_r+0x54>
 801578e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015790:	4621      	mov	r1, r4
 8015792:	4630      	mov	r0, r6
 8015794:	4798      	blx	r3
 8015796:	2800      	cmp	r0, #0
 8015798:	d0b7      	beq.n	801570a <__ssvfiscanf_r+0x1e6>
 801579a:	e79d      	b.n	80156d8 <__ssvfiscanf_r+0x1b4>
 801579c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801579e:	3201      	adds	r2, #1
 80157a0:	9245      	str	r2, [sp, #276]	; 0x114
 80157a2:	6862      	ldr	r2, [r4, #4]
 80157a4:	3a01      	subs	r2, #1
 80157a6:	2a00      	cmp	r2, #0
 80157a8:	6062      	str	r2, [r4, #4]
 80157aa:	dd02      	ble.n	80157b2 <__ssvfiscanf_r+0x28e>
 80157ac:	3301      	adds	r3, #1
 80157ae:	6023      	str	r3, [r4, #0]
 80157b0:	e7ae      	b.n	8015710 <__ssvfiscanf_r+0x1ec>
 80157b2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80157b4:	4621      	mov	r1, r4
 80157b6:	4630      	mov	r0, r6
 80157b8:	4798      	blx	r3
 80157ba:	2800      	cmp	r0, #0
 80157bc:	d0a8      	beq.n	8015710 <__ssvfiscanf_r+0x1ec>
 80157be:	e78b      	b.n	80156d8 <__ssvfiscanf_r+0x1b4>
 80157c0:	2b04      	cmp	r3, #4
 80157c2:	dc06      	bgt.n	80157d2 <__ssvfiscanf_r+0x2ae>
 80157c4:	466b      	mov	r3, sp
 80157c6:	4622      	mov	r2, r4
 80157c8:	a941      	add	r1, sp, #260	; 0x104
 80157ca:	4630      	mov	r0, r6
 80157cc:	f000 f87a 	bl	80158c4 <_scanf_i>
 80157d0:	e7ac      	b.n	801572c <__ssvfiscanf_r+0x208>
 80157d2:	4b0f      	ldr	r3, [pc, #60]	; (8015810 <__ssvfiscanf_r+0x2ec>)
 80157d4:	2b00      	cmp	r3, #0
 80157d6:	f43f aecf 	beq.w	8015578 <__ssvfiscanf_r+0x54>
 80157da:	466b      	mov	r3, sp
 80157dc:	4622      	mov	r2, r4
 80157de:	a941      	add	r1, sp, #260	; 0x104
 80157e0:	4630      	mov	r0, r6
 80157e2:	f3af 8000 	nop.w
 80157e6:	e7a1      	b.n	801572c <__ssvfiscanf_r+0x208>
 80157e8:	89a3      	ldrh	r3, [r4, #12]
 80157ea:	f013 0f40 	tst.w	r3, #64	; 0x40
 80157ee:	bf18      	it	ne
 80157f0:	f04f 30ff 	movne.w	r0, #4294967295
 80157f4:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80157f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157fc:	9844      	ldr	r0, [sp, #272]	; 0x110
 80157fe:	e7f9      	b.n	80157f4 <__ssvfiscanf_r+0x2d0>
 8015800:	08015471 	.word	0x08015471
 8015804:	080154eb 	.word	0x080154eb
 8015808:	08018d7e 	.word	0x08018d7e
 801580c:	08018d72 	.word	0x08018d72
 8015810:	00000000 	.word	0x00000000

08015814 <_scanf_chars>:
 8015814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015818:	4615      	mov	r5, r2
 801581a:	688a      	ldr	r2, [r1, #8]
 801581c:	4680      	mov	r8, r0
 801581e:	460c      	mov	r4, r1
 8015820:	b932      	cbnz	r2, 8015830 <_scanf_chars+0x1c>
 8015822:	698a      	ldr	r2, [r1, #24]
 8015824:	2a00      	cmp	r2, #0
 8015826:	bf0c      	ite	eq
 8015828:	2201      	moveq	r2, #1
 801582a:	f04f 32ff 	movne.w	r2, #4294967295
 801582e:	608a      	str	r2, [r1, #8]
 8015830:	6822      	ldr	r2, [r4, #0]
 8015832:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80158c0 <_scanf_chars+0xac>
 8015836:	06d1      	lsls	r1, r2, #27
 8015838:	bf5f      	itttt	pl
 801583a:	681a      	ldrpl	r2, [r3, #0]
 801583c:	1d11      	addpl	r1, r2, #4
 801583e:	6019      	strpl	r1, [r3, #0]
 8015840:	6816      	ldrpl	r6, [r2, #0]
 8015842:	2700      	movs	r7, #0
 8015844:	69a0      	ldr	r0, [r4, #24]
 8015846:	b188      	cbz	r0, 801586c <_scanf_chars+0x58>
 8015848:	2801      	cmp	r0, #1
 801584a:	d107      	bne.n	801585c <_scanf_chars+0x48>
 801584c:	682b      	ldr	r3, [r5, #0]
 801584e:	781a      	ldrb	r2, [r3, #0]
 8015850:	6963      	ldr	r3, [r4, #20]
 8015852:	5c9b      	ldrb	r3, [r3, r2]
 8015854:	b953      	cbnz	r3, 801586c <_scanf_chars+0x58>
 8015856:	bb27      	cbnz	r7, 80158a2 <_scanf_chars+0x8e>
 8015858:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801585c:	2802      	cmp	r0, #2
 801585e:	d120      	bne.n	80158a2 <_scanf_chars+0x8e>
 8015860:	682b      	ldr	r3, [r5, #0]
 8015862:	781b      	ldrb	r3, [r3, #0]
 8015864:	f813 3009 	ldrb.w	r3, [r3, r9]
 8015868:	071b      	lsls	r3, r3, #28
 801586a:	d41a      	bmi.n	80158a2 <_scanf_chars+0x8e>
 801586c:	6823      	ldr	r3, [r4, #0]
 801586e:	06da      	lsls	r2, r3, #27
 8015870:	bf5e      	ittt	pl
 8015872:	682b      	ldrpl	r3, [r5, #0]
 8015874:	781b      	ldrbpl	r3, [r3, #0]
 8015876:	f806 3b01 	strbpl.w	r3, [r6], #1
 801587a:	682a      	ldr	r2, [r5, #0]
 801587c:	686b      	ldr	r3, [r5, #4]
 801587e:	3201      	adds	r2, #1
 8015880:	602a      	str	r2, [r5, #0]
 8015882:	68a2      	ldr	r2, [r4, #8]
 8015884:	3b01      	subs	r3, #1
 8015886:	3a01      	subs	r2, #1
 8015888:	606b      	str	r3, [r5, #4]
 801588a:	3701      	adds	r7, #1
 801588c:	60a2      	str	r2, [r4, #8]
 801588e:	b142      	cbz	r2, 80158a2 <_scanf_chars+0x8e>
 8015890:	2b00      	cmp	r3, #0
 8015892:	dcd7      	bgt.n	8015844 <_scanf_chars+0x30>
 8015894:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015898:	4629      	mov	r1, r5
 801589a:	4640      	mov	r0, r8
 801589c:	4798      	blx	r3
 801589e:	2800      	cmp	r0, #0
 80158a0:	d0d0      	beq.n	8015844 <_scanf_chars+0x30>
 80158a2:	6823      	ldr	r3, [r4, #0]
 80158a4:	f013 0310 	ands.w	r3, r3, #16
 80158a8:	d105      	bne.n	80158b6 <_scanf_chars+0xa2>
 80158aa:	68e2      	ldr	r2, [r4, #12]
 80158ac:	3201      	adds	r2, #1
 80158ae:	60e2      	str	r2, [r4, #12]
 80158b0:	69a2      	ldr	r2, [r4, #24]
 80158b2:	b102      	cbz	r2, 80158b6 <_scanf_chars+0xa2>
 80158b4:	7033      	strb	r3, [r6, #0]
 80158b6:	6923      	ldr	r3, [r4, #16]
 80158b8:	441f      	add	r7, r3
 80158ba:	6127      	str	r7, [r4, #16]
 80158bc:	2000      	movs	r0, #0
 80158be:	e7cb      	b.n	8015858 <_scanf_chars+0x44>
 80158c0:	08018d7e 	.word	0x08018d7e

080158c4 <_scanf_i>:
 80158c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158c8:	4698      	mov	r8, r3
 80158ca:	4b74      	ldr	r3, [pc, #464]	; (8015a9c <_scanf_i+0x1d8>)
 80158cc:	460c      	mov	r4, r1
 80158ce:	4682      	mov	sl, r0
 80158d0:	4616      	mov	r6, r2
 80158d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80158d6:	b087      	sub	sp, #28
 80158d8:	ab03      	add	r3, sp, #12
 80158da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80158de:	4b70      	ldr	r3, [pc, #448]	; (8015aa0 <_scanf_i+0x1dc>)
 80158e0:	69a1      	ldr	r1, [r4, #24]
 80158e2:	4a70      	ldr	r2, [pc, #448]	; (8015aa4 <_scanf_i+0x1e0>)
 80158e4:	2903      	cmp	r1, #3
 80158e6:	bf18      	it	ne
 80158e8:	461a      	movne	r2, r3
 80158ea:	68a3      	ldr	r3, [r4, #8]
 80158ec:	9201      	str	r2, [sp, #4]
 80158ee:	1e5a      	subs	r2, r3, #1
 80158f0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80158f4:	bf88      	it	hi
 80158f6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80158fa:	4627      	mov	r7, r4
 80158fc:	bf82      	ittt	hi
 80158fe:	eb03 0905 	addhi.w	r9, r3, r5
 8015902:	f240 135d 	movwhi	r3, #349	; 0x15d
 8015906:	60a3      	strhi	r3, [r4, #8]
 8015908:	f857 3b1c 	ldr.w	r3, [r7], #28
 801590c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8015910:	bf98      	it	ls
 8015912:	f04f 0900 	movls.w	r9, #0
 8015916:	6023      	str	r3, [r4, #0]
 8015918:	463d      	mov	r5, r7
 801591a:	f04f 0b00 	mov.w	fp, #0
 801591e:	6831      	ldr	r1, [r6, #0]
 8015920:	ab03      	add	r3, sp, #12
 8015922:	7809      	ldrb	r1, [r1, #0]
 8015924:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8015928:	2202      	movs	r2, #2
 801592a:	f7ea fc71 	bl	8000210 <memchr>
 801592e:	b328      	cbz	r0, 801597c <_scanf_i+0xb8>
 8015930:	f1bb 0f01 	cmp.w	fp, #1
 8015934:	d159      	bne.n	80159ea <_scanf_i+0x126>
 8015936:	6862      	ldr	r2, [r4, #4]
 8015938:	b92a      	cbnz	r2, 8015946 <_scanf_i+0x82>
 801593a:	6822      	ldr	r2, [r4, #0]
 801593c:	2308      	movs	r3, #8
 801593e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8015942:	6063      	str	r3, [r4, #4]
 8015944:	6022      	str	r2, [r4, #0]
 8015946:	6822      	ldr	r2, [r4, #0]
 8015948:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801594c:	6022      	str	r2, [r4, #0]
 801594e:	68a2      	ldr	r2, [r4, #8]
 8015950:	1e51      	subs	r1, r2, #1
 8015952:	60a1      	str	r1, [r4, #8]
 8015954:	b192      	cbz	r2, 801597c <_scanf_i+0xb8>
 8015956:	6832      	ldr	r2, [r6, #0]
 8015958:	1c51      	adds	r1, r2, #1
 801595a:	6031      	str	r1, [r6, #0]
 801595c:	7812      	ldrb	r2, [r2, #0]
 801595e:	f805 2b01 	strb.w	r2, [r5], #1
 8015962:	6872      	ldr	r2, [r6, #4]
 8015964:	3a01      	subs	r2, #1
 8015966:	2a00      	cmp	r2, #0
 8015968:	6072      	str	r2, [r6, #4]
 801596a:	dc07      	bgt.n	801597c <_scanf_i+0xb8>
 801596c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8015970:	4631      	mov	r1, r6
 8015972:	4650      	mov	r0, sl
 8015974:	4790      	blx	r2
 8015976:	2800      	cmp	r0, #0
 8015978:	f040 8085 	bne.w	8015a86 <_scanf_i+0x1c2>
 801597c:	f10b 0b01 	add.w	fp, fp, #1
 8015980:	f1bb 0f03 	cmp.w	fp, #3
 8015984:	d1cb      	bne.n	801591e <_scanf_i+0x5a>
 8015986:	6863      	ldr	r3, [r4, #4]
 8015988:	b90b      	cbnz	r3, 801598e <_scanf_i+0xca>
 801598a:	230a      	movs	r3, #10
 801598c:	6063      	str	r3, [r4, #4]
 801598e:	6863      	ldr	r3, [r4, #4]
 8015990:	4945      	ldr	r1, [pc, #276]	; (8015aa8 <_scanf_i+0x1e4>)
 8015992:	6960      	ldr	r0, [r4, #20]
 8015994:	1ac9      	subs	r1, r1, r3
 8015996:	f000 f89b 	bl	8015ad0 <__sccl>
 801599a:	f04f 0b00 	mov.w	fp, #0
 801599e:	68a3      	ldr	r3, [r4, #8]
 80159a0:	6822      	ldr	r2, [r4, #0]
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	d03d      	beq.n	8015a22 <_scanf_i+0x15e>
 80159a6:	6831      	ldr	r1, [r6, #0]
 80159a8:	6960      	ldr	r0, [r4, #20]
 80159aa:	f891 c000 	ldrb.w	ip, [r1]
 80159ae:	f810 000c 	ldrb.w	r0, [r0, ip]
 80159b2:	2800      	cmp	r0, #0
 80159b4:	d035      	beq.n	8015a22 <_scanf_i+0x15e>
 80159b6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80159ba:	d124      	bne.n	8015a06 <_scanf_i+0x142>
 80159bc:	0510      	lsls	r0, r2, #20
 80159be:	d522      	bpl.n	8015a06 <_scanf_i+0x142>
 80159c0:	f10b 0b01 	add.w	fp, fp, #1
 80159c4:	f1b9 0f00 	cmp.w	r9, #0
 80159c8:	d003      	beq.n	80159d2 <_scanf_i+0x10e>
 80159ca:	3301      	adds	r3, #1
 80159cc:	f109 39ff 	add.w	r9, r9, #4294967295
 80159d0:	60a3      	str	r3, [r4, #8]
 80159d2:	6873      	ldr	r3, [r6, #4]
 80159d4:	3b01      	subs	r3, #1
 80159d6:	2b00      	cmp	r3, #0
 80159d8:	6073      	str	r3, [r6, #4]
 80159da:	dd1b      	ble.n	8015a14 <_scanf_i+0x150>
 80159dc:	6833      	ldr	r3, [r6, #0]
 80159de:	3301      	adds	r3, #1
 80159e0:	6033      	str	r3, [r6, #0]
 80159e2:	68a3      	ldr	r3, [r4, #8]
 80159e4:	3b01      	subs	r3, #1
 80159e6:	60a3      	str	r3, [r4, #8]
 80159e8:	e7d9      	b.n	801599e <_scanf_i+0xda>
 80159ea:	f1bb 0f02 	cmp.w	fp, #2
 80159ee:	d1ae      	bne.n	801594e <_scanf_i+0x8a>
 80159f0:	6822      	ldr	r2, [r4, #0]
 80159f2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80159f6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80159fa:	d1bf      	bne.n	801597c <_scanf_i+0xb8>
 80159fc:	2310      	movs	r3, #16
 80159fe:	6063      	str	r3, [r4, #4]
 8015a00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8015a04:	e7a2      	b.n	801594c <_scanf_i+0x88>
 8015a06:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8015a0a:	6022      	str	r2, [r4, #0]
 8015a0c:	780b      	ldrb	r3, [r1, #0]
 8015a0e:	f805 3b01 	strb.w	r3, [r5], #1
 8015a12:	e7de      	b.n	80159d2 <_scanf_i+0x10e>
 8015a14:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015a18:	4631      	mov	r1, r6
 8015a1a:	4650      	mov	r0, sl
 8015a1c:	4798      	blx	r3
 8015a1e:	2800      	cmp	r0, #0
 8015a20:	d0df      	beq.n	80159e2 <_scanf_i+0x11e>
 8015a22:	6823      	ldr	r3, [r4, #0]
 8015a24:	05d9      	lsls	r1, r3, #23
 8015a26:	d50d      	bpl.n	8015a44 <_scanf_i+0x180>
 8015a28:	42bd      	cmp	r5, r7
 8015a2a:	d909      	bls.n	8015a40 <_scanf_i+0x17c>
 8015a2c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8015a30:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015a34:	4632      	mov	r2, r6
 8015a36:	4650      	mov	r0, sl
 8015a38:	4798      	blx	r3
 8015a3a:	f105 39ff 	add.w	r9, r5, #4294967295
 8015a3e:	464d      	mov	r5, r9
 8015a40:	42bd      	cmp	r5, r7
 8015a42:	d028      	beq.n	8015a96 <_scanf_i+0x1d2>
 8015a44:	6822      	ldr	r2, [r4, #0]
 8015a46:	f012 0210 	ands.w	r2, r2, #16
 8015a4a:	d113      	bne.n	8015a74 <_scanf_i+0x1b0>
 8015a4c:	702a      	strb	r2, [r5, #0]
 8015a4e:	6863      	ldr	r3, [r4, #4]
 8015a50:	9e01      	ldr	r6, [sp, #4]
 8015a52:	4639      	mov	r1, r7
 8015a54:	4650      	mov	r0, sl
 8015a56:	47b0      	blx	r6
 8015a58:	f8d8 3000 	ldr.w	r3, [r8]
 8015a5c:	6821      	ldr	r1, [r4, #0]
 8015a5e:	1d1a      	adds	r2, r3, #4
 8015a60:	f8c8 2000 	str.w	r2, [r8]
 8015a64:	f011 0f20 	tst.w	r1, #32
 8015a68:	681b      	ldr	r3, [r3, #0]
 8015a6a:	d00f      	beq.n	8015a8c <_scanf_i+0x1c8>
 8015a6c:	6018      	str	r0, [r3, #0]
 8015a6e:	68e3      	ldr	r3, [r4, #12]
 8015a70:	3301      	adds	r3, #1
 8015a72:	60e3      	str	r3, [r4, #12]
 8015a74:	1bed      	subs	r5, r5, r7
 8015a76:	44ab      	add	fp, r5
 8015a78:	6925      	ldr	r5, [r4, #16]
 8015a7a:	445d      	add	r5, fp
 8015a7c:	6125      	str	r5, [r4, #16]
 8015a7e:	2000      	movs	r0, #0
 8015a80:	b007      	add	sp, #28
 8015a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a86:	f04f 0b00 	mov.w	fp, #0
 8015a8a:	e7ca      	b.n	8015a22 <_scanf_i+0x15e>
 8015a8c:	07ca      	lsls	r2, r1, #31
 8015a8e:	bf4c      	ite	mi
 8015a90:	8018      	strhmi	r0, [r3, #0]
 8015a92:	6018      	strpl	r0, [r3, #0]
 8015a94:	e7eb      	b.n	8015a6e <_scanf_i+0x1aa>
 8015a96:	2001      	movs	r0, #1
 8015a98:	e7f2      	b.n	8015a80 <_scanf_i+0x1bc>
 8015a9a:	bf00      	nop
 8015a9c:	08018818 	.word	0x08018818
 8015aa0:	08014d75 	.word	0x08014d75
 8015aa4:	08015cd5 	.word	0x08015cd5
 8015aa8:	08018ef9 	.word	0x08018ef9

08015aac <_read_r>:
 8015aac:	b538      	push	{r3, r4, r5, lr}
 8015aae:	4d07      	ldr	r5, [pc, #28]	; (8015acc <_read_r+0x20>)
 8015ab0:	4604      	mov	r4, r0
 8015ab2:	4608      	mov	r0, r1
 8015ab4:	4611      	mov	r1, r2
 8015ab6:	2200      	movs	r2, #0
 8015ab8:	602a      	str	r2, [r5, #0]
 8015aba:	461a      	mov	r2, r3
 8015abc:	f7f0 fa4e 	bl	8005f5c <_read>
 8015ac0:	1c43      	adds	r3, r0, #1
 8015ac2:	d102      	bne.n	8015aca <_read_r+0x1e>
 8015ac4:	682b      	ldr	r3, [r5, #0]
 8015ac6:	b103      	cbz	r3, 8015aca <_read_r+0x1e>
 8015ac8:	6023      	str	r3, [r4, #0]
 8015aca:	bd38      	pop	{r3, r4, r5, pc}
 8015acc:	20009a48 	.word	0x20009a48

08015ad0 <__sccl>:
 8015ad0:	b570      	push	{r4, r5, r6, lr}
 8015ad2:	780b      	ldrb	r3, [r1, #0]
 8015ad4:	4604      	mov	r4, r0
 8015ad6:	2b5e      	cmp	r3, #94	; 0x5e
 8015ad8:	bf0b      	itete	eq
 8015ada:	784b      	ldrbeq	r3, [r1, #1]
 8015adc:	1c48      	addne	r0, r1, #1
 8015ade:	1c88      	addeq	r0, r1, #2
 8015ae0:	2200      	movne	r2, #0
 8015ae2:	bf08      	it	eq
 8015ae4:	2201      	moveq	r2, #1
 8015ae6:	1e61      	subs	r1, r4, #1
 8015ae8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8015aec:	f801 2f01 	strb.w	r2, [r1, #1]!
 8015af0:	42a9      	cmp	r1, r5
 8015af2:	d1fb      	bne.n	8015aec <__sccl+0x1c>
 8015af4:	b90b      	cbnz	r3, 8015afa <__sccl+0x2a>
 8015af6:	3801      	subs	r0, #1
 8015af8:	bd70      	pop	{r4, r5, r6, pc}
 8015afa:	f082 0101 	eor.w	r1, r2, #1
 8015afe:	54e1      	strb	r1, [r4, r3]
 8015b00:	1c42      	adds	r2, r0, #1
 8015b02:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8015b06:	2d2d      	cmp	r5, #45	; 0x2d
 8015b08:	f102 36ff 	add.w	r6, r2, #4294967295
 8015b0c:	4610      	mov	r0, r2
 8015b0e:	d006      	beq.n	8015b1e <__sccl+0x4e>
 8015b10:	2d5d      	cmp	r5, #93	; 0x5d
 8015b12:	d0f1      	beq.n	8015af8 <__sccl+0x28>
 8015b14:	b90d      	cbnz	r5, 8015b1a <__sccl+0x4a>
 8015b16:	4630      	mov	r0, r6
 8015b18:	e7ee      	b.n	8015af8 <__sccl+0x28>
 8015b1a:	462b      	mov	r3, r5
 8015b1c:	e7ef      	b.n	8015afe <__sccl+0x2e>
 8015b1e:	7816      	ldrb	r6, [r2, #0]
 8015b20:	2e5d      	cmp	r6, #93	; 0x5d
 8015b22:	d0fa      	beq.n	8015b1a <__sccl+0x4a>
 8015b24:	42b3      	cmp	r3, r6
 8015b26:	dcf8      	bgt.n	8015b1a <__sccl+0x4a>
 8015b28:	4618      	mov	r0, r3
 8015b2a:	3001      	adds	r0, #1
 8015b2c:	4286      	cmp	r6, r0
 8015b2e:	5421      	strb	r1, [r4, r0]
 8015b30:	dcfb      	bgt.n	8015b2a <__sccl+0x5a>
 8015b32:	43d8      	mvns	r0, r3
 8015b34:	4430      	add	r0, r6
 8015b36:	1c5d      	adds	r5, r3, #1
 8015b38:	42b3      	cmp	r3, r6
 8015b3a:	bfa8      	it	ge
 8015b3c:	2000      	movge	r0, #0
 8015b3e:	182b      	adds	r3, r5, r0
 8015b40:	3202      	adds	r2, #2
 8015b42:	e7de      	b.n	8015b02 <__sccl+0x32>

08015b44 <_raise_r>:
 8015b44:	291f      	cmp	r1, #31
 8015b46:	b538      	push	{r3, r4, r5, lr}
 8015b48:	4604      	mov	r4, r0
 8015b4a:	460d      	mov	r5, r1
 8015b4c:	d904      	bls.n	8015b58 <_raise_r+0x14>
 8015b4e:	2316      	movs	r3, #22
 8015b50:	6003      	str	r3, [r0, #0]
 8015b52:	f04f 30ff 	mov.w	r0, #4294967295
 8015b56:	bd38      	pop	{r3, r4, r5, pc}
 8015b58:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015b5a:	b112      	cbz	r2, 8015b62 <_raise_r+0x1e>
 8015b5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015b60:	b94b      	cbnz	r3, 8015b76 <_raise_r+0x32>
 8015b62:	4620      	mov	r0, r4
 8015b64:	f000 f830 	bl	8015bc8 <_getpid_r>
 8015b68:	462a      	mov	r2, r5
 8015b6a:	4601      	mov	r1, r0
 8015b6c:	4620      	mov	r0, r4
 8015b6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015b72:	f000 b817 	b.w	8015ba4 <_kill_r>
 8015b76:	2b01      	cmp	r3, #1
 8015b78:	d00a      	beq.n	8015b90 <_raise_r+0x4c>
 8015b7a:	1c59      	adds	r1, r3, #1
 8015b7c:	d103      	bne.n	8015b86 <_raise_r+0x42>
 8015b7e:	2316      	movs	r3, #22
 8015b80:	6003      	str	r3, [r0, #0]
 8015b82:	2001      	movs	r0, #1
 8015b84:	e7e7      	b.n	8015b56 <_raise_r+0x12>
 8015b86:	2400      	movs	r4, #0
 8015b88:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015b8c:	4628      	mov	r0, r5
 8015b8e:	4798      	blx	r3
 8015b90:	2000      	movs	r0, #0
 8015b92:	e7e0      	b.n	8015b56 <_raise_r+0x12>

08015b94 <raise>:
 8015b94:	4b02      	ldr	r3, [pc, #8]	; (8015ba0 <raise+0xc>)
 8015b96:	4601      	mov	r1, r0
 8015b98:	6818      	ldr	r0, [r3, #0]
 8015b9a:	f7ff bfd3 	b.w	8015b44 <_raise_r>
 8015b9e:	bf00      	nop
 8015ba0:	20000020 	.word	0x20000020

08015ba4 <_kill_r>:
 8015ba4:	b538      	push	{r3, r4, r5, lr}
 8015ba6:	4d07      	ldr	r5, [pc, #28]	; (8015bc4 <_kill_r+0x20>)
 8015ba8:	2300      	movs	r3, #0
 8015baa:	4604      	mov	r4, r0
 8015bac:	4608      	mov	r0, r1
 8015bae:	4611      	mov	r1, r2
 8015bb0:	602b      	str	r3, [r5, #0]
 8015bb2:	f7f0 f9b9 	bl	8005f28 <_kill>
 8015bb6:	1c43      	adds	r3, r0, #1
 8015bb8:	d102      	bne.n	8015bc0 <_kill_r+0x1c>
 8015bba:	682b      	ldr	r3, [r5, #0]
 8015bbc:	b103      	cbz	r3, 8015bc0 <_kill_r+0x1c>
 8015bbe:	6023      	str	r3, [r4, #0]
 8015bc0:	bd38      	pop	{r3, r4, r5, pc}
 8015bc2:	bf00      	nop
 8015bc4:	20009a48 	.word	0x20009a48

08015bc8 <_getpid_r>:
 8015bc8:	f7f0 b9a6 	b.w	8005f18 <_getpid>

08015bcc <_strtol_l.isra.0>:
 8015bcc:	2b01      	cmp	r3, #1
 8015bce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015bd2:	d001      	beq.n	8015bd8 <_strtol_l.isra.0+0xc>
 8015bd4:	2b24      	cmp	r3, #36	; 0x24
 8015bd6:	d906      	bls.n	8015be6 <_strtol_l.isra.0+0x1a>
 8015bd8:	f7fa fc56 	bl	8010488 <__errno>
 8015bdc:	2316      	movs	r3, #22
 8015bde:	6003      	str	r3, [r0, #0]
 8015be0:	2000      	movs	r0, #0
 8015be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015be6:	4f3a      	ldr	r7, [pc, #232]	; (8015cd0 <_strtol_l.isra.0+0x104>)
 8015be8:	468e      	mov	lr, r1
 8015bea:	4676      	mov	r6, lr
 8015bec:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8015bf0:	5de5      	ldrb	r5, [r4, r7]
 8015bf2:	f015 0508 	ands.w	r5, r5, #8
 8015bf6:	d1f8      	bne.n	8015bea <_strtol_l.isra.0+0x1e>
 8015bf8:	2c2d      	cmp	r4, #45	; 0x2d
 8015bfa:	d134      	bne.n	8015c66 <_strtol_l.isra.0+0x9a>
 8015bfc:	f89e 4000 	ldrb.w	r4, [lr]
 8015c00:	f04f 0801 	mov.w	r8, #1
 8015c04:	f106 0e02 	add.w	lr, r6, #2
 8015c08:	2b00      	cmp	r3, #0
 8015c0a:	d05c      	beq.n	8015cc6 <_strtol_l.isra.0+0xfa>
 8015c0c:	2b10      	cmp	r3, #16
 8015c0e:	d10c      	bne.n	8015c2a <_strtol_l.isra.0+0x5e>
 8015c10:	2c30      	cmp	r4, #48	; 0x30
 8015c12:	d10a      	bne.n	8015c2a <_strtol_l.isra.0+0x5e>
 8015c14:	f89e 4000 	ldrb.w	r4, [lr]
 8015c18:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8015c1c:	2c58      	cmp	r4, #88	; 0x58
 8015c1e:	d14d      	bne.n	8015cbc <_strtol_l.isra.0+0xf0>
 8015c20:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8015c24:	2310      	movs	r3, #16
 8015c26:	f10e 0e02 	add.w	lr, lr, #2
 8015c2a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8015c2e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8015c32:	2600      	movs	r6, #0
 8015c34:	fbbc f9f3 	udiv	r9, ip, r3
 8015c38:	4635      	mov	r5, r6
 8015c3a:	fb03 ca19 	mls	sl, r3, r9, ip
 8015c3e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8015c42:	2f09      	cmp	r7, #9
 8015c44:	d818      	bhi.n	8015c78 <_strtol_l.isra.0+0xac>
 8015c46:	463c      	mov	r4, r7
 8015c48:	42a3      	cmp	r3, r4
 8015c4a:	dd24      	ble.n	8015c96 <_strtol_l.isra.0+0xca>
 8015c4c:	2e00      	cmp	r6, #0
 8015c4e:	db1f      	blt.n	8015c90 <_strtol_l.isra.0+0xc4>
 8015c50:	45a9      	cmp	r9, r5
 8015c52:	d31d      	bcc.n	8015c90 <_strtol_l.isra.0+0xc4>
 8015c54:	d101      	bne.n	8015c5a <_strtol_l.isra.0+0x8e>
 8015c56:	45a2      	cmp	sl, r4
 8015c58:	db1a      	blt.n	8015c90 <_strtol_l.isra.0+0xc4>
 8015c5a:	fb05 4503 	mla	r5, r5, r3, r4
 8015c5e:	2601      	movs	r6, #1
 8015c60:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8015c64:	e7eb      	b.n	8015c3e <_strtol_l.isra.0+0x72>
 8015c66:	2c2b      	cmp	r4, #43	; 0x2b
 8015c68:	bf08      	it	eq
 8015c6a:	f89e 4000 	ldrbeq.w	r4, [lr]
 8015c6e:	46a8      	mov	r8, r5
 8015c70:	bf08      	it	eq
 8015c72:	f106 0e02 	addeq.w	lr, r6, #2
 8015c76:	e7c7      	b.n	8015c08 <_strtol_l.isra.0+0x3c>
 8015c78:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8015c7c:	2f19      	cmp	r7, #25
 8015c7e:	d801      	bhi.n	8015c84 <_strtol_l.isra.0+0xb8>
 8015c80:	3c37      	subs	r4, #55	; 0x37
 8015c82:	e7e1      	b.n	8015c48 <_strtol_l.isra.0+0x7c>
 8015c84:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8015c88:	2f19      	cmp	r7, #25
 8015c8a:	d804      	bhi.n	8015c96 <_strtol_l.isra.0+0xca>
 8015c8c:	3c57      	subs	r4, #87	; 0x57
 8015c8e:	e7db      	b.n	8015c48 <_strtol_l.isra.0+0x7c>
 8015c90:	f04f 36ff 	mov.w	r6, #4294967295
 8015c94:	e7e4      	b.n	8015c60 <_strtol_l.isra.0+0x94>
 8015c96:	2e00      	cmp	r6, #0
 8015c98:	da05      	bge.n	8015ca6 <_strtol_l.isra.0+0xda>
 8015c9a:	2322      	movs	r3, #34	; 0x22
 8015c9c:	6003      	str	r3, [r0, #0]
 8015c9e:	4665      	mov	r5, ip
 8015ca0:	b942      	cbnz	r2, 8015cb4 <_strtol_l.isra.0+0xe8>
 8015ca2:	4628      	mov	r0, r5
 8015ca4:	e79d      	b.n	8015be2 <_strtol_l.isra.0+0x16>
 8015ca6:	f1b8 0f00 	cmp.w	r8, #0
 8015caa:	d000      	beq.n	8015cae <_strtol_l.isra.0+0xe2>
 8015cac:	426d      	negs	r5, r5
 8015cae:	2a00      	cmp	r2, #0
 8015cb0:	d0f7      	beq.n	8015ca2 <_strtol_l.isra.0+0xd6>
 8015cb2:	b10e      	cbz	r6, 8015cb8 <_strtol_l.isra.0+0xec>
 8015cb4:	f10e 31ff 	add.w	r1, lr, #4294967295
 8015cb8:	6011      	str	r1, [r2, #0]
 8015cba:	e7f2      	b.n	8015ca2 <_strtol_l.isra.0+0xd6>
 8015cbc:	2430      	movs	r4, #48	; 0x30
 8015cbe:	2b00      	cmp	r3, #0
 8015cc0:	d1b3      	bne.n	8015c2a <_strtol_l.isra.0+0x5e>
 8015cc2:	2308      	movs	r3, #8
 8015cc4:	e7b1      	b.n	8015c2a <_strtol_l.isra.0+0x5e>
 8015cc6:	2c30      	cmp	r4, #48	; 0x30
 8015cc8:	d0a4      	beq.n	8015c14 <_strtol_l.isra.0+0x48>
 8015cca:	230a      	movs	r3, #10
 8015ccc:	e7ad      	b.n	8015c2a <_strtol_l.isra.0+0x5e>
 8015cce:	bf00      	nop
 8015cd0:	08018d7e 	.word	0x08018d7e

08015cd4 <_strtol_r>:
 8015cd4:	f7ff bf7a 	b.w	8015bcc <_strtol_l.isra.0>

08015cd8 <__submore>:
 8015cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015cdc:	460c      	mov	r4, r1
 8015cde:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8015ce0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015ce4:	4299      	cmp	r1, r3
 8015ce6:	d11d      	bne.n	8015d24 <__submore+0x4c>
 8015ce8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8015cec:	f7fa ffaa 	bl	8010c44 <_malloc_r>
 8015cf0:	b918      	cbnz	r0, 8015cfa <__submore+0x22>
 8015cf2:	f04f 30ff 	mov.w	r0, #4294967295
 8015cf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015cfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015cfe:	63a3      	str	r3, [r4, #56]	; 0x38
 8015d00:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8015d04:	6360      	str	r0, [r4, #52]	; 0x34
 8015d06:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8015d0a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8015d0e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8015d12:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8015d16:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8015d1a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8015d1e:	6020      	str	r0, [r4, #0]
 8015d20:	2000      	movs	r0, #0
 8015d22:	e7e8      	b.n	8015cf6 <__submore+0x1e>
 8015d24:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8015d26:	0077      	lsls	r7, r6, #1
 8015d28:	463a      	mov	r2, r7
 8015d2a:	f7ff fb7b 	bl	8015424 <_realloc_r>
 8015d2e:	4605      	mov	r5, r0
 8015d30:	2800      	cmp	r0, #0
 8015d32:	d0de      	beq.n	8015cf2 <__submore+0x1a>
 8015d34:	eb00 0806 	add.w	r8, r0, r6
 8015d38:	4601      	mov	r1, r0
 8015d3a:	4632      	mov	r2, r6
 8015d3c:	4640      	mov	r0, r8
 8015d3e:	f7fd ff7e 	bl	8013c3e <memcpy>
 8015d42:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8015d46:	f8c4 8000 	str.w	r8, [r4]
 8015d4a:	e7e9      	b.n	8015d20 <__submore+0x48>

08015d4c <_fstat_r>:
 8015d4c:	b538      	push	{r3, r4, r5, lr}
 8015d4e:	4d07      	ldr	r5, [pc, #28]	; (8015d6c <_fstat_r+0x20>)
 8015d50:	2300      	movs	r3, #0
 8015d52:	4604      	mov	r4, r0
 8015d54:	4608      	mov	r0, r1
 8015d56:	4611      	mov	r1, r2
 8015d58:	602b      	str	r3, [r5, #0]
 8015d5a:	f7f0 f944 	bl	8005fe6 <_fstat>
 8015d5e:	1c43      	adds	r3, r0, #1
 8015d60:	d102      	bne.n	8015d68 <_fstat_r+0x1c>
 8015d62:	682b      	ldr	r3, [r5, #0]
 8015d64:	b103      	cbz	r3, 8015d68 <_fstat_r+0x1c>
 8015d66:	6023      	str	r3, [r4, #0]
 8015d68:	bd38      	pop	{r3, r4, r5, pc}
 8015d6a:	bf00      	nop
 8015d6c:	20009a48 	.word	0x20009a48

08015d70 <_isatty_r>:
 8015d70:	b538      	push	{r3, r4, r5, lr}
 8015d72:	4d06      	ldr	r5, [pc, #24]	; (8015d8c <_isatty_r+0x1c>)
 8015d74:	2300      	movs	r3, #0
 8015d76:	4604      	mov	r4, r0
 8015d78:	4608      	mov	r0, r1
 8015d7a:	602b      	str	r3, [r5, #0]
 8015d7c:	f7f0 f943 	bl	8006006 <_isatty>
 8015d80:	1c43      	adds	r3, r0, #1
 8015d82:	d102      	bne.n	8015d8a <_isatty_r+0x1a>
 8015d84:	682b      	ldr	r3, [r5, #0]
 8015d86:	b103      	cbz	r3, 8015d8a <_isatty_r+0x1a>
 8015d88:	6023      	str	r3, [r4, #0]
 8015d8a:	bd38      	pop	{r3, r4, r5, pc}
 8015d8c:	20009a48 	.word	0x20009a48

08015d90 <_malloc_usable_size_r>:
 8015d90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015d94:	1f18      	subs	r0, r3, #4
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	bfbc      	itt	lt
 8015d9a:	580b      	ldrlt	r3, [r1, r0]
 8015d9c:	18c0      	addlt	r0, r0, r3
 8015d9e:	4770      	bx	lr

08015da0 <cos>:
 8015da0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015da2:	ec53 2b10 	vmov	r2, r3, d0
 8015da6:	4824      	ldr	r0, [pc, #144]	; (8015e38 <cos+0x98>)
 8015da8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8015dac:	4281      	cmp	r1, r0
 8015dae:	dc06      	bgt.n	8015dbe <cos+0x1e>
 8015db0:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8015e30 <cos+0x90>
 8015db4:	f000 fc5c 	bl	8016670 <__kernel_cos>
 8015db8:	ec51 0b10 	vmov	r0, r1, d0
 8015dbc:	e007      	b.n	8015dce <cos+0x2e>
 8015dbe:	481f      	ldr	r0, [pc, #124]	; (8015e3c <cos+0x9c>)
 8015dc0:	4281      	cmp	r1, r0
 8015dc2:	dd09      	ble.n	8015dd8 <cos+0x38>
 8015dc4:	ee10 0a10 	vmov	r0, s0
 8015dc8:	4619      	mov	r1, r3
 8015dca:	f7ea fa75 	bl	80002b8 <__aeabi_dsub>
 8015dce:	ec41 0b10 	vmov	d0, r0, r1
 8015dd2:	b005      	add	sp, #20
 8015dd4:	f85d fb04 	ldr.w	pc, [sp], #4
 8015dd8:	4668      	mov	r0, sp
 8015dda:	f000 f989 	bl	80160f0 <__ieee754_rem_pio2>
 8015dde:	f000 0003 	and.w	r0, r0, #3
 8015de2:	2801      	cmp	r0, #1
 8015de4:	d007      	beq.n	8015df6 <cos+0x56>
 8015de6:	2802      	cmp	r0, #2
 8015de8:	d012      	beq.n	8015e10 <cos+0x70>
 8015dea:	b9c0      	cbnz	r0, 8015e1e <cos+0x7e>
 8015dec:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015df0:	ed9d 0b00 	vldr	d0, [sp]
 8015df4:	e7de      	b.n	8015db4 <cos+0x14>
 8015df6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015dfa:	ed9d 0b00 	vldr	d0, [sp]
 8015dfe:	f001 f83f 	bl	8016e80 <__kernel_sin>
 8015e02:	ec53 2b10 	vmov	r2, r3, d0
 8015e06:	ee10 0a10 	vmov	r0, s0
 8015e0a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8015e0e:	e7de      	b.n	8015dce <cos+0x2e>
 8015e10:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015e14:	ed9d 0b00 	vldr	d0, [sp]
 8015e18:	f000 fc2a 	bl	8016670 <__kernel_cos>
 8015e1c:	e7f1      	b.n	8015e02 <cos+0x62>
 8015e1e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015e22:	ed9d 0b00 	vldr	d0, [sp]
 8015e26:	2001      	movs	r0, #1
 8015e28:	f001 f82a 	bl	8016e80 <__kernel_sin>
 8015e2c:	e7c4      	b.n	8015db8 <cos+0x18>
 8015e2e:	bf00      	nop
	...
 8015e38:	3fe921fb 	.word	0x3fe921fb
 8015e3c:	7fefffff 	.word	0x7fefffff

08015e40 <sin>:
 8015e40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015e42:	ec53 2b10 	vmov	r2, r3, d0
 8015e46:	4826      	ldr	r0, [pc, #152]	; (8015ee0 <sin+0xa0>)
 8015e48:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8015e4c:	4281      	cmp	r1, r0
 8015e4e:	dc07      	bgt.n	8015e60 <sin+0x20>
 8015e50:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8015ed8 <sin+0x98>
 8015e54:	2000      	movs	r0, #0
 8015e56:	f001 f813 	bl	8016e80 <__kernel_sin>
 8015e5a:	ec51 0b10 	vmov	r0, r1, d0
 8015e5e:	e007      	b.n	8015e70 <sin+0x30>
 8015e60:	4820      	ldr	r0, [pc, #128]	; (8015ee4 <sin+0xa4>)
 8015e62:	4281      	cmp	r1, r0
 8015e64:	dd09      	ble.n	8015e7a <sin+0x3a>
 8015e66:	ee10 0a10 	vmov	r0, s0
 8015e6a:	4619      	mov	r1, r3
 8015e6c:	f7ea fa24 	bl	80002b8 <__aeabi_dsub>
 8015e70:	ec41 0b10 	vmov	d0, r0, r1
 8015e74:	b005      	add	sp, #20
 8015e76:	f85d fb04 	ldr.w	pc, [sp], #4
 8015e7a:	4668      	mov	r0, sp
 8015e7c:	f000 f938 	bl	80160f0 <__ieee754_rem_pio2>
 8015e80:	f000 0003 	and.w	r0, r0, #3
 8015e84:	2801      	cmp	r0, #1
 8015e86:	d008      	beq.n	8015e9a <sin+0x5a>
 8015e88:	2802      	cmp	r0, #2
 8015e8a:	d00d      	beq.n	8015ea8 <sin+0x68>
 8015e8c:	b9d0      	cbnz	r0, 8015ec4 <sin+0x84>
 8015e8e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015e92:	ed9d 0b00 	vldr	d0, [sp]
 8015e96:	2001      	movs	r0, #1
 8015e98:	e7dd      	b.n	8015e56 <sin+0x16>
 8015e9a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015e9e:	ed9d 0b00 	vldr	d0, [sp]
 8015ea2:	f000 fbe5 	bl	8016670 <__kernel_cos>
 8015ea6:	e7d8      	b.n	8015e5a <sin+0x1a>
 8015ea8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015eac:	ed9d 0b00 	vldr	d0, [sp]
 8015eb0:	2001      	movs	r0, #1
 8015eb2:	f000 ffe5 	bl	8016e80 <__kernel_sin>
 8015eb6:	ec53 2b10 	vmov	r2, r3, d0
 8015eba:	ee10 0a10 	vmov	r0, s0
 8015ebe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8015ec2:	e7d5      	b.n	8015e70 <sin+0x30>
 8015ec4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015ec8:	ed9d 0b00 	vldr	d0, [sp]
 8015ecc:	f000 fbd0 	bl	8016670 <__kernel_cos>
 8015ed0:	e7f1      	b.n	8015eb6 <sin+0x76>
 8015ed2:	bf00      	nop
 8015ed4:	f3af 8000 	nop.w
	...
 8015ee0:	3fe921fb 	.word	0x3fe921fb
 8015ee4:	7fefffff 	.word	0x7fefffff

08015ee8 <atan2>:
 8015ee8:	f000 b836 	b.w	8015f58 <__ieee754_atan2>

08015eec <sqrt>:
 8015eec:	b538      	push	{r3, r4, r5, lr}
 8015eee:	ed2d 8b02 	vpush	{d8}
 8015ef2:	ec55 4b10 	vmov	r4, r5, d0
 8015ef6:	f000 fb05 	bl	8016504 <__ieee754_sqrt>
 8015efa:	4b15      	ldr	r3, [pc, #84]	; (8015f50 <sqrt+0x64>)
 8015efc:	eeb0 8a40 	vmov.f32	s16, s0
 8015f00:	eef0 8a60 	vmov.f32	s17, s1
 8015f04:	f993 3000 	ldrsb.w	r3, [r3]
 8015f08:	3301      	adds	r3, #1
 8015f0a:	d019      	beq.n	8015f40 <sqrt+0x54>
 8015f0c:	4622      	mov	r2, r4
 8015f0e:	462b      	mov	r3, r5
 8015f10:	4620      	mov	r0, r4
 8015f12:	4629      	mov	r1, r5
 8015f14:	f7ea fe22 	bl	8000b5c <__aeabi_dcmpun>
 8015f18:	b990      	cbnz	r0, 8015f40 <sqrt+0x54>
 8015f1a:	2200      	movs	r2, #0
 8015f1c:	2300      	movs	r3, #0
 8015f1e:	4620      	mov	r0, r4
 8015f20:	4629      	mov	r1, r5
 8015f22:	f7ea fdf3 	bl	8000b0c <__aeabi_dcmplt>
 8015f26:	b158      	cbz	r0, 8015f40 <sqrt+0x54>
 8015f28:	f7fa faae 	bl	8010488 <__errno>
 8015f2c:	2321      	movs	r3, #33	; 0x21
 8015f2e:	6003      	str	r3, [r0, #0]
 8015f30:	2200      	movs	r2, #0
 8015f32:	2300      	movs	r3, #0
 8015f34:	4610      	mov	r0, r2
 8015f36:	4619      	mov	r1, r3
 8015f38:	f7ea fca0 	bl	800087c <__aeabi_ddiv>
 8015f3c:	ec41 0b18 	vmov	d8, r0, r1
 8015f40:	eeb0 0a48 	vmov.f32	s0, s16
 8015f44:	eef0 0a68 	vmov.f32	s1, s17
 8015f48:	ecbd 8b02 	vpop	{d8}
 8015f4c:	bd38      	pop	{r3, r4, r5, pc}
 8015f4e:	bf00      	nop
 8015f50:	20000258 	.word	0x20000258
 8015f54:	00000000 	.word	0x00000000

08015f58 <__ieee754_atan2>:
 8015f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015f5c:	ec57 6b11 	vmov	r6, r7, d1
 8015f60:	4273      	negs	r3, r6
 8015f62:	f8df e184 	ldr.w	lr, [pc, #388]	; 80160e8 <__ieee754_atan2+0x190>
 8015f66:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8015f6a:	4333      	orrs	r3, r6
 8015f6c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8015f70:	4573      	cmp	r3, lr
 8015f72:	ec51 0b10 	vmov	r0, r1, d0
 8015f76:	ee11 8a10 	vmov	r8, s2
 8015f7a:	d80a      	bhi.n	8015f92 <__ieee754_atan2+0x3a>
 8015f7c:	4244      	negs	r4, r0
 8015f7e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015f82:	4304      	orrs	r4, r0
 8015f84:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8015f88:	4574      	cmp	r4, lr
 8015f8a:	ee10 9a10 	vmov	r9, s0
 8015f8e:	468c      	mov	ip, r1
 8015f90:	d907      	bls.n	8015fa2 <__ieee754_atan2+0x4a>
 8015f92:	4632      	mov	r2, r6
 8015f94:	463b      	mov	r3, r7
 8015f96:	f7ea f991 	bl	80002bc <__adddf3>
 8015f9a:	ec41 0b10 	vmov	d0, r0, r1
 8015f9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015fa2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8015fa6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8015faa:	4334      	orrs	r4, r6
 8015fac:	d103      	bne.n	8015fb6 <__ieee754_atan2+0x5e>
 8015fae:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015fb2:	f001 b825 	b.w	8017000 <atan>
 8015fb6:	17bc      	asrs	r4, r7, #30
 8015fb8:	f004 0402 	and.w	r4, r4, #2
 8015fbc:	ea53 0909 	orrs.w	r9, r3, r9
 8015fc0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8015fc4:	d107      	bne.n	8015fd6 <__ieee754_atan2+0x7e>
 8015fc6:	2c02      	cmp	r4, #2
 8015fc8:	d060      	beq.n	801608c <__ieee754_atan2+0x134>
 8015fca:	2c03      	cmp	r4, #3
 8015fcc:	d1e5      	bne.n	8015f9a <__ieee754_atan2+0x42>
 8015fce:	a142      	add	r1, pc, #264	; (adr r1, 80160d8 <__ieee754_atan2+0x180>)
 8015fd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015fd4:	e7e1      	b.n	8015f9a <__ieee754_atan2+0x42>
 8015fd6:	ea52 0808 	orrs.w	r8, r2, r8
 8015fda:	d106      	bne.n	8015fea <__ieee754_atan2+0x92>
 8015fdc:	f1bc 0f00 	cmp.w	ip, #0
 8015fe0:	da5f      	bge.n	80160a2 <__ieee754_atan2+0x14a>
 8015fe2:	a13f      	add	r1, pc, #252	; (adr r1, 80160e0 <__ieee754_atan2+0x188>)
 8015fe4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015fe8:	e7d7      	b.n	8015f9a <__ieee754_atan2+0x42>
 8015fea:	4572      	cmp	r2, lr
 8015fec:	d10f      	bne.n	801600e <__ieee754_atan2+0xb6>
 8015fee:	4293      	cmp	r3, r2
 8015ff0:	f104 34ff 	add.w	r4, r4, #4294967295
 8015ff4:	d107      	bne.n	8016006 <__ieee754_atan2+0xae>
 8015ff6:	2c02      	cmp	r4, #2
 8015ff8:	d84c      	bhi.n	8016094 <__ieee754_atan2+0x13c>
 8015ffa:	4b35      	ldr	r3, [pc, #212]	; (80160d0 <__ieee754_atan2+0x178>)
 8015ffc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8016000:	e9d4 0100 	ldrd	r0, r1, [r4]
 8016004:	e7c9      	b.n	8015f9a <__ieee754_atan2+0x42>
 8016006:	2c02      	cmp	r4, #2
 8016008:	d848      	bhi.n	801609c <__ieee754_atan2+0x144>
 801600a:	4b32      	ldr	r3, [pc, #200]	; (80160d4 <__ieee754_atan2+0x17c>)
 801600c:	e7f6      	b.n	8015ffc <__ieee754_atan2+0xa4>
 801600e:	4573      	cmp	r3, lr
 8016010:	d0e4      	beq.n	8015fdc <__ieee754_atan2+0x84>
 8016012:	1a9b      	subs	r3, r3, r2
 8016014:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8016018:	ea4f 5223 	mov.w	r2, r3, asr #20
 801601c:	da1e      	bge.n	801605c <__ieee754_atan2+0x104>
 801601e:	2f00      	cmp	r7, #0
 8016020:	da01      	bge.n	8016026 <__ieee754_atan2+0xce>
 8016022:	323c      	adds	r2, #60	; 0x3c
 8016024:	db1e      	blt.n	8016064 <__ieee754_atan2+0x10c>
 8016026:	4632      	mov	r2, r6
 8016028:	463b      	mov	r3, r7
 801602a:	f7ea fc27 	bl	800087c <__aeabi_ddiv>
 801602e:	ec41 0b10 	vmov	d0, r0, r1
 8016032:	f001 f985 	bl	8017340 <fabs>
 8016036:	f000 ffe3 	bl	8017000 <atan>
 801603a:	ec51 0b10 	vmov	r0, r1, d0
 801603e:	2c01      	cmp	r4, #1
 8016040:	d013      	beq.n	801606a <__ieee754_atan2+0x112>
 8016042:	2c02      	cmp	r4, #2
 8016044:	d015      	beq.n	8016072 <__ieee754_atan2+0x11a>
 8016046:	2c00      	cmp	r4, #0
 8016048:	d0a7      	beq.n	8015f9a <__ieee754_atan2+0x42>
 801604a:	a319      	add	r3, pc, #100	; (adr r3, 80160b0 <__ieee754_atan2+0x158>)
 801604c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016050:	f7ea f932 	bl	80002b8 <__aeabi_dsub>
 8016054:	a318      	add	r3, pc, #96	; (adr r3, 80160b8 <__ieee754_atan2+0x160>)
 8016056:	e9d3 2300 	ldrd	r2, r3, [r3]
 801605a:	e014      	b.n	8016086 <__ieee754_atan2+0x12e>
 801605c:	a118      	add	r1, pc, #96	; (adr r1, 80160c0 <__ieee754_atan2+0x168>)
 801605e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016062:	e7ec      	b.n	801603e <__ieee754_atan2+0xe6>
 8016064:	2000      	movs	r0, #0
 8016066:	2100      	movs	r1, #0
 8016068:	e7e9      	b.n	801603e <__ieee754_atan2+0xe6>
 801606a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801606e:	4619      	mov	r1, r3
 8016070:	e793      	b.n	8015f9a <__ieee754_atan2+0x42>
 8016072:	a30f      	add	r3, pc, #60	; (adr r3, 80160b0 <__ieee754_atan2+0x158>)
 8016074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016078:	f7ea f91e 	bl	80002b8 <__aeabi_dsub>
 801607c:	4602      	mov	r2, r0
 801607e:	460b      	mov	r3, r1
 8016080:	a10d      	add	r1, pc, #52	; (adr r1, 80160b8 <__ieee754_atan2+0x160>)
 8016082:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016086:	f7ea f917 	bl	80002b8 <__aeabi_dsub>
 801608a:	e786      	b.n	8015f9a <__ieee754_atan2+0x42>
 801608c:	a10a      	add	r1, pc, #40	; (adr r1, 80160b8 <__ieee754_atan2+0x160>)
 801608e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016092:	e782      	b.n	8015f9a <__ieee754_atan2+0x42>
 8016094:	a10c      	add	r1, pc, #48	; (adr r1, 80160c8 <__ieee754_atan2+0x170>)
 8016096:	e9d1 0100 	ldrd	r0, r1, [r1]
 801609a:	e77e      	b.n	8015f9a <__ieee754_atan2+0x42>
 801609c:	2000      	movs	r0, #0
 801609e:	2100      	movs	r1, #0
 80160a0:	e77b      	b.n	8015f9a <__ieee754_atan2+0x42>
 80160a2:	a107      	add	r1, pc, #28	; (adr r1, 80160c0 <__ieee754_atan2+0x168>)
 80160a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80160a8:	e777      	b.n	8015f9a <__ieee754_atan2+0x42>
 80160aa:	bf00      	nop
 80160ac:	f3af 8000 	nop.w
 80160b0:	33145c07 	.word	0x33145c07
 80160b4:	3ca1a626 	.word	0x3ca1a626
 80160b8:	54442d18 	.word	0x54442d18
 80160bc:	400921fb 	.word	0x400921fb
 80160c0:	54442d18 	.word	0x54442d18
 80160c4:	3ff921fb 	.word	0x3ff921fb
 80160c8:	54442d18 	.word	0x54442d18
 80160cc:	3fe921fb 	.word	0x3fe921fb
 80160d0:	08018f00 	.word	0x08018f00
 80160d4:	08018f18 	.word	0x08018f18
 80160d8:	54442d18 	.word	0x54442d18
 80160dc:	c00921fb 	.word	0xc00921fb
 80160e0:	54442d18 	.word	0x54442d18
 80160e4:	bff921fb 	.word	0xbff921fb
 80160e8:	7ff00000 	.word	0x7ff00000
 80160ec:	00000000 	.word	0x00000000

080160f0 <__ieee754_rem_pio2>:
 80160f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160f4:	ed2d 8b02 	vpush	{d8}
 80160f8:	ec55 4b10 	vmov	r4, r5, d0
 80160fc:	4bca      	ldr	r3, [pc, #808]	; (8016428 <__ieee754_rem_pio2+0x338>)
 80160fe:	b08b      	sub	sp, #44	; 0x2c
 8016100:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8016104:	4598      	cmp	r8, r3
 8016106:	4682      	mov	sl, r0
 8016108:	9502      	str	r5, [sp, #8]
 801610a:	dc08      	bgt.n	801611e <__ieee754_rem_pio2+0x2e>
 801610c:	2200      	movs	r2, #0
 801610e:	2300      	movs	r3, #0
 8016110:	ed80 0b00 	vstr	d0, [r0]
 8016114:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8016118:	f04f 0b00 	mov.w	fp, #0
 801611c:	e028      	b.n	8016170 <__ieee754_rem_pio2+0x80>
 801611e:	4bc3      	ldr	r3, [pc, #780]	; (801642c <__ieee754_rem_pio2+0x33c>)
 8016120:	4598      	cmp	r8, r3
 8016122:	dc78      	bgt.n	8016216 <__ieee754_rem_pio2+0x126>
 8016124:	9b02      	ldr	r3, [sp, #8]
 8016126:	4ec2      	ldr	r6, [pc, #776]	; (8016430 <__ieee754_rem_pio2+0x340>)
 8016128:	2b00      	cmp	r3, #0
 801612a:	ee10 0a10 	vmov	r0, s0
 801612e:	a3b0      	add	r3, pc, #704	; (adr r3, 80163f0 <__ieee754_rem_pio2+0x300>)
 8016130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016134:	4629      	mov	r1, r5
 8016136:	dd39      	ble.n	80161ac <__ieee754_rem_pio2+0xbc>
 8016138:	f7ea f8be 	bl	80002b8 <__aeabi_dsub>
 801613c:	45b0      	cmp	r8, r6
 801613e:	4604      	mov	r4, r0
 8016140:	460d      	mov	r5, r1
 8016142:	d01b      	beq.n	801617c <__ieee754_rem_pio2+0x8c>
 8016144:	a3ac      	add	r3, pc, #688	; (adr r3, 80163f8 <__ieee754_rem_pio2+0x308>)
 8016146:	e9d3 2300 	ldrd	r2, r3, [r3]
 801614a:	f7ea f8b5 	bl	80002b8 <__aeabi_dsub>
 801614e:	4602      	mov	r2, r0
 8016150:	460b      	mov	r3, r1
 8016152:	e9ca 2300 	strd	r2, r3, [sl]
 8016156:	4620      	mov	r0, r4
 8016158:	4629      	mov	r1, r5
 801615a:	f7ea f8ad 	bl	80002b8 <__aeabi_dsub>
 801615e:	a3a6      	add	r3, pc, #664	; (adr r3, 80163f8 <__ieee754_rem_pio2+0x308>)
 8016160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016164:	f7ea f8a8 	bl	80002b8 <__aeabi_dsub>
 8016168:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801616c:	f04f 0b01 	mov.w	fp, #1
 8016170:	4658      	mov	r0, fp
 8016172:	b00b      	add	sp, #44	; 0x2c
 8016174:	ecbd 8b02 	vpop	{d8}
 8016178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801617c:	a3a0      	add	r3, pc, #640	; (adr r3, 8016400 <__ieee754_rem_pio2+0x310>)
 801617e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016182:	f7ea f899 	bl	80002b8 <__aeabi_dsub>
 8016186:	a3a0      	add	r3, pc, #640	; (adr r3, 8016408 <__ieee754_rem_pio2+0x318>)
 8016188:	e9d3 2300 	ldrd	r2, r3, [r3]
 801618c:	4604      	mov	r4, r0
 801618e:	460d      	mov	r5, r1
 8016190:	f7ea f892 	bl	80002b8 <__aeabi_dsub>
 8016194:	4602      	mov	r2, r0
 8016196:	460b      	mov	r3, r1
 8016198:	e9ca 2300 	strd	r2, r3, [sl]
 801619c:	4620      	mov	r0, r4
 801619e:	4629      	mov	r1, r5
 80161a0:	f7ea f88a 	bl	80002b8 <__aeabi_dsub>
 80161a4:	a398      	add	r3, pc, #608	; (adr r3, 8016408 <__ieee754_rem_pio2+0x318>)
 80161a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161aa:	e7db      	b.n	8016164 <__ieee754_rem_pio2+0x74>
 80161ac:	f7ea f886 	bl	80002bc <__adddf3>
 80161b0:	45b0      	cmp	r8, r6
 80161b2:	4604      	mov	r4, r0
 80161b4:	460d      	mov	r5, r1
 80161b6:	d016      	beq.n	80161e6 <__ieee754_rem_pio2+0xf6>
 80161b8:	a38f      	add	r3, pc, #572	; (adr r3, 80163f8 <__ieee754_rem_pio2+0x308>)
 80161ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161be:	f7ea f87d 	bl	80002bc <__adddf3>
 80161c2:	4602      	mov	r2, r0
 80161c4:	460b      	mov	r3, r1
 80161c6:	e9ca 2300 	strd	r2, r3, [sl]
 80161ca:	4620      	mov	r0, r4
 80161cc:	4629      	mov	r1, r5
 80161ce:	f7ea f873 	bl	80002b8 <__aeabi_dsub>
 80161d2:	a389      	add	r3, pc, #548	; (adr r3, 80163f8 <__ieee754_rem_pio2+0x308>)
 80161d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161d8:	f7ea f870 	bl	80002bc <__adddf3>
 80161dc:	f04f 3bff 	mov.w	fp, #4294967295
 80161e0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80161e4:	e7c4      	b.n	8016170 <__ieee754_rem_pio2+0x80>
 80161e6:	a386      	add	r3, pc, #536	; (adr r3, 8016400 <__ieee754_rem_pio2+0x310>)
 80161e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161ec:	f7ea f866 	bl	80002bc <__adddf3>
 80161f0:	a385      	add	r3, pc, #532	; (adr r3, 8016408 <__ieee754_rem_pio2+0x318>)
 80161f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161f6:	4604      	mov	r4, r0
 80161f8:	460d      	mov	r5, r1
 80161fa:	f7ea f85f 	bl	80002bc <__adddf3>
 80161fe:	4602      	mov	r2, r0
 8016200:	460b      	mov	r3, r1
 8016202:	e9ca 2300 	strd	r2, r3, [sl]
 8016206:	4620      	mov	r0, r4
 8016208:	4629      	mov	r1, r5
 801620a:	f7ea f855 	bl	80002b8 <__aeabi_dsub>
 801620e:	a37e      	add	r3, pc, #504	; (adr r3, 8016408 <__ieee754_rem_pio2+0x318>)
 8016210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016214:	e7e0      	b.n	80161d8 <__ieee754_rem_pio2+0xe8>
 8016216:	4b87      	ldr	r3, [pc, #540]	; (8016434 <__ieee754_rem_pio2+0x344>)
 8016218:	4598      	cmp	r8, r3
 801621a:	f300 80d9 	bgt.w	80163d0 <__ieee754_rem_pio2+0x2e0>
 801621e:	f001 f88f 	bl	8017340 <fabs>
 8016222:	ec55 4b10 	vmov	r4, r5, d0
 8016226:	ee10 0a10 	vmov	r0, s0
 801622a:	a379      	add	r3, pc, #484	; (adr r3, 8016410 <__ieee754_rem_pio2+0x320>)
 801622c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016230:	4629      	mov	r1, r5
 8016232:	f7ea f9f9 	bl	8000628 <__aeabi_dmul>
 8016236:	4b80      	ldr	r3, [pc, #512]	; (8016438 <__ieee754_rem_pio2+0x348>)
 8016238:	2200      	movs	r2, #0
 801623a:	f7ea f83f 	bl	80002bc <__adddf3>
 801623e:	f7ea fca3 	bl	8000b88 <__aeabi_d2iz>
 8016242:	4683      	mov	fp, r0
 8016244:	f7ea f986 	bl	8000554 <__aeabi_i2d>
 8016248:	4602      	mov	r2, r0
 801624a:	460b      	mov	r3, r1
 801624c:	ec43 2b18 	vmov	d8, r2, r3
 8016250:	a367      	add	r3, pc, #412	; (adr r3, 80163f0 <__ieee754_rem_pio2+0x300>)
 8016252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016256:	f7ea f9e7 	bl	8000628 <__aeabi_dmul>
 801625a:	4602      	mov	r2, r0
 801625c:	460b      	mov	r3, r1
 801625e:	4620      	mov	r0, r4
 8016260:	4629      	mov	r1, r5
 8016262:	f7ea f829 	bl	80002b8 <__aeabi_dsub>
 8016266:	a364      	add	r3, pc, #400	; (adr r3, 80163f8 <__ieee754_rem_pio2+0x308>)
 8016268:	e9d3 2300 	ldrd	r2, r3, [r3]
 801626c:	4606      	mov	r6, r0
 801626e:	460f      	mov	r7, r1
 8016270:	ec51 0b18 	vmov	r0, r1, d8
 8016274:	f7ea f9d8 	bl	8000628 <__aeabi_dmul>
 8016278:	f1bb 0f1f 	cmp.w	fp, #31
 801627c:	4604      	mov	r4, r0
 801627e:	460d      	mov	r5, r1
 8016280:	dc0d      	bgt.n	801629e <__ieee754_rem_pio2+0x1ae>
 8016282:	4b6e      	ldr	r3, [pc, #440]	; (801643c <__ieee754_rem_pio2+0x34c>)
 8016284:	f10b 32ff 	add.w	r2, fp, #4294967295
 8016288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801628c:	4543      	cmp	r3, r8
 801628e:	d006      	beq.n	801629e <__ieee754_rem_pio2+0x1ae>
 8016290:	4622      	mov	r2, r4
 8016292:	462b      	mov	r3, r5
 8016294:	4630      	mov	r0, r6
 8016296:	4639      	mov	r1, r7
 8016298:	f7ea f80e 	bl	80002b8 <__aeabi_dsub>
 801629c:	e00f      	b.n	80162be <__ieee754_rem_pio2+0x1ce>
 801629e:	462b      	mov	r3, r5
 80162a0:	4622      	mov	r2, r4
 80162a2:	4630      	mov	r0, r6
 80162a4:	4639      	mov	r1, r7
 80162a6:	f7ea f807 	bl	80002b8 <__aeabi_dsub>
 80162aa:	ea4f 5328 	mov.w	r3, r8, asr #20
 80162ae:	9303      	str	r3, [sp, #12]
 80162b0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80162b4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80162b8:	f1b8 0f10 	cmp.w	r8, #16
 80162bc:	dc02      	bgt.n	80162c4 <__ieee754_rem_pio2+0x1d4>
 80162be:	e9ca 0100 	strd	r0, r1, [sl]
 80162c2:	e039      	b.n	8016338 <__ieee754_rem_pio2+0x248>
 80162c4:	a34e      	add	r3, pc, #312	; (adr r3, 8016400 <__ieee754_rem_pio2+0x310>)
 80162c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162ca:	ec51 0b18 	vmov	r0, r1, d8
 80162ce:	f7ea f9ab 	bl	8000628 <__aeabi_dmul>
 80162d2:	4604      	mov	r4, r0
 80162d4:	460d      	mov	r5, r1
 80162d6:	4602      	mov	r2, r0
 80162d8:	460b      	mov	r3, r1
 80162da:	4630      	mov	r0, r6
 80162dc:	4639      	mov	r1, r7
 80162de:	f7e9 ffeb 	bl	80002b8 <__aeabi_dsub>
 80162e2:	4602      	mov	r2, r0
 80162e4:	460b      	mov	r3, r1
 80162e6:	4680      	mov	r8, r0
 80162e8:	4689      	mov	r9, r1
 80162ea:	4630      	mov	r0, r6
 80162ec:	4639      	mov	r1, r7
 80162ee:	f7e9 ffe3 	bl	80002b8 <__aeabi_dsub>
 80162f2:	4622      	mov	r2, r4
 80162f4:	462b      	mov	r3, r5
 80162f6:	f7e9 ffdf 	bl	80002b8 <__aeabi_dsub>
 80162fa:	a343      	add	r3, pc, #268	; (adr r3, 8016408 <__ieee754_rem_pio2+0x318>)
 80162fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016300:	4604      	mov	r4, r0
 8016302:	460d      	mov	r5, r1
 8016304:	ec51 0b18 	vmov	r0, r1, d8
 8016308:	f7ea f98e 	bl	8000628 <__aeabi_dmul>
 801630c:	4622      	mov	r2, r4
 801630e:	462b      	mov	r3, r5
 8016310:	f7e9 ffd2 	bl	80002b8 <__aeabi_dsub>
 8016314:	4602      	mov	r2, r0
 8016316:	460b      	mov	r3, r1
 8016318:	4604      	mov	r4, r0
 801631a:	460d      	mov	r5, r1
 801631c:	4640      	mov	r0, r8
 801631e:	4649      	mov	r1, r9
 8016320:	f7e9 ffca 	bl	80002b8 <__aeabi_dsub>
 8016324:	9a03      	ldr	r2, [sp, #12]
 8016326:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801632a:	1ad3      	subs	r3, r2, r3
 801632c:	2b31      	cmp	r3, #49	; 0x31
 801632e:	dc24      	bgt.n	801637a <__ieee754_rem_pio2+0x28a>
 8016330:	e9ca 0100 	strd	r0, r1, [sl]
 8016334:	4646      	mov	r6, r8
 8016336:	464f      	mov	r7, r9
 8016338:	e9da 8900 	ldrd	r8, r9, [sl]
 801633c:	4630      	mov	r0, r6
 801633e:	4642      	mov	r2, r8
 8016340:	464b      	mov	r3, r9
 8016342:	4639      	mov	r1, r7
 8016344:	f7e9 ffb8 	bl	80002b8 <__aeabi_dsub>
 8016348:	462b      	mov	r3, r5
 801634a:	4622      	mov	r2, r4
 801634c:	f7e9 ffb4 	bl	80002b8 <__aeabi_dsub>
 8016350:	9b02      	ldr	r3, [sp, #8]
 8016352:	2b00      	cmp	r3, #0
 8016354:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8016358:	f6bf af0a 	bge.w	8016170 <__ieee754_rem_pio2+0x80>
 801635c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8016360:	f8ca 3004 	str.w	r3, [sl, #4]
 8016364:	f8ca 8000 	str.w	r8, [sl]
 8016368:	f8ca 0008 	str.w	r0, [sl, #8]
 801636c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016370:	f8ca 300c 	str.w	r3, [sl, #12]
 8016374:	f1cb 0b00 	rsb	fp, fp, #0
 8016378:	e6fa      	b.n	8016170 <__ieee754_rem_pio2+0x80>
 801637a:	a327      	add	r3, pc, #156	; (adr r3, 8016418 <__ieee754_rem_pio2+0x328>)
 801637c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016380:	ec51 0b18 	vmov	r0, r1, d8
 8016384:	f7ea f950 	bl	8000628 <__aeabi_dmul>
 8016388:	4604      	mov	r4, r0
 801638a:	460d      	mov	r5, r1
 801638c:	4602      	mov	r2, r0
 801638e:	460b      	mov	r3, r1
 8016390:	4640      	mov	r0, r8
 8016392:	4649      	mov	r1, r9
 8016394:	f7e9 ff90 	bl	80002b8 <__aeabi_dsub>
 8016398:	4602      	mov	r2, r0
 801639a:	460b      	mov	r3, r1
 801639c:	4606      	mov	r6, r0
 801639e:	460f      	mov	r7, r1
 80163a0:	4640      	mov	r0, r8
 80163a2:	4649      	mov	r1, r9
 80163a4:	f7e9 ff88 	bl	80002b8 <__aeabi_dsub>
 80163a8:	4622      	mov	r2, r4
 80163aa:	462b      	mov	r3, r5
 80163ac:	f7e9 ff84 	bl	80002b8 <__aeabi_dsub>
 80163b0:	a31b      	add	r3, pc, #108	; (adr r3, 8016420 <__ieee754_rem_pio2+0x330>)
 80163b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163b6:	4604      	mov	r4, r0
 80163b8:	460d      	mov	r5, r1
 80163ba:	ec51 0b18 	vmov	r0, r1, d8
 80163be:	f7ea f933 	bl	8000628 <__aeabi_dmul>
 80163c2:	4622      	mov	r2, r4
 80163c4:	462b      	mov	r3, r5
 80163c6:	f7e9 ff77 	bl	80002b8 <__aeabi_dsub>
 80163ca:	4604      	mov	r4, r0
 80163cc:	460d      	mov	r5, r1
 80163ce:	e75f      	b.n	8016290 <__ieee754_rem_pio2+0x1a0>
 80163d0:	4b1b      	ldr	r3, [pc, #108]	; (8016440 <__ieee754_rem_pio2+0x350>)
 80163d2:	4598      	cmp	r8, r3
 80163d4:	dd36      	ble.n	8016444 <__ieee754_rem_pio2+0x354>
 80163d6:	ee10 2a10 	vmov	r2, s0
 80163da:	462b      	mov	r3, r5
 80163dc:	4620      	mov	r0, r4
 80163de:	4629      	mov	r1, r5
 80163e0:	f7e9 ff6a 	bl	80002b8 <__aeabi_dsub>
 80163e4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80163e8:	e9ca 0100 	strd	r0, r1, [sl]
 80163ec:	e694      	b.n	8016118 <__ieee754_rem_pio2+0x28>
 80163ee:	bf00      	nop
 80163f0:	54400000 	.word	0x54400000
 80163f4:	3ff921fb 	.word	0x3ff921fb
 80163f8:	1a626331 	.word	0x1a626331
 80163fc:	3dd0b461 	.word	0x3dd0b461
 8016400:	1a600000 	.word	0x1a600000
 8016404:	3dd0b461 	.word	0x3dd0b461
 8016408:	2e037073 	.word	0x2e037073
 801640c:	3ba3198a 	.word	0x3ba3198a
 8016410:	6dc9c883 	.word	0x6dc9c883
 8016414:	3fe45f30 	.word	0x3fe45f30
 8016418:	2e000000 	.word	0x2e000000
 801641c:	3ba3198a 	.word	0x3ba3198a
 8016420:	252049c1 	.word	0x252049c1
 8016424:	397b839a 	.word	0x397b839a
 8016428:	3fe921fb 	.word	0x3fe921fb
 801642c:	4002d97b 	.word	0x4002d97b
 8016430:	3ff921fb 	.word	0x3ff921fb
 8016434:	413921fb 	.word	0x413921fb
 8016438:	3fe00000 	.word	0x3fe00000
 801643c:	08018f30 	.word	0x08018f30
 8016440:	7fefffff 	.word	0x7fefffff
 8016444:	ea4f 5428 	mov.w	r4, r8, asr #20
 8016448:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 801644c:	ee10 0a10 	vmov	r0, s0
 8016450:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8016454:	ee10 6a10 	vmov	r6, s0
 8016458:	460f      	mov	r7, r1
 801645a:	f7ea fb95 	bl	8000b88 <__aeabi_d2iz>
 801645e:	f7ea f879 	bl	8000554 <__aeabi_i2d>
 8016462:	4602      	mov	r2, r0
 8016464:	460b      	mov	r3, r1
 8016466:	4630      	mov	r0, r6
 8016468:	4639      	mov	r1, r7
 801646a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801646e:	f7e9 ff23 	bl	80002b8 <__aeabi_dsub>
 8016472:	4b22      	ldr	r3, [pc, #136]	; (80164fc <__ieee754_rem_pio2+0x40c>)
 8016474:	2200      	movs	r2, #0
 8016476:	f7ea f8d7 	bl	8000628 <__aeabi_dmul>
 801647a:	460f      	mov	r7, r1
 801647c:	4606      	mov	r6, r0
 801647e:	f7ea fb83 	bl	8000b88 <__aeabi_d2iz>
 8016482:	f7ea f867 	bl	8000554 <__aeabi_i2d>
 8016486:	4602      	mov	r2, r0
 8016488:	460b      	mov	r3, r1
 801648a:	4630      	mov	r0, r6
 801648c:	4639      	mov	r1, r7
 801648e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8016492:	f7e9 ff11 	bl	80002b8 <__aeabi_dsub>
 8016496:	4b19      	ldr	r3, [pc, #100]	; (80164fc <__ieee754_rem_pio2+0x40c>)
 8016498:	2200      	movs	r2, #0
 801649a:	f7ea f8c5 	bl	8000628 <__aeabi_dmul>
 801649e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80164a2:	ad04      	add	r5, sp, #16
 80164a4:	f04f 0803 	mov.w	r8, #3
 80164a8:	46a9      	mov	r9, r5
 80164aa:	2600      	movs	r6, #0
 80164ac:	2700      	movs	r7, #0
 80164ae:	4632      	mov	r2, r6
 80164b0:	463b      	mov	r3, r7
 80164b2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80164b6:	46c3      	mov	fp, r8
 80164b8:	3d08      	subs	r5, #8
 80164ba:	f108 38ff 	add.w	r8, r8, #4294967295
 80164be:	f7ea fb1b 	bl	8000af8 <__aeabi_dcmpeq>
 80164c2:	2800      	cmp	r0, #0
 80164c4:	d1f3      	bne.n	80164ae <__ieee754_rem_pio2+0x3be>
 80164c6:	4b0e      	ldr	r3, [pc, #56]	; (8016500 <__ieee754_rem_pio2+0x410>)
 80164c8:	9301      	str	r3, [sp, #4]
 80164ca:	2302      	movs	r3, #2
 80164cc:	9300      	str	r3, [sp, #0]
 80164ce:	4622      	mov	r2, r4
 80164d0:	465b      	mov	r3, fp
 80164d2:	4651      	mov	r1, sl
 80164d4:	4648      	mov	r0, r9
 80164d6:	f000 f993 	bl	8016800 <__kernel_rem_pio2>
 80164da:	9b02      	ldr	r3, [sp, #8]
 80164dc:	2b00      	cmp	r3, #0
 80164de:	4683      	mov	fp, r0
 80164e0:	f6bf ae46 	bge.w	8016170 <__ieee754_rem_pio2+0x80>
 80164e4:	f8da 3004 	ldr.w	r3, [sl, #4]
 80164e8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80164ec:	f8ca 3004 	str.w	r3, [sl, #4]
 80164f0:	f8da 300c 	ldr.w	r3, [sl, #12]
 80164f4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80164f8:	e73a      	b.n	8016370 <__ieee754_rem_pio2+0x280>
 80164fa:	bf00      	nop
 80164fc:	41700000 	.word	0x41700000
 8016500:	08018fb0 	.word	0x08018fb0

08016504 <__ieee754_sqrt>:
 8016504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016508:	ec55 4b10 	vmov	r4, r5, d0
 801650c:	4e56      	ldr	r6, [pc, #344]	; (8016668 <__ieee754_sqrt+0x164>)
 801650e:	43ae      	bics	r6, r5
 8016510:	ee10 0a10 	vmov	r0, s0
 8016514:	ee10 3a10 	vmov	r3, s0
 8016518:	4629      	mov	r1, r5
 801651a:	462a      	mov	r2, r5
 801651c:	d110      	bne.n	8016540 <__ieee754_sqrt+0x3c>
 801651e:	ee10 2a10 	vmov	r2, s0
 8016522:	462b      	mov	r3, r5
 8016524:	f7ea f880 	bl	8000628 <__aeabi_dmul>
 8016528:	4602      	mov	r2, r0
 801652a:	460b      	mov	r3, r1
 801652c:	4620      	mov	r0, r4
 801652e:	4629      	mov	r1, r5
 8016530:	f7e9 fec4 	bl	80002bc <__adddf3>
 8016534:	4604      	mov	r4, r0
 8016536:	460d      	mov	r5, r1
 8016538:	ec45 4b10 	vmov	d0, r4, r5
 801653c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016540:	2d00      	cmp	r5, #0
 8016542:	dc10      	bgt.n	8016566 <__ieee754_sqrt+0x62>
 8016544:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8016548:	4330      	orrs	r0, r6
 801654a:	d0f5      	beq.n	8016538 <__ieee754_sqrt+0x34>
 801654c:	b15d      	cbz	r5, 8016566 <__ieee754_sqrt+0x62>
 801654e:	ee10 2a10 	vmov	r2, s0
 8016552:	462b      	mov	r3, r5
 8016554:	ee10 0a10 	vmov	r0, s0
 8016558:	f7e9 feae 	bl	80002b8 <__aeabi_dsub>
 801655c:	4602      	mov	r2, r0
 801655e:	460b      	mov	r3, r1
 8016560:	f7ea f98c 	bl	800087c <__aeabi_ddiv>
 8016564:	e7e6      	b.n	8016534 <__ieee754_sqrt+0x30>
 8016566:	1509      	asrs	r1, r1, #20
 8016568:	d076      	beq.n	8016658 <__ieee754_sqrt+0x154>
 801656a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801656e:	07ce      	lsls	r6, r1, #31
 8016570:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8016574:	bf5e      	ittt	pl
 8016576:	0fda      	lsrpl	r2, r3, #31
 8016578:	005b      	lslpl	r3, r3, #1
 801657a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801657e:	0fda      	lsrs	r2, r3, #31
 8016580:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8016584:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8016588:	2000      	movs	r0, #0
 801658a:	106d      	asrs	r5, r5, #1
 801658c:	005b      	lsls	r3, r3, #1
 801658e:	f04f 0e16 	mov.w	lr, #22
 8016592:	4684      	mov	ip, r0
 8016594:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8016598:	eb0c 0401 	add.w	r4, ip, r1
 801659c:	4294      	cmp	r4, r2
 801659e:	bfde      	ittt	le
 80165a0:	1b12      	suble	r2, r2, r4
 80165a2:	eb04 0c01 	addle.w	ip, r4, r1
 80165a6:	1840      	addle	r0, r0, r1
 80165a8:	0052      	lsls	r2, r2, #1
 80165aa:	f1be 0e01 	subs.w	lr, lr, #1
 80165ae:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80165b2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80165b6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80165ba:	d1ed      	bne.n	8016598 <__ieee754_sqrt+0x94>
 80165bc:	4671      	mov	r1, lr
 80165be:	2720      	movs	r7, #32
 80165c0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80165c4:	4562      	cmp	r2, ip
 80165c6:	eb04 060e 	add.w	r6, r4, lr
 80165ca:	dc02      	bgt.n	80165d2 <__ieee754_sqrt+0xce>
 80165cc:	d113      	bne.n	80165f6 <__ieee754_sqrt+0xf2>
 80165ce:	429e      	cmp	r6, r3
 80165d0:	d811      	bhi.n	80165f6 <__ieee754_sqrt+0xf2>
 80165d2:	2e00      	cmp	r6, #0
 80165d4:	eb06 0e04 	add.w	lr, r6, r4
 80165d8:	da43      	bge.n	8016662 <__ieee754_sqrt+0x15e>
 80165da:	f1be 0f00 	cmp.w	lr, #0
 80165de:	db40      	blt.n	8016662 <__ieee754_sqrt+0x15e>
 80165e0:	f10c 0801 	add.w	r8, ip, #1
 80165e4:	eba2 020c 	sub.w	r2, r2, ip
 80165e8:	429e      	cmp	r6, r3
 80165ea:	bf88      	it	hi
 80165ec:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80165f0:	1b9b      	subs	r3, r3, r6
 80165f2:	4421      	add	r1, r4
 80165f4:	46c4      	mov	ip, r8
 80165f6:	0052      	lsls	r2, r2, #1
 80165f8:	3f01      	subs	r7, #1
 80165fa:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80165fe:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8016602:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8016606:	d1dd      	bne.n	80165c4 <__ieee754_sqrt+0xc0>
 8016608:	4313      	orrs	r3, r2
 801660a:	d006      	beq.n	801661a <__ieee754_sqrt+0x116>
 801660c:	1c4c      	adds	r4, r1, #1
 801660e:	bf13      	iteet	ne
 8016610:	3101      	addne	r1, #1
 8016612:	3001      	addeq	r0, #1
 8016614:	4639      	moveq	r1, r7
 8016616:	f021 0101 	bicne.w	r1, r1, #1
 801661a:	1043      	asrs	r3, r0, #1
 801661c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8016620:	0849      	lsrs	r1, r1, #1
 8016622:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8016626:	07c2      	lsls	r2, r0, #31
 8016628:	bf48      	it	mi
 801662a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801662e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8016632:	460c      	mov	r4, r1
 8016634:	463d      	mov	r5, r7
 8016636:	e77f      	b.n	8016538 <__ieee754_sqrt+0x34>
 8016638:	0ada      	lsrs	r2, r3, #11
 801663a:	3815      	subs	r0, #21
 801663c:	055b      	lsls	r3, r3, #21
 801663e:	2a00      	cmp	r2, #0
 8016640:	d0fa      	beq.n	8016638 <__ieee754_sqrt+0x134>
 8016642:	02d7      	lsls	r7, r2, #11
 8016644:	d50a      	bpl.n	801665c <__ieee754_sqrt+0x158>
 8016646:	f1c1 0420 	rsb	r4, r1, #32
 801664a:	fa23 f404 	lsr.w	r4, r3, r4
 801664e:	1e4d      	subs	r5, r1, #1
 8016650:	408b      	lsls	r3, r1
 8016652:	4322      	orrs	r2, r4
 8016654:	1b41      	subs	r1, r0, r5
 8016656:	e788      	b.n	801656a <__ieee754_sqrt+0x66>
 8016658:	4608      	mov	r0, r1
 801665a:	e7f0      	b.n	801663e <__ieee754_sqrt+0x13a>
 801665c:	0052      	lsls	r2, r2, #1
 801665e:	3101      	adds	r1, #1
 8016660:	e7ef      	b.n	8016642 <__ieee754_sqrt+0x13e>
 8016662:	46e0      	mov	r8, ip
 8016664:	e7be      	b.n	80165e4 <__ieee754_sqrt+0xe0>
 8016666:	bf00      	nop
 8016668:	7ff00000 	.word	0x7ff00000
 801666c:	00000000 	.word	0x00000000

08016670 <__kernel_cos>:
 8016670:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016674:	ec57 6b10 	vmov	r6, r7, d0
 8016678:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801667c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8016680:	ed8d 1b00 	vstr	d1, [sp]
 8016684:	da07      	bge.n	8016696 <__kernel_cos+0x26>
 8016686:	ee10 0a10 	vmov	r0, s0
 801668a:	4639      	mov	r1, r7
 801668c:	f7ea fa7c 	bl	8000b88 <__aeabi_d2iz>
 8016690:	2800      	cmp	r0, #0
 8016692:	f000 8088 	beq.w	80167a6 <__kernel_cos+0x136>
 8016696:	4632      	mov	r2, r6
 8016698:	463b      	mov	r3, r7
 801669a:	4630      	mov	r0, r6
 801669c:	4639      	mov	r1, r7
 801669e:	f7e9 ffc3 	bl	8000628 <__aeabi_dmul>
 80166a2:	4b51      	ldr	r3, [pc, #324]	; (80167e8 <__kernel_cos+0x178>)
 80166a4:	2200      	movs	r2, #0
 80166a6:	4604      	mov	r4, r0
 80166a8:	460d      	mov	r5, r1
 80166aa:	f7e9 ffbd 	bl	8000628 <__aeabi_dmul>
 80166ae:	a340      	add	r3, pc, #256	; (adr r3, 80167b0 <__kernel_cos+0x140>)
 80166b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166b4:	4682      	mov	sl, r0
 80166b6:	468b      	mov	fp, r1
 80166b8:	4620      	mov	r0, r4
 80166ba:	4629      	mov	r1, r5
 80166bc:	f7e9 ffb4 	bl	8000628 <__aeabi_dmul>
 80166c0:	a33d      	add	r3, pc, #244	; (adr r3, 80167b8 <__kernel_cos+0x148>)
 80166c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166c6:	f7e9 fdf9 	bl	80002bc <__adddf3>
 80166ca:	4622      	mov	r2, r4
 80166cc:	462b      	mov	r3, r5
 80166ce:	f7e9 ffab 	bl	8000628 <__aeabi_dmul>
 80166d2:	a33b      	add	r3, pc, #236	; (adr r3, 80167c0 <__kernel_cos+0x150>)
 80166d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166d8:	f7e9 fdee 	bl	80002b8 <__aeabi_dsub>
 80166dc:	4622      	mov	r2, r4
 80166de:	462b      	mov	r3, r5
 80166e0:	f7e9 ffa2 	bl	8000628 <__aeabi_dmul>
 80166e4:	a338      	add	r3, pc, #224	; (adr r3, 80167c8 <__kernel_cos+0x158>)
 80166e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166ea:	f7e9 fde7 	bl	80002bc <__adddf3>
 80166ee:	4622      	mov	r2, r4
 80166f0:	462b      	mov	r3, r5
 80166f2:	f7e9 ff99 	bl	8000628 <__aeabi_dmul>
 80166f6:	a336      	add	r3, pc, #216	; (adr r3, 80167d0 <__kernel_cos+0x160>)
 80166f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166fc:	f7e9 fddc 	bl	80002b8 <__aeabi_dsub>
 8016700:	4622      	mov	r2, r4
 8016702:	462b      	mov	r3, r5
 8016704:	f7e9 ff90 	bl	8000628 <__aeabi_dmul>
 8016708:	a333      	add	r3, pc, #204	; (adr r3, 80167d8 <__kernel_cos+0x168>)
 801670a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801670e:	f7e9 fdd5 	bl	80002bc <__adddf3>
 8016712:	4622      	mov	r2, r4
 8016714:	462b      	mov	r3, r5
 8016716:	f7e9 ff87 	bl	8000628 <__aeabi_dmul>
 801671a:	4622      	mov	r2, r4
 801671c:	462b      	mov	r3, r5
 801671e:	f7e9 ff83 	bl	8000628 <__aeabi_dmul>
 8016722:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016726:	4604      	mov	r4, r0
 8016728:	460d      	mov	r5, r1
 801672a:	4630      	mov	r0, r6
 801672c:	4639      	mov	r1, r7
 801672e:	f7e9 ff7b 	bl	8000628 <__aeabi_dmul>
 8016732:	460b      	mov	r3, r1
 8016734:	4602      	mov	r2, r0
 8016736:	4629      	mov	r1, r5
 8016738:	4620      	mov	r0, r4
 801673a:	f7e9 fdbd 	bl	80002b8 <__aeabi_dsub>
 801673e:	4b2b      	ldr	r3, [pc, #172]	; (80167ec <__kernel_cos+0x17c>)
 8016740:	4598      	cmp	r8, r3
 8016742:	4606      	mov	r6, r0
 8016744:	460f      	mov	r7, r1
 8016746:	dc10      	bgt.n	801676a <__kernel_cos+0xfa>
 8016748:	4602      	mov	r2, r0
 801674a:	460b      	mov	r3, r1
 801674c:	4650      	mov	r0, sl
 801674e:	4659      	mov	r1, fp
 8016750:	f7e9 fdb2 	bl	80002b8 <__aeabi_dsub>
 8016754:	460b      	mov	r3, r1
 8016756:	4926      	ldr	r1, [pc, #152]	; (80167f0 <__kernel_cos+0x180>)
 8016758:	4602      	mov	r2, r0
 801675a:	2000      	movs	r0, #0
 801675c:	f7e9 fdac 	bl	80002b8 <__aeabi_dsub>
 8016760:	ec41 0b10 	vmov	d0, r0, r1
 8016764:	b003      	add	sp, #12
 8016766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801676a:	4b22      	ldr	r3, [pc, #136]	; (80167f4 <__kernel_cos+0x184>)
 801676c:	4920      	ldr	r1, [pc, #128]	; (80167f0 <__kernel_cos+0x180>)
 801676e:	4598      	cmp	r8, r3
 8016770:	bfcc      	ite	gt
 8016772:	4d21      	ldrgt	r5, [pc, #132]	; (80167f8 <__kernel_cos+0x188>)
 8016774:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8016778:	2400      	movs	r4, #0
 801677a:	4622      	mov	r2, r4
 801677c:	462b      	mov	r3, r5
 801677e:	2000      	movs	r0, #0
 8016780:	f7e9 fd9a 	bl	80002b8 <__aeabi_dsub>
 8016784:	4622      	mov	r2, r4
 8016786:	4680      	mov	r8, r0
 8016788:	4689      	mov	r9, r1
 801678a:	462b      	mov	r3, r5
 801678c:	4650      	mov	r0, sl
 801678e:	4659      	mov	r1, fp
 8016790:	f7e9 fd92 	bl	80002b8 <__aeabi_dsub>
 8016794:	4632      	mov	r2, r6
 8016796:	463b      	mov	r3, r7
 8016798:	f7e9 fd8e 	bl	80002b8 <__aeabi_dsub>
 801679c:	4602      	mov	r2, r0
 801679e:	460b      	mov	r3, r1
 80167a0:	4640      	mov	r0, r8
 80167a2:	4649      	mov	r1, r9
 80167a4:	e7da      	b.n	801675c <__kernel_cos+0xec>
 80167a6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80167e0 <__kernel_cos+0x170>
 80167aa:	e7db      	b.n	8016764 <__kernel_cos+0xf4>
 80167ac:	f3af 8000 	nop.w
 80167b0:	be8838d4 	.word	0xbe8838d4
 80167b4:	bda8fae9 	.word	0xbda8fae9
 80167b8:	bdb4b1c4 	.word	0xbdb4b1c4
 80167bc:	3e21ee9e 	.word	0x3e21ee9e
 80167c0:	809c52ad 	.word	0x809c52ad
 80167c4:	3e927e4f 	.word	0x3e927e4f
 80167c8:	19cb1590 	.word	0x19cb1590
 80167cc:	3efa01a0 	.word	0x3efa01a0
 80167d0:	16c15177 	.word	0x16c15177
 80167d4:	3f56c16c 	.word	0x3f56c16c
 80167d8:	5555554c 	.word	0x5555554c
 80167dc:	3fa55555 	.word	0x3fa55555
 80167e0:	00000000 	.word	0x00000000
 80167e4:	3ff00000 	.word	0x3ff00000
 80167e8:	3fe00000 	.word	0x3fe00000
 80167ec:	3fd33332 	.word	0x3fd33332
 80167f0:	3ff00000 	.word	0x3ff00000
 80167f4:	3fe90000 	.word	0x3fe90000
 80167f8:	3fd20000 	.word	0x3fd20000
 80167fc:	00000000 	.word	0x00000000

08016800 <__kernel_rem_pio2>:
 8016800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016804:	ed2d 8b02 	vpush	{d8}
 8016808:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 801680c:	f112 0f14 	cmn.w	r2, #20
 8016810:	9308      	str	r3, [sp, #32]
 8016812:	9101      	str	r1, [sp, #4]
 8016814:	4bc6      	ldr	r3, [pc, #792]	; (8016b30 <__kernel_rem_pio2+0x330>)
 8016816:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8016818:	9009      	str	r0, [sp, #36]	; 0x24
 801681a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801681e:	9304      	str	r3, [sp, #16]
 8016820:	9b08      	ldr	r3, [sp, #32]
 8016822:	f103 33ff 	add.w	r3, r3, #4294967295
 8016826:	bfa8      	it	ge
 8016828:	1ed4      	subge	r4, r2, #3
 801682a:	9306      	str	r3, [sp, #24]
 801682c:	bfb2      	itee	lt
 801682e:	2400      	movlt	r4, #0
 8016830:	2318      	movge	r3, #24
 8016832:	fb94 f4f3 	sdivge	r4, r4, r3
 8016836:	f06f 0317 	mvn.w	r3, #23
 801683a:	fb04 3303 	mla	r3, r4, r3, r3
 801683e:	eb03 0a02 	add.w	sl, r3, r2
 8016842:	9b04      	ldr	r3, [sp, #16]
 8016844:	9a06      	ldr	r2, [sp, #24]
 8016846:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8016b20 <__kernel_rem_pio2+0x320>
 801684a:	eb03 0802 	add.w	r8, r3, r2
 801684e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8016850:	1aa7      	subs	r7, r4, r2
 8016852:	ae20      	add	r6, sp, #128	; 0x80
 8016854:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8016858:	2500      	movs	r5, #0
 801685a:	4545      	cmp	r5, r8
 801685c:	dd18      	ble.n	8016890 <__kernel_rem_pio2+0x90>
 801685e:	9b08      	ldr	r3, [sp, #32]
 8016860:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8016864:	aa20      	add	r2, sp, #128	; 0x80
 8016866:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8016b20 <__kernel_rem_pio2+0x320>
 801686a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801686e:	f1c3 0301 	rsb	r3, r3, #1
 8016872:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8016876:	9307      	str	r3, [sp, #28]
 8016878:	9b07      	ldr	r3, [sp, #28]
 801687a:	9a04      	ldr	r2, [sp, #16]
 801687c:	4443      	add	r3, r8
 801687e:	429a      	cmp	r2, r3
 8016880:	db2f      	blt.n	80168e2 <__kernel_rem_pio2+0xe2>
 8016882:	ed8d 8b02 	vstr	d8, [sp, #8]
 8016886:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801688a:	462f      	mov	r7, r5
 801688c:	2600      	movs	r6, #0
 801688e:	e01b      	b.n	80168c8 <__kernel_rem_pio2+0xc8>
 8016890:	42ef      	cmn	r7, r5
 8016892:	d407      	bmi.n	80168a4 <__kernel_rem_pio2+0xa4>
 8016894:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8016898:	f7e9 fe5c 	bl	8000554 <__aeabi_i2d>
 801689c:	e8e6 0102 	strd	r0, r1, [r6], #8
 80168a0:	3501      	adds	r5, #1
 80168a2:	e7da      	b.n	801685a <__kernel_rem_pio2+0x5a>
 80168a4:	ec51 0b18 	vmov	r0, r1, d8
 80168a8:	e7f8      	b.n	801689c <__kernel_rem_pio2+0x9c>
 80168aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80168ae:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80168b2:	f7e9 feb9 	bl	8000628 <__aeabi_dmul>
 80168b6:	4602      	mov	r2, r0
 80168b8:	460b      	mov	r3, r1
 80168ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80168be:	f7e9 fcfd 	bl	80002bc <__adddf3>
 80168c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80168c6:	3601      	adds	r6, #1
 80168c8:	9b06      	ldr	r3, [sp, #24]
 80168ca:	429e      	cmp	r6, r3
 80168cc:	f1a7 0708 	sub.w	r7, r7, #8
 80168d0:	ddeb      	ble.n	80168aa <__kernel_rem_pio2+0xaa>
 80168d2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80168d6:	3508      	adds	r5, #8
 80168d8:	ecab 7b02 	vstmia	fp!, {d7}
 80168dc:	f108 0801 	add.w	r8, r8, #1
 80168e0:	e7ca      	b.n	8016878 <__kernel_rem_pio2+0x78>
 80168e2:	9b04      	ldr	r3, [sp, #16]
 80168e4:	aa0c      	add	r2, sp, #48	; 0x30
 80168e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80168ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80168ec:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80168ee:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80168f2:	9c04      	ldr	r4, [sp, #16]
 80168f4:	930a      	str	r3, [sp, #40]	; 0x28
 80168f6:	ab98      	add	r3, sp, #608	; 0x260
 80168f8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80168fc:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8016900:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8016904:	f8cd b008 	str.w	fp, [sp, #8]
 8016908:	4625      	mov	r5, r4
 801690a:	2d00      	cmp	r5, #0
 801690c:	dc78      	bgt.n	8016a00 <__kernel_rem_pio2+0x200>
 801690e:	ec47 6b10 	vmov	d0, r6, r7
 8016912:	4650      	mov	r0, sl
 8016914:	f000 fda0 	bl	8017458 <scalbn>
 8016918:	ec57 6b10 	vmov	r6, r7, d0
 801691c:	2200      	movs	r2, #0
 801691e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8016922:	ee10 0a10 	vmov	r0, s0
 8016926:	4639      	mov	r1, r7
 8016928:	f7e9 fe7e 	bl	8000628 <__aeabi_dmul>
 801692c:	ec41 0b10 	vmov	d0, r0, r1
 8016930:	f000 fd12 	bl	8017358 <floor>
 8016934:	4b7f      	ldr	r3, [pc, #508]	; (8016b34 <__kernel_rem_pio2+0x334>)
 8016936:	ec51 0b10 	vmov	r0, r1, d0
 801693a:	2200      	movs	r2, #0
 801693c:	f7e9 fe74 	bl	8000628 <__aeabi_dmul>
 8016940:	4602      	mov	r2, r0
 8016942:	460b      	mov	r3, r1
 8016944:	4630      	mov	r0, r6
 8016946:	4639      	mov	r1, r7
 8016948:	f7e9 fcb6 	bl	80002b8 <__aeabi_dsub>
 801694c:	460f      	mov	r7, r1
 801694e:	4606      	mov	r6, r0
 8016950:	f7ea f91a 	bl	8000b88 <__aeabi_d2iz>
 8016954:	9007      	str	r0, [sp, #28]
 8016956:	f7e9 fdfd 	bl	8000554 <__aeabi_i2d>
 801695a:	4602      	mov	r2, r0
 801695c:	460b      	mov	r3, r1
 801695e:	4630      	mov	r0, r6
 8016960:	4639      	mov	r1, r7
 8016962:	f7e9 fca9 	bl	80002b8 <__aeabi_dsub>
 8016966:	f1ba 0f00 	cmp.w	sl, #0
 801696a:	4606      	mov	r6, r0
 801696c:	460f      	mov	r7, r1
 801696e:	dd70      	ble.n	8016a52 <__kernel_rem_pio2+0x252>
 8016970:	1e62      	subs	r2, r4, #1
 8016972:	ab0c      	add	r3, sp, #48	; 0x30
 8016974:	9d07      	ldr	r5, [sp, #28]
 8016976:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801697a:	f1ca 0118 	rsb	r1, sl, #24
 801697e:	fa40 f301 	asr.w	r3, r0, r1
 8016982:	441d      	add	r5, r3
 8016984:	408b      	lsls	r3, r1
 8016986:	1ac0      	subs	r0, r0, r3
 8016988:	ab0c      	add	r3, sp, #48	; 0x30
 801698a:	9507      	str	r5, [sp, #28]
 801698c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8016990:	f1ca 0317 	rsb	r3, sl, #23
 8016994:	fa40 f303 	asr.w	r3, r0, r3
 8016998:	9302      	str	r3, [sp, #8]
 801699a:	9b02      	ldr	r3, [sp, #8]
 801699c:	2b00      	cmp	r3, #0
 801699e:	dd66      	ble.n	8016a6e <__kernel_rem_pio2+0x26e>
 80169a0:	9b07      	ldr	r3, [sp, #28]
 80169a2:	2200      	movs	r2, #0
 80169a4:	3301      	adds	r3, #1
 80169a6:	9307      	str	r3, [sp, #28]
 80169a8:	4615      	mov	r5, r2
 80169aa:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80169ae:	4294      	cmp	r4, r2
 80169b0:	f300 8099 	bgt.w	8016ae6 <__kernel_rem_pio2+0x2e6>
 80169b4:	f1ba 0f00 	cmp.w	sl, #0
 80169b8:	dd07      	ble.n	80169ca <__kernel_rem_pio2+0x1ca>
 80169ba:	f1ba 0f01 	cmp.w	sl, #1
 80169be:	f000 80a5 	beq.w	8016b0c <__kernel_rem_pio2+0x30c>
 80169c2:	f1ba 0f02 	cmp.w	sl, #2
 80169c6:	f000 80c1 	beq.w	8016b4c <__kernel_rem_pio2+0x34c>
 80169ca:	9b02      	ldr	r3, [sp, #8]
 80169cc:	2b02      	cmp	r3, #2
 80169ce:	d14e      	bne.n	8016a6e <__kernel_rem_pio2+0x26e>
 80169d0:	4632      	mov	r2, r6
 80169d2:	463b      	mov	r3, r7
 80169d4:	4958      	ldr	r1, [pc, #352]	; (8016b38 <__kernel_rem_pio2+0x338>)
 80169d6:	2000      	movs	r0, #0
 80169d8:	f7e9 fc6e 	bl	80002b8 <__aeabi_dsub>
 80169dc:	4606      	mov	r6, r0
 80169de:	460f      	mov	r7, r1
 80169e0:	2d00      	cmp	r5, #0
 80169e2:	d044      	beq.n	8016a6e <__kernel_rem_pio2+0x26e>
 80169e4:	4650      	mov	r0, sl
 80169e6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8016b28 <__kernel_rem_pio2+0x328>
 80169ea:	f000 fd35 	bl	8017458 <scalbn>
 80169ee:	4630      	mov	r0, r6
 80169f0:	4639      	mov	r1, r7
 80169f2:	ec53 2b10 	vmov	r2, r3, d0
 80169f6:	f7e9 fc5f 	bl	80002b8 <__aeabi_dsub>
 80169fa:	4606      	mov	r6, r0
 80169fc:	460f      	mov	r7, r1
 80169fe:	e036      	b.n	8016a6e <__kernel_rem_pio2+0x26e>
 8016a00:	4b4e      	ldr	r3, [pc, #312]	; (8016b3c <__kernel_rem_pio2+0x33c>)
 8016a02:	2200      	movs	r2, #0
 8016a04:	4630      	mov	r0, r6
 8016a06:	4639      	mov	r1, r7
 8016a08:	f7e9 fe0e 	bl	8000628 <__aeabi_dmul>
 8016a0c:	f7ea f8bc 	bl	8000b88 <__aeabi_d2iz>
 8016a10:	f7e9 fda0 	bl	8000554 <__aeabi_i2d>
 8016a14:	4b4a      	ldr	r3, [pc, #296]	; (8016b40 <__kernel_rem_pio2+0x340>)
 8016a16:	2200      	movs	r2, #0
 8016a18:	4680      	mov	r8, r0
 8016a1a:	4689      	mov	r9, r1
 8016a1c:	f7e9 fe04 	bl	8000628 <__aeabi_dmul>
 8016a20:	4602      	mov	r2, r0
 8016a22:	460b      	mov	r3, r1
 8016a24:	4630      	mov	r0, r6
 8016a26:	4639      	mov	r1, r7
 8016a28:	f7e9 fc46 	bl	80002b8 <__aeabi_dsub>
 8016a2c:	f7ea f8ac 	bl	8000b88 <__aeabi_d2iz>
 8016a30:	9b02      	ldr	r3, [sp, #8]
 8016a32:	f843 0b04 	str.w	r0, [r3], #4
 8016a36:	3d01      	subs	r5, #1
 8016a38:	9302      	str	r3, [sp, #8]
 8016a3a:	ab70      	add	r3, sp, #448	; 0x1c0
 8016a3c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8016a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a44:	4640      	mov	r0, r8
 8016a46:	4649      	mov	r1, r9
 8016a48:	f7e9 fc38 	bl	80002bc <__adddf3>
 8016a4c:	4606      	mov	r6, r0
 8016a4e:	460f      	mov	r7, r1
 8016a50:	e75b      	b.n	801690a <__kernel_rem_pio2+0x10a>
 8016a52:	d105      	bne.n	8016a60 <__kernel_rem_pio2+0x260>
 8016a54:	1e63      	subs	r3, r4, #1
 8016a56:	aa0c      	add	r2, sp, #48	; 0x30
 8016a58:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8016a5c:	15c3      	asrs	r3, r0, #23
 8016a5e:	e79b      	b.n	8016998 <__kernel_rem_pio2+0x198>
 8016a60:	4b38      	ldr	r3, [pc, #224]	; (8016b44 <__kernel_rem_pio2+0x344>)
 8016a62:	2200      	movs	r2, #0
 8016a64:	f7ea f866 	bl	8000b34 <__aeabi_dcmpge>
 8016a68:	2800      	cmp	r0, #0
 8016a6a:	d139      	bne.n	8016ae0 <__kernel_rem_pio2+0x2e0>
 8016a6c:	9002      	str	r0, [sp, #8]
 8016a6e:	2200      	movs	r2, #0
 8016a70:	2300      	movs	r3, #0
 8016a72:	4630      	mov	r0, r6
 8016a74:	4639      	mov	r1, r7
 8016a76:	f7ea f83f 	bl	8000af8 <__aeabi_dcmpeq>
 8016a7a:	2800      	cmp	r0, #0
 8016a7c:	f000 80b4 	beq.w	8016be8 <__kernel_rem_pio2+0x3e8>
 8016a80:	f104 3bff 	add.w	fp, r4, #4294967295
 8016a84:	465b      	mov	r3, fp
 8016a86:	2200      	movs	r2, #0
 8016a88:	9904      	ldr	r1, [sp, #16]
 8016a8a:	428b      	cmp	r3, r1
 8016a8c:	da65      	bge.n	8016b5a <__kernel_rem_pio2+0x35a>
 8016a8e:	2a00      	cmp	r2, #0
 8016a90:	d07b      	beq.n	8016b8a <__kernel_rem_pio2+0x38a>
 8016a92:	ab0c      	add	r3, sp, #48	; 0x30
 8016a94:	f1aa 0a18 	sub.w	sl, sl, #24
 8016a98:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8016a9c:	2b00      	cmp	r3, #0
 8016a9e:	f000 80a0 	beq.w	8016be2 <__kernel_rem_pio2+0x3e2>
 8016aa2:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8016b28 <__kernel_rem_pio2+0x328>
 8016aa6:	4650      	mov	r0, sl
 8016aa8:	f000 fcd6 	bl	8017458 <scalbn>
 8016aac:	4f23      	ldr	r7, [pc, #140]	; (8016b3c <__kernel_rem_pio2+0x33c>)
 8016aae:	ec55 4b10 	vmov	r4, r5, d0
 8016ab2:	46d8      	mov	r8, fp
 8016ab4:	2600      	movs	r6, #0
 8016ab6:	f1b8 0f00 	cmp.w	r8, #0
 8016aba:	f280 80cf 	bge.w	8016c5c <__kernel_rem_pio2+0x45c>
 8016abe:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8016b20 <__kernel_rem_pio2+0x320>
 8016ac2:	465f      	mov	r7, fp
 8016ac4:	f04f 0800 	mov.w	r8, #0
 8016ac8:	2f00      	cmp	r7, #0
 8016aca:	f2c0 80fd 	blt.w	8016cc8 <__kernel_rem_pio2+0x4c8>
 8016ace:	ab70      	add	r3, sp, #448	; 0x1c0
 8016ad0:	f8df a074 	ldr.w	sl, [pc, #116]	; 8016b48 <__kernel_rem_pio2+0x348>
 8016ad4:	ec55 4b18 	vmov	r4, r5, d8
 8016ad8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8016adc:	2600      	movs	r6, #0
 8016ade:	e0e5      	b.n	8016cac <__kernel_rem_pio2+0x4ac>
 8016ae0:	2302      	movs	r3, #2
 8016ae2:	9302      	str	r3, [sp, #8]
 8016ae4:	e75c      	b.n	80169a0 <__kernel_rem_pio2+0x1a0>
 8016ae6:	f8db 3000 	ldr.w	r3, [fp]
 8016aea:	b955      	cbnz	r5, 8016b02 <__kernel_rem_pio2+0x302>
 8016aec:	b123      	cbz	r3, 8016af8 <__kernel_rem_pio2+0x2f8>
 8016aee:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8016af2:	f8cb 3000 	str.w	r3, [fp]
 8016af6:	2301      	movs	r3, #1
 8016af8:	3201      	adds	r2, #1
 8016afa:	f10b 0b04 	add.w	fp, fp, #4
 8016afe:	461d      	mov	r5, r3
 8016b00:	e755      	b.n	80169ae <__kernel_rem_pio2+0x1ae>
 8016b02:	1acb      	subs	r3, r1, r3
 8016b04:	f8cb 3000 	str.w	r3, [fp]
 8016b08:	462b      	mov	r3, r5
 8016b0a:	e7f5      	b.n	8016af8 <__kernel_rem_pio2+0x2f8>
 8016b0c:	1e62      	subs	r2, r4, #1
 8016b0e:	ab0c      	add	r3, sp, #48	; 0x30
 8016b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016b14:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8016b18:	a90c      	add	r1, sp, #48	; 0x30
 8016b1a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8016b1e:	e754      	b.n	80169ca <__kernel_rem_pio2+0x1ca>
	...
 8016b2c:	3ff00000 	.word	0x3ff00000
 8016b30:	080190f8 	.word	0x080190f8
 8016b34:	40200000 	.word	0x40200000
 8016b38:	3ff00000 	.word	0x3ff00000
 8016b3c:	3e700000 	.word	0x3e700000
 8016b40:	41700000 	.word	0x41700000
 8016b44:	3fe00000 	.word	0x3fe00000
 8016b48:	080190b8 	.word	0x080190b8
 8016b4c:	1e62      	subs	r2, r4, #1
 8016b4e:	ab0c      	add	r3, sp, #48	; 0x30
 8016b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016b54:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8016b58:	e7de      	b.n	8016b18 <__kernel_rem_pio2+0x318>
 8016b5a:	a90c      	add	r1, sp, #48	; 0x30
 8016b5c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8016b60:	3b01      	subs	r3, #1
 8016b62:	430a      	orrs	r2, r1
 8016b64:	e790      	b.n	8016a88 <__kernel_rem_pio2+0x288>
 8016b66:	3301      	adds	r3, #1
 8016b68:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8016b6c:	2900      	cmp	r1, #0
 8016b6e:	d0fa      	beq.n	8016b66 <__kernel_rem_pio2+0x366>
 8016b70:	9a08      	ldr	r2, [sp, #32]
 8016b72:	18e3      	adds	r3, r4, r3
 8016b74:	18a6      	adds	r6, r4, r2
 8016b76:	aa20      	add	r2, sp, #128	; 0x80
 8016b78:	1c65      	adds	r5, r4, #1
 8016b7a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8016b7e:	9302      	str	r3, [sp, #8]
 8016b80:	9b02      	ldr	r3, [sp, #8]
 8016b82:	42ab      	cmp	r3, r5
 8016b84:	da04      	bge.n	8016b90 <__kernel_rem_pio2+0x390>
 8016b86:	461c      	mov	r4, r3
 8016b88:	e6b5      	b.n	80168f6 <__kernel_rem_pio2+0xf6>
 8016b8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016b8c:	2301      	movs	r3, #1
 8016b8e:	e7eb      	b.n	8016b68 <__kernel_rem_pio2+0x368>
 8016b90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016b92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016b96:	f7e9 fcdd 	bl	8000554 <__aeabi_i2d>
 8016b9a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8016b9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016ba0:	46b3      	mov	fp, r6
 8016ba2:	461c      	mov	r4, r3
 8016ba4:	2700      	movs	r7, #0
 8016ba6:	f04f 0800 	mov.w	r8, #0
 8016baa:	f04f 0900 	mov.w	r9, #0
 8016bae:	9b06      	ldr	r3, [sp, #24]
 8016bb0:	429f      	cmp	r7, r3
 8016bb2:	dd06      	ble.n	8016bc2 <__kernel_rem_pio2+0x3c2>
 8016bb4:	ab70      	add	r3, sp, #448	; 0x1c0
 8016bb6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8016bba:	e9c3 8900 	strd	r8, r9, [r3]
 8016bbe:	3501      	adds	r5, #1
 8016bc0:	e7de      	b.n	8016b80 <__kernel_rem_pio2+0x380>
 8016bc2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8016bc6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8016bca:	f7e9 fd2d 	bl	8000628 <__aeabi_dmul>
 8016bce:	4602      	mov	r2, r0
 8016bd0:	460b      	mov	r3, r1
 8016bd2:	4640      	mov	r0, r8
 8016bd4:	4649      	mov	r1, r9
 8016bd6:	f7e9 fb71 	bl	80002bc <__adddf3>
 8016bda:	3701      	adds	r7, #1
 8016bdc:	4680      	mov	r8, r0
 8016bde:	4689      	mov	r9, r1
 8016be0:	e7e5      	b.n	8016bae <__kernel_rem_pio2+0x3ae>
 8016be2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016be6:	e754      	b.n	8016a92 <__kernel_rem_pio2+0x292>
 8016be8:	ec47 6b10 	vmov	d0, r6, r7
 8016bec:	f1ca 0000 	rsb	r0, sl, #0
 8016bf0:	f000 fc32 	bl	8017458 <scalbn>
 8016bf4:	ec57 6b10 	vmov	r6, r7, d0
 8016bf8:	4b9f      	ldr	r3, [pc, #636]	; (8016e78 <__kernel_rem_pio2+0x678>)
 8016bfa:	ee10 0a10 	vmov	r0, s0
 8016bfe:	2200      	movs	r2, #0
 8016c00:	4639      	mov	r1, r7
 8016c02:	f7e9 ff97 	bl	8000b34 <__aeabi_dcmpge>
 8016c06:	b300      	cbz	r0, 8016c4a <__kernel_rem_pio2+0x44a>
 8016c08:	4b9c      	ldr	r3, [pc, #624]	; (8016e7c <__kernel_rem_pio2+0x67c>)
 8016c0a:	2200      	movs	r2, #0
 8016c0c:	4630      	mov	r0, r6
 8016c0e:	4639      	mov	r1, r7
 8016c10:	f7e9 fd0a 	bl	8000628 <__aeabi_dmul>
 8016c14:	f7e9 ffb8 	bl	8000b88 <__aeabi_d2iz>
 8016c18:	4605      	mov	r5, r0
 8016c1a:	f7e9 fc9b 	bl	8000554 <__aeabi_i2d>
 8016c1e:	4b96      	ldr	r3, [pc, #600]	; (8016e78 <__kernel_rem_pio2+0x678>)
 8016c20:	2200      	movs	r2, #0
 8016c22:	f7e9 fd01 	bl	8000628 <__aeabi_dmul>
 8016c26:	460b      	mov	r3, r1
 8016c28:	4602      	mov	r2, r0
 8016c2a:	4639      	mov	r1, r7
 8016c2c:	4630      	mov	r0, r6
 8016c2e:	f7e9 fb43 	bl	80002b8 <__aeabi_dsub>
 8016c32:	f7e9 ffa9 	bl	8000b88 <__aeabi_d2iz>
 8016c36:	f104 0b01 	add.w	fp, r4, #1
 8016c3a:	ab0c      	add	r3, sp, #48	; 0x30
 8016c3c:	f10a 0a18 	add.w	sl, sl, #24
 8016c40:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8016c44:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8016c48:	e72b      	b.n	8016aa2 <__kernel_rem_pio2+0x2a2>
 8016c4a:	4630      	mov	r0, r6
 8016c4c:	4639      	mov	r1, r7
 8016c4e:	f7e9 ff9b 	bl	8000b88 <__aeabi_d2iz>
 8016c52:	ab0c      	add	r3, sp, #48	; 0x30
 8016c54:	46a3      	mov	fp, r4
 8016c56:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8016c5a:	e722      	b.n	8016aa2 <__kernel_rem_pio2+0x2a2>
 8016c5c:	ab70      	add	r3, sp, #448	; 0x1c0
 8016c5e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8016c62:	ab0c      	add	r3, sp, #48	; 0x30
 8016c64:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8016c68:	f7e9 fc74 	bl	8000554 <__aeabi_i2d>
 8016c6c:	4622      	mov	r2, r4
 8016c6e:	462b      	mov	r3, r5
 8016c70:	f7e9 fcda 	bl	8000628 <__aeabi_dmul>
 8016c74:	4632      	mov	r2, r6
 8016c76:	e9c9 0100 	strd	r0, r1, [r9]
 8016c7a:	463b      	mov	r3, r7
 8016c7c:	4620      	mov	r0, r4
 8016c7e:	4629      	mov	r1, r5
 8016c80:	f7e9 fcd2 	bl	8000628 <__aeabi_dmul>
 8016c84:	f108 38ff 	add.w	r8, r8, #4294967295
 8016c88:	4604      	mov	r4, r0
 8016c8a:	460d      	mov	r5, r1
 8016c8c:	e713      	b.n	8016ab6 <__kernel_rem_pio2+0x2b6>
 8016c8e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8016c92:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8016c96:	f7e9 fcc7 	bl	8000628 <__aeabi_dmul>
 8016c9a:	4602      	mov	r2, r0
 8016c9c:	460b      	mov	r3, r1
 8016c9e:	4620      	mov	r0, r4
 8016ca0:	4629      	mov	r1, r5
 8016ca2:	f7e9 fb0b 	bl	80002bc <__adddf3>
 8016ca6:	3601      	adds	r6, #1
 8016ca8:	4604      	mov	r4, r0
 8016caa:	460d      	mov	r5, r1
 8016cac:	9b04      	ldr	r3, [sp, #16]
 8016cae:	429e      	cmp	r6, r3
 8016cb0:	dc01      	bgt.n	8016cb6 <__kernel_rem_pio2+0x4b6>
 8016cb2:	45b0      	cmp	r8, r6
 8016cb4:	daeb      	bge.n	8016c8e <__kernel_rem_pio2+0x48e>
 8016cb6:	ab48      	add	r3, sp, #288	; 0x120
 8016cb8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8016cbc:	e9c3 4500 	strd	r4, r5, [r3]
 8016cc0:	3f01      	subs	r7, #1
 8016cc2:	f108 0801 	add.w	r8, r8, #1
 8016cc6:	e6ff      	b.n	8016ac8 <__kernel_rem_pio2+0x2c8>
 8016cc8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8016cca:	2b02      	cmp	r3, #2
 8016ccc:	dc0b      	bgt.n	8016ce6 <__kernel_rem_pio2+0x4e6>
 8016cce:	2b00      	cmp	r3, #0
 8016cd0:	dc6e      	bgt.n	8016db0 <__kernel_rem_pio2+0x5b0>
 8016cd2:	d045      	beq.n	8016d60 <__kernel_rem_pio2+0x560>
 8016cd4:	9b07      	ldr	r3, [sp, #28]
 8016cd6:	f003 0007 	and.w	r0, r3, #7
 8016cda:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8016cde:	ecbd 8b02 	vpop	{d8}
 8016ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ce6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8016ce8:	2b03      	cmp	r3, #3
 8016cea:	d1f3      	bne.n	8016cd4 <__kernel_rem_pio2+0x4d4>
 8016cec:	ab48      	add	r3, sp, #288	; 0x120
 8016cee:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8016cf2:	46d0      	mov	r8, sl
 8016cf4:	46d9      	mov	r9, fp
 8016cf6:	f1b9 0f00 	cmp.w	r9, #0
 8016cfa:	f1a8 0808 	sub.w	r8, r8, #8
 8016cfe:	dc64      	bgt.n	8016dca <__kernel_rem_pio2+0x5ca>
 8016d00:	465c      	mov	r4, fp
 8016d02:	2c01      	cmp	r4, #1
 8016d04:	f1aa 0a08 	sub.w	sl, sl, #8
 8016d08:	dc7e      	bgt.n	8016e08 <__kernel_rem_pio2+0x608>
 8016d0a:	2000      	movs	r0, #0
 8016d0c:	2100      	movs	r1, #0
 8016d0e:	f1bb 0f01 	cmp.w	fp, #1
 8016d12:	f300 8097 	bgt.w	8016e44 <__kernel_rem_pio2+0x644>
 8016d16:	9b02      	ldr	r3, [sp, #8]
 8016d18:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8016d1c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	f040 8099 	bne.w	8016e58 <__kernel_rem_pio2+0x658>
 8016d26:	9b01      	ldr	r3, [sp, #4]
 8016d28:	e9c3 5600 	strd	r5, r6, [r3]
 8016d2c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8016d30:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8016d34:	e7ce      	b.n	8016cd4 <__kernel_rem_pio2+0x4d4>
 8016d36:	ab48      	add	r3, sp, #288	; 0x120
 8016d38:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8016d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d40:	f7e9 fabc 	bl	80002bc <__adddf3>
 8016d44:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016d48:	f1bb 0f00 	cmp.w	fp, #0
 8016d4c:	daf3      	bge.n	8016d36 <__kernel_rem_pio2+0x536>
 8016d4e:	9b02      	ldr	r3, [sp, #8]
 8016d50:	b113      	cbz	r3, 8016d58 <__kernel_rem_pio2+0x558>
 8016d52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016d56:	4619      	mov	r1, r3
 8016d58:	9b01      	ldr	r3, [sp, #4]
 8016d5a:	e9c3 0100 	strd	r0, r1, [r3]
 8016d5e:	e7b9      	b.n	8016cd4 <__kernel_rem_pio2+0x4d4>
 8016d60:	2000      	movs	r0, #0
 8016d62:	2100      	movs	r1, #0
 8016d64:	e7f0      	b.n	8016d48 <__kernel_rem_pio2+0x548>
 8016d66:	ab48      	add	r3, sp, #288	; 0x120
 8016d68:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8016d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d70:	f7e9 faa4 	bl	80002bc <__adddf3>
 8016d74:	3c01      	subs	r4, #1
 8016d76:	2c00      	cmp	r4, #0
 8016d78:	daf5      	bge.n	8016d66 <__kernel_rem_pio2+0x566>
 8016d7a:	9b02      	ldr	r3, [sp, #8]
 8016d7c:	b1e3      	cbz	r3, 8016db8 <__kernel_rem_pio2+0x5b8>
 8016d7e:	4602      	mov	r2, r0
 8016d80:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016d84:	9c01      	ldr	r4, [sp, #4]
 8016d86:	e9c4 2300 	strd	r2, r3, [r4]
 8016d8a:	4602      	mov	r2, r0
 8016d8c:	460b      	mov	r3, r1
 8016d8e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8016d92:	f7e9 fa91 	bl	80002b8 <__aeabi_dsub>
 8016d96:	ad4a      	add	r5, sp, #296	; 0x128
 8016d98:	2401      	movs	r4, #1
 8016d9a:	45a3      	cmp	fp, r4
 8016d9c:	da0f      	bge.n	8016dbe <__kernel_rem_pio2+0x5be>
 8016d9e:	9b02      	ldr	r3, [sp, #8]
 8016da0:	b113      	cbz	r3, 8016da8 <__kernel_rem_pio2+0x5a8>
 8016da2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016da6:	4619      	mov	r1, r3
 8016da8:	9b01      	ldr	r3, [sp, #4]
 8016daa:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8016dae:	e791      	b.n	8016cd4 <__kernel_rem_pio2+0x4d4>
 8016db0:	465c      	mov	r4, fp
 8016db2:	2000      	movs	r0, #0
 8016db4:	2100      	movs	r1, #0
 8016db6:	e7de      	b.n	8016d76 <__kernel_rem_pio2+0x576>
 8016db8:	4602      	mov	r2, r0
 8016dba:	460b      	mov	r3, r1
 8016dbc:	e7e2      	b.n	8016d84 <__kernel_rem_pio2+0x584>
 8016dbe:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8016dc2:	f7e9 fa7b 	bl	80002bc <__adddf3>
 8016dc6:	3401      	adds	r4, #1
 8016dc8:	e7e7      	b.n	8016d9a <__kernel_rem_pio2+0x59a>
 8016dca:	e9d8 4500 	ldrd	r4, r5, [r8]
 8016dce:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8016dd2:	4620      	mov	r0, r4
 8016dd4:	4632      	mov	r2, r6
 8016dd6:	463b      	mov	r3, r7
 8016dd8:	4629      	mov	r1, r5
 8016dda:	f7e9 fa6f 	bl	80002bc <__adddf3>
 8016dde:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016de2:	4602      	mov	r2, r0
 8016de4:	460b      	mov	r3, r1
 8016de6:	4620      	mov	r0, r4
 8016de8:	4629      	mov	r1, r5
 8016dea:	f7e9 fa65 	bl	80002b8 <__aeabi_dsub>
 8016dee:	4632      	mov	r2, r6
 8016df0:	463b      	mov	r3, r7
 8016df2:	f7e9 fa63 	bl	80002bc <__adddf3>
 8016df6:	ed9d 7b04 	vldr	d7, [sp, #16]
 8016dfa:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8016dfe:	ed88 7b00 	vstr	d7, [r8]
 8016e02:	f109 39ff 	add.w	r9, r9, #4294967295
 8016e06:	e776      	b.n	8016cf6 <__kernel_rem_pio2+0x4f6>
 8016e08:	e9da 8900 	ldrd	r8, r9, [sl]
 8016e0c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8016e10:	4640      	mov	r0, r8
 8016e12:	4632      	mov	r2, r6
 8016e14:	463b      	mov	r3, r7
 8016e16:	4649      	mov	r1, r9
 8016e18:	f7e9 fa50 	bl	80002bc <__adddf3>
 8016e1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016e20:	4602      	mov	r2, r0
 8016e22:	460b      	mov	r3, r1
 8016e24:	4640      	mov	r0, r8
 8016e26:	4649      	mov	r1, r9
 8016e28:	f7e9 fa46 	bl	80002b8 <__aeabi_dsub>
 8016e2c:	4632      	mov	r2, r6
 8016e2e:	463b      	mov	r3, r7
 8016e30:	f7e9 fa44 	bl	80002bc <__adddf3>
 8016e34:	ed9d 7b04 	vldr	d7, [sp, #16]
 8016e38:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8016e3c:	ed8a 7b00 	vstr	d7, [sl]
 8016e40:	3c01      	subs	r4, #1
 8016e42:	e75e      	b.n	8016d02 <__kernel_rem_pio2+0x502>
 8016e44:	ab48      	add	r3, sp, #288	; 0x120
 8016e46:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8016e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e4e:	f7e9 fa35 	bl	80002bc <__adddf3>
 8016e52:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016e56:	e75a      	b.n	8016d0e <__kernel_rem_pio2+0x50e>
 8016e58:	9b01      	ldr	r3, [sp, #4]
 8016e5a:	9a01      	ldr	r2, [sp, #4]
 8016e5c:	601d      	str	r5, [r3, #0]
 8016e5e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8016e62:	605c      	str	r4, [r3, #4]
 8016e64:	609f      	str	r7, [r3, #8]
 8016e66:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8016e6a:	60d3      	str	r3, [r2, #12]
 8016e6c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016e70:	6110      	str	r0, [r2, #16]
 8016e72:	6153      	str	r3, [r2, #20]
 8016e74:	e72e      	b.n	8016cd4 <__kernel_rem_pio2+0x4d4>
 8016e76:	bf00      	nop
 8016e78:	41700000 	.word	0x41700000
 8016e7c:	3e700000 	.word	0x3e700000

08016e80 <__kernel_sin>:
 8016e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e84:	ed2d 8b04 	vpush	{d8-d9}
 8016e88:	eeb0 8a41 	vmov.f32	s16, s2
 8016e8c:	eef0 8a61 	vmov.f32	s17, s3
 8016e90:	ec55 4b10 	vmov	r4, r5, d0
 8016e94:	b083      	sub	sp, #12
 8016e96:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8016e9a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8016e9e:	9001      	str	r0, [sp, #4]
 8016ea0:	da06      	bge.n	8016eb0 <__kernel_sin+0x30>
 8016ea2:	ee10 0a10 	vmov	r0, s0
 8016ea6:	4629      	mov	r1, r5
 8016ea8:	f7e9 fe6e 	bl	8000b88 <__aeabi_d2iz>
 8016eac:	2800      	cmp	r0, #0
 8016eae:	d051      	beq.n	8016f54 <__kernel_sin+0xd4>
 8016eb0:	4622      	mov	r2, r4
 8016eb2:	462b      	mov	r3, r5
 8016eb4:	4620      	mov	r0, r4
 8016eb6:	4629      	mov	r1, r5
 8016eb8:	f7e9 fbb6 	bl	8000628 <__aeabi_dmul>
 8016ebc:	4682      	mov	sl, r0
 8016ebe:	468b      	mov	fp, r1
 8016ec0:	4602      	mov	r2, r0
 8016ec2:	460b      	mov	r3, r1
 8016ec4:	4620      	mov	r0, r4
 8016ec6:	4629      	mov	r1, r5
 8016ec8:	f7e9 fbae 	bl	8000628 <__aeabi_dmul>
 8016ecc:	a341      	add	r3, pc, #260	; (adr r3, 8016fd4 <__kernel_sin+0x154>)
 8016ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ed2:	4680      	mov	r8, r0
 8016ed4:	4689      	mov	r9, r1
 8016ed6:	4650      	mov	r0, sl
 8016ed8:	4659      	mov	r1, fp
 8016eda:	f7e9 fba5 	bl	8000628 <__aeabi_dmul>
 8016ede:	a33f      	add	r3, pc, #252	; (adr r3, 8016fdc <__kernel_sin+0x15c>)
 8016ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ee4:	f7e9 f9e8 	bl	80002b8 <__aeabi_dsub>
 8016ee8:	4652      	mov	r2, sl
 8016eea:	465b      	mov	r3, fp
 8016eec:	f7e9 fb9c 	bl	8000628 <__aeabi_dmul>
 8016ef0:	a33c      	add	r3, pc, #240	; (adr r3, 8016fe4 <__kernel_sin+0x164>)
 8016ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ef6:	f7e9 f9e1 	bl	80002bc <__adddf3>
 8016efa:	4652      	mov	r2, sl
 8016efc:	465b      	mov	r3, fp
 8016efe:	f7e9 fb93 	bl	8000628 <__aeabi_dmul>
 8016f02:	a33a      	add	r3, pc, #232	; (adr r3, 8016fec <__kernel_sin+0x16c>)
 8016f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f08:	f7e9 f9d6 	bl	80002b8 <__aeabi_dsub>
 8016f0c:	4652      	mov	r2, sl
 8016f0e:	465b      	mov	r3, fp
 8016f10:	f7e9 fb8a 	bl	8000628 <__aeabi_dmul>
 8016f14:	a337      	add	r3, pc, #220	; (adr r3, 8016ff4 <__kernel_sin+0x174>)
 8016f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f1a:	f7e9 f9cf 	bl	80002bc <__adddf3>
 8016f1e:	9b01      	ldr	r3, [sp, #4]
 8016f20:	4606      	mov	r6, r0
 8016f22:	460f      	mov	r7, r1
 8016f24:	b9eb      	cbnz	r3, 8016f62 <__kernel_sin+0xe2>
 8016f26:	4602      	mov	r2, r0
 8016f28:	460b      	mov	r3, r1
 8016f2a:	4650      	mov	r0, sl
 8016f2c:	4659      	mov	r1, fp
 8016f2e:	f7e9 fb7b 	bl	8000628 <__aeabi_dmul>
 8016f32:	a325      	add	r3, pc, #148	; (adr r3, 8016fc8 <__kernel_sin+0x148>)
 8016f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f38:	f7e9 f9be 	bl	80002b8 <__aeabi_dsub>
 8016f3c:	4642      	mov	r2, r8
 8016f3e:	464b      	mov	r3, r9
 8016f40:	f7e9 fb72 	bl	8000628 <__aeabi_dmul>
 8016f44:	4602      	mov	r2, r0
 8016f46:	460b      	mov	r3, r1
 8016f48:	4620      	mov	r0, r4
 8016f4a:	4629      	mov	r1, r5
 8016f4c:	f7e9 f9b6 	bl	80002bc <__adddf3>
 8016f50:	4604      	mov	r4, r0
 8016f52:	460d      	mov	r5, r1
 8016f54:	ec45 4b10 	vmov	d0, r4, r5
 8016f58:	b003      	add	sp, #12
 8016f5a:	ecbd 8b04 	vpop	{d8-d9}
 8016f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f62:	4b1b      	ldr	r3, [pc, #108]	; (8016fd0 <__kernel_sin+0x150>)
 8016f64:	ec51 0b18 	vmov	r0, r1, d8
 8016f68:	2200      	movs	r2, #0
 8016f6a:	f7e9 fb5d 	bl	8000628 <__aeabi_dmul>
 8016f6e:	4632      	mov	r2, r6
 8016f70:	ec41 0b19 	vmov	d9, r0, r1
 8016f74:	463b      	mov	r3, r7
 8016f76:	4640      	mov	r0, r8
 8016f78:	4649      	mov	r1, r9
 8016f7a:	f7e9 fb55 	bl	8000628 <__aeabi_dmul>
 8016f7e:	4602      	mov	r2, r0
 8016f80:	460b      	mov	r3, r1
 8016f82:	ec51 0b19 	vmov	r0, r1, d9
 8016f86:	f7e9 f997 	bl	80002b8 <__aeabi_dsub>
 8016f8a:	4652      	mov	r2, sl
 8016f8c:	465b      	mov	r3, fp
 8016f8e:	f7e9 fb4b 	bl	8000628 <__aeabi_dmul>
 8016f92:	ec53 2b18 	vmov	r2, r3, d8
 8016f96:	f7e9 f98f 	bl	80002b8 <__aeabi_dsub>
 8016f9a:	a30b      	add	r3, pc, #44	; (adr r3, 8016fc8 <__kernel_sin+0x148>)
 8016f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fa0:	4606      	mov	r6, r0
 8016fa2:	460f      	mov	r7, r1
 8016fa4:	4640      	mov	r0, r8
 8016fa6:	4649      	mov	r1, r9
 8016fa8:	f7e9 fb3e 	bl	8000628 <__aeabi_dmul>
 8016fac:	4602      	mov	r2, r0
 8016fae:	460b      	mov	r3, r1
 8016fb0:	4630      	mov	r0, r6
 8016fb2:	4639      	mov	r1, r7
 8016fb4:	f7e9 f982 	bl	80002bc <__adddf3>
 8016fb8:	4602      	mov	r2, r0
 8016fba:	460b      	mov	r3, r1
 8016fbc:	4620      	mov	r0, r4
 8016fbe:	4629      	mov	r1, r5
 8016fc0:	f7e9 f97a 	bl	80002b8 <__aeabi_dsub>
 8016fc4:	e7c4      	b.n	8016f50 <__kernel_sin+0xd0>
 8016fc6:	bf00      	nop
 8016fc8:	55555549 	.word	0x55555549
 8016fcc:	3fc55555 	.word	0x3fc55555
 8016fd0:	3fe00000 	.word	0x3fe00000
 8016fd4:	5acfd57c 	.word	0x5acfd57c
 8016fd8:	3de5d93a 	.word	0x3de5d93a
 8016fdc:	8a2b9ceb 	.word	0x8a2b9ceb
 8016fe0:	3e5ae5e6 	.word	0x3e5ae5e6
 8016fe4:	57b1fe7d 	.word	0x57b1fe7d
 8016fe8:	3ec71de3 	.word	0x3ec71de3
 8016fec:	19c161d5 	.word	0x19c161d5
 8016ff0:	3f2a01a0 	.word	0x3f2a01a0
 8016ff4:	1110f8a6 	.word	0x1110f8a6
 8016ff8:	3f811111 	.word	0x3f811111
 8016ffc:	00000000 	.word	0x00000000

08017000 <atan>:
 8017000:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017004:	ec55 4b10 	vmov	r4, r5, d0
 8017008:	4bc3      	ldr	r3, [pc, #780]	; (8017318 <atan+0x318>)
 801700a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801700e:	429e      	cmp	r6, r3
 8017010:	46ab      	mov	fp, r5
 8017012:	dd18      	ble.n	8017046 <atan+0x46>
 8017014:	4bc1      	ldr	r3, [pc, #772]	; (801731c <atan+0x31c>)
 8017016:	429e      	cmp	r6, r3
 8017018:	dc01      	bgt.n	801701e <atan+0x1e>
 801701a:	d109      	bne.n	8017030 <atan+0x30>
 801701c:	b144      	cbz	r4, 8017030 <atan+0x30>
 801701e:	4622      	mov	r2, r4
 8017020:	462b      	mov	r3, r5
 8017022:	4620      	mov	r0, r4
 8017024:	4629      	mov	r1, r5
 8017026:	f7e9 f949 	bl	80002bc <__adddf3>
 801702a:	4604      	mov	r4, r0
 801702c:	460d      	mov	r5, r1
 801702e:	e006      	b.n	801703e <atan+0x3e>
 8017030:	f1bb 0f00 	cmp.w	fp, #0
 8017034:	f300 8131 	bgt.w	801729a <atan+0x29a>
 8017038:	a59b      	add	r5, pc, #620	; (adr r5, 80172a8 <atan+0x2a8>)
 801703a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801703e:	ec45 4b10 	vmov	d0, r4, r5
 8017042:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017046:	4bb6      	ldr	r3, [pc, #728]	; (8017320 <atan+0x320>)
 8017048:	429e      	cmp	r6, r3
 801704a:	dc14      	bgt.n	8017076 <atan+0x76>
 801704c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8017050:	429e      	cmp	r6, r3
 8017052:	dc0d      	bgt.n	8017070 <atan+0x70>
 8017054:	a396      	add	r3, pc, #600	; (adr r3, 80172b0 <atan+0x2b0>)
 8017056:	e9d3 2300 	ldrd	r2, r3, [r3]
 801705a:	ee10 0a10 	vmov	r0, s0
 801705e:	4629      	mov	r1, r5
 8017060:	f7e9 f92c 	bl	80002bc <__adddf3>
 8017064:	4baf      	ldr	r3, [pc, #700]	; (8017324 <atan+0x324>)
 8017066:	2200      	movs	r2, #0
 8017068:	f7e9 fd6e 	bl	8000b48 <__aeabi_dcmpgt>
 801706c:	2800      	cmp	r0, #0
 801706e:	d1e6      	bne.n	801703e <atan+0x3e>
 8017070:	f04f 3aff 	mov.w	sl, #4294967295
 8017074:	e02b      	b.n	80170ce <atan+0xce>
 8017076:	f000 f963 	bl	8017340 <fabs>
 801707a:	4bab      	ldr	r3, [pc, #684]	; (8017328 <atan+0x328>)
 801707c:	429e      	cmp	r6, r3
 801707e:	ec55 4b10 	vmov	r4, r5, d0
 8017082:	f300 80bf 	bgt.w	8017204 <atan+0x204>
 8017086:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801708a:	429e      	cmp	r6, r3
 801708c:	f300 80a0 	bgt.w	80171d0 <atan+0x1d0>
 8017090:	ee10 2a10 	vmov	r2, s0
 8017094:	ee10 0a10 	vmov	r0, s0
 8017098:	462b      	mov	r3, r5
 801709a:	4629      	mov	r1, r5
 801709c:	f7e9 f90e 	bl	80002bc <__adddf3>
 80170a0:	4ba0      	ldr	r3, [pc, #640]	; (8017324 <atan+0x324>)
 80170a2:	2200      	movs	r2, #0
 80170a4:	f7e9 f908 	bl	80002b8 <__aeabi_dsub>
 80170a8:	2200      	movs	r2, #0
 80170aa:	4606      	mov	r6, r0
 80170ac:	460f      	mov	r7, r1
 80170ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80170b2:	4620      	mov	r0, r4
 80170b4:	4629      	mov	r1, r5
 80170b6:	f7e9 f901 	bl	80002bc <__adddf3>
 80170ba:	4602      	mov	r2, r0
 80170bc:	460b      	mov	r3, r1
 80170be:	4630      	mov	r0, r6
 80170c0:	4639      	mov	r1, r7
 80170c2:	f7e9 fbdb 	bl	800087c <__aeabi_ddiv>
 80170c6:	f04f 0a00 	mov.w	sl, #0
 80170ca:	4604      	mov	r4, r0
 80170cc:	460d      	mov	r5, r1
 80170ce:	4622      	mov	r2, r4
 80170d0:	462b      	mov	r3, r5
 80170d2:	4620      	mov	r0, r4
 80170d4:	4629      	mov	r1, r5
 80170d6:	f7e9 faa7 	bl	8000628 <__aeabi_dmul>
 80170da:	4602      	mov	r2, r0
 80170dc:	460b      	mov	r3, r1
 80170de:	4680      	mov	r8, r0
 80170e0:	4689      	mov	r9, r1
 80170e2:	f7e9 faa1 	bl	8000628 <__aeabi_dmul>
 80170e6:	a374      	add	r3, pc, #464	; (adr r3, 80172b8 <atan+0x2b8>)
 80170e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170ec:	4606      	mov	r6, r0
 80170ee:	460f      	mov	r7, r1
 80170f0:	f7e9 fa9a 	bl	8000628 <__aeabi_dmul>
 80170f4:	a372      	add	r3, pc, #456	; (adr r3, 80172c0 <atan+0x2c0>)
 80170f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170fa:	f7e9 f8df 	bl	80002bc <__adddf3>
 80170fe:	4632      	mov	r2, r6
 8017100:	463b      	mov	r3, r7
 8017102:	f7e9 fa91 	bl	8000628 <__aeabi_dmul>
 8017106:	a370      	add	r3, pc, #448	; (adr r3, 80172c8 <atan+0x2c8>)
 8017108:	e9d3 2300 	ldrd	r2, r3, [r3]
 801710c:	f7e9 f8d6 	bl	80002bc <__adddf3>
 8017110:	4632      	mov	r2, r6
 8017112:	463b      	mov	r3, r7
 8017114:	f7e9 fa88 	bl	8000628 <__aeabi_dmul>
 8017118:	a36d      	add	r3, pc, #436	; (adr r3, 80172d0 <atan+0x2d0>)
 801711a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801711e:	f7e9 f8cd 	bl	80002bc <__adddf3>
 8017122:	4632      	mov	r2, r6
 8017124:	463b      	mov	r3, r7
 8017126:	f7e9 fa7f 	bl	8000628 <__aeabi_dmul>
 801712a:	a36b      	add	r3, pc, #428	; (adr r3, 80172d8 <atan+0x2d8>)
 801712c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017130:	f7e9 f8c4 	bl	80002bc <__adddf3>
 8017134:	4632      	mov	r2, r6
 8017136:	463b      	mov	r3, r7
 8017138:	f7e9 fa76 	bl	8000628 <__aeabi_dmul>
 801713c:	a368      	add	r3, pc, #416	; (adr r3, 80172e0 <atan+0x2e0>)
 801713e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017142:	f7e9 f8bb 	bl	80002bc <__adddf3>
 8017146:	4642      	mov	r2, r8
 8017148:	464b      	mov	r3, r9
 801714a:	f7e9 fa6d 	bl	8000628 <__aeabi_dmul>
 801714e:	a366      	add	r3, pc, #408	; (adr r3, 80172e8 <atan+0x2e8>)
 8017150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017154:	4680      	mov	r8, r0
 8017156:	4689      	mov	r9, r1
 8017158:	4630      	mov	r0, r6
 801715a:	4639      	mov	r1, r7
 801715c:	f7e9 fa64 	bl	8000628 <__aeabi_dmul>
 8017160:	a363      	add	r3, pc, #396	; (adr r3, 80172f0 <atan+0x2f0>)
 8017162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017166:	f7e9 f8a7 	bl	80002b8 <__aeabi_dsub>
 801716a:	4632      	mov	r2, r6
 801716c:	463b      	mov	r3, r7
 801716e:	f7e9 fa5b 	bl	8000628 <__aeabi_dmul>
 8017172:	a361      	add	r3, pc, #388	; (adr r3, 80172f8 <atan+0x2f8>)
 8017174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017178:	f7e9 f89e 	bl	80002b8 <__aeabi_dsub>
 801717c:	4632      	mov	r2, r6
 801717e:	463b      	mov	r3, r7
 8017180:	f7e9 fa52 	bl	8000628 <__aeabi_dmul>
 8017184:	a35e      	add	r3, pc, #376	; (adr r3, 8017300 <atan+0x300>)
 8017186:	e9d3 2300 	ldrd	r2, r3, [r3]
 801718a:	f7e9 f895 	bl	80002b8 <__aeabi_dsub>
 801718e:	4632      	mov	r2, r6
 8017190:	463b      	mov	r3, r7
 8017192:	f7e9 fa49 	bl	8000628 <__aeabi_dmul>
 8017196:	a35c      	add	r3, pc, #368	; (adr r3, 8017308 <atan+0x308>)
 8017198:	e9d3 2300 	ldrd	r2, r3, [r3]
 801719c:	f7e9 f88c 	bl	80002b8 <__aeabi_dsub>
 80171a0:	4632      	mov	r2, r6
 80171a2:	463b      	mov	r3, r7
 80171a4:	f7e9 fa40 	bl	8000628 <__aeabi_dmul>
 80171a8:	4602      	mov	r2, r0
 80171aa:	460b      	mov	r3, r1
 80171ac:	4640      	mov	r0, r8
 80171ae:	4649      	mov	r1, r9
 80171b0:	f7e9 f884 	bl	80002bc <__adddf3>
 80171b4:	4622      	mov	r2, r4
 80171b6:	462b      	mov	r3, r5
 80171b8:	f7e9 fa36 	bl	8000628 <__aeabi_dmul>
 80171bc:	f1ba 3fff 	cmp.w	sl, #4294967295
 80171c0:	4602      	mov	r2, r0
 80171c2:	460b      	mov	r3, r1
 80171c4:	d14b      	bne.n	801725e <atan+0x25e>
 80171c6:	4620      	mov	r0, r4
 80171c8:	4629      	mov	r1, r5
 80171ca:	f7e9 f875 	bl	80002b8 <__aeabi_dsub>
 80171ce:	e72c      	b.n	801702a <atan+0x2a>
 80171d0:	ee10 0a10 	vmov	r0, s0
 80171d4:	4b53      	ldr	r3, [pc, #332]	; (8017324 <atan+0x324>)
 80171d6:	2200      	movs	r2, #0
 80171d8:	4629      	mov	r1, r5
 80171da:	f7e9 f86d 	bl	80002b8 <__aeabi_dsub>
 80171de:	4b51      	ldr	r3, [pc, #324]	; (8017324 <atan+0x324>)
 80171e0:	4606      	mov	r6, r0
 80171e2:	460f      	mov	r7, r1
 80171e4:	2200      	movs	r2, #0
 80171e6:	4620      	mov	r0, r4
 80171e8:	4629      	mov	r1, r5
 80171ea:	f7e9 f867 	bl	80002bc <__adddf3>
 80171ee:	4602      	mov	r2, r0
 80171f0:	460b      	mov	r3, r1
 80171f2:	4630      	mov	r0, r6
 80171f4:	4639      	mov	r1, r7
 80171f6:	f7e9 fb41 	bl	800087c <__aeabi_ddiv>
 80171fa:	f04f 0a01 	mov.w	sl, #1
 80171fe:	4604      	mov	r4, r0
 8017200:	460d      	mov	r5, r1
 8017202:	e764      	b.n	80170ce <atan+0xce>
 8017204:	4b49      	ldr	r3, [pc, #292]	; (801732c <atan+0x32c>)
 8017206:	429e      	cmp	r6, r3
 8017208:	da1d      	bge.n	8017246 <atan+0x246>
 801720a:	ee10 0a10 	vmov	r0, s0
 801720e:	4b48      	ldr	r3, [pc, #288]	; (8017330 <atan+0x330>)
 8017210:	2200      	movs	r2, #0
 8017212:	4629      	mov	r1, r5
 8017214:	f7e9 f850 	bl	80002b8 <__aeabi_dsub>
 8017218:	4b45      	ldr	r3, [pc, #276]	; (8017330 <atan+0x330>)
 801721a:	4606      	mov	r6, r0
 801721c:	460f      	mov	r7, r1
 801721e:	2200      	movs	r2, #0
 8017220:	4620      	mov	r0, r4
 8017222:	4629      	mov	r1, r5
 8017224:	f7e9 fa00 	bl	8000628 <__aeabi_dmul>
 8017228:	4b3e      	ldr	r3, [pc, #248]	; (8017324 <atan+0x324>)
 801722a:	2200      	movs	r2, #0
 801722c:	f7e9 f846 	bl	80002bc <__adddf3>
 8017230:	4602      	mov	r2, r0
 8017232:	460b      	mov	r3, r1
 8017234:	4630      	mov	r0, r6
 8017236:	4639      	mov	r1, r7
 8017238:	f7e9 fb20 	bl	800087c <__aeabi_ddiv>
 801723c:	f04f 0a02 	mov.w	sl, #2
 8017240:	4604      	mov	r4, r0
 8017242:	460d      	mov	r5, r1
 8017244:	e743      	b.n	80170ce <atan+0xce>
 8017246:	462b      	mov	r3, r5
 8017248:	ee10 2a10 	vmov	r2, s0
 801724c:	4939      	ldr	r1, [pc, #228]	; (8017334 <atan+0x334>)
 801724e:	2000      	movs	r0, #0
 8017250:	f7e9 fb14 	bl	800087c <__aeabi_ddiv>
 8017254:	f04f 0a03 	mov.w	sl, #3
 8017258:	4604      	mov	r4, r0
 801725a:	460d      	mov	r5, r1
 801725c:	e737      	b.n	80170ce <atan+0xce>
 801725e:	4b36      	ldr	r3, [pc, #216]	; (8017338 <atan+0x338>)
 8017260:	4e36      	ldr	r6, [pc, #216]	; (801733c <atan+0x33c>)
 8017262:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8017266:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 801726a:	e9da 2300 	ldrd	r2, r3, [sl]
 801726e:	f7e9 f823 	bl	80002b8 <__aeabi_dsub>
 8017272:	4622      	mov	r2, r4
 8017274:	462b      	mov	r3, r5
 8017276:	f7e9 f81f 	bl	80002b8 <__aeabi_dsub>
 801727a:	4602      	mov	r2, r0
 801727c:	460b      	mov	r3, r1
 801727e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8017282:	f7e9 f819 	bl	80002b8 <__aeabi_dsub>
 8017286:	f1bb 0f00 	cmp.w	fp, #0
 801728a:	4604      	mov	r4, r0
 801728c:	460d      	mov	r5, r1
 801728e:	f6bf aed6 	bge.w	801703e <atan+0x3e>
 8017292:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017296:	461d      	mov	r5, r3
 8017298:	e6d1      	b.n	801703e <atan+0x3e>
 801729a:	a51d      	add	r5, pc, #116	; (adr r5, 8017310 <atan+0x310>)
 801729c:	e9d5 4500 	ldrd	r4, r5, [r5]
 80172a0:	e6cd      	b.n	801703e <atan+0x3e>
 80172a2:	bf00      	nop
 80172a4:	f3af 8000 	nop.w
 80172a8:	54442d18 	.word	0x54442d18
 80172ac:	bff921fb 	.word	0xbff921fb
 80172b0:	8800759c 	.word	0x8800759c
 80172b4:	7e37e43c 	.word	0x7e37e43c
 80172b8:	e322da11 	.word	0xe322da11
 80172bc:	3f90ad3a 	.word	0x3f90ad3a
 80172c0:	24760deb 	.word	0x24760deb
 80172c4:	3fa97b4b 	.word	0x3fa97b4b
 80172c8:	a0d03d51 	.word	0xa0d03d51
 80172cc:	3fb10d66 	.word	0x3fb10d66
 80172d0:	c54c206e 	.word	0xc54c206e
 80172d4:	3fb745cd 	.word	0x3fb745cd
 80172d8:	920083ff 	.word	0x920083ff
 80172dc:	3fc24924 	.word	0x3fc24924
 80172e0:	5555550d 	.word	0x5555550d
 80172e4:	3fd55555 	.word	0x3fd55555
 80172e8:	2c6a6c2f 	.word	0x2c6a6c2f
 80172ec:	bfa2b444 	.word	0xbfa2b444
 80172f0:	52defd9a 	.word	0x52defd9a
 80172f4:	3fadde2d 	.word	0x3fadde2d
 80172f8:	af749a6d 	.word	0xaf749a6d
 80172fc:	3fb3b0f2 	.word	0x3fb3b0f2
 8017300:	fe231671 	.word	0xfe231671
 8017304:	3fbc71c6 	.word	0x3fbc71c6
 8017308:	9998ebc4 	.word	0x9998ebc4
 801730c:	3fc99999 	.word	0x3fc99999
 8017310:	54442d18 	.word	0x54442d18
 8017314:	3ff921fb 	.word	0x3ff921fb
 8017318:	440fffff 	.word	0x440fffff
 801731c:	7ff00000 	.word	0x7ff00000
 8017320:	3fdbffff 	.word	0x3fdbffff
 8017324:	3ff00000 	.word	0x3ff00000
 8017328:	3ff2ffff 	.word	0x3ff2ffff
 801732c:	40038000 	.word	0x40038000
 8017330:	3ff80000 	.word	0x3ff80000
 8017334:	bff00000 	.word	0xbff00000
 8017338:	08019128 	.word	0x08019128
 801733c:	08019108 	.word	0x08019108

08017340 <fabs>:
 8017340:	ec51 0b10 	vmov	r0, r1, d0
 8017344:	ee10 2a10 	vmov	r2, s0
 8017348:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801734c:	ec43 2b10 	vmov	d0, r2, r3
 8017350:	4770      	bx	lr
 8017352:	0000      	movs	r0, r0
 8017354:	0000      	movs	r0, r0
	...

08017358 <floor>:
 8017358:	ec51 0b10 	vmov	r0, r1, d0
 801735c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017360:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8017364:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8017368:	2e13      	cmp	r6, #19
 801736a:	ee10 5a10 	vmov	r5, s0
 801736e:	ee10 8a10 	vmov	r8, s0
 8017372:	460c      	mov	r4, r1
 8017374:	dc32      	bgt.n	80173dc <floor+0x84>
 8017376:	2e00      	cmp	r6, #0
 8017378:	da14      	bge.n	80173a4 <floor+0x4c>
 801737a:	a333      	add	r3, pc, #204	; (adr r3, 8017448 <floor+0xf0>)
 801737c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017380:	f7e8 ff9c 	bl	80002bc <__adddf3>
 8017384:	2200      	movs	r2, #0
 8017386:	2300      	movs	r3, #0
 8017388:	f7e9 fbde 	bl	8000b48 <__aeabi_dcmpgt>
 801738c:	b138      	cbz	r0, 801739e <floor+0x46>
 801738e:	2c00      	cmp	r4, #0
 8017390:	da57      	bge.n	8017442 <floor+0xea>
 8017392:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8017396:	431d      	orrs	r5, r3
 8017398:	d001      	beq.n	801739e <floor+0x46>
 801739a:	4c2d      	ldr	r4, [pc, #180]	; (8017450 <floor+0xf8>)
 801739c:	2500      	movs	r5, #0
 801739e:	4621      	mov	r1, r4
 80173a0:	4628      	mov	r0, r5
 80173a2:	e025      	b.n	80173f0 <floor+0x98>
 80173a4:	4f2b      	ldr	r7, [pc, #172]	; (8017454 <floor+0xfc>)
 80173a6:	4137      	asrs	r7, r6
 80173a8:	ea01 0307 	and.w	r3, r1, r7
 80173ac:	4303      	orrs	r3, r0
 80173ae:	d01f      	beq.n	80173f0 <floor+0x98>
 80173b0:	a325      	add	r3, pc, #148	; (adr r3, 8017448 <floor+0xf0>)
 80173b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173b6:	f7e8 ff81 	bl	80002bc <__adddf3>
 80173ba:	2200      	movs	r2, #0
 80173bc:	2300      	movs	r3, #0
 80173be:	f7e9 fbc3 	bl	8000b48 <__aeabi_dcmpgt>
 80173c2:	2800      	cmp	r0, #0
 80173c4:	d0eb      	beq.n	801739e <floor+0x46>
 80173c6:	2c00      	cmp	r4, #0
 80173c8:	bfbe      	ittt	lt
 80173ca:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80173ce:	fa43 f606 	asrlt.w	r6, r3, r6
 80173d2:	19a4      	addlt	r4, r4, r6
 80173d4:	ea24 0407 	bic.w	r4, r4, r7
 80173d8:	2500      	movs	r5, #0
 80173da:	e7e0      	b.n	801739e <floor+0x46>
 80173dc:	2e33      	cmp	r6, #51	; 0x33
 80173de:	dd0b      	ble.n	80173f8 <floor+0xa0>
 80173e0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80173e4:	d104      	bne.n	80173f0 <floor+0x98>
 80173e6:	ee10 2a10 	vmov	r2, s0
 80173ea:	460b      	mov	r3, r1
 80173ec:	f7e8 ff66 	bl	80002bc <__adddf3>
 80173f0:	ec41 0b10 	vmov	d0, r0, r1
 80173f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173f8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80173fc:	f04f 33ff 	mov.w	r3, #4294967295
 8017400:	fa23 f707 	lsr.w	r7, r3, r7
 8017404:	4207      	tst	r7, r0
 8017406:	d0f3      	beq.n	80173f0 <floor+0x98>
 8017408:	a30f      	add	r3, pc, #60	; (adr r3, 8017448 <floor+0xf0>)
 801740a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801740e:	f7e8 ff55 	bl	80002bc <__adddf3>
 8017412:	2200      	movs	r2, #0
 8017414:	2300      	movs	r3, #0
 8017416:	f7e9 fb97 	bl	8000b48 <__aeabi_dcmpgt>
 801741a:	2800      	cmp	r0, #0
 801741c:	d0bf      	beq.n	801739e <floor+0x46>
 801741e:	2c00      	cmp	r4, #0
 8017420:	da02      	bge.n	8017428 <floor+0xd0>
 8017422:	2e14      	cmp	r6, #20
 8017424:	d103      	bne.n	801742e <floor+0xd6>
 8017426:	3401      	adds	r4, #1
 8017428:	ea25 0507 	bic.w	r5, r5, r7
 801742c:	e7b7      	b.n	801739e <floor+0x46>
 801742e:	2301      	movs	r3, #1
 8017430:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8017434:	fa03 f606 	lsl.w	r6, r3, r6
 8017438:	4435      	add	r5, r6
 801743a:	4545      	cmp	r5, r8
 801743c:	bf38      	it	cc
 801743e:	18e4      	addcc	r4, r4, r3
 8017440:	e7f2      	b.n	8017428 <floor+0xd0>
 8017442:	2500      	movs	r5, #0
 8017444:	462c      	mov	r4, r5
 8017446:	e7aa      	b.n	801739e <floor+0x46>
 8017448:	8800759c 	.word	0x8800759c
 801744c:	7e37e43c 	.word	0x7e37e43c
 8017450:	bff00000 	.word	0xbff00000
 8017454:	000fffff 	.word	0x000fffff

08017458 <scalbn>:
 8017458:	b570      	push	{r4, r5, r6, lr}
 801745a:	ec55 4b10 	vmov	r4, r5, d0
 801745e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8017462:	4606      	mov	r6, r0
 8017464:	462b      	mov	r3, r5
 8017466:	b99a      	cbnz	r2, 8017490 <scalbn+0x38>
 8017468:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801746c:	4323      	orrs	r3, r4
 801746e:	d036      	beq.n	80174de <scalbn+0x86>
 8017470:	4b39      	ldr	r3, [pc, #228]	; (8017558 <scalbn+0x100>)
 8017472:	4629      	mov	r1, r5
 8017474:	ee10 0a10 	vmov	r0, s0
 8017478:	2200      	movs	r2, #0
 801747a:	f7e9 f8d5 	bl	8000628 <__aeabi_dmul>
 801747e:	4b37      	ldr	r3, [pc, #220]	; (801755c <scalbn+0x104>)
 8017480:	429e      	cmp	r6, r3
 8017482:	4604      	mov	r4, r0
 8017484:	460d      	mov	r5, r1
 8017486:	da10      	bge.n	80174aa <scalbn+0x52>
 8017488:	a32b      	add	r3, pc, #172	; (adr r3, 8017538 <scalbn+0xe0>)
 801748a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801748e:	e03a      	b.n	8017506 <scalbn+0xae>
 8017490:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8017494:	428a      	cmp	r2, r1
 8017496:	d10c      	bne.n	80174b2 <scalbn+0x5a>
 8017498:	ee10 2a10 	vmov	r2, s0
 801749c:	4620      	mov	r0, r4
 801749e:	4629      	mov	r1, r5
 80174a0:	f7e8 ff0c 	bl	80002bc <__adddf3>
 80174a4:	4604      	mov	r4, r0
 80174a6:	460d      	mov	r5, r1
 80174a8:	e019      	b.n	80174de <scalbn+0x86>
 80174aa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80174ae:	460b      	mov	r3, r1
 80174b0:	3a36      	subs	r2, #54	; 0x36
 80174b2:	4432      	add	r2, r6
 80174b4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80174b8:	428a      	cmp	r2, r1
 80174ba:	dd08      	ble.n	80174ce <scalbn+0x76>
 80174bc:	2d00      	cmp	r5, #0
 80174be:	a120      	add	r1, pc, #128	; (adr r1, 8017540 <scalbn+0xe8>)
 80174c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80174c4:	da1c      	bge.n	8017500 <scalbn+0xa8>
 80174c6:	a120      	add	r1, pc, #128	; (adr r1, 8017548 <scalbn+0xf0>)
 80174c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80174cc:	e018      	b.n	8017500 <scalbn+0xa8>
 80174ce:	2a00      	cmp	r2, #0
 80174d0:	dd08      	ble.n	80174e4 <scalbn+0x8c>
 80174d2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80174d6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80174da:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80174de:	ec45 4b10 	vmov	d0, r4, r5
 80174e2:	bd70      	pop	{r4, r5, r6, pc}
 80174e4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80174e8:	da19      	bge.n	801751e <scalbn+0xc6>
 80174ea:	f24c 3350 	movw	r3, #50000	; 0xc350
 80174ee:	429e      	cmp	r6, r3
 80174f0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80174f4:	dd0a      	ble.n	801750c <scalbn+0xb4>
 80174f6:	a112      	add	r1, pc, #72	; (adr r1, 8017540 <scalbn+0xe8>)
 80174f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80174fc:	2b00      	cmp	r3, #0
 80174fe:	d1e2      	bne.n	80174c6 <scalbn+0x6e>
 8017500:	a30f      	add	r3, pc, #60	; (adr r3, 8017540 <scalbn+0xe8>)
 8017502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017506:	f7e9 f88f 	bl	8000628 <__aeabi_dmul>
 801750a:	e7cb      	b.n	80174a4 <scalbn+0x4c>
 801750c:	a10a      	add	r1, pc, #40	; (adr r1, 8017538 <scalbn+0xe0>)
 801750e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017512:	2b00      	cmp	r3, #0
 8017514:	d0b8      	beq.n	8017488 <scalbn+0x30>
 8017516:	a10e      	add	r1, pc, #56	; (adr r1, 8017550 <scalbn+0xf8>)
 8017518:	e9d1 0100 	ldrd	r0, r1, [r1]
 801751c:	e7b4      	b.n	8017488 <scalbn+0x30>
 801751e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017522:	3236      	adds	r2, #54	; 0x36
 8017524:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8017528:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801752c:	4620      	mov	r0, r4
 801752e:	4b0c      	ldr	r3, [pc, #48]	; (8017560 <scalbn+0x108>)
 8017530:	2200      	movs	r2, #0
 8017532:	e7e8      	b.n	8017506 <scalbn+0xae>
 8017534:	f3af 8000 	nop.w
 8017538:	c2f8f359 	.word	0xc2f8f359
 801753c:	01a56e1f 	.word	0x01a56e1f
 8017540:	8800759c 	.word	0x8800759c
 8017544:	7e37e43c 	.word	0x7e37e43c
 8017548:	8800759c 	.word	0x8800759c
 801754c:	fe37e43c 	.word	0xfe37e43c
 8017550:	c2f8f359 	.word	0xc2f8f359
 8017554:	81a56e1f 	.word	0x81a56e1f
 8017558:	43500000 	.word	0x43500000
 801755c:	ffff3cb0 	.word	0xffff3cb0
 8017560:	3c900000 	.word	0x3c900000

08017564 <_init>:
 8017564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017566:	bf00      	nop
 8017568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801756a:	bc08      	pop	{r3}
 801756c:	469e      	mov	lr, r3
 801756e:	4770      	bx	lr

08017570 <_fini>:
 8017570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017572:	bf00      	nop
 8017574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017576:	bc08      	pop	{r3}
 8017578:	469e      	mov	lr, r3
 801757a:	4770      	bx	lr
