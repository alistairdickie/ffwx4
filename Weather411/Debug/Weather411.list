
Weather411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017a0c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001bb8  08017bb0  08017bb0  00027bb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019768  08019768  00030258  2**0
                  CONTENTS
  4 .ARM          00000008  08019768  08019768  00029768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019770  08019770  00030258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019770  08019770  00029770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019774  08019774  00029774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000258  20000000  08019778  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000078dc  20000258  080199d0  00030258  2**3
                  ALLOC
 10 ._user_heap_stack 00002404  20007b34  080199d0  00037b34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030258  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021cd2  00000000  00000000  00030288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f95  00000000  00000000  00051f5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d30  00000000  00000000  00056ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b58  00000000  00000000  00058c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f282  00000000  00000000  0005a778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000260c6  00000000  00000000  000799fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ac539  00000000  00000000  0009fac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014bff9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000096d8  00000000  00000000  0014c04c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000258 	.word	0x20000258
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08017b94 	.word	0x08017b94

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000025c 	.word	0x2000025c
 80001dc:	08017b94 	.word	0x08017b94

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_ldivmod>:
 8000cb8:	b97b      	cbnz	r3, 8000cda <__aeabi_ldivmod+0x22>
 8000cba:	b972      	cbnz	r2, 8000cda <__aeabi_ldivmod+0x22>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bfbe      	ittt	lt
 8000cc0:	2000      	movlt	r0, #0
 8000cc2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cc6:	e006      	blt.n	8000cd6 <__aeabi_ldivmod+0x1e>
 8000cc8:	bf08      	it	eq
 8000cca:	2800      	cmpeq	r0, #0
 8000ccc:	bf1c      	itt	ne
 8000cce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cd2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd6:	f000 b9f5 	b.w	80010c4 <__aeabi_idiv0>
 8000cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	db09      	blt.n	8000cfa <__aeabi_ldivmod+0x42>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db1a      	blt.n	8000d20 <__aeabi_ldivmod+0x68>
 8000cea:	f000 f883 	bl	8000df4 <__udivmoddi4>
 8000cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf6:	b004      	add	sp, #16
 8000cf8:	4770      	bx	lr
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db1b      	blt.n	8000d3c <__aeabi_ldivmod+0x84>
 8000d04:	f000 f876 	bl	8000df4 <__udivmoddi4>
 8000d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d10:	b004      	add	sp, #16
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	4252      	negs	r2, r2
 8000d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f865 	bl	8000df4 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4240      	negs	r0, r0
 8000d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3a:	4770      	bx	lr
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d42:	f000 f857 	bl	8000df4 <__udivmoddi4>
 8000d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d4e:	b004      	add	sp, #16
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_uldivmod>:
 8000d58:	b953      	cbnz	r3, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5a:	b94a      	cbnz	r2, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5c:	2900      	cmp	r1, #0
 8000d5e:	bf08      	it	eq
 8000d60:	2800      	cmpeq	r0, #0
 8000d62:	bf1c      	itt	ne
 8000d64:	f04f 31ff 	movne.w	r1, #4294967295
 8000d68:	f04f 30ff 	movne.w	r0, #4294967295
 8000d6c:	f000 b9aa 	b.w	80010c4 <__aeabi_idiv0>
 8000d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d78:	f000 f83c 	bl	8000df4 <__udivmoddi4>
 8000d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d84:	b004      	add	sp, #16
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_d2lz>:
 8000d88:	b538      	push	{r3, r4, r5, lr}
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	4604      	mov	r4, r0
 8000d90:	460d      	mov	r5, r1
 8000d92:	f7ff febb 	bl	8000b0c <__aeabi_dcmplt>
 8000d96:	b928      	cbnz	r0, 8000da4 <__aeabi_d2lz+0x1c>
 8000d98:	4620      	mov	r0, r4
 8000d9a:	4629      	mov	r1, r5
 8000d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000da0:	f000 b80a 	b.w	8000db8 <__aeabi_d2ulz>
 8000da4:	4620      	mov	r0, r4
 8000da6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000daa:	f000 f805 	bl	8000db8 <__aeabi_d2ulz>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	bd38      	pop	{r3, r4, r5, pc}
 8000db6:	bf00      	nop

08000db8 <__aeabi_d2ulz>:
 8000db8:	b5d0      	push	{r4, r6, r7, lr}
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <__aeabi_d2ulz+0x34>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	4606      	mov	r6, r0
 8000dc0:	460f      	mov	r7, r1
 8000dc2:	f7ff fc31 	bl	8000628 <__aeabi_dmul>
 8000dc6:	f7ff ff07 	bl	8000bd8 <__aeabi_d2uiz>
 8000dca:	4604      	mov	r4, r0
 8000dcc:	f7ff fbb2 	bl	8000534 <__aeabi_ui2d>
 8000dd0:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <__aeabi_d2ulz+0x38>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f7ff fc28 	bl	8000628 <__aeabi_dmul>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4630      	mov	r0, r6
 8000dde:	4639      	mov	r1, r7
 8000de0:	f7ff fa6a 	bl	80002b8 <__aeabi_dsub>
 8000de4:	f7ff fef8 	bl	8000bd8 <__aeabi_d2uiz>
 8000de8:	4621      	mov	r1, r4
 8000dea:	bdd0      	pop	{r4, r6, r7, pc}
 8000dec:	3df00000 	.word	0x3df00000
 8000df0:	41f00000 	.word	0x41f00000

08000df4 <__udivmoddi4>:
 8000df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df8:	9d08      	ldr	r5, [sp, #32]
 8000dfa:	4604      	mov	r4, r0
 8000dfc:	468e      	mov	lr, r1
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d14d      	bne.n	8000e9e <__udivmoddi4+0xaa>
 8000e02:	428a      	cmp	r2, r1
 8000e04:	4694      	mov	ip, r2
 8000e06:	d969      	bls.n	8000edc <__udivmoddi4+0xe8>
 8000e08:	fab2 f282 	clz	r2, r2
 8000e0c:	b152      	cbz	r2, 8000e24 <__udivmoddi4+0x30>
 8000e0e:	fa01 f302 	lsl.w	r3, r1, r2
 8000e12:	f1c2 0120 	rsb	r1, r2, #32
 8000e16:	fa20 f101 	lsr.w	r1, r0, r1
 8000e1a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1e:	ea41 0e03 	orr.w	lr, r1, r3
 8000e22:	4094      	lsls	r4, r2
 8000e24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e28:	0c21      	lsrs	r1, r4, #16
 8000e2a:	fbbe f6f8 	udiv	r6, lr, r8
 8000e2e:	fa1f f78c 	uxth.w	r7, ip
 8000e32:	fb08 e316 	mls	r3, r8, r6, lr
 8000e36:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e3a:	fb06 f107 	mul.w	r1, r6, r7
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d90a      	bls.n	8000e58 <__udivmoddi4+0x64>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e4a:	f080 811f 	bcs.w	800108c <__udivmoddi4+0x298>
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	f240 811c 	bls.w	800108c <__udivmoddi4+0x298>
 8000e54:	3e02      	subs	r6, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1a5b      	subs	r3, r3, r1
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e60:	fb08 3310 	mls	r3, r8, r0, r3
 8000e64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e68:	fb00 f707 	mul.w	r7, r0, r7
 8000e6c:	42a7      	cmp	r7, r4
 8000e6e:	d90a      	bls.n	8000e86 <__udivmoddi4+0x92>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e78:	f080 810a 	bcs.w	8001090 <__udivmoddi4+0x29c>
 8000e7c:	42a7      	cmp	r7, r4
 8000e7e:	f240 8107 	bls.w	8001090 <__udivmoddi4+0x29c>
 8000e82:	4464      	add	r4, ip
 8000e84:	3802      	subs	r0, #2
 8000e86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e8a:	1be4      	subs	r4, r4, r7
 8000e8c:	2600      	movs	r6, #0
 8000e8e:	b11d      	cbz	r5, 8000e98 <__udivmoddi4+0xa4>
 8000e90:	40d4      	lsrs	r4, r2
 8000e92:	2300      	movs	r3, #0
 8000e94:	e9c5 4300 	strd	r4, r3, [r5]
 8000e98:	4631      	mov	r1, r6
 8000e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	d909      	bls.n	8000eb6 <__udivmoddi4+0xc2>
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	f000 80ef 	beq.w	8001086 <__udivmoddi4+0x292>
 8000ea8:	2600      	movs	r6, #0
 8000eaa:	e9c5 0100 	strd	r0, r1, [r5]
 8000eae:	4630      	mov	r0, r6
 8000eb0:	4631      	mov	r1, r6
 8000eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb6:	fab3 f683 	clz	r6, r3
 8000eba:	2e00      	cmp	r6, #0
 8000ebc:	d14a      	bne.n	8000f54 <__udivmoddi4+0x160>
 8000ebe:	428b      	cmp	r3, r1
 8000ec0:	d302      	bcc.n	8000ec8 <__udivmoddi4+0xd4>
 8000ec2:	4282      	cmp	r2, r0
 8000ec4:	f200 80f9 	bhi.w	80010ba <__udivmoddi4+0x2c6>
 8000ec8:	1a84      	subs	r4, r0, r2
 8000eca:	eb61 0303 	sbc.w	r3, r1, r3
 8000ece:	2001      	movs	r0, #1
 8000ed0:	469e      	mov	lr, r3
 8000ed2:	2d00      	cmp	r5, #0
 8000ed4:	d0e0      	beq.n	8000e98 <__udivmoddi4+0xa4>
 8000ed6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eda:	e7dd      	b.n	8000e98 <__udivmoddi4+0xa4>
 8000edc:	b902      	cbnz	r2, 8000ee0 <__udivmoddi4+0xec>
 8000ede:	deff      	udf	#255	; 0xff
 8000ee0:	fab2 f282 	clz	r2, r2
 8000ee4:	2a00      	cmp	r2, #0
 8000ee6:	f040 8092 	bne.w	800100e <__udivmoddi4+0x21a>
 8000eea:	eba1 010c 	sub.w	r1, r1, ip
 8000eee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef2:	fa1f fe8c 	uxth.w	lr, ip
 8000ef6:	2601      	movs	r6, #1
 8000ef8:	0c20      	lsrs	r0, r4, #16
 8000efa:	fbb1 f3f7 	udiv	r3, r1, r7
 8000efe:	fb07 1113 	mls	r1, r7, r3, r1
 8000f02:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f06:	fb0e f003 	mul.w	r0, lr, r3
 8000f0a:	4288      	cmp	r0, r1
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x12c>
 8000f0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f12:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f16:	d202      	bcs.n	8000f1e <__udivmoddi4+0x12a>
 8000f18:	4288      	cmp	r0, r1
 8000f1a:	f200 80cb 	bhi.w	80010b4 <__udivmoddi4+0x2c0>
 8000f1e:	4643      	mov	r3, r8
 8000f20:	1a09      	subs	r1, r1, r0
 8000f22:	b2a4      	uxth	r4, r4
 8000f24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f28:	fb07 1110 	mls	r1, r7, r0, r1
 8000f2c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f30:	fb0e fe00 	mul.w	lr, lr, r0
 8000f34:	45a6      	cmp	lr, r4
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x156>
 8000f38:	eb1c 0404 	adds.w	r4, ip, r4
 8000f3c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f40:	d202      	bcs.n	8000f48 <__udivmoddi4+0x154>
 8000f42:	45a6      	cmp	lr, r4
 8000f44:	f200 80bb 	bhi.w	80010be <__udivmoddi4+0x2ca>
 8000f48:	4608      	mov	r0, r1
 8000f4a:	eba4 040e 	sub.w	r4, r4, lr
 8000f4e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f52:	e79c      	b.n	8000e8e <__udivmoddi4+0x9a>
 8000f54:	f1c6 0720 	rsb	r7, r6, #32
 8000f58:	40b3      	lsls	r3, r6
 8000f5a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f5e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f62:	fa20 f407 	lsr.w	r4, r0, r7
 8000f66:	fa01 f306 	lsl.w	r3, r1, r6
 8000f6a:	431c      	orrs	r4, r3
 8000f6c:	40f9      	lsrs	r1, r7
 8000f6e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f72:	fa00 f306 	lsl.w	r3, r0, r6
 8000f76:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f7a:	0c20      	lsrs	r0, r4, #16
 8000f7c:	fa1f fe8c 	uxth.w	lr, ip
 8000f80:	fb09 1118 	mls	r1, r9, r8, r1
 8000f84:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f88:	fb08 f00e 	mul.w	r0, r8, lr
 8000f8c:	4288      	cmp	r0, r1
 8000f8e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f92:	d90b      	bls.n	8000fac <__udivmoddi4+0x1b8>
 8000f94:	eb1c 0101 	adds.w	r1, ip, r1
 8000f98:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f9c:	f080 8088 	bcs.w	80010b0 <__udivmoddi4+0x2bc>
 8000fa0:	4288      	cmp	r0, r1
 8000fa2:	f240 8085 	bls.w	80010b0 <__udivmoddi4+0x2bc>
 8000fa6:	f1a8 0802 	sub.w	r8, r8, #2
 8000faa:	4461      	add	r1, ip
 8000fac:	1a09      	subs	r1, r1, r0
 8000fae:	b2a4      	uxth	r4, r4
 8000fb0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000fb4:	fb09 1110 	mls	r1, r9, r0, r1
 8000fb8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fbc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fc0:	458e      	cmp	lr, r1
 8000fc2:	d908      	bls.n	8000fd6 <__udivmoddi4+0x1e2>
 8000fc4:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fcc:	d26c      	bcs.n	80010a8 <__udivmoddi4+0x2b4>
 8000fce:	458e      	cmp	lr, r1
 8000fd0:	d96a      	bls.n	80010a8 <__udivmoddi4+0x2b4>
 8000fd2:	3802      	subs	r0, #2
 8000fd4:	4461      	add	r1, ip
 8000fd6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fda:	fba0 9402 	umull	r9, r4, r0, r2
 8000fde:	eba1 010e 	sub.w	r1, r1, lr
 8000fe2:	42a1      	cmp	r1, r4
 8000fe4:	46c8      	mov	r8, r9
 8000fe6:	46a6      	mov	lr, r4
 8000fe8:	d356      	bcc.n	8001098 <__udivmoddi4+0x2a4>
 8000fea:	d053      	beq.n	8001094 <__udivmoddi4+0x2a0>
 8000fec:	b15d      	cbz	r5, 8001006 <__udivmoddi4+0x212>
 8000fee:	ebb3 0208 	subs.w	r2, r3, r8
 8000ff2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ff6:	fa01 f707 	lsl.w	r7, r1, r7
 8000ffa:	fa22 f306 	lsr.w	r3, r2, r6
 8000ffe:	40f1      	lsrs	r1, r6
 8001000:	431f      	orrs	r7, r3
 8001002:	e9c5 7100 	strd	r7, r1, [r5]
 8001006:	2600      	movs	r6, #0
 8001008:	4631      	mov	r1, r6
 800100a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800100e:	f1c2 0320 	rsb	r3, r2, #32
 8001012:	40d8      	lsrs	r0, r3
 8001014:	fa0c fc02 	lsl.w	ip, ip, r2
 8001018:	fa21 f303 	lsr.w	r3, r1, r3
 800101c:	4091      	lsls	r1, r2
 800101e:	4301      	orrs	r1, r0
 8001020:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001024:	fa1f fe8c 	uxth.w	lr, ip
 8001028:	fbb3 f0f7 	udiv	r0, r3, r7
 800102c:	fb07 3610 	mls	r6, r7, r0, r3
 8001030:	0c0b      	lsrs	r3, r1, #16
 8001032:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001036:	fb00 f60e 	mul.w	r6, r0, lr
 800103a:	429e      	cmp	r6, r3
 800103c:	fa04 f402 	lsl.w	r4, r4, r2
 8001040:	d908      	bls.n	8001054 <__udivmoddi4+0x260>
 8001042:	eb1c 0303 	adds.w	r3, ip, r3
 8001046:	f100 38ff 	add.w	r8, r0, #4294967295
 800104a:	d22f      	bcs.n	80010ac <__udivmoddi4+0x2b8>
 800104c:	429e      	cmp	r6, r3
 800104e:	d92d      	bls.n	80010ac <__udivmoddi4+0x2b8>
 8001050:	3802      	subs	r0, #2
 8001052:	4463      	add	r3, ip
 8001054:	1b9b      	subs	r3, r3, r6
 8001056:	b289      	uxth	r1, r1
 8001058:	fbb3 f6f7 	udiv	r6, r3, r7
 800105c:	fb07 3316 	mls	r3, r7, r6, r3
 8001060:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001064:	fb06 f30e 	mul.w	r3, r6, lr
 8001068:	428b      	cmp	r3, r1
 800106a:	d908      	bls.n	800107e <__udivmoddi4+0x28a>
 800106c:	eb1c 0101 	adds.w	r1, ip, r1
 8001070:	f106 38ff 	add.w	r8, r6, #4294967295
 8001074:	d216      	bcs.n	80010a4 <__udivmoddi4+0x2b0>
 8001076:	428b      	cmp	r3, r1
 8001078:	d914      	bls.n	80010a4 <__udivmoddi4+0x2b0>
 800107a:	3e02      	subs	r6, #2
 800107c:	4461      	add	r1, ip
 800107e:	1ac9      	subs	r1, r1, r3
 8001080:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001084:	e738      	b.n	8000ef8 <__udivmoddi4+0x104>
 8001086:	462e      	mov	r6, r5
 8001088:	4628      	mov	r0, r5
 800108a:	e705      	b.n	8000e98 <__udivmoddi4+0xa4>
 800108c:	4606      	mov	r6, r0
 800108e:	e6e3      	b.n	8000e58 <__udivmoddi4+0x64>
 8001090:	4618      	mov	r0, r3
 8001092:	e6f8      	b.n	8000e86 <__udivmoddi4+0x92>
 8001094:	454b      	cmp	r3, r9
 8001096:	d2a9      	bcs.n	8000fec <__udivmoddi4+0x1f8>
 8001098:	ebb9 0802 	subs.w	r8, r9, r2
 800109c:	eb64 0e0c 	sbc.w	lr, r4, ip
 80010a0:	3801      	subs	r0, #1
 80010a2:	e7a3      	b.n	8000fec <__udivmoddi4+0x1f8>
 80010a4:	4646      	mov	r6, r8
 80010a6:	e7ea      	b.n	800107e <__udivmoddi4+0x28a>
 80010a8:	4620      	mov	r0, r4
 80010aa:	e794      	b.n	8000fd6 <__udivmoddi4+0x1e2>
 80010ac:	4640      	mov	r0, r8
 80010ae:	e7d1      	b.n	8001054 <__udivmoddi4+0x260>
 80010b0:	46d0      	mov	r8, sl
 80010b2:	e77b      	b.n	8000fac <__udivmoddi4+0x1b8>
 80010b4:	3b02      	subs	r3, #2
 80010b6:	4461      	add	r1, ip
 80010b8:	e732      	b.n	8000f20 <__udivmoddi4+0x12c>
 80010ba:	4630      	mov	r0, r6
 80010bc:	e709      	b.n	8000ed2 <__udivmoddi4+0xde>
 80010be:	4464      	add	r4, ip
 80010c0:	3802      	subs	r0, #2
 80010c2:	e742      	b.n	8000f4a <__udivmoddi4+0x156>

080010c4 <__aeabi_idiv0>:
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop

080010c8 <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]

	Uart_SendString(string, pc_uart);
 80010d0:	4903      	ldr	r1, [pc, #12]	; (80010e0 <Send_Uart+0x18>)
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f000 fc5e 	bl	8001994 <Uart_SendString>
}
 80010d8:	bf00      	nop
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20003fd8 	.word	0x20003fd8

080010e4 <Mount_SD>:



FRESULT Mount_SD (const TCHAR* path)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 80010ec:	2201      	movs	r2, #1
 80010ee:	6879      	ldr	r1, [r7, #4]
 80010f0:	480b      	ldr	r0, [pc, #44]	; (8001120 <Mount_SD+0x3c>)
 80010f2:	f00e fad3 	bl	800f69c <f_mount>
 80010f6:	4603      	mov	r3, r0
 80010f8:	461a      	mov	r2, r3
 80010fa:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <Mount_SD+0x40>)
 80010fc:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK){
 80010fe:	4b09      	ldr	r3, [pc, #36]	; (8001124 <Mount_SD+0x40>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <Mount_SD+0x2a>
		Send_Uart ("ERROR!!! in mounting SD CARD...\r\n");
 8001106:	4808      	ldr	r0, [pc, #32]	; (8001128 <Mount_SD+0x44>)
 8001108:	f7ff ffde 	bl	80010c8 <Send_Uart>
 800110c:	e002      	b.n	8001114 <Mount_SD+0x30>
	}
	else{
		Send_Uart("SD CARD mounted successfully...\r\n");
 800110e:	4807      	ldr	r0, [pc, #28]	; (800112c <Mount_SD+0x48>)
 8001110:	f7ff ffda 	bl	80010c8 <Send_Uart>
	}
	return fresult;
 8001114:	4b03      	ldr	r3, [pc, #12]	; (8001124 <Mount_SD+0x40>)
 8001116:	781b      	ldrb	r3, [r3, #0]
}
 8001118:	4618      	mov	r0, r3
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20000274 	.word	0x20000274
 8001124:	20003320 	.word	0x20003320
 8001128:	08017bb0 	.word	0x08017bb0
 800112c:	08017bd4 	.word	0x08017bd4

08001130 <Unmount_SD>:

FRESULT Unmount_SD (const TCHAR* path)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 8001138:	2201      	movs	r2, #1
 800113a:	6879      	ldr	r1, [r7, #4]
 800113c:	2000      	movs	r0, #0
 800113e:	f00e faad 	bl	800f69c <f_mount>
 8001142:	4603      	mov	r3, r0
 8001144:	461a      	mov	r2, r3
 8001146:	4b09      	ldr	r3, [pc, #36]	; (800116c <Unmount_SD+0x3c>)
 8001148:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK){
 800114a:	4b08      	ldr	r3, [pc, #32]	; (800116c <Unmount_SD+0x3c>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d103      	bne.n	800115a <Unmount_SD+0x2a>
		Send_Uart ("SD CARD UNMOUNTED successfully...\r\n");
 8001152:	4807      	ldr	r0, [pc, #28]	; (8001170 <Unmount_SD+0x40>)
 8001154:	f7ff ffb8 	bl	80010c8 <Send_Uart>
 8001158:	e002      	b.n	8001160 <Unmount_SD+0x30>
	}
	else{
		Send_Uart("ERROR!!! in UNMOUNTING SD CARD\r\n");
 800115a:	4806      	ldr	r0, [pc, #24]	; (8001174 <Unmount_SD+0x44>)
 800115c:	f7ff ffb4 	bl	80010c8 <Send_Uart>
	}
	return fresult;
 8001160:	4b02      	ldr	r3, [pc, #8]	; (800116c <Unmount_SD+0x3c>)
 8001162:	781b      	ldrb	r3, [r3, #0]

}
 8001164:	4618      	mov	r0, r3
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20003320 	.word	0x20003320
 8001170:	08017bf8 	.word	0x08017bf8
 8001174:	08017c1c 	.word	0x08017c1c

08001178 <Format_SD>:
    return fresult;
}

/* Only supports removing files from home directory */
FRESULT Format_SD (void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b08e      	sub	sp, #56	; 0x38
 800117c:	af00      	add	r7, sp, #0
    DIR dir;
    char *path = malloc(20*sizeof (char));
 800117e:	2014      	movs	r0, #20
 8001180:	f00f fd40 	bl	8010c04 <malloc>
 8001184:	4603      	mov	r3, r0
 8001186:	637b      	str	r3, [r7, #52]	; 0x34
    sprintf (path, "%s","/");
 8001188:	4a28      	ldr	r2, [pc, #160]	; (800122c <Format_SD+0xb4>)
 800118a:	4929      	ldr	r1, [pc, #164]	; (8001230 <Format_SD+0xb8>)
 800118c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800118e:	f010 fd1d 	bl	8011bcc <siprintf>

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001196:	4618      	mov	r0, r3
 8001198:	f00f f82d 	bl	80101f6 <f_opendir>
 800119c:	4603      	mov	r3, r0
 800119e:	461a      	mov	r2, r3
 80011a0:	4b24      	ldr	r3, [pc, #144]	; (8001234 <Format_SD+0xbc>)
 80011a2:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 80011a4:	4b23      	ldr	r3, [pc, #140]	; (8001234 <Format_SD+0xbc>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d136      	bne.n	800121a <Format_SD+0xa2>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 80011ac:	1d3b      	adds	r3, r7, #4
 80011ae:	4922      	ldr	r1, [pc, #136]	; (8001238 <Format_SD+0xc0>)
 80011b0:	4618      	mov	r0, r3
 80011b2:	f00f f8b9 	bl	8010328 <f_readdir>
 80011b6:	4603      	mov	r3, r0
 80011b8:	461a      	mov	r2, r3
 80011ba:	4b1e      	ldr	r3, [pc, #120]	; (8001234 <Format_SD+0xbc>)
 80011bc:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 80011be:	4b1d      	ldr	r3, [pc, #116]	; (8001234 <Format_SD+0xbc>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d125      	bne.n	8001212 <Format_SD+0x9a>
 80011c6:	4b1c      	ldr	r3, [pc, #112]	; (8001238 <Format_SD+0xc0>)
 80011c8:	7a5b      	ldrb	r3, [r3, #9]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d021      	beq.n	8001212 <Format_SD+0x9a>
            if (fno.fattrib & AM_DIR)     /* It is a directory */
 80011ce:	4b1a      	ldr	r3, [pc, #104]	; (8001238 <Format_SD+0xc0>)
 80011d0:	7a1b      	ldrb	r3, [r3, #8]
 80011d2:	f003 0310 	and.w	r3, r3, #16
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d011      	beq.n	80011fe <Format_SD+0x86>
            {
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 80011da:	4918      	ldr	r1, [pc, #96]	; (800123c <Format_SD+0xc4>)
 80011dc:	4818      	ldr	r0, [pc, #96]	; (8001240 <Format_SD+0xc8>)
 80011de:	f7fe ffff 	bl	80001e0 <strcmp>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d012      	beq.n	800120e <Format_SD+0x96>
            	fresult = f_unlink(fno.fname);
 80011e8:	4814      	ldr	r0, [pc, #80]	; (800123c <Format_SD+0xc4>)
 80011ea:	f00f f9c8 	bl	801057e <f_unlink>
 80011ee:	4603      	mov	r3, r0
 80011f0:	461a      	mov	r2, r3
 80011f2:	4b10      	ldr	r3, [pc, #64]	; (8001234 <Format_SD+0xbc>)
 80011f4:	701a      	strb	r2, [r3, #0]
            	if (fresult == FR_DENIED) continue;
 80011f6:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <Format_SD+0xbc>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	2b07      	cmp	r3, #7
 80011fc:	e7d6      	b.n	80011ac <Format_SD+0x34>
            }
            else
            {   /* It is a file. */
               fresult = f_unlink(fno.fname);
 80011fe:	480f      	ldr	r0, [pc, #60]	; (800123c <Format_SD+0xc4>)
 8001200:	f00f f9bd 	bl	801057e <f_unlink>
 8001204:	4603      	mov	r3, r0
 8001206:	461a      	mov	r2, r3
 8001208:	4b0a      	ldr	r3, [pc, #40]	; (8001234 <Format_SD+0xbc>)
 800120a:	701a      	strb	r2, [r3, #0]
 800120c:	e7ce      	b.n	80011ac <Format_SD+0x34>
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 800120e:	bf00      	nop
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 8001210:	e7cc      	b.n	80011ac <Format_SD+0x34>
            }
        }
        f_closedir(&dir);
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	4618      	mov	r0, r3
 8001216:	f00f f861 	bl	80102dc <f_closedir>
    }
    free(path);
 800121a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800121c:	f00f fcfa 	bl	8010c14 <free>
    return fresult;
 8001220:	4b04      	ldr	r3, [pc, #16]	; (8001234 <Format_SD+0xbc>)
 8001222:	781b      	ldrb	r3, [r3, #0]
}
 8001224:	4618      	mov	r0, r3
 8001226:	3738      	adds	r7, #56	; 0x38
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	08017c70 	.word	0x08017c70
 8001230:	08017c40 	.word	0x08017c40
 8001234:	20003320 	.word	0x20003320
 8001238:	20003308 	.word	0x20003308
 800123c:	20003311 	.word	0x20003311
 8001240:	08017c44 	.word	0x08017c44

08001244 <Update_File>:
	}
    return fresult;
}

FRESULT Update_File (char *name, char *data, uint16_t dataSize)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08a      	sub	sp, #40	; 0x28
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	4613      	mov	r3, r2
 8001250:	80fb      	strh	r3, [r7, #6]
//	}
//
//	else
//	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 8001252:	2232      	movs	r2, #50	; 0x32
 8001254:	68f9      	ldr	r1, [r7, #12]
 8001256:	4844      	ldr	r0, [pc, #272]	; (8001368 <Update_File+0x124>)
 8001258:	f00e fa66 	bl	800f728 <f_open>
 800125c:	4603      	mov	r3, r0
 800125e:	461a      	mov	r2, r3
 8001260:	4b42      	ldr	r3, [pc, #264]	; (800136c <Update_File+0x128>)
 8001262:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8001264:	4b41      	ldr	r3, [pc, #260]	; (800136c <Update_File+0x128>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d015      	beq.n	8001298 <Update_File+0x54>
	    {
	    	char *buf = malloc(100*sizeof(char));
 800126c:	2064      	movs	r0, #100	; 0x64
 800126e:	f00f fcc9 	bl	8010c04 <malloc>
 8001272:	4603      	mov	r3, r0
 8001274:	617b      	str	r3, [r7, #20]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\r\n", fresult, name);
 8001276:	4b3d      	ldr	r3, [pc, #244]	; (800136c <Update_File+0x128>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	461a      	mov	r2, r3
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	493c      	ldr	r1, [pc, #240]	; (8001370 <Update_File+0x12c>)
 8001280:	6978      	ldr	r0, [r7, #20]
 8001282:	f010 fca3 	bl	8011bcc <siprintf>
	    	Send_Uart(buf);
 8001286:	6978      	ldr	r0, [r7, #20]
 8001288:	f7ff ff1e 	bl	80010c8 <Send_Uart>
	        free(buf);
 800128c:	6978      	ldr	r0, [r7, #20]
 800128e:	f00f fcc1 	bl	8010c14 <free>
	        return fresult;
 8001292:	4b36      	ldr	r3, [pc, #216]	; (800136c <Update_File+0x128>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	e062      	b.n	800135e <Update_File+0x11a>
	    }

	    /* Writing text */
	    fresult = f_write(&fil, data, dataSize, &bw);
 8001298:	88fa      	ldrh	r2, [r7, #6]
 800129a:	4b36      	ldr	r3, [pc, #216]	; (8001374 <Update_File+0x130>)
 800129c:	68b9      	ldr	r1, [r7, #8]
 800129e:	4832      	ldr	r0, [pc, #200]	; (8001368 <Update_File+0x124>)
 80012a0:	f00e fd6d 	bl	800fd7e <f_write>
 80012a4:	4603      	mov	r3, r0
 80012a6:	461a      	mov	r2, r3
 80012a8:	4b30      	ldr	r3, [pc, #192]	; (800136c <Update_File+0x128>)
 80012aa:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80012ac:	4b2f      	ldr	r3, [pc, #188]	; (800136c <Update_File+0x128>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d013      	beq.n	80012dc <Update_File+0x98>
	    {
	    	char *buf = malloc(100*sizeof(char));
 80012b4:	2064      	movs	r0, #100	; 0x64
 80012b6:	f00f fca5 	bl	8010c04 <malloc>
 80012ba:	4603      	mov	r3, r0
 80012bc:	623b      	str	r3, [r7, #32]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\r\n", fresult, name);
 80012be:	4b2b      	ldr	r3, [pc, #172]	; (800136c <Update_File+0x128>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	461a      	mov	r2, r3
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	492c      	ldr	r1, [pc, #176]	; (8001378 <Update_File+0x134>)
 80012c8:	6a38      	ldr	r0, [r7, #32]
 80012ca:	f010 fc7f 	bl	8011bcc <siprintf>
	    	Send_Uart(buf);
 80012ce:	6a38      	ldr	r0, [r7, #32]
 80012d0:	f7ff fefa 	bl	80010c8 <Send_Uart>
	    	free(buf);
 80012d4:	6a38      	ldr	r0, [r7, #32]
 80012d6:	f00f fc9d 	bl	8010c14 <free>
 80012da:	e00f      	b.n	80012fc <Update_File+0xb8>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 80012dc:	2064      	movs	r0, #100	; 0x64
 80012de:	f00f fc91 	bl	8010c04 <malloc>
 80012e2:	4603      	mov	r3, r0
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
	    	sprintf (buf, "File *%s* UPDATED successfully\r\n", name);
 80012e6:	68fa      	ldr	r2, [r7, #12]
 80012e8:	4924      	ldr	r1, [pc, #144]	; (800137c <Update_File+0x138>)
 80012ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80012ec:	f010 fc6e 	bl	8011bcc <siprintf>
	    	Send_Uart(buf);
 80012f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80012f2:	f7ff fee9 	bl	80010c8 <Send_Uart>
	    	free(buf);
 80012f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80012f8:	f00f fc8c 	bl	8010c14 <free>
	    }

	    /* Close file */
	    fresult = f_close(&fil);
 80012fc:	481a      	ldr	r0, [pc, #104]	; (8001368 <Update_File+0x124>)
 80012fe:	f00e ff50 	bl	80101a2 <f_close>
 8001302:	4603      	mov	r3, r0
 8001304:	461a      	mov	r2, r3
 8001306:	4b19      	ldr	r3, [pc, #100]	; (800136c <Update_File+0x128>)
 8001308:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 800130a:	4b18      	ldr	r3, [pc, #96]	; (800136c <Update_File+0x128>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d013      	beq.n	800133a <Update_File+0xf6>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001312:	2064      	movs	r0, #100	; 0x64
 8001314:	f00f fc76 	bl	8010c04 <malloc>
 8001318:	4603      	mov	r3, r0
 800131a:	61bb      	str	r3, [r7, #24]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\r\n", fresult, name);
 800131c:	4b13      	ldr	r3, [pc, #76]	; (800136c <Update_File+0x128>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	461a      	mov	r2, r3
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	4916      	ldr	r1, [pc, #88]	; (8001380 <Update_File+0x13c>)
 8001326:	69b8      	ldr	r0, [r7, #24]
 8001328:	f010 fc50 	bl	8011bcc <siprintf>
	    	Send_Uart(buf);
 800132c:	69b8      	ldr	r0, [r7, #24]
 800132e:	f7ff fecb 	bl	80010c8 <Send_Uart>
	    	free(buf);
 8001332:	69b8      	ldr	r0, [r7, #24]
 8001334:	f00f fc6e 	bl	8010c14 <free>
 8001338:	e00f      	b.n	800135a <Update_File+0x116>
	    }
	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 800133a:	2064      	movs	r0, #100	; 0x64
 800133c:	f00f fc62 	bl	8010c04 <malloc>
 8001340:	4603      	mov	r3, r0
 8001342:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "File *%s* CLOSED successfully\r\n", name);
 8001344:	68fa      	ldr	r2, [r7, #12]
 8001346:	490f      	ldr	r1, [pc, #60]	; (8001384 <Update_File+0x140>)
 8001348:	69f8      	ldr	r0, [r7, #28]
 800134a:	f010 fc3f 	bl	8011bcc <siprintf>
	    	Send_Uart(buf);
 800134e:	69f8      	ldr	r0, [r7, #28]
 8001350:	f7ff feba 	bl	80010c8 <Send_Uart>
	    	free(buf);
 8001354:	69f8      	ldr	r0, [r7, #28]
 8001356:	f00f fc5d 	bl	8010c14 <free>
	     }
//	}
    return fresult;
 800135a:	4b04      	ldr	r3, [pc, #16]	; (800136c <Update_File+0x128>)
 800135c:	781b      	ldrb	r3, [r3, #0]
}
 800135e:	4618      	mov	r0, r3
 8001360:	3728      	adds	r7, #40	; 0x28
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	200012a8 	.word	0x200012a8
 800136c:	20003320 	.word	0x20003320
 8001370:	08017c94 	.word	0x08017c94
 8001374:	20003324 	.word	0x20003324
 8001378:	08017eb0 	.word	0x08017eb0
 800137c:	08017ed8 	.word	0x08017ed8
 8001380:	08017da4 	.word	0x08017da4
 8001384:	08017dcc 	.word	0x08017dcc

08001388 <Create_Dir>:
	}
	return fresult;
}

FRESULT Create_Dir (char *name)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
    fresult = f_mkdir(name);
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f00f f99f 	bl	80106d4 <f_mkdir>
 8001396:	4603      	mov	r3, r0
 8001398:	461a      	mov	r2, r3
 800139a:	4b18      	ldr	r3, [pc, #96]	; (80013fc <Create_Dir+0x74>)
 800139c:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 800139e:	4b17      	ldr	r3, [pc, #92]	; (80013fc <Create_Dir+0x74>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d110      	bne.n	80013c8 <Create_Dir+0x40>
    {
    	char *buf = malloc(100*sizeof(char));
 80013a6:	2064      	movs	r0, #100	; 0x64
 80013a8:	f00f fc2c 	bl	8010c04 <malloc>
 80013ac:	4603      	mov	r3, r0
 80013ae:	60bb      	str	r3, [r7, #8]
    	sprintf (buf, "Dir *%s* has been created successfully\r\n", name);
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	4913      	ldr	r1, [pc, #76]	; (8001400 <Create_Dir+0x78>)
 80013b4:	68b8      	ldr	r0, [r7, #8]
 80013b6:	f010 fc09 	bl	8011bcc <siprintf>
    	Send_Uart (buf);
 80013ba:	68b8      	ldr	r0, [r7, #8]
 80013bc:	f7ff fe84 	bl	80010c8 <Send_Uart>
    	free(buf);
 80013c0:	68b8      	ldr	r0, [r7, #8]
 80013c2:	f00f fc27 	bl	8010c14 <free>
 80013c6:	e012      	b.n	80013ee <Create_Dir+0x66>
    }
    else
    {
    	char *buf = malloc(100*sizeof(char));
 80013c8:	2064      	movs	r0, #100	; 0x64
 80013ca:	f00f fc1b 	bl	8010c04 <malloc>
 80013ce:	4603      	mov	r3, r0
 80013d0:	60fb      	str	r3, [r7, #12]
    	sprintf (buf, "ERROR No. %d in creating directory *%s*\r\n", fresult,name);
 80013d2:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <Create_Dir+0x74>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	461a      	mov	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	490a      	ldr	r1, [pc, #40]	; (8001404 <Create_Dir+0x7c>)
 80013dc:	68f8      	ldr	r0, [r7, #12]
 80013de:	f010 fbf5 	bl	8011bcc <siprintf>
    	Send_Uart(buf);
 80013e2:	68f8      	ldr	r0, [r7, #12]
 80013e4:	f7ff fe70 	bl	80010c8 <Send_Uart>
    	free(buf);
 80013e8:	68f8      	ldr	r0, [r7, #12]
 80013ea:	f00f fc13 	bl	8010c14 <free>
    }
    return fresult;
 80013ee:	4b03      	ldr	r3, [pc, #12]	; (80013fc <Create_Dir+0x74>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20003320 	.word	0x20003320
 8001400:	08017f48 	.word	0x08017f48
 8001404:	08017f74 	.word	0x08017f74

08001408 <Check_SD_Space>:

FRESULT Check_SD_Space (void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
    /* Check free space */
	fresult = f_getfree("", &fre_clust, &pfs);
 800140e:	4a33      	ldr	r2, [pc, #204]	; (80014dc <Check_SD_Space+0xd4>)
 8001410:	4933      	ldr	r1, [pc, #204]	; (80014e0 <Check_SD_Space+0xd8>)
 8001412:	4834      	ldr	r0, [pc, #208]	; (80014e4 <Check_SD_Space+0xdc>)
 8001414:	f00e fffe 	bl	8010414 <f_getfree>
 8001418:	4603      	mov	r3, r0
 800141a:	461a      	mov	r2, r3
 800141c:	4b32      	ldr	r3, [pc, #200]	; (80014e8 <Check_SD_Space+0xe0>)
 800141e:	701a      	strb	r2, [r3, #0]

    total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001420:	4b2e      	ldr	r3, [pc, #184]	; (80014dc <Check_SD_Space+0xd4>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	3b02      	subs	r3, #2
 8001428:	4a2c      	ldr	r2, [pc, #176]	; (80014dc <Check_SD_Space+0xd4>)
 800142a:	6812      	ldr	r2, [r2, #0]
 800142c:	8952      	ldrh	r2, [r2, #10]
 800142e:	fb02 f303 	mul.w	r3, r2, r3
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff f87e 	bl	8000534 <__aeabi_ui2d>
 8001438:	f04f 0200 	mov.w	r2, #0
 800143c:	4b2b      	ldr	r3, [pc, #172]	; (80014ec <Check_SD_Space+0xe4>)
 800143e:	f7ff f8f3 	bl	8000628 <__aeabi_dmul>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	4610      	mov	r0, r2
 8001448:	4619      	mov	r1, r3
 800144a:	f7ff fbc5 	bl	8000bd8 <__aeabi_d2uiz>
 800144e:	4603      	mov	r3, r0
 8001450:	4a27      	ldr	r2, [pc, #156]	; (80014f0 <Check_SD_Space+0xe8>)
 8001452:	6013      	str	r3, [r2, #0]
    char *buf = malloc(30*sizeof(char));
 8001454:	201e      	movs	r0, #30
 8001456:	f00f fbd5 	bl	8010c04 <malloc>
 800145a:	4603      	mov	r3, r0
 800145c:	607b      	str	r3, [r7, #4]
    sprintf (buf, "SD CARD Total Size: \t%lu\r\n",total);
 800145e:	4b24      	ldr	r3, [pc, #144]	; (80014f0 <Check_SD_Space+0xe8>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	461a      	mov	r2, r3
 8001464:	4923      	ldr	r1, [pc, #140]	; (80014f4 <Check_SD_Space+0xec>)
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f010 fbb0 	bl	8011bcc <siprintf>
    Send_Uart(buf);
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f7ff fe2b 	bl	80010c8 <Send_Uart>
    free(buf);
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f00f fbce 	bl	8010c14 <free>
    free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8001478:	4b18      	ldr	r3, [pc, #96]	; (80014dc <Check_SD_Space+0xd4>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	895b      	ldrh	r3, [r3, #10]
 800147e:	461a      	mov	r2, r3
 8001480:	4b17      	ldr	r3, [pc, #92]	; (80014e0 <Check_SD_Space+0xd8>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	fb02 f303 	mul.w	r3, r2, r3
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff f853 	bl	8000534 <__aeabi_ui2d>
 800148e:	f04f 0200 	mov.w	r2, #0
 8001492:	4b16      	ldr	r3, [pc, #88]	; (80014ec <Check_SD_Space+0xe4>)
 8001494:	f7ff f8c8 	bl	8000628 <__aeabi_dmul>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4610      	mov	r0, r2
 800149e:	4619      	mov	r1, r3
 80014a0:	f7ff fb9a 	bl	8000bd8 <__aeabi_d2uiz>
 80014a4:	4603      	mov	r3, r0
 80014a6:	4a14      	ldr	r2, [pc, #80]	; (80014f8 <Check_SD_Space+0xf0>)
 80014a8:	6013      	str	r3, [r2, #0]
    buf = malloc(30*sizeof(char));
 80014aa:	201e      	movs	r0, #30
 80014ac:	f00f fbaa 	bl	8010c04 <malloc>
 80014b0:	4603      	mov	r3, r0
 80014b2:	607b      	str	r3, [r7, #4]
    sprintf (buf, "SD CARD Free Space: \t%lu\r\n",free_space);
 80014b4:	4b10      	ldr	r3, [pc, #64]	; (80014f8 <Check_SD_Space+0xf0>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	461a      	mov	r2, r3
 80014ba:	4910      	ldr	r1, [pc, #64]	; (80014fc <Check_SD_Space+0xf4>)
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f010 fb85 	bl	8011bcc <siprintf>
    Send_Uart(buf);
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f7ff fe00 	bl	80010c8 <Send_Uart>
    free(buf);
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f00f fba3 	bl	8010c14 <free>
    return fresult;
 80014ce:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <Check_SD_Space+0xe0>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20003328 	.word	0x20003328
 80014e0:	2000332c 	.word	0x2000332c
 80014e4:	08017fa0 	.word	0x08017fa0
 80014e8:	20003320 	.word	0x20003320
 80014ec:	3fe00000 	.word	0x3fe00000
 80014f0:	20003330 	.word	0x20003330
 80014f4:	08017fa4 	.word	0x08017fa4
 80014f8:	20003334 	.word	0x20003334
 80014fc:	08017fc0 	.word	0x08017fc0

08001500 <File_O_Open>:

//Added parts for managing an open file

//opens a file for reading and writing if it exists, if not, creates it and keeps it open for reading and writing
FRESULT File_O_Open (char *name)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]

	fresult = f_open(&open_fil, name, FA_OPEN_ALWAYS|FA_READ|FA_WRITE);
 8001508:	2213      	movs	r2, #19
 800150a:	6879      	ldr	r1, [r7, #4]
 800150c:	481a      	ldr	r0, [pc, #104]	; (8001578 <File_O_Open+0x78>)
 800150e:	f00e f90b 	bl	800f728 <f_open>
 8001512:	4603      	mov	r3, r0
 8001514:	461a      	mov	r2, r3
 8001516:	4b19      	ldr	r3, [pc, #100]	; (800157c <File_O_Open+0x7c>)
 8001518:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 800151a:	4b18      	ldr	r3, [pc, #96]	; (800157c <File_O_Open+0x7c>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d013      	beq.n	800154a <File_O_Open+0x4a>
	{
		char *buf = malloc(100*sizeof(char));
 8001522:	2064      	movs	r0, #100	; 0x64
 8001524:	f00f fb6e 	bl	8010c04 <malloc>
 8001528:	4603      	mov	r3, r0
 800152a:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERROR!!! No. %d in opening file *%s*\r\n", fresult, name);
 800152c:	4b13      	ldr	r3, [pc, #76]	; (800157c <File_O_Open+0x7c>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	461a      	mov	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4912      	ldr	r1, [pc, #72]	; (8001580 <File_O_Open+0x80>)
 8001536:	68b8      	ldr	r0, [r7, #8]
 8001538:	f010 fb48 	bl	8011bcc <siprintf>
		Send_Uart(buf);
 800153c:	68b8      	ldr	r0, [r7, #8]
 800153e:	f7ff fdc3 	bl	80010c8 <Send_Uart>
		free(buf);
 8001542:	68b8      	ldr	r0, [r7, #8]
 8001544:	f00f fb66 	bl	8010c14 <free>
 8001548:	e00f      	b.n	800156a <File_O_Open+0x6a>
	}
	else
	{
		char *buf = malloc(100*sizeof(char));
 800154a:	2064      	movs	r0, #100	; 0x64
 800154c:	f00f fb5a 	bl	8010c04 <malloc>
 8001550:	4603      	mov	r3, r0
 8001552:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "File *%s* OPENED successfully\r\n",name);
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	490b      	ldr	r1, [pc, #44]	; (8001584 <File_O_Open+0x84>)
 8001558:	68f8      	ldr	r0, [r7, #12]
 800155a:	f010 fb37 	bl	8011bcc <siprintf>
		Send_Uart(buf);
 800155e:	68f8      	ldr	r0, [r7, #12]
 8001560:	f7ff fdb2 	bl	80010c8 <Send_Uart>
		free(buf);
 8001564:	68f8      	ldr	r0, [r7, #12]
 8001566:	f00f fb55 	bl	8010c14 <free>
	}
	return fresult;
 800156a:	4b04      	ldr	r3, [pc, #16]	; (800157c <File_O_Open+0x7c>)
 800156c:	781b      	ldrb	r3, [r3, #0]
}
 800156e:	4618      	mov	r0, r3
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	200022d8 	.word	0x200022d8
 800157c:	20003320 	.word	0x20003320
 8001580:	08017c94 	.word	0x08017c94
 8001584:	08017fdc 	.word	0x08017fdc

08001588 <File_O_Close>:

//closes the file
FRESULT File_O_Close ()
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0

	/* Close file */
	fresult = f_close(&open_fil);
 800158e:	4819      	ldr	r0, [pc, #100]	; (80015f4 <File_O_Close+0x6c>)
 8001590:	f00e fe07 	bl	80101a2 <f_close>
 8001594:	4603      	mov	r3, r0
 8001596:	461a      	mov	r2, r3
 8001598:	4b17      	ldr	r3, [pc, #92]	; (80015f8 <File_O_Close+0x70>)
 800159a:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 800159c:	4b16      	ldr	r3, [pc, #88]	; (80015f8 <File_O_Close+0x70>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d012      	beq.n	80015ca <File_O_Close+0x42>
	{
		char *buf = malloc(100*sizeof(char));
 80015a4:	2064      	movs	r0, #100	; 0x64
 80015a6:	f00f fb2d 	bl	8010c04 <malloc>
 80015aa:	4603      	mov	r3, r0
 80015ac:	603b      	str	r3, [r7, #0]
		sprintf (buf, "ERROR!!! No. %d in closing file\r\n", fresult);
 80015ae:	4b12      	ldr	r3, [pc, #72]	; (80015f8 <File_O_Close+0x70>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	461a      	mov	r2, r3
 80015b4:	4911      	ldr	r1, [pc, #68]	; (80015fc <File_O_Close+0x74>)
 80015b6:	6838      	ldr	r0, [r7, #0]
 80015b8:	f010 fb08 	bl	8011bcc <siprintf>
		Send_Uart(buf);
 80015bc:	6838      	ldr	r0, [r7, #0]
 80015be:	f7ff fd83 	bl	80010c8 <Send_Uart>
		free(buf);
 80015c2:	6838      	ldr	r0, [r7, #0]
 80015c4:	f00f fb26 	bl	8010c14 <free>
 80015c8:	e00e      	b.n	80015e8 <File_O_Close+0x60>
	}
	else
	{
		char *buf = malloc(100*sizeof(char));
 80015ca:	2064      	movs	r0, #100	; 0x64
 80015cc:	f00f fb1a 	bl	8010c04 <malloc>
 80015d0:	4603      	mov	r3, r0
 80015d2:	607b      	str	r3, [r7, #4]
		sprintf (buf, "File CLOSED successfully\r\n");
 80015d4:	490a      	ldr	r1, [pc, #40]	; (8001600 <File_O_Close+0x78>)
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f010 faf8 	bl	8011bcc <siprintf>
		Send_Uart(buf);
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f7ff fd73 	bl	80010c8 <Send_Uart>
		free(buf);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f00f fb16 	bl	8010c14 <free>
	 }
	return fresult;
 80015e8:	4b03      	ldr	r3, [pc, #12]	; (80015f8 <File_O_Close+0x70>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	200022d8 	.word	0x200022d8
 80015f8:	20003320 	.word	0x20003320
 80015fc:	08017ffc 	.word	0x08017ffc
 8001600:	08018020 	.word	0x08018020

08001604 <File_O_Print>:

//prints data to the open file
FRESULT File_O_Print (char *data)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]

	/* Writing text */
	fresult = f_write(&open_fil, data, strlen (data), &bw);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7fe fdf1 	bl	80001f4 <strlen>
 8001612:	4602      	mov	r2, r0
 8001614:	4b12      	ldr	r3, [pc, #72]	; (8001660 <File_O_Print+0x5c>)
 8001616:	6879      	ldr	r1, [r7, #4]
 8001618:	4812      	ldr	r0, [pc, #72]	; (8001664 <File_O_Print+0x60>)
 800161a:	f00e fbb0 	bl	800fd7e <f_write>
 800161e:	4603      	mov	r3, r0
 8001620:	461a      	mov	r2, r3
 8001622:	4b11      	ldr	r3, [pc, #68]	; (8001668 <File_O_Print+0x64>)
 8001624:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8001626:	4b10      	ldr	r3, [pc, #64]	; (8001668 <File_O_Print+0x64>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d011      	beq.n	8001652 <File_O_Print+0x4e>
	{
		char *buf = malloc(100*sizeof(char));
 800162e:	2064      	movs	r0, #100	; 0x64
 8001630:	f00f fae8 	bl	8010c04 <malloc>
 8001634:	4603      	mov	r3, r0
 8001636:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! No. %d in writing file\r\n", fresult);
 8001638:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <File_O_Print+0x64>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	461a      	mov	r2, r3
 800163e:	490b      	ldr	r1, [pc, #44]	; (800166c <File_O_Print+0x68>)
 8001640:	68f8      	ldr	r0, [r7, #12]
 8001642:	f010 fac3 	bl	8011bcc <siprintf>
		Send_Uart(buf);
 8001646:	68f8      	ldr	r0, [r7, #12]
 8001648:	f7ff fd3e 	bl	80010c8 <Send_Uart>
		free(buf);
 800164c:	68f8      	ldr	r0, [r7, #12]
 800164e:	f00f fae1 	bl	8010c14 <free>
//		char *buf = malloc(100*sizeof(char));
//		sprintf (buf, "UPDATED successfully\r\n");
//		Send_Uart(buf);
//		free(buf);
	}
	return fresult;
 8001652:	4b05      	ldr	r3, [pc, #20]	; (8001668 <File_O_Print+0x64>)
 8001654:	781b      	ldrb	r3, [r3, #0]

}
 8001656:	4618      	mov	r0, r3
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20003324 	.word	0x20003324
 8001664:	200022d8 	.word	0x200022d8
 8001668:	20003320 	.word	0x20003320
 800166c:	0801803c 	.word	0x0801803c

08001670 <File_O_Read_Line>:

//reads a line from the open file, returns 0 if there is nothing more to read
TCHAR* File_O_Read_Line (char *buffer)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]

	/* Reading line text */
	TCHAR* result;
	result = f_gets (
 8001678:	4a05      	ldr	r2, [pc, #20]	; (8001690 <File_O_Read_Line+0x20>)
 800167a:	21c8      	movs	r1, #200	; 0xc8
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f00f f936 	bl	80108ee <f_gets>
 8001682:	60f8      	str	r0, [r7, #12]
	 buffer, /* [OUT] Read buffer */
	  200,     /* [IN] Size of the read buffer */
	  &open_fil      /* [IN] File object */
	);

	return result;
 8001684:	68fb      	ldr	r3, [r7, #12]

}
 8001686:	4618      	mov	r0, r3
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	200022d8 	.word	0x200022d8

08001694 <Ringbuf_Init>:

void store_char (unsigned char c, ring_buffer *buffer);


void Ringbuf_Init(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  _rx_buffer1 = &rx_buffer1;
 8001698:	4b18      	ldr	r3, [pc, #96]	; (80016fc <Ringbuf_Init+0x68>)
 800169a:	4a19      	ldr	r2, [pc, #100]	; (8001700 <Ringbuf_Init+0x6c>)
 800169c:	601a      	str	r2, [r3, #0]
  _tx_buffer1 = &tx_buffer1;
 800169e:	4b19      	ldr	r3, [pc, #100]	; (8001704 <Ringbuf_Init+0x70>)
 80016a0:	4a19      	ldr	r2, [pc, #100]	; (8001708 <Ringbuf_Init+0x74>)
 80016a2:	601a      	str	r2, [r3, #0]
  _rx_buffer2 = &rx_buffer2;
 80016a4:	4b19      	ldr	r3, [pc, #100]	; (800170c <Ringbuf_Init+0x78>)
 80016a6:	4a1a      	ldr	r2, [pc, #104]	; (8001710 <Ringbuf_Init+0x7c>)
 80016a8:	601a      	str	r2, [r3, #0]
  _tx_buffer2 = &tx_buffer2;
 80016aa:	4b1a      	ldr	r3, [pc, #104]	; (8001714 <Ringbuf_Init+0x80>)
 80016ac:	4a1a      	ldr	r2, [pc, #104]	; (8001718 <Ringbuf_Init+0x84>)
 80016ae:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(device_uart, UART_IT_ERR);
 80016b0:	4b1a      	ldr	r3, [pc, #104]	; (800171c <Ringbuf_Init+0x88>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	695a      	ldr	r2, [r3, #20]
 80016b6:	4b19      	ldr	r3, [pc, #100]	; (800171c <Ringbuf_Init+0x88>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f042 0201 	orr.w	r2, r2, #1
 80016be:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(pc_uart, UART_IT_ERR);
 80016c0:	4b17      	ldr	r3, [pc, #92]	; (8001720 <Ringbuf_Init+0x8c>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	695a      	ldr	r2, [r3, #20]
 80016c6:	4b16      	ldr	r3, [pc, #88]	; (8001720 <Ringbuf_Init+0x8c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f042 0201 	orr.w	r2, r2, #1
 80016ce:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(device_uart, UART_IT_RXNE);
 80016d0:	4b12      	ldr	r3, [pc, #72]	; (800171c <Ringbuf_Init+0x88>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	68da      	ldr	r2, [r3, #12]
 80016d6:	4b11      	ldr	r3, [pc, #68]	; (800171c <Ringbuf_Init+0x88>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f042 0220 	orr.w	r2, r2, #32
 80016de:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(pc_uart, UART_IT_RXNE);
 80016e0:	4b0f      	ldr	r3, [pc, #60]	; (8001720 <Ringbuf_Init+0x8c>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	68da      	ldr	r2, [r3, #12]
 80016e6:	4b0e      	ldr	r3, [pc, #56]	; (8001720 <Ringbuf_Init+0x8c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f042 0220 	orr.w	r2, r2, #32
 80016ee:	60da      	str	r2, [r3, #12]
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	20003b58 	.word	0x20003b58
 8001700:	20003338 	.word	0x20003338
 8001704:	20003b5c 	.word	0x20003b5c
 8001708:	20003540 	.word	0x20003540
 800170c:	20003b60 	.word	0x20003b60
 8001710:	20003748 	.word	0x20003748
 8001714:	20003b64 	.word	0x20003b64
 8001718:	20003950 	.word	0x20003950
 800171c:	20003f94 	.word	0x20003f94
 8001720:	20003fd8 	.word	0x20003fd8

08001724 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	6039      	str	r1, [r7, #0]
 800172e:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001736:	3301      	adds	r3, #1
 8001738:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800173c:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	429a      	cmp	r2, r3
 8001748:	d009      	beq.n	800175e <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	79f9      	ldrb	r1, [r7, #7]
 8001754:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8001756:	68fa      	ldr	r2, [r7, #12]
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 800175e:	bf00      	nop
 8001760:	3714      	adds	r7, #20
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
	...

0800176c <Uart_read>:

	return -1;
}

int Uart_read(UART_HandleTypeDef *uart)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4a29      	ldr	r2, [pc, #164]	; (800181c <Uart_read+0xb0>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d121      	bne.n	80017c0 <Uart_read+0x54>
	{
		  // if the head isn't ahead of the tail, we don't have any characters
		  if(_rx_buffer1->head == _rx_buffer1->tail)
 800177c:	4b28      	ldr	r3, [pc, #160]	; (8001820 <Uart_read+0xb4>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001784:	4b26      	ldr	r3, [pc, #152]	; (8001820 <Uart_read+0xb4>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800178c:	429a      	cmp	r2, r3
 800178e:	d102      	bne.n	8001796 <Uart_read+0x2a>
		  {
		    return -1;
 8001790:	f04f 33ff 	mov.w	r3, #4294967295
 8001794:	e03c      	b.n	8001810 <Uart_read+0xa4>
		  }
		  else
		  {
		    unsigned char c = _rx_buffer1->buffer[_rx_buffer1->tail];
 8001796:	4b22      	ldr	r3, [pc, #136]	; (8001820 <Uart_read+0xb4>)
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	4b21      	ldr	r3, [pc, #132]	; (8001820 <Uart_read+0xb4>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80017a2:	5cd3      	ldrb	r3, [r2, r3]
 80017a4:	73bb      	strb	r3, [r7, #14]
		    _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 80017a6:	4b1e      	ldr	r3, [pc, #120]	; (8001820 <Uart_read+0xb4>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80017ae:	1c5a      	adds	r2, r3, #1
 80017b0:	4b1b      	ldr	r3, [pc, #108]	; (8001820 <Uart_read+0xb4>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80017b8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		    return c;
 80017bc:	7bbb      	ldrb	r3, [r7, #14]
 80017be:	e027      	b.n	8001810 <Uart_read+0xa4>
		  }
	}

	else if (uart == pc_uart)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4a18      	ldr	r2, [pc, #96]	; (8001824 <Uart_read+0xb8>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d121      	bne.n	800180c <Uart_read+0xa0>
	{
		  // if the head isn't ahead of the tail, we don't have any characters
		  if(_rx_buffer2->head == _rx_buffer2->tail)
 80017c8:	4b17      	ldr	r3, [pc, #92]	; (8001828 <Uart_read+0xbc>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80017d0:	4b15      	ldr	r3, [pc, #84]	; (8001828 <Uart_read+0xbc>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80017d8:	429a      	cmp	r2, r3
 80017da:	d102      	bne.n	80017e2 <Uart_read+0x76>
		  {
		    return -1;
 80017dc:	f04f 33ff 	mov.w	r3, #4294967295
 80017e0:	e016      	b.n	8001810 <Uart_read+0xa4>
		  }
		  else
		  {
		    unsigned char c = _rx_buffer2->buffer[_rx_buffer2->tail];
 80017e2:	4b11      	ldr	r3, [pc, #68]	; (8001828 <Uart_read+0xbc>)
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	4b10      	ldr	r3, [pc, #64]	; (8001828 <Uart_read+0xbc>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80017ee:	5cd3      	ldrb	r3, [r2, r3]
 80017f0:	73fb      	strb	r3, [r7, #15]
		    _rx_buffer2->tail = (unsigned int)(_rx_buffer2->tail + 1) % UART_BUFFER_SIZE;
 80017f2:	4b0d      	ldr	r3, [pc, #52]	; (8001828 <Uart_read+0xbc>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80017fa:	1c5a      	adds	r2, r3, #1
 80017fc:	4b0a      	ldr	r3, [pc, #40]	; (8001828 <Uart_read+0xbc>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001804:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		    return c;
 8001808:	7bfb      	ldrb	r3, [r7, #15]
 800180a:	e001      	b.n	8001810 <Uart_read+0xa4>
		  }
	}

	else return -1;
 800180c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001810:	4618      	mov	r0, r3
 8001812:	3714      	adds	r7, #20
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	20003f94 	.word	0x20003f94
 8001820:	20003b58 	.word	0x20003b58
 8001824:	20003fd8 	.word	0x20003fd8
 8001828:	20003b60 	.word	0x20003b60

0800182c <Uart_write>:

void Uart_write(int c, UART_HandleTypeDef *uart)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
	if (c>=0)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2b00      	cmp	r3, #0
 800183a:	db5f      	blt.n	80018fc <Uart_write+0xd0>
	{
		if (uart == device_uart){
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	4a31      	ldr	r2, [pc, #196]	; (8001904 <Uart_write+0xd8>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d126      	bne.n	8001892 <Uart_write+0x66>
		int i = (_tx_buffer1->head + 1) % UART_BUFFER_SIZE;
 8001844:	4b30      	ldr	r3, [pc, #192]	; (8001908 <Uart_write+0xdc>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800184c:	3301      	adds	r3, #1
 800184e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001852:	613b      	str	r3, [r7, #16]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer1->tail);
 8001854:	bf00      	nop
 8001856:	4b2c      	ldr	r3, [pc, #176]	; (8001908 <Uart_write+0xdc>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	429a      	cmp	r2, r3
 8001862:	d0f8      	beq.n	8001856 <Uart_write+0x2a>

		_tx_buffer1->buffer[_tx_buffer1->head] = (uint8_t)c;
 8001864:	4b28      	ldr	r3, [pc, #160]	; (8001908 <Uart_write+0xdc>)
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	4b27      	ldr	r3, [pc, #156]	; (8001908 <Uart_write+0xdc>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001870:	6879      	ldr	r1, [r7, #4]
 8001872:	b2c9      	uxtb	r1, r1
 8001874:	54d1      	strb	r1, [r2, r3]
		_tx_buffer1->head = i;
 8001876:	4b24      	ldr	r3, [pc, #144]	; (8001908 <Uart_write+0xdc>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

		__HAL_UART_ENABLE_IT(device_uart, UART_IT_TXE); // Enable UART transmission interrupt
 8001880:	4b20      	ldr	r3, [pc, #128]	; (8001904 <Uart_write+0xd8>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	68da      	ldr	r2, [r3, #12]
 8001886:	4b1f      	ldr	r3, [pc, #124]	; (8001904 <Uart_write+0xd8>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800188e:	60da      	str	r2, [r3, #12]
			_tx_buffer2->head = i;

			__HAL_UART_ENABLE_IT(pc_uart, UART_IT_TXE); // Enable UART transmission interrupt
			}
	}
}
 8001890:	e034      	b.n	80018fc <Uart_write+0xd0>
		else if (uart == pc_uart){
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	4a1d      	ldr	r2, [pc, #116]	; (800190c <Uart_write+0xe0>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d130      	bne.n	80018fc <Uart_write+0xd0>
			buf[0] = c;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	b2db      	uxtb	r3, r3
 800189e:	733b      	strb	r3, [r7, #12]
			buf[1] = 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	737b      	strb	r3, [r7, #13]
			Log(buf, 1);
 80018a4:	f107 030c 	add.w	r3, r7, #12
 80018a8:	2101      	movs	r1, #1
 80018aa:	4618      	mov	r0, r3
 80018ac:	f002 fcd4 	bl	8004258 <Log>
			int i = (_tx_buffer2->head + 1) % UART_BUFFER_SIZE;
 80018b0:	4b17      	ldr	r3, [pc, #92]	; (8001910 <Uart_write+0xe4>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80018b8:	3301      	adds	r3, #1
 80018ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018be:	617b      	str	r3, [r7, #20]
			while (i == _tx_buffer2->tail);
 80018c0:	bf00      	nop
 80018c2:	4b13      	ldr	r3, [pc, #76]	; (8001910 <Uart_write+0xe4>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d0f8      	beq.n	80018c2 <Uart_write+0x96>
			_tx_buffer2->buffer[_tx_buffer2->head] = (uint8_t)c;
 80018d0:	4b0f      	ldr	r3, [pc, #60]	; (8001910 <Uart_write+0xe4>)
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <Uart_write+0xe4>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80018dc:	6879      	ldr	r1, [r7, #4]
 80018de:	b2c9      	uxtb	r1, r1
 80018e0:	54d1      	strb	r1, [r2, r3]
			_tx_buffer2->head = i;
 80018e2:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <Uart_write+0xe4>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	697a      	ldr	r2, [r7, #20]
 80018e8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			__HAL_UART_ENABLE_IT(pc_uart, UART_IT_TXE); // Enable UART transmission interrupt
 80018ec:	4b07      	ldr	r3, [pc, #28]	; (800190c <Uart_write+0xe0>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	68da      	ldr	r2, [r3, #12]
 80018f2:	4b06      	ldr	r3, [pc, #24]	; (800190c <Uart_write+0xe0>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018fa:	60da      	str	r2, [r3, #12]
}
 80018fc:	bf00      	nop
 80018fe:	3718      	adds	r7, #24
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20003f94 	.word	0x20003f94
 8001908:	20003b5c 	.word	0x20003b5c
 800190c:	20003fd8 	.word	0x20003fd8
 8001910:	20003b64 	.word	0x20003b64

08001914 <IsDataAvailable>:

int IsDataAvailable(UART_HandleTypeDef *uart)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
	if (uart == device_uart) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer1->head - _rx_buffer1->tail) % UART_BUFFER_SIZE;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	4a19      	ldr	r2, [pc, #100]	; (8001984 <IsDataAvailable+0x70>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d111      	bne.n	8001948 <IsDataAvailable+0x34>
 8001924:	4b18      	ldr	r3, [pc, #96]	; (8001988 <IsDataAvailable+0x74>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800192c:	b29a      	uxth	r2, r3
 800192e:	4b16      	ldr	r3, [pc, #88]	; (8001988 <IsDataAvailable+0x74>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001936:	b29b      	uxth	r3, r3
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	b29b      	uxth	r3, r3
 800193c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001940:	b29b      	uxth	r3, r3
 8001942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001946:	e017      	b.n	8001978 <IsDataAvailable+0x64>
	else if (uart == pc_uart) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer2->head - _rx_buffer2->tail) % UART_BUFFER_SIZE;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4a10      	ldr	r2, [pc, #64]	; (800198c <IsDataAvailable+0x78>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d111      	bne.n	8001974 <IsDataAvailable+0x60>
 8001950:	4b0f      	ldr	r3, [pc, #60]	; (8001990 <IsDataAvailable+0x7c>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001958:	b29a      	uxth	r2, r3
 800195a:	4b0d      	ldr	r3, [pc, #52]	; (8001990 <IsDataAvailable+0x7c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001962:	b29b      	uxth	r3, r3
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	b29b      	uxth	r3, r3
 8001968:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800196c:	b29b      	uxth	r3, r3
 800196e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001972:	e001      	b.n	8001978 <IsDataAvailable+0x64>
	return -1;
 8001974:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001978:	4618      	mov	r0, r3
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	20003f94 	.word	0x20003f94
 8001988:	20003b58 	.word	0x20003b58
 800198c:	20003fd8 	.word	0x20003fd8
 8001990:	20003b60 	.word	0x20003b60

08001994 <Uart_SendString>:
	}
	return 1;
}

void Uart_SendString (const char *s, UART_HandleTypeDef *uart)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
	while(*s!='\0') Uart_write(*s++, uart);
 800199e:	e007      	b.n	80019b0 <Uart_SendString+0x1c>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	1c5a      	adds	r2, r3, #1
 80019a4:	607a      	str	r2, [r7, #4]
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	6839      	ldr	r1, [r7, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff ff3e 	bl	800182c <Uart_write>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d1f3      	bne.n	80019a0 <Uart_SendString+0xc>
}
 80019b8:	bf00      	nop
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
	...

080019c4 <Uart_isr>:
	if (so_far == len) return 1;
	else return -1;
}

void Uart_isr (UART_HandleTypeDef *huart)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	f003 0320 	and.w	r3, r3, #32
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d023      	beq.n	8001a2e <Uart_isr+0x6a>
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	f003 0320 	and.w	r3, r3, #32
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d01e      	beq.n	8001a2e <Uart_isr+0x6a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	73fb      	strb	r3, [r7, #15]
        if (huart == device_uart)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a3f      	ldr	r2, [pc, #252]	; (8001b00 <Uart_isr+0x13c>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d107      	bne.n	8001a16 <Uart_isr+0x52>
        {
        	store_char (c, _rx_buffer1);  // store data in buffer
 8001a06:	4b3f      	ldr	r3, [pc, #252]	; (8001b04 <Uart_isr+0x140>)
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	7bfb      	ldrb	r3, [r7, #15]
 8001a0c:	4611      	mov	r1, r2
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff fe88 	bl	8001724 <store_char>
        else if (huart == pc_uart)
        {
           	store_char (c, _rx_buffer2);  // store data in buffer
        }

        return;
 8001a14:	e06d      	b.n	8001af2 <Uart_isr+0x12e>
        else if (huart == pc_uart)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a3b      	ldr	r2, [pc, #236]	; (8001b08 <Uart_isr+0x144>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d169      	bne.n	8001af2 <Uart_isr+0x12e>
           	store_char (c, _rx_buffer2);  // store data in buffer
 8001a1e:	4b3b      	ldr	r3, [pc, #236]	; (8001b0c <Uart_isr+0x148>)
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	7bfb      	ldrb	r3, [r7, #15]
 8001a24:	4611      	mov	r1, r2
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff fe7c 	bl	8001724 <store_char>
        return;
 8001a2c:	e061      	b.n	8001af2 <Uart_isr+0x12e>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d05f      	beq.n	8001af8 <Uart_isr+0x134>
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d05a      	beq.n	8001af8 <Uart_isr+0x134>
    {
    	if (huart == device_uart){
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a2e      	ldr	r2, [pc, #184]	; (8001b00 <Uart_isr+0x13c>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d127      	bne.n	8001a9a <Uart_isr+0xd6>
    	if(tx_buffer1.head == tx_buffer1.tail)
 8001a4a:	4b31      	ldr	r3, [pc, #196]	; (8001b10 <Uart_isr+0x14c>)
 8001a4c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001a50:	4b2f      	ldr	r3, [pc, #188]	; (8001b10 <Uart_isr+0x14c>)
 8001a52:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d108      	bne.n	8001a6c <Uart_isr+0xa8>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	68da      	ldr	r2, [r3, #12]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a68:	60da      	str	r2, [r3, #12]
        	      huart->Instance->SR;
        	      huart->Instance->DR = c;

        	    }
        	}
    	return;
 8001a6a:	e044      	b.n	8001af6 <Uart_isr+0x132>
    	      unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
 8001a6c:	4b28      	ldr	r3, [pc, #160]	; (8001b10 <Uart_isr+0x14c>)
 8001a6e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001a72:	4a27      	ldr	r2, [pc, #156]	; (8001b10 <Uart_isr+0x14c>)
 8001a74:	5cd3      	ldrb	r3, [r2, r3]
 8001a76:	737b      	strb	r3, [r7, #13]
    	      tx_buffer1.tail = (tx_buffer1.tail + 1) % UART_BUFFER_SIZE;
 8001a78:	4b25      	ldr	r3, [pc, #148]	; (8001b10 <Uart_isr+0x14c>)
 8001a7a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001a7e:	3301      	adds	r3, #1
 8001a80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a84:	4a22      	ldr	r2, [pc, #136]	; (8001b10 <Uart_isr+0x14c>)
 8001a86:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      huart->Instance->SR;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	7b7a      	ldrb	r2, [r7, #13]
 8001a96:	605a      	str	r2, [r3, #4]
    	return;
 8001a98:	e02d      	b.n	8001af6 <Uart_isr+0x132>
    	else if (huart == pc_uart){
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a1a      	ldr	r2, [pc, #104]	; (8001b08 <Uart_isr+0x144>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d129      	bne.n	8001af6 <Uart_isr+0x132>
        	if(tx_buffer2.head == tx_buffer2.tail)
 8001aa2:	4b1c      	ldr	r3, [pc, #112]	; (8001b14 <Uart_isr+0x150>)
 8001aa4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001aa8:	4b1a      	ldr	r3, [pc, #104]	; (8001b14 <Uart_isr+0x150>)
 8001aaa:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d108      	bne.n	8001ac4 <Uart_isr+0x100>
        	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	68da      	ldr	r2, [r3, #12]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ac0:	60da      	str	r2, [r3, #12]
    	return;
 8001ac2:	e018      	b.n	8001af6 <Uart_isr+0x132>
        	      unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
 8001ac4:	4b13      	ldr	r3, [pc, #76]	; (8001b14 <Uart_isr+0x150>)
 8001ac6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001aca:	4a12      	ldr	r2, [pc, #72]	; (8001b14 <Uart_isr+0x150>)
 8001acc:	5cd3      	ldrb	r3, [r2, r3]
 8001ace:	73bb      	strb	r3, [r7, #14]
        	      tx_buffer2.tail = (tx_buffer2.tail + 1) % UART_BUFFER_SIZE;
 8001ad0:	4b10      	ldr	r3, [pc, #64]	; (8001b14 <Uart_isr+0x150>)
 8001ad2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001adc:	4a0d      	ldr	r2, [pc, #52]	; (8001b14 <Uart_isr+0x150>)
 8001ade:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
        	      huart->Instance->SR;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
        	      huart->Instance->DR = c;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	7bba      	ldrb	r2, [r7, #14]
 8001aee:	605a      	str	r2, [r3, #4]
    	return;
 8001af0:	e001      	b.n	8001af6 <Uart_isr+0x132>
        return;
 8001af2:	bf00      	nop
 8001af4:	e000      	b.n	8001af8 <Uart_isr+0x134>
    	return;
 8001af6:	bf00      	nop
    }
}
 8001af8:	3718      	adds	r7, #24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20003f94 	.word	0x20003f94
 8001b04:	20003b58 	.word	0x20003b58
 8001b08:	20003fd8 	.word	0x20003fd8
 8001b0c:	20003b60 	.word	0x20003b60
 8001b10:	20003540 	.word	0x20003540
 8001b14:	20003950 	.word	0x20003950

08001b18 <DHT22_Start>:
uint16_t sum, rh, temp;

uint8_t presence = 0;

void DHT22_Start (void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
	Set_Pin_Output(DHT22_PORT, DHT22_PIN); // set the pin as output
 8001b1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b20:	480e      	ldr	r0, [pc, #56]	; (8001b5c <DHT22_Start+0x44>)
 8001b22:	f000 f8a1 	bl	8001c68 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 0);   // pull the pin low
 8001b26:	2200      	movs	r2, #0
 8001b28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b2c:	480b      	ldr	r0, [pc, #44]	; (8001b5c <DHT22_Start+0x44>)
 8001b2e:	f006 f98d 	bl	8007e4c <HAL_GPIO_WritePin>
	delay_us(1200);   // wait for > 1ms
 8001b32:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8001b36:	f001 f9b5 	bl	8002ea4 <delay_us>

	HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 1);   // pull the pin high
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b40:	4806      	ldr	r0, [pc, #24]	; (8001b5c <DHT22_Start+0x44>)
 8001b42:	f006 f983 	bl	8007e4c <HAL_GPIO_WritePin>
	delay_us(20);   // wait for 30us
 8001b46:	2014      	movs	r0, #20
 8001b48:	f001 f9ac 	bl	8002ea4 <delay_us>

	Set_Pin_Input(DHT22_PORT, DHT22_PIN);   // set as input
 8001b4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b50:	4802      	ldr	r0, [pc, #8]	; (8001b5c <DHT22_Start+0x44>)
 8001b52:	f000 f8a7 	bl	8001ca4 <Set_Pin_Input>
}
 8001b56:	bf00      	nop
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40020400 	.word	0x40020400

08001b60 <DHT22_Check_Response>:

uint8_t DHT22_Check_Response (void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
	Set_Pin_Input(DHT22_PORT, DHT22_PIN);   // set as input
 8001b66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b6a:	4818      	ldr	r0, [pc, #96]	; (8001bcc <DHT22_Check_Response+0x6c>)
 8001b6c:	f000 f89a 	bl	8001ca4 <Set_Pin_Input>
	uint8_t Response = 0;
 8001b70:	2300      	movs	r3, #0
 8001b72:	71fb      	strb	r3, [r7, #7]
	delay_us(40);  // wait for 40us
 8001b74:	2028      	movs	r0, #40	; 0x28
 8001b76:	f001 f995 	bl	8002ea4 <delay_us>
	if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))) // if the pin is low
 8001b7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b7e:	4813      	ldr	r0, [pc, #76]	; (8001bcc <DHT22_Check_Response+0x6c>)
 8001b80:	f006 f94c 	bl	8007e1c <HAL_GPIO_ReadPin>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d11b      	bne.n	8001bc2 <DHT22_Check_Response+0x62>
	{
		delay_us(80);   // wait for 80us
 8001b8a:	2050      	movs	r0, #80	; 0x50
 8001b8c:	f001 f98a 	bl	8002ea4 <delay_us>

		if ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))){
 8001b90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b94:	480d      	ldr	r0, [pc, #52]	; (8001bcc <DHT22_Check_Response+0x6c>)
 8001b96:	f006 f941 	bl	8007e1c <HAL_GPIO_ReadPin>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d00c      	beq.n	8001bba <DHT22_Check_Response+0x5a>
			Response = 1;  // if the pin is high, response is ok
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	71fb      	strb	r3, [r7, #7]
			while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)));   // wait for the pin to go low
 8001ba4:	bf00      	nop
 8001ba6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001baa:	4808      	ldr	r0, [pc, #32]	; (8001bcc <DHT22_Check_Response+0x6c>)
 8001bac:	f006 f936 	bl	8007e1c <HAL_GPIO_ReadPin>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1f7      	bne.n	8001ba6 <DHT22_Check_Response+0x46>
			return Response;
 8001bb6:	79fb      	ldrb	r3, [r7, #7]
 8001bb8:	e004      	b.n	8001bc4 <DHT22_Check_Response+0x64>
		}
		else {
			Response = -1;
 8001bba:	23ff      	movs	r3, #255	; 0xff
 8001bbc:	71fb      	strb	r3, [r7, #7]
			return Response;
 8001bbe:	79fb      	ldrb	r3, [r7, #7]
 8001bc0:	e000      	b.n	8001bc4 <DHT22_Check_Response+0x64>
		}
	}


	return Response;
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40020400 	.word	0x40020400

08001bd0 <DHT22_Read>:

uint8_t DHT22_Read (void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	71bb      	strb	r3, [r7, #6]
 8001bda:	e03a      	b.n	8001c52 <DHT22_Read+0x82>
	{
		while (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)));   // wait for the pin to go high
 8001bdc:	bf00      	nop
 8001bde:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001be2:	4820      	ldr	r0, [pc, #128]	; (8001c64 <DHT22_Read+0x94>)
 8001be4:	f006 f91a 	bl	8007e1c <HAL_GPIO_ReadPin>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d0f7      	beq.n	8001bde <DHT22_Read+0xe>
		delay_us(40);   // wait for 40 us
 8001bee:	2028      	movs	r0, #40	; 0x28
 8001bf0:	f001 f958 	bl	8002ea4 <delay_us>

		if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)))   // if the pin is low
 8001bf4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bf8:	481a      	ldr	r0, [pc, #104]	; (8001c64 <DHT22_Read+0x94>)
 8001bfa:	f006 f90f 	bl	8007e1c <HAL_GPIO_ReadPin>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d10e      	bne.n	8001c22 <DHT22_Read+0x52>
		{
			i&= ~(1<<(7-j));   // write 0
 8001c04:	79bb      	ldrb	r3, [r7, #6]
 8001c06:	f1c3 0307 	rsb	r3, r3, #7
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	b25b      	sxtb	r3, r3
 8001c12:	43db      	mvns	r3, r3
 8001c14:	b25a      	sxtb	r2, r3
 8001c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	b25b      	sxtb	r3, r3
 8001c1e:	71fb      	strb	r3, [r7, #7]
 8001c20:	e00b      	b.n	8001c3a <DHT22_Read+0x6a>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8001c22:	79bb      	ldrb	r3, [r7, #6]
 8001c24:	f1c3 0307 	rsb	r3, r3, #7
 8001c28:	2201      	movs	r2, #1
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	b25a      	sxtb	r2, r3
 8001c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	b25b      	sxtb	r3, r3
 8001c38:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)));  // wait for the pin to go low
 8001c3a:	bf00      	nop
 8001c3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c40:	4808      	ldr	r0, [pc, #32]	; (8001c64 <DHT22_Read+0x94>)
 8001c42:	f006 f8eb 	bl	8007e1c <HAL_GPIO_ReadPin>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d1f7      	bne.n	8001c3c <DHT22_Read+0x6c>
	for (j=0;j<8;j++)
 8001c4c:	79bb      	ldrb	r3, [r7, #6]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	71bb      	strb	r3, [r7, #6]
 8001c52:	79bb      	ldrb	r3, [r7, #6]
 8001c54:	2b07      	cmp	r3, #7
 8001c56:	d9c1      	bls.n	8001bdc <DHT22_Read+0xc>
	}

	return i;
 8001c58:	79fb      	ldrb	r3, [r7, #7]
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40020400 	.word	0x40020400

08001c68 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b088      	sub	sp, #32
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	460b      	mov	r3, r1
 8001c72:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c74:	f107 030c 	add.w	r3, r7, #12
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
 8001c82:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001c84:	887b      	ldrh	r3, [r7, #2]
 8001c86:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001c90:	f107 030c 	add.w	r3, r7, #12
 8001c94:	4619      	mov	r1, r3
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f005 ff3c 	bl	8007b14 <HAL_GPIO_Init>
}
 8001c9c:	bf00      	nop
 8001c9e:	3720      	adds	r7, #32
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b088      	sub	sp, #32
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	460b      	mov	r3, r1
 8001cae:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb0:	f107 030c 	add.w	r3, r7, #12
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	609a      	str	r2, [r3, #8]
 8001cbc:	60da      	str	r2, [r3, #12]
 8001cbe:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001cc0:	887b      	ldrh	r3, [r7, #2]
 8001cc2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001ccc:	f107 030c 	add.w	r3, r7, #12
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f005 ff1e 	bl	8007b14 <HAL_GPIO_Init>
}
 8001cd8:	bf00      	nop
 8001cda:	3720      	adds	r7, #32
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <get_DHT_Temp_Hum>:

uint8_t get_DHT_Temp_Hum (float *temperature, float *humidity)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
	DHT22_Start();
 8001cea:	f7ff ff15 	bl	8001b18 <DHT22_Start>
	 presence = DHT22_Check_Response();
 8001cee:	f7ff ff37 	bl	8001b60 <DHT22_Check_Response>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	4b34      	ldr	r3, [pc, #208]	; (8001dc8 <get_DHT_Temp_Hum+0xe8>)
 8001cf8:	701a      	strb	r2, [r3, #0]
	 if(presence){
 8001cfa:	4b33      	ldr	r3, [pc, #204]	; (8001dc8 <get_DHT_Temp_Hum+0xe8>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d05d      	beq.n	8001dbe <get_DHT_Temp_Hum+0xde>
		 rh_byte1 = DHT22_Read ();
 8001d02:	f7ff ff65 	bl	8001bd0 <DHT22_Read>
 8001d06:	4603      	mov	r3, r0
 8001d08:	461a      	mov	r2, r3
 8001d0a:	4b30      	ldr	r3, [pc, #192]	; (8001dcc <get_DHT_Temp_Hum+0xec>)
 8001d0c:	701a      	strb	r2, [r3, #0]
		 rh_byte2 = DHT22_Read ();
 8001d0e:	f7ff ff5f 	bl	8001bd0 <DHT22_Read>
 8001d12:	4603      	mov	r3, r0
 8001d14:	461a      	mov	r2, r3
 8001d16:	4b2e      	ldr	r3, [pc, #184]	; (8001dd0 <get_DHT_Temp_Hum+0xf0>)
 8001d18:	701a      	strb	r2, [r3, #0]
		 temp_byte1 = DHT22_Read ();
 8001d1a:	f7ff ff59 	bl	8001bd0 <DHT22_Read>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	461a      	mov	r2, r3
 8001d22:	4b2c      	ldr	r3, [pc, #176]	; (8001dd4 <get_DHT_Temp_Hum+0xf4>)
 8001d24:	701a      	strb	r2, [r3, #0]
		 temp_byte2 = DHT22_Read ();
 8001d26:	f7ff ff53 	bl	8001bd0 <DHT22_Read>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	4b2a      	ldr	r3, [pc, #168]	; (8001dd8 <get_DHT_Temp_Hum+0xf8>)
 8001d30:	701a      	strb	r2, [r3, #0]
		 sum = DHT22_Read();
 8001d32:	f7ff ff4d 	bl	8001bd0 <DHT22_Read>
 8001d36:	4603      	mov	r3, r0
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	4b28      	ldr	r3, [pc, #160]	; (8001ddc <get_DHT_Temp_Hum+0xfc>)
 8001d3c:	801a      	strh	r2, [r3, #0]

		 temp = ((temp_byte1<<8)|temp_byte2);
 8001d3e:	4b25      	ldr	r3, [pc, #148]	; (8001dd4 <get_DHT_Temp_Hum+0xf4>)
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	021b      	lsls	r3, r3, #8
 8001d44:	b21a      	sxth	r2, r3
 8001d46:	4b24      	ldr	r3, [pc, #144]	; (8001dd8 <get_DHT_Temp_Hum+0xf8>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	b21b      	sxth	r3, r3
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	b21b      	sxth	r3, r3
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	4b23      	ldr	r3, [pc, #140]	; (8001de0 <get_DHT_Temp_Hum+0x100>)
 8001d54:	801a      	strh	r2, [r3, #0]
		 rh = ((rh_byte1<<8)|rh_byte2);
 8001d56:	4b1d      	ldr	r3, [pc, #116]	; (8001dcc <get_DHT_Temp_Hum+0xec>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	021b      	lsls	r3, r3, #8
 8001d5c:	b21a      	sxth	r2, r3
 8001d5e:	4b1c      	ldr	r3, [pc, #112]	; (8001dd0 <get_DHT_Temp_Hum+0xf0>)
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	b21b      	sxth	r3, r3
 8001d64:	4313      	orrs	r3, r2
 8001d66:	b21b      	sxth	r3, r3
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	4b1e      	ldr	r3, [pc, #120]	; (8001de4 <get_DHT_Temp_Hum+0x104>)
 8001d6c:	801a      	strh	r2, [r3, #0]

		 *temperature = (float) (temp/10.0);
 8001d6e:	4b1c      	ldr	r3, [pc, #112]	; (8001de0 <get_DHT_Temp_Hum+0x100>)
 8001d70:	881b      	ldrh	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7fe fbee 	bl	8000554 <__aeabi_i2d>
 8001d78:	f04f 0200 	mov.w	r2, #0
 8001d7c:	4b1a      	ldr	r3, [pc, #104]	; (8001de8 <get_DHT_Temp_Hum+0x108>)
 8001d7e:	f7fe fd7d 	bl	800087c <__aeabi_ddiv>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	4610      	mov	r0, r2
 8001d88:	4619      	mov	r1, r3
 8001d8a:	f7fe ff45 	bl	8000c18 <__aeabi_d2f>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	601a      	str	r2, [r3, #0]
		 *humidity = (float) (rh/10.0);
 8001d94:	4b13      	ldr	r3, [pc, #76]	; (8001de4 <get_DHT_Temp_Hum+0x104>)
 8001d96:	881b      	ldrh	r3, [r3, #0]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7fe fbdb 	bl	8000554 <__aeabi_i2d>
 8001d9e:	f04f 0200 	mov.w	r2, #0
 8001da2:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <get_DHT_Temp_Hum+0x108>)
 8001da4:	f7fe fd6a 	bl	800087c <__aeabi_ddiv>
 8001da8:	4602      	mov	r2, r0
 8001daa:	460b      	mov	r3, r1
 8001dac:	4610      	mov	r0, r2
 8001dae:	4619      	mov	r1, r3
 8001db0:	f7fe ff32 	bl	8000c18 <__aeabi_d2f>
 8001db4:	4602      	mov	r2, r0
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	601a      	str	r2, [r3, #0]
		 return 1;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e000      	b.n	8001dc0 <get_DHT_Temp_Hum+0xe0>
	 }
	 else{
//		 *temperature = 0;
//		 *humidity = 0;
		 return 0;
 8001dbe:	2300      	movs	r3, #0
	 }


}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	20003b72 	.word	0x20003b72
 8001dcc:	20003b68 	.word	0x20003b68
 8001dd0:	20003b69 	.word	0x20003b69
 8001dd4:	20003b6a 	.word	0x20003b6a
 8001dd8:	20003b6b 	.word	0x20003b6b
 8001ddc:	20003b6c 	.word	0x20003b6c
 8001de0:	20003b70 	.word	0x20003b70
 8001de4:	20003b6e 	.word	0x20003b6e
 8001de8:	40240000 	.word	0x40240000

08001dec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001dec:	b5b0      	push	{r4, r5, r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001df2:	f004 fcd7 	bl	80067a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001df6:	f000 f989 	bl	800210c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dfa:	f000 fd35 	bl	8002868 <MX_GPIO_Init>
  MX_DMA_Init();
 8001dfe:	f000 fd03 	bl	8002808 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 8001e02:	f000 fac1 	bl	8002388 <MX_SDIO_SD_Init>
  MX_USART1_UART_Init();
 8001e06:	f000 fcab 	bl	8002760 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001e0a:	f000 f9e9 	bl	80021e0 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8001e0e:	f000 fcd1 	bl	80027b4 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8001e12:	f00b fb11 	bl	800d438 <MX_FATFS_Init>
  MX_SPI1_Init();
 8001e16:	f000 fad7 	bl	80023c8 <MX_SPI1_Init>
  MX_RTC_Init();
 8001e1a:	f000 fa5b 	bl	80022d4 <MX_RTC_Init>
  MX_TIM9_Init();
 8001e1e:	f000 fc41 	bl	80026a4 <MX_TIM9_Init>
  MX_TIM3_Init();
 8001e22:	f000 fb55 	bl	80024d0 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001e26:	f000 fb05 	bl	8002434 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001e2a:	f000 fb9f 	bl	800256c <MX_TIM4_Init>
  MX_TIM5_Init();
 8001e2e:	f000 fbeb 	bl	8002608 <MX_TIM5_Init>
  MX_IWDG_Init();
 8001e32:	f000 fa35 	bl	80022a0 <MX_IWDG_Init>
  MX_TIM10_Init();
 8001e36:	f000 fc6f 	bl	8002718 <MX_TIM10_Init>





	Ringbuf_Init();  // init the ring buffer for UART
 8001e3a:	f7ff fc2b 	bl	8001694 <Ringbuf_Init>

	Uart_SendString("\r\nStarting FreeFlightWX v", pc_uart);
 8001e3e:	4997      	ldr	r1, [pc, #604]	; (800209c <main+0x2b0>)
 8001e40:	4897      	ldr	r0, [pc, #604]	; (80020a0 <main+0x2b4>)
 8001e42:	f7ff fda7 	bl	8001994 <Uart_SendString>
	Uart_SendString(MAJOR_VERSION, pc_uart);
 8001e46:	4995      	ldr	r1, [pc, #596]	; (800209c <main+0x2b0>)
 8001e48:	4896      	ldr	r0, [pc, #600]	; (80020a4 <main+0x2b8>)
 8001e4a:	f7ff fda3 	bl	8001994 <Uart_SendString>
	Uart_SendString("_", pc_uart);
 8001e4e:	4993      	ldr	r1, [pc, #588]	; (800209c <main+0x2b0>)
 8001e50:	4895      	ldr	r0, [pc, #596]	; (80020a8 <main+0x2bc>)
 8001e52:	f7ff fd9f 	bl	8001994 <Uart_SendString>
	Uart_SendString(BUILD_NUMBER, pc_uart);
 8001e56:	4991      	ldr	r1, [pc, #580]	; (800209c <main+0x2b0>)
 8001e58:	4894      	ldr	r0, [pc, #592]	; (80020ac <main+0x2c0>)
 8001e5a:	f7ff fd9b 	bl	8001994 <Uart_SendString>
	Uart_SendString("\r\n", pc_uart);
 8001e5e:	498f      	ldr	r1, [pc, #572]	; (800209c <main+0x2b0>)
 8001e60:	4893      	ldr	r0, [pc, #588]	; (80020b0 <main+0x2c4>)
 8001e62:	f7ff fd97 	bl	8001994 <Uart_SendString>

	initMeasureBuffer();
 8001e66:	f001 f8af 	bl	8002fc8 <initMeasureBuffer>

	SDcard_Init();
 8001e6a:	f001 fd9f 	bl	80039ac <SDcard_Init>

	openSettingsFromSD();
 8001e6e:	f001 fe45 	bl	8003afc <openSettingsFromSD>

	initTime();
 8001e72:	f004 f957 	bl	8006124 <initTime>


	HAL_TIM_Base_Start(&htim9);
 8001e76:	488f      	ldr	r0, [pc, #572]	; (80020b4 <main+0x2c8>)
 8001e78:	f009 f9de 	bl	800b238 <HAL_TIM_Base_Start>

	HAL_ADC_Start_DMA(&hadc1, adcValues, 2);  // start the adc in dma mode. adcValues is the buffer, where the adc values are going to store
 8001e7c:	2202      	movs	r2, #2
 8001e7e:	498e      	ldr	r1, [pc, #568]	; (80020b8 <main+0x2cc>)
 8001e80:	488e      	ldr	r0, [pc, #568]	; (80020bc <main+0x2d0>)
 8001e82:	f004 fd69 	bl	8006958 <HAL_ADC_Start_DMA>



	//startup sensors

	MS5611_Init();//ms5611 init
 8001e86:	f001 fb71 	bl	800356c <MS5611_Init>

	get_DHT_Temp_Hum(&temperature, &humidity);
 8001e8a:	498d      	ldr	r1, [pc, #564]	; (80020c0 <main+0x2d4>)
 8001e8c:	488d      	ldr	r0, [pc, #564]	; (80020c4 <main+0x2d8>)
 8001e8e:	f7ff ff27 	bl	8001ce0 <get_DHT_Temp_Hum>
	sprintf(buffer, "Temperature:%.1f Humidity:%.1f ",temperature,humidity);
 8001e92:	4b8c      	ldr	r3, [pc, #560]	; (80020c4 <main+0x2d8>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7fe fb6e 	bl	8000578 <__aeabi_f2d>
 8001e9c:	4604      	mov	r4, r0
 8001e9e:	460d      	mov	r5, r1
 8001ea0:	4b87      	ldr	r3, [pc, #540]	; (80020c0 <main+0x2d4>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7fe fb67 	bl	8000578 <__aeabi_f2d>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	460b      	mov	r3, r1
 8001eae:	e9cd 2300 	strd	r2, r3, [sp]
 8001eb2:	4622      	mov	r2, r4
 8001eb4:	462b      	mov	r3, r5
 8001eb6:	4984      	ldr	r1, [pc, #528]	; (80020c8 <main+0x2dc>)
 8001eb8:	4884      	ldr	r0, [pc, #528]	; (80020cc <main+0x2e0>)
 8001eba:	f00f fe87 	bl	8011bcc <siprintf>
	Uart_SendString(buffer, pc_uart);
 8001ebe:	4977      	ldr	r1, [pc, #476]	; (800209c <main+0x2b0>)
 8001ec0:	4882      	ldr	r0, [pc, #520]	; (80020cc <main+0x2e0>)
 8001ec2:	f7ff fd67 	bl	8001994 <Uart_SendString>


	uint32_t pressure = getPressure();
 8001ec6:	f001 fd41 	bl	800394c <getPressure>
 8001eca:	60f8      	str	r0, [r7, #12]
	sprintf(buffer, "Pressure %X %lu\r\n",(unsigned int) pressure,pressure);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	497f      	ldr	r1, [pc, #508]	; (80020d0 <main+0x2e4>)
 8001ed2:	487e      	ldr	r0, [pc, #504]	; (80020cc <main+0x2e0>)
 8001ed4:	f00f fe7a 	bl	8011bcc <siprintf>
	Uart_SendString(buffer, pc_uart);
 8001ed8:	4970      	ldr	r1, [pc, #448]	; (800209c <main+0x2b0>)
 8001eda:	487c      	ldr	r0, [pc, #496]	; (80020cc <main+0x2e0>)
 8001edc:	f7ff fd5a 	bl	8001994 <Uart_SendString>

	Uart_SendString("Begin 2250 ms timer (htim3)\r\n", pc_uart);
 8001ee0:	496e      	ldr	r1, [pc, #440]	; (800209c <main+0x2b0>)
 8001ee2:	487c      	ldr	r0, [pc, #496]	; (80020d4 <main+0x2e8>)
 8001ee4:	f7ff fd56 	bl	8001994 <Uart_SendString>
	HAL_TIM_Base_Start_IT(&htim3);
 8001ee8:	487b      	ldr	r0, [pc, #492]	; (80020d8 <main+0x2ec>)
 8001eea:	f009 fa27 	bl	800b33c <HAL_TIM_Base_Start_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		//1. refresh watchdog timer - the ultimate restart failsafe if something else does not work
		HAL_IWDG_Refresh(&hiwdg);
 8001eee:	487b      	ldr	r0, [pc, #492]	; (80020dc <main+0x2f0>)
 8001ef0:	f006 f820 	bl	8007f34 <HAL_IWDG_Refresh>

		//2. has a shutdown been scheduled
		checkShutdown();//actually executes the shutdown if scheduled an the timer has expired.
 8001ef4:	f002 fba6 	bl	8004644 <checkShutdown>

		//3. If the time is ok, save settings to SD (if there are new settings, and check for restart hour.
		if(getTimeState() == TIMESTATE_OK_NITZ || getTimeState() == TIMESTATE_OK_SERVER){
 8001ef8:	f004 faf8 	bl	80064ec <getTimeState>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d004      	beq.n	8001f0c <main+0x120>
 8001f02:	f004 faf3 	bl	80064ec <getTimeState>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d12e      	bne.n	8001f6a <main+0x17e>
			saveSettingsToSD();
 8001f0c:	f001 fe54 	bl	8003bb8 <saveSettingsToSD>

			thisHour = getHour();
 8001f10:	f004 fb56 	bl	80065c0 <getHour>
 8001f14:	4603      	mov	r3, r0
 8001f16:	461a      	mov	r2, r3
 8001f18:	4b71      	ldr	r3, [pc, #452]	; (80020e0 <main+0x2f4>)
 8001f1a:	701a      	strb	r2, [r3, #0]
			if(thisHour == getSettings()->RSH && thisHour!=lastHour && lastHour != H_TEST){//it is the restart hour, and the first time we have seen it.
 8001f1c:	f001 ff64 	bl	8003de8 <getSettings>
 8001f20:	4603      	mov	r3, r0
 8001f22:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
 8001f26:	4b6e      	ldr	r3, [pc, #440]	; (80020e0 <main+0x2f4>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d119      	bne.n	8001f62 <main+0x176>
 8001f2e:	4b6c      	ldr	r3, [pc, #432]	; (80020e0 <main+0x2f4>)
 8001f30:	781a      	ldrb	r2, [r3, #0]
 8001f32:	4b6c      	ldr	r3, [pc, #432]	; (80020e4 <main+0x2f8>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d013      	beq.n	8001f62 <main+0x176>
 8001f3a:	4b6a      	ldr	r3, [pc, #424]	; (80020e4 <main+0x2f8>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	2b63      	cmp	r3, #99	; 0x63
 8001f40:	d00f      	beq.n	8001f62 <main+0x176>
				sprintf(buffer, "Restart hour %i reached. Restarting... \r\n\r\n",getSettings()->RSH);
 8001f42:	f001 ff51 	bl	8003de8 <getSettings>
 8001f46:	4603      	mov	r3, r0
 8001f48:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	4966      	ldr	r1, [pc, #408]	; (80020e8 <main+0x2fc>)
 8001f50:	485e      	ldr	r0, [pc, #376]	; (80020cc <main+0x2e0>)
 8001f52:	f00f fe3b 	bl	8011bcc <siprintf>
				Uart_SendString(buffer, pc_uart);
 8001f56:	4951      	ldr	r1, [pc, #324]	; (800209c <main+0x2b0>)
 8001f58:	485c      	ldr	r0, [pc, #368]	; (80020cc <main+0x2e0>)
 8001f5a:	f7ff fd1b 	bl	8001994 <Uart_SendString>

				shutdown();
 8001f5e:	f002 fb45 	bl	80045ec <shutdown>

			}

			lastHour = thisHour;
 8001f62:	4b5f      	ldr	r3, [pc, #380]	; (80020e0 <main+0x2f4>)
 8001f64:	781a      	ldrb	r2, [r3, #0]
 8001f66:	4b5f      	ldr	r3, [pc, #380]	; (80020e4 <main+0x2f8>)
 8001f68:	701a      	strb	r2, [r3, #0]
		}

		//4. Do we have a new measurement to deal with? If the time is ok, add time to it and add it to the measurement list ready for sending
		if(newMeasurement ){
 8001f6a:	4b60      	ldr	r3, [pc, #384]	; (80020ec <main+0x300>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d05a      	beq.n	8002028 <main+0x23c>
			if(getTimeState() == TIMESTATE_OK_NITZ || getTimeState() == TIMESTATE_OK_SERVER){
 8001f72:	f004 fabb 	bl	80064ec <getTimeState>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d004      	beq.n	8001f86 <main+0x19a>
 8001f7c:	f004 fab6 	bl	80064ec <getTimeState>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d149      	bne.n	800201a <main+0x22e>
				currentMeasurement.index = powerOnIndex++;
 8001f86:	4b5a      	ldr	r3, [pc, #360]	; (80020f0 <main+0x304>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	1c5a      	adds	r2, r3, #1
 8001f8c:	4958      	ldr	r1, [pc, #352]	; (80020f0 <main+0x304>)
 8001f8e:	600a      	str	r2, [r1, #0]
 8001f90:	4a58      	ldr	r2, [pc, #352]	; (80020f4 <main+0x308>)
 8001f92:	6013      	str	r3, [r2, #0]
				getEpochTime(&currentMeasurement.unix_time);
 8001f94:	4858      	ldr	r0, [pc, #352]	; (80020f8 <main+0x30c>)
 8001f96:	f004 f9fd 	bl	8006394 <getEpochTime>
				currentMeasurement.pressure = getPressure();
 8001f9a:	f001 fcd7 	bl	800394c <getPressure>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	4a54      	ldr	r2, [pc, #336]	; (80020f4 <main+0x308>)
 8001fa2:	6193      	str	r3, [r2, #24]

				uint8_t res;
				res = get_DHT_Temp_Hum(&temperature, &humidity);
 8001fa4:	4946      	ldr	r1, [pc, #280]	; (80020c0 <main+0x2d4>)
 8001fa6:	4847      	ldr	r0, [pc, #284]	; (80020c4 <main+0x2d8>)
 8001fa8:	f7ff fe9a 	bl	8001ce0 <get_DHT_Temp_Hum>
 8001fac:	4603      	mov	r3, r0
 8001fae:	72fb      	strb	r3, [r7, #11]
				if(!res){
 8001fb0:	7afb      	ldrb	r3, [r7, #11]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d103      	bne.n	8001fbe <main+0x1d2>
					Uart_SendString("\r\nTemperature and Humidity not updated. DHT22 Not Responding", pc_uart);
 8001fb6:	4939      	ldr	r1, [pc, #228]	; (800209c <main+0x2b0>)
 8001fb8:	4850      	ldr	r0, [pc, #320]	; (80020fc <main+0x310>)
 8001fba:	f7ff fceb 	bl	8001994 <Uart_SendString>
				}
				currentMeasurement.temperature = temperature;
 8001fbe:	4b41      	ldr	r3, [pc, #260]	; (80020c4 <main+0x2d8>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a4c      	ldr	r2, [pc, #304]	; (80020f4 <main+0x308>)
 8001fc4:	61d3      	str	r3, [r2, #28]
				currentMeasurement.humidity = humidity;
 8001fc6:	4b3e      	ldr	r3, [pc, #248]	; (80020c0 <main+0x2d4>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a4a      	ldr	r2, [pc, #296]	; (80020f4 <main+0x308>)
 8001fcc:	6213      	str	r3, [r2, #32]


				currentMeasurement.csq = 199;
 8001fce:	4b49      	ldr	r3, [pc, #292]	; (80020f4 <main+0x308>)
 8001fd0:	22c7      	movs	r2, #199	; 0xc7
 8001fd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

				addMeasurement(&currentMeasurement);
 8001fd6:	4847      	ldr	r0, [pc, #284]	; (80020f4 <main+0x308>)
 8001fd8:	f001 f80c 	bl	8002ff4 <addMeasurement>
				newMeasurement = 0;
 8001fdc:	4b43      	ldr	r3, [pc, #268]	; (80020ec <main+0x300>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	701a      	strb	r2, [r3, #0]

				Uart_SendString("\r\n*  *  *  *  *\r\nNew FFWX measurement recorded at: ", pc_uart);
 8001fe2:	492e      	ldr	r1, [pc, #184]	; (800209c <main+0x2b0>)
 8001fe4:	4846      	ldr	r0, [pc, #280]	; (8002100 <main+0x314>)
 8001fe6:	f7ff fcd5 	bl	8001994 <Uart_SendString>
				getTimeChar(buffer);
 8001fea:	4838      	ldr	r0, [pc, #224]	; (80020cc <main+0x2e0>)
 8001fec:	f004 fb02 	bl	80065f4 <getTimeChar>
				Uart_SendString(buffer, pc_uart);
 8001ff0:	492a      	ldr	r1, [pc, #168]	; (800209c <main+0x2b0>)
 8001ff2:	4836      	ldr	r0, [pc, #216]	; (80020cc <main+0x2e0>)
 8001ff4:	f7ff fcce 	bl	8001994 <Uart_SendString>
				Uart_SendString("\r\n", pc_uart);
 8001ff8:	4928      	ldr	r1, [pc, #160]	; (800209c <main+0x2b0>)
 8001ffa:	482d      	ldr	r0, [pc, #180]	; (80020b0 <main+0x2c4>)
 8001ffc:	f7ff fcca 	bl	8001994 <Uart_SendString>
				measurementToSentance(&currentMeasurement, buffer);
 8002000:	4932      	ldr	r1, [pc, #200]	; (80020cc <main+0x2e0>)
 8002002:	483c      	ldr	r0, [pc, #240]	; (80020f4 <main+0x308>)
 8002004:	f001 fa56 	bl	80034b4 <measurementToSentance>
				Uart_SendString(buffer, pc_uart);
 8002008:	4924      	ldr	r1, [pc, #144]	; (800209c <main+0x2b0>)
 800200a:	4830      	ldr	r0, [pc, #192]	; (80020cc <main+0x2e0>)
 800200c:	f7ff fcc2 	bl	8001994 <Uart_SendString>
				Log(buffer,1);
 8002010:	2101      	movs	r1, #1
 8002012:	482e      	ldr	r0, [pc, #184]	; (80020cc <main+0x2e0>)
 8002014:	f002 f920 	bl	8004258 <Log>
			if(getTimeState() == TIMESTATE_OK_NITZ || getTimeState() == TIMESTATE_OK_SERVER){
 8002018:	e006      	b.n	8002028 <main+0x23c>
			}
			else{
				Uart_SendString("\r\n*  *  *  *  *\r\nNew FFWX measurement discarded - time not set\r\n ", pc_uart);
 800201a:	4920      	ldr	r1, [pc, #128]	; (800209c <main+0x2b0>)
 800201c:	4839      	ldr	r0, [pc, #228]	; (8002104 <main+0x318>)
 800201e:	f7ff fcb9 	bl	8001994 <Uart_SendString>
				newMeasurement = 0;
 8002022:	4b32      	ldr	r3, [pc, #200]	; (80020ec <main+0x300>)
 8002024:	2200      	movs	r2, #0
 8002026:	701a      	strb	r2, [r3, #0]

		//5. Write data to the SD card.
		//Only write to the SD card if it less than 3ms since the last external interrupt cased by the anemometer,
		//or if it is less than 3ms since a 2.25s timer interrupt with 0 measurements.
		//This minimizes the chance of a external interrupt from the anemometer in the middle of SD card writing.
		if(timer10_ms_get() <= 3){
 8002028:	f000 ffba 	bl	8002fa0 <timer10_ms_get>
 800202c:	4603      	mov	r3, r0
 800202e:	2b03      	cmp	r3, #3
 8002030:	d803      	bhi.n	800203a <main+0x24e>
			checkWriteLogBuffer();
 8002032:	f002 f97b 	bl	800432c <checkWriteLogBuffer>
			checkSDError();
 8002036:	f001 fd03 	bl	8003a40 <checkSDError>
		}

		//6. Manage sending the sim7600 state machine, if the power is ok, then manage commands (and send measurements)
		if(sim7600_powerProcessor()){
 800203a:	f002 fb23 	bl	8004684 <sim7600_powerProcessor>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d00f      	beq.n	8002064 <main+0x278>
			sim7600_commandProcessor();
 8002044:	f002 fc8a 	bl	800495c <sim7600_commandProcessor>
		}

		//7. Process data from U2, (and send it to U1)
		while (IsDataAvailable(pc_uart)){
 8002048:	e00c      	b.n	8002064 <main+0x278>
			int data = Uart_read(pc_uart);
 800204a:	4814      	ldr	r0, [pc, #80]	; (800209c <main+0x2b0>)
 800204c:	f7ff fb8e 	bl	800176c <Uart_read>
 8002050:	6038      	str	r0, [r7, #0]
			pc_uart_processChar(data);
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	b2db      	uxtb	r3, r3
 8002056:	4618      	mov	r0, r3
 8002058:	f002 f85c 	bl	8004114 <pc_uart_processChar>
			Uart_write(data, device_uart);
 800205c:	492a      	ldr	r1, [pc, #168]	; (8002108 <main+0x31c>)
 800205e:	6838      	ldr	r0, [r7, #0]
 8002060:	f7ff fbe4 	bl	800182c <Uart_write>
		while (IsDataAvailable(pc_uart)){
 8002064:	480d      	ldr	r0, [pc, #52]	; (800209c <main+0x2b0>)
 8002066:	f7ff fc55 	bl	8001914 <IsDataAvailable>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d1ec      	bne.n	800204a <main+0x25e>
		}

		//8. Process data from U1, (and send it to U2)
		while (IsDataAvailable(device_uart)){
 8002070:	e00c      	b.n	800208c <main+0x2a0>
			int data = Uart_read(device_uart);
 8002072:	4825      	ldr	r0, [pc, #148]	; (8002108 <main+0x31c>)
 8002074:	f7ff fb7a 	bl	800176c <Uart_read>
 8002078:	6078      	str	r0, [r7, #4]
			sim7600_processChar(data);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	b2db      	uxtb	r3, r3
 800207e:	4618      	mov	r0, r3
 8002080:	f003 f92c 	bl	80052dc <sim7600_processChar>
			Uart_write(data, pc_uart);
 8002084:	4905      	ldr	r1, [pc, #20]	; (800209c <main+0x2b0>)
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f7ff fbd0 	bl	800182c <Uart_write>
		while (IsDataAvailable(device_uart)){
 800208c:	481e      	ldr	r0, [pc, #120]	; (8002108 <main+0x31c>)
 800208e:	f7ff fc41 	bl	8001914 <IsDataAvailable>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d1ec      	bne.n	8002072 <main+0x286>
		HAL_IWDG_Refresh(&hiwdg);
 8002098:	e729      	b.n	8001eee <main+0x102>
 800209a:	bf00      	nop
 800209c:	20003fd8 	.word	0x20003fd8
 80020a0:	08018060 	.word	0x08018060
 80020a4:	0801807c 	.word	0x0801807c
 80020a8:	08018080 	.word	0x08018080
 80020ac:	08018084 	.word	0x08018084
 80020b0:	08018088 	.word	0x08018088
 80020b4:	20003f04 	.word	0x20003f04
 80020b8:	2000401c 	.word	0x2000401c
 80020bc:	20003b74 	.word	0x20003b74
 80020c0:	2000408c 	.word	0x2000408c
 80020c4:	20004088 	.word	0x20004088
 80020c8:	0801808c 	.word	0x0801808c
 80020cc:	20004024 	.word	0x20004024
 80020d0:	080180ac 	.word	0x080180ac
 80020d4:	080180c0 	.word	0x080180c0
 80020d8:	20003e2c 	.word	0x20003e2c
 80020dc:	20003c1c 	.word	0x20003c1c
 80020e0:	20000007 	.word	0x20000007
 80020e4:	20000006 	.word	0x20000006
 80020e8:	080180e0 	.word	0x080180e0
 80020ec:	200040e0 	.word	0x200040e0
 80020f0:	20000000 	.word	0x20000000
 80020f4:	200040b4 	.word	0x200040b4
 80020f8:	200040b8 	.word	0x200040b8
 80020fc:	0801810c 	.word	0x0801810c
 8002100:	0801814c 	.word	0x0801814c
 8002104:	08018180 	.word	0x08018180
 8002108:	20003f94 	.word	0x20003f94

0800210c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b094      	sub	sp, #80	; 0x50
 8002110:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002112:	f107 0320 	add.w	r3, r7, #32
 8002116:	2230      	movs	r2, #48	; 0x30
 8002118:	2100      	movs	r1, #0
 800211a:	4618      	mov	r0, r3
 800211c:	f00e fd82 	bl	8010c24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002120:	f107 030c 	add.w	r3, r7, #12
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	605a      	str	r2, [r3, #4]
 800212a:	609a      	str	r2, [r3, #8]
 800212c:	60da      	str	r2, [r3, #12]
 800212e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002130:	2300      	movs	r3, #0
 8002132:	60bb      	str	r3, [r7, #8]
 8002134:	4b28      	ldr	r3, [pc, #160]	; (80021d8 <SystemClock_Config+0xcc>)
 8002136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002138:	4a27      	ldr	r2, [pc, #156]	; (80021d8 <SystemClock_Config+0xcc>)
 800213a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800213e:	6413      	str	r3, [r2, #64]	; 0x40
 8002140:	4b25      	ldr	r3, [pc, #148]	; (80021d8 <SystemClock_Config+0xcc>)
 8002142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002148:	60bb      	str	r3, [r7, #8]
 800214a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800214c:	2300      	movs	r3, #0
 800214e:	607b      	str	r3, [r7, #4]
 8002150:	4b22      	ldr	r3, [pc, #136]	; (80021dc <SystemClock_Config+0xd0>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a21      	ldr	r2, [pc, #132]	; (80021dc <SystemClock_Config+0xd0>)
 8002156:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800215a:	6013      	str	r3, [r2, #0]
 800215c:	4b1f      	ldr	r3, [pc, #124]	; (80021dc <SystemClock_Config+0xd0>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002164:	607b      	str	r3, [r7, #4]
 8002166:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002168:	2309      	movs	r3, #9
 800216a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800216c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002170:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002172:	2301      	movs	r3, #1
 8002174:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002176:	2302      	movs	r3, #2
 8002178:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800217a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800217e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8002180:	230f      	movs	r3, #15
 8002182:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8002184:	2390      	movs	r3, #144	; 0x90
 8002186:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002188:	2304      	movs	r3, #4
 800218a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800218c:	2305      	movs	r3, #5
 800218e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002190:	f107 0320 	add.w	r3, r7, #32
 8002194:	4618      	mov	r0, r3
 8002196:	f005 fedd 	bl	8007f54 <HAL_RCC_OscConfig>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80021a0:	f000 ff0a 	bl	8002fb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021a4:	230f      	movs	r3, #15
 80021a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021a8:	2302      	movs	r3, #2
 80021aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021ac:	2300      	movs	r3, #0
 80021ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80021b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021b6:	2300      	movs	r3, #0
 80021b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80021ba:	f107 030c 	add.w	r3, r7, #12
 80021be:	2101      	movs	r1, #1
 80021c0:	4618      	mov	r0, r3
 80021c2:	f006 f93f 	bl	8008444 <HAL_RCC_ClockConfig>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80021cc:	f000 fef4 	bl	8002fb8 <Error_Handler>
  }
}
 80021d0:	bf00      	nop
 80021d2:	3750      	adds	r7, #80	; 0x50
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40023800 	.word	0x40023800
 80021dc:	40007000 	.word	0x40007000

080021e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80021e6:	463b      	mov	r3, r7
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	605a      	str	r2, [r3, #4]
 80021ee:	609a      	str	r2, [r3, #8]
 80021f0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80021f2:	4b28      	ldr	r3, [pc, #160]	; (8002294 <MX_ADC1_Init+0xb4>)
 80021f4:	4a28      	ldr	r2, [pc, #160]	; (8002298 <MX_ADC1_Init+0xb8>)
 80021f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80021f8:	4b26      	ldr	r3, [pc, #152]	; (8002294 <MX_ADC1_Init+0xb4>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80021fe:	4b25      	ldr	r3, [pc, #148]	; (8002294 <MX_ADC1_Init+0xb4>)
 8002200:	2200      	movs	r2, #0
 8002202:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002204:	4b23      	ldr	r3, [pc, #140]	; (8002294 <MX_ADC1_Init+0xb4>)
 8002206:	2201      	movs	r2, #1
 8002208:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800220a:	4b22      	ldr	r3, [pc, #136]	; (8002294 <MX_ADC1_Init+0xb4>)
 800220c:	2201      	movs	r2, #1
 800220e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002210:	4b20      	ldr	r3, [pc, #128]	; (8002294 <MX_ADC1_Init+0xb4>)
 8002212:	2200      	movs	r2, #0
 8002214:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002218:	4b1e      	ldr	r3, [pc, #120]	; (8002294 <MX_ADC1_Init+0xb4>)
 800221a:	2200      	movs	r2, #0
 800221c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800221e:	4b1d      	ldr	r3, [pc, #116]	; (8002294 <MX_ADC1_Init+0xb4>)
 8002220:	4a1e      	ldr	r2, [pc, #120]	; (800229c <MX_ADC1_Init+0xbc>)
 8002222:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002224:	4b1b      	ldr	r3, [pc, #108]	; (8002294 <MX_ADC1_Init+0xb4>)
 8002226:	2200      	movs	r2, #0
 8002228:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800222a:	4b1a      	ldr	r3, [pc, #104]	; (8002294 <MX_ADC1_Init+0xb4>)
 800222c:	2202      	movs	r2, #2
 800222e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002230:	4b18      	ldr	r3, [pc, #96]	; (8002294 <MX_ADC1_Init+0xb4>)
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002238:	4b16      	ldr	r3, [pc, #88]	; (8002294 <MX_ADC1_Init+0xb4>)
 800223a:	2200      	movs	r2, #0
 800223c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800223e:	4815      	ldr	r0, [pc, #84]	; (8002294 <MX_ADC1_Init+0xb4>)
 8002240:	f004 fb46 	bl	80068d0 <HAL_ADC_Init>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800224a:	f000 feb5 	bl	8002fb8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800224e:	2300      	movs	r3, #0
 8002250:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002252:	2301      	movs	r3, #1
 8002254:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002256:	2307      	movs	r3, #7
 8002258:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800225a:	463b      	mov	r3, r7
 800225c:	4619      	mov	r1, r3
 800225e:	480d      	ldr	r0, [pc, #52]	; (8002294 <MX_ADC1_Init+0xb4>)
 8002260:	f004 fc88 	bl	8006b74 <HAL_ADC_ConfigChannel>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800226a:	f000 fea5 	bl	8002fb8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800226e:	2301      	movs	r3, #1
 8002270:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002272:	2302      	movs	r3, #2
 8002274:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002276:	463b      	mov	r3, r7
 8002278:	4619      	mov	r1, r3
 800227a:	4806      	ldr	r0, [pc, #24]	; (8002294 <MX_ADC1_Init+0xb4>)
 800227c:	f004 fc7a 	bl	8006b74 <HAL_ADC_ConfigChannel>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8002286:	f000 fe97 	bl	8002fb8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800228a:	bf00      	nop
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	20003b74 	.word	0x20003b74
 8002298:	40012000 	.word	0x40012000
 800229c:	0f000001 	.word	0x0f000001

080022a0 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80022a4:	4b09      	ldr	r3, [pc, #36]	; (80022cc <MX_IWDG_Init+0x2c>)
 80022a6:	4a0a      	ldr	r2, [pc, #40]	; (80022d0 <MX_IWDG_Init+0x30>)
 80022a8:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 80022aa:	4b08      	ldr	r3, [pc, #32]	; (80022cc <MX_IWDG_Init+0x2c>)
 80022ac:	2206      	movs	r2, #6
 80022ae:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 80022b0:	4b06      	ldr	r3, [pc, #24]	; (80022cc <MX_IWDG_Init+0x2c>)
 80022b2:	f640 72ff 	movw	r2, #4095	; 0xfff
 80022b6:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80022b8:	4804      	ldr	r0, [pc, #16]	; (80022cc <MX_IWDG_Init+0x2c>)
 80022ba:	f005 fdf9 	bl	8007eb0 <HAL_IWDG_Init>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80022c4:	f000 fe78 	bl	8002fb8 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80022c8:	bf00      	nop
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	20003c1c 	.word	0x20003c1c
 80022d0:	40003000 	.word	0x40003000

080022d4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80022da:	1d3b      	adds	r3, r7, #4
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	605a      	str	r2, [r3, #4]
 80022e2:	609a      	str	r2, [r3, #8]
 80022e4:	60da      	str	r2, [r3, #12]
 80022e6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80022e8:	2300      	movs	r3, #0
 80022ea:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80022ec:	4b24      	ldr	r3, [pc, #144]	; (8002380 <MX_RTC_Init+0xac>)
 80022ee:	4a25      	ldr	r2, [pc, #148]	; (8002384 <MX_RTC_Init+0xb0>)
 80022f0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80022f2:	4b23      	ldr	r3, [pc, #140]	; (8002380 <MX_RTC_Init+0xac>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 125-1;
 80022f8:	4b21      	ldr	r3, [pc, #132]	; (8002380 <MX_RTC_Init+0xac>)
 80022fa:	227c      	movs	r2, #124	; 0x7c
 80022fc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 7999-1;
 80022fe:	4b20      	ldr	r3, [pc, #128]	; (8002380 <MX_RTC_Init+0xac>)
 8002300:	f641 723e 	movw	r2, #7998	; 0x1f3e
 8002304:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002306:	4b1e      	ldr	r3, [pc, #120]	; (8002380 <MX_RTC_Init+0xac>)
 8002308:	2200      	movs	r2, #0
 800230a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800230c:	4b1c      	ldr	r3, [pc, #112]	; (8002380 <MX_RTC_Init+0xac>)
 800230e:	2200      	movs	r2, #0
 8002310:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002312:	4b1b      	ldr	r3, [pc, #108]	; (8002380 <MX_RTC_Init+0xac>)
 8002314:	2200      	movs	r2, #0
 8002316:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002318:	4819      	ldr	r0, [pc, #100]	; (8002380 <MX_RTC_Init+0xac>)
 800231a:	f006 fb63 	bl	80089e4 <HAL_RTC_Init>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8002324:	f000 fe48 	bl	8002fb8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8002328:	2300      	movs	r3, #0
 800232a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 800232c:	2300      	movs	r3, #0
 800232e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8002330:	2300      	movs	r3, #0
 8002332:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002334:	2300      	movs	r3, #0
 8002336:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002338:	2300      	movs	r3, #0
 800233a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800233c:	1d3b      	adds	r3, r7, #4
 800233e:	2200      	movs	r2, #0
 8002340:	4619      	mov	r1, r3
 8002342:	480f      	ldr	r0, [pc, #60]	; (8002380 <MX_RTC_Init+0xac>)
 8002344:	f006 fbc4 	bl	8008ad0 <HAL_RTC_SetTime>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 800234e:	f000 fe33 	bl	8002fb8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8002352:	2306      	movs	r3, #6
 8002354:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_OCTOBER;
 8002356:	2310      	movs	r3, #16
 8002358:	707b      	strb	r3, [r7, #1]
  sDate.Date = 24;
 800235a:	2318      	movs	r3, #24
 800235c:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 20;
 800235e:	2314      	movs	r3, #20
 8002360:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002362:	463b      	mov	r3, r7
 8002364:	2200      	movs	r2, #0
 8002366:	4619      	mov	r1, r3
 8002368:	4805      	ldr	r0, [pc, #20]	; (8002380 <MX_RTC_Init+0xac>)
 800236a:	f006 fca9 	bl	8008cc0 <HAL_RTC_SetDate>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 8002374:	f000 fe20 	bl	8002fb8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002378:	bf00      	nop
 800237a:	3718      	adds	r7, #24
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	20003c28 	.word	0x20003c28
 8002384:	40002800 	.word	0x40002800

08002388 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800238c:	4b0c      	ldr	r3, [pc, #48]	; (80023c0 <MX_SDIO_SD_Init+0x38>)
 800238e:	4a0d      	ldr	r2, [pc, #52]	; (80023c4 <MX_SDIO_SD_Init+0x3c>)
 8002390:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002392:	4b0b      	ldr	r3, [pc, #44]	; (80023c0 <MX_SDIO_SD_Init+0x38>)
 8002394:	2200      	movs	r2, #0
 8002396:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002398:	4b09      	ldr	r3, [pc, #36]	; (80023c0 <MX_SDIO_SD_Init+0x38>)
 800239a:	2200      	movs	r2, #0
 800239c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800239e:	4b08      	ldr	r3, [pc, #32]	; (80023c0 <MX_SDIO_SD_Init+0x38>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80023a4:	4b06      	ldr	r3, [pc, #24]	; (80023c0 <MX_SDIO_SD_Init+0x38>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80023aa:	4b05      	ldr	r3, [pc, #20]	; (80023c0 <MX_SDIO_SD_Init+0x38>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 80023b0:	4b03      	ldr	r3, [pc, #12]	; (80023c0 <MX_SDIO_SD_Init+0x38>)
 80023b2:	2202      	movs	r2, #2
 80023b4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80023b6:	bf00      	nop
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	20003c48 	.word	0x20003c48
 80023c4:	40012c00 	.word	0x40012c00

080023c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80023cc:	4b17      	ldr	r3, [pc, #92]	; (800242c <MX_SPI1_Init+0x64>)
 80023ce:	4a18      	ldr	r2, [pc, #96]	; (8002430 <MX_SPI1_Init+0x68>)
 80023d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80023d2:	4b16      	ldr	r3, [pc, #88]	; (800242c <MX_SPI1_Init+0x64>)
 80023d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80023d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80023da:	4b14      	ldr	r3, [pc, #80]	; (800242c <MX_SPI1_Init+0x64>)
 80023dc:	2200      	movs	r2, #0
 80023de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80023e0:	4b12      	ldr	r3, [pc, #72]	; (800242c <MX_SPI1_Init+0x64>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023e6:	4b11      	ldr	r3, [pc, #68]	; (800242c <MX_SPI1_Init+0x64>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023ec:	4b0f      	ldr	r3, [pc, #60]	; (800242c <MX_SPI1_Init+0x64>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80023f2:	4b0e      	ldr	r3, [pc, #56]	; (800242c <MX_SPI1_Init+0x64>)
 80023f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023fa:	4b0c      	ldr	r3, [pc, #48]	; (800242c <MX_SPI1_Init+0x64>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002400:	4b0a      	ldr	r3, [pc, #40]	; (800242c <MX_SPI1_Init+0x64>)
 8002402:	2200      	movs	r2, #0
 8002404:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002406:	4b09      	ldr	r3, [pc, #36]	; (800242c <MX_SPI1_Init+0x64>)
 8002408:	2200      	movs	r2, #0
 800240a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800240c:	4b07      	ldr	r3, [pc, #28]	; (800242c <MX_SPI1_Init+0x64>)
 800240e:	2200      	movs	r2, #0
 8002410:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002412:	4b06      	ldr	r3, [pc, #24]	; (800242c <MX_SPI1_Init+0x64>)
 8002414:	220a      	movs	r2, #10
 8002416:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002418:	4804      	ldr	r0, [pc, #16]	; (800242c <MX_SPI1_Init+0x64>)
 800241a:	f008 f914 	bl	800a646 <HAL_SPI_Init>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002424:	f000 fdc8 	bl	8002fb8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002428:	bf00      	nop
 800242a:	bd80      	pop	{r7, pc}
 800242c:	20003d8c 	.word	0x20003d8c
 8002430:	40013000 	.word	0x40013000

08002434 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800243a:	f107 0308 	add.w	r3, r7, #8
 800243e:	2200      	movs	r2, #0
 8002440:	601a      	str	r2, [r3, #0]
 8002442:	605a      	str	r2, [r3, #4]
 8002444:	609a      	str	r2, [r3, #8]
 8002446:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002448:	463b      	mov	r3, r7
 800244a:	2200      	movs	r2, #0
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002450:	4b1e      	ldr	r3, [pc, #120]	; (80024cc <MX_TIM2_Init+0x98>)
 8002452:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002456:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 60000-1;
 8002458:	4b1c      	ldr	r3, [pc, #112]	; (80024cc <MX_TIM2_Init+0x98>)
 800245a:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800245e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002460:	4b1a      	ldr	r3, [pc, #104]	; (80024cc <MX_TIM2_Init+0x98>)
 8002462:	2200      	movs	r2, #0
 8002464:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002466:	4b19      	ldr	r3, [pc, #100]	; (80024cc <MX_TIM2_Init+0x98>)
 8002468:	f04f 32ff 	mov.w	r2, #4294967295
 800246c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800246e:	4b17      	ldr	r3, [pc, #92]	; (80024cc <MX_TIM2_Init+0x98>)
 8002470:	2200      	movs	r2, #0
 8002472:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002474:	4b15      	ldr	r3, [pc, #84]	; (80024cc <MX_TIM2_Init+0x98>)
 8002476:	2200      	movs	r2, #0
 8002478:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800247a:	4814      	ldr	r0, [pc, #80]	; (80024cc <MX_TIM2_Init+0x98>)
 800247c:	f008 fe8c 	bl	800b198 <HAL_TIM_Base_Init>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002486:	f000 fd97 	bl	8002fb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800248a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800248e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002490:	f107 0308 	add.w	r3, r7, #8
 8002494:	4619      	mov	r1, r3
 8002496:	480d      	ldr	r0, [pc, #52]	; (80024cc <MX_TIM2_Init+0x98>)
 8002498:	f009 f8ba 	bl	800b610 <HAL_TIM_ConfigClockSource>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80024a2:	f000 fd89 	bl	8002fb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024a6:	2300      	movs	r3, #0
 80024a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024aa:	2300      	movs	r3, #0
 80024ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80024ae:	463b      	mov	r3, r7
 80024b0:	4619      	mov	r1, r3
 80024b2:	4806      	ldr	r0, [pc, #24]	; (80024cc <MX_TIM2_Init+0x98>)
 80024b4:	f009 fab6 	bl	800ba24 <HAL_TIMEx_MasterConfigSynchronization>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80024be:	f000 fd7b 	bl	8002fb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80024c2:	bf00      	nop
 80024c4:	3718      	adds	r7, #24
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	20003de4 	.word	0x20003de4

080024d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024d6:	f107 0308 	add.w	r3, r7, #8
 80024da:	2200      	movs	r2, #0
 80024dc:	601a      	str	r2, [r3, #0]
 80024de:	605a      	str	r2, [r3, #4]
 80024e0:	609a      	str	r2, [r3, #8]
 80024e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024e4:	463b      	mov	r3, r7
 80024e6:	2200      	movs	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80024ec:	4b1d      	ldr	r3, [pc, #116]	; (8002564 <MX_TIM3_Init+0x94>)
 80024ee:	4a1e      	ldr	r2, [pc, #120]	; (8002568 <MX_TIM3_Init+0x98>)
 80024f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 60000-1;
 80024f2:	4b1c      	ldr	r3, [pc, #112]	; (8002564 <MX_TIM3_Init+0x94>)
 80024f4:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80024f8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024fa:	4b1a      	ldr	r3, [pc, #104]	; (8002564 <MX_TIM3_Init+0x94>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2250-1;
 8002500:	4b18      	ldr	r3, [pc, #96]	; (8002564 <MX_TIM3_Init+0x94>)
 8002502:	f640 02c9 	movw	r2, #2249	; 0x8c9
 8002506:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002508:	4b16      	ldr	r3, [pc, #88]	; (8002564 <MX_TIM3_Init+0x94>)
 800250a:	2200      	movs	r2, #0
 800250c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800250e:	4b15      	ldr	r3, [pc, #84]	; (8002564 <MX_TIM3_Init+0x94>)
 8002510:	2280      	movs	r2, #128	; 0x80
 8002512:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002514:	4813      	ldr	r0, [pc, #76]	; (8002564 <MX_TIM3_Init+0x94>)
 8002516:	f008 fe3f 	bl	800b198 <HAL_TIM_Base_Init>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002520:	f000 fd4a 	bl	8002fb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002524:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002528:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800252a:	f107 0308 	add.w	r3, r7, #8
 800252e:	4619      	mov	r1, r3
 8002530:	480c      	ldr	r0, [pc, #48]	; (8002564 <MX_TIM3_Init+0x94>)
 8002532:	f009 f86d 	bl	800b610 <HAL_TIM_ConfigClockSource>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800253c:	f000 fd3c 	bl	8002fb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002540:	2300      	movs	r3, #0
 8002542:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002544:	2300      	movs	r3, #0
 8002546:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002548:	463b      	mov	r3, r7
 800254a:	4619      	mov	r1, r3
 800254c:	4805      	ldr	r0, [pc, #20]	; (8002564 <MX_TIM3_Init+0x94>)
 800254e:	f009 fa69 	bl	800ba24 <HAL_TIMEx_MasterConfigSynchronization>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002558:	f000 fd2e 	bl	8002fb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800255c:	bf00      	nop
 800255e:	3718      	adds	r7, #24
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	20003e2c 	.word	0x20003e2c
 8002568:	40000400 	.word	0x40000400

0800256c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002572:	f107 0308 	add.w	r3, r7, #8
 8002576:	2200      	movs	r2, #0
 8002578:	601a      	str	r2, [r3, #0]
 800257a:	605a      	str	r2, [r3, #4]
 800257c:	609a      	str	r2, [r3, #8]
 800257e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002580:	463b      	mov	r3, r7
 8002582:	2200      	movs	r2, #0
 8002584:	601a      	str	r2, [r3, #0]
 8002586:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002588:	4b1d      	ldr	r3, [pc, #116]	; (8002600 <MX_TIM4_Init+0x94>)
 800258a:	4a1e      	ldr	r2, [pc, #120]	; (8002604 <MX_TIM4_Init+0x98>)
 800258c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 60000-1;
 800258e:	4b1c      	ldr	r3, [pc, #112]	; (8002600 <MX_TIM4_Init+0x94>)
 8002590:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8002594:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002596:	4b1a      	ldr	r3, [pc, #104]	; (8002600 <MX_TIM4_Init+0x94>)
 8002598:	2200      	movs	r2, #0
 800259a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800259c:	4b18      	ldr	r3, [pc, #96]	; (8002600 <MX_TIM4_Init+0x94>)
 800259e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025a2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025a4:	4b16      	ldr	r3, [pc, #88]	; (8002600 <MX_TIM4_Init+0x94>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025aa:	4b15      	ldr	r3, [pc, #84]	; (8002600 <MX_TIM4_Init+0x94>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80025b0:	4813      	ldr	r0, [pc, #76]	; (8002600 <MX_TIM4_Init+0x94>)
 80025b2:	f008 fdf1 	bl	800b198 <HAL_TIM_Base_Init>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80025bc:	f000 fcfc 	bl	8002fb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80025c6:	f107 0308 	add.w	r3, r7, #8
 80025ca:	4619      	mov	r1, r3
 80025cc:	480c      	ldr	r0, [pc, #48]	; (8002600 <MX_TIM4_Init+0x94>)
 80025ce:	f009 f81f 	bl	800b610 <HAL_TIM_ConfigClockSource>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80025d8:	f000 fcee 	bl	8002fb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025dc:	2300      	movs	r3, #0
 80025de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025e0:	2300      	movs	r3, #0
 80025e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80025e4:	463b      	mov	r3, r7
 80025e6:	4619      	mov	r1, r3
 80025e8:	4805      	ldr	r0, [pc, #20]	; (8002600 <MX_TIM4_Init+0x94>)
 80025ea:	f009 fa1b 	bl	800ba24 <HAL_TIMEx_MasterConfigSynchronization>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80025f4:	f000 fce0 	bl	8002fb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80025f8:	bf00      	nop
 80025fa:	3718      	adds	r7, #24
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	20003e74 	.word	0x20003e74
 8002604:	40000800 	.word	0x40000800

08002608 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800260e:	f107 0308 	add.w	r3, r7, #8
 8002612:	2200      	movs	r2, #0
 8002614:	601a      	str	r2, [r3, #0]
 8002616:	605a      	str	r2, [r3, #4]
 8002618:	609a      	str	r2, [r3, #8]
 800261a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800261c:	463b      	mov	r3, r7
 800261e:	2200      	movs	r2, #0
 8002620:	601a      	str	r2, [r3, #0]
 8002622:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002624:	4b1d      	ldr	r3, [pc, #116]	; (800269c <MX_TIM5_Init+0x94>)
 8002626:	4a1e      	ldr	r2, [pc, #120]	; (80026a0 <MX_TIM5_Init+0x98>)
 8002628:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 60000-1;
 800262a:	4b1c      	ldr	r3, [pc, #112]	; (800269c <MX_TIM5_Init+0x94>)
 800262c:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8002630:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002632:	4b1a      	ldr	r3, [pc, #104]	; (800269c <MX_TIM5_Init+0x94>)
 8002634:	2200      	movs	r2, #0
 8002636:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002638:	4b18      	ldr	r3, [pc, #96]	; (800269c <MX_TIM5_Init+0x94>)
 800263a:	f04f 32ff 	mov.w	r2, #4294967295
 800263e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002640:	4b16      	ldr	r3, [pc, #88]	; (800269c <MX_TIM5_Init+0x94>)
 8002642:	2200      	movs	r2, #0
 8002644:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002646:	4b15      	ldr	r3, [pc, #84]	; (800269c <MX_TIM5_Init+0x94>)
 8002648:	2200      	movs	r2, #0
 800264a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800264c:	4813      	ldr	r0, [pc, #76]	; (800269c <MX_TIM5_Init+0x94>)
 800264e:	f008 fda3 	bl	800b198 <HAL_TIM_Base_Init>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002658:	f000 fcae 	bl	8002fb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800265c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002660:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002662:	f107 0308 	add.w	r3, r7, #8
 8002666:	4619      	mov	r1, r3
 8002668:	480c      	ldr	r0, [pc, #48]	; (800269c <MX_TIM5_Init+0x94>)
 800266a:	f008 ffd1 	bl	800b610 <HAL_TIM_ConfigClockSource>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002674:	f000 fca0 	bl	8002fb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002678:	2300      	movs	r3, #0
 800267a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800267c:	2300      	movs	r3, #0
 800267e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002680:	463b      	mov	r3, r7
 8002682:	4619      	mov	r1, r3
 8002684:	4805      	ldr	r0, [pc, #20]	; (800269c <MX_TIM5_Init+0x94>)
 8002686:	f009 f9cd 	bl	800ba24 <HAL_TIMEx_MasterConfigSynchronization>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002690:	f000 fc92 	bl	8002fb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002694:	bf00      	nop
 8002696:	3718      	adds	r7, #24
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	20003ebc 	.word	0x20003ebc
 80026a0:	40000c00 	.word	0x40000c00

080026a4 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026aa:	463b      	mov	r3, r7
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	605a      	str	r2, [r3, #4]
 80026b2:	609a      	str	r2, [r3, #8]
 80026b4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80026b6:	4b16      	ldr	r3, [pc, #88]	; (8002710 <MX_TIM9_Init+0x6c>)
 80026b8:	4a16      	ldr	r2, [pc, #88]	; (8002714 <MX_TIM9_Init+0x70>)
 80026ba:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 60-1;
 80026bc:	4b14      	ldr	r3, [pc, #80]	; (8002710 <MX_TIM9_Init+0x6c>)
 80026be:	223b      	movs	r2, #59	; 0x3b
 80026c0:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026c2:	4b13      	ldr	r3, [pc, #76]	; (8002710 <MX_TIM9_Init+0x6c>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 80026c8:	4b11      	ldr	r3, [pc, #68]	; (8002710 <MX_TIM9_Init+0x6c>)
 80026ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026ce:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026d0:	4b0f      	ldr	r3, [pc, #60]	; (8002710 <MX_TIM9_Init+0x6c>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026d6:	4b0e      	ldr	r3, [pc, #56]	; (8002710 <MX_TIM9_Init+0x6c>)
 80026d8:	2200      	movs	r2, #0
 80026da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80026dc:	480c      	ldr	r0, [pc, #48]	; (8002710 <MX_TIM9_Init+0x6c>)
 80026de:	f008 fd5b 	bl	800b198 <HAL_TIM_Base_Init>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 80026e8:	f000 fc66 	bl	8002fb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026f0:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80026f2:	463b      	mov	r3, r7
 80026f4:	4619      	mov	r1, r3
 80026f6:	4806      	ldr	r0, [pc, #24]	; (8002710 <MX_TIM9_Init+0x6c>)
 80026f8:	f008 ff8a 	bl	800b610 <HAL_TIM_ConfigClockSource>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8002702:	f000 fc59 	bl	8002fb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8002706:	bf00      	nop
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	20003f04 	.word	0x20003f04
 8002714:	40014000 	.word	0x40014000

08002718 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800271c:	4b0e      	ldr	r3, [pc, #56]	; (8002758 <MX_TIM10_Init+0x40>)
 800271e:	4a0f      	ldr	r2, [pc, #60]	; (800275c <MX_TIM10_Init+0x44>)
 8002720:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 60000-1;
 8002722:	4b0d      	ldr	r3, [pc, #52]	; (8002758 <MX_TIM10_Init+0x40>)
 8002724:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8002728:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800272a:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <MX_TIM10_Init+0x40>)
 800272c:	2200      	movs	r2, #0
 800272e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8002730:	4b09      	ldr	r3, [pc, #36]	; (8002758 <MX_TIM10_Init+0x40>)
 8002732:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002736:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002738:	4b07      	ldr	r3, [pc, #28]	; (8002758 <MX_TIM10_Init+0x40>)
 800273a:	2200      	movs	r2, #0
 800273c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800273e:	4b06      	ldr	r3, [pc, #24]	; (8002758 <MX_TIM10_Init+0x40>)
 8002740:	2200      	movs	r2, #0
 8002742:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002744:	4804      	ldr	r0, [pc, #16]	; (8002758 <MX_TIM10_Init+0x40>)
 8002746:	f008 fd27 	bl	800b198 <HAL_TIM_Base_Init>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8002750:	f000 fc32 	bl	8002fb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002754:	bf00      	nop
 8002756:	bd80      	pop	{r7, pc}
 8002758:	20003f4c 	.word	0x20003f4c
 800275c:	40014400 	.word	0x40014400

08002760 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002764:	4b11      	ldr	r3, [pc, #68]	; (80027ac <MX_USART1_UART_Init+0x4c>)
 8002766:	4a12      	ldr	r2, [pc, #72]	; (80027b0 <MX_USART1_UART_Init+0x50>)
 8002768:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800276a:	4b10      	ldr	r3, [pc, #64]	; (80027ac <MX_USART1_UART_Init+0x4c>)
 800276c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002770:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002772:	4b0e      	ldr	r3, [pc, #56]	; (80027ac <MX_USART1_UART_Init+0x4c>)
 8002774:	2200      	movs	r2, #0
 8002776:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002778:	4b0c      	ldr	r3, [pc, #48]	; (80027ac <MX_USART1_UART_Init+0x4c>)
 800277a:	2200      	movs	r2, #0
 800277c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800277e:	4b0b      	ldr	r3, [pc, #44]	; (80027ac <MX_USART1_UART_Init+0x4c>)
 8002780:	2200      	movs	r2, #0
 8002782:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002784:	4b09      	ldr	r3, [pc, #36]	; (80027ac <MX_USART1_UART_Init+0x4c>)
 8002786:	220c      	movs	r2, #12
 8002788:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800278a:	4b08      	ldr	r3, [pc, #32]	; (80027ac <MX_USART1_UART_Init+0x4c>)
 800278c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002790:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002792:	4b06      	ldr	r3, [pc, #24]	; (80027ac <MX_USART1_UART_Init+0x4c>)
 8002794:	2200      	movs	r2, #0
 8002796:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002798:	4804      	ldr	r0, [pc, #16]	; (80027ac <MX_USART1_UART_Init+0x4c>)
 800279a:	f009 f9c5 	bl	800bb28 <HAL_UART_Init>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 80027a4:	f000 fc08 	bl	8002fb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80027a8:	bf00      	nop
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	20003f94 	.word	0x20003f94
 80027b0:	40011000 	.word	0x40011000

080027b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80027b8:	4b11      	ldr	r3, [pc, #68]	; (8002800 <MX_USART2_UART_Init+0x4c>)
 80027ba:	4a12      	ldr	r2, [pc, #72]	; (8002804 <MX_USART2_UART_Init+0x50>)
 80027bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80027be:	4b10      	ldr	r3, [pc, #64]	; (8002800 <MX_USART2_UART_Init+0x4c>)
 80027c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80027c6:	4b0e      	ldr	r3, [pc, #56]	; (8002800 <MX_USART2_UART_Init+0x4c>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80027cc:	4b0c      	ldr	r3, [pc, #48]	; (8002800 <MX_USART2_UART_Init+0x4c>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80027d2:	4b0b      	ldr	r3, [pc, #44]	; (8002800 <MX_USART2_UART_Init+0x4c>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80027d8:	4b09      	ldr	r3, [pc, #36]	; (8002800 <MX_USART2_UART_Init+0x4c>)
 80027da:	220c      	movs	r2, #12
 80027dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027de:	4b08      	ldr	r3, [pc, #32]	; (8002800 <MX_USART2_UART_Init+0x4c>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027e4:	4b06      	ldr	r3, [pc, #24]	; (8002800 <MX_USART2_UART_Init+0x4c>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80027ea:	4805      	ldr	r0, [pc, #20]	; (8002800 <MX_USART2_UART_Init+0x4c>)
 80027ec:	f009 f99c 	bl	800bb28 <HAL_UART_Init>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80027f6:	f000 fbdf 	bl	8002fb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80027fa:	bf00      	nop
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	20003fd8 	.word	0x20003fd8
 8002804:	40004400 	.word	0x40004400

08002808 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800280e:	2300      	movs	r3, #0
 8002810:	607b      	str	r3, [r7, #4]
 8002812:	4b14      	ldr	r3, [pc, #80]	; (8002864 <MX_DMA_Init+0x5c>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	4a13      	ldr	r2, [pc, #76]	; (8002864 <MX_DMA_Init+0x5c>)
 8002818:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800281c:	6313      	str	r3, [r2, #48]	; 0x30
 800281e:	4b11      	ldr	r3, [pc, #68]	; (8002864 <MX_DMA_Init+0x5c>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002826:	607b      	str	r3, [r7, #4]
 8002828:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 3, 0);
 800282a:	2200      	movs	r2, #0
 800282c:	2103      	movs	r1, #3
 800282e:	2038      	movs	r0, #56	; 0x38
 8002830:	f004 fd2b 	bl	800728a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002834:	2038      	movs	r0, #56	; 0x38
 8002836:	f004 fd44 	bl	80072c2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800283a:	2200      	movs	r2, #0
 800283c:	2100      	movs	r1, #0
 800283e:	203b      	movs	r0, #59	; 0x3b
 8002840:	f004 fd23 	bl	800728a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002844:	203b      	movs	r0, #59	; 0x3b
 8002846:	f004 fd3c 	bl	80072c2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800284a:	2200      	movs	r2, #0
 800284c:	2100      	movs	r1, #0
 800284e:	2045      	movs	r0, #69	; 0x45
 8002850:	f004 fd1b 	bl	800728a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002854:	2045      	movs	r0, #69	; 0x45
 8002856:	f004 fd34 	bl	80072c2 <HAL_NVIC_EnableIRQ>

}
 800285a:	bf00      	nop
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	40023800 	.word	0x40023800

08002868 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b08a      	sub	sp, #40	; 0x28
 800286c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800286e:	f107 0314 	add.w	r3, r7, #20
 8002872:	2200      	movs	r2, #0
 8002874:	601a      	str	r2, [r3, #0]
 8002876:	605a      	str	r2, [r3, #4]
 8002878:	609a      	str	r2, [r3, #8]
 800287a:	60da      	str	r2, [r3, #12]
 800287c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	613b      	str	r3, [r7, #16]
 8002882:	4b49      	ldr	r3, [pc, #292]	; (80029a8 <MX_GPIO_Init+0x140>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002886:	4a48      	ldr	r2, [pc, #288]	; (80029a8 <MX_GPIO_Init+0x140>)
 8002888:	f043 0304 	orr.w	r3, r3, #4
 800288c:	6313      	str	r3, [r2, #48]	; 0x30
 800288e:	4b46      	ldr	r3, [pc, #280]	; (80029a8 <MX_GPIO_Init+0x140>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	f003 0304 	and.w	r3, r3, #4
 8002896:	613b      	str	r3, [r7, #16]
 8002898:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800289a:	2300      	movs	r3, #0
 800289c:	60fb      	str	r3, [r7, #12]
 800289e:	4b42      	ldr	r3, [pc, #264]	; (80029a8 <MX_GPIO_Init+0x140>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a2:	4a41      	ldr	r2, [pc, #260]	; (80029a8 <MX_GPIO_Init+0x140>)
 80028a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028a8:	6313      	str	r3, [r2, #48]	; 0x30
 80028aa:	4b3f      	ldr	r3, [pc, #252]	; (80029a8 <MX_GPIO_Init+0x140>)
 80028ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b2:	60fb      	str	r3, [r7, #12]
 80028b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028b6:	2300      	movs	r3, #0
 80028b8:	60bb      	str	r3, [r7, #8]
 80028ba:	4b3b      	ldr	r3, [pc, #236]	; (80029a8 <MX_GPIO_Init+0x140>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028be:	4a3a      	ldr	r2, [pc, #232]	; (80029a8 <MX_GPIO_Init+0x140>)
 80028c0:	f043 0301 	orr.w	r3, r3, #1
 80028c4:	6313      	str	r3, [r2, #48]	; 0x30
 80028c6:	4b38      	ldr	r3, [pc, #224]	; (80029a8 <MX_GPIO_Init+0x140>)
 80028c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	60bb      	str	r3, [r7, #8]
 80028d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028d2:	2300      	movs	r3, #0
 80028d4:	607b      	str	r3, [r7, #4]
 80028d6:	4b34      	ldr	r3, [pc, #208]	; (80029a8 <MX_GPIO_Init+0x140>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028da:	4a33      	ldr	r2, [pc, #204]	; (80029a8 <MX_GPIO_Init+0x140>)
 80028dc:	f043 0302 	orr.w	r3, r3, #2
 80028e0:	6313      	str	r3, [r2, #48]	; 0x30
 80028e2:	4b31      	ldr	r3, [pc, #196]	; (80029a8 <MX_GPIO_Init+0x140>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	607b      	str	r3, [r7, #4]
 80028ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_OUT_4_1EN_GPIO_Port, GPIO_OUT_4_1EN_Pin, GPIO_PIN_RESET);
 80028ee:	2200      	movs	r2, #0
 80028f0:	2110      	movs	r1, #16
 80028f2:	482e      	ldr	r0, [pc, #184]	; (80029ac <MX_GPIO_Init+0x144>)
 80028f4:	f005 faaa 	bl	8007e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_OUT_DTR_Pin|GPIO_OUT_RESET_Pin|GPIO_OUT_PWRKEY_Pin|GPIO_OUT_LED_Pin
 80028f8:	2200      	movs	r2, #0
 80028fa:	f247 0142 	movw	r1, #28738	; 0x7042
 80028fe:	482c      	ldr	r0, [pc, #176]	; (80029b0 <MX_GPIO_Init+0x148>)
 8002900:	f005 faa4 	bl	8007e4c <HAL_GPIO_WritePin>
                          |GPIO_OUT_U_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : GPIO_OUT_4_1EN_Pin */
  GPIO_InitStruct.Pin = GPIO_OUT_4_1EN_Pin;
 8002904:	2310      	movs	r3, #16
 8002906:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002908:	2301      	movs	r3, #1
 800290a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290c:	2300      	movs	r3, #0
 800290e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002910:	2300      	movs	r3, #0
 8002912:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIO_OUT_4_1EN_GPIO_Port, &GPIO_InitStruct);
 8002914:	f107 0314 	add.w	r3, r7, #20
 8002918:	4619      	mov	r1, r3
 800291a:	4824      	ldr	r0, [pc, #144]	; (80029ac <MX_GPIO_Init+0x144>)
 800291c:	f005 f8fa 	bl	8007b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_IN_POWERSTAT_Pin GPIO_IN_RI_Pin GPIO_IN_DCD_Pin GPIO_TH_DATA_Pin */
  GPIO_InitStruct.Pin = GPIO_IN_POWERSTAT_Pin|GPIO_IN_RI_Pin|GPIO_IN_DCD_Pin|GPIO_TH_DATA_Pin;
 8002920:	f240 6305 	movw	r3, #1541	; 0x605
 8002924:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002926:	2300      	movs	r3, #0
 8002928:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292a:	2300      	movs	r3, #0
 800292c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800292e:	f107 0314 	add.w	r3, r7, #20
 8002932:	4619      	mov	r1, r3
 8002934:	481e      	ldr	r0, [pc, #120]	; (80029b0 <MX_GPIO_Init+0x148>)
 8002936:	f005 f8ed 	bl	8007b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_OUT_DTR_Pin GPIO_OUT_RESET_Pin GPIO_OUT_PWRKEY_Pin GPIO_OUT_LED_Pin
                           GPIO_OUT_U_CS_Pin */
  GPIO_InitStruct.Pin = GPIO_OUT_DTR_Pin|GPIO_OUT_RESET_Pin|GPIO_OUT_PWRKEY_Pin|GPIO_OUT_LED_Pin
 800293a:	f247 0342 	movw	r3, #28738	; 0x7042
 800293e:	617b      	str	r3, [r7, #20]
                          |GPIO_OUT_U_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002940:	2301      	movs	r3, #1
 8002942:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002944:	2300      	movs	r3, #0
 8002946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002948:	2300      	movs	r3, #0
 800294a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800294c:	f107 0314 	add.w	r3, r7, #20
 8002950:	4619      	mov	r1, r3
 8002952:	4817      	ldr	r0, [pc, #92]	; (80029b0 <MX_GPIO_Init+0x148>)
 8002954:	f005 f8de 	bl	8007b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CD_Pin */
  GPIO_InitStruct.Pin = SD_CD_Pin;
 8002958:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800295c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800295e:	2300      	movs	r3, #0
 8002960:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002962:	2300      	movs	r3, #0
 8002964:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_CD_GPIO_Port, &GPIO_InitStruct);
 8002966:	f107 0314 	add.w	r3, r7, #20
 800296a:	4619      	mov	r1, r3
 800296c:	480f      	ldr	r0, [pc, #60]	; (80029ac <MX_GPIO_Init+0x144>)
 800296e:	f005 f8d1 	bl	8007b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_IN_WINDCOUNT_Pin */
  GPIO_InitStruct.Pin = GPIO_IN_WINDCOUNT_Pin;
 8002972:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002976:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002978:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800297c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297e:	2300      	movs	r3, #0
 8002980:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_IN_WINDCOUNT_GPIO_Port, &GPIO_InitStruct);
 8002982:	f107 0314 	add.w	r3, r7, #20
 8002986:	4619      	mov	r1, r3
 8002988:	4809      	ldr	r0, [pc, #36]	; (80029b0 <MX_GPIO_Init+0x148>)
 800298a:	f005 f8c3 	bl	8007b14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 800298e:	2200      	movs	r2, #0
 8002990:	2101      	movs	r1, #1
 8002992:	2017      	movs	r0, #23
 8002994:	f004 fc79 	bl	800728a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002998:	2017      	movs	r0, #23
 800299a:	f004 fc92 	bl	80072c2 <HAL_NVIC_EnableIRQ>

}
 800299e:	bf00      	nop
 80029a0:	3728      	adds	r7, #40	; 0x28
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	40023800 	.word	0x40023800
 80029ac:	40020000 	.word	0x40020000
 80029b0:	40020400 	.word	0x40020400

080029b4 <getHRTC>:

/* USER CODE BEGIN 4 */

RTC_HandleTypeDef * getHRTC(void){
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
	return &hrtc;
 80029b8:	4b02      	ldr	r3, [pc, #8]	; (80029c4 <getHRTC+0x10>)
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	20003c28 	.word	0x20003c28

080029c8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	4603      	mov	r3, r0
 80029d0:	80fb      	strh	r3, [r7, #6]
//	unsigned int timems;
//	char buf[30];
//	timems = (unsigned int)timer10_ms_get();
	if(GPIO_Pin == GPIO_IN_WINDCOUNT_Pin){//this is the windspeed external interrupt occurring on a rising edge; at 200mph = at least 11.25 ms apart
 80029d2:	88fb      	ldrh	r3, [r7, #6]
 80029d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029d8:	d10d      	bne.n	80029f6 <HAL_GPIO_EXTI_Callback+0x2e>
//		sprintf(buf, "XTime %u \r\n", timems);
//		Uart_SendString(buf, pc_uart);

//		delay_us(5);//debounce for 5us

		if(HAL_GPIO_ReadPin(GPIO_IN_WINDCOUNT_GPIO_Port, GPIO_IN_WINDCOUNT_Pin)){
 80029da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029de:	4809      	ldr	r0, [pc, #36]	; (8002a04 <HAL_GPIO_EXTI_Callback+0x3c>)
 80029e0:	f005 fa1c 	bl	8007e1c <HAL_GPIO_ReadPin>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d005      	beq.n	80029f6 <HAL_GPIO_EXTI_Callback+0x2e>
//			Uart_SendString("O\r\n", pc_uart);
			windCount++;
 80029ea:	4b07      	ldr	r3, [pc, #28]	; (8002a08 <HAL_GPIO_EXTI_Callback+0x40>)
 80029ec:	881b      	ldrh	r3, [r3, #0]
 80029ee:	3301      	adds	r3, #1
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	4b05      	ldr	r3, [pc, #20]	; (8002a08 <HAL_GPIO_EXTI_Callback+0x40>)
 80029f4:	801a      	strh	r2, [r3, #0]
		}
	}
	timer10_ms_restart();
 80029f6:	f000 fac3 	bl	8002f80 <timer10_ms_restart>
}
 80029fa:	bf00      	nop
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40020400 	.word	0x40020400
 8002a08:	20004090 	.word	0x20004090
 8002a0c:	00000000 	.word	0x00000000

08002a10 <HAL_TIM_PeriodElapsedCallback>:

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002a14:	ed2d 8b02 	vpush	{d8}
 8002a18:	b084      	sub	sp, #16
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
	// Check which version of the timer triggered this callback and toggle LED
	if (htim == &htim3 )
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4ab9      	ldr	r2, [pc, #740]	; (8002d08 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	f040 81cb 	bne.w	8002dbe <HAL_TIM_PeriodElapsedCallback+0x3ae>
	{
//		HAL_GPIO_TogglePin(GPIO_OUT_LED_GPIO_Port, GPIO_OUT_LED_Pin);

		uint16_t p = windCount;
 8002a28:	4bb8      	ldr	r3, [pc, #736]	; (8002d0c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8002a2a:	881b      	ldrh	r3, [r3, #0]
 8002a2c:	81fb      	strh	r3, [r7, #14]
		windCount = 0;
 8002a2e:	4bb7      	ldr	r3, [pc, #732]	; (8002d0c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	801a      	strh	r2, [r3, #0]

//	    mph = p * (2.25/PERIOD);

		if(p == 0){
 8002a34:	89fb      	ldrh	r3, [r7, #14]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_TIM_PeriodElapsedCallback+0x2e>
			timer10_ms_restart();
 8002a3a:	f000 faa1 	bl	8002f80 <timer10_ms_restart>
		}

		mph = p;
 8002a3e:	4ab4      	ldr	r2, [pc, #720]	; (8002d10 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002a40:	89fb      	ldrh	r3, [r7, #14]
 8002a42:	8013      	strh	r3, [r2, #0]
	    direction = 0.087890625 * adcValues[0];
 8002a44:	4bb3      	ldr	r3, [pc, #716]	; (8002d14 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7fd fd73 	bl	8000534 <__aeabi_ui2d>
 8002a4e:	f04f 0200 	mov.w	r2, #0
 8002a52:	4bb1      	ldr	r3, [pc, #708]	; (8002d18 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8002a54:	f7fd fde8 	bl	8000628 <__aeabi_dmul>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	4610      	mov	r0, r2
 8002a5e:	4619      	mov	r1, r3
 8002a60:	f7fe f8da 	bl	8000c18 <__aeabi_d2f>
 8002a64:	4603      	mov	r3, r0
 8002a66:	4aad      	ldr	r2, [pc, #692]	; (8002d1c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8002a68:	6013      	str	r3, [r2, #0]
//	    sprintf(buffer, "$FFWX,0,%i,%.0f\r\n",mph,direction);
//	   	Uart_SendString(buffer, pc_uart);

//	   	getEpochTime();

	    vectorX += mph * sin(deg2rad * direction);
 8002a6a:	4bad      	ldr	r3, [pc, #692]	; (8002d20 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7fd fd82 	bl	8000578 <__aeabi_f2d>
 8002a74:	4604      	mov	r4, r0
 8002a76:	460d      	mov	r5, r1
 8002a78:	4ba5      	ldr	r3, [pc, #660]	; (8002d10 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002a7a:	881b      	ldrh	r3, [r3, #0]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7fd fd69 	bl	8000554 <__aeabi_i2d>
 8002a82:	4680      	mov	r8, r0
 8002a84:	4689      	mov	r9, r1
 8002a86:	4ba5      	ldr	r3, [pc, #660]	; (8002d1c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7fd fd74 	bl	8000578 <__aeabi_f2d>
 8002a90:	a397      	add	r3, pc, #604	; (adr r3, 8002cf0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8002a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a96:	f7fd fdc7 	bl	8000628 <__aeabi_dmul>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	ec43 2b17 	vmov	d7, r2, r3
 8002aa2:	eeb0 0a47 	vmov.f32	s0, s14
 8002aa6:	eef0 0a67 	vmov.f32	s1, s15
 8002aaa:	f013 fcd5 	bl	8016458 <sin>
 8002aae:	ec53 2b10 	vmov	r2, r3, d0
 8002ab2:	4640      	mov	r0, r8
 8002ab4:	4649      	mov	r1, r9
 8002ab6:	f7fd fdb7 	bl	8000628 <__aeabi_dmul>
 8002aba:	4602      	mov	r2, r0
 8002abc:	460b      	mov	r3, r1
 8002abe:	4620      	mov	r0, r4
 8002ac0:	4629      	mov	r1, r5
 8002ac2:	f7fd fbfb 	bl	80002bc <__adddf3>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	460b      	mov	r3, r1
 8002aca:	4610      	mov	r0, r2
 8002acc:	4619      	mov	r1, r3
 8002ace:	f7fe f8a3 	bl	8000c18 <__aeabi_d2f>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	4a92      	ldr	r2, [pc, #584]	; (8002d20 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8002ad6:	6013      	str	r3, [r2, #0]
	    vectorY += mph * cos(deg2rad * direction);
 8002ad8:	4b92      	ldr	r3, [pc, #584]	; (8002d24 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7fd fd4b 	bl	8000578 <__aeabi_f2d>
 8002ae2:	4604      	mov	r4, r0
 8002ae4:	460d      	mov	r5, r1
 8002ae6:	4b8a      	ldr	r3, [pc, #552]	; (8002d10 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002ae8:	881b      	ldrh	r3, [r3, #0]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7fd fd32 	bl	8000554 <__aeabi_i2d>
 8002af0:	4680      	mov	r8, r0
 8002af2:	4689      	mov	r9, r1
 8002af4:	4b89      	ldr	r3, [pc, #548]	; (8002d1c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7fd fd3d 	bl	8000578 <__aeabi_f2d>
 8002afe:	a37c      	add	r3, pc, #496	; (adr r3, 8002cf0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8002b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b04:	f7fd fd90 	bl	8000628 <__aeabi_dmul>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	ec43 2b17 	vmov	d7, r2, r3
 8002b10:	eeb0 0a47 	vmov.f32	s0, s14
 8002b14:	eef0 0a67 	vmov.f32	s1, s15
 8002b18:	f013 fc4a 	bl	80163b0 <cos>
 8002b1c:	ec53 2b10 	vmov	r2, r3, d0
 8002b20:	4640      	mov	r0, r8
 8002b22:	4649      	mov	r1, r9
 8002b24:	f7fd fd80 	bl	8000628 <__aeabi_dmul>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	4620      	mov	r0, r4
 8002b2e:	4629      	mov	r1, r5
 8002b30:	f7fd fbc4 	bl	80002bc <__adddf3>
 8002b34:	4602      	mov	r2, r0
 8002b36:	460b      	mov	r3, r1
 8002b38:	4610      	mov	r0, r2
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	f7fe f86c 	bl	8000c18 <__aeabi_d2f>
 8002b40:	4603      	mov	r3, r0
 8002b42:	4a78      	ldr	r2, [pc, #480]	; (8002d24 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8002b44:	6013      	str	r3, [r2, #0]

	    if(mph < minSpeed){
 8002b46:	4b72      	ldr	r3, [pc, #456]	; (8002d10 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002b48:	881a      	ldrh	r2, [r3, #0]
 8002b4a:	4b77      	ldr	r3, [pc, #476]	; (8002d28 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8002b4c:	881b      	ldrh	r3, [r3, #0]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d203      	bcs.n	8002b5a <HAL_TIM_PeriodElapsedCallback+0x14a>
	        minSpeed = mph;
 8002b52:	4b6f      	ldr	r3, [pc, #444]	; (8002d10 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002b54:	881a      	ldrh	r2, [r3, #0]
 8002b56:	4b74      	ldr	r3, [pc, #464]	; (8002d28 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8002b58:	801a      	strh	r2, [r3, #0]
	    }
	    if(mph > maxSpeed){
 8002b5a:	4b6d      	ldr	r3, [pc, #436]	; (8002d10 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002b5c:	881a      	ldrh	r2, [r3, #0]
 8002b5e:	4b73      	ldr	r3, [pc, #460]	; (8002d2c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8002b60:	881b      	ldrh	r3, [r3, #0]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d903      	bls.n	8002b6e <HAL_TIM_PeriodElapsedCallback+0x15e>
	        maxSpeed = mph;
 8002b66:	4b6a      	ldr	r3, [pc, #424]	; (8002d10 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002b68:	881a      	ldrh	r2, [r3, #0]
 8002b6a:	4b70      	ldr	r3, [pc, #448]	; (8002d2c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8002b6c:	801a      	strh	r2, [r3, #0]
	    }

	    batSum += adcValues[1]*getSettings()->BCL;
 8002b6e:	4b69      	ldr	r3, [pc, #420]	; (8002d14 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	ee07 3a90 	vmov	s15, r3
 8002b76:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8002b7a:	f001 f935 	bl	8003de8 <getSettings>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8002b84:	ee28 7a27 	vmul.f32	s14, s16, s15
 8002b88:	4b69      	ldr	r3, [pc, #420]	; (8002d30 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8002b8a:	edd3 7a00 	vldr	s15, [r3]
 8002b8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b92:	4b67      	ldr	r3, [pc, #412]	; (8002d30 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8002b94:	edc3 7a00 	vstr	s15, [r3]

	    avgCount++;
 8002b98:	4b66      	ldr	r3, [pc, #408]	; (8002d34 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	b2da      	uxtb	r2, r3
 8002ba0:	4b64      	ldr	r3, [pc, #400]	; (8002d34 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8002ba2:	701a      	strb	r2, [r3, #0]

	    avgNum = getSettings()->AVN;
 8002ba4:	f001 f920 	bl	8003de8 <getSettings>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	f8b3 20be 	ldrh.w	r2, [r3, #190]	; 0xbe
 8002bae:	4b62      	ldr	r3, [pc, #392]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8002bb0:	801a      	strh	r2, [r3, #0]

	    if(avgCount >= avgNum){
 8002bb2:	4b60      	ldr	r3, [pc, #384]	; (8002d34 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	4b5f      	ldr	r3, [pc, #380]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8002bba:	881b      	ldrh	r3, [r3, #0]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	f0c0 80f4 	bcc.w	8002daa <HAL_TIM_PeriodElapsedCallback+0x39a>

	        vectorX = vectorX/avgNum;
 8002bc2:	4b57      	ldr	r3, [pc, #348]	; (8002d20 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8002bc4:	edd3 6a00 	vldr	s13, [r3]
 8002bc8:	4b5b      	ldr	r3, [pc, #364]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8002bca:	881b      	ldrh	r3, [r3, #0]
 8002bcc:	ee07 3a90 	vmov	s15, r3
 8002bd0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bd8:	4b51      	ldr	r3, [pc, #324]	; (8002d20 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8002bda:	edc3 7a00 	vstr	s15, [r3]
	        vectorY = vectorY/avgNum;
 8002bde:	4b51      	ldr	r3, [pc, #324]	; (8002d24 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8002be0:	edd3 6a00 	vldr	s13, [r3]
 8002be4:	4b54      	ldr	r3, [pc, #336]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8002be6:	881b      	ldrh	r3, [r3, #0]
 8002be8:	ee07 3a90 	vmov	s15, r3
 8002bec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bf4:	4b4b      	ldr	r3, [pc, #300]	; (8002d24 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8002bf6:	edc3 7a00 	vstr	s15, [r3]

	        avgSpeed = sqrt(vectorX * vectorX + vectorY * vectorY);
 8002bfa:	4b49      	ldr	r3, [pc, #292]	; (8002d20 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8002bfc:	ed93 7a00 	vldr	s14, [r3]
 8002c00:	4b47      	ldr	r3, [pc, #284]	; (8002d20 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8002c02:	edd3 7a00 	vldr	s15, [r3]
 8002c06:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c0a:	4b46      	ldr	r3, [pc, #280]	; (8002d24 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8002c0c:	edd3 6a00 	vldr	s13, [r3]
 8002c10:	4b44      	ldr	r3, [pc, #272]	; (8002d24 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8002c12:	edd3 7a00 	vldr	s15, [r3]
 8002c16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c1e:	ee17 0a90 	vmov	r0, s15
 8002c22:	f7fd fca9 	bl	8000578 <__aeabi_f2d>
 8002c26:	4602      	mov	r2, r0
 8002c28:	460b      	mov	r3, r1
 8002c2a:	ec43 2b10 	vmov	d0, r2, r3
 8002c2e:	f013 fc6d 	bl	801650c <sqrt>
 8002c32:	ec53 2b10 	vmov	r2, r3, d0
 8002c36:	4610      	mov	r0, r2
 8002c38:	4619      	mov	r1, r3
 8002c3a:	f7fd ffed 	bl	8000c18 <__aeabi_d2f>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	4a3e      	ldr	r2, [pc, #248]	; (8002d3c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8002c42:	6013      	str	r3, [r2, #0]
	        avgDirection =  rad2deg * atan2(vectorX, vectorY);
 8002c44:	4b36      	ldr	r3, [pc, #216]	; (8002d20 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7fd fc95 	bl	8000578 <__aeabi_f2d>
 8002c4e:	4604      	mov	r4, r0
 8002c50:	460d      	mov	r5, r1
 8002c52:	4b34      	ldr	r3, [pc, #208]	; (8002d24 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7fd fc8e 	bl	8000578 <__aeabi_f2d>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	460b      	mov	r3, r1
 8002c60:	ec43 2b11 	vmov	d1, r2, r3
 8002c64:	ec45 4b10 	vmov	d0, r4, r5
 8002c68:	f013 fc4e 	bl	8016508 <atan2>
 8002c6c:	ec51 0b10 	vmov	r0, r1, d0
 8002c70:	a321      	add	r3, pc, #132	; (adr r3, 8002cf8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8002c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c76:	f7fd fcd7 	bl	8000628 <__aeabi_dmul>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	4610      	mov	r0, r2
 8002c80:	4619      	mov	r1, r3
 8002c82:	f7fd ffc9 	bl	8000c18 <__aeabi_d2f>
 8002c86:	4603      	mov	r3, r0
 8002c88:	4a2d      	ldr	r2, [pc, #180]	; (8002d40 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8002c8a:	6013      	str	r3, [r2, #0]

	        if(avgDirection < 0){
 8002c8c:	4b2c      	ldr	r3, [pc, #176]	; (8002d40 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8002c8e:	edd3 7a00 	vldr	s15, [r3]
 8002c92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c9a:	d509      	bpl.n	8002cb0 <HAL_TIM_PeriodElapsedCallback+0x2a0>
	            avgDirection += 360;
 8002c9c:	4b28      	ldr	r3, [pc, #160]	; (8002d40 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8002c9e:	edd3 7a00 	vldr	s15, [r3]
 8002ca2:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002d44 <HAL_TIM_PeriodElapsedCallback+0x334>
 8002ca6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002caa:	4b25      	ldr	r3, [pc, #148]	; (8002d40 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8002cac:	edc3 7a00 	vstr	s15, [r3]
	        }

	        if(avgSpeed < 0.001){
 8002cb0:	4b22      	ldr	r3, [pc, #136]	; (8002d3c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7fd fc5f 	bl	8000578 <__aeabi_f2d>
 8002cba:	a311      	add	r3, pc, #68	; (adr r3, 8002d00 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8002cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc0:	f7fd ff24 	bl	8000b0c <__aeabi_dcmplt>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <HAL_TIM_PeriodElapsedCallback+0x2c2>
	            avgDirection = direction;
 8002cca:	4b14      	ldr	r3, [pc, #80]	; (8002d1c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a1c      	ldr	r2, [pc, #112]	; (8002d40 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8002cd0:	6013      	str	r3, [r2, #0]
	        }


	        currentMeasurement.direction = avgDirection;
 8002cd2:	4b1b      	ldr	r3, [pc, #108]	; (8002d40 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a1c      	ldr	r2, [pc, #112]	; (8002d48 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8002cd8:	6113      	str	r3, [r2, #16]
	        currentMeasurement.mph = avgSpeed;
 8002cda:	4b18      	ldr	r3, [pc, #96]	; (8002d3c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a1a      	ldr	r2, [pc, #104]	; (8002d48 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8002ce0:	60d3      	str	r3, [r2, #12]
	        currentMeasurement.mphMax = maxSpeed;
 8002ce2:	4b12      	ldr	r3, [pc, #72]	; (8002d2c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8002ce4:	881a      	ldrh	r2, [r3, #0]
 8002ce6:	4b18      	ldr	r3, [pc, #96]	; (8002d48 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8002ce8:	82da      	strh	r2, [r3, #22]
	        currentMeasurement.mphMin = minSpeed;
 8002cea:	4b0f      	ldr	r3, [pc, #60]	; (8002d28 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8002cec:	881a      	ldrh	r2, [r3, #0]
 8002cee:	e02d      	b.n	8002d4c <HAL_TIM_PeriodElapsedCallback+0x33c>
 8002cf0:	a1fae711 	.word	0xa1fae711
 8002cf4:	3f91df46 	.word	0x3f91df46
 8002cf8:	1a47a9e3 	.word	0x1a47a9e3
 8002cfc:	404ca5dc 	.word	0x404ca5dc
 8002d00:	d2f1a9fc 	.word	0xd2f1a9fc
 8002d04:	3f50624d 	.word	0x3f50624d
 8002d08:	20003e2c 	.word	0x20003e2c
 8002d0c:	20004090 	.word	0x20004090
 8002d10:	20004092 	.word	0x20004092
 8002d14:	2000401c 	.word	0x2000401c
 8002d18:	3fb68000 	.word	0x3fb68000
 8002d1c:	20004094 	.word	0x20004094
 8002d20:	2000409c 	.word	0x2000409c
 8002d24:	200040a0 	.word	0x200040a0
 8002d28:	20000004 	.word	0x20000004
 8002d2c:	200040a4 	.word	0x200040a4
 8002d30:	200040b0 	.word	0x200040b0
 8002d34:	20004098 	.word	0x20004098
 8002d38:	20000008 	.word	0x20000008
 8002d3c:	200040a8 	.word	0x200040a8
 8002d40:	200040ac 	.word	0x200040ac
 8002d44:	43b40000 	.word	0x43b40000
 8002d48:	200040b4 	.word	0x200040b4
 8002d4c:	4b1f      	ldr	r3, [pc, #124]	; (8002dcc <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8002d4e:	829a      	strh	r2, [r3, #20]
	        currentMeasurement.battery = batSum/avgNum;
 8002d50:	4b1f      	ldr	r3, [pc, #124]	; (8002dd0 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8002d52:	edd3 6a00 	vldr	s13, [r3]
 8002d56:	4b1f      	ldr	r3, [pc, #124]	; (8002dd4 <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8002d58:	881b      	ldrh	r3, [r3, #0]
 8002d5a:	ee07 3a90 	vmov	s15, r3
 8002d5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d66:	4b19      	ldr	r3, [pc, #100]	; (8002dcc <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8002d68:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	        newMeasurement = 1;
 8002d6c:	4b1a      	ldr	r3, [pc, #104]	; (8002dd8 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8002d6e:	2201      	movs	r2, #1
 8002d70:	701a      	strb	r2, [r3, #0]

	        HAL_GPIO_WritePin(GPIO_OUT_LED_GPIO_Port, GPIO_OUT_LED_Pin,GPIO_PIN_SET);
 8002d72:	2201      	movs	r2, #1
 8002d74:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002d78:	4818      	ldr	r0, [pc, #96]	; (8002ddc <HAL_TIM_PeriodElapsedCallback+0x3cc>)
 8002d7a:	f005 f867 	bl	8007e4c <HAL_GPIO_WritePin>


	        avgCount = 0;
 8002d7e:	4b18      	ldr	r3, [pc, #96]	; (8002de0 <HAL_TIM_PeriodElapsedCallback+0x3d0>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	701a      	strb	r2, [r3, #0]
	        vectorX = 0;
 8002d84:	4b17      	ldr	r3, [pc, #92]	; (8002de4 <HAL_TIM_PeriodElapsedCallback+0x3d4>)
 8002d86:	f04f 0200 	mov.w	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]
	        vectorY = 0;
 8002d8c:	4b16      	ldr	r3, [pc, #88]	; (8002de8 <HAL_TIM_PeriodElapsedCallback+0x3d8>)
 8002d8e:	f04f 0200 	mov.w	r2, #0
 8002d92:	601a      	str	r2, [r3, #0]
	        minSpeed = 1000;
 8002d94:	4b15      	ldr	r3, [pc, #84]	; (8002dec <HAL_TIM_PeriodElapsedCallback+0x3dc>)
 8002d96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002d9a:	801a      	strh	r2, [r3, #0]
	        maxSpeed = 0;
 8002d9c:	4b14      	ldr	r3, [pc, #80]	; (8002df0 <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	801a      	strh	r2, [r3, #0]
	        batSum = 0;
 8002da2:	4b0b      	ldr	r3, [pc, #44]	; (8002dd0 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8002da4:	f04f 0200 	mov.w	r2, #0
 8002da8:	601a      	str	r2, [r3, #0]

	    }

	    if(avgCount == 1){
 8002daa:	4b0d      	ldr	r3, [pc, #52]	; (8002de0 <HAL_TIM_PeriodElapsedCallback+0x3d0>)
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d105      	bne.n	8002dbe <HAL_TIM_PeriodElapsedCallback+0x3ae>
	    	HAL_GPIO_WritePin(GPIO_OUT_LED_GPIO_Port, GPIO_OUT_LED_Pin,GPIO_PIN_RESET);
 8002db2:	2200      	movs	r2, #0
 8002db4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002db8:	4808      	ldr	r0, [pc, #32]	; (8002ddc <HAL_TIM_PeriodElapsedCallback+0x3cc>)
 8002dba:	f005 f847 	bl	8007e4c <HAL_GPIO_WritePin>
	    }
	}
}
 8002dbe:	bf00      	nop
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	ecbd 8b02 	vpop	{d8}
 8002dc8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002dcc:	200040b4 	.word	0x200040b4
 8002dd0:	200040b0 	.word	0x200040b0
 8002dd4:	20000008 	.word	0x20000008
 8002dd8:	200040e0 	.word	0x200040e0
 8002ddc:	40020400 	.word	0x40020400
 8002de0:	20004098 	.word	0x20004098
 8002de4:	2000409c 	.word	0x2000409c
 8002de8:	200040a0 	.word	0x200040a0
 8002dec:	20000004 	.word	0x20000004
 8002df0:	200040a4 	.word	0x200040a4

08002df4 <user_spi_read>:

int8_t user_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint16_t len){
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	6039      	str	r1, [r7, #0]
 8002dfe:	71fb      	strb	r3, [r7, #7]
 8002e00:	4613      	mov	r3, r2
 8002e02:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(GPIO_OUT_U_CS_GPIO_Port, GPIO_OUT_U_CS_Pin, GPIO_PIN_RESET);
 8002e04:	2200      	movs	r2, #0
 8002e06:	2140      	movs	r1, #64	; 0x40
 8002e08:	480d      	ldr	r0, [pc, #52]	; (8002e40 <user_spi_read+0x4c>)
 8002e0a:	f005 f81f 	bl	8007e4c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, &reg_addr , 1,1);
 8002e0e:	1df9      	adds	r1, r7, #7
 8002e10:	2301      	movs	r3, #1
 8002e12:	2201      	movs	r2, #1
 8002e14:	480b      	ldr	r0, [pc, #44]	; (8002e44 <user_spi_read+0x50>)
 8002e16:	f007 fc9f 	bl	800a758 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, reg_data, len,1);
 8002e1a:	88ba      	ldrh	r2, [r7, #4]
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	6839      	ldr	r1, [r7, #0]
 8002e20:	4808      	ldr	r0, [pc, #32]	; (8002e44 <user_spi_read+0x50>)
 8002e22:	f007 fdd5 	bl	800a9d0 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIO_OUT_U_CS_GPIO_Port, GPIO_OUT_U_CS_Pin, GPIO_PIN_SET);
 8002e26:	2201      	movs	r2, #1
 8002e28:	2140      	movs	r1, #64	; 0x40
 8002e2a:	4805      	ldr	r0, [pc, #20]	; (8002e40 <user_spi_read+0x4c>)
 8002e2c:	f005 f80e 	bl	8007e4c <HAL_GPIO_WritePin>

	int8_t rslt = 0;				// fake goodness
 8002e30:	2300      	movs	r3, #0
 8002e32:	73fb      	strb	r3, [r7, #15]


	return(rslt);
 8002e34:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3710      	adds	r7, #16
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	40020400 	.word	0x40020400
 8002e44:	20003d8c 	.word	0x20003d8c

08002e48 <user_spi_write>:

int8_t user_spi_write(uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	4603      	mov	r3, r0
 8002e50:	6039      	str	r1, [r7, #0]
 8002e52:	71fb      	strb	r3, [r7, #7]
 8002e54:	4613      	mov	r3, r2
 8002e56:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(GPIO_OUT_U_CS_GPIO_Port, GPIO_OUT_U_CS_Pin, GPIO_PIN_RESET);
 8002e58:	2200      	movs	r2, #0
 8002e5a:	2140      	movs	r1, #64	; 0x40
 8002e5c:	480f      	ldr	r0, [pc, #60]	; (8002e9c <user_spi_write+0x54>)
 8002e5e:	f004 fff5 	bl	8007e4c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, &reg_addr , 1,1);
 8002e62:	1df9      	adds	r1, r7, #7
 8002e64:	2301      	movs	r3, #1
 8002e66:	2201      	movs	r2, #1
 8002e68:	480d      	ldr	r0, [pc, #52]	; (8002ea0 <user_spi_write+0x58>)
 8002e6a:	f007 fc75 	bl	800a758 <HAL_SPI_Transmit>
	if(len > 0){
 8002e6e:	88bb      	ldrh	r3, [r7, #4]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d005      	beq.n	8002e80 <user_spi_write+0x38>
		HAL_SPI_Transmit(&hspi1, reg_data, len,1);
 8002e74:	88ba      	ldrh	r2, [r7, #4]
 8002e76:	2301      	movs	r3, #1
 8002e78:	6839      	ldr	r1, [r7, #0]
 8002e7a:	4809      	ldr	r0, [pc, #36]	; (8002ea0 <user_spi_write+0x58>)
 8002e7c:	f007 fc6c 	bl	800a758 <HAL_SPI_Transmit>
	}


	HAL_GPIO_WritePin(GPIO_OUT_U_CS_GPIO_Port, GPIO_OUT_U_CS_Pin, GPIO_PIN_SET);
 8002e80:	2201      	movs	r2, #1
 8002e82:	2140      	movs	r1, #64	; 0x40
 8002e84:	4805      	ldr	r0, [pc, #20]	; (8002e9c <user_spi_write+0x54>)
 8002e86:	f004 ffe1 	bl	8007e4c <HAL_GPIO_WritePin>

	int8_t rslt = 0; // fake goodness
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	73fb      	strb	r3, [r7, #15]


	return(rslt);
 8002e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	40020400 	.word	0x40020400
 8002ea0:	20003d8c 	.word	0x20003d8c

08002ea4 <delay_us>:

void delay_us (uint16_t us)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	4603      	mov	r3, r0
 8002eac:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim9,0);  // set the counter value a 0
 8002eae:	4b09      	ldr	r3, [pc, #36]	; (8002ed4 <delay_us+0x30>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim9) < us);  // wait for the counter to reach the us input in the parameter
 8002eb6:	bf00      	nop
 8002eb8:	4b06      	ldr	r3, [pc, #24]	; (8002ed4 <delay_us+0x30>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ebe:	88fb      	ldrh	r3, [r7, #6]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d3f9      	bcc.n	8002eb8 <delay_us+0x14>
}
 8002ec4:	bf00      	nop
 8002ec6:	bf00      	nop
 8002ec8:	370c      	adds	r7, #12
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	20003f04 	.word	0x20003f04

08002ed8 <timer2_ms_restart>:

void timer2_ms_restart(void){
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop(&htim2);
 8002edc:	4805      	ldr	r0, [pc, #20]	; (8002ef4 <timer2_ms_restart+0x1c>)
 8002ede:	f008 fa05 	bl	800b2ec <HAL_TIM_Base_Stop>
	__HAL_TIM_SET_COUNTER(&htim2,0);  // set the counter value a 0
 8002ee2:	4b04      	ldr	r3, [pc, #16]	; (8002ef4 <timer2_ms_restart+0x1c>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start(&htim2);
 8002eea:	4802      	ldr	r0, [pc, #8]	; (8002ef4 <timer2_ms_restart+0x1c>)
 8002eec:	f008 f9a4 	bl	800b238 <HAL_TIM_Base_Start>
}
 8002ef0:	bf00      	nop
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	20003de4 	.word	0x20003de4

08002ef8 <timer2_ms_get>:

uint32_t timer2_ms_get(void){
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim2);
 8002efc:	4b03      	ldr	r3, [pc, #12]	; (8002f0c <timer2_ms_get+0x14>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr
 8002f0c:	20003de4 	.word	0x20003de4

08002f10 <timer4_ms_restart>:

void timer4_ms_restart(void){
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop(&htim4);
 8002f14:	4805      	ldr	r0, [pc, #20]	; (8002f2c <timer4_ms_restart+0x1c>)
 8002f16:	f008 f9e9 	bl	800b2ec <HAL_TIM_Base_Stop>
	__HAL_TIM_SET_COUNTER(&htim4,0);  // set the counter value a 0
 8002f1a:	4b04      	ldr	r3, [pc, #16]	; (8002f2c <timer4_ms_restart+0x1c>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start(&htim4);
 8002f22:	4802      	ldr	r0, [pc, #8]	; (8002f2c <timer4_ms_restart+0x1c>)
 8002f24:	f008 f988 	bl	800b238 <HAL_TIM_Base_Start>
}
 8002f28:	bf00      	nop
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	20003e74 	.word	0x20003e74

08002f30 <timer4_ms_get>:

uint32_t timer4_ms_get(void){
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim4);
 8002f34:	4b03      	ldr	r3, [pc, #12]	; (8002f44 <timer4_ms_get+0x14>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr
 8002f44:	20003e74 	.word	0x20003e74

08002f48 <timer5_ms_restart>:

void timer5_ms_restart(void){
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop(&htim5);
 8002f4c:	4805      	ldr	r0, [pc, #20]	; (8002f64 <timer5_ms_restart+0x1c>)
 8002f4e:	f008 f9cd 	bl	800b2ec <HAL_TIM_Base_Stop>
	__HAL_TIM_SET_COUNTER(&htim5,0);  // set the counter value a 0
 8002f52:	4b04      	ldr	r3, [pc, #16]	; (8002f64 <timer5_ms_restart+0x1c>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2200      	movs	r2, #0
 8002f58:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start(&htim5);
 8002f5a:	4802      	ldr	r0, [pc, #8]	; (8002f64 <timer5_ms_restart+0x1c>)
 8002f5c:	f008 f96c 	bl	800b238 <HAL_TIM_Base_Start>
}
 8002f60:	bf00      	nop
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	20003ebc 	.word	0x20003ebc

08002f68 <timer5_ms_get>:

uint32_t timer5_ms_get(void){
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5);
 8002f6c:	4b03      	ldr	r3, [pc, #12]	; (8002f7c <timer5_ms_get+0x14>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr
 8002f7c:	20003ebc 	.word	0x20003ebc

08002f80 <timer10_ms_restart>:

void timer10_ms_restart(void){
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop(&htim10);
 8002f84:	4805      	ldr	r0, [pc, #20]	; (8002f9c <timer10_ms_restart+0x1c>)
 8002f86:	f008 f9b1 	bl	800b2ec <HAL_TIM_Base_Stop>
	__HAL_TIM_SET_COUNTER(&htim10,0);  // set the counter value a 0
 8002f8a:	4b04      	ldr	r3, [pc, #16]	; (8002f9c <timer10_ms_restart+0x1c>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start(&htim10);
 8002f92:	4802      	ldr	r0, [pc, #8]	; (8002f9c <timer10_ms_restart+0x1c>)
 8002f94:	f008 f950 	bl	800b238 <HAL_TIM_Base_Start>
}
 8002f98:	bf00      	nop
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	20003f4c 	.word	0x20003f4c

08002fa0 <timer10_ms_get>:

uint32_t timer10_ms_get(void){
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim10);
 8002fa4:	4b03      	ldr	r3, [pc, #12]	; (8002fb4 <timer10_ms_get+0x14>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr
 8002fb4:	20003f4c 	.word	0x20003f4c

08002fb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002fbc:	bf00      	nop
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
	...

08002fc8 <initMeasureBuffer>:
//uint8_t storeIndex=0;

uint8_t numToSend;
//uint8_t numToStore=0;

void initMeasureBuffer(){
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
	addIndex = 0;
 8002fcc:	4b06      	ldr	r3, [pc, #24]	; (8002fe8 <initMeasureBuffer+0x20>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	701a      	strb	r2, [r3, #0]
	sendIndex = 0;
 8002fd2:	4b06      	ldr	r3, [pc, #24]	; (8002fec <initMeasureBuffer+0x24>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	701a      	strb	r2, [r3, #0]
	numToSend = 0;
 8002fd8:	4b05      	ldr	r3, [pc, #20]	; (8002ff0 <initMeasureBuffer+0x28>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	701a      	strb	r2, [r3, #0]
}
 8002fde:	bf00      	nop
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr
 8002fe8:	20004be4 	.word	0x20004be4
 8002fec:	20004be5 	.word	0x20004be5
 8002ff0:	20004be6 	.word	0x20004be6

08002ff4 <addMeasurement>:



void addMeasurement(FFWX_Measurement * newMeasurement){
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]



	if(numToSend >= measureBufferSize){
 8002ffc:	4b6d      	ldr	r3, [pc, #436]	; (80031b4 <addMeasurement+0x1c0>)
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	2b3f      	cmp	r3, #63	; 0x3f
 8003002:	d91e      	bls.n	8003042 <addMeasurement+0x4e>


		//adjust the number still to store/send based on what has happened with the oldest one.
		if(measurement[sendIndex].sentStatus != 2){//we have not send the oldest one, so overwrite it and increase the send index to the next one
 8003004:	4b6c      	ldr	r3, [pc, #432]	; (80031b8 <addMeasurement+0x1c4>)
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	4619      	mov	r1, r3
 800300a:	4a6c      	ldr	r2, [pc, #432]	; (80031bc <addMeasurement+0x1c8>)
 800300c:	232c      	movs	r3, #44	; 0x2c
 800300e:	fb01 f303 	mul.w	r3, r1, r3
 8003012:	4413      	add	r3, r2
 8003014:	3329      	adds	r3, #41	; 0x29
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	2b02      	cmp	r3, #2
 800301a:	d00b      	beq.n	8003034 <addMeasurement+0x40>
			numToSend--;
 800301c:	4b65      	ldr	r3, [pc, #404]	; (80031b4 <addMeasurement+0x1c0>)
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	3b01      	subs	r3, #1
 8003022:	b2da      	uxtb	r2, r3
 8003024:	4b63      	ldr	r3, [pc, #396]	; (80031b4 <addMeasurement+0x1c0>)
 8003026:	701a      	strb	r2, [r3, #0]
			sendIndex++;
 8003028:	4b63      	ldr	r3, [pc, #396]	; (80031b8 <addMeasurement+0x1c4>)
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	3301      	adds	r3, #1
 800302e:	b2da      	uxtb	r2, r3
 8003030:	4b61      	ldr	r3, [pc, #388]	; (80031b8 <addMeasurement+0x1c4>)
 8003032:	701a      	strb	r2, [r3, #0]
//		oldestIndex++;
//		if(oldestIndex > measureBufferSize){
//			oldestIndex = 0;
//		}

		if(sendIndex >= measureBufferSize){
 8003034:	4b60      	ldr	r3, [pc, #384]	; (80031b8 <addMeasurement+0x1c4>)
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	2b3f      	cmp	r3, #63	; 0x3f
 800303a:	d902      	bls.n	8003042 <addMeasurement+0x4e>
			sendIndex = 0;
 800303c:	4b5e      	ldr	r3, [pc, #376]	; (80031b8 <addMeasurement+0x1c4>)
 800303e:	2200      	movs	r2, #0
 8003040:	701a      	strb	r2, [r3, #0]


	}


	measurement[addIndex].index = newMeasurement->index;
 8003042:	4b5f      	ldr	r3, [pc, #380]	; (80031c0 <addMeasurement+0x1cc>)
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	4618      	mov	r0, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	495b      	ldr	r1, [pc, #364]	; (80031bc <addMeasurement+0x1c8>)
 800304e:	232c      	movs	r3, #44	; 0x2c
 8003050:	fb00 f303 	mul.w	r3, r0, r3
 8003054:	440b      	add	r3, r1
 8003056:	601a      	str	r2, [r3, #0]
	measurement[addIndex].unix_time.seconds = newMeasurement->unix_time.seconds;
 8003058:	4b59      	ldr	r3, [pc, #356]	; (80031c0 <addMeasurement+0x1cc>)
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	4618      	mov	r0, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685a      	ldr	r2, [r3, #4]
 8003062:	4956      	ldr	r1, [pc, #344]	; (80031bc <addMeasurement+0x1c8>)
 8003064:	232c      	movs	r3, #44	; 0x2c
 8003066:	fb00 f303 	mul.w	r3, r0, r3
 800306a:	440b      	add	r3, r1
 800306c:	3304      	adds	r3, #4
 800306e:	601a      	str	r2, [r3, #0]
	measurement[addIndex].unix_time.ms = newMeasurement->unix_time.ms;
 8003070:	4b53      	ldr	r3, [pc, #332]	; (80031c0 <addMeasurement+0x1cc>)
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	4618      	mov	r0, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	8919      	ldrh	r1, [r3, #8]
 800307a:	4a50      	ldr	r2, [pc, #320]	; (80031bc <addMeasurement+0x1c8>)
 800307c:	232c      	movs	r3, #44	; 0x2c
 800307e:	fb00 f303 	mul.w	r3, r0, r3
 8003082:	4413      	add	r3, r2
 8003084:	3308      	adds	r3, #8
 8003086:	460a      	mov	r2, r1
 8003088:	801a      	strh	r2, [r3, #0]
	measurement[addIndex].mph = newMeasurement->mph;
 800308a:	4b4d      	ldr	r3, [pc, #308]	; (80031c0 <addMeasurement+0x1cc>)
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	4618      	mov	r0, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	68da      	ldr	r2, [r3, #12]
 8003094:	4949      	ldr	r1, [pc, #292]	; (80031bc <addMeasurement+0x1c8>)
 8003096:	232c      	movs	r3, #44	; 0x2c
 8003098:	fb00 f303 	mul.w	r3, r0, r3
 800309c:	440b      	add	r3, r1
 800309e:	330c      	adds	r3, #12
 80030a0:	601a      	str	r2, [r3, #0]
	measurement[addIndex].direction = newMeasurement->direction;
 80030a2:	4b47      	ldr	r3, [pc, #284]	; (80031c0 <addMeasurement+0x1cc>)
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	4618      	mov	r0, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	691a      	ldr	r2, [r3, #16]
 80030ac:	4943      	ldr	r1, [pc, #268]	; (80031bc <addMeasurement+0x1c8>)
 80030ae:	232c      	movs	r3, #44	; 0x2c
 80030b0:	fb00 f303 	mul.w	r3, r0, r3
 80030b4:	440b      	add	r3, r1
 80030b6:	3310      	adds	r3, #16
 80030b8:	601a      	str	r2, [r3, #0]
	measurement[addIndex].mphMax = newMeasurement->mphMax;
 80030ba:	4b41      	ldr	r3, [pc, #260]	; (80031c0 <addMeasurement+0x1cc>)
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	4618      	mov	r0, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	8ad9      	ldrh	r1, [r3, #22]
 80030c4:	4a3d      	ldr	r2, [pc, #244]	; (80031bc <addMeasurement+0x1c8>)
 80030c6:	232c      	movs	r3, #44	; 0x2c
 80030c8:	fb00 f303 	mul.w	r3, r0, r3
 80030cc:	4413      	add	r3, r2
 80030ce:	3316      	adds	r3, #22
 80030d0:	460a      	mov	r2, r1
 80030d2:	801a      	strh	r2, [r3, #0]
	measurement[addIndex].mphMin = newMeasurement->mphMin;
 80030d4:	4b3a      	ldr	r3, [pc, #232]	; (80031c0 <addMeasurement+0x1cc>)
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	4618      	mov	r0, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	8a99      	ldrh	r1, [r3, #20]
 80030de:	4a37      	ldr	r2, [pc, #220]	; (80031bc <addMeasurement+0x1c8>)
 80030e0:	232c      	movs	r3, #44	; 0x2c
 80030e2:	fb00 f303 	mul.w	r3, r0, r3
 80030e6:	4413      	add	r3, r2
 80030e8:	3314      	adds	r3, #20
 80030ea:	460a      	mov	r2, r1
 80030ec:	801a      	strh	r2, [r3, #0]
	measurement[addIndex].pressure = newMeasurement->pressure;
 80030ee:	4b34      	ldr	r3, [pc, #208]	; (80031c0 <addMeasurement+0x1cc>)
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	4618      	mov	r0, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	699a      	ldr	r2, [r3, #24]
 80030f8:	4930      	ldr	r1, [pc, #192]	; (80031bc <addMeasurement+0x1c8>)
 80030fa:	232c      	movs	r3, #44	; 0x2c
 80030fc:	fb00 f303 	mul.w	r3, r0, r3
 8003100:	440b      	add	r3, r1
 8003102:	3318      	adds	r3, #24
 8003104:	601a      	str	r2, [r3, #0]
	measurement[addIndex].temperature = newMeasurement->temperature;
 8003106:	4b2e      	ldr	r3, [pc, #184]	; (80031c0 <addMeasurement+0x1cc>)
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	4618      	mov	r0, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	69da      	ldr	r2, [r3, #28]
 8003110:	492a      	ldr	r1, [pc, #168]	; (80031bc <addMeasurement+0x1c8>)
 8003112:	232c      	movs	r3, #44	; 0x2c
 8003114:	fb00 f303 	mul.w	r3, r0, r3
 8003118:	440b      	add	r3, r1
 800311a:	331c      	adds	r3, #28
 800311c:	601a      	str	r2, [r3, #0]
	measurement[addIndex].humidity = newMeasurement->humidity;
 800311e:	4b28      	ldr	r3, [pc, #160]	; (80031c0 <addMeasurement+0x1cc>)
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a1a      	ldr	r2, [r3, #32]
 8003128:	4924      	ldr	r1, [pc, #144]	; (80031bc <addMeasurement+0x1c8>)
 800312a:	232c      	movs	r3, #44	; 0x2c
 800312c:	fb00 f303 	mul.w	r3, r0, r3
 8003130:	440b      	add	r3, r1
 8003132:	3320      	adds	r3, #32
 8003134:	601a      	str	r2, [r3, #0]
	measurement[addIndex].battery = newMeasurement->battery;
 8003136:	4b22      	ldr	r3, [pc, #136]	; (80031c0 <addMeasurement+0x1cc>)
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	4618      	mov	r0, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003140:	491e      	ldr	r1, [pc, #120]	; (80031bc <addMeasurement+0x1c8>)
 8003142:	232c      	movs	r3, #44	; 0x2c
 8003144:	fb00 f303 	mul.w	r3, r0, r3
 8003148:	440b      	add	r3, r1
 800314a:	3324      	adds	r3, #36	; 0x24
 800314c:	601a      	str	r2, [r3, #0]
	measurement[addIndex].csq = newMeasurement->csq;
 800314e:	4b1c      	ldr	r3, [pc, #112]	; (80031c0 <addMeasurement+0x1cc>)
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	4618      	mov	r0, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 800315a:	4a18      	ldr	r2, [pc, #96]	; (80031bc <addMeasurement+0x1c8>)
 800315c:	232c      	movs	r3, #44	; 0x2c
 800315e:	fb00 f303 	mul.w	r3, r0, r3
 8003162:	4413      	add	r3, r2
 8003164:	3328      	adds	r3, #40	; 0x28
 8003166:	460a      	mov	r2, r1
 8003168:	701a      	strb	r2, [r3, #0]
	measurement[addIndex].sentStatus = 0;
 800316a:	4b15      	ldr	r3, [pc, #84]	; (80031c0 <addMeasurement+0x1cc>)
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	4619      	mov	r1, r3
 8003170:	4a12      	ldr	r2, [pc, #72]	; (80031bc <addMeasurement+0x1c8>)
 8003172:	232c      	movs	r3, #44	; 0x2c
 8003174:	fb01 f303 	mul.w	r3, r1, r3
 8003178:	4413      	add	r3, r2
 800317a:	3329      	adds	r3, #41	; 0x29
 800317c:	2200      	movs	r2, #0
 800317e:	701a      	strb	r2, [r3, #0]
//	measurement[addIndex].stored = 0;
	numToSend++;
 8003180:	4b0c      	ldr	r3, [pc, #48]	; (80031b4 <addMeasurement+0x1c0>)
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	3301      	adds	r3, #1
 8003186:	b2da      	uxtb	r2, r3
 8003188:	4b0a      	ldr	r3, [pc, #40]	; (80031b4 <addMeasurement+0x1c0>)
 800318a:	701a      	strb	r2, [r3, #0]
//	numToStore++;

	//add a the next new one to the next position
	addIndex++;
 800318c:	4b0c      	ldr	r3, [pc, #48]	; (80031c0 <addMeasurement+0x1cc>)
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	3301      	adds	r3, #1
 8003192:	b2da      	uxtb	r2, r3
 8003194:	4b0a      	ldr	r3, [pc, #40]	; (80031c0 <addMeasurement+0x1cc>)
 8003196:	701a      	strb	r2, [r3, #0]
	if(addIndex >= measureBufferSize){
 8003198:	4b09      	ldr	r3, [pc, #36]	; (80031c0 <addMeasurement+0x1cc>)
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	2b3f      	cmp	r3, #63	; 0x3f
 800319e:	d902      	bls.n	80031a6 <addMeasurement+0x1b2>
		addIndex = 0;
 80031a0:	4b07      	ldr	r3, [pc, #28]	; (80031c0 <addMeasurement+0x1cc>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	701a      	strb	r2, [r3, #0]
	}
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	20004be6 	.word	0x20004be6
 80031b8:	20004be5 	.word	0x20004be5
 80031bc:	200040e4 	.word	0x200040e4
 80031c0:	20004be4 	.word	0x20004be4

080031c4 <numMeasurementsToSend>:

uint8_t numMeasurementsToSend(void){
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
	return numToSend;
 80031c8:	4b03      	ldr	r3, [pc, #12]	; (80031d8 <numMeasurementsToSend+0x14>)
 80031ca:	781b      	ldrb	r3, [r3, #0]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	20004be6 	.word	0x20004be6

080031dc <getMeasurementToSend>:

void getMeasurementToSend(FFWX_Measurement * measure){
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
	if(numToSend && measurement[sendIndex].sentStatus != 2){
 80031e4:	4b5f      	ldr	r3, [pc, #380]	; (8003364 <getMeasurementToSend+0x188>)
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f000 80b5 	beq.w	8003358 <getMeasurementToSend+0x17c>
 80031ee:	4b5e      	ldr	r3, [pc, #376]	; (8003368 <getMeasurementToSend+0x18c>)
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	4619      	mov	r1, r3
 80031f4:	4a5d      	ldr	r2, [pc, #372]	; (800336c <getMeasurementToSend+0x190>)
 80031f6:	232c      	movs	r3, #44	; 0x2c
 80031f8:	fb01 f303 	mul.w	r3, r1, r3
 80031fc:	4413      	add	r3, r2
 80031fe:	3329      	adds	r3, #41	; 0x29
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	2b02      	cmp	r3, #2
 8003204:	f000 80a8 	beq.w	8003358 <getMeasurementToSend+0x17c>
		measure->index = measurement[sendIndex].index;
 8003208:	4b57      	ldr	r3, [pc, #348]	; (8003368 <getMeasurementToSend+0x18c>)
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	4619      	mov	r1, r3
 800320e:	4a57      	ldr	r2, [pc, #348]	; (800336c <getMeasurementToSend+0x190>)
 8003210:	232c      	movs	r3, #44	; 0x2c
 8003212:	fb01 f303 	mul.w	r3, r1, r3
 8003216:	4413      	add	r3, r2
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	601a      	str	r2, [r3, #0]
		measure->unix_time.seconds = measurement[sendIndex].unix_time.seconds;
 800321e:	4b52      	ldr	r3, [pc, #328]	; (8003368 <getMeasurementToSend+0x18c>)
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	4619      	mov	r1, r3
 8003224:	4a51      	ldr	r2, [pc, #324]	; (800336c <getMeasurementToSend+0x190>)
 8003226:	232c      	movs	r3, #44	; 0x2c
 8003228:	fb01 f303 	mul.w	r3, r1, r3
 800322c:	4413      	add	r3, r2
 800322e:	3304      	adds	r3, #4
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	605a      	str	r2, [r3, #4]
		measure->unix_time.ms = measurement[sendIndex].unix_time.ms;
 8003236:	4b4c      	ldr	r3, [pc, #304]	; (8003368 <getMeasurementToSend+0x18c>)
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	4619      	mov	r1, r3
 800323c:	4a4b      	ldr	r2, [pc, #300]	; (800336c <getMeasurementToSend+0x190>)
 800323e:	232c      	movs	r3, #44	; 0x2c
 8003240:	fb01 f303 	mul.w	r3, r1, r3
 8003244:	4413      	add	r3, r2
 8003246:	3308      	adds	r3, #8
 8003248:	881a      	ldrh	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	811a      	strh	r2, [r3, #8]
		measure->mph = measurement[sendIndex].mph;
 800324e:	4b46      	ldr	r3, [pc, #280]	; (8003368 <getMeasurementToSend+0x18c>)
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	4619      	mov	r1, r3
 8003254:	4a45      	ldr	r2, [pc, #276]	; (800336c <getMeasurementToSend+0x190>)
 8003256:	232c      	movs	r3, #44	; 0x2c
 8003258:	fb01 f303 	mul.w	r3, r1, r3
 800325c:	4413      	add	r3, r2
 800325e:	330c      	adds	r3, #12
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	60da      	str	r2, [r3, #12]
		measure->direction = measurement[sendIndex].direction;
 8003266:	4b40      	ldr	r3, [pc, #256]	; (8003368 <getMeasurementToSend+0x18c>)
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	4619      	mov	r1, r3
 800326c:	4a3f      	ldr	r2, [pc, #252]	; (800336c <getMeasurementToSend+0x190>)
 800326e:	232c      	movs	r3, #44	; 0x2c
 8003270:	fb01 f303 	mul.w	r3, r1, r3
 8003274:	4413      	add	r3, r2
 8003276:	3310      	adds	r3, #16
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	611a      	str	r2, [r3, #16]
		measure->mphMax = measurement[sendIndex].mphMax;
 800327e:	4b3a      	ldr	r3, [pc, #232]	; (8003368 <getMeasurementToSend+0x18c>)
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	4619      	mov	r1, r3
 8003284:	4a39      	ldr	r2, [pc, #228]	; (800336c <getMeasurementToSend+0x190>)
 8003286:	232c      	movs	r3, #44	; 0x2c
 8003288:	fb01 f303 	mul.w	r3, r1, r3
 800328c:	4413      	add	r3, r2
 800328e:	3316      	adds	r3, #22
 8003290:	881a      	ldrh	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	82da      	strh	r2, [r3, #22]
		measure->mphMin = measurement[sendIndex].mphMin;
 8003296:	4b34      	ldr	r3, [pc, #208]	; (8003368 <getMeasurementToSend+0x18c>)
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	4619      	mov	r1, r3
 800329c:	4a33      	ldr	r2, [pc, #204]	; (800336c <getMeasurementToSend+0x190>)
 800329e:	232c      	movs	r3, #44	; 0x2c
 80032a0:	fb01 f303 	mul.w	r3, r1, r3
 80032a4:	4413      	add	r3, r2
 80032a6:	3314      	adds	r3, #20
 80032a8:	881a      	ldrh	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	829a      	strh	r2, [r3, #20]
		measure->pressure = measurement[sendIndex].pressure;
 80032ae:	4b2e      	ldr	r3, [pc, #184]	; (8003368 <getMeasurementToSend+0x18c>)
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	4619      	mov	r1, r3
 80032b4:	4a2d      	ldr	r2, [pc, #180]	; (800336c <getMeasurementToSend+0x190>)
 80032b6:	232c      	movs	r3, #44	; 0x2c
 80032b8:	fb01 f303 	mul.w	r3, r1, r3
 80032bc:	4413      	add	r3, r2
 80032be:	3318      	adds	r3, #24
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	619a      	str	r2, [r3, #24]
		measure->temperature = measurement[sendIndex].temperature;
 80032c6:	4b28      	ldr	r3, [pc, #160]	; (8003368 <getMeasurementToSend+0x18c>)
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	4619      	mov	r1, r3
 80032cc:	4a27      	ldr	r2, [pc, #156]	; (800336c <getMeasurementToSend+0x190>)
 80032ce:	232c      	movs	r3, #44	; 0x2c
 80032d0:	fb01 f303 	mul.w	r3, r1, r3
 80032d4:	4413      	add	r3, r2
 80032d6:	331c      	adds	r3, #28
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	61da      	str	r2, [r3, #28]
		measure->humidity = measurement[sendIndex].humidity;
 80032de:	4b22      	ldr	r3, [pc, #136]	; (8003368 <getMeasurementToSend+0x18c>)
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	4619      	mov	r1, r3
 80032e4:	4a21      	ldr	r2, [pc, #132]	; (800336c <getMeasurementToSend+0x190>)
 80032e6:	232c      	movs	r3, #44	; 0x2c
 80032e8:	fb01 f303 	mul.w	r3, r1, r3
 80032ec:	4413      	add	r3, r2
 80032ee:	3320      	adds	r3, #32
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	621a      	str	r2, [r3, #32]
		measure->battery = measurement[sendIndex].battery;
 80032f6:	4b1c      	ldr	r3, [pc, #112]	; (8003368 <getMeasurementToSend+0x18c>)
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	4619      	mov	r1, r3
 80032fc:	4a1b      	ldr	r2, [pc, #108]	; (800336c <getMeasurementToSend+0x190>)
 80032fe:	232c      	movs	r3, #44	; 0x2c
 8003300:	fb01 f303 	mul.w	r3, r1, r3
 8003304:	4413      	add	r3, r2
 8003306:	3324      	adds	r3, #36	; 0x24
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	625a      	str	r2, [r3, #36]	; 0x24
		measure->csq = measurement[sendIndex].csq;
 800330e:	4b16      	ldr	r3, [pc, #88]	; (8003368 <getMeasurementToSend+0x18c>)
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	4619      	mov	r1, r3
 8003314:	4a15      	ldr	r2, [pc, #84]	; (800336c <getMeasurementToSend+0x190>)
 8003316:	232c      	movs	r3, #44	; 0x2c
 8003318:	fb01 f303 	mul.w	r3, r1, r3
 800331c:	4413      	add	r3, r2
 800331e:	3328      	adds	r3, #40	; 0x28
 8003320:	781a      	ldrb	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		measure->sentStatus = measurement[sendIndex].sentStatus;
 8003328:	4b0f      	ldr	r3, [pc, #60]	; (8003368 <getMeasurementToSend+0x18c>)
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	4619      	mov	r1, r3
 800332e:	4a0f      	ldr	r2, [pc, #60]	; (800336c <getMeasurementToSend+0x190>)
 8003330:	232c      	movs	r3, #44	; 0x2c
 8003332:	fb01 f303 	mul.w	r3, r1, r3
 8003336:	4413      	add	r3, r2
 8003338:	3329      	adds	r3, #41	; 0x29
 800333a:	781a      	ldrb	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		measurement[sendIndex].sentStatus = 1;
 8003342:	4b09      	ldr	r3, [pc, #36]	; (8003368 <getMeasurementToSend+0x18c>)
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	4619      	mov	r1, r3
 8003348:	4a08      	ldr	r2, [pc, #32]	; (800336c <getMeasurementToSend+0x190>)
 800334a:	232c      	movs	r3, #44	; 0x2c
 800334c:	fb01 f303 	mul.w	r3, r1, r3
 8003350:	4413      	add	r3, r2
 8003352:	3329      	adds	r3, #41	; 0x29
 8003354:	2201      	movs	r2, #1
 8003356:	701a      	strb	r2, [r3, #0]
//		measure->stored = measurement[sendIndex].stored;
	}


}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr
 8003364:	20004be6 	.word	0x20004be6
 8003368:	20004be5 	.word	0x20004be5
 800336c:	200040e4 	.word	0x200040e4

08003370 <confirmSent>:
//	}
//
//	return numToStore;
//}

uint8_t confirmSent(uint32_t index){
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
	if(index == measurement[sendIndex].index){
 8003378:	4b19      	ldr	r3, [pc, #100]	; (80033e0 <confirmSent+0x70>)
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	4619      	mov	r1, r3
 800337e:	4a19      	ldr	r2, [pc, #100]	; (80033e4 <confirmSent+0x74>)
 8003380:	232c      	movs	r3, #44	; 0x2c
 8003382:	fb01 f303 	mul.w	r3, r1, r3
 8003386:	4413      	add	r3, r2
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	429a      	cmp	r2, r3
 800338e:	d11f      	bne.n	80033d0 <confirmSent+0x60>
		measurement[sendIndex].sentStatus = 2;
 8003390:	4b13      	ldr	r3, [pc, #76]	; (80033e0 <confirmSent+0x70>)
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	4619      	mov	r1, r3
 8003396:	4a13      	ldr	r2, [pc, #76]	; (80033e4 <confirmSent+0x74>)
 8003398:	232c      	movs	r3, #44	; 0x2c
 800339a:	fb01 f303 	mul.w	r3, r1, r3
 800339e:	4413      	add	r3, r2
 80033a0:	3329      	adds	r3, #41	; 0x29
 80033a2:	2202      	movs	r2, #2
 80033a4:	701a      	strb	r2, [r3, #0]
//		if(measurement[sendIndex].stored){
//			oldestIndex++;
//		}


		sendIndex++;
 80033a6:	4b0e      	ldr	r3, [pc, #56]	; (80033e0 <confirmSent+0x70>)
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	3301      	adds	r3, #1
 80033ac:	b2da      	uxtb	r2, r3
 80033ae:	4b0c      	ldr	r3, [pc, #48]	; (80033e0 <confirmSent+0x70>)
 80033b0:	701a      	strb	r2, [r3, #0]
		numToSend--;
 80033b2:	4b0d      	ldr	r3, [pc, #52]	; (80033e8 <confirmSent+0x78>)
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	3b01      	subs	r3, #1
 80033b8:	b2da      	uxtb	r2, r3
 80033ba:	4b0b      	ldr	r3, [pc, #44]	; (80033e8 <confirmSent+0x78>)
 80033bc:	701a      	strb	r2, [r3, #0]

		if(sendIndex >= measureBufferSize){
 80033be:	4b08      	ldr	r3, [pc, #32]	; (80033e0 <confirmSent+0x70>)
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	2b3f      	cmp	r3, #63	; 0x3f
 80033c4:	d902      	bls.n	80033cc <confirmSent+0x5c>
			sendIndex = 0;
 80033c6:	4b06      	ldr	r3, [pc, #24]	; (80033e0 <confirmSent+0x70>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	701a      	strb	r2, [r3, #0]
		}
//		if(oldestIndex >= measureBufferSize){
//			oldestIndex = 0;
//		}
		return 1;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e000      	b.n	80033d2 <confirmSent+0x62>

	}
	return 0;
 80033d0:	2300      	movs	r3, #0

}
 80033d2:	4618      	mov	r0, r3
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	20004be5 	.word	0x20004be5
 80033e4:	200040e4 	.word	0x200040e4
 80033e8:	20004be6 	.word	0x20004be6

080033ec <measurementToParams>:
//	}
//	return 0;
//}


void measurementToParams(FFWX_Measurement * measurement, char * buffer){
 80033ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033f0:	b09d      	sub	sp, #116	; 0x74
 80033f2:	af12      	add	r7, sp, #72	; 0x48
 80033f4:	6278      	str	r0, [r7, #36]	; 0x24
 80033f6:	6239      	str	r1, [r7, #32]
			"&q=%lu"
			"&t=%.1f"
			"&h=%.1f"
			"&b=%.2f"
			"&c=%u",
			getSettings()->SID,
 80033f8:	f000 fcf6 	bl	8003de8 <getSettings>
 80033fc:	4603      	mov	r3, r0
 80033fe:	8a9b      	ldrh	r3, [r3, #20]
		sprintf(buffer,
 8003400:	61fb      	str	r3, [r7, #28]
 8003402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003404:	6819      	ldr	r1, [r3, #0]
 8003406:	61b9      	str	r1, [r7, #24]
 8003408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340a:	685e      	ldr	r6, [r3, #4]
			measurement->index,
			measurement->unix_time.seconds,measurement->unix_time.ms,
 800340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340e:	891b      	ldrh	r3, [r3, #8]
		sprintf(buffer,
 8003410:	617b      	str	r3, [r7, #20]
			measurement->mph,
 8003412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003414:	68db      	ldr	r3, [r3, #12]
		sprintf(buffer,
 8003416:	4618      	mov	r0, r3
 8003418:	f7fd f8ae 	bl	8000578 <__aeabi_f2d>
 800341c:	4682      	mov	sl, r0
 800341e:	468b      	mov	fp, r1
			measurement->direction,
 8003420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003422:	691b      	ldr	r3, [r3, #16]
		sprintf(buffer,
 8003424:	4618      	mov	r0, r3
 8003426:	f7fd f8a7 	bl	8000578 <__aeabi_f2d>
 800342a:	e9c7 0102 	strd	r0, r1, [r7, #8]
			measurement->mphMax,
 800342e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003430:	8adb      	ldrh	r3, [r3, #22]
		sprintf(buffer,
 8003432:	613b      	str	r3, [r7, #16]
			measurement->mphMin,
 8003434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003436:	8a9b      	ldrh	r3, [r3, #20]
		sprintf(buffer,
 8003438:	607b      	str	r3, [r7, #4]
 800343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343c:	699c      	ldr	r4, [r3, #24]
 800343e:	603c      	str	r4, [r7, #0]
			measurement->pressure,
			measurement->temperature,
 8003440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003442:	69db      	ldr	r3, [r3, #28]
		sprintf(buffer,
 8003444:	4618      	mov	r0, r3
 8003446:	f7fd f897 	bl	8000578 <__aeabi_f2d>
 800344a:	4680      	mov	r8, r0
 800344c:	4689      	mov	r9, r1
			measurement->humidity,
 800344e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003450:	6a1b      	ldr	r3, [r3, #32]
		sprintf(buffer,
 8003452:	4618      	mov	r0, r3
 8003454:	f7fd f890 	bl	8000578 <__aeabi_f2d>
 8003458:	4604      	mov	r4, r0
 800345a:	460d      	mov	r5, r1
			measurement->battery,
 800345c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		sprintf(buffer,
 8003460:	4618      	mov	r0, r3
 8003462:	f7fd f889 	bl	8000578 <__aeabi_f2d>
			measurement->csq
 8003466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003468:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
		sprintf(buffer,
 800346c:	9310      	str	r3, [sp, #64]	; 0x40
 800346e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8003472:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
 8003476:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800347a:	683c      	ldr	r4, [r7, #0]
 800347c:	9408      	str	r4, [sp, #32]
 800347e:	687c      	ldr	r4, [r7, #4]
 8003480:	9407      	str	r4, [sp, #28]
 8003482:	693c      	ldr	r4, [r7, #16]
 8003484:	9406      	str	r4, [sp, #24]
 8003486:	ed97 7b02 	vldr	d7, [r7, #8]
 800348a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800348e:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8003492:	6978      	ldr	r0, [r7, #20]
 8003494:	9001      	str	r0, [sp, #4]
 8003496:	9600      	str	r6, [sp, #0]
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	69fa      	ldr	r2, [r7, #28]
 800349c:	4904      	ldr	r1, [pc, #16]	; (80034b0 <measurementToParams+0xc4>)
 800349e:	6a38      	ldr	r0, [r7, #32]
 80034a0:	f00e fb94 	bl	8011bcc <siprintf>
			);
}
 80034a4:	bf00      	nop
 80034a6:	372c      	adds	r7, #44	; 0x2c
 80034a8:	46bd      	mov	sp, r7
 80034aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034ae:	bf00      	nop
 80034b0:	080181c4 	.word	0x080181c4

080034b4 <measurementToSentance>:

void measurementToSentance(FFWX_Measurement * measurement, char * buffer){
 80034b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034b8:	b09d      	sub	sp, #116	; 0x74
 80034ba:	af12      	add	r7, sp, #72	; 0x48
 80034bc:	6278      	str	r0, [r7, #36]	; 0x24
 80034be:	6239      	str	r1, [r7, #32]
	sprintf(buffer, "$FFWX,1,"
 80034c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	61fb      	str	r3, [r7, #28]
 80034c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c8:	6859      	ldr	r1, [r3, #4]
 80034ca:	61b9      	str	r1, [r7, #24]
			"%.2f,"
			"%u"
			"\r\n",
			measurement->index,
			measurement->unix_time.seconds,
			measurement->unix_time.ms,
 80034cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ce:	891b      	ldrh	r3, [r3, #8]
	sprintf(buffer, "$FFWX,1,"
 80034d0:	617b      	str	r3, [r7, #20]
			measurement->mph,
 80034d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d4:	68db      	ldr	r3, [r3, #12]
	sprintf(buffer, "$FFWX,1,"
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7fd f84e 	bl	8000578 <__aeabi_f2d>
 80034dc:	4682      	mov	sl, r0
 80034de:	468b      	mov	fp, r1
			measurement->direction,
 80034e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e2:	691b      	ldr	r3, [r3, #16]
	sprintf(buffer, "$FFWX,1,"
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7fd f847 	bl	8000578 <__aeabi_f2d>
 80034ea:	e9c7 0102 	strd	r0, r1, [r7, #8]
			measurement->mphMax,
 80034ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f0:	8adb      	ldrh	r3, [r3, #22]
	sprintf(buffer, "$FFWX,1,"
 80034f2:	613b      	str	r3, [r7, #16]
			measurement->mphMin,
 80034f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f6:	8a9b      	ldrh	r3, [r3, #20]
	sprintf(buffer, "$FFWX,1,"
 80034f8:	607b      	str	r3, [r7, #4]
 80034fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fc:	699e      	ldr	r6, [r3, #24]
			measurement->pressure,
			measurement->temperature,
 80034fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003500:	69db      	ldr	r3, [r3, #28]
	sprintf(buffer, "$FFWX,1,"
 8003502:	4618      	mov	r0, r3
 8003504:	f7fd f838 	bl	8000578 <__aeabi_f2d>
 8003508:	4680      	mov	r8, r0
 800350a:	4689      	mov	r9, r1
			measurement->humidity,
 800350c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350e:	6a1b      	ldr	r3, [r3, #32]
	sprintf(buffer, "$FFWX,1,"
 8003510:	4618      	mov	r0, r3
 8003512:	f7fd f831 	bl	8000578 <__aeabi_f2d>
 8003516:	4604      	mov	r4, r0
 8003518:	460d      	mov	r5, r1
			measurement->battery,
 800351a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	sprintf(buffer, "$FFWX,1,"
 800351e:	4618      	mov	r0, r3
 8003520:	f7fd f82a 	bl	8000578 <__aeabi_f2d>
			measurement->csq);
 8003524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003526:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	sprintf(buffer, "$FFWX,1,"
 800352a:	9310      	str	r3, [sp, #64]	; 0x40
 800352c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8003530:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
 8003534:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8003538:	9608      	str	r6, [sp, #32]
 800353a:	687c      	ldr	r4, [r7, #4]
 800353c:	9407      	str	r4, [sp, #28]
 800353e:	693c      	ldr	r4, [r7, #16]
 8003540:	9406      	str	r4, [sp, #24]
 8003542:	ed97 7b02 	vldr	d7, [r7, #8]
 8003546:	ed8d 7b04 	vstr	d7, [sp, #16]
 800354a:	e9cd ab02 	strd	sl, fp, [sp, #8]
 800354e:	6978      	ldr	r0, [r7, #20]
 8003550:	9000      	str	r0, [sp, #0]
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	69fa      	ldr	r2, [r7, #28]
 8003556:	4904      	ldr	r1, [pc, #16]	; (8003568 <measurementToSentance+0xb4>)
 8003558:	6a38      	ldr	r0, [r7, #32]
 800355a:	f00e fb37 	bl	8011bcc <siprintf>
}
 800355e:	bf00      	nop
 8003560:	372c      	adds	r7, #44	; 0x2c
 8003562:	46bd      	mov	sp, r7
 8003564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003568:	08018214 	.word	0x08018214

0800356c <MS5611_Init>:



//MS5611 sensor

void MS5611_Init(void) {
 800356c:	b580      	push	{r7, lr}
 800356e:	af00      	add	r7, sp, #0




    sns_Reset();
 8003570:	f000 f856 	bl	8003620 <sns_Reset>

    sns_ReadCoeffs();
 8003574:	f000 f804 	bl	8003580 <sns_ReadCoeffs>

    sns_TriggerTemperatureSample();
 8003578:	f000 f86c 	bl	8003654 <sns_TriggerTemperatureSample>

}
 800357c:	bf00      	nop
 800357e:	bd80      	pop	{r7, pc}

08003580 <sns_ReadCoeffs>:



/// Read the calibration coefficients from the MS5611 pressure sensor

void sns_ReadCoeffs(void) {
 8003580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003582:	b08b      	sub	sp, #44	; 0x2c
 8003584:	af06      	add	r7, sp, #24
    unsigned char cnt;
    for (cnt = 0; cnt < 8; cnt++) {
 8003586:	2300      	movs	r3, #0
 8003588:	73fb      	strb	r3, [r7, #15]
 800358a:	e017      	b.n	80035bc <sns_ReadCoeffs+0x3c>

    	user_spi_read(0xA0 + cnt * 2, bytes, 2);
 800358c:	7bfb      	ldrb	r3, [r7, #15]
 800358e:	3350      	adds	r3, #80	; 0x50
 8003590:	b2db      	uxtb	r3, r3
 8003592:	005b      	lsls	r3, r3, #1
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2202      	movs	r2, #2
 8003598:	491c      	ldr	r1, [pc, #112]	; (800360c <sns_ReadCoeffs+0x8c>)
 800359a:	4618      	mov	r0, r3
 800359c:	f7ff fc2a 	bl	8002df4 <user_spi_read>

    	gC[cnt] = bytes[0] << 8 | bytes[1];
 80035a0:	4b1a      	ldr	r3, [pc, #104]	; (800360c <sns_ReadCoeffs+0x8c>)
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	021b      	lsls	r3, r3, #8
 80035a6:	4a19      	ldr	r2, [pc, #100]	; (800360c <sns_ReadCoeffs+0x8c>)
 80035a8:	7852      	ldrb	r2, [r2, #1]
 80035aa:	431a      	orrs	r2, r3
 80035ac:	7bfb      	ldrb	r3, [r7, #15]
 80035ae:	4611      	mov	r1, r2
 80035b0:	4a17      	ldr	r2, [pc, #92]	; (8003610 <sns_ReadCoeffs+0x90>)
 80035b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (cnt = 0; cnt < 8; cnt++) {
 80035b6:	7bfb      	ldrb	r3, [r7, #15]
 80035b8:	3301      	adds	r3, #1
 80035ba:	73fb      	strb	r3, [r7, #15]
 80035bc:	7bfb      	ldrb	r3, [r7, #15]
 80035be:	2b07      	cmp	r3, #7
 80035c0:	d9e4      	bls.n	800358c <sns_ReadCoeffs+0xc>



    }

    sprintf(buffer1, "MS5611 Calibration: %i %i %i %i %i %i %i %i\r\n",
 80035c2:	4b13      	ldr	r3, [pc, #76]	; (8003610 <sns_ReadCoeffs+0x90>)
 80035c4:	681e      	ldr	r6, [r3, #0]
 80035c6:	4b12      	ldr	r3, [pc, #72]	; (8003610 <sns_ReadCoeffs+0x90>)
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	607b      	str	r3, [r7, #4]
 80035cc:	4b10      	ldr	r3, [pc, #64]	; (8003610 <sns_ReadCoeffs+0x90>)
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	4a0f      	ldr	r2, [pc, #60]	; (8003610 <sns_ReadCoeffs+0x90>)
 80035d2:	68d2      	ldr	r2, [r2, #12]
 80035d4:	490e      	ldr	r1, [pc, #56]	; (8003610 <sns_ReadCoeffs+0x90>)
 80035d6:	6909      	ldr	r1, [r1, #16]
 80035d8:	480d      	ldr	r0, [pc, #52]	; (8003610 <sns_ReadCoeffs+0x90>)
 80035da:	6940      	ldr	r0, [r0, #20]
 80035dc:	4c0c      	ldr	r4, [pc, #48]	; (8003610 <sns_ReadCoeffs+0x90>)
 80035de:	69a4      	ldr	r4, [r4, #24]
 80035e0:	4d0b      	ldr	r5, [pc, #44]	; (8003610 <sns_ReadCoeffs+0x90>)
 80035e2:	69ed      	ldr	r5, [r5, #28]
 80035e4:	9505      	str	r5, [sp, #20]
 80035e6:	9404      	str	r4, [sp, #16]
 80035e8:	9003      	str	r0, [sp, #12]
 80035ea:	9102      	str	r1, [sp, #8]
 80035ec:	9201      	str	r2, [sp, #4]
 80035ee:	9300      	str	r3, [sp, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4632      	mov	r2, r6
 80035f4:	4907      	ldr	r1, [pc, #28]	; (8003614 <sns_ReadCoeffs+0x94>)
 80035f6:	4808      	ldr	r0, [pc, #32]	; (8003618 <sns_ReadCoeffs+0x98>)
 80035f8:	f00e fae8 	bl	8011bcc <siprintf>
			gC[5],
			gC[6],
			gC[7]);


	  Uart_SendString(buffer1, pc_uart);
 80035fc:	4907      	ldr	r1, [pc, #28]	; (800361c <sns_ReadCoeffs+0x9c>)
 80035fe:	4806      	ldr	r0, [pc, #24]	; (8003618 <sns_ReadCoeffs+0x98>)
 8003600:	f7fe f9c8 	bl	8001994 <Uart_SendString>
}
 8003604:	bf00      	nop
 8003606:	3714      	adds	r7, #20
 8003608:	46bd      	mov	sp, r7
 800360a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800360c:	20004c34 	.word	0x20004c34
 8003610:	20004be8 	.word	0x20004be8
 8003614:	08018250 	.word	0x08018250
 8003618:	20004c38 	.word	0x20004c38
 800361c:	20003fd8 	.word	0x20003fd8

08003620 <sns_Reset>:

void sns_Reset(void) {
 8003620:	b580      	push	{r7, lr}
 8003622:	af00      	add	r7, sp, #0

//    spi_Send8(0x1E);
    user_spi_write(0x1E, bytes, 0);
 8003624:	2200      	movs	r2, #0
 8003626:	4904      	ldr	r1, [pc, #16]	; (8003638 <sns_Reset+0x18>)
 8003628:	201e      	movs	r0, #30
 800362a:	f7ff fc0d 	bl	8002e48 <user_spi_write>

    HAL_Delay(100);
 800362e:	2064      	movs	r0, #100	; 0x64
 8003630:	f003 f92a 	bl	8006888 <HAL_Delay>



}
 8003634:	bf00      	nop
 8003636:	bd80      	pop	{r7, pc}
 8003638:	20004c34 	.word	0x20004c34

0800363c <sns_TriggerPressureSample>:


// Trigger a pressure sample with max oversampling rate

void sns_TriggerPressureSample(void) {
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0

//    spi_Send8(0x48);
    user_spi_write(0x48, bytes, 0);
 8003640:	2200      	movs	r2, #0
 8003642:	4903      	ldr	r1, [pc, #12]	; (8003650 <sns_TriggerPressureSample+0x14>)
 8003644:	2048      	movs	r0, #72	; 0x48
 8003646:	f7ff fbff 	bl	8002e48 <user_spi_write>


}
 800364a:	bf00      	nop
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	20004c34 	.word	0x20004c34

08003654 <sns_TriggerTemperatureSample>:

// Trigger a temperature sample with max oversampling rate

void sns_TriggerTemperatureSample(void) {
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0

//    spi_Send8(0x58);
    user_spi_write(0x58, bytes, 0);
 8003658:	2200      	movs	r2, #0
 800365a:	4903      	ldr	r1, [pc, #12]	; (8003668 <sns_TriggerTemperatureSample+0x14>)
 800365c:	2058      	movs	r0, #88	; 0x58
 800365e:	f7ff fbf3 	bl	8002e48 <user_spi_write>


}
 8003662:	bf00      	nop
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	20004c34 	.word	0x20004c34

0800366c <sns_ReadTemperatureSample>:


// Read a raw temperature sample

unsigned long sns_ReadTemperatureSample(void) {
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
    unsigned long w;

//    spi_Send8(0x00);
//    w = spi_Receive24();

    user_spi_read(0x00, bytes, 3);
 8003672:	2203      	movs	r2, #3
 8003674:	490b      	ldr	r1, [pc, #44]	; (80036a4 <sns_ReadTemperatureSample+0x38>)
 8003676:	2000      	movs	r0, #0
 8003678:	f7ff fbbc 	bl	8002df4 <user_spi_read>
    w = bytes[0] << 16 | bytes[1] << 8 | bytes[2];
 800367c:	4b09      	ldr	r3, [pc, #36]	; (80036a4 <sns_ReadTemperatureSample+0x38>)
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	041a      	lsls	r2, r3, #16
 8003682:	4b08      	ldr	r3, [pc, #32]	; (80036a4 <sns_ReadTemperatureSample+0x38>)
 8003684:	785b      	ldrb	r3, [r3, #1]
 8003686:	021b      	lsls	r3, r3, #8
 8003688:	4313      	orrs	r3, r2
 800368a:	4a06      	ldr	r2, [pc, #24]	; (80036a4 <sns_ReadTemperatureSample+0x38>)
 800368c:	7892      	ldrb	r2, [r2, #2]
 800368e:	4313      	orrs	r3, r2
 8003690:	607b      	str	r3, [r7, #4]

    gD2 = w;
 8003692:	4a05      	ldr	r2, [pc, #20]	; (80036a8 <sns_ReadTemperatureSample+0x3c>)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6013      	str	r3, [r2, #0]
    return w;
 8003698:	687b      	ldr	r3, [r7, #4]
}
 800369a:	4618      	mov	r0, r3
 800369c:	3708      	adds	r7, #8
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	20004c34 	.word	0x20004c34
 80036a8:	20004c0c 	.word	0x20004c0c

080036ac <sns_ReadPressureSample>:



// Read a raw pressure sample

unsigned long sns_ReadPressureSample(void) {
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0

    unsigned long w;

//    spi_Send8(0x00);
//    w = spi_Receive24();
    user_spi_read(0x00, bytes, 3);
 80036b2:	2203      	movs	r2, #3
 80036b4:	490b      	ldr	r1, [pc, #44]	; (80036e4 <sns_ReadPressureSample+0x38>)
 80036b6:	2000      	movs	r0, #0
 80036b8:	f7ff fb9c 	bl	8002df4 <user_spi_read>
    w = bytes[0] << 16 | bytes[1] << 8 | bytes[2];
 80036bc:	4b09      	ldr	r3, [pc, #36]	; (80036e4 <sns_ReadPressureSample+0x38>)
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	041a      	lsls	r2, r3, #16
 80036c2:	4b08      	ldr	r3, [pc, #32]	; (80036e4 <sns_ReadPressureSample+0x38>)
 80036c4:	785b      	ldrb	r3, [r3, #1]
 80036c6:	021b      	lsls	r3, r3, #8
 80036c8:	4313      	orrs	r3, r2
 80036ca:	4a06      	ldr	r2, [pc, #24]	; (80036e4 <sns_ReadPressureSample+0x38>)
 80036cc:	7892      	ldrb	r2, [r2, #2]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	607b      	str	r3, [r7, #4]

    gD1 = w;
 80036d2:	4a05      	ldr	r2, [pc, #20]	; (80036e8 <sns_ReadPressureSample+0x3c>)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6013      	str	r3, [r2, #0]
    return w;
 80036d8:	687b      	ldr	r3, [r7, #4]
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	20004c34 	.word	0x20004c34
 80036e8:	20004c08 	.word	0x20004c08

080036ec <sns_CalculateTemperatureCx10>:

long sns_CalculateTemperatureCx10(void) {
 80036ec:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80036f0:	af00      	add	r7, sp, #0

    gdT = (long) gD2 - (((long) gC[5]) << 8);
 80036f2:	4e26      	ldr	r6, [pc, #152]	; (800378c <sns_CalculateTemperatureCx10+0xa0>)
 80036f4:	6836      	ldr	r6, [r6, #0]
 80036f6:	46b4      	mov	ip, r6
 80036f8:	4e25      	ldr	r6, [pc, #148]	; (8003790 <sns_CalculateTemperatureCx10+0xa4>)
 80036fa:	6976      	ldr	r6, [r6, #20]
 80036fc:	0236      	lsls	r6, r6, #8
 80036fe:	ebac 0106 	sub.w	r1, ip, r6
 8003702:	4e24      	ldr	r6, [pc, #144]	; (8003794 <sns_CalculateTemperatureCx10+0xa8>)
 8003704:	6031      	str	r1, [r6, #0]
    t = 2000 + ((gdT * ((long long) gC[6])) >> 23);
 8003706:	4e23      	ldr	r6, [pc, #140]	; (8003794 <sns_CalculateTemperatureCx10+0xa8>)
 8003708:	6836      	ldr	r6, [r6, #0]
 800370a:	ea4f 7ce6 	mov.w	ip, r6, asr #31
 800370e:	4634      	mov	r4, r6
 8003710:	4665      	mov	r5, ip
 8003712:	4e1f      	ldr	r6, [pc, #124]	; (8003790 <sns_CalculateTemperatureCx10+0xa4>)
 8003714:	69b6      	ldr	r6, [r6, #24]
 8003716:	f04f 0c00 	mov.w	ip, #0
 800371a:	46b0      	mov	r8, r6
 800371c:	46e1      	mov	r9, ip
 800371e:	fb08 fc05 	mul.w	ip, r8, r5
 8003722:	fb04 f609 	mul.w	r6, r4, r9
 8003726:	4466      	add	r6, ip
 8003728:	fba4 2308 	umull	r2, r3, r4, r8
 800372c:	18f1      	adds	r1, r6, r3
 800372e:	460b      	mov	r3, r1
 8003730:	f04f 0000 	mov.w	r0, #0
 8003734:	f04f 0100 	mov.w	r1, #0
 8003738:	0dd0      	lsrs	r0, r2, #23
 800373a:	ea40 2043 	orr.w	r0, r0, r3, lsl #9
 800373e:	15d9      	asrs	r1, r3, #23
 8003740:	4603      	mov	r3, r0
 8003742:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003746:	461a      	mov	r2, r3
 8003748:	4b13      	ldr	r3, [pc, #76]	; (8003798 <sns_CalculateTemperatureCx10+0xac>)
 800374a:	601a      	str	r2, [r3, #0]

    gnTempC = (t >= 0 ? (t + 5) / 10 : (t - 5) / 10);
 800374c:	4b12      	ldr	r3, [pc, #72]	; (8003798 <sns_CalculateTemperatureCx10+0xac>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2b00      	cmp	r3, #0
 8003752:	db09      	blt.n	8003768 <sns_CalculateTemperatureCx10+0x7c>
 8003754:	4b10      	ldr	r3, [pc, #64]	; (8003798 <sns_CalculateTemperatureCx10+0xac>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	3305      	adds	r3, #5
 800375a:	4a10      	ldr	r2, [pc, #64]	; (800379c <sns_CalculateTemperatureCx10+0xb0>)
 800375c:	fb82 1203 	smull	r1, r2, r2, r3
 8003760:	1092      	asrs	r2, r2, #2
 8003762:	17db      	asrs	r3, r3, #31
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	e008      	b.n	800377a <sns_CalculateTemperatureCx10+0x8e>
 8003768:	4b0b      	ldr	r3, [pc, #44]	; (8003798 <sns_CalculateTemperatureCx10+0xac>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	3b05      	subs	r3, #5
 800376e:	4a0b      	ldr	r2, [pc, #44]	; (800379c <sns_CalculateTemperatureCx10+0xb0>)
 8003770:	fb82 1203 	smull	r1, r2, r2, r3
 8003774:	1092      	asrs	r2, r2, #2
 8003776:	17db      	asrs	r3, r3, #31
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	4a09      	ldr	r2, [pc, #36]	; (80037a0 <sns_CalculateTemperatureCx10+0xb4>)
 800377c:	6013      	str	r3, [r2, #0]
    return gnTempC;
 800377e:	4b08      	ldr	r3, [pc, #32]	; (80037a0 <sns_CalculateTemperatureCx10+0xb4>)
 8003780:	681b      	ldr	r3, [r3, #0]
}
 8003782:	4618      	mov	r0, r3
 8003784:	46bd      	mov	sp, r7
 8003786:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800378a:	4770      	bx	lr
 800378c:	20004c0c 	.word	0x20004c0c
 8003790:	20004be8 	.word	0x20004be8
 8003794:	20004c10 	.word	0x20004c10
 8003798:	20004c30 	.word	0x20004c30
 800379c:	66666667 	.word	0x66666667
 80037a0:	20004c2c 	.word	0x20004c2c

080037a4 <sns_CalculatePressurePa>:

long sns_CalculatePressurePa(void) {
 80037a4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80037a8:	b099      	sub	sp, #100	; 0x64
 80037aa:	af00      	add	r7, sp, #0
    long pa;

    gOFF = (((long long) gC[2]) << 16) + ((((long long) gC[4])*(long long) gdT) >> 7);
 80037ac:	4b61      	ldr	r3, [pc, #388]	; (8003934 <sns_CalculatePressurePa+0x190>)
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	2200      	movs	r2, #0
 80037b2:	4618      	mov	r0, r3
 80037b4:	4611      	mov	r1, r2
 80037b6:	0c03      	lsrs	r3, r0, #16
 80037b8:	647b      	str	r3, [r7, #68]	; 0x44
 80037ba:	0403      	lsls	r3, r0, #16
 80037bc:	643b      	str	r3, [r7, #64]	; 0x40
 80037be:	4b5d      	ldr	r3, [pc, #372]	; (8003934 <sns_CalculatePressurePa+0x190>)
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	2200      	movs	r2, #0
 80037c4:	469a      	mov	sl, r3
 80037c6:	4693      	mov	fp, r2
 80037c8:	4b5b      	ldr	r3, [pc, #364]	; (8003938 <sns_CalculatePressurePa+0x194>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	17da      	asrs	r2, r3, #31
 80037ce:	4698      	mov	r8, r3
 80037d0:	4691      	mov	r9, r2
 80037d2:	fb08 f20b 	mul.w	r2, r8, fp
 80037d6:	fb0a f309 	mul.w	r3, sl, r9
 80037da:	4413      	add	r3, r2
 80037dc:	fbaa 4508 	umull	r4, r5, sl, r8
 80037e0:	442b      	add	r3, r5
 80037e2:	461d      	mov	r5, r3
 80037e4:	f04f 0200 	mov.w	r2, #0
 80037e8:	f04f 0300 	mov.w	r3, #0
 80037ec:	09e2      	lsrs	r2, r4, #7
 80037ee:	ea42 6245 	orr.w	r2, r2, r5, lsl #25
 80037f2:	11eb      	asrs	r3, r5, #7
 80037f4:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80037f8:	4621      	mov	r1, r4
 80037fa:	1889      	adds	r1, r1, r2
 80037fc:	63b9      	str	r1, [r7, #56]	; 0x38
 80037fe:	4629      	mov	r1, r5
 8003800:	eb43 0101 	adc.w	r1, r3, r1
 8003804:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003806:	4b4d      	ldr	r3, [pc, #308]	; (800393c <sns_CalculatePressurePa+0x198>)
 8003808:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800380c:	e9c3 1200 	strd	r1, r2, [r3]
    gSENS = (((long long) gC[1]) << 15) + ((((long long) gC[3])*(long long) gdT) >> 8);
 8003810:	4b48      	ldr	r3, [pc, #288]	; (8003934 <sns_CalculatePressurePa+0x190>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	633b      	str	r3, [r7, #48]	; 0x30
 8003818:	637a      	str	r2, [r7, #52]	; 0x34
 800381a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800381e:	460b      	mov	r3, r1
 8003820:	0c5b      	lsrs	r3, r3, #17
 8003822:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003824:	460b      	mov	r3, r1
 8003826:	03db      	lsls	r3, r3, #15
 8003828:	62bb      	str	r3, [r7, #40]	; 0x28
 800382a:	4b42      	ldr	r3, [pc, #264]	; (8003934 <sns_CalculatePressurePa+0x190>)
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	623b      	str	r3, [r7, #32]
 8003832:	627a      	str	r2, [r7, #36]	; 0x24
 8003834:	4b40      	ldr	r3, [pc, #256]	; (8003938 <sns_CalculatePressurePa+0x194>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	17da      	asrs	r2, r3, #31
 800383a:	61bb      	str	r3, [r7, #24]
 800383c:	61fa      	str	r2, [r7, #28]
 800383e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003842:	462b      	mov	r3, r5
 8003844:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8003848:	4642      	mov	r2, r8
 800384a:	fb02 f203 	mul.w	r2, r2, r3
 800384e:	464b      	mov	r3, r9
 8003850:	4621      	mov	r1, r4
 8003852:	fb01 f303 	mul.w	r3, r1, r3
 8003856:	4413      	add	r3, r2
 8003858:	4622      	mov	r2, r4
 800385a:	4641      	mov	r1, r8
 800385c:	fba2 1201 	umull	r1, r2, r2, r1
 8003860:	657a      	str	r2, [r7, #84]	; 0x54
 8003862:	460a      	mov	r2, r1
 8003864:	653a      	str	r2, [r7, #80]	; 0x50
 8003866:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003868:	4413      	add	r3, r2
 800386a:	657b      	str	r3, [r7, #84]	; 0x54
 800386c:	f04f 0200 	mov.w	r2, #0
 8003870:	f04f 0300 	mov.w	r3, #0
 8003874:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8003878:	4621      	mov	r1, r4
 800387a:	0a0a      	lsrs	r2, r1, #8
 800387c:	4629      	mov	r1, r5
 800387e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003882:	4629      	mov	r1, r5
 8003884:	120b      	asrs	r3, r1, #8
 8003886:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800388a:	4621      	mov	r1, r4
 800388c:	1889      	adds	r1, r1, r2
 800388e:	6139      	str	r1, [r7, #16]
 8003890:	4629      	mov	r1, r5
 8003892:	eb43 0101 	adc.w	r1, r3, r1
 8003896:	6179      	str	r1, [r7, #20]
 8003898:	4b29      	ldr	r3, [pc, #164]	; (8003940 <sns_CalculatePressurePa+0x19c>)
 800389a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800389e:	e9c3 1200 	strd	r1, r2, [r3]
    pa = (long) ((((((long long) gD1) * gSENS) >> 21) - gOFF) >> 15);
 80038a2:	4b28      	ldr	r3, [pc, #160]	; (8003944 <sns_CalculatePressurePa+0x1a0>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2200      	movs	r2, #0
 80038a8:	60bb      	str	r3, [r7, #8]
 80038aa:	60fa      	str	r2, [r7, #12]
 80038ac:	4b24      	ldr	r3, [pc, #144]	; (8003940 <sns_CalculatePressurePa+0x19c>)
 80038ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80038b6:	4629      	mov	r1, r5
 80038b8:	fb02 f001 	mul.w	r0, r2, r1
 80038bc:	4621      	mov	r1, r4
 80038be:	fb01 f103 	mul.w	r1, r1, r3
 80038c2:	4401      	add	r1, r0
 80038c4:	4620      	mov	r0, r4
 80038c6:	fba0 2302 	umull	r2, r3, r0, r2
 80038ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038cc:	4613      	mov	r3, r2
 80038ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80038d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038d2:	18cb      	adds	r3, r1, r3
 80038d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038d6:	f04f 0200 	mov.w	r2, #0
 80038da:	f04f 0300 	mov.w	r3, #0
 80038de:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80038e2:	4621      	mov	r1, r4
 80038e4:	0d4a      	lsrs	r2, r1, #21
 80038e6:	4629      	mov	r1, r5
 80038e8:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 80038ec:	4629      	mov	r1, r5
 80038ee:	154b      	asrs	r3, r1, #21
 80038f0:	4912      	ldr	r1, [pc, #72]	; (800393c <sns_CalculatePressurePa+0x198>)
 80038f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80038f6:	1a14      	subs	r4, r2, r0
 80038f8:	603c      	str	r4, [r7, #0]
 80038fa:	eb63 0301 	sbc.w	r3, r3, r1
 80038fe:	607b      	str	r3, [r7, #4]
 8003900:	f04f 0200 	mov.w	r2, #0
 8003904:	f04f 0300 	mov.w	r3, #0
 8003908:	e9d7 4500 	ldrd	r4, r5, [r7]
 800390c:	4621      	mov	r1, r4
 800390e:	0bca      	lsrs	r2, r1, #15
 8003910:	4629      	mov	r1, r5
 8003912:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 8003916:	4629      	mov	r1, r5
 8003918:	13cb      	asrs	r3, r1, #15
 800391a:	4613      	mov	r3, r2
 800391c:	65fb      	str	r3, [r7, #92]	; 0x5c
    gP = pa;
 800391e:	4a0a      	ldr	r2, [pc, #40]	; (8003948 <sns_CalculatePressurePa+0x1a4>)
 8003920:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003922:	6013      	str	r3, [r2, #0]
    return pa;
 8003924:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8003926:	4618      	mov	r0, r3
 8003928:	3764      	adds	r7, #100	; 0x64
 800392a:	46bd      	mov	sp, r7
 800392c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	20004be8 	.word	0x20004be8
 8003938:	20004c10 	.word	0x20004c10
 800393c:	20004c18 	.word	0x20004c18
 8003940:	20004c20 	.word	0x20004c20
 8003944:	20004c08 	.word	0x20004c08
 8003948:	20004c28 	.word	0x20004c28

0800394c <getPressure>:



uint32_t getPressure(void){
 800394c:	b580      	push	{r7, lr}
 800394e:	af00      	add	r7, sp, #0

	sns_TriggerTemperatureSample();
 8003950:	f7ff fe80 	bl	8003654 <sns_TriggerTemperatureSample>
	HAL_Delay(10);
 8003954:	200a      	movs	r0, #10
 8003956:	f002 ff97 	bl	8006888 <HAL_Delay>
	sns_ReadTemperatureSample();
 800395a:	f7ff fe87 	bl	800366c <sns_ReadTemperatureSample>
	sns_CalculateTemperatureCx10();
 800395e:	f7ff fec5 	bl	80036ec <sns_CalculateTemperatureCx10>

    sns_TriggerPressureSample();
 8003962:	f7ff fe6b 	bl	800363c <sns_TriggerPressureSample>
	HAL_Delay(10);
 8003966:	200a      	movs	r0, #10
 8003968:	f002 ff8e 	bl	8006888 <HAL_Delay>
	sns_ReadPressureSample();
 800396c:	f7ff fe9e 	bl	80036ac <sns_ReadPressureSample>
	sns_CalculatePressurePa();
 8003970:	f7ff ff18 	bl	80037a4 <sns_CalculatePressurePa>

	return (uint32_t)gP;
 8003974:	4b01      	ldr	r3, [pc, #4]	; (800397c <getPressure+0x30>)
 8003976:	681b      	ldr	r3, [r3, #0]

}
 8003978:	4618      	mov	r0, r3
 800397a:	bd80      	pop	{r7, pc}
 800397c:	20004c28 	.word	0x20004c28

08003980 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003980:	b480      	push	{r7}
 8003982:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003984:	f3bf 8f4f 	dsb	sy
}
 8003988:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800398a:	4b06      	ldr	r3, [pc, #24]	; (80039a4 <__NVIC_SystemReset+0x24>)
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003992:	4904      	ldr	r1, [pc, #16]	; (80039a4 <__NVIC_SystemReset+0x24>)
 8003994:	4b04      	ldr	r3, [pc, #16]	; (80039a8 <__NVIC_SystemReset+0x28>)
 8003996:	4313      	orrs	r3, r2
 8003998:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800399a:	f3bf 8f4f 	dsb	sy
}
 800399e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80039a0:	bf00      	nop
 80039a2:	e7fd      	b.n	80039a0 <__NVIC_SystemReset+0x20>
 80039a4:	e000ed00 	.word	0xe000ed00
 80039a8:	05fa0004 	.word	0x05fa0004

080039ac <SDcard_Init>:
uint8_t logBufferReady;




void SDcard_Init(void){
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0

	sdState = SDSTATE_INIT;
 80039b0:	4b1b      	ldr	r3, [pc, #108]	; (8003a20 <SDcard_Init+0x74>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	701a      	strb	r2, [r3, #0]
	settings.URL[0] = 0;
 80039b6:	4b1b      	ldr	r3, [pc, #108]	; (8003a24 <SDcard_Init+0x78>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	759a      	strb	r2, [r3, #22]
	settings.SID = 0;
 80039bc:	4b19      	ldr	r3, [pc, #100]	; (8003a24 <SDcard_Init+0x78>)
 80039be:	2200      	movs	r2, #0
 80039c0:	829a      	strh	r2, [r3, #20]
	saveFlag = 0;
 80039c2:	4b19      	ldr	r3, [pc, #100]	; (8003a28 <SDcard_Init+0x7c>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	701a      	strb	r2, [r3, #0]
	settingsValid = 0;
 80039c8:	4b18      	ldr	r3, [pc, #96]	; (8003a2c <SDcard_Init+0x80>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	701a      	strb	r2, [r3, #0]


	Uart_SendString("Mounting SD Card...\r\n", pc_uart);
 80039ce:	4918      	ldr	r1, [pc, #96]	; (8003a30 <SDcard_Init+0x84>)
 80039d0:	4818      	ldr	r0, [pc, #96]	; (8003a34 <SDcard_Init+0x88>)
 80039d2:	f7fd ffdf 	bl	8001994 <Uart_SendString>
	fresult1 = Mount_SD("/");
 80039d6:	4818      	ldr	r0, [pc, #96]	; (8003a38 <SDcard_Init+0x8c>)
 80039d8:	f7fd fb84 	bl	80010e4 <Mount_SD>
 80039dc:	4603      	mov	r3, r0
 80039de:	461a      	mov	r2, r3
 80039e0:	4b16      	ldr	r3, [pc, #88]	; (8003a3c <SDcard_Init+0x90>)
 80039e2:	701a      	strb	r2, [r3, #0]
	if (fresult1 != FR_OK){
 80039e4:	4b15      	ldr	r3, [pc, #84]	; (8003a3c <SDcard_Init+0x90>)
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d005      	beq.n	80039f8 <SDcard_Init+0x4c>
		sdState = SDSTATE_ERR;
 80039ec:	4b0c      	ldr	r3, [pc, #48]	; (8003a20 <SDcard_Init+0x74>)
 80039ee:	2202      	movs	r2, #2
 80039f0:	701a      	strb	r2, [r3, #0]
		defaultSettings();
 80039f2:	f000 f82d 	bl	8003a50 <defaultSettings>
		return;
 80039f6:	e012      	b.n	8003a1e <SDcard_Init+0x72>

	}
	fresult1 = Check_SD_Space();
 80039f8:	f7fd fd06 	bl	8001408 <Check_SD_Space>
 80039fc:	4603      	mov	r3, r0
 80039fe:	461a      	mov	r2, r3
 8003a00:	4b0e      	ldr	r3, [pc, #56]	; (8003a3c <SDcard_Init+0x90>)
 8003a02:	701a      	strb	r2, [r3, #0]
	if (fresult1 != FR_OK){
 8003a04:	4b0d      	ldr	r3, [pc, #52]	; (8003a3c <SDcard_Init+0x90>)
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d005      	beq.n	8003a18 <SDcard_Init+0x6c>
		sdState = SDSTATE_ERR;
 8003a0c:	4b04      	ldr	r3, [pc, #16]	; (8003a20 <SDcard_Init+0x74>)
 8003a0e:	2202      	movs	r2, #2
 8003a10:	701a      	strb	r2, [r3, #0]
		defaultSettings();
 8003a12:	f000 f81d 	bl	8003a50 <defaultSettings>
		return;
 8003a16:	e002      	b.n	8003a1e <SDcard_Init+0x72>
	}

	sdState = SDSTATE_OK;
 8003a18:	4b01      	ldr	r3, [pc, #4]	; (8003a20 <SDcard_Init+0x74>)
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	701a      	strb	r2, [r3, #0]


}
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	20005320 	.word	0x20005320
 8003a24:	20004c9c 	.word	0x20004c9c
 8003a28:	2000531e 	.word	0x2000531e
 8003a2c:	20005321 	.word	0x20005321
 8003a30:	20003fd8 	.word	0x20003fd8
 8003a34:	08018290 	.word	0x08018290
 8003a38:	080182a8 	.word	0x080182a8
 8003a3c:	20004d5c 	.word	0x20004d5c

08003a40 <checkSDError>:

void checkSDError(void){
 8003a40:	b480      	push	{r7}
 8003a42:	af00      	add	r7, sp, #0
//			MX_FATFS_Init();
//			sdState = SDSTATE_INIT;
//			break;
//
//	}
}
 8003a44:	bf00      	nop
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
	...

08003a50 <defaultSettings>:

void defaultSettings(void){
 8003a50:	b5b0      	push	{r4, r5, r7, lr}
 8003a52:	af00      	add	r7, sp, #0
	//check if all key settings are set. If not, set to defaults.
	if(strlen(settings.URL) < 8){
 8003a54:	4825      	ldr	r0, [pc, #148]	; (8003aec <defaultSettings+0x9c>)
 8003a56:	f7fc fbcd 	bl	80001f4 <strlen>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b07      	cmp	r3, #7
 8003a5e:	d811      	bhi.n	8003a84 <defaultSettings+0x34>
		strcpy(settings.URL, "freeflightwx.com/test/up4.php");
 8003a60:	4a22      	ldr	r2, [pc, #136]	; (8003aec <defaultSettings+0x9c>)
 8003a62:	4b23      	ldr	r3, [pc, #140]	; (8003af0 <defaultSettings+0xa0>)
 8003a64:	4615      	mov	r5, r2
 8003a66:	461c      	mov	r4, r3
 8003a68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a6a:	6028      	str	r0, [r5, #0]
 8003a6c:	6069      	str	r1, [r5, #4]
 8003a6e:	60aa      	str	r2, [r5, #8]
 8003a70:	60eb      	str	r3, [r5, #12]
 8003a72:	cc07      	ldmia	r4!, {r0, r1, r2}
 8003a74:	6128      	str	r0, [r5, #16]
 8003a76:	6169      	str	r1, [r5, #20]
 8003a78:	61aa      	str	r2, [r5, #24]
 8003a7a:	8823      	ldrh	r3, [r4, #0]
 8003a7c:	83ab      	strh	r3, [r5, #28]
		setSaveFlag(1);
 8003a7e:	2001      	movs	r0, #1
 8003a80:	f000 f88a 	bl	8003b98 <setSaveFlag>
		//setUpdateStationListFlag(1);

	}

	if(!settings.SID){
 8003a84:	4b1b      	ldr	r3, [pc, #108]	; (8003af4 <defaultSettings+0xa4>)
 8003a86:	8a9b      	ldrh	r3, [r3, #20]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d106      	bne.n	8003a9a <defaultSettings+0x4a>
		settings.SID = 1234;
 8003a8c:	4b19      	ldr	r3, [pc, #100]	; (8003af4 <defaultSettings+0xa4>)
 8003a8e:	f240 42d2 	movw	r2, #1234	; 0x4d2
 8003a92:	829a      	strh	r2, [r3, #20]
		setSaveFlag(1);
 8003a94:	2001      	movs	r0, #1
 8003a96:	f000 f87f 	bl	8003b98 <setSaveFlag>
		//setUpdateStationListFlag(1);

	}

	if(!settings.BCL){
 8003a9a:	4b16      	ldr	r3, [pc, #88]	; (8003af4 <defaultSettings+0xa4>)
 8003a9c:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8003aa0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aa8:	d106      	bne.n	8003ab8 <defaultSettings+0x68>
		settings.BCL = 0.0039487; //Volts in = ADCValue * BCL Multiplier ::: BCL Multiplier Default = 3.3V full value/4095 ADC full value * (39ohm + 10ohm ) / 10ohm
 8003aaa:	4b12      	ldr	r3, [pc, #72]	; (8003af4 <defaultSettings+0xa4>)
 8003aac:	4a12      	ldr	r2, [pc, #72]	; (8003af8 <defaultSettings+0xa8>)
 8003aae:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		setSaveFlag(1);
 8003ab2:	2001      	movs	r0, #1
 8003ab4:	f000 f870 	bl	8003b98 <setSaveFlag>
		//setUpdateStationListFlag(1);

	}

	if(!settings.RSH){
 8003ab8:	4b0e      	ldr	r3, [pc, #56]	; (8003af4 <defaultSettings+0xa4>)
 8003aba:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d106      	bne.n	8003ad0 <defaultSettings+0x80>
		settings.RSH = 9;
 8003ac2:	4b0c      	ldr	r3, [pc, #48]	; (8003af4 <defaultSettings+0xa4>)
 8003ac4:	2209      	movs	r2, #9
 8003ac6:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
		setSaveFlag(1);
 8003aca:	2001      	movs	r0, #1
 8003acc:	f000 f864 	bl	8003b98 <setSaveFlag>
		//setUpdateStationListFlag(1);

	}

	if(!settings.AVN){
 8003ad0:	4b08      	ldr	r3, [pc, #32]	; (8003af4 <defaultSettings+0xa4>)
 8003ad2:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d106      	bne.n	8003ae8 <defaultSettings+0x98>
		settings.AVN = 5;
 8003ada:	4b06      	ldr	r3, [pc, #24]	; (8003af4 <defaultSettings+0xa4>)
 8003adc:	2205      	movs	r2, #5
 8003ade:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
		setSaveFlag(1);
 8003ae2:	2001      	movs	r0, #1
 8003ae4:	f000 f858 	bl	8003b98 <setSaveFlag>
		//setUpdateStationListFlag(1);

	}

}
 8003ae8:	bf00      	nop
 8003aea:	bdb0      	pop	{r4, r5, r7, pc}
 8003aec:	20004cb2 	.word	0x20004cb2
 8003af0:	080182ac 	.word	0x080182ac
 8003af4:	20004c9c 	.word	0x20004c9c
 8003af8:	3b816419 	.word	0x3b816419

08003afc <openSettingsFromSD>:

void openSettingsFromSD(void){
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0


	Uart_SendString("Opening Settings\r\n", pc_uart);
 8003b02:	491e      	ldr	r1, [pc, #120]	; (8003b7c <openSettingsFromSD+0x80>)
 8003b04:	481e      	ldr	r0, [pc, #120]	; (8003b80 <openSettingsFromSD+0x84>)
 8003b06:	f7fd ff45 	bl	8001994 <Uart_SendString>

	fresult1 = File_O_Open(settingsFile);
 8003b0a:	4b1e      	ldr	r3, [pc, #120]	; (8003b84 <openSettingsFromSD+0x88>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7fd fcf6 	bl	8001500 <File_O_Open>
 8003b14:	4603      	mov	r3, r0
 8003b16:	461a      	mov	r2, r3
 8003b18:	4b1b      	ldr	r3, [pc, #108]	; (8003b88 <openSettingsFromSD+0x8c>)
 8003b1a:	701a      	strb	r2, [r3, #0]
	if (fresult1 != FR_OK){
 8003b1c:	4b1a      	ldr	r3, [pc, #104]	; (8003b88 <openSettingsFromSD+0x8c>)
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00a      	beq.n	8003b3a <openSettingsFromSD+0x3e>
		sdState = SDSTATE_ERR;
 8003b24:	4b19      	ldr	r3, [pc, #100]	; (8003b8c <openSettingsFromSD+0x90>)
 8003b26:	2202      	movs	r2, #2
 8003b28:	701a      	strb	r2, [r3, #0]
		defaultSettings();
 8003b2a:	f7ff ff91 	bl	8003a50 <defaultSettings>
		return;
 8003b2e:	e022      	b.n	8003b76 <openSettingsFromSD+0x7a>


	TCHAR * result;

	while((result = File_O_Read_Line(buffer2))){
		settingsLineProcessor(buffer2, 0, 0);
 8003b30:	2200      	movs	r2, #0
 8003b32:	2100      	movs	r1, #0
 8003b34:	4816      	ldr	r0, [pc, #88]	; (8003b90 <openSettingsFromSD+0x94>)
 8003b36:	f000 f97d 	bl	8003e34 <settingsLineProcessor>
	while((result = File_O_Read_Line(buffer2))){
 8003b3a:	4815      	ldr	r0, [pc, #84]	; (8003b90 <openSettingsFromSD+0x94>)
 8003b3c:	f7fd fd98 	bl	8001670 <File_O_Read_Line>
 8003b40:	6078      	str	r0, [r7, #4]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1f3      	bne.n	8003b30 <openSettingsFromSD+0x34>
	}
	fresult1 = File_O_Close();
 8003b48:	f7fd fd1e 	bl	8001588 <File_O_Close>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	461a      	mov	r2, r3
 8003b50:	4b0d      	ldr	r3, [pc, #52]	; (8003b88 <openSettingsFromSD+0x8c>)
 8003b52:	701a      	strb	r2, [r3, #0]
	if (fresult1 != FR_OK){
 8003b54:	4b0c      	ldr	r3, [pc, #48]	; (8003b88 <openSettingsFromSD+0x8c>)
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d005      	beq.n	8003b68 <openSettingsFromSD+0x6c>
		sdState = SDSTATE_ERR;
 8003b5c:	4b0b      	ldr	r3, [pc, #44]	; (8003b8c <openSettingsFromSD+0x90>)
 8003b5e:	2202      	movs	r2, #2
 8003b60:	701a      	strb	r2, [r3, #0]
		defaultSettings();
 8003b62:	f7ff ff75 	bl	8003a50 <defaultSettings>
		return;
 8003b66:	e006      	b.n	8003b76 <openSettingsFromSD+0x7a>

	}

//	printSettings();

	defaultSettings();
 8003b68:	f7ff ff72 	bl	8003a50 <defaultSettings>

	printSettings();
 8003b6c:	f000 f8c4 	bl	8003cf8 <printSettings>
	settingsValid = 1;//prevents calling for settings from the station server.
 8003b70:	4b08      	ldr	r3, [pc, #32]	; (8003b94 <openSettingsFromSD+0x98>)
 8003b72:	2201      	movs	r2, #1
 8003b74:	701a      	strb	r2, [r3, #0]

}
 8003b76:	3708      	adds	r7, #8
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	20003fd8 	.word	0x20003fd8
 8003b80:	080182cc 	.word	0x080182cc
 8003b84:	2000000c 	.word	0x2000000c
 8003b88:	20004d5c 	.word	0x20004d5c
 8003b8c:	20005320 	.word	0x20005320
 8003b90:	20004d60 	.word	0x20004d60
 8003b94:	20005321 	.word	0x20005321

08003b98 <setSaveFlag>:

void setSaveFlag(uint8_t flag){
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	71fb      	strb	r3, [r7, #7]
	saveFlag = flag;
 8003ba2:	4a04      	ldr	r2, [pc, #16]	; (8003bb4 <setSaveFlag+0x1c>)
 8003ba4:	79fb      	ldrb	r3, [r7, #7]
 8003ba6:	7013      	strb	r3, [r2, #0]

}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr
 8003bb4:	2000531e 	.word	0x2000531e

08003bb8 <saveSettingsToSD>:
	return sdState;
}



void saveSettingsToSD(void){
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	af00      	add	r7, sp, #0

	if(saveFlag){
 8003bbc:	4b3d      	ldr	r3, [pc, #244]	; (8003cb4 <saveSettingsToSD+0xfc>)
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d074      	beq.n	8003cae <saveSettingsToSD+0xf6>


		if(sdState == SDSTATE_OK){
 8003bc4:	4b3c      	ldr	r3, [pc, #240]	; (8003cb8 <saveSettingsToSD+0x100>)
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d16d      	bne.n	8003ca8 <saveSettingsToSD+0xf0>

			Uart_SendString("Saving Settings to SD Card\r\n", pc_uart);
 8003bcc:	493b      	ldr	r1, [pc, #236]	; (8003cbc <saveSettingsToSD+0x104>)
 8003bce:	483c      	ldr	r0, [pc, #240]	; (8003cc0 <saveSettingsToSD+0x108>)
 8003bd0:	f7fd fee0 	bl	8001994 <Uart_SendString>


			fresult1 = File_O_Open(settingsFile);
 8003bd4:	4b3b      	ldr	r3, [pc, #236]	; (8003cc4 <saveSettingsToSD+0x10c>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7fd fc91 	bl	8001500 <File_O_Open>
 8003bde:	4603      	mov	r3, r0
 8003be0:	461a      	mov	r2, r3
 8003be2:	4b39      	ldr	r3, [pc, #228]	; (8003cc8 <saveSettingsToSD+0x110>)
 8003be4:	701a      	strb	r2, [r3, #0]

			if (fresult1 != FR_OK){
 8003be6:	4b38      	ldr	r3, [pc, #224]	; (8003cc8 <saveSettingsToSD+0x110>)
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d002      	beq.n	8003bf4 <saveSettingsToSD+0x3c>
				sdState = SDSTATE_ERR;
 8003bee:	4b32      	ldr	r3, [pc, #200]	; (8003cb8 <saveSettingsToSD+0x100>)
 8003bf0:	2202      	movs	r2, #2
 8003bf2:	701a      	strb	r2, [r3, #0]
			}

			File_O_Print("#FreeFlightWx Settings\r\n");
 8003bf4:	4835      	ldr	r0, [pc, #212]	; (8003ccc <saveSettingsToSD+0x114>)
 8003bf6:	f7fd fd05 	bl	8001604 <File_O_Print>
			sprintf(buffer2, "MEI=%s\r\n", settings.MEI);
 8003bfa:	4a35      	ldr	r2, [pc, #212]	; (8003cd0 <saveSettingsToSD+0x118>)
 8003bfc:	4935      	ldr	r1, [pc, #212]	; (8003cd4 <saveSettingsToSD+0x11c>)
 8003bfe:	4836      	ldr	r0, [pc, #216]	; (8003cd8 <saveSettingsToSD+0x120>)
 8003c00:	f00d ffe4 	bl	8011bcc <siprintf>
			File_O_Print(buffer2);
 8003c04:	4834      	ldr	r0, [pc, #208]	; (8003cd8 <saveSettingsToSD+0x120>)
 8003c06:	f7fd fcfd 	bl	8001604 <File_O_Print>
			sprintf(buffer2, "SID=%i\r\n", settings.SID);
 8003c0a:	4b31      	ldr	r3, [pc, #196]	; (8003cd0 <saveSettingsToSD+0x118>)
 8003c0c:	8a9b      	ldrh	r3, [r3, #20]
 8003c0e:	461a      	mov	r2, r3
 8003c10:	4932      	ldr	r1, [pc, #200]	; (8003cdc <saveSettingsToSD+0x124>)
 8003c12:	4831      	ldr	r0, [pc, #196]	; (8003cd8 <saveSettingsToSD+0x120>)
 8003c14:	f00d ffda 	bl	8011bcc <siprintf>
			File_O_Print(buffer2);
 8003c18:	482f      	ldr	r0, [pc, #188]	; (8003cd8 <saveSettingsToSD+0x120>)
 8003c1a:	f7fd fcf3 	bl	8001604 <File_O_Print>
			sprintf(buffer2, "URL=%s\r\n", settings.URL);
 8003c1e:	4a30      	ldr	r2, [pc, #192]	; (8003ce0 <saveSettingsToSD+0x128>)
 8003c20:	4930      	ldr	r1, [pc, #192]	; (8003ce4 <saveSettingsToSD+0x12c>)
 8003c22:	482d      	ldr	r0, [pc, #180]	; (8003cd8 <saveSettingsToSD+0x120>)
 8003c24:	f00d ffd2 	bl	8011bcc <siprintf>
			File_O_Print(buffer2);
 8003c28:	482b      	ldr	r0, [pc, #172]	; (8003cd8 <saveSettingsToSD+0x120>)
 8003c2a:	f7fd fceb 	bl	8001604 <File_O_Print>
			sprintf(buffer2, "LOG=%i\r\n", settings.LOG);
 8003c2e:	4b28      	ldr	r3, [pc, #160]	; (8003cd0 <saveSettingsToSD+0x118>)
 8003c30:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 8003c34:	461a      	mov	r2, r3
 8003c36:	492c      	ldr	r1, [pc, #176]	; (8003ce8 <saveSettingsToSD+0x130>)
 8003c38:	4827      	ldr	r0, [pc, #156]	; (8003cd8 <saveSettingsToSD+0x120>)
 8003c3a:	f00d ffc7 	bl	8011bcc <siprintf>
			File_O_Print(buffer2);
 8003c3e:	4826      	ldr	r0, [pc, #152]	; (8003cd8 <saveSettingsToSD+0x120>)
 8003c40:	f7fd fce0 	bl	8001604 <File_O_Print>
			sprintf(buffer2, "BCL=%.7f\r\n", settings.BCL);
 8003c44:	4b22      	ldr	r3, [pc, #136]	; (8003cd0 <saveSettingsToSD+0x118>)
 8003c46:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7fc fc94 	bl	8000578 <__aeabi_f2d>
 8003c50:	4602      	mov	r2, r0
 8003c52:	460b      	mov	r3, r1
 8003c54:	4925      	ldr	r1, [pc, #148]	; (8003cec <saveSettingsToSD+0x134>)
 8003c56:	4820      	ldr	r0, [pc, #128]	; (8003cd8 <saveSettingsToSD+0x120>)
 8003c58:	f00d ffb8 	bl	8011bcc <siprintf>
			File_O_Print(buffer2);
 8003c5c:	481e      	ldr	r0, [pc, #120]	; (8003cd8 <saveSettingsToSD+0x120>)
 8003c5e:	f7fd fcd1 	bl	8001604 <File_O_Print>
			sprintf(buffer2, "RSH=%i\r\n", settings.RSH);
 8003c62:	4b1b      	ldr	r3, [pc, #108]	; (8003cd0 <saveSettingsToSD+0x118>)
 8003c64:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8003c68:	461a      	mov	r2, r3
 8003c6a:	4921      	ldr	r1, [pc, #132]	; (8003cf0 <saveSettingsToSD+0x138>)
 8003c6c:	481a      	ldr	r0, [pc, #104]	; (8003cd8 <saveSettingsToSD+0x120>)
 8003c6e:	f00d ffad 	bl	8011bcc <siprintf>
			File_O_Print(buffer2);
 8003c72:	4819      	ldr	r0, [pc, #100]	; (8003cd8 <saveSettingsToSD+0x120>)
 8003c74:	f7fd fcc6 	bl	8001604 <File_O_Print>
			sprintf(buffer2, "AVN=%i\r\n", settings.AVN);
 8003c78:	4b15      	ldr	r3, [pc, #84]	; (8003cd0 <saveSettingsToSD+0x118>)
 8003c7a:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 8003c7e:	461a      	mov	r2, r3
 8003c80:	491c      	ldr	r1, [pc, #112]	; (8003cf4 <saveSettingsToSD+0x13c>)
 8003c82:	4815      	ldr	r0, [pc, #84]	; (8003cd8 <saveSettingsToSD+0x120>)
 8003c84:	f00d ffa2 	bl	8011bcc <siprintf>
			File_O_Print(buffer2);
 8003c88:	4813      	ldr	r0, [pc, #76]	; (8003cd8 <saveSettingsToSD+0x120>)
 8003c8a:	f7fd fcbb 	bl	8001604 <File_O_Print>
			fresult1 = File_O_Close();
 8003c8e:	f7fd fc7b 	bl	8001588 <File_O_Close>
 8003c92:	4603      	mov	r3, r0
 8003c94:	461a      	mov	r2, r3
 8003c96:	4b0c      	ldr	r3, [pc, #48]	; (8003cc8 <saveSettingsToSD+0x110>)
 8003c98:	701a      	strb	r2, [r3, #0]

			if (fresult1 != FR_OK){
 8003c9a:	4b0b      	ldr	r3, [pc, #44]	; (8003cc8 <saveSettingsToSD+0x110>)
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d002      	beq.n	8003ca8 <saveSettingsToSD+0xf0>
				sdState = SDSTATE_ERR;
 8003ca2:	4b05      	ldr	r3, [pc, #20]	; (8003cb8 <saveSettingsToSD+0x100>)
 8003ca4:	2202      	movs	r2, #2
 8003ca6:	701a      	strb	r2, [r3, #0]
			}
		}

		saveFlag = 0;
 8003ca8:	4b02      	ldr	r3, [pc, #8]	; (8003cb4 <saveSettingsToSD+0xfc>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	701a      	strb	r2, [r3, #0]
	}



}
 8003cae:	bf00      	nop
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	2000531e 	.word	0x2000531e
 8003cb8:	20005320 	.word	0x20005320
 8003cbc:	20003fd8 	.word	0x20003fd8
 8003cc0:	080182e0 	.word	0x080182e0
 8003cc4:	2000000c 	.word	0x2000000c
 8003cc8:	20004d5c 	.word	0x20004d5c
 8003ccc:	08018300 	.word	0x08018300
 8003cd0:	20004c9c 	.word	0x20004c9c
 8003cd4:	0801831c 	.word	0x0801831c
 8003cd8:	20004d60 	.word	0x20004d60
 8003cdc:	08018328 	.word	0x08018328
 8003ce0:	20004cb2 	.word	0x20004cb2
 8003ce4:	08018334 	.word	0x08018334
 8003ce8:	08018340 	.word	0x08018340
 8003cec:	0801834c 	.word	0x0801834c
 8003cf0:	08018358 	.word	0x08018358
 8003cf4:	08018364 	.word	0x08018364

08003cf8 <printSettings>:
void printSettings(void){
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	af00      	add	r7, sp, #0

	Uart_SendString("Print Settings ...\r\n", pc_uart);
 8003cfc:	492d      	ldr	r1, [pc, #180]	; (8003db4 <printSettings+0xbc>)
 8003cfe:	482e      	ldr	r0, [pc, #184]	; (8003db8 <printSettings+0xc0>)
 8003d00:	f7fd fe48 	bl	8001994 <Uart_SendString>

	Uart_SendString("#FreeFlightWx Settings\r\n", pc_uart);
 8003d04:	492b      	ldr	r1, [pc, #172]	; (8003db4 <printSettings+0xbc>)
 8003d06:	482d      	ldr	r0, [pc, #180]	; (8003dbc <printSettings+0xc4>)
 8003d08:	f7fd fe44 	bl	8001994 <Uart_SendString>
	sprintf(buffer2, "MEI=%s\r\n", settings.MEI);
 8003d0c:	4a2c      	ldr	r2, [pc, #176]	; (8003dc0 <printSettings+0xc8>)
 8003d0e:	492d      	ldr	r1, [pc, #180]	; (8003dc4 <printSettings+0xcc>)
 8003d10:	482d      	ldr	r0, [pc, #180]	; (8003dc8 <printSettings+0xd0>)
 8003d12:	f00d ff5b 	bl	8011bcc <siprintf>
	Uart_SendString(buffer2, pc_uart);
 8003d16:	4927      	ldr	r1, [pc, #156]	; (8003db4 <printSettings+0xbc>)
 8003d18:	482b      	ldr	r0, [pc, #172]	; (8003dc8 <printSettings+0xd0>)
 8003d1a:	f7fd fe3b 	bl	8001994 <Uart_SendString>
	sprintf(buffer2, "SID=%i\r\n", settings.SID);
 8003d1e:	4b28      	ldr	r3, [pc, #160]	; (8003dc0 <printSettings+0xc8>)
 8003d20:	8a9b      	ldrh	r3, [r3, #20]
 8003d22:	461a      	mov	r2, r3
 8003d24:	4929      	ldr	r1, [pc, #164]	; (8003dcc <printSettings+0xd4>)
 8003d26:	4828      	ldr	r0, [pc, #160]	; (8003dc8 <printSettings+0xd0>)
 8003d28:	f00d ff50 	bl	8011bcc <siprintf>
	Uart_SendString(buffer2, pc_uart);
 8003d2c:	4921      	ldr	r1, [pc, #132]	; (8003db4 <printSettings+0xbc>)
 8003d2e:	4826      	ldr	r0, [pc, #152]	; (8003dc8 <printSettings+0xd0>)
 8003d30:	f7fd fe30 	bl	8001994 <Uart_SendString>
	sprintf(buffer2, "URL=%s\r\n", settings.URL);
 8003d34:	4a26      	ldr	r2, [pc, #152]	; (8003dd0 <printSettings+0xd8>)
 8003d36:	4927      	ldr	r1, [pc, #156]	; (8003dd4 <printSettings+0xdc>)
 8003d38:	4823      	ldr	r0, [pc, #140]	; (8003dc8 <printSettings+0xd0>)
 8003d3a:	f00d ff47 	bl	8011bcc <siprintf>
	Uart_SendString(buffer2, pc_uart);
 8003d3e:	491d      	ldr	r1, [pc, #116]	; (8003db4 <printSettings+0xbc>)
 8003d40:	4821      	ldr	r0, [pc, #132]	; (8003dc8 <printSettings+0xd0>)
 8003d42:	f7fd fe27 	bl	8001994 <Uart_SendString>
	sprintf(buffer2, "LOG=%i\r\n", settings.LOG);
 8003d46:	4b1e      	ldr	r3, [pc, #120]	; (8003dc0 <printSettings+0xc8>)
 8003d48:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	4922      	ldr	r1, [pc, #136]	; (8003dd8 <printSettings+0xe0>)
 8003d50:	481d      	ldr	r0, [pc, #116]	; (8003dc8 <printSettings+0xd0>)
 8003d52:	f00d ff3b 	bl	8011bcc <siprintf>
	Uart_SendString(buffer2, pc_uart);
 8003d56:	4917      	ldr	r1, [pc, #92]	; (8003db4 <printSettings+0xbc>)
 8003d58:	481b      	ldr	r0, [pc, #108]	; (8003dc8 <printSettings+0xd0>)
 8003d5a:	f7fd fe1b 	bl	8001994 <Uart_SendString>
	sprintf(buffer2, "BCL=%.7f\r\n", settings.BCL);
 8003d5e:	4b18      	ldr	r3, [pc, #96]	; (8003dc0 <printSettings+0xc8>)
 8003d60:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7fc fc07 	bl	8000578 <__aeabi_f2d>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	491b      	ldr	r1, [pc, #108]	; (8003ddc <printSettings+0xe4>)
 8003d70:	4815      	ldr	r0, [pc, #84]	; (8003dc8 <printSettings+0xd0>)
 8003d72:	f00d ff2b 	bl	8011bcc <siprintf>
	Uart_SendString(buffer2, pc_uart);
 8003d76:	490f      	ldr	r1, [pc, #60]	; (8003db4 <printSettings+0xbc>)
 8003d78:	4813      	ldr	r0, [pc, #76]	; (8003dc8 <printSettings+0xd0>)
 8003d7a:	f7fd fe0b 	bl	8001994 <Uart_SendString>
	sprintf(buffer2, "RSH=%i\r\n", settings.RSH);
 8003d7e:	4b10      	ldr	r3, [pc, #64]	; (8003dc0 <printSettings+0xc8>)
 8003d80:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8003d84:	461a      	mov	r2, r3
 8003d86:	4916      	ldr	r1, [pc, #88]	; (8003de0 <printSettings+0xe8>)
 8003d88:	480f      	ldr	r0, [pc, #60]	; (8003dc8 <printSettings+0xd0>)
 8003d8a:	f00d ff1f 	bl	8011bcc <siprintf>
	Uart_SendString(buffer2, pc_uart);
 8003d8e:	4909      	ldr	r1, [pc, #36]	; (8003db4 <printSettings+0xbc>)
 8003d90:	480d      	ldr	r0, [pc, #52]	; (8003dc8 <printSettings+0xd0>)
 8003d92:	f7fd fdff 	bl	8001994 <Uart_SendString>
	sprintf(buffer2, "AVN=%i\r\n", settings.AVN);
 8003d96:	4b0a      	ldr	r3, [pc, #40]	; (8003dc0 <printSettings+0xc8>)
 8003d98:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	4911      	ldr	r1, [pc, #68]	; (8003de4 <printSettings+0xec>)
 8003da0:	4809      	ldr	r0, [pc, #36]	; (8003dc8 <printSettings+0xd0>)
 8003da2:	f00d ff13 	bl	8011bcc <siprintf>
	Uart_SendString(buffer2, pc_uart);
 8003da6:	4903      	ldr	r1, [pc, #12]	; (8003db4 <printSettings+0xbc>)
 8003da8:	4807      	ldr	r0, [pc, #28]	; (8003dc8 <printSettings+0xd0>)
 8003daa:	f7fd fdf3 	bl	8001994 <Uart_SendString>


}
 8003dae:	bf00      	nop
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	20003fd8 	.word	0x20003fd8
 8003db8:	08018370 	.word	0x08018370
 8003dbc:	08018300 	.word	0x08018300
 8003dc0:	20004c9c 	.word	0x20004c9c
 8003dc4:	0801831c 	.word	0x0801831c
 8003dc8:	20004d60 	.word	0x20004d60
 8003dcc:	08018328 	.word	0x08018328
 8003dd0:	20004cb2 	.word	0x20004cb2
 8003dd4:	08018334 	.word	0x08018334
 8003dd8:	08018340 	.word	0x08018340
 8003ddc:	0801834c 	.word	0x0801834c
 8003de0:	08018358 	.word	0x08018358
 8003de4:	08018364 	.word	0x08018364

08003de8 <getSettings>:


SETTINGS * getSettings(void){
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0
	return &settings;
 8003dec:	4b02      	ldr	r3, [pc, #8]	; (8003df8 <getSettings+0x10>)
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr
 8003df8:	20004c9c 	.word	0x20004c9c

08003dfc <getUpdateStationListFlag>:

uint8_t getUpdateStationListFlag(void){
 8003dfc:	b480      	push	{r7}
 8003dfe:	af00      	add	r7, sp, #0
	return updateStationListFlag;
 8003e00:	4b03      	ldr	r3, [pc, #12]	; (8003e10 <getUpdateStationListFlag+0x14>)
 8003e02:	781b      	ldrb	r3, [r3, #0]
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	2000531f 	.word	0x2000531f

08003e14 <setUpdateStationListFlag>:

void setUpdateStationListFlag(uint8_t flag){
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	71fb      	strb	r3, [r7, #7]
	updateStationListFlag = flag;
 8003e1e:	4a04      	ldr	r2, [pc, #16]	; (8003e30 <setUpdateStationListFlag+0x1c>)
 8003e20:	79fb      	ldrb	r3, [r7, #7]
 8003e22:	7013      	strb	r3, [r2, #0]
//	scheduleSendParamsToUp();
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr
 8003e30:	2000531f 	.word	0x2000531f

08003e34 <settingsLineProcessor>:


void settingsLineProcessor(char * line, uint8_t saveSD, uint8_t saveServer){
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	70fb      	strb	r3, [r7, #3]
 8003e40:	4613      	mov	r3, r2
 8003e42:	70bb      	strb	r3, [r7, #2]

//	Uart_sendstring("X\r\n", pc_uart);
//	Uart_SendString(line, pc_uart);

    if(line[0] == '#') {
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	2b23      	cmp	r3, #35	; 0x23
 8003e4a:	f000 8139 	beq.w	80040c0 <settingsLineProcessor+0x28c>
    	return;
    }

    else if(!strncmp(line, "URL=", 4)){
 8003e4e:	2204      	movs	r2, #4
 8003e50:	499e      	ldr	r1, [pc, #632]	; (80040cc <settingsLineProcessor+0x298>)
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f00d feda 	bl	8011c0c <strncmp>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d130      	bne.n	8003ec0 <settingsLineProcessor+0x8c>
//    	Uart_sendstring("TEST", pc_uart);
    	uint8_t i = 4;
 8003e5e:	2304      	movs	r3, #4
 8003e60:	73fb      	strb	r3, [r7, #15]

    	//do a special copy
    	while (line[i] && line[i] != '\r' && line[i] != '\n'){
 8003e62:	e00c      	b.n	8003e7e <settingsLineProcessor+0x4a>
    		settings.URL[i-4] = line[i];
 8003e64:	7bfb      	ldrb	r3, [r7, #15]
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	441a      	add	r2, r3
 8003e6a:	7bfb      	ldrb	r3, [r7, #15]
 8003e6c:	3b04      	subs	r3, #4
 8003e6e:	7811      	ldrb	r1, [r2, #0]
 8003e70:	4a97      	ldr	r2, [pc, #604]	; (80040d0 <settingsLineProcessor+0x29c>)
 8003e72:	4413      	add	r3, r2
 8003e74:	460a      	mov	r2, r1
 8003e76:	759a      	strb	r2, [r3, #22]
    		i++;
 8003e78:	7bfb      	ldrb	r3, [r7, #15]
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	73fb      	strb	r3, [r7, #15]
    	while (line[i] && line[i] != '\r' && line[i] != '\n'){
 8003e7e:	7bfb      	ldrb	r3, [r7, #15]
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	4413      	add	r3, r2
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00b      	beq.n	8003ea2 <settingsLineProcessor+0x6e>
 8003e8a:	7bfb      	ldrb	r3, [r7, #15]
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	4413      	add	r3, r2
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	2b0d      	cmp	r3, #13
 8003e94:	d005      	beq.n	8003ea2 <settingsLineProcessor+0x6e>
 8003e96:	7bfb      	ldrb	r3, [r7, #15]
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	2b0a      	cmp	r3, #10
 8003ea0:	d1e0      	bne.n	8003e64 <settingsLineProcessor+0x30>
    	}
    	settings.URL[i-4] = 0;//add a null character
 8003ea2:	7bfb      	ldrb	r3, [r7, #15]
 8003ea4:	3b04      	subs	r3, #4
 8003ea6:	4a8a      	ldr	r2, [pc, #552]	; (80040d0 <settingsLineProcessor+0x29c>)
 8003ea8:	4413      	add	r3, r2
 8003eaa:	2200      	movs	r2, #0
 8003eac:	759a      	strb	r2, [r3, #22]

    	setSaveFlag(saveSD);
 8003eae:	78fb      	ldrb	r3, [r7, #3]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7ff fe71 	bl	8003b98 <setSaveFlag>
    	setUpdateStationListFlag(saveServer);
 8003eb6:	78bb      	ldrb	r3, [r7, #2]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7ff ffab 	bl	8003e14 <setUpdateStationListFlag>

   	}



    return;
 8003ebe:	e101      	b.n	80040c4 <settingsLineProcessor+0x290>
    else if(!strncmp(line, "SID=", 4)){
 8003ec0:	2204      	movs	r2, #4
 8003ec2:	4984      	ldr	r1, [pc, #528]	; (80040d4 <settingsLineProcessor+0x2a0>)
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f00d fea1 	bl	8011c0c <strncmp>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d112      	bne.n	8003ef6 <settingsLineProcessor+0xc2>
    	settings.SID=util_atoi_n(line + 4 ,20);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	3304      	adds	r3, #4
 8003ed4:	2114      	movs	r1, #20
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f002 fbb8 	bl	800664c <util_atoi_n>
 8003edc:	4603      	mov	r3, r0
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	4b7b      	ldr	r3, [pc, #492]	; (80040d0 <settingsLineProcessor+0x29c>)
 8003ee2:	829a      	strh	r2, [r3, #20]
    	setSaveFlag(saveSD);
 8003ee4:	78fb      	ldrb	r3, [r7, #3]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7ff fe56 	bl	8003b98 <setSaveFlag>
    	setUpdateStationListFlag(saveServer);
 8003eec:	78bb      	ldrb	r3, [r7, #2]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7ff ff90 	bl	8003e14 <setUpdateStationListFlag>
    return;
 8003ef4:	e0e6      	b.n	80040c4 <settingsLineProcessor+0x290>
    else if(!strncmp(line, "BCL=", 4)){
 8003ef6:	2204      	movs	r2, #4
 8003ef8:	4977      	ldr	r1, [pc, #476]	; (80040d8 <settingsLineProcessor+0x2a4>)
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f00d fe86 	bl	8011c0c <strncmp>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d117      	bne.n	8003f36 <settingsLineProcessor+0x102>
		settings.BCL=(float)(atof(line + 4));
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	3304      	adds	r3, #4
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f00c fd83 	bl	8010a16 <atof>
 8003f10:	ec53 2b10 	vmov	r2, r3, d0
 8003f14:	4610      	mov	r0, r2
 8003f16:	4619      	mov	r1, r3
 8003f18:	f7fc fe7e 	bl	8000c18 <__aeabi_d2f>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	4a6c      	ldr	r2, [pc, #432]	; (80040d0 <settingsLineProcessor+0x29c>)
 8003f20:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
		setSaveFlag(saveSD);
 8003f24:	78fb      	ldrb	r3, [r7, #3]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7ff fe36 	bl	8003b98 <setSaveFlag>
		setUpdateStationListFlag(saveServer);
 8003f2c:	78bb      	ldrb	r3, [r7, #2]
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7ff ff70 	bl	8003e14 <setUpdateStationListFlag>
    return;
 8003f34:	e0c6      	b.n	80040c4 <settingsLineProcessor+0x290>
    else if(!strncmp(line, "LOG=", 4)){
 8003f36:	2204      	movs	r2, #4
 8003f38:	4968      	ldr	r1, [pc, #416]	; (80040dc <settingsLineProcessor+0x2a8>)
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f00d fe66 	bl	8011c0c <strncmp>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d113      	bne.n	8003f6e <settingsLineProcessor+0x13a>
		settings.LOG=util_atoi_n(line + 4 ,20);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	3304      	adds	r3, #4
 8003f4a:	2114      	movs	r1, #20
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f002 fb7d 	bl	800664c <util_atoi_n>
 8003f52:	4603      	mov	r3, r0
 8003f54:	b2da      	uxtb	r2, r3
 8003f56:	4b5e      	ldr	r3, [pc, #376]	; (80040d0 <settingsLineProcessor+0x29c>)
 8003f58:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
		setSaveFlag(saveSD);
 8003f5c:	78fb      	ldrb	r3, [r7, #3]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7ff fe1a 	bl	8003b98 <setSaveFlag>
		setUpdateStationListFlag(saveServer);
 8003f64:	78bb      	ldrb	r3, [r7, #2]
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7ff ff54 	bl	8003e14 <setUpdateStationListFlag>
    return;
 8003f6c:	e0aa      	b.n	80040c4 <settingsLineProcessor+0x290>
    else if(!strncmp(line, "RSH=", 4)){
 8003f6e:	2204      	movs	r2, #4
 8003f70:	495b      	ldr	r1, [pc, #364]	; (80040e0 <settingsLineProcessor+0x2ac>)
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f00d fe4a 	bl	8011c0c <strncmp>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d113      	bne.n	8003fa6 <settingsLineProcessor+0x172>
		settings.RSH=util_atoi_n(line + 4 ,20);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	3304      	adds	r3, #4
 8003f82:	2114      	movs	r1, #20
 8003f84:	4618      	mov	r0, r3
 8003f86:	f002 fb61 	bl	800664c <util_atoi_n>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	b2da      	uxtb	r2, r3
 8003f8e:	4b50      	ldr	r3, [pc, #320]	; (80040d0 <settingsLineProcessor+0x29c>)
 8003f90:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
		setSaveFlag(saveSD);
 8003f94:	78fb      	ldrb	r3, [r7, #3]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7ff fdfe 	bl	8003b98 <setSaveFlag>
		setUpdateStationListFlag(saveServer);
 8003f9c:	78bb      	ldrb	r3, [r7, #2]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7ff ff38 	bl	8003e14 <setUpdateStationListFlag>
    return;
 8003fa4:	e08e      	b.n	80040c4 <settingsLineProcessor+0x290>
    else if(!strncmp(line, "AVN=", 4)){
 8003fa6:	2204      	movs	r2, #4
 8003fa8:	494e      	ldr	r1, [pc, #312]	; (80040e4 <settingsLineProcessor+0x2b0>)
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f00d fe2e 	bl	8011c0c <strncmp>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d113      	bne.n	8003fde <settingsLineProcessor+0x1aa>
		settings.AVN=util_atoi_n(line + 4 ,20);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	3304      	adds	r3, #4
 8003fba:	2114      	movs	r1, #20
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f002 fb45 	bl	800664c <util_atoi_n>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	4b42      	ldr	r3, [pc, #264]	; (80040d0 <settingsLineProcessor+0x29c>)
 8003fc8:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
		setSaveFlag(saveSD);
 8003fcc:	78fb      	ldrb	r3, [r7, #3]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7ff fde2 	bl	8003b98 <setSaveFlag>
		setUpdateStationListFlag(saveServer);
 8003fd4:	78bb      	ldrb	r3, [r7, #2]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7ff ff1c 	bl	8003e14 <setUpdateStationListFlag>
    return;
 8003fdc:	e072      	b.n	80040c4 <settingsLineProcessor+0x290>
    else if(!strncmp(line, "VLD=", 4)){
 8003fde:	2204      	movs	r2, #4
 8003fe0:	4941      	ldr	r1, [pc, #260]	; (80040e8 <settingsLineProcessor+0x2b4>)
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f00d fe12 	bl	8011c0c <strncmp>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d10a      	bne.n	8004004 <settingsLineProcessor+0x1d0>
    	settingsValid=util_atoi_n(line+ 4 ,20);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	3304      	adds	r3, #4
 8003ff2:	2114      	movs	r1, #20
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f002 fb29 	bl	800664c <util_atoi_n>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	b2da      	uxtb	r2, r3
 8003ffe:	4b3b      	ldr	r3, [pc, #236]	; (80040ec <settingsLineProcessor+0x2b8>)
 8004000:	701a      	strb	r2, [r3, #0]
    return;
 8004002:	e05f      	b.n	80040c4 <settingsLineProcessor+0x290>
    else if(!strncmp(line, "CLK=", 4)){
 8004004:	2204      	movs	r2, #4
 8004006:	493a      	ldr	r1, [pc, #232]	; (80040f0 <settingsLineProcessor+0x2bc>)
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f00d fdff 	bl	8011c0c <strncmp>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d106      	bne.n	8004022 <settingsLineProcessor+0x1ee>
		setTime(line + 4, TIMESTATE_OK_SERVER);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	3304      	adds	r3, #4
 8004018:	2102      	movs	r1, #2
 800401a:	4618      	mov	r0, r3
 800401c:	f002 f892 	bl	8006144 <setTime>
    return;
 8004020:	e050      	b.n	80040c4 <settingsLineProcessor+0x290>
    else if(!strncmp(line, "GET", 3 )){
 8004022:	2203      	movs	r2, #3
 8004024:	4933      	ldr	r1, [pc, #204]	; (80040f4 <settingsLineProcessor+0x2c0>)
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f00d fdf0 	bl	8011c0c <strncmp>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d102      	bne.n	8004038 <settingsLineProcessor+0x204>
		printSettings();
 8004032:	f7ff fe61 	bl	8003cf8 <printSettings>
    return;
 8004036:	e045      	b.n	80040c4 <settingsLineProcessor+0x290>
    else if(!strncmp(line, "SAV", 3 )){
 8004038:	2203      	movs	r2, #3
 800403a:	492f      	ldr	r1, [pc, #188]	; (80040f8 <settingsLineProcessor+0x2c4>)
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f00d fde5 	bl	8011c0c <strncmp>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d108      	bne.n	800405a <settingsLineProcessor+0x226>
    	setSaveFlag(saveSD);
 8004048:	78fb      	ldrb	r3, [r7, #3]
 800404a:	4618      	mov	r0, r3
 800404c:	f7ff fda4 	bl	8003b98 <setSaveFlag>
		setUpdateStationListFlag(saveServer);
 8004050:	78bb      	ldrb	r3, [r7, #2]
 8004052:	4618      	mov	r0, r3
 8004054:	f7ff fede 	bl	8003e14 <setUpdateStationListFlag>
    return;
 8004058:	e034      	b.n	80040c4 <settingsLineProcessor+0x290>
    else if(!strncmp(line, "RST", 3 )){
 800405a:	2203      	movs	r2, #3
 800405c:	4927      	ldr	r1, [pc, #156]	; (80040fc <settingsLineProcessor+0x2c8>)
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f00d fdd4 	bl	8011c0c <strncmp>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d104      	bne.n	8004074 <settingsLineProcessor+0x240>
		scheduleShutdown(20000);
 800406a:	f644 6020 	movw	r0, #20000	; 0x4e20
 800406e:	f000 facb 	bl	8004608 <scheduleShutdown>
    return;
 8004072:	e027      	b.n	80040c4 <settingsLineProcessor+0x290>
    else if(!strncmp(line, "HOLD", 4 )){
 8004074:	2204      	movs	r2, #4
 8004076:	4922      	ldr	r1, [pc, #136]	; (8004100 <settingsLineProcessor+0x2cc>)
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f00d fdc7 	bl	8011c0c <strncmp>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d102      	bne.n	800408a <settingsLineProcessor+0x256>
		toggleHold();
 8004084:	f001 fb30 	bl	80056e8 <toggleHold>
    return;
 8004088:	e01c      	b.n	80040c4 <settingsLineProcessor+0x290>
    else if(!strncmp(line, "FMT", 3 )){
 800408a:	2203      	movs	r2, #3
 800408c:	491d      	ldr	r1, [pc, #116]	; (8004104 <settingsLineProcessor+0x2d0>)
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f00d fdbc 	bl	8011c0c <strncmp>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d114      	bne.n	80040c4 <settingsLineProcessor+0x290>
    	Uart_SendString("Formatting SD Card...\r\n", pc_uart);
 800409a:	491b      	ldr	r1, [pc, #108]	; (8004108 <settingsLineProcessor+0x2d4>)
 800409c:	481b      	ldr	r0, [pc, #108]	; (800410c <settingsLineProcessor+0x2d8>)
 800409e:	f7fd fc79 	bl	8001994 <Uart_SendString>
    	Unmount_SD("/");
 80040a2:	481b      	ldr	r0, [pc, #108]	; (8004110 <settingsLineProcessor+0x2dc>)
 80040a4:	f7fd f844 	bl	8001130 <Unmount_SD>
    	Mount_SD("/");
 80040a8:	4819      	ldr	r0, [pc, #100]	; (8004110 <settingsLineProcessor+0x2dc>)
 80040aa:	f7fd f81b 	bl	80010e4 <Mount_SD>
    	Format_SD();
 80040ae:	f7fd f863 	bl	8001178 <Format_SD>
    	Check_SD_Space();
 80040b2:	f7fd f9a9 	bl	8001408 <Check_SD_Space>
    	scheduleShutdown(20000);
 80040b6:	f644 6020 	movw	r0, #20000	; 0x4e20
 80040ba:	f000 faa5 	bl	8004608 <scheduleShutdown>
    return;
 80040be:	e001      	b.n	80040c4 <settingsLineProcessor+0x290>
    	return;
 80040c0:	bf00      	nop
 80040c2:	e000      	b.n	80040c6 <settingsLineProcessor+0x292>
    return;
 80040c4:	bf00      	nop
}
 80040c6:	3710      	adds	r7, #16
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	08018388 	.word	0x08018388
 80040d0:	20004c9c 	.word	0x20004c9c
 80040d4:	08018390 	.word	0x08018390
 80040d8:	08018398 	.word	0x08018398
 80040dc:	080183a0 	.word	0x080183a0
 80040e0:	080183a8 	.word	0x080183a8
 80040e4:	080183b0 	.word	0x080183b0
 80040e8:	080183b8 	.word	0x080183b8
 80040ec:	20005321 	.word	0x20005321
 80040f0:	080183c0 	.word	0x080183c0
 80040f4:	080183c8 	.word	0x080183c8
 80040f8:	080183cc 	.word	0x080183cc
 80040fc:	080183d0 	.word	0x080183d0
 8004100:	080183d4 	.word	0x080183d4
 8004104:	080183dc 	.word	0x080183dc
 8004108:	20003fd8 	.word	0x20003fd8
 800410c:	080183e0 	.word	0x080183e0
 8004110:	080182a8 	.word	0x080182a8

08004114 <pc_uart_processChar>:


void pc_uart_processChar(char c){
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	4603      	mov	r3, r0
 800411c:	71fb      	strb	r3, [r7, #7]
	UART_lineBufferAdd(&uart_lineBuffer, c);
 800411e:	79fb      	ldrb	r3, [r7, #7]
 8004120:	4619      	mov	r1, r3
 8004122:	4804      	ldr	r0, [pc, #16]	; (8004134 <pc_uart_processChar+0x20>)
 8004124:	f000 f808 	bl	8004138 <UART_lineBufferAdd>
	UART_processLines();
 8004128:	f000 f87c 	bl	8004224 <UART_processLines>
}
 800412c:	bf00      	nop
 800412e:	3708      	adds	r7, #8
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	20004e28 	.word	0x20004e28

08004138 <UART_lineBufferAdd>:

void UART_lineBufferAdd(UART_LineBuffer *uLineBuffer, char c){
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	460b      	mov	r3, r1
 8004142:	70fb      	strb	r3, [r7, #3]
	if(!(uLineBuffer->numLines && uLineBuffer->lineWriteIndex == uLineBuffer->lineReadIndex)){//buffer is not full (assuming that there is at least one end line in there)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800414a:	2b00      	cmp	r3, #0
 800414c:	d007      	beq.n	800415e <UART_lineBufferAdd+0x26>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f893 2401 	ldrb.w	r2, [r3, #1025]	; 0x401
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800415a:	429a      	cmp	r2, r3
 800415c:	d016      	beq.n	800418c <UART_lineBufferAdd+0x54>
		uLineBuffer->line[uLineBuffer->lineWriteIndex++] = c;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8004164:	1c5a      	adds	r2, r3, #1
 8004166:	b2d1      	uxtb	r1, r2
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	f882 1401 	strb.w	r1, [r2, #1025]	; 0x401
 800416e:	4619      	mov	r1, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	78fa      	ldrb	r2, [r7, #3]
 8004174:	545a      	strb	r2, [r3, r1]
		if (uLineBuffer->lineWriteIndex == LINE_BUFFER_DIM) {
			uLineBuffer->lineWriteIndex = 0;
		}
		if(c == '\n'){
 8004176:	78fb      	ldrb	r3, [r7, #3]
 8004178:	2b0a      	cmp	r3, #10
 800417a:	d107      	bne.n	800418c <UART_lineBufferAdd+0x54>
			uLineBuffer->numLines++;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8004182:	3301      	adds	r3, #1
 8004184:	b2da      	uxtb	r2, r3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
		}
	}
}
 800418c:	bf00      	nop
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <UART_lineBufferNumLines>:

uint8_t UART_lineBufferNumLines(UART_LineBuffer *uLineBuffer){
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
	return uLineBuffer->numLines;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400

}
 80041a6:	4618      	mov	r0, r3
 80041a8:	370c      	adds	r7, #12
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr

080041b2 <UART_lineBufferGetLine>:

void UART_lineBufferGetLine(UART_LineBuffer *uLineBuffer, char * line){
 80041b2:	b480      	push	{r7}
 80041b4:	b085      	sub	sp, #20
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
 80041ba:	6039      	str	r1, [r7, #0]
	if(uLineBuffer->numLines){
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d028      	beq.n	8004218 <UART_lineBufferGetLine+0x66>

		char c = 0;
 80041c6:	2300      	movs	r3, #0
 80041c8:	73fb      	strb	r3, [r7, #15]
		int i = 0;
 80041ca:	2300      	movs	r3, #0
 80041cc:	60bb      	str	r3, [r7, #8]
		while(c != '\n'){
 80041ce:	e013      	b.n	80041f8 <UART_lineBufferGetLine+0x46>
			c = uLineBuffer->line[uLineBuffer->lineReadIndex++];
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 80041d6:	1c5a      	adds	r2, r3, #1
 80041d8:	b2d1      	uxtb	r1, r2
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	f882 1402 	strb.w	r1, [r2, #1026]	; 0x402
 80041e0:	461a      	mov	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	5c9b      	ldrb	r3, [r3, r2]
 80041e6:	73fb      	strb	r3, [r7, #15]
			line[i] = c;
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	683a      	ldr	r2, [r7, #0]
 80041ec:	4413      	add	r3, r2
 80041ee:	7bfa      	ldrb	r2, [r7, #15]
 80041f0:	701a      	strb	r2, [r3, #0]
			i++;
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	3301      	adds	r3, #1
 80041f6:	60bb      	str	r3, [r7, #8]
		while(c != '\n'){
 80041f8:	7bfb      	ldrb	r3, [r7, #15]
 80041fa:	2b0a      	cmp	r3, #10
 80041fc:	d1e8      	bne.n	80041d0 <UART_lineBufferGetLine+0x1e>
			if (uLineBuffer->lineReadIndex == LINE_BUFFER_DIM) {
				uLineBuffer->lineReadIndex = 0;
			}
		}

		uLineBuffer->numLines--;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8004204:	3b01      	subs	r3, #1
 8004206:	b2da      	uxtb	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
		line[i] = 0;//add eol char
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	683a      	ldr	r2, [r7, #0]
 8004212:	4413      	add	r3, r2
 8004214:	2200      	movs	r2, #0
 8004216:	701a      	strb	r2, [r3, #0]
	}
}
 8004218:	bf00      	nop
 800421a:	3714      	adds	r7, #20
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <UART_processLines>:



void UART_processLines(void)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	af00      	add	r7, sp, #0


    if(UART_lineBufferNumLines(&uart_lineBuffer)){//we have a line ready to read
 8004228:	4809      	ldr	r0, [pc, #36]	; (8004250 <UART_processLines+0x2c>)
 800422a:	f7ff ffb5 	bl	8004198 <UART_lineBufferNumLines>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00a      	beq.n	800424a <UART_processLines+0x26>


    	UART_lineBufferGetLine(&uart_lineBuffer, line1);
 8004234:	4907      	ldr	r1, [pc, #28]	; (8004254 <UART_processLines+0x30>)
 8004236:	4806      	ldr	r0, [pc, #24]	; (8004250 <UART_processLines+0x2c>)
 8004238:	f7ff ffbb 	bl	80041b2 <UART_lineBufferGetLine>

       if(line1[0] == '$') {
 800423c:	4b05      	ldr	r3, [pc, #20]	; (8004254 <UART_processLines+0x30>)
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	2b24      	cmp	r3, #36	; 0x24
 8004242:	d102      	bne.n	800424a <UART_processLines+0x26>
    	   NMEAProcessor(line1);
 8004244:	4803      	ldr	r0, [pc, #12]	; (8004254 <UART_processLines+0x30>)
 8004246:	f001 f98d 	bl	8005564 <NMEAProcessor>
       }



    }
}
 800424a:	bf00      	nop
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	20004e28 	.word	0x20004e28
 8004254:	2000522c 	.word	0x2000522c

08004258 <Log>:

void Log(char * line, uint8_t logType){
 8004258:	b480      	push	{r7}
 800425a:	b085      	sub	sp, #20
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	460b      	mov	r3, r1
 8004262:	70fb      	strb	r3, [r7, #3]
//	unsigned int t1,t2;

	uint16_t lineIndex = 0;
 8004264:	2300      	movs	r3, #0
 8004266:	81fb      	strh	r3, [r7, #14]


	if(logType <= settings.LOG){
 8004268:	4b29      	ldr	r3, [pc, #164]	; (8004310 <Log+0xb8>)
 800426a:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 800426e:	78fa      	ldrb	r2, [r7, #3]
 8004270:	429a      	cmp	r2, r3
 8004272:	d846      	bhi.n	8004302 <Log+0xaa>
		while(line[lineIndex]){
 8004274:	e03f      	b.n	80042f6 <Log+0x9e>
			if(currentLogBuffer){//addtobufferB
 8004276:	4b27      	ldr	r3, [pc, #156]	; (8004314 <Log+0xbc>)
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d01c      	beq.n	80042b8 <Log+0x60>
				logBufferB[logBufferB_position] = line[lineIndex];
 800427e:	89fb      	ldrh	r3, [r7, #14]
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	4413      	add	r3, r2
 8004284:	4a24      	ldr	r2, [pc, #144]	; (8004318 <Log+0xc0>)
 8004286:	8812      	ldrh	r2, [r2, #0]
 8004288:	7819      	ldrb	r1, [r3, #0]
 800428a:	4b24      	ldr	r3, [pc, #144]	; (800431c <Log+0xc4>)
 800428c:	5499      	strb	r1, [r3, r2]
				logBufferB_position++;
 800428e:	4b22      	ldr	r3, [pc, #136]	; (8004318 <Log+0xc0>)
 8004290:	881b      	ldrh	r3, [r3, #0]
 8004292:	3301      	adds	r3, #1
 8004294:	b29a      	uxth	r2, r3
 8004296:	4b20      	ldr	r3, [pc, #128]	; (8004318 <Log+0xc0>)
 8004298:	801a      	strh	r2, [r3, #0]
				if(logBufferB_position == LOG_BUFFER_SIZE){
 800429a:	4b1f      	ldr	r3, [pc, #124]	; (8004318 <Log+0xc0>)
 800429c:	881b      	ldrh	r3, [r3, #0]
 800429e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042a2:	d125      	bne.n	80042f0 <Log+0x98>
					currentLogBuffer = 0;//switch to A for the next char
 80042a4:	4b1b      	ldr	r3, [pc, #108]	; (8004314 <Log+0xbc>)
 80042a6:	2200      	movs	r2, #0
 80042a8:	701a      	strb	r2, [r3, #0]
					logBufferReady = 1;//ready to empty the not current one;
 80042aa:	4b1d      	ldr	r3, [pc, #116]	; (8004320 <Log+0xc8>)
 80042ac:	2201      	movs	r2, #1
 80042ae:	701a      	strb	r2, [r3, #0]
					logBufferB_position = 0; //reset for B for next time
 80042b0:	4b19      	ldr	r3, [pc, #100]	; (8004318 <Log+0xc0>)
 80042b2:	2200      	movs	r2, #0
 80042b4:	801a      	strh	r2, [r3, #0]
 80042b6:	e01b      	b.n	80042f0 <Log+0x98>
				}

			}
			else{//addtoBufferA
				logBufferA[logBufferA_position] = line[lineIndex];
 80042b8:	89fb      	ldrh	r3, [r7, #14]
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	4413      	add	r3, r2
 80042be:	4a19      	ldr	r2, [pc, #100]	; (8004324 <Log+0xcc>)
 80042c0:	8812      	ldrh	r2, [r2, #0]
 80042c2:	7819      	ldrb	r1, [r3, #0]
 80042c4:	4b18      	ldr	r3, [pc, #96]	; (8004328 <Log+0xd0>)
 80042c6:	5499      	strb	r1, [r3, r2]
				logBufferA_position++;
 80042c8:	4b16      	ldr	r3, [pc, #88]	; (8004324 <Log+0xcc>)
 80042ca:	881b      	ldrh	r3, [r3, #0]
 80042cc:	3301      	adds	r3, #1
 80042ce:	b29a      	uxth	r2, r3
 80042d0:	4b14      	ldr	r3, [pc, #80]	; (8004324 <Log+0xcc>)
 80042d2:	801a      	strh	r2, [r3, #0]
				if(logBufferA_position == LOG_BUFFER_SIZE){
 80042d4:	4b13      	ldr	r3, [pc, #76]	; (8004324 <Log+0xcc>)
 80042d6:	881b      	ldrh	r3, [r3, #0]
 80042d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042dc:	d108      	bne.n	80042f0 <Log+0x98>
					currentLogBuffer = 1;//switch to B for the next char
 80042de:	4b0d      	ldr	r3, [pc, #52]	; (8004314 <Log+0xbc>)
 80042e0:	2201      	movs	r2, #1
 80042e2:	701a      	strb	r2, [r3, #0]
					logBufferReady = 1;//ready to empty the not current one;
 80042e4:	4b0e      	ldr	r3, [pc, #56]	; (8004320 <Log+0xc8>)
 80042e6:	2201      	movs	r2, #1
 80042e8:	701a      	strb	r2, [r3, #0]
					logBufferA_position = 0;//rest for A next time
 80042ea:	4b0e      	ldr	r3, [pc, #56]	; (8004324 <Log+0xcc>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	801a      	strh	r2, [r3, #0]
				}


			}
			lineIndex++;
 80042f0:	89fb      	ldrh	r3, [r7, #14]
 80042f2:	3301      	adds	r3, #1
 80042f4:	81fb      	strh	r3, [r7, #14]
		while(line[lineIndex]){
 80042f6:	89fb      	ldrh	r3, [r7, #14]
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	4413      	add	r3, r2
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1b9      	bne.n	8004276 <Log+0x1e>
	}
	else{
//		Uart_SendString("LOG setting prevents logging\r\n", pc_uart);
	}

}
 8004302:	bf00      	nop
 8004304:	3714      	adds	r7, #20
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	20004c9c 	.word	0x20004c9c
 8004314:	2000732c 	.word	0x2000732c
 8004318:	2000732a 	.word	0x2000732a
 800431c:	20006328 	.word	0x20006328
 8004320:	2000732d 	.word	0x2000732d
 8004324:	20007328 	.word	0x20007328
 8004328:	20005328 	.word	0x20005328

0800432c <checkWriteLogBuffer>:

void checkWriteLogBuffer(void){
 800432c:	b580      	push	{r7, lr}
 800432e:	b086      	sub	sp, #24
 8004330:	af00      	add	r7, sp, #0
	if(logBufferReady){
 8004332:	4b37      	ldr	r3, [pc, #220]	; (8004410 <checkWriteLogBuffer+0xe4>)
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d065      	beq.n	8004406 <checkWriteLogBuffer+0xda>
		if(sdState == SDSTATE_OK){
 800433a:	4b36      	ldr	r3, [pc, #216]	; (8004414 <checkWriteLogBuffer+0xe8>)
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d15a      	bne.n	80043f8 <checkWriteLogBuffer+0xcc>


//			timer5_ms_restart();


			getDateCharFileName(logfile);
 8004342:	4835      	ldr	r0, [pc, #212]	; (8004418 <checkWriteLogBuffer+0xec>)
 8004344:	f002 f906 	bl	8006554 <getDateCharFileName>
			getYearCharDirName(logdir);
 8004348:	4834      	ldr	r0, [pc, #208]	; (800441c <checkWriteLogBuffer+0xf0>)
 800434a:	f002 f8db 	bl	8006504 <getYearCharDirName>

			/**** check whether the dir exists or not ****/
			FILINFO fno;
			fresult1 = f_stat (logdir, &fno);
 800434e:	463b      	mov	r3, r7
 8004350:	4619      	mov	r1, r3
 8004352:	4832      	ldr	r0, [pc, #200]	; (800441c <checkWriteLogBuffer+0xf0>)
 8004354:	f00c f825 	bl	80103a2 <f_stat>
 8004358:	4603      	mov	r3, r0
 800435a:	461a      	mov	r2, r3
 800435c:	4b30      	ldr	r3, [pc, #192]	; (8004420 <checkWriteLogBuffer+0xf4>)
 800435e:	701a      	strb	r2, [r3, #0]
			if (fresult1 != FR_OK){
 8004360:	4b2f      	ldr	r3, [pc, #188]	; (8004420 <checkWriteLogBuffer+0xf4>)
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00d      	beq.n	8004384 <checkWriteLogBuffer+0x58>
				fresult1 = Create_Dir(logdir);
 8004368:	482c      	ldr	r0, [pc, #176]	; (800441c <checkWriteLogBuffer+0xf0>)
 800436a:	f7fd f80d 	bl	8001388 <Create_Dir>
 800436e:	4603      	mov	r3, r0
 8004370:	461a      	mov	r2, r3
 8004372:	4b2b      	ldr	r3, [pc, #172]	; (8004420 <checkWriteLogBuffer+0xf4>)
 8004374:	701a      	strb	r2, [r3, #0]
				if (fresult1 != FR_OK){
 8004376:	4b2a      	ldr	r3, [pc, #168]	; (8004420 <checkWriteLogBuffer+0xf4>)
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d002      	beq.n	8004384 <checkWriteLogBuffer+0x58>
					sdState = SDSTATE_ERR;
 800437e:	4b25      	ldr	r3, [pc, #148]	; (8004414 <checkWriteLogBuffer+0xe8>)
 8004380:	2202      	movs	r2, #2
 8004382:	701a      	strb	r2, [r3, #0]
				}
			}
	//			t1 = (unsigned int) timer5_ms_get();

			if(currentLogBuffer){//buffering into B, so A must be ready
 8004384:	4b27      	ldr	r3, [pc, #156]	; (8004424 <checkWriteLogBuffer+0xf8>)
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d01a      	beq.n	80043c2 <checkWriteLogBuffer+0x96>
				fresult1 = Update_File (logfile, logBufferA, LOG_BUFFER_SIZE );
 800438c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004390:	4925      	ldr	r1, [pc, #148]	; (8004428 <checkWriteLogBuffer+0xfc>)
 8004392:	4821      	ldr	r0, [pc, #132]	; (8004418 <checkWriteLogBuffer+0xec>)
 8004394:	f7fc ff56 	bl	8001244 <Update_File>
 8004398:	4603      	mov	r3, r0
 800439a:	461a      	mov	r2, r3
 800439c:	4b20      	ldr	r3, [pc, #128]	; (8004420 <checkWriteLogBuffer+0xf4>)
 800439e:	701a      	strb	r2, [r3, #0]
				if (fresult1 == FR_OK){
 80043a0:	4b1f      	ldr	r3, [pc, #124]	; (8004420 <checkWriteLogBuffer+0xf4>)
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d104      	bne.n	80043b2 <checkWriteLogBuffer+0x86>
					Uart_SendString("Wrote Log Buffer A\r\n", pc_uart);
 80043a8:	4920      	ldr	r1, [pc, #128]	; (800442c <checkWriteLogBuffer+0x100>)
 80043aa:	4821      	ldr	r0, [pc, #132]	; (8004430 <checkWriteLogBuffer+0x104>)
 80043ac:	f7fd faf2 	bl	8001994 <Uart_SendString>
 80043b0:	e026      	b.n	8004400 <checkWriteLogBuffer+0xd4>
//					Uart_SendString("###\r\n", pc_uart);
//					Uart_SendString(logBufferA, pc_uart);
//					Uart_SendString("\r\n###\r\n", pc_uart);
				}
				else{
					Uart_SendString("SD Card Write Error A\r\n", pc_uart);
 80043b2:	491e      	ldr	r1, [pc, #120]	; (800442c <checkWriteLogBuffer+0x100>)
 80043b4:	481f      	ldr	r0, [pc, #124]	; (8004434 <checkWriteLogBuffer+0x108>)
 80043b6:	f7fd faed 	bl	8001994 <Uart_SendString>

					sdState = SDSTATE_ERR;
 80043ba:	4b16      	ldr	r3, [pc, #88]	; (8004414 <checkWriteLogBuffer+0xe8>)
 80043bc:	2202      	movs	r2, #2
 80043be:	701a      	strb	r2, [r3, #0]
 80043c0:	e01e      	b.n	8004400 <checkWriteLogBuffer+0xd4>
				}


			}
			else{
				fresult1 = Update_File (logfile, logBufferB, LOG_BUFFER_SIZE );
 80043c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80043c6:	491c      	ldr	r1, [pc, #112]	; (8004438 <checkWriteLogBuffer+0x10c>)
 80043c8:	4813      	ldr	r0, [pc, #76]	; (8004418 <checkWriteLogBuffer+0xec>)
 80043ca:	f7fc ff3b 	bl	8001244 <Update_File>
 80043ce:	4603      	mov	r3, r0
 80043d0:	461a      	mov	r2, r3
 80043d2:	4b13      	ldr	r3, [pc, #76]	; (8004420 <checkWriteLogBuffer+0xf4>)
 80043d4:	701a      	strb	r2, [r3, #0]
				if (fresult1 == FR_OK){
 80043d6:	4b12      	ldr	r3, [pc, #72]	; (8004420 <checkWriteLogBuffer+0xf4>)
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d104      	bne.n	80043e8 <checkWriteLogBuffer+0xbc>
					Uart_SendString("Wrote Log Buffer B\r\n", pc_uart);
 80043de:	4913      	ldr	r1, [pc, #76]	; (800442c <checkWriteLogBuffer+0x100>)
 80043e0:	4816      	ldr	r0, [pc, #88]	; (800443c <checkWriteLogBuffer+0x110>)
 80043e2:	f7fd fad7 	bl	8001994 <Uart_SendString>
 80043e6:	e00b      	b.n	8004400 <checkWriteLogBuffer+0xd4>
//					Uart_SendString("###\r\n", pc_uart);
//					Uart_SendString(logBufferB, pc_uart);
//					Uart_SendString("\r\n###\r\n", pc_uart);
				}
				else{
					Uart_SendString("SD Card Write Error B\r\n", pc_uart);
 80043e8:	4910      	ldr	r1, [pc, #64]	; (800442c <checkWriteLogBuffer+0x100>)
 80043ea:	4815      	ldr	r0, [pc, #84]	; (8004440 <checkWriteLogBuffer+0x114>)
 80043ec:	f7fd fad2 	bl	8001994 <Uart_SendString>
					sdState = SDSTATE_ERR;
 80043f0:	4b08      	ldr	r3, [pc, #32]	; (8004414 <checkWriteLogBuffer+0xe8>)
 80043f2:	2202      	movs	r2, #2
 80043f4:	701a      	strb	r2, [r3, #0]
 80043f6:	e003      	b.n	8004400 <checkWriteLogBuffer+0xd4>



		}
		else{
			Uart_SendString("Logging disabled - SD Card Error\r\n", pc_uart);
 80043f8:	490c      	ldr	r1, [pc, #48]	; (800442c <checkWriteLogBuffer+0x100>)
 80043fa:	4812      	ldr	r0, [pc, #72]	; (8004444 <checkWriteLogBuffer+0x118>)
 80043fc:	f7fd faca 	bl	8001994 <Uart_SendString>

		}
		logBufferReady = 0;
 8004400:	4b03      	ldr	r3, [pc, #12]	; (8004410 <checkWriteLogBuffer+0xe4>)
 8004402:	2200      	movs	r2, #0
 8004404:	701a      	strb	r2, [r3, #0]
	}
}
 8004406:	bf00      	nop
 8004408:	3718      	adds	r7, #24
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	2000732d 	.word	0x2000732d
 8004414:	20005320 	.word	0x20005320
 8004418:	20005300 	.word	0x20005300
 800441c:	200052f4 	.word	0x200052f4
 8004420:	20004d5c 	.word	0x20004d5c
 8004424:	2000732c 	.word	0x2000732c
 8004428:	20005328 	.word	0x20005328
 800442c:	20003fd8 	.word	0x20003fd8
 8004430:	080183f8 	.word	0x080183f8
 8004434:	08018410 	.word	0x08018410
 8004438:	20006328 	.word	0x20006328
 800443c:	08018428 	.word	0x08018428
 8004440:	08018440 	.word	0x08018440
 8004444:	08018458 	.word	0x08018458

08004448 <forceWriteLogBuffer>:

void forceWriteLogBuffer(void){
 8004448:	b580      	push	{r7, lr}
 800444a:	b086      	sub	sp, #24
 800444c:	af00      	add	r7, sp, #0

	if(sdState == SDSTATE_OK){
 800444e:	4b36      	ldr	r3, [pc, #216]	; (8004528 <forceWriteLogBuffer+0xe0>)
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d15c      	bne.n	8004510 <forceWriteLogBuffer+0xc8>


//			timer5_ms_restart();


		getDateCharFileName(logfile);
 8004456:	4835      	ldr	r0, [pc, #212]	; (800452c <forceWriteLogBuffer+0xe4>)
 8004458:	f002 f87c 	bl	8006554 <getDateCharFileName>
		getYearCharDirName(logdir);
 800445c:	4834      	ldr	r0, [pc, #208]	; (8004530 <forceWriteLogBuffer+0xe8>)
 800445e:	f002 f851 	bl	8006504 <getYearCharDirName>

		/**** check whether the dir exists or not ****/
		FILINFO fno;
		fresult1 = f_stat (logdir, &fno);
 8004462:	463b      	mov	r3, r7
 8004464:	4619      	mov	r1, r3
 8004466:	4832      	ldr	r0, [pc, #200]	; (8004530 <forceWriteLogBuffer+0xe8>)
 8004468:	f00b ff9b 	bl	80103a2 <f_stat>
 800446c:	4603      	mov	r3, r0
 800446e:	461a      	mov	r2, r3
 8004470:	4b30      	ldr	r3, [pc, #192]	; (8004534 <forceWriteLogBuffer+0xec>)
 8004472:	701a      	strb	r2, [r3, #0]
		if (fresult1 != FR_OK){
 8004474:	4b2f      	ldr	r3, [pc, #188]	; (8004534 <forceWriteLogBuffer+0xec>)
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00d      	beq.n	8004498 <forceWriteLogBuffer+0x50>
			fresult1 = Create_Dir(logdir);
 800447c:	482c      	ldr	r0, [pc, #176]	; (8004530 <forceWriteLogBuffer+0xe8>)
 800447e:	f7fc ff83 	bl	8001388 <Create_Dir>
 8004482:	4603      	mov	r3, r0
 8004484:	461a      	mov	r2, r3
 8004486:	4b2b      	ldr	r3, [pc, #172]	; (8004534 <forceWriteLogBuffer+0xec>)
 8004488:	701a      	strb	r2, [r3, #0]
			if (fresult1 != FR_OK){
 800448a:	4b2a      	ldr	r3, [pc, #168]	; (8004534 <forceWriteLogBuffer+0xec>)
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d002      	beq.n	8004498 <forceWriteLogBuffer+0x50>
				sdState = SDSTATE_ERR;
 8004492:	4b25      	ldr	r3, [pc, #148]	; (8004528 <forceWriteLogBuffer+0xe0>)
 8004494:	2202      	movs	r2, #2
 8004496:	701a      	strb	r2, [r3, #0]
			}
		}
//			t1 = (unsigned int) timer5_ms_get();

		if(currentLogBuffer){//buffering into B, so use that one
 8004498:	4b27      	ldr	r3, [pc, #156]	; (8004538 <forceWriteLogBuffer+0xf0>)
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d01b      	beq.n	80044d8 <forceWriteLogBuffer+0x90>
			fresult1 = Update_File (logfile, logBufferB, logBufferB_position );
 80044a0:	4b26      	ldr	r3, [pc, #152]	; (800453c <forceWriteLogBuffer+0xf4>)
 80044a2:	881b      	ldrh	r3, [r3, #0]
 80044a4:	461a      	mov	r2, r3
 80044a6:	4926      	ldr	r1, [pc, #152]	; (8004540 <forceWriteLogBuffer+0xf8>)
 80044a8:	4820      	ldr	r0, [pc, #128]	; (800452c <forceWriteLogBuffer+0xe4>)
 80044aa:	f7fc fecb 	bl	8001244 <Update_File>
 80044ae:	4603      	mov	r3, r0
 80044b0:	461a      	mov	r2, r3
 80044b2:	4b20      	ldr	r3, [pc, #128]	; (8004534 <forceWriteLogBuffer+0xec>)
 80044b4:	701a      	strb	r2, [r3, #0]
			if (fresult1 == FR_OK){
 80044b6:	4b1f      	ldr	r3, [pc, #124]	; (8004534 <forceWriteLogBuffer+0xec>)
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d104      	bne.n	80044c8 <forceWriteLogBuffer+0x80>
				Uart_SendString("Flush Log Buffer B\r\n", pc_uart);
 80044be:	4921      	ldr	r1, [pc, #132]	; (8004544 <forceWriteLogBuffer+0xfc>)
 80044c0:	4821      	ldr	r0, [pc, #132]	; (8004548 <forceWriteLogBuffer+0x100>)
 80044c2:	f7fd fa67 	bl	8001994 <Uart_SendString>
 80044c6:	e027      	b.n	8004518 <forceWriteLogBuffer+0xd0>
//					Uart_SendString("###\r\n", pc_uart);
//					Uart_SendString(logBufferA, pc_uart);
//					Uart_SendString("\r\n###\r\n", pc_uart);
			}
			else{
				Uart_SendString("SD Card Write Error B\r\n", pc_uart);
 80044c8:	491e      	ldr	r1, [pc, #120]	; (8004544 <forceWriteLogBuffer+0xfc>)
 80044ca:	4820      	ldr	r0, [pc, #128]	; (800454c <forceWriteLogBuffer+0x104>)
 80044cc:	f7fd fa62 	bl	8001994 <Uart_SendString>

				sdState = SDSTATE_ERR;
 80044d0:	4b15      	ldr	r3, [pc, #84]	; (8004528 <forceWriteLogBuffer+0xe0>)
 80044d2:	2202      	movs	r2, #2
 80044d4:	701a      	strb	r2, [r3, #0]
 80044d6:	e01f      	b.n	8004518 <forceWriteLogBuffer+0xd0>
			}


		}
		else{
			fresult1 = Update_File (logfile, logBufferA, logBufferA_position );
 80044d8:	4b1d      	ldr	r3, [pc, #116]	; (8004550 <forceWriteLogBuffer+0x108>)
 80044da:	881b      	ldrh	r3, [r3, #0]
 80044dc:	461a      	mov	r2, r3
 80044de:	491d      	ldr	r1, [pc, #116]	; (8004554 <forceWriteLogBuffer+0x10c>)
 80044e0:	4812      	ldr	r0, [pc, #72]	; (800452c <forceWriteLogBuffer+0xe4>)
 80044e2:	f7fc feaf 	bl	8001244 <Update_File>
 80044e6:	4603      	mov	r3, r0
 80044e8:	461a      	mov	r2, r3
 80044ea:	4b12      	ldr	r3, [pc, #72]	; (8004534 <forceWriteLogBuffer+0xec>)
 80044ec:	701a      	strb	r2, [r3, #0]
			if (fresult1 == FR_OK){
 80044ee:	4b11      	ldr	r3, [pc, #68]	; (8004534 <forceWriteLogBuffer+0xec>)
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d104      	bne.n	8004500 <forceWriteLogBuffer+0xb8>
				Uart_SendString("Wrote Log Buffer A\r\n", pc_uart);
 80044f6:	4913      	ldr	r1, [pc, #76]	; (8004544 <forceWriteLogBuffer+0xfc>)
 80044f8:	4817      	ldr	r0, [pc, #92]	; (8004558 <forceWriteLogBuffer+0x110>)
 80044fa:	f7fd fa4b 	bl	8001994 <Uart_SendString>
 80044fe:	e00b      	b.n	8004518 <forceWriteLogBuffer+0xd0>
//					Uart_SendString("###\r\n", pc_uart);
//					Uart_SendString(logBufferB, pc_uart);
//					Uart_SendString("\r\n###\r\n", pc_uart);
			}
			else{
				Uart_SendString("SD Card Write Error A\r\n", pc_uart);
 8004500:	4910      	ldr	r1, [pc, #64]	; (8004544 <forceWriteLogBuffer+0xfc>)
 8004502:	4816      	ldr	r0, [pc, #88]	; (800455c <forceWriteLogBuffer+0x114>)
 8004504:	f7fd fa46 	bl	8001994 <Uart_SendString>
				sdState = SDSTATE_ERR;
 8004508:	4b07      	ldr	r3, [pc, #28]	; (8004528 <forceWriteLogBuffer+0xe0>)
 800450a:	2202      	movs	r2, #2
 800450c:	701a      	strb	r2, [r3, #0]
 800450e:	e003      	b.n	8004518 <forceWriteLogBuffer+0xd0>



	}
	else{
		Uart_SendString("Logging disabled - SD Card Error\r\n", pc_uart);
 8004510:	490c      	ldr	r1, [pc, #48]	; (8004544 <forceWriteLogBuffer+0xfc>)
 8004512:	4813      	ldr	r0, [pc, #76]	; (8004560 <forceWriteLogBuffer+0x118>)
 8004514:	f7fd fa3e 	bl	8001994 <Uart_SendString>

	}
	logBufferReady = 0;
 8004518:	4b12      	ldr	r3, [pc, #72]	; (8004564 <forceWriteLogBuffer+0x11c>)
 800451a:	2200      	movs	r2, #0
 800451c:	701a      	strb	r2, [r3, #0]

}
 800451e:	bf00      	nop
 8004520:	3718      	adds	r7, #24
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	20005320 	.word	0x20005320
 800452c:	20005300 	.word	0x20005300
 8004530:	200052f4 	.word	0x200052f4
 8004534:	20004d5c 	.word	0x20004d5c
 8004538:	2000732c 	.word	0x2000732c
 800453c:	2000732a 	.word	0x2000732a
 8004540:	20006328 	.word	0x20006328
 8004544:	20003fd8 	.word	0x20003fd8
 8004548:	0801847c 	.word	0x0801847c
 800454c:	08018440 	.word	0x08018440
 8004550:	20007328 	.word	0x20007328
 8004554:	20005328 	.word	0x20005328
 8004558:	080183f8 	.word	0x080183f8
 800455c:	08018410 	.word	0x08018410
 8004560:	08018458 	.word	0x08018458
 8004564:	2000732d 	.word	0x2000732d

08004568 <settingsToParams>:

void settingsToParams(char * buffer){
 8004568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800456c:	b08c      	sub	sp, #48	; 0x30
 800456e:	af0a      	add	r7, sp, #40	; 0x28
 8004570:	6078      	str	r0, [r7, #4]
			"&RSH=%u"
			"&AVN=%u"
			"&VLD=%u"
			"&VER=%s_%s",
			settings.MEI,
			settings.SID,
 8004572:	4b18      	ldr	r3, [pc, #96]	; (80045d4 <settingsToParams+0x6c>)
 8004574:	8a9b      	ldrh	r3, [r3, #20]
		sprintf(buffer,
 8004576:	4698      	mov	r8, r3
			settings.URL,
			settings.LOG,
 8004578:	4b16      	ldr	r3, [pc, #88]	; (80045d4 <settingsToParams+0x6c>)
 800457a:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
		sprintf(buffer,
 800457e:	461c      	mov	r4, r3
			settings.BCL,
 8004580:	4b14      	ldr	r3, [pc, #80]	; (80045d4 <settingsToParams+0x6c>)
 8004582:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
		sprintf(buffer,
 8004586:	4618      	mov	r0, r3
 8004588:	f7fb fff6 	bl	8000578 <__aeabi_f2d>
 800458c:	4602      	mov	r2, r0
 800458e:	460b      	mov	r3, r1
			settings.RSH,
 8004590:	4910      	ldr	r1, [pc, #64]	; (80045d4 <settingsToParams+0x6c>)
 8004592:	f891 10bc 	ldrb.w	r1, [r1, #188]	; 0xbc
		sprintf(buffer,
 8004596:	4608      	mov	r0, r1
			settings.AVN,
 8004598:	490e      	ldr	r1, [pc, #56]	; (80045d4 <settingsToParams+0x6c>)
 800459a:	f8b1 10be 	ldrh.w	r1, [r1, #190]	; 0xbe
		sprintf(buffer,
 800459e:	460d      	mov	r5, r1
 80045a0:	490d      	ldr	r1, [pc, #52]	; (80045d8 <settingsToParams+0x70>)
 80045a2:	7809      	ldrb	r1, [r1, #0]
 80045a4:	460e      	mov	r6, r1
 80045a6:	490d      	ldr	r1, [pc, #52]	; (80045dc <settingsToParams+0x74>)
 80045a8:	9108      	str	r1, [sp, #32]
 80045aa:	490d      	ldr	r1, [pc, #52]	; (80045e0 <settingsToParams+0x78>)
 80045ac:	9107      	str	r1, [sp, #28]
 80045ae:	9606      	str	r6, [sp, #24]
 80045b0:	9505      	str	r5, [sp, #20]
 80045b2:	9004      	str	r0, [sp, #16]
 80045b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80045b8:	9401      	str	r4, [sp, #4]
 80045ba:	4b0a      	ldr	r3, [pc, #40]	; (80045e4 <settingsToParams+0x7c>)
 80045bc:	9300      	str	r3, [sp, #0]
 80045be:	4643      	mov	r3, r8
 80045c0:	4a04      	ldr	r2, [pc, #16]	; (80045d4 <settingsToParams+0x6c>)
 80045c2:	4909      	ldr	r1, [pc, #36]	; (80045e8 <settingsToParams+0x80>)
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f00d fb01 	bl	8011bcc <siprintf>
			settingsValid,
			MAJOR_VERSION,BUILD_NUMBER
			);
}
 80045ca:	bf00      	nop
 80045cc:	3708      	adds	r7, #8
 80045ce:	46bd      	mov	sp, r7
 80045d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045d4:	20004c9c 	.word	0x20004c9c
 80045d8:	20005321 	.word	0x20005321
 80045dc:	080184dc 	.word	0x080184dc
 80045e0:	080184e0 	.word	0x080184e0
 80045e4:	20004cb2 	.word	0x20004cb2
 80045e8:	08018494 	.word	0x08018494

080045ec <shutdown>:

void shutdown(){
 80045ec:	b580      	push	{r7, lr}
 80045ee:	af00      	add	r7, sp, #0
	Uart_SendString("Shutdown...\r\n", pc_uart);
 80045f0:	4903      	ldr	r1, [pc, #12]	; (8004600 <shutdown+0x14>)
 80045f2:	4804      	ldr	r0, [pc, #16]	; (8004604 <shutdown+0x18>)
 80045f4:	f7fd f9ce 	bl	8001994 <Uart_SendString>
	forceWriteLogBuffer();
 80045f8:	f7ff ff26 	bl	8004448 <forceWriteLogBuffer>
	//todo - more shutdown stuff
	NVIC_SystemReset();
 80045fc:	f7ff f9c0 	bl	8003980 <__NVIC_SystemReset>
 8004600:	20003fd8 	.word	0x20003fd8
 8004604:	080184e4 	.word	0x080184e4

08004608 <scheduleShutdown>:
}

void scheduleShutdown(uint16_t ms){
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	4603      	mov	r3, r0
 8004610:	80fb      	strh	r3, [r7, #6]
	Uart_SendString("Shutdown scheduled\r\n", pc_uart);
 8004612:	4908      	ldr	r1, [pc, #32]	; (8004634 <scheduleShutdown+0x2c>)
 8004614:	4808      	ldr	r0, [pc, #32]	; (8004638 <scheduleShutdown+0x30>)
 8004616:	f7fd f9bd 	bl	8001994 <Uart_SendString>
	shutdownScheduledFlag = 1;
 800461a:	4b08      	ldr	r3, [pc, #32]	; (800463c <scheduleShutdown+0x34>)
 800461c:	2201      	movs	r2, #1
 800461e:	701a      	strb	r2, [r3, #0]
	timer4_ms_restart();
 8004620:	f7fe fc76 	bl	8002f10 <timer4_ms_restart>
	shutdownScheduledTimeout = ms;
 8004624:	4a06      	ldr	r2, [pc, #24]	; (8004640 <scheduleShutdown+0x38>)
 8004626:	88fb      	ldrh	r3, [r7, #6]
 8004628:	8013      	strh	r3, [r2, #0]

}
 800462a:	bf00      	nop
 800462c:	3708      	adds	r7, #8
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	20003fd8 	.word	0x20003fd8
 8004638:	080184f4 	.word	0x080184f4
 800463c:	20005322 	.word	0x20005322
 8004640:	20005324 	.word	0x20005324

08004644 <checkShutdown>:

uint8_t checkShutdown(void){
 8004644:	b580      	push	{r7, lr}
 8004646:	af00      	add	r7, sp, #0
	if(shutdownScheduledFlag && timer4_ms_get() >= shutdownScheduledTimeout){
 8004648:	4b0a      	ldr	r3, [pc, #40]	; (8004674 <checkShutdown+0x30>)
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d00c      	beq.n	800466a <checkShutdown+0x26>
 8004650:	f7fe fc6e 	bl	8002f30 <timer4_ms_get>
 8004654:	4603      	mov	r3, r0
 8004656:	4a08      	ldr	r2, [pc, #32]	; (8004678 <checkShutdown+0x34>)
 8004658:	8812      	ldrh	r2, [r2, #0]
 800465a:	4293      	cmp	r3, r2
 800465c:	d305      	bcc.n	800466a <checkShutdown+0x26>
		Uart_SendString("Shutdown timer reached\r\n", pc_uart);
 800465e:	4907      	ldr	r1, [pc, #28]	; (800467c <checkShutdown+0x38>)
 8004660:	4807      	ldr	r0, [pc, #28]	; (8004680 <checkShutdown+0x3c>)
 8004662:	f7fd f997 	bl	8001994 <Uart_SendString>
		shutdown();
 8004666:	f7ff ffc1 	bl	80045ec <shutdown>
	}

	return shutdownScheduledFlag;
 800466a:	4b02      	ldr	r3, [pc, #8]	; (8004674 <checkShutdown+0x30>)
 800466c:	781b      	ldrb	r3, [r3, #0]

}
 800466e:	4618      	mov	r0, r3
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	20005322 	.word	0x20005322
 8004678:	20005324 	.word	0x20005324
 800467c:	20003fd8 	.word	0x20003fd8
 8004680:	0801850c 	.word	0x0801850c

08004684 <sim7600_powerProcessor>:


}


uint8_t sim7600_powerProcessor(void){
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
	//check power state - does the sim7600 have main power and is RDY?
	//returns 1 if all is ready, 0 if it is managing power state

	uint8_t result = 0;
 800468a:	2300      	movs	r3, #0
 800468c:	71fb      	strb	r3, [r7, #7]
	switch (powerState) {
 800468e:	4b9e      	ldr	r3, [pc, #632]	; (8004908 <sim7600_powerProcessor+0x284>)
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	2b09      	cmp	r3, #9
 8004694:	f200 8133 	bhi.w	80048fe <sim7600_powerProcessor+0x27a>
 8004698:	a201      	add	r2, pc, #4	; (adr r2, 80046a0 <sim7600_powerProcessor+0x1c>)
 800469a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800469e:	bf00      	nop
 80046a0:	080046c9 	.word	0x080046c9
 80046a4:	0800473f 	.word	0x0800473f
 80046a8:	08004771 	.word	0x08004771
 80046ac:	080047ad 	.word	0x080047ad
 80046b0:	08004817 	.word	0x08004817
 80046b4:	0800483f 	.word	0x0800483f
 80046b8:	08004863 	.word	0x08004863
 80046bc:	080048b7 	.word	0x080048b7
 80046c0:	080048cf 	.word	0x080048cf
 80046c4:	080048eb 	.word	0x080048eb
		case POWER_INIT:

			readyState = STATE_INIT;
 80046c8:	4b90      	ldr	r3, [pc, #576]	; (800490c <sim7600_powerProcessor+0x288>)
 80046ca:	2200      	movs	r2, #0
 80046cc:	701a      	strb	r2, [r3, #0]
			cpinState = STATE_INIT;
 80046ce:	4b90      	ldr	r3, [pc, #576]	; (8004910 <sim7600_powerProcessor+0x28c>)
 80046d0:	2200      	movs	r2, #0
 80046d2:	701a      	strb	r2, [r3, #0]


			httpResponseState = STATE_INIT;
 80046d4:	4b8f      	ldr	r3, [pc, #572]	; (8004914 <sim7600_powerProcessor+0x290>)
 80046d6:	2200      	movs	r2, #0
 80046d8:	701a      	strb	r2, [r3, #0]

			cmdState = CMD_INIT;
 80046da:	4b8f      	ldr	r3, [pc, #572]	; (8004918 <sim7600_powerProcessor+0x294>)
 80046dc:	2200      	movs	r2, #0
 80046de:	701a      	strb	r2, [r3, #0]

			csq = 99;
 80046e0:	4b8e      	ldr	r3, [pc, #568]	; (800491c <sim7600_powerProcessor+0x298>)
 80046e2:	2263      	movs	r2, #99	; 0x63
 80046e4:	801a      	strh	r2, [r3, #0]

			//LED On
			HAL_GPIO_WritePin(GPIO_OUT_LED_GPIO_Port, GPIO_OUT_LED_Pin,GPIO_PIN_SET);
 80046e6:	2201      	movs	r2, #1
 80046e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80046ec:	488c      	ldr	r0, [pc, #560]	; (8004920 <sim7600_powerProcessor+0x29c>)
 80046ee:	f003 fbad 	bl	8007e4c <HAL_GPIO_WritePin>

			//set DTR
			Uart_SendString("SIM7600 Set DTR\r\n", pc_uart);
 80046f2:	498c      	ldr	r1, [pc, #560]	; (8004924 <sim7600_powerProcessor+0x2a0>)
 80046f4:	488c      	ldr	r0, [pc, #560]	; (8004928 <sim7600_powerProcessor+0x2a4>)
 80046f6:	f7fd f94d 	bl	8001994 <Uart_SendString>
			HAL_GPIO_WritePin(GPIO_OUT_DTR_GPIO_Port, GPIO_OUT_DTR_Pin, GPIO_PIN_SET);
 80046fa:	2201      	movs	r2, #1
 80046fc:	2102      	movs	r1, #2
 80046fe:	4888      	ldr	r0, [pc, #544]	; (8004920 <sim7600_powerProcessor+0x29c>)
 8004700:	f003 fba4 	bl	8007e4c <HAL_GPIO_WritePin>


			Uart_SendString("SIM7600 Power Start \r\n", pc_uart);
 8004704:	4987      	ldr	r1, [pc, #540]	; (8004924 <sim7600_powerProcessor+0x2a0>)
 8004706:	4889      	ldr	r0, [pc, #548]	; (800492c <sim7600_powerProcessor+0x2a8>)
 8004708:	f7fd f944 	bl	8001994 <Uart_SendString>
			HAL_GPIO_WritePin(GPIO_OUT_RESET_GPIO_Port, GPIO_OUT_RESET_Pin, GPIO_PIN_SET);
 800470c:	2201      	movs	r2, #1
 800470e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004712:	4883      	ldr	r0, [pc, #524]	; (8004920 <sim7600_powerProcessor+0x29c>)
 8004714:	f003 fb9a 	bl	8007e4c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_OUT_PWRKEY_GPIO_Port, GPIO_OUT_PWRKEY_Pin, GPIO_PIN_SET);
 8004718:	2201      	movs	r2, #1
 800471a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800471e:	4880      	ldr	r0, [pc, #512]	; (8004920 <sim7600_powerProcessor+0x29c>)
 8004720:	f003 fb94 	bl	8007e4c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_OUT_4_1EN_GPIO_Port, GPIO_OUT_4_1EN_Pin, GPIO_PIN_SET);
 8004724:	2201      	movs	r2, #1
 8004726:	2110      	movs	r1, #16
 8004728:	4881      	ldr	r0, [pc, #516]	; (8004930 <sim7600_powerProcessor+0x2ac>)
 800472a:	f003 fb8f 	bl	8007e4c <HAL_GPIO_WritePin>

			timer5_ms_restart();
 800472e:	f7fe fc0b 	bl	8002f48 <timer5_ms_restart>
			powerState = POWER_KEY;
 8004732:	4b75      	ldr	r3, [pc, #468]	; (8004908 <sim7600_powerProcessor+0x284>)
 8004734:	2201      	movs	r2, #1
 8004736:	701a      	strb	r2, [r3, #0]
			result = 0;
 8004738:	2300      	movs	r3, #0
 800473a:	71fb      	strb	r3, [r7, #7]
			break;
 800473c:	e0df      	b.n	80048fe <sim7600_powerProcessor+0x27a>

		case POWER_KEY:
			if(timer5_ms_get() > 500){
 800473e:	f7fe fc13 	bl	8002f68 <timer5_ms_get>
 8004742:	4603      	mov	r3, r0
 8004744:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004748:	f240 80d2 	bls.w	80048f0 <sim7600_powerProcessor+0x26c>
				Uart_SendString("SIM7600 Power Key Down \r\n", pc_uart);
 800474c:	4975      	ldr	r1, [pc, #468]	; (8004924 <sim7600_powerProcessor+0x2a0>)
 800474e:	4879      	ldr	r0, [pc, #484]	; (8004934 <sim7600_powerProcessor+0x2b0>)
 8004750:	f7fd f920 	bl	8001994 <Uart_SendString>
				HAL_GPIO_WritePin(GPIO_OUT_PWRKEY_GPIO_Port, GPIO_OUT_PWRKEY_Pin, GPIO_PIN_RESET);
 8004754:	2200      	movs	r2, #0
 8004756:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800475a:	4871      	ldr	r0, [pc, #452]	; (8004920 <sim7600_powerProcessor+0x29c>)
 800475c:	f003 fb76 	bl	8007e4c <HAL_GPIO_WritePin>
				timer5_ms_restart();
 8004760:	f7fe fbf2 	bl	8002f48 <timer5_ms_restart>
				powerState = POWER_KEY2;
 8004764:	4b68      	ldr	r3, [pc, #416]	; (8004908 <sim7600_powerProcessor+0x284>)
 8004766:	2202      	movs	r2, #2
 8004768:	701a      	strb	r2, [r3, #0]
				result = 0;
 800476a:	2300      	movs	r3, #0
 800476c:	71fb      	strb	r3, [r7, #7]
			}
			break;
 800476e:	e0bf      	b.n	80048f0 <sim7600_powerProcessor+0x26c>

		case POWER_KEY2:
			if(timer5_ms_get() > 500){
 8004770:	f7fe fbfa 	bl	8002f68 <timer5_ms_get>
 8004774:	4603      	mov	r3, r0
 8004776:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800477a:	f240 80bb 	bls.w	80048f4 <sim7600_powerProcessor+0x270>
				Uart_SendString("SIM7600 Power Key Up \r\n", pc_uart);
 800477e:	4969      	ldr	r1, [pc, #420]	; (8004924 <sim7600_powerProcessor+0x2a0>)
 8004780:	486d      	ldr	r0, [pc, #436]	; (8004938 <sim7600_powerProcessor+0x2b4>)
 8004782:	f7fd f907 	bl	8001994 <Uart_SendString>
				HAL_GPIO_WritePin(GPIO_OUT_PWRKEY_GPIO_Port, GPIO_OUT_PWRKEY_Pin, GPIO_PIN_SET);
 8004786:	2201      	movs	r2, #1
 8004788:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800478c:	4864      	ldr	r0, [pc, #400]	; (8004920 <sim7600_powerProcessor+0x29c>)
 800478e:	f003 fb5d 	bl	8007e4c <HAL_GPIO_WritePin>
				powerState = POWER_SET;
 8004792:	4b5d      	ldr	r3, [pc, #372]	; (8004908 <sim7600_powerProcessor+0x284>)
 8004794:	2203      	movs	r2, #3
 8004796:	701a      	strb	r2, [r3, #0]
				//LED Off
				HAL_GPIO_WritePin(GPIO_OUT_LED_GPIO_Port, GPIO_OUT_LED_Pin,GPIO_PIN_RESET);
 8004798:	2200      	movs	r2, #0
 800479a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800479e:	4860      	ldr	r0, [pc, #384]	; (8004920 <sim7600_powerProcessor+0x29c>)
 80047a0:	f003 fb54 	bl	8007e4c <HAL_GPIO_WritePin>
				timer5_ms_restart();
 80047a4:	f7fe fbd0 	bl	8002f48 <timer5_ms_restart>
				return 0;
 80047a8:	2300      	movs	r3, #0
 80047aa:	e0a9      	b.n	8004900 <sim7600_powerProcessor+0x27c>
			}
			break;

		case POWER_SET:
			elapsedTime = timer5_ms_get();
 80047ac:	f7fe fbdc 	bl	8002f68 <timer5_ms_get>
 80047b0:	4603      	mov	r3, r0
 80047b2:	4a62      	ldr	r2, [pc, #392]	; (800493c <sim7600_powerProcessor+0x2b8>)
 80047b4:	6013      	str	r3, [r2, #0]
			if (HAL_GPIO_ReadPin(GPIO_IN_POWERSTAT_GPIO_Port, GPIO_IN_POWERSTAT_Pin)) {
 80047b6:	2101      	movs	r1, #1
 80047b8:	4859      	ldr	r0, [pc, #356]	; (8004920 <sim7600_powerProcessor+0x29c>)
 80047ba:	f003 fb2f 	bl	8007e1c <HAL_GPIO_ReadPin>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00f      	beq.n	80047e4 <sim7600_powerProcessor+0x160>
				powerState = POWER_OK;
 80047c4:	4b50      	ldr	r3, [pc, #320]	; (8004908 <sim7600_powerProcessor+0x284>)
 80047c6:	2204      	movs	r2, #4
 80047c8:	701a      	strb	r2, [r3, #0]
				sprintf(pbuffer, "SIM7600 Power Status OK after %lu ms\r\n", elapsedTime);
 80047ca:	4b5c      	ldr	r3, [pc, #368]	; (800493c <sim7600_powerProcessor+0x2b8>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	461a      	mov	r2, r3
 80047d0:	495b      	ldr	r1, [pc, #364]	; (8004940 <sim7600_powerProcessor+0x2bc>)
 80047d2:	485c      	ldr	r0, [pc, #368]	; (8004944 <sim7600_powerProcessor+0x2c0>)
 80047d4:	f00d f9fa 	bl	8011bcc <siprintf>
				Uart_SendString(pbuffer, pc_uart);
 80047d8:	4952      	ldr	r1, [pc, #328]	; (8004924 <sim7600_powerProcessor+0x2a0>)
 80047da:	485a      	ldr	r0, [pc, #360]	; (8004944 <sim7600_powerProcessor+0x2c0>)
 80047dc:	f7fd f8da 	bl	8001994 <Uart_SendString>
				result = 1;
 80047e0:	2301      	movs	r3, #1
 80047e2:	71fb      	strb	r3, [r7, #7]

			}

			if(timer5_ms_get() > 20000){
 80047e4:	f7fe fbc0 	bl	8002f68 <timer5_ms_get>
 80047e8:	4603      	mov	r3, r0
 80047ea:	f644 6220 	movw	r2, #20000	; 0x4e20
 80047ee:	4293      	cmp	r3, r2
 80047f0:	f240 8082 	bls.w	80048f8 <sim7600_powerProcessor+0x274>
				sprintf(pbuffer, "SIM7600 Power Status Timeout after %lu ms\r\n", elapsedTime);
 80047f4:	4b51      	ldr	r3, [pc, #324]	; (800493c <sim7600_powerProcessor+0x2b8>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	461a      	mov	r2, r3
 80047fa:	4953      	ldr	r1, [pc, #332]	; (8004948 <sim7600_powerProcessor+0x2c4>)
 80047fc:	4851      	ldr	r0, [pc, #324]	; (8004944 <sim7600_powerProcessor+0x2c0>)
 80047fe:	f00d f9e5 	bl	8011bcc <siprintf>
				Uart_SendString(pbuffer, pc_uart);
 8004802:	4948      	ldr	r1, [pc, #288]	; (8004924 <sim7600_powerProcessor+0x2a0>)
 8004804:	484f      	ldr	r0, [pc, #316]	; (8004944 <sim7600_powerProcessor+0x2c0>)
 8004806:	f7fd f8c5 	bl	8001994 <Uart_SendString>
				powerState = POWER_ERR;
 800480a:	4b3f      	ldr	r3, [pc, #252]	; (8004908 <sim7600_powerProcessor+0x284>)
 800480c:	2205      	movs	r2, #5
 800480e:	701a      	strb	r2, [r3, #0]
				result = 0;
 8004810:	2300      	movs	r3, #0
 8004812:	71fb      	strb	r3, [r7, #7]
			}
			break;
 8004814:	e070      	b.n	80048f8 <sim7600_powerProcessor+0x274>

		case POWER_OK:
			if (!HAL_GPIO_ReadPin(GPIO_IN_POWERSTAT_GPIO_Port,GPIO_IN_POWERSTAT_Pin)) {
 8004816:	2101      	movs	r1, #1
 8004818:	4841      	ldr	r0, [pc, #260]	; (8004920 <sim7600_powerProcessor+0x29c>)
 800481a:	f003 faff 	bl	8007e1c <HAL_GPIO_ReadPin>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d109      	bne.n	8004838 <sim7600_powerProcessor+0x1b4>
				Uart_SendString("SIM7600 Power Status Lost\r\n", pc_uart);
 8004824:	493f      	ldr	r1, [pc, #252]	; (8004924 <sim7600_powerProcessor+0x2a0>)
 8004826:	4849      	ldr	r0, [pc, #292]	; (800494c <sim7600_powerProcessor+0x2c8>)
 8004828:	f7fd f8b4 	bl	8001994 <Uart_SendString>
				powerState = POWER_ERR;
 800482c:	4b36      	ldr	r3, [pc, #216]	; (8004908 <sim7600_powerProcessor+0x284>)
 800482e:	2205      	movs	r2, #5
 8004830:	701a      	strb	r2, [r3, #0]
				result = 0;
 8004832:	2300      	movs	r3, #0
 8004834:	71fb      	strb	r3, [r7, #7]
				break;
 8004836:	e062      	b.n	80048fe <sim7600_powerProcessor+0x27a>
			}
			else{
				result = 1;
 8004838:	2301      	movs	r3, #1
 800483a:	71fb      	strb	r3, [r7, #7]
			}


			break;
 800483c:	e05f      	b.n	80048fe <sim7600_powerProcessor+0x27a>

		case POWER_ERR:
			powerState = POWER_OFF;
 800483e:	4b32      	ldr	r3, [pc, #200]	; (8004908 <sim7600_powerProcessor+0x284>)
 8004840:	2206      	movs	r2, #6
 8004842:	701a      	strb	r2, [r3, #0]
			readyState = STATE_INIT;
 8004844:	4b31      	ldr	r3, [pc, #196]	; (800490c <sim7600_powerProcessor+0x288>)
 8004846:	2200      	movs	r2, #0
 8004848:	701a      	strb	r2, [r3, #0]
			cpinState = STATE_INIT;
 800484a:	4b31      	ldr	r3, [pc, #196]	; (8004910 <sim7600_powerProcessor+0x28c>)
 800484c:	2200      	movs	r2, #0
 800484e:	701a      	strb	r2, [r3, #0]
			httpResponseState = STATE_INIT;
 8004850:	4b30      	ldr	r3, [pc, #192]	; (8004914 <sim7600_powerProcessor+0x290>)
 8004852:	2200      	movs	r2, #0
 8004854:	701a      	strb	r2, [r3, #0]
			cmdState = CMD_INIT;
 8004856:	4b30      	ldr	r3, [pc, #192]	; (8004918 <sim7600_powerProcessor+0x294>)
 8004858:	2200      	movs	r2, #0
 800485a:	701a      	strb	r2, [r3, #0]
			result = 0;
 800485c:	2300      	movs	r3, #0
 800485e:	71fb      	strb	r3, [r7, #7]
			break;
 8004860:	e04d      	b.n	80048fe <sim7600_powerProcessor+0x27a>

		case POWER_OFF:
			powerOffCount++;
 8004862:	4b3b      	ldr	r3, [pc, #236]	; (8004950 <sim7600_powerProcessor+0x2cc>)
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	3301      	adds	r3, #1
 8004868:	b2da      	uxtb	r2, r3
 800486a:	4b39      	ldr	r3, [pc, #228]	; (8004950 <sim7600_powerProcessor+0x2cc>)
 800486c:	701a      	strb	r2, [r3, #0]
			sprintf(pbuffer, "SIM7600 Main Power Off %lu \r\n", (long unsigned int)powerOffCount);
 800486e:	4b38      	ldr	r3, [pc, #224]	; (8004950 <sim7600_powerProcessor+0x2cc>)
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	461a      	mov	r2, r3
 8004874:	4937      	ldr	r1, [pc, #220]	; (8004954 <sim7600_powerProcessor+0x2d0>)
 8004876:	4833      	ldr	r0, [pc, #204]	; (8004944 <sim7600_powerProcessor+0x2c0>)
 8004878:	f00d f9a8 	bl	8011bcc <siprintf>
			Uart_SendString(pbuffer, pc_uart);
 800487c:	4929      	ldr	r1, [pc, #164]	; (8004924 <sim7600_powerProcessor+0x2a0>)
 800487e:	4831      	ldr	r0, [pc, #196]	; (8004944 <sim7600_powerProcessor+0x2c0>)
 8004880:	f7fd f888 	bl	8001994 <Uart_SendString>
			HAL_GPIO_WritePin(GPIO_OUT_4_1EN_GPIO_Port, GPIO_OUT_4_1EN_Pin, GPIO_PIN_RESET);
 8004884:	2200      	movs	r2, #0
 8004886:	2110      	movs	r1, #16
 8004888:	4829      	ldr	r0, [pc, #164]	; (8004930 <sim7600_powerProcessor+0x2ac>)
 800488a:	f003 fadf 	bl	8007e4c <HAL_GPIO_WritePin>
			timer5_ms_restart();
 800488e:	f7fe fb5b 	bl	8002f48 <timer5_ms_restart>

			if(powerOffCount >= 5){
 8004892:	4b2f      	ldr	r3, [pc, #188]	; (8004950 <sim7600_powerProcessor+0x2cc>)
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	2b04      	cmp	r3, #4
 8004898:	d907      	bls.n	80048aa <sim7600_powerProcessor+0x226>
				Uart_SendString("SIM7600 Main Power Off > 5 - Goto Shutdown\r\n", pc_uart);
 800489a:	4922      	ldr	r1, [pc, #136]	; (8004924 <sim7600_powerProcessor+0x2a0>)
 800489c:	482e      	ldr	r0, [pc, #184]	; (8004958 <sim7600_powerProcessor+0x2d4>)
 800489e:	f7fd f879 	bl	8001994 <Uart_SendString>
				powerState = POWER_SCHEDULE_SHUTDOWN;
 80048a2:	4b19      	ldr	r3, [pc, #100]	; (8004908 <sim7600_powerProcessor+0x284>)
 80048a4:	2208      	movs	r2, #8
 80048a6:	701a      	strb	r2, [r3, #0]
			else{
				powerState = POWER_RESTART;
				result = 0;
			}

			break;
 80048a8:	e029      	b.n	80048fe <sim7600_powerProcessor+0x27a>
				powerState = POWER_RESTART;
 80048aa:	4b17      	ldr	r3, [pc, #92]	; (8004908 <sim7600_powerProcessor+0x284>)
 80048ac:	2207      	movs	r2, #7
 80048ae:	701a      	strb	r2, [r3, #0]
				result = 0;
 80048b0:	2300      	movs	r3, #0
 80048b2:	71fb      	strb	r3, [r7, #7]
			break;
 80048b4:	e023      	b.n	80048fe <sim7600_powerProcessor+0x27a>

		case POWER_RESTART:
			if(timer5_ms_get() > 1000){
 80048b6:	f7fe fb57 	bl	8002f68 <timer5_ms_get>
 80048ba:	4603      	mov	r3, r0
 80048bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048c0:	d91c      	bls.n	80048fc <sim7600_powerProcessor+0x278>
				powerState = POWER_INIT;
 80048c2:	4b11      	ldr	r3, [pc, #68]	; (8004908 <sim7600_powerProcessor+0x284>)
 80048c4:	2200      	movs	r2, #0
 80048c6:	701a      	strb	r2, [r3, #0]
				result = 0;
 80048c8:	2300      	movs	r3, #0
 80048ca:	71fb      	strb	r3, [r7, #7]
			}
			break;
 80048cc:	e016      	b.n	80048fc <sim7600_powerProcessor+0x278>

		case POWER_SCHEDULE_SHUTDOWN:
			scheduleShutdown(5000);
 80048ce:	f241 3088 	movw	r0, #5000	; 0x1388
 80048d2:	f7ff fe99 	bl	8004608 <scheduleShutdown>
			powerState = POWER_WAIT_SHUTDOWN;
 80048d6:	4b0c      	ldr	r3, [pc, #48]	; (8004908 <sim7600_powerProcessor+0x284>)
 80048d8:	2209      	movs	r2, #9
 80048da:	701a      	strb	r2, [r3, #0]
			scheduleShutdown(5000);
 80048dc:	f241 3088 	movw	r0, #5000	; 0x1388
 80048e0:	f7ff fe92 	bl	8004608 <scheduleShutdown>
			result = 0;
 80048e4:	2300      	movs	r3, #0
 80048e6:	71fb      	strb	r3, [r7, #7]
			break;
 80048e8:	e009      	b.n	80048fe <sim7600_powerProcessor+0x27a>
		case POWER_WAIT_SHUTDOWN:
			result = 0;
 80048ea:	2300      	movs	r3, #0
 80048ec:	71fb      	strb	r3, [r7, #7]
			break;
 80048ee:	e006      	b.n	80048fe <sim7600_powerProcessor+0x27a>
			break;
 80048f0:	bf00      	nop
 80048f2:	e004      	b.n	80048fe <sim7600_powerProcessor+0x27a>
			break;
 80048f4:	bf00      	nop
 80048f6:	e002      	b.n	80048fe <sim7600_powerProcessor+0x27a>
			break;
 80048f8:	bf00      	nop
 80048fa:	e000      	b.n	80048fe <sim7600_powerProcessor+0x27a>
			break;
 80048fc:	bf00      	nop

	}


	return result;
 80048fe:	79fb      	ldrb	r3, [r7, #7]

}
 8004900:	4618      	mov	r0, r3
 8004902:	3708      	adds	r7, #8
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	2000782a 	.word	0x2000782a
 800490c:	20007826 	.word	0x20007826
 8004910:	20007827 	.word	0x20007827
 8004914:	20007828 	.word	0x20007828
 8004918:	20007829 	.word	0x20007829
 800491c:	200077b4 	.word	0x200077b4
 8004920:	40020400 	.word	0x40020400
 8004924:	20003fd8 	.word	0x20003fd8
 8004928:	08018528 	.word	0x08018528
 800492c:	0801853c 	.word	0x0801853c
 8004930:	40020000 	.word	0x40020000
 8004934:	08018554 	.word	0x08018554
 8004938:	08018570 	.word	0x08018570
 800493c:	20007820 	.word	0x20007820
 8004940:	08018588 	.word	0x08018588
 8004944:	200077b8 	.word	0x200077b8
 8004948:	080185b0 	.word	0x080185b0
 800494c:	080185dc 	.word	0x080185dc
 8004950:	20007a1d 	.word	0x20007a1d
 8004954:	080185f8 	.word	0x080185f8
 8004958:	08018618 	.word	0x08018618

0800495c <sim7600_commandProcessor>:

void sim7600_commandProcessor(void){
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af02      	add	r7, sp, #8
	switch (cmdState){
 8004962:	4bb1      	ldr	r3, [pc, #708]	; (8004c28 <sim7600_commandProcessor+0x2cc>)
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	2b20      	cmp	r3, #32
 8004968:	f200 842f 	bhi.w	80051ca <sim7600_commandProcessor+0x86e>
 800496c:	a201      	add	r2, pc, #4	; (adr r2, 8004974 <sim7600_commandProcessor+0x18>)
 800496e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004972:	bf00      	nop
 8004974:	080049f9 	.word	0x080049f9
 8004978:	08004a6d 	.word	0x08004a6d
 800497c:	080051cb 	.word	0x080051cb
 8004980:	08004ac5 	.word	0x08004ac5
 8004984:	08004b33 	.word	0x08004b33
 8004988:	08004b6d 	.word	0x08004b6d
 800498c:	0800517d 	.word	0x0800517d
 8004990:	08004a9d 	.word	0x08004a9d
 8004994:	08004aa9 	.word	0x08004aa9
 8004998:	08004ba9 	.word	0x08004ba9
 800499c:	08004bbd 	.word	0x08004bbd
 80049a0:	08004beb 	.word	0x08004beb
 80049a4:	08004ca1 	.word	0x08004ca1
 80049a8:	08004cd5 	.word	0x08004cd5
 80049ac:	08004cf5 	.word	0x08004cf5
 80049b0:	08004d15 	.word	0x08004d15
 80049b4:	08004d35 	.word	0x08004d35
 80049b8:	08004e19 	.word	0x08004e19
 80049bc:	08004ebf 	.word	0x08004ebf
 80049c0:	08004ee3 	.word	0x08004ee3
 80049c4:	08004fe7 	.word	0x08004fe7
 80049c8:	0800509d 	.word	0x0800509d
 80049cc:	08005109 	.word	0x08005109
 80049d0:	08005149 	.word	0x08005149
 80049d4:	080050b7 	.word	0x080050b7
 80049d8:	080050eb 	.word	0x080050eb
 80049dc:	08004b03 	.word	0x08004b03
 80049e0:	08004b1b 	.word	0x08004b1b
 80049e4:	08004ae5 	.word	0x08004ae5
 80049e8:	0800518d 	.word	0x0800518d
 80049ec:	080051b3 	.word	0x080051b3
 80049f0:	08005013 	.word	0x08005013
 80049f4:	08004dd9 	.word	0x08004dd9
		case CMD_INIT:
			if(readyState == STATE_OK){
 80049f8:	4b8c      	ldr	r3, [pc, #560]	; (8004c2c <sim7600_commandProcessor+0x2d0>)
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d114      	bne.n	8004a2a <sim7600_commandProcessor+0xce>
				Uart_SendString("RDY State OK\r\n", pc_uart);
 8004a00:	498b      	ldr	r1, [pc, #556]	; (8004c30 <sim7600_commandProcessor+0x2d4>)
 8004a02:	488c      	ldr	r0, [pc, #560]	; (8004c34 <sim7600_commandProcessor+0x2d8>)
 8004a04:	f7fc ffc6 	bl	8001994 <Uart_SendString>
				pauseTimeout = 1000;
 8004a08:	4b8b      	ldr	r3, [pc, #556]	; (8004c38 <sim7600_commandProcessor+0x2dc>)
 8004a0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a0e:	801a      	strh	r2, [r3, #0]
				pauseNextState = CMD_AT;
 8004a10:	4b8a      	ldr	r3, [pc, #552]	; (8004c3c <sim7600_commandProcessor+0x2e0>)
 8004a12:	2203      	movs	r2, #3
 8004a14:	701a      	strb	r2, [r3, #0]
				cmdState = CMD_PAUSE;
 8004a16:	4b84      	ldr	r3, [pc, #528]	; (8004c28 <sim7600_commandProcessor+0x2cc>)
 8004a18:	2207      	movs	r2, #7
 8004a1a:	701a      	strb	r2, [r3, #0]
				cgsn_flag = 0;
 8004a1c:	4b88      	ldr	r3, [pc, #544]	; (8004c40 <sim7600_commandProcessor+0x2e4>)
 8004a1e:	2200      	movs	r2, #0
 8004a20:	701a      	strb	r2, [r3, #0]
				setUpdateStationListFlag(1);
 8004a22:	2001      	movs	r0, #1
 8004a24:	f7ff f9f6 	bl	8003e14 <setUpdateStationListFlag>
				powerState = POWER_ERR;
			}



			break;
 8004a28:	e3cf      	b.n	80051ca <sim7600_commandProcessor+0x86e>
			else if(pauseRDYCount < 10){
 8004a2a:	4b86      	ldr	r3, [pc, #536]	; (8004c44 <sim7600_commandProcessor+0x2e8>)
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	2b09      	cmp	r3, #9
 8004a30:	d814      	bhi.n	8004a5c <sim7600_commandProcessor+0x100>
				Uart_SendString("Waiting for RDY\r\n", pc_uart);
 8004a32:	497f      	ldr	r1, [pc, #508]	; (8004c30 <sim7600_commandProcessor+0x2d4>)
 8004a34:	4884      	ldr	r0, [pc, #528]	; (8004c48 <sim7600_commandProcessor+0x2ec>)
 8004a36:	f7fc ffad 	bl	8001994 <Uart_SendString>
				pauseTimeout = 1000;
 8004a3a:	4b7f      	ldr	r3, [pc, #508]	; (8004c38 <sim7600_commandProcessor+0x2dc>)
 8004a3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a40:	801a      	strh	r2, [r3, #0]
				pauseNextState = CMD_INIT;
 8004a42:	4b7e      	ldr	r3, [pc, #504]	; (8004c3c <sim7600_commandProcessor+0x2e0>)
 8004a44:	2200      	movs	r2, #0
 8004a46:	701a      	strb	r2, [r3, #0]
				cmdState = CMD_PAUSE;
 8004a48:	4b77      	ldr	r3, [pc, #476]	; (8004c28 <sim7600_commandProcessor+0x2cc>)
 8004a4a:	2207      	movs	r2, #7
 8004a4c:	701a      	strb	r2, [r3, #0]
				pauseRDYCount++;
 8004a4e:	4b7d      	ldr	r3, [pc, #500]	; (8004c44 <sim7600_commandProcessor+0x2e8>)
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	3301      	adds	r3, #1
 8004a54:	b2da      	uxtb	r2, r3
 8004a56:	4b7b      	ldr	r3, [pc, #492]	; (8004c44 <sim7600_commandProcessor+0x2e8>)
 8004a58:	701a      	strb	r2, [r3, #0]
			break;
 8004a5a:	e3b6      	b.n	80051ca <sim7600_commandProcessor+0x86e>
				Uart_SendString("Waiting for RDY Timed Out - Switching to Power Error\r\n", pc_uart);
 8004a5c:	4974      	ldr	r1, [pc, #464]	; (8004c30 <sim7600_commandProcessor+0x2d4>)
 8004a5e:	487b      	ldr	r0, [pc, #492]	; (8004c4c <sim7600_commandProcessor+0x2f0>)
 8004a60:	f7fc ff98 	bl	8001994 <Uart_SendString>
				powerState = POWER_ERR;
 8004a64:	4b7a      	ldr	r3, [pc, #488]	; (8004c50 <sim7600_commandProcessor+0x2f4>)
 8004a66:	2205      	movs	r2, #5
 8004a68:	701a      	strb	r2, [r3, #0]
			break;
 8004a6a:	e3ae      	b.n	80051ca <sim7600_commandProcessor+0x86e>

		case CMD_WAIT:
			if(!wait.waiting){
 8004a6c:	4b79      	ldr	r3, [pc, #484]	; (8004c54 <sim7600_commandProcessor+0x2f8>)
 8004a6e:	7c1b      	ldrb	r3, [r3, #16]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d105      	bne.n	8004a80 <sim7600_commandProcessor+0x124>
				setCommandState(wait.nextState_success);
 8004a74:	4b77      	ldr	r3, [pc, #476]	; (8004c54 <sim7600_commandProcessor+0x2f8>)
 8004a76:	799b      	ldrb	r3, [r3, #6]
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f000 fe63 	bl	8005744 <setCommandState>
			}
			else if(timer2_ms_get() > wait.timeout){//we have timed out
				setCommandState(wait.nextState_timeout);
//				Debug("Wait Timeout\r\n");
			}
			break;
 8004a7e:	e39d      	b.n	80051bc <sim7600_commandProcessor+0x860>
			else if(timer2_ms_get() > wait.timeout){//we have timed out
 8004a80:	f7fe fa3a 	bl	8002ef8 <timer2_ms_get>
 8004a84:	4602      	mov	r2, r0
 8004a86:	4b73      	ldr	r3, [pc, #460]	; (8004c54 <sim7600_commandProcessor+0x2f8>)
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	f240 8396 	bls.w	80051bc <sim7600_commandProcessor+0x860>
				setCommandState(wait.nextState_timeout);
 8004a90:	4b70      	ldr	r3, [pc, #448]	; (8004c54 <sim7600_commandProcessor+0x2f8>)
 8004a92:	7a1b      	ldrb	r3, [r3, #8]
 8004a94:	4618      	mov	r0, r3
 8004a96:	f000 fe55 	bl	8005744 <setCommandState>
			break;
 8004a9a:	e38f      	b.n	80051bc <sim7600_commandProcessor+0x860>

		case CMD_PAUSE:
			timer2_ms_restart();
 8004a9c:	f7fe fa1c 	bl	8002ed8 <timer2_ms_restart>
//			Debug("Pause\r\n");
			setCommandState(CMD_PAUSE_WAIT);
 8004aa0:	2008      	movs	r0, #8
 8004aa2:	f000 fe4f 	bl	8005744 <setCommandState>
			break;
 8004aa6:	e390      	b.n	80051ca <sim7600_commandProcessor+0x86e>

		case CMD_PAUSE_WAIT:
			if(timer2_ms_get() > pauseTimeout){//we have timed out
 8004aa8:	f7fe fa26 	bl	8002ef8 <timer2_ms_get>
 8004aac:	4603      	mov	r3, r0
 8004aae:	4a62      	ldr	r2, [pc, #392]	; (8004c38 <sim7600_commandProcessor+0x2dc>)
 8004ab0:	8812      	ldrh	r2, [r2, #0]
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	f240 8384 	bls.w	80051c0 <sim7600_commandProcessor+0x864>
//				Debug("Pause Timeout\r\n");
				setCommandState(pauseNextState);
 8004ab8:	4b60      	ldr	r3, [pc, #384]	; (8004c3c <sim7600_commandProcessor+0x2e0>)
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	4618      	mov	r0, r3
 8004abe:	f000 fe41 	bl	8005744 <setCommandState>
			}
			break;
 8004ac2:	e37d      	b.n	80051c0 <sim7600_commandProcessor+0x864>

		case CMD_AT:
			Uart_SendString("Sending AT\r\n", pc_uart);
 8004ac4:	495a      	ldr	r1, [pc, #360]	; (8004c30 <sim7600_commandProcessor+0x2d4>)
 8004ac6:	4864      	ldr	r0, [pc, #400]	; (8004c58 <sim7600_commandProcessor+0x2fc>)
 8004ac8:	f7fc ff64 	bl	8001994 <Uart_SendString>
			sim7600_command_pause_wait("AT\r\n", 1000, "OK", CMD_CGSN, CMD_ERR, 10);
 8004acc:	230a      	movs	r3, #10
 8004ace:	9301      	str	r3, [sp, #4]
 8004ad0:	2306      	movs	r3, #6
 8004ad2:	9300      	str	r3, [sp, #0]
 8004ad4:	231c      	movs	r3, #28
 8004ad6:	4a61      	ldr	r2, [pc, #388]	; (8004c5c <sim7600_commandProcessor+0x300>)
 8004ad8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004adc:	4860      	ldr	r0, [pc, #384]	; (8004c60 <sim7600_commandProcessor+0x304>)
 8004ade:	f000 fbb1 	bl	8005244 <sim7600_command_pause_wait>
			break;
 8004ae2:	e372      	b.n	80051ca <sim7600_commandProcessor+0x86e>

		case CMD_CGSN:
			//get imei
			cgsn_flag = 1;
 8004ae4:	4b56      	ldr	r3, [pc, #344]	; (8004c40 <sim7600_commandProcessor+0x2e4>)
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	701a      	strb	r2, [r3, #0]
			sim7600_command_pause_wait("AT+CGSN\r\n", 1000, "OK", CMD_CONFIG_CTZU, CMD_ERR, 10);
 8004aea:	230a      	movs	r3, #10
 8004aec:	9301      	str	r3, [sp, #4]
 8004aee:	2306      	movs	r3, #6
 8004af0:	9300      	str	r3, [sp, #0]
 8004af2:	231a      	movs	r3, #26
 8004af4:	4a59      	ldr	r2, [pc, #356]	; (8004c5c <sim7600_commandProcessor+0x300>)
 8004af6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004afa:	485a      	ldr	r0, [pc, #360]	; (8004c64 <sim7600_commandProcessor+0x308>)
 8004afc:	f000 fba2 	bl	8005244 <sim7600_command_pause_wait>
			break;
 8004b00:	e363      	b.n	80051ca <sim7600_commandProcessor+0x86e>

		case CMD_CONFIG_CTZU:
			//	AT+CTZU=1 set automatic time update from network so AT_CCLK works
			sim7600_command_pause_wait("AT+CTZU=1\r\n", 1000, "OK", CMD_CONFIG_CMGF, CMD_ERR, 10);
 8004b02:	230a      	movs	r3, #10
 8004b04:	9301      	str	r3, [sp, #4]
 8004b06:	2306      	movs	r3, #6
 8004b08:	9300      	str	r3, [sp, #0]
 8004b0a:	231b      	movs	r3, #27
 8004b0c:	4a53      	ldr	r2, [pc, #332]	; (8004c5c <sim7600_commandProcessor+0x300>)
 8004b0e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004b12:	4855      	ldr	r0, [pc, #340]	; (8004c68 <sim7600_commandProcessor+0x30c>)
 8004b14:	f000 fb96 	bl	8005244 <sim7600_command_pause_wait>
			break;
 8004b18:	e357      	b.n	80051ca <sim7600_commandProcessor+0x86e>

		case CMD_CONFIG_CMGF:
			//	AT+CMGF=1 SMS in text mode

//			sim7600_command_pause_wait("AT+CMGF=1\r\n", 1000, "OK", CMD_CCLK, CMD_ERR, 10);
			sim7600_command_pause_wait("AT+CMGF=1\r\n", 1000, "OK", CMD_CPIN, CMD_ERR, 10);
 8004b1a:	230a      	movs	r3, #10
 8004b1c:	9301      	str	r3, [sp, #4]
 8004b1e:	2306      	movs	r3, #6
 8004b20:	9300      	str	r3, [sp, #0]
 8004b22:	2309      	movs	r3, #9
 8004b24:	4a4d      	ldr	r2, [pc, #308]	; (8004c5c <sim7600_commandProcessor+0x300>)
 8004b26:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004b2a:	4850      	ldr	r0, [pc, #320]	; (8004c6c <sim7600_commandProcessor+0x310>)
 8004b2c:	f000 fb8a 	bl	8005244 <sim7600_command_pause_wait>
//			pauseCommmandSate(CMD_CPIN, 10);
			break;
 8004b30:	e34b      	b.n	80051ca <sim7600_commandProcessor+0x86e>

//skip over getting time from network. Next two states not used...
		case CMD_CCLK:

			if(cclkAttempts >= 5){
 8004b32:	4b4f      	ldr	r3, [pc, #316]	; (8004c70 <sim7600_commandProcessor+0x314>)
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	2b04      	cmp	r3, #4
 8004b38:	d90b      	bls.n	8004b52 <sim7600_commandProcessor+0x1f6>
				Uart_SendString("Timestate from network attempts > 5. Continuing regardless. Will try for server time.\r\n", pc_uart);
 8004b3a:	493d      	ldr	r1, [pc, #244]	; (8004c30 <sim7600_commandProcessor+0x2d4>)
 8004b3c:	484d      	ldr	r0, [pc, #308]	; (8004c74 <sim7600_commandProcessor+0x318>)
 8004b3e:	f7fc ff29 	bl	8001994 <Uart_SendString>
				pauseCommmandSate(CMD_CPIN, 10);
 8004b42:	210a      	movs	r1, #10
 8004b44:	2009      	movs	r0, #9
 8004b46:	f000 fe0d 	bl	8005764 <pauseCommmandSate>
				cclkAttempts = 0;
 8004b4a:	4b49      	ldr	r3, [pc, #292]	; (8004c70 <sim7600_commandProcessor+0x314>)
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	701a      	strb	r2, [r3, #0]
				break;
 8004b50:	e33b      	b.n	80051ca <sim7600_commandProcessor+0x86e>
			}

			sim7600_command_pause_wait("AT+CCLK?\r\n", 1000, "OK", CMD_CCLK_CHECK, CMD_ERR, 1000);
 8004b52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b56:	9301      	str	r3, [sp, #4]
 8004b58:	2306      	movs	r3, #6
 8004b5a:	9300      	str	r3, [sp, #0]
 8004b5c:	2305      	movs	r3, #5
 8004b5e:	4a3f      	ldr	r2, [pc, #252]	; (8004c5c <sim7600_commandProcessor+0x300>)
 8004b60:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004b64:	4844      	ldr	r0, [pc, #272]	; (8004c78 <sim7600_commandProcessor+0x31c>)
 8004b66:	f000 fb6d 	bl	8005244 <sim7600_command_pause_wait>

			break;
 8004b6a:	e32e      	b.n	80051ca <sim7600_commandProcessor+0x86e>

		case CMD_CCLK_CHECK:

			if(getTimeState() == TIMESTATE_OK_NITZ){
 8004b6c:	f001 fcbe 	bl	80064ec <getTimeState>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d108      	bne.n	8004b88 <sim7600_commandProcessor+0x22c>
				Uart_SendString("Timestate from network success\r\n", pc_uart);
 8004b76:	492e      	ldr	r1, [pc, #184]	; (8004c30 <sim7600_commandProcessor+0x2d4>)
 8004b78:	4840      	ldr	r0, [pc, #256]	; (8004c7c <sim7600_commandProcessor+0x320>)
 8004b7a:	f7fc ff0b 	bl	8001994 <Uart_SendString>
				pauseCommmandSate(CMD_CPIN, 10);
 8004b7e:	210a      	movs	r1, #10
 8004b80:	2009      	movs	r0, #9
 8004b82:	f000 fdef 	bl	8005764 <pauseCommmandSate>
				Uart_SendString("Timestate from network not received. Trying again\r\n", pc_uart);
				cclkAttempts ++;
				pauseCommmandSate(CMD_CCLK, 2000);
			}

			break;
 8004b86:	e320      	b.n	80051ca <sim7600_commandProcessor+0x86e>
				Uart_SendString("Timestate from network not received. Trying again\r\n", pc_uart);
 8004b88:	4929      	ldr	r1, [pc, #164]	; (8004c30 <sim7600_commandProcessor+0x2d4>)
 8004b8a:	483d      	ldr	r0, [pc, #244]	; (8004c80 <sim7600_commandProcessor+0x324>)
 8004b8c:	f7fc ff02 	bl	8001994 <Uart_SendString>
				cclkAttempts ++;
 8004b90:	4b37      	ldr	r3, [pc, #220]	; (8004c70 <sim7600_commandProcessor+0x314>)
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	3301      	adds	r3, #1
 8004b96:	b2da      	uxtb	r2, r3
 8004b98:	4b35      	ldr	r3, [pc, #212]	; (8004c70 <sim7600_commandProcessor+0x314>)
 8004b9a:	701a      	strb	r2, [r3, #0]
				pauseCommmandSate(CMD_CCLK, 2000);
 8004b9c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8004ba0:	2004      	movs	r0, #4
 8004ba2:	f000 fddf 	bl	8005764 <pauseCommmandSate>
			break;
 8004ba6:	e310      	b.n	80051ca <sim7600_commandProcessor+0x86e>

//			skip to here

		case CMD_CPIN:
			sim7600_command_wait("AT+CPIN?\r\n", 1000, "OK", CMD_CPIN_CHECK, CMD_ERR);
 8004ba8:	2306      	movs	r3, #6
 8004baa:	9300      	str	r3, [sp, #0]
 8004bac:	230a      	movs	r3, #10
 8004bae:	4a2b      	ldr	r2, [pc, #172]	; (8004c5c <sim7600_commandProcessor+0x300>)
 8004bb0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004bb4:	4833      	ldr	r0, [pc, #204]	; (8004c84 <sim7600_commandProcessor+0x328>)
 8004bb6:	f000 fb63 	bl	8005280 <sim7600_command_wait>
			break;
 8004bba:	e306      	b.n	80051ca <sim7600_commandProcessor+0x86e>

		case CMD_CPIN_CHECK:
			if(cpinState == STATE_OK){
 8004bbc:	4b32      	ldr	r3, [pc, #200]	; (8004c88 <sim7600_commandProcessor+0x32c>)
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d108      	bne.n	8004bd6 <sim7600_commandProcessor+0x27a>
				csqCheckCount = 0;
 8004bc4:	4b31      	ldr	r3, [pc, #196]	; (8004c8c <sim7600_commandProcessor+0x330>)
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	701a      	strb	r2, [r3, #0]
				pauseCommmandSate(CMD_CSQ, 1000);
 8004bca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004bce:	200b      	movs	r0, #11
 8004bd0:	f000 fdc8 	bl	8005764 <pauseCommmandSate>
			else{
				Uart_SendString("CPIN not ok. Check SIM Card is properly inserted\r\n", pc_uart);
				pauseCommmandSate(CMD_ERR, 2000);
			}

			break;
 8004bd4:	e2f9      	b.n	80051ca <sim7600_commandProcessor+0x86e>
				Uart_SendString("CPIN not ok. Check SIM Card is properly inserted\r\n", pc_uart);
 8004bd6:	4916      	ldr	r1, [pc, #88]	; (8004c30 <sim7600_commandProcessor+0x2d4>)
 8004bd8:	482d      	ldr	r0, [pc, #180]	; (8004c90 <sim7600_commandProcessor+0x334>)
 8004bda:	f7fc fedb 	bl	8001994 <Uart_SendString>
				pauseCommmandSate(CMD_ERR, 2000);
 8004bde:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8004be2:	2006      	movs	r0, #6
 8004be4:	f000 fdbe 	bl	8005764 <pauseCommmandSate>
			break;
 8004be8:	e2ef      	b.n	80051ca <sim7600_commandProcessor+0x86e>

		case CMD_CSQ:
			if(csqCheckCount > CSQ_CHECK_COUNTS){
 8004bea:	4b28      	ldr	r3, [pc, #160]	; (8004c8c <sim7600_commandProcessor+0x330>)
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	2b3c      	cmp	r3, #60	; 0x3c
 8004bf0:	d909      	bls.n	8004c06 <sim7600_commandProcessor+0x2aa>
				Uart_SendString("CSQ Check Counts exceeded, try to restart modem.\r\n", pc_uart);
 8004bf2:	490f      	ldr	r1, [pc, #60]	; (8004c30 <sim7600_commandProcessor+0x2d4>)
 8004bf4:	4827      	ldr	r0, [pc, #156]	; (8004c94 <sim7600_commandProcessor+0x338>)
 8004bf6:	f7fc fecd 	bl	8001994 <Uart_SendString>
				pauseCommmandSate(CMD_ERR, 2000);
 8004bfa:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8004bfe:	2006      	movs	r0, #6
 8004c00:	f000 fdb0 	bl	8005764 <pauseCommmandSate>
				sim7600_command_wait("AT+CSQ\r\n", 1000, "OK\r\n", CMD_CSQ_CHECK, CMD_ERR);
				csqCheckCount++;
			}


			break;
 8004c04:	e2e1      	b.n	80051ca <sim7600_commandProcessor+0x86e>
				sim7600_command_wait("AT+CSQ\r\n", 1000, "OK\r\n", CMD_CSQ_CHECK, CMD_ERR);
 8004c06:	2306      	movs	r3, #6
 8004c08:	9300      	str	r3, [sp, #0]
 8004c0a:	230c      	movs	r3, #12
 8004c0c:	4a22      	ldr	r2, [pc, #136]	; (8004c98 <sim7600_commandProcessor+0x33c>)
 8004c0e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004c12:	4822      	ldr	r0, [pc, #136]	; (8004c9c <sim7600_commandProcessor+0x340>)
 8004c14:	f000 fb34 	bl	8005280 <sim7600_command_wait>
				csqCheckCount++;
 8004c18:	4b1c      	ldr	r3, [pc, #112]	; (8004c8c <sim7600_commandProcessor+0x330>)
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	b2da      	uxtb	r2, r3
 8004c20:	4b1a      	ldr	r3, [pc, #104]	; (8004c8c <sim7600_commandProcessor+0x330>)
 8004c22:	701a      	strb	r2, [r3, #0]
			break;
 8004c24:	e2d1      	b.n	80051ca <sim7600_commandProcessor+0x86e>
 8004c26:	bf00      	nop
 8004c28:	20007829 	.word	0x20007829
 8004c2c:	20007826 	.word	0x20007826
 8004c30:	20003fd8 	.word	0x20003fd8
 8004c34:	08018648 	.word	0x08018648
 8004c38:	20007844 	.word	0x20007844
 8004c3c:	20007846 	.word	0x20007846
 8004c40:	2000781c 	.word	0x2000781c
 8004c44:	20007a1a 	.word	0x20007a1a
 8004c48:	08018658 	.word	0x08018658
 8004c4c:	0801866c 	.word	0x0801866c
 8004c50:	2000782a 	.word	0x2000782a
 8004c54:	2000782c 	.word	0x2000782c
 8004c58:	080186a4 	.word	0x080186a4
 8004c5c:	080186b4 	.word	0x080186b4
 8004c60:	080186b8 	.word	0x080186b8
 8004c64:	080186c0 	.word	0x080186c0
 8004c68:	080186cc 	.word	0x080186cc
 8004c6c:	080186d8 	.word	0x080186d8
 8004c70:	20007a15 	.word	0x20007a15
 8004c74:	080186e4 	.word	0x080186e4
 8004c78:	0801873c 	.word	0x0801873c
 8004c7c:	08018748 	.word	0x08018748
 8004c80:	0801876c 	.word	0x0801876c
 8004c84:	080187a0 	.word	0x080187a0
 8004c88:	20007827 	.word	0x20007827
 8004c8c:	20007825 	.word	0x20007825
 8004c90:	080187ac 	.word	0x080187ac
 8004c94:	080187e0 	.word	0x080187e0
 8004c98:	08018814 	.word	0x08018814
 8004c9c:	0801881c 	.word	0x0801881c

		case CMD_CSQ_CHECK:
			if(csq == 99 || csq == 199){
 8004ca0:	4ba6      	ldr	r3, [pc, #664]	; (8004f3c <sim7600_commandProcessor+0x5e0>)
 8004ca2:	881b      	ldrh	r3, [r3, #0]
 8004ca4:	2b63      	cmp	r3, #99	; 0x63
 8004ca6:	d003      	beq.n	8004cb0 <sim7600_commandProcessor+0x354>
 8004ca8:	4ba4      	ldr	r3, [pc, #656]	; (8004f3c <sim7600_commandProcessor+0x5e0>)
 8004caa:	881b      	ldrh	r3, [r3, #0]
 8004cac:	2bc7      	cmp	r3, #199	; 0xc7
 8004cae:	d109      	bne.n	8004cc4 <sim7600_commandProcessor+0x368>
				Uart_SendString("Signal Strength not known or not detectable (CSQ equals 99/199). Check 4G antenna\r\n", pc_uart);
 8004cb0:	49a3      	ldr	r1, [pc, #652]	; (8004f40 <sim7600_commandProcessor+0x5e4>)
 8004cb2:	48a4      	ldr	r0, [pc, #656]	; (8004f44 <sim7600_commandProcessor+0x5e8>)
 8004cb4:	f7fc fe6e 	bl	8001994 <Uart_SendString>
				pauseCommmandSate(CMD_CSQ, 2000);
 8004cb8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8004cbc:	200b      	movs	r0, #11
 8004cbe:	f000 fd51 	bl	8005764 <pauseCommmandSate>
			else{
				pauseCommmandSate(CMD_CGREG, 10);
				csqCheckCount = 0;
			}

			break;
 8004cc2:	e282      	b.n	80051ca <sim7600_commandProcessor+0x86e>
				pauseCommmandSate(CMD_CGREG, 10);
 8004cc4:	210a      	movs	r1, #10
 8004cc6:	200d      	movs	r0, #13
 8004cc8:	f000 fd4c 	bl	8005764 <pauseCommmandSate>
				csqCheckCount = 0;
 8004ccc:	4b9e      	ldr	r3, [pc, #632]	; (8004f48 <sim7600_commandProcessor+0x5ec>)
 8004cce:	2200      	movs	r2, #0
 8004cd0:	701a      	strb	r2, [r3, #0]
			break;
 8004cd2:	e27a      	b.n	80051ca <sim7600_commandProcessor+0x86e>

		case CMD_CGREG:
			Uart_SendString("Send CGREG\r\n", pc_uart);
 8004cd4:	499a      	ldr	r1, [pc, #616]	; (8004f40 <sim7600_commandProcessor+0x5e4>)
 8004cd6:	489d      	ldr	r0, [pc, #628]	; (8004f4c <sim7600_commandProcessor+0x5f0>)
 8004cd8:	f7fc fe5c 	bl	8001994 <Uart_SendString>
			sim7600_command_pause_wait("AT+CGREG?\r\n", 1000, "OK", CMD_COPS, CMD_ERR,100);
 8004cdc:	2364      	movs	r3, #100	; 0x64
 8004cde:	9301      	str	r3, [sp, #4]
 8004ce0:	2306      	movs	r3, #6
 8004ce2:	9300      	str	r3, [sp, #0]
 8004ce4:	230e      	movs	r3, #14
 8004ce6:	4a9a      	ldr	r2, [pc, #616]	; (8004f50 <sim7600_commandProcessor+0x5f4>)
 8004ce8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004cec:	4899      	ldr	r0, [pc, #612]	; (8004f54 <sim7600_commandProcessor+0x5f8>)
 8004cee:	f000 faa9 	bl	8005244 <sim7600_command_pause_wait>
			break;
 8004cf2:	e26a      	b.n	80051ca <sim7600_commandProcessor+0x86e>

		case CMD_COPS:
			Uart_SendString("Send COPS\r\n", pc_uart);
 8004cf4:	4992      	ldr	r1, [pc, #584]	; (8004f40 <sim7600_commandProcessor+0x5e4>)
 8004cf6:	4898      	ldr	r0, [pc, #608]	; (8004f58 <sim7600_commandProcessor+0x5fc>)
 8004cf8:	f7fc fe4c 	bl	8001994 <Uart_SendString>
			sim7600_command_pause_wait("AT+COPS?\r\n", 1000, "OK", CMD_CGACT, CMD_ERR,100);
 8004cfc:	2364      	movs	r3, #100	; 0x64
 8004cfe:	9301      	str	r3, [sp, #4]
 8004d00:	2306      	movs	r3, #6
 8004d02:	9300      	str	r3, [sp, #0]
 8004d04:	230f      	movs	r3, #15
 8004d06:	4a92      	ldr	r2, [pc, #584]	; (8004f50 <sim7600_commandProcessor+0x5f4>)
 8004d08:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004d0c:	4893      	ldr	r0, [pc, #588]	; (8004f5c <sim7600_commandProcessor+0x600>)
 8004d0e:	f000 fa99 	bl	8005244 <sim7600_command_pause_wait>
			break;
 8004d12:	e25a      	b.n	80051ca <sim7600_commandProcessor+0x86e>

		case CMD_CGACT:
			Uart_SendString("Send CGACT\r\n", pc_uart);
 8004d14:	498a      	ldr	r1, [pc, #552]	; (8004f40 <sim7600_commandProcessor+0x5e4>)
 8004d16:	4892      	ldr	r0, [pc, #584]	; (8004f60 <sim7600_commandProcessor+0x604>)
 8004d18:	f7fc fe3c 	bl	8001994 <Uart_SendString>
			sim7600_command_pause_wait("AT+CGACT=1,1\r\n", 10000, "OK", CMD_CMGR, CMD_ERR,100);
 8004d1c:	2364      	movs	r3, #100	; 0x64
 8004d1e:	9301      	str	r3, [sp, #4]
 8004d20:	2306      	movs	r3, #6
 8004d22:	9300      	str	r3, [sp, #0]
 8004d24:	2318      	movs	r3, #24
 8004d26:	4a8a      	ldr	r2, [pc, #552]	; (8004f50 <sim7600_commandProcessor+0x5f4>)
 8004d28:	f242 7110 	movw	r1, #10000	; 0x2710
 8004d2c:	488d      	ldr	r0, [pc, #564]	; (8004f64 <sim7600_commandProcessor+0x608>)
 8004d2e:	f000 fa89 	bl	8005244 <sim7600_command_pause_wait>
			break;
 8004d32:	e24a      	b.n	80051ca <sim7600_commandProcessor+0x86e>

		case CMD_HTTP_INIT:

			numToSend1 = numMeasurementsToSend();
 8004d34:	f7fe fa46 	bl	80031c4 <numMeasurementsToSend>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	4b8a      	ldr	r3, [pc, #552]	; (8004f68 <sim7600_commandProcessor+0x60c>)
 8004d3e:	701a      	strb	r2, [r3, #0]
//			if(getUpdateStationListFlag() || sendParamsToUpFlag == 1){
			if(getUpdateStationListFlag()){
 8004d40:	f7ff f85c 	bl	8003dfc <getUpdateStationListFlag>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d014      	beq.n	8004d74 <sim7600_commandProcessor+0x418>

				settingsToParams(urlParamBuffer);
 8004d4a:	4888      	ldr	r0, [pc, #544]	; (8004f6c <sim7600_commandProcessor+0x610>)
 8004d4c:	f7ff fc0c 	bl	8004568 <settingsToParams>
				Uart_SendString("Send HTTPINIT for settings\r\n", pc_uart);
 8004d50:	497b      	ldr	r1, [pc, #492]	; (8004f40 <sim7600_commandProcessor+0x5e4>)
 8004d52:	4887      	ldr	r0, [pc, #540]	; (8004f70 <sim7600_commandProcessor+0x614>)
 8004d54:	f7fc fe1e 	bl	8001994 <Uart_SendString>
				timer5_ms_restart();//start http timer
 8004d58:	f7fe f8f6 	bl	8002f48 <timer5_ms_restart>
				sim7600_command_pause_wait("AT+HTTPINIT\r\n", 1000, "OK", CMD_HTTP_PARA, CMD_ERR,100);
 8004d5c:	2364      	movs	r3, #100	; 0x64
 8004d5e:	9301      	str	r3, [sp, #4]
 8004d60:	2306      	movs	r3, #6
 8004d62:	9300      	str	r3, [sp, #0]
 8004d64:	2311      	movs	r3, #17
 8004d66:	4a7a      	ldr	r2, [pc, #488]	; (8004f50 <sim7600_commandProcessor+0x5f4>)
 8004d68:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004d6c:	4881      	ldr	r0, [pc, #516]	; (8004f74 <sim7600_commandProcessor+0x618>)
 8004d6e:	f000 fa69 	bl	8005244 <sim7600_command_pause_wait>
				sprintf(pbuffer, "Number of Measurements To Send = %u\r\n",numToSend1);
				Uart_SendString(pbuffer, pc_uart);
				pauseCommmandSate(CMD_CMGR, 1000);

			}
			break;
 8004d72:	e227      	b.n	80051c4 <sim7600_commandProcessor+0x868>
			else if(numToSend1 >= 1){
 8004d74:	4b7c      	ldr	r3, [pc, #496]	; (8004f68 <sim7600_commandProcessor+0x60c>)
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d011      	beq.n	8004da0 <sim7600_commandProcessor+0x444>
				Uart_SendString("Send HTTPINIT for measurements\r\n", pc_uart);
 8004d7c:	4970      	ldr	r1, [pc, #448]	; (8004f40 <sim7600_commandProcessor+0x5e4>)
 8004d7e:	487e      	ldr	r0, [pc, #504]	; (8004f78 <sim7600_commandProcessor+0x61c>)
 8004d80:	f7fc fe08 	bl	8001994 <Uart_SendString>
				timer5_ms_restart();//start http timer
 8004d84:	f7fe f8e0 	bl	8002f48 <timer5_ms_restart>
				sim7600_command_pause_wait("AT+HTTPINIT\r\n", 1000, "OK", CMD_NEXT_MEASUREMENT, CMD_ERR,10);
 8004d88:	230a      	movs	r3, #10
 8004d8a:	9301      	str	r3, [sp, #4]
 8004d8c:	2306      	movs	r3, #6
 8004d8e:	9300      	str	r3, [sp, #0]
 8004d90:	2320      	movs	r3, #32
 8004d92:	4a6f      	ldr	r2, [pc, #444]	; (8004f50 <sim7600_commandProcessor+0x5f4>)
 8004d94:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004d98:	4876      	ldr	r0, [pc, #472]	; (8004f74 <sim7600_commandProcessor+0x618>)
 8004d9a:	f000 fa53 	bl	8005244 <sim7600_command_pause_wait>
			break;
 8004d9e:	e211      	b.n	80051c4 <sim7600_commandProcessor+0x868>
			else if(timer5_ms_get() > 120000){//we have tried for two minutes, check for sms
 8004da0:	f7fe f8e2 	bl	8002f68 <timer5_ms_get>
 8004da4:	4603      	mov	r3, r0
 8004da6:	4a75      	ldr	r2, [pc, #468]	; (8004f7c <sim7600_commandProcessor+0x620>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	f240 820b 	bls.w	80051c4 <sim7600_commandProcessor+0x868>
				Uart_SendString("Waiting for a long time in http init - jumping to check for sms. \r\n", pc_uart);
 8004dae:	4964      	ldr	r1, [pc, #400]	; (8004f40 <sim7600_commandProcessor+0x5e4>)
 8004db0:	4873      	ldr	r0, [pc, #460]	; (8004f80 <sim7600_commandProcessor+0x624>)
 8004db2:	f7fc fdef 	bl	8001994 <Uart_SendString>
				sprintf(pbuffer, "Number of Measurements To Send = %u\r\n",numToSend1);
 8004db6:	4b6c      	ldr	r3, [pc, #432]	; (8004f68 <sim7600_commandProcessor+0x60c>)
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	461a      	mov	r2, r3
 8004dbc:	4971      	ldr	r1, [pc, #452]	; (8004f84 <sim7600_commandProcessor+0x628>)
 8004dbe:	4872      	ldr	r0, [pc, #456]	; (8004f88 <sim7600_commandProcessor+0x62c>)
 8004dc0:	f00c ff04 	bl	8011bcc <siprintf>
				Uart_SendString(pbuffer, pc_uart);
 8004dc4:	495e      	ldr	r1, [pc, #376]	; (8004f40 <sim7600_commandProcessor+0x5e4>)
 8004dc6:	4870      	ldr	r0, [pc, #448]	; (8004f88 <sim7600_commandProcessor+0x62c>)
 8004dc8:	f7fc fde4 	bl	8001994 <Uart_SendString>
				pauseCommmandSate(CMD_CMGR, 1000);
 8004dcc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004dd0:	2018      	movs	r0, #24
 8004dd2:	f000 fcc7 	bl	8005764 <pauseCommmandSate>
			break;
 8004dd6:	e1f5      	b.n	80051c4 <sim7600_commandProcessor+0x868>




		case CMD_NEXT_MEASUREMENT:
			sprintf(pbuffer, "Number of Measurements To Send = %u\r\n",numToSend1);
 8004dd8:	4b63      	ldr	r3, [pc, #396]	; (8004f68 <sim7600_commandProcessor+0x60c>)
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	461a      	mov	r2, r3
 8004dde:	4969      	ldr	r1, [pc, #420]	; (8004f84 <sim7600_commandProcessor+0x628>)
 8004de0:	4869      	ldr	r0, [pc, #420]	; (8004f88 <sim7600_commandProcessor+0x62c>)
 8004de2:	f00c fef3 	bl	8011bcc <siprintf>
			Uart_SendString(pbuffer, pc_uart);
 8004de6:	4956      	ldr	r1, [pc, #344]	; (8004f40 <sim7600_commandProcessor+0x5e4>)
 8004de8:	4867      	ldr	r0, [pc, #412]	; (8004f88 <sim7600_commandProcessor+0x62c>)
 8004dea:	f7fc fdd3 	bl	8001994 <Uart_SendString>
			getMeasurementToSend(&measure);
 8004dee:	4867      	ldr	r0, [pc, #412]	; (8004f8c <sim7600_commandProcessor+0x630>)
 8004df0:	f7fe f9f4 	bl	80031dc <getMeasurementToSend>
			measure.csq = csq;
 8004df4:	4b51      	ldr	r3, [pc, #324]	; (8004f3c <sim7600_commandProcessor+0x5e0>)
 8004df6:	881b      	ldrh	r3, [r3, #0]
 8004df8:	b2da      	uxtb	r2, r3
 8004dfa:	4b64      	ldr	r3, [pc, #400]	; (8004f8c <sim7600_commandProcessor+0x630>)
 8004dfc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			measurementToParams(&measure, urlParamBuffer);
 8004e00:	495a      	ldr	r1, [pc, #360]	; (8004f6c <sim7600_commandProcessor+0x610>)
 8004e02:	4862      	ldr	r0, [pc, #392]	; (8004f8c <sim7600_commandProcessor+0x630>)
 8004e04:	f7fe faf2 	bl	80033ec <measurementToParams>
			returnIndex = 0;
 8004e08:	4b61      	ldr	r3, [pc, #388]	; (8004f90 <sim7600_commandProcessor+0x634>)
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	601a      	str	r2, [r3, #0]
			pauseCommmandSate(CMD_HTTP_PARA, 10);
 8004e0e:	210a      	movs	r1, #10
 8004e10:	2011      	movs	r0, #17
 8004e12:	f000 fca7 	bl	8005764 <pauseCommmandSate>
			break;
 8004e16:	e1d8      	b.n	80051ca <sim7600_commandProcessor+0x86e>

		case CMD_HTTP_PARA:

			pos = 0;
 8004e18:	4b5e      	ldr	r3, [pc, #376]	; (8004f94 <sim7600_commandProcessor+0x638>)
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	601a      	str	r2, [r3, #0]
			pos = appendStr(cmdBuffer, "AT+HTTPPARA=\"URL\",\"http://", pos);
 8004e1e:	4b5d      	ldr	r3, [pc, #372]	; (8004f94 <sim7600_commandProcessor+0x638>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	461a      	mov	r2, r3
 8004e24:	495c      	ldr	r1, [pc, #368]	; (8004f98 <sim7600_commandProcessor+0x63c>)
 8004e26:	485d      	ldr	r0, [pc, #372]	; (8004f9c <sim7600_commandProcessor+0x640>)
 8004e28:	f001 fc67 	bl	80066fa <appendStr>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	4a59      	ldr	r2, [pc, #356]	; (8004f94 <sim7600_commandProcessor+0x638>)
 8004e30:	6013      	str	r3, [r2, #0]
			if(getUpdateStationListFlag()){//send the settings to the station.php
 8004e32:	f7fe ffe3 	bl	8003dfc <getUpdateStationListFlag>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d010      	beq.n	8004e5e <sim7600_commandProcessor+0x502>

				pos = appendStr(cmdBuffer, STATION_URL,pos);
 8004e3c:	4b55      	ldr	r3, [pc, #340]	; (8004f94 <sim7600_commandProcessor+0x638>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	461a      	mov	r2, r3
 8004e42:	4957      	ldr	r1, [pc, #348]	; (8004fa0 <sim7600_commandProcessor+0x644>)
 8004e44:	4855      	ldr	r0, [pc, #340]	; (8004f9c <sim7600_commandProcessor+0x640>)
 8004e46:	f001 fc58 	bl	80066fa <appendStr>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	4a51      	ldr	r2, [pc, #324]	; (8004f94 <sim7600_commandProcessor+0x638>)
 8004e4e:	6013      	str	r3, [r2, #0]
				setUpdateStationListFlag(0);
 8004e50:	2000      	movs	r0, #0
 8004e52:	f7fe ffdf 	bl	8003e14 <setUpdateStationListFlag>
				sendMeasureFlag = 0;
 8004e56:	4b53      	ldr	r3, [pc, #332]	; (8004fa4 <sim7600_commandProcessor+0x648>)
 8004e58:	2200      	movs	r2, #0
 8004e5a:	701a      	strb	r2, [r3, #0]
 8004e5c:	e00f      	b.n	8004e7e <sim7600_commandProcessor+0x522>
//				pos = appendStr(cmdBuffer, getSettings()->URL,pos);
//				sendParamsToUpFlag = 2;//we are done, and do not need to do it again until it equals 1
//				sendMeasureFlag = 0;
//			}
			else{//send the currently loaded measure to the up.php
				pos = appendStr(cmdBuffer, getSettings()->URL,pos);
 8004e5e:	f7fe ffc3 	bl	8003de8 <getSettings>
 8004e62:	4603      	mov	r3, r0
 8004e64:	3316      	adds	r3, #22
 8004e66:	4a4b      	ldr	r2, [pc, #300]	; (8004f94 <sim7600_commandProcessor+0x638>)
 8004e68:	6812      	ldr	r2, [r2, #0]
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	484b      	ldr	r0, [pc, #300]	; (8004f9c <sim7600_commandProcessor+0x640>)
 8004e6e:	f001 fc44 	bl	80066fa <appendStr>
 8004e72:	4603      	mov	r3, r0
 8004e74:	4a47      	ldr	r2, [pc, #284]	; (8004f94 <sim7600_commandProcessor+0x638>)
 8004e76:	6013      	str	r3, [r2, #0]
				sendMeasureFlag = 1;
 8004e78:	4b4a      	ldr	r3, [pc, #296]	; (8004fa4 <sim7600_commandProcessor+0x648>)
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	701a      	strb	r2, [r3, #0]

			}

			pos = appendStr(cmdBuffer, urlParamBuffer,pos);
 8004e7e:	4b45      	ldr	r3, [pc, #276]	; (8004f94 <sim7600_commandProcessor+0x638>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	461a      	mov	r2, r3
 8004e84:	4939      	ldr	r1, [pc, #228]	; (8004f6c <sim7600_commandProcessor+0x610>)
 8004e86:	4845      	ldr	r0, [pc, #276]	; (8004f9c <sim7600_commandProcessor+0x640>)
 8004e88:	f001 fc37 	bl	80066fa <appendStr>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	4a41      	ldr	r2, [pc, #260]	; (8004f94 <sim7600_commandProcessor+0x638>)
 8004e90:	6013      	str	r3, [r2, #0]
			pos = appendStr(cmdBuffer, "\"\r\n",pos);
 8004e92:	4b40      	ldr	r3, [pc, #256]	; (8004f94 <sim7600_commandProcessor+0x638>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	461a      	mov	r2, r3
 8004e98:	4943      	ldr	r1, [pc, #268]	; (8004fa8 <sim7600_commandProcessor+0x64c>)
 8004e9a:	4840      	ldr	r0, [pc, #256]	; (8004f9c <sim7600_commandProcessor+0x640>)
 8004e9c:	f001 fc2d 	bl	80066fa <appendStr>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	4a3c      	ldr	r2, [pc, #240]	; (8004f94 <sim7600_commandProcessor+0x638>)
 8004ea4:	6013      	str	r3, [r2, #0]
//			hasURLParams=0;



			sim7600_command_pause_wait(cmdBuffer, 1000, "OK", CMD_HTTP_ACTION, CMD_ERR,10);
 8004ea6:	230a      	movs	r3, #10
 8004ea8:	9301      	str	r3, [sp, #4]
 8004eaa:	2306      	movs	r3, #6
 8004eac:	9300      	str	r3, [sp, #0]
 8004eae:	2312      	movs	r3, #18
 8004eb0:	4a27      	ldr	r2, [pc, #156]	; (8004f50 <sim7600_commandProcessor+0x5f4>)
 8004eb2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004eb6:	4839      	ldr	r0, [pc, #228]	; (8004f9c <sim7600_commandProcessor+0x640>)
 8004eb8:	f000 f9c4 	bl	8005244 <sim7600_command_pause_wait>


			break;
 8004ebc:	e185      	b.n	80051ca <sim7600_commandProcessor+0x86e>
//			sim7600_command_pause_wait("AT+IPADDR\r\n", 1000, "OK", CMD_NEXT_MEASUREMENT, CMD_ERR,10);
//			break;

		case CMD_HTTP_ACTION:

			httpDataLen = 0;
 8004ebe:	4b3b      	ldr	r3, [pc, #236]	; (8004fac <sim7600_commandProcessor+0x650>)
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	601a      	str	r2, [r3, #0]
			httpStatusCode = 0;
 8004ec4:	4b3a      	ldr	r3, [pc, #232]	; (8004fb0 <sim7600_commandProcessor+0x654>)
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	601a      	str	r2, [r3, #0]
			errorMonitorFlag = 0;
 8004eca:	4b3a      	ldr	r3, [pc, #232]	; (8004fb4 <sim7600_commandProcessor+0x658>)
 8004ecc:	2200      	movs	r2, #0
 8004ece:	701a      	strb	r2, [r3, #0]
			sim7600_command_wait("AT+HTTPACTION=0\r\n", 120000, "OK", CMD_HTTP_ACTION_WAIT, CMD_ERR);
 8004ed0:	2306      	movs	r3, #6
 8004ed2:	9300      	str	r3, [sp, #0]
 8004ed4:	2313      	movs	r3, #19
 8004ed6:	4a1e      	ldr	r2, [pc, #120]	; (8004f50 <sim7600_commandProcessor+0x5f4>)
 8004ed8:	4928      	ldr	r1, [pc, #160]	; (8004f7c <sim7600_commandProcessor+0x620>)
 8004eda:	4837      	ldr	r0, [pc, #220]	; (8004fb8 <sim7600_commandProcessor+0x65c>)
 8004edc:	f000 f9d0 	bl	8005280 <sim7600_command_wait>
			break;
 8004ee0:	e173      	b.n	80051ca <sim7600_commandProcessor+0x86e>

		case CMD_HTTP_ACTION_WAIT:
			if(httpStatusCode == 200 && httpDataLen > 0){
 8004ee2:	4b33      	ldr	r3, [pc, #204]	; (8004fb0 <sim7600_commandProcessor+0x654>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2bc8      	cmp	r3, #200	; 0xc8
 8004ee8:	d108      	bne.n	8004efc <sim7600_commandProcessor+0x5a0>
 8004eea:	4b30      	ldr	r3, [pc, #192]	; (8004fac <sim7600_commandProcessor+0x650>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d004      	beq.n	8004efc <sim7600_commandProcessor+0x5a0>
				pauseCommmandSate(CMD_HTTP_READ, 10);
 8004ef2:	210a      	movs	r1, #10
 8004ef4:	2014      	movs	r0, #20
 8004ef6:	f000 fc35 	bl	8005764 <pauseCommmandSate>
			else if(timer5_ms_get() > 110000){
				Uart_SendString("Error in HTTP Action - No server response after 110 seconds - Restart SIM7600\r\n", pc_uart);
				pauseCommmandSate(CMD_ERR, 1000);
			}

			break;
 8004efa:	e165      	b.n	80051c8 <sim7600_commandProcessor+0x86c>
			else if(httpStatusCode > 0){
 8004efc:	4b2c      	ldr	r3, [pc, #176]	; (8004fb0 <sim7600_commandProcessor+0x654>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d009      	beq.n	8004f18 <sim7600_commandProcessor+0x5bc>
				Uart_SendString("HTTP Status Code Not 200 - Restart SIM7600\r\n", pc_uart);
 8004f04:	490e      	ldr	r1, [pc, #56]	; (8004f40 <sim7600_commandProcessor+0x5e4>)
 8004f06:	482d      	ldr	r0, [pc, #180]	; (8004fbc <sim7600_commandProcessor+0x660>)
 8004f08:	f7fc fd44 	bl	8001994 <Uart_SendString>
				pauseCommmandSate(CMD_ERR, 1000);
 8004f0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004f10:	2006      	movs	r0, #6
 8004f12:	f000 fc27 	bl	8005764 <pauseCommmandSate>
			break;
 8004f16:	e157      	b.n	80051c8 <sim7600_commandProcessor+0x86c>
			else if(errorMonitorFlag){
 8004f18:	4b26      	ldr	r3, [pc, #152]	; (8004fb4 <sim7600_commandProcessor+0x658>)
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d051      	beq.n	8004fc4 <sim7600_commandProcessor+0x668>
				Uart_SendString("Error in HTTP Action - Perhaps invalid URL - Restart SIM7600\r\n", pc_uart);
 8004f20:	4907      	ldr	r1, [pc, #28]	; (8004f40 <sim7600_commandProcessor+0x5e4>)
 8004f22:	4827      	ldr	r0, [pc, #156]	; (8004fc0 <sim7600_commandProcessor+0x664>)
 8004f24:	f7fc fd36 	bl	8001994 <Uart_SendString>
				pauseCommmandSate(CMD_ERR, 1000);
 8004f28:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004f2c:	2006      	movs	r0, #6
 8004f2e:	f000 fc19 	bl	8005764 <pauseCommmandSate>
				errorMonitorFlag = 0;
 8004f32:	4b20      	ldr	r3, [pc, #128]	; (8004fb4 <sim7600_commandProcessor+0x658>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	701a      	strb	r2, [r3, #0]
			break;
 8004f38:	e146      	b.n	80051c8 <sim7600_commandProcessor+0x86c>
 8004f3a:	bf00      	nop
 8004f3c:	200077b4 	.word	0x200077b4
 8004f40:	20003fd8 	.word	0x20003fd8
 8004f44:	08018828 	.word	0x08018828
 8004f48:	20007825 	.word	0x20007825
 8004f4c:	0801887c 	.word	0x0801887c
 8004f50:	080186b4 	.word	0x080186b4
 8004f54:	0801888c 	.word	0x0801888c
 8004f58:	08018898 	.word	0x08018898
 8004f5c:	080188a4 	.word	0x080188a4
 8004f60:	080188b0 	.word	0x080188b0
 8004f64:	080188c0 	.word	0x080188c0
 8004f68:	20007a16 	.word	0x20007a16
 8004f6c:	20007874 	.word	0x20007874
 8004f70:	080188d0 	.word	0x080188d0
 8004f74:	080188f0 	.word	0x080188f0
 8004f78:	08018900 	.word	0x08018900
 8004f7c:	0001d4c0 	.word	0x0001d4c0
 8004f80:	08018924 	.word	0x08018924
 8004f84:	08018968 	.word	0x08018968
 8004f88:	200077b8 	.word	0x200077b8
 8004f8c:	20007848 	.word	0x20007848
 8004f90:	20007a10 	.word	0x20007a10
 8004f94:	20007a0c 	.word	0x20007a0c
 8004f98:	08018990 	.word	0x08018990
 8004f9c:	2000793c 	.word	0x2000793c
 8004fa0:	080189ac 	.word	0x080189ac
 8004fa4:	20007824 	.word	0x20007824
 8004fa8:	080189d0 	.word	0x080189d0
 8004fac:	20007a08 	.word	0x20007a08
 8004fb0:	20007a04 	.word	0x20007a04
 8004fb4:	20007a14 	.word	0x20007a14
 8004fb8:	080189d4 	.word	0x080189d4
 8004fbc:	080189e8 	.word	0x080189e8
 8004fc0:	08018a18 	.word	0x08018a18
			else if(timer5_ms_get() > 110000){
 8004fc4:	f7fd ffd0 	bl	8002f68 <timer5_ms_get>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	4a81      	ldr	r2, [pc, #516]	; (80051d0 <sim7600_commandProcessor+0x874>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	f240 80fb 	bls.w	80051c8 <sim7600_commandProcessor+0x86c>
				Uart_SendString("Error in HTTP Action - No server response after 110 seconds - Restart SIM7600\r\n", pc_uart);
 8004fd2:	4980      	ldr	r1, [pc, #512]	; (80051d4 <sim7600_commandProcessor+0x878>)
 8004fd4:	4880      	ldr	r0, [pc, #512]	; (80051d8 <sim7600_commandProcessor+0x87c>)
 8004fd6:	f7fc fcdd 	bl	8001994 <Uart_SendString>
				pauseCommmandSate(CMD_ERR, 1000);
 8004fda:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004fde:	2006      	movs	r0, #6
 8004fe0:	f000 fbc0 	bl	8005764 <pauseCommmandSate>
			break;
 8004fe4:	e0f0      	b.n	80051c8 <sim7600_commandProcessor+0x86c>

		case CMD_HTTP_READ:

			sprintf(pbuffer, "AT+HTTPREAD=0,%u\r\n",httpDataLen);
 8004fe6:	4b7d      	ldr	r3, [pc, #500]	; (80051dc <sim7600_commandProcessor+0x880>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	461a      	mov	r2, r3
 8004fec:	497c      	ldr	r1, [pc, #496]	; (80051e0 <sim7600_commandProcessor+0x884>)
 8004fee:	487d      	ldr	r0, [pc, #500]	; (80051e4 <sim7600_commandProcessor+0x888>)
 8004ff0:	f00c fdec 	bl	8011bcc <siprintf>
			httpReadSuccessFlag = 0;
 8004ff4:	4b7c      	ldr	r3, [pc, #496]	; (80051e8 <sim7600_commandProcessor+0x88c>)
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	701a      	strb	r2, [r3, #0]
			httpReadWaitCount = 0;
 8004ffa:	4b7c      	ldr	r3, [pc, #496]	; (80051ec <sim7600_commandProcessor+0x890>)
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	701a      	strb	r2, [r3, #0]
			sim7600_command_wait(pbuffer, 120000, "OK", CMD_HTTP_READ_WAIT, CMD_ERR);
 8005000:	2306      	movs	r3, #6
 8005002:	9300      	str	r3, [sp, #0]
 8005004:	231f      	movs	r3, #31
 8005006:	4a7a      	ldr	r2, [pc, #488]	; (80051f0 <sim7600_commandProcessor+0x894>)
 8005008:	497a      	ldr	r1, [pc, #488]	; (80051f4 <sim7600_commandProcessor+0x898>)
 800500a:	4876      	ldr	r0, [pc, #472]	; (80051e4 <sim7600_commandProcessor+0x888>)
 800500c:	f000 f938 	bl	8005280 <sim7600_command_wait>


			break;
 8005010:	e0db      	b.n	80051ca <sim7600_commandProcessor+0x86e>

		case CMD_HTTP_READ_WAIT:
			if(httpReadSuccessFlag){
 8005012:	4b75      	ldr	r3, [pc, #468]	; (80051e8 <sim7600_commandProcessor+0x88c>)
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d028      	beq.n	800506c <sim7600_commandProcessor+0x710>
				Uart_SendString("HTTPRead Success\r\n", pc_uart);
 800501a:	496e      	ldr	r1, [pc, #440]	; (80051d4 <sim7600_commandProcessor+0x878>)
 800501c:	4876      	ldr	r0, [pc, #472]	; (80051f8 <sim7600_commandProcessor+0x89c>)
 800501e:	f7fc fcb9 	bl	8001994 <Uart_SendString>

				pause = 2250;//slow down unless we confirm sent
 8005022:	4b76      	ldr	r3, [pc, #472]	; (80051fc <sim7600_commandProcessor+0x8a0>)
 8005024:	f640 02ca 	movw	r2, #2250	; 0x8ca
 8005028:	801a      	strh	r2, [r3, #0]
				if(sendMeasureFlag){
 800502a:	4b75      	ldr	r3, [pc, #468]	; (8005200 <sim7600_commandProcessor+0x8a4>)
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00d      	beq.n	800504e <sim7600_commandProcessor+0x6f2>
					if(confirmSent(returnIndex)){
 8005032:	4b74      	ldr	r3, [pc, #464]	; (8005204 <sim7600_commandProcessor+0x8a8>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4618      	mov	r0, r3
 8005038:	f7fe f99a 	bl	8003370 <confirmSent>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d002      	beq.n	8005048 <sim7600_commandProcessor+0x6ec>
//						if(sendParamsToUpFlag == 0){//if it = 0, and we have sent a measure successfully, the schedule a params send
//							sendParamsToUpFlag = 1;
//						}
						pause = 10;
 8005042:	4b6e      	ldr	r3, [pc, #440]	; (80051fc <sim7600_commandProcessor+0x8a0>)
 8005044:	220a      	movs	r2, #10
 8005046:	801a      	strh	r2, [r3, #0]

					}
					sendMeasureFlag = 0;
 8005048:	4b6d      	ldr	r3, [pc, #436]	; (8005200 <sim7600_commandProcessor+0x8a4>)
 800504a:	2200      	movs	r2, #0
 800504c:	701a      	strb	r2, [r3, #0]

				}


				if(numMeasurementsToSend()){
 800504e:	f7fe f8b9 	bl	80031c4 <numMeasurementsToSend>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d004      	beq.n	8005062 <sim7600_commandProcessor+0x706>
					pauseCommmandSate(CMD_NEXT_MEASUREMENT, 10);
 8005058:	210a      	movs	r1, #10
 800505a:	2020      	movs	r0, #32
 800505c:	f000 fb82 	bl	8005764 <pauseCommmandSate>
					pauseCommmandSate(CMD_HTTP_READ_WAIT, 10);
				}

			}

			break;
 8005060:	e0b3      	b.n	80051ca <sim7600_commandProcessor+0x86e>
					pauseCommmandSate(CMD_HTTP_TERM, 10);
 8005062:	210a      	movs	r1, #10
 8005064:	2015      	movs	r0, #21
 8005066:	f000 fb7d 	bl	8005764 <pauseCommmandSate>
			break;
 800506a:	e0ae      	b.n	80051ca <sim7600_commandProcessor+0x86e>
				httpReadWaitCount++;
 800506c:	4b5f      	ldr	r3, [pc, #380]	; (80051ec <sim7600_commandProcessor+0x890>)
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	3301      	adds	r3, #1
 8005072:	b2da      	uxtb	r2, r3
 8005074:	4b5d      	ldr	r3, [pc, #372]	; (80051ec <sim7600_commandProcessor+0x890>)
 8005076:	701a      	strb	r2, [r3, #0]
				if(httpReadWaitCount > 25){
 8005078:	4b5c      	ldr	r3, [pc, #368]	; (80051ec <sim7600_commandProcessor+0x890>)
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	2b19      	cmp	r3, #25
 800507e:	d908      	bls.n	8005092 <sim7600_commandProcessor+0x736>
					Uart_SendString("HTTPRead Failure\r\n", pc_uart);
 8005080:	4954      	ldr	r1, [pc, #336]	; (80051d4 <sim7600_commandProcessor+0x878>)
 8005082:	4861      	ldr	r0, [pc, #388]	; (8005208 <sim7600_commandProcessor+0x8ac>)
 8005084:	f7fc fc86 	bl	8001994 <Uart_SendString>
					pauseCommmandSate(CMD_ERR, 10);
 8005088:	210a      	movs	r1, #10
 800508a:	2006      	movs	r0, #6
 800508c:	f000 fb6a 	bl	8005764 <pauseCommmandSate>
			break;
 8005090:	e09b      	b.n	80051ca <sim7600_commandProcessor+0x86e>
					pauseCommmandSate(CMD_HTTP_READ_WAIT, 10);
 8005092:	210a      	movs	r1, #10
 8005094:	201f      	movs	r0, #31
 8005096:	f000 fb65 	bl	8005764 <pauseCommmandSate>
			break;
 800509a:	e096      	b.n	80051ca <sim7600_commandProcessor+0x86e>
		case CMD_HTTP_TERM:



//			pauseCommmandSate(CMD_CMGR, pause);
			sim7600_command_pause_wait("AT+HTTPTERM\r\n", 1000, "OK", CMD_CMGR, CMD_ERR,pause);
 800509c:	4b57      	ldr	r3, [pc, #348]	; (80051fc <sim7600_commandProcessor+0x8a0>)
 800509e:	881b      	ldrh	r3, [r3, #0]
 80050a0:	9301      	str	r3, [sp, #4]
 80050a2:	2306      	movs	r3, #6
 80050a4:	9300      	str	r3, [sp, #0]
 80050a6:	2318      	movs	r3, #24
 80050a8:	4a51      	ldr	r2, [pc, #324]	; (80051f0 <sim7600_commandProcessor+0x894>)
 80050aa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80050ae:	4857      	ldr	r0, [pc, #348]	; (800520c <sim7600_commandProcessor+0x8b0>)
 80050b0:	f000 f8c8 	bl	8005244 <sim7600_command_pause_wait>

			break;
 80050b4:	e089      	b.n	80051ca <sim7600_commandProcessor+0x86e>



		case CMD_CMGR:

			sprintf(pbuffer, "HTTP Time = %lu ms\r\n",timer5_ms_get());
 80050b6:	f7fd ff57 	bl	8002f68 <timer5_ms_get>
 80050ba:	4603      	mov	r3, r0
 80050bc:	461a      	mov	r2, r3
 80050be:	4954      	ldr	r1, [pc, #336]	; (8005210 <sim7600_commandProcessor+0x8b4>)
 80050c0:	4848      	ldr	r0, [pc, #288]	; (80051e4 <sim7600_commandProcessor+0x888>)
 80050c2:	f00c fd83 	bl	8011bcc <siprintf>
			Uart_SendString(pbuffer, pc_uart);
 80050c6:	4943      	ldr	r1, [pc, #268]	; (80051d4 <sim7600_commandProcessor+0x878>)
 80050c8:	4846      	ldr	r0, [pc, #280]	; (80051e4 <sim7600_commandProcessor+0x888>)
 80050ca:	f7fc fc63 	bl	8001994 <Uart_SendString>

			timer5_ms_restart();//start http timer again, so we can time out and come back here if needed from httpinit
 80050ce:	f7fd ff3b 	bl	8002f48 <timer5_ms_restart>

			sim7600_command_pause_wait("AT+CMGL=\"ALL\"\r\n", 1000, "OK", CMD_CMGD, CMD_ERR,100);
 80050d2:	2364      	movs	r3, #100	; 0x64
 80050d4:	9301      	str	r3, [sp, #4]
 80050d6:	2306      	movs	r3, #6
 80050d8:	9300      	str	r3, [sp, #0]
 80050da:	2319      	movs	r3, #25
 80050dc:	4a44      	ldr	r2, [pc, #272]	; (80051f0 <sim7600_commandProcessor+0x894>)
 80050de:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80050e2:	484c      	ldr	r0, [pc, #304]	; (8005214 <sim7600_commandProcessor+0x8b8>)
 80050e4:	f000 f8ae 	bl	8005244 <sim7600_command_pause_wait>
			break;
 80050e8:	e06f      	b.n	80051ca <sim7600_commandProcessor+0x86e>

		case CMD_CMGD:
			sim7600_command_pause_wait("AT+CMGD=,3\r\n", 1000, "OK", CMD_CSQ2, CMD_ERR,100);
 80050ea:	2364      	movs	r3, #100	; 0x64
 80050ec:	9301      	str	r3, [sp, #4]
 80050ee:	2306      	movs	r3, #6
 80050f0:	9300      	str	r3, [sp, #0]
 80050f2:	2316      	movs	r3, #22
 80050f4:	4a3e      	ldr	r2, [pc, #248]	; (80051f0 <sim7600_commandProcessor+0x894>)
 80050f6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80050fa:	4847      	ldr	r0, [pc, #284]	; (8005218 <sim7600_commandProcessor+0x8bc>)
 80050fc:	f000 f8a2 	bl	8005244 <sim7600_command_pause_wait>
			csqCheckCount = 0;
 8005100:	4b46      	ldr	r3, [pc, #280]	; (800521c <sim7600_commandProcessor+0x8c0>)
 8005102:	2200      	movs	r2, #0
 8005104:	701a      	strb	r2, [r3, #0]
			break;
 8005106:	e060      	b.n	80051ca <sim7600_commandProcessor+0x86e>

		case CMD_CSQ2:
			if(csqCheckCount > CSQ_CHECK_COUNTS){
 8005108:	4b44      	ldr	r3, [pc, #272]	; (800521c <sim7600_commandProcessor+0x8c0>)
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	2b3c      	cmp	r3, #60	; 0x3c
 800510e:	d909      	bls.n	8005124 <sim7600_commandProcessor+0x7c8>
				Uart_SendString("CSQ2 Check Counts exceeded, try to restart modem.\r\n", pc_uart);
 8005110:	4930      	ldr	r1, [pc, #192]	; (80051d4 <sim7600_commandProcessor+0x878>)
 8005112:	4843      	ldr	r0, [pc, #268]	; (8005220 <sim7600_commandProcessor+0x8c4>)
 8005114:	f7fc fc3e 	bl	8001994 <Uart_SendString>
				pauseCommmandSate(CMD_ERR, 2000);
 8005118:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800511c:	2006      	movs	r0, #6
 800511e:	f000 fb21 	bl	8005764 <pauseCommmandSate>
			}
			else{
				sim7600_command_pause_wait("AT+CSQ\r\n", 1000, "OK\r\n", CMD_CSQ_CHECK2, CMD_ERR,100);
				csqCheckCount++;
			}
			break;
 8005122:	e052      	b.n	80051ca <sim7600_commandProcessor+0x86e>
				sim7600_command_pause_wait("AT+CSQ\r\n", 1000, "OK\r\n", CMD_CSQ_CHECK2, CMD_ERR,100);
 8005124:	2364      	movs	r3, #100	; 0x64
 8005126:	9301      	str	r3, [sp, #4]
 8005128:	2306      	movs	r3, #6
 800512a:	9300      	str	r3, [sp, #0]
 800512c:	2317      	movs	r3, #23
 800512e:	4a3d      	ldr	r2, [pc, #244]	; (8005224 <sim7600_commandProcessor+0x8c8>)
 8005130:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005134:	483c      	ldr	r0, [pc, #240]	; (8005228 <sim7600_commandProcessor+0x8cc>)
 8005136:	f000 f885 	bl	8005244 <sim7600_command_pause_wait>
				csqCheckCount++;
 800513a:	4b38      	ldr	r3, [pc, #224]	; (800521c <sim7600_commandProcessor+0x8c0>)
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	3301      	adds	r3, #1
 8005140:	b2da      	uxtb	r2, r3
 8005142:	4b36      	ldr	r3, [pc, #216]	; (800521c <sim7600_commandProcessor+0x8c0>)
 8005144:	701a      	strb	r2, [r3, #0]
			break;
 8005146:	e040      	b.n	80051ca <sim7600_commandProcessor+0x86e>

		case CMD_CSQ_CHECK2:
			if(csq == 99 || csq == 199){
 8005148:	4b38      	ldr	r3, [pc, #224]	; (800522c <sim7600_commandProcessor+0x8d0>)
 800514a:	881b      	ldrh	r3, [r3, #0]
 800514c:	2b63      	cmp	r3, #99	; 0x63
 800514e:	d003      	beq.n	8005158 <sim7600_commandProcessor+0x7fc>
 8005150:	4b36      	ldr	r3, [pc, #216]	; (800522c <sim7600_commandProcessor+0x8d0>)
 8005152:	881b      	ldrh	r3, [r3, #0]
 8005154:	2bc7      	cmp	r3, #199	; 0xc7
 8005156:	d109      	bne.n	800516c <sim7600_commandProcessor+0x810>
				Uart_SendString("Signal Strength not known or not detectable (CSQ2 equals 99/199). Check 4G antenna\r\n", pc_uart);
 8005158:	491e      	ldr	r1, [pc, #120]	; (80051d4 <sim7600_commandProcessor+0x878>)
 800515a:	4835      	ldr	r0, [pc, #212]	; (8005230 <sim7600_commandProcessor+0x8d4>)
 800515c:	f7fc fc1a 	bl	8001994 <Uart_SendString>
				pauseCommmandSate(CMD_CSQ2, 2000);
 8005160:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8005164:	2016      	movs	r0, #22
 8005166:	f000 fafd 	bl	8005764 <pauseCommmandSate>
			else{
				pauseCommmandSate(CMD_HOLD_CHECK, 10);
				csqCheckCount = 0;
			}

			break;
 800516a:	e02e      	b.n	80051ca <sim7600_commandProcessor+0x86e>
				pauseCommmandSate(CMD_HOLD_CHECK, 10);
 800516c:	210a      	movs	r1, #10
 800516e:	201d      	movs	r0, #29
 8005170:	f000 faf8 	bl	8005764 <pauseCommmandSate>
				csqCheckCount = 0;
 8005174:	4b29      	ldr	r3, [pc, #164]	; (800521c <sim7600_commandProcessor+0x8c0>)
 8005176:	2200      	movs	r2, #0
 8005178:	701a      	strb	r2, [r3, #0]
			break;
 800517a:	e026      	b.n	80051ca <sim7600_commandProcessor+0x86e>


		case CMD_ERR:
			Uart_SendString("Command not responded to successfully. Switch to Power Error\r\n", pc_uart);
 800517c:	4915      	ldr	r1, [pc, #84]	; (80051d4 <sim7600_commandProcessor+0x878>)
 800517e:	482d      	ldr	r0, [pc, #180]	; (8005234 <sim7600_commandProcessor+0x8d8>)
 8005180:	f7fc fc08 	bl	8001994 <Uart_SendString>
			powerState = POWER_ERR;
 8005184:	4b2c      	ldr	r3, [pc, #176]	; (8005238 <sim7600_commandProcessor+0x8dc>)
 8005186:	2205      	movs	r2, #5
 8005188:	701a      	strb	r2, [r3, #0]
			break;
 800518a:	e01e      	b.n	80051ca <sim7600_commandProcessor+0x86e>

		case CMD_HOLD_CHECK:
			if(hold){
 800518c:	4b2b      	ldr	r3, [pc, #172]	; (800523c <sim7600_commandProcessor+0x8e0>)
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d009      	beq.n	80051a8 <sim7600_commandProcessor+0x84c>
				Uart_SendString("Hold\r\n", pc_uart);
 8005194:	490f      	ldr	r1, [pc, #60]	; (80051d4 <sim7600_commandProcessor+0x878>)
 8005196:	482a      	ldr	r0, [pc, #168]	; (8005240 <sim7600_commandProcessor+0x8e4>)
 8005198:	f7fc fbfc 	bl	8001994 <Uart_SendString>
				pauseCommmandSate(CMD_HOLD_CYCLE, 5000);
 800519c:	f241 3188 	movw	r1, #5000	; 0x1388
 80051a0:	201e      	movs	r0, #30
 80051a2:	f000 fadf 	bl	8005764 <pauseCommmandSate>
			else{
				pauseCommmandSate(CMD_HTTP_INIT, 10);

			}

			break;
 80051a6:	e010      	b.n	80051ca <sim7600_commandProcessor+0x86e>
				pauseCommmandSate(CMD_HTTP_INIT, 10);
 80051a8:	210a      	movs	r1, #10
 80051aa:	2010      	movs	r0, #16
 80051ac:	f000 fada 	bl	8005764 <pauseCommmandSate>
			break;
 80051b0:	e00b      	b.n	80051ca <sim7600_commandProcessor+0x86e>

		case CMD_HOLD_CYCLE:
			pauseCommmandSate(CMD_HOLD_CHECK, 10);
 80051b2:	210a      	movs	r1, #10
 80051b4:	201d      	movs	r0, #29
 80051b6:	f000 fad5 	bl	8005764 <pauseCommmandSate>


			break;
 80051ba:	e006      	b.n	80051ca <sim7600_commandProcessor+0x86e>
			break;
 80051bc:	bf00      	nop
 80051be:	e004      	b.n	80051ca <sim7600_commandProcessor+0x86e>
			break;
 80051c0:	bf00      	nop
 80051c2:	e002      	b.n	80051ca <sim7600_commandProcessor+0x86e>
			break;
 80051c4:	bf00      	nop
 80051c6:	e000      	b.n	80051ca <sim7600_commandProcessor+0x86e>
			break;
 80051c8:	bf00      	nop


	}

}
 80051ca:	bf00      	nop
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	0001adb0 	.word	0x0001adb0
 80051d4:	20003fd8 	.word	0x20003fd8
 80051d8:	08018a58 	.word	0x08018a58
 80051dc:	20007a08 	.word	0x20007a08
 80051e0:	08018aa8 	.word	0x08018aa8
 80051e4:	200077b8 	.word	0x200077b8
 80051e8:	20007a1b 	.word	0x20007a1b
 80051ec:	20007a1c 	.word	0x20007a1c
 80051f0:	080186b4 	.word	0x080186b4
 80051f4:	0001d4c0 	.word	0x0001d4c0
 80051f8:	08018abc 	.word	0x08018abc
 80051fc:	20007a18 	.word	0x20007a18
 8005200:	20007824 	.word	0x20007824
 8005204:	20007a10 	.word	0x20007a10
 8005208:	08018ad0 	.word	0x08018ad0
 800520c:	08018ae4 	.word	0x08018ae4
 8005210:	08018af4 	.word	0x08018af4
 8005214:	08018b0c 	.word	0x08018b0c
 8005218:	08018b1c 	.word	0x08018b1c
 800521c:	20007825 	.word	0x20007825
 8005220:	08018b2c 	.word	0x08018b2c
 8005224:	08018814 	.word	0x08018814
 8005228:	0801881c 	.word	0x0801881c
 800522c:	200077b4 	.word	0x200077b4
 8005230:	08018b60 	.word	0x08018b60
 8005234:	08018bb8 	.word	0x08018bb8
 8005238:	2000782a 	.word	0x2000782a
 800523c:	20007847 	.word	0x20007847
 8005240:	08018bf8 	.word	0x08018bf8

08005244 <sim7600_command_pause_wait>:
//	sendParamsToUpFlag = 0; //reset to 0 so it will schedule params send to up after the first successful measure.
//}

//Sends the command, then if it is successful (i.e. correct response received, pauses for 'pause' before going to the successState.
//If the response is not received within timeout then proceeds to the timeout state immediately.
void sim7600_command_pause_wait(char * cmd, uint32_t timeout, const char * response, uint8_t successState, uint8_t timeoutState, uint16_t pause){
 8005244:	b580      	push	{r7, lr}
 8005246:	b086      	sub	sp, #24
 8005248:	af02      	add	r7, sp, #8
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	607a      	str	r2, [r7, #4]
 8005250:	70fb      	strb	r3, [r7, #3]

	pauseTimeout = pause;
 8005252:	4a09      	ldr	r2, [pc, #36]	; (8005278 <sim7600_command_pause_wait+0x34>)
 8005254:	8bbb      	ldrh	r3, [r7, #28]
 8005256:	8013      	strh	r3, [r2, #0]
	pauseNextState = successState;
 8005258:	4a08      	ldr	r2, [pc, #32]	; (800527c <sim7600_command_pause_wait+0x38>)
 800525a:	78fb      	ldrb	r3, [r7, #3]
 800525c:	7013      	strb	r3, [r2, #0]
	sim7600_command_wait(cmd, timeout, response, CMD_PAUSE, timeoutState);
 800525e:	7e3b      	ldrb	r3, [r7, #24]
 8005260:	9300      	str	r3, [sp, #0]
 8005262:	2307      	movs	r3, #7
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	68b9      	ldr	r1, [r7, #8]
 8005268:	68f8      	ldr	r0, [r7, #12]
 800526a:	f000 f809 	bl	8005280 <sim7600_command_wait>

}
 800526e:	bf00      	nop
 8005270:	3710      	adds	r7, #16
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	20007844 	.word	0x20007844
 800527c:	20007846 	.word	0x20007846

08005280 <sim7600_command_wait>:

//Sends the command, then if it is successful proceeds to the successState immediately.
//If the response is not received within timeout then proceeds to the timeoutState immediately.
void sim7600_command_wait(char * cmd, uint32_t timeout, const char * response, uint8_t successState, uint8_t timeoutState){
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]
 800528c:	70fb      	strb	r3, [r7, #3]

    wait.response = response;
 800528e:	4a11      	ldr	r2, [pc, #68]	; (80052d4 <sim7600_command_wait+0x54>)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6013      	str	r3, [r2, #0]
    wait.len = strlen(response);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f7fa ffad 	bl	80001f4 <strlen>
 800529a:	4603      	mov	r3, r0
 800529c:	b2da      	uxtb	r2, r3
 800529e:	4b0d      	ldr	r3, [pc, #52]	; (80052d4 <sim7600_command_wait+0x54>)
 80052a0:	715a      	strb	r2, [r3, #5]

    wait.waiting = 1;
 80052a2:	4b0c      	ldr	r3, [pc, #48]	; (80052d4 <sim7600_command_wait+0x54>)
 80052a4:	2201      	movs	r2, #1
 80052a6:	741a      	strb	r2, [r3, #16]
    wait.nextState_success = successState;
 80052a8:	4a0a      	ldr	r2, [pc, #40]	; (80052d4 <sim7600_command_wait+0x54>)
 80052aa:	78fb      	ldrb	r3, [r7, #3]
 80052ac:	7193      	strb	r3, [r2, #6]
    wait.nextState_timeout = timeoutState;
 80052ae:	4a09      	ldr	r2, [pc, #36]	; (80052d4 <sim7600_command_wait+0x54>)
 80052b0:	7e3b      	ldrb	r3, [r7, #24]
 80052b2:	7213      	strb	r3, [r2, #8]
    wait.timeout = timeout;
 80052b4:	4a07      	ldr	r2, [pc, #28]	; (80052d4 <sim7600_command_wait+0x54>)
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	60d3      	str	r3, [r2, #12]

    timer2_ms_restart();
 80052ba:	f7fd fe0d 	bl	8002ed8 <timer2_ms_restart>
    Uart_SendString(cmd, device_uart);
 80052be:	4906      	ldr	r1, [pc, #24]	; (80052d8 <sim7600_command_wait+0x58>)
 80052c0:	68f8      	ldr	r0, [r7, #12]
 80052c2:	f7fc fb67 	bl	8001994 <Uart_SendString>
//    Debug(cmd);

    setCommandState(CMD_WAIT);
 80052c6:	2001      	movs	r0, #1
 80052c8:	f000 fa3c 	bl	8005744 <setCommandState>

}
 80052cc:	bf00      	nop
 80052ce:	3710      	adds	r7, #16
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	2000782c 	.word	0x2000782c
 80052d8:	20003f94 	.word	0x20003f94

080052dc <sim7600_processChar>:

void sim7600_processChar(char c){
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	4603      	mov	r3, r0
 80052e4:	71fb      	strb	r3, [r7, #7]
	lineBufferAdd(&lineBuffer, c);
 80052e6:	79fb      	ldrb	r3, [r7, #7]
 80052e8:	4619      	mov	r1, r3
 80052ea:	4814      	ldr	r0, [pc, #80]	; (800533c <sim7600_processChar+0x60>)
 80052ec:	f000 f82a 	bl	8005344 <lineBufferAdd>
	processLines();
 80052f0:	f000 f89e 	bl	8005430 <processLines>

	if(wait.waiting){
 80052f4:	4b12      	ldr	r3, [pc, #72]	; (8005340 <sim7600_processChar+0x64>)
 80052f6:	7c1b      	ldrb	r3, [r3, #16]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d01b      	beq.n	8005334 <sim7600_processChar+0x58>
		if(c == wait.response[wait.index]){
 80052fc:	4b10      	ldr	r3, [pc, #64]	; (8005340 <sim7600_processChar+0x64>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a0f      	ldr	r2, [pc, #60]	; (8005340 <sim7600_processChar+0x64>)
 8005302:	7912      	ldrb	r2, [r2, #4]
 8005304:	4413      	add	r3, r2
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	79fa      	ldrb	r2, [r7, #7]
 800530a:	429a      	cmp	r2, r3
 800530c:	d10f      	bne.n	800532e <sim7600_processChar+0x52>
			wait.index++;
 800530e:	4b0c      	ldr	r3, [pc, #48]	; (8005340 <sim7600_processChar+0x64>)
 8005310:	791b      	ldrb	r3, [r3, #4]
 8005312:	3301      	adds	r3, #1
 8005314:	b2da      	uxtb	r2, r3
 8005316:	4b0a      	ldr	r3, [pc, #40]	; (8005340 <sim7600_processChar+0x64>)
 8005318:	711a      	strb	r2, [r3, #4]
			if(wait.index == wait.len){
 800531a:	4b09      	ldr	r3, [pc, #36]	; (8005340 <sim7600_processChar+0x64>)
 800531c:	791a      	ldrb	r2, [r3, #4]
 800531e:	4b08      	ldr	r3, [pc, #32]	; (8005340 <sim7600_processChar+0x64>)
 8005320:	795b      	ldrb	r3, [r3, #5]
 8005322:	429a      	cmp	r2, r3
 8005324:	d106      	bne.n	8005334 <sim7600_processChar+0x58>
				wait.waiting = 0;
 8005326:	4b06      	ldr	r3, [pc, #24]	; (8005340 <sim7600_processChar+0x64>)
 8005328:	2200      	movs	r2, #0
 800532a:	741a      	strb	r2, [r3, #16]
		else{
			wait.index = 0;
		}
	}

}
 800532c:	e002      	b.n	8005334 <sim7600_processChar+0x58>
			wait.index = 0;
 800532e:	4b04      	ldr	r3, [pc, #16]	; (8005340 <sim7600_processChar+0x64>)
 8005330:	2200      	movs	r2, #0
 8005332:	711a      	strb	r2, [r3, #4]
}
 8005334:	bf00      	nop
 8005336:	3708      	adds	r7, #8
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}
 800533c:	20007330 	.word	0x20007330
 8005340:	2000782c 	.word	0x2000782c

08005344 <lineBufferAdd>:





void lineBufferAdd(LineBuffer *uLineBuffer, char c){
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	460b      	mov	r3, r1
 800534e:	70fb      	strb	r3, [r7, #3]
	if(!(uLineBuffer->numLines && uLineBuffer->lineWriteIndex == uLineBuffer->lineReadIndex)){//buffer is not full (assuming that there is at least one end line in there)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8005356:	2b00      	cmp	r3, #0
 8005358:	d007      	beq.n	800536a <lineBufferAdd+0x26>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f893 2401 	ldrb.w	r2, [r3, #1025]	; 0x401
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8005366:	429a      	cmp	r2, r3
 8005368:	d016      	beq.n	8005398 <lineBufferAdd+0x54>
		uLineBuffer->line[uLineBuffer->lineWriteIndex++] = c;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8005370:	1c5a      	adds	r2, r3, #1
 8005372:	b2d1      	uxtb	r1, r2
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	f882 1401 	strb.w	r1, [r2, #1025]	; 0x401
 800537a:	4619      	mov	r1, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	78fa      	ldrb	r2, [r7, #3]
 8005380:	545a      	strb	r2, [r3, r1]
		if (uLineBuffer->lineWriteIndex == LINE_BUFFER_DIM) {
			uLineBuffer->lineWriteIndex = 0;
		}
		if(c == '\n'){
 8005382:	78fb      	ldrb	r3, [r7, #3]
 8005384:	2b0a      	cmp	r3, #10
 8005386:	d107      	bne.n	8005398 <lineBufferAdd+0x54>
			uLineBuffer->numLines++;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800538e:	3301      	adds	r3, #1
 8005390:	b2da      	uxtb	r2, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
		}
	}
}
 8005398:	bf00      	nop
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <lineBufferNumLines>:

uint8_t lineBufferNumLines(LineBuffer *uLineBuffer){
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
	return uLineBuffer->numLines;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400

}
 80053b2:	4618      	mov	r0, r3
 80053b4:	370c      	adds	r7, #12
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr

080053be <lineBufferGetLine>:

void lineBufferGetLine(LineBuffer *uLineBuffer, char * line){
 80053be:	b480      	push	{r7}
 80053c0:	b085      	sub	sp, #20
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
 80053c6:	6039      	str	r1, [r7, #0]
	if(uLineBuffer->numLines){
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d028      	beq.n	8005424 <lineBufferGetLine+0x66>

		char c = 0;
 80053d2:	2300      	movs	r3, #0
 80053d4:	73fb      	strb	r3, [r7, #15]
		int i = 0;
 80053d6:	2300      	movs	r3, #0
 80053d8:	60bb      	str	r3, [r7, #8]
		while(c != '\n'){
 80053da:	e013      	b.n	8005404 <lineBufferGetLine+0x46>
			c = uLineBuffer->line[uLineBuffer->lineReadIndex++];
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 80053e2:	1c5a      	adds	r2, r3, #1
 80053e4:	b2d1      	uxtb	r1, r2
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	f882 1402 	strb.w	r1, [r2, #1026]	; 0x402
 80053ec:	461a      	mov	r2, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	5c9b      	ldrb	r3, [r3, r2]
 80053f2:	73fb      	strb	r3, [r7, #15]
			line[i] = c;
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	683a      	ldr	r2, [r7, #0]
 80053f8:	4413      	add	r3, r2
 80053fa:	7bfa      	ldrb	r2, [r7, #15]
 80053fc:	701a      	strb	r2, [r3, #0]
			i++;
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	3301      	adds	r3, #1
 8005402:	60bb      	str	r3, [r7, #8]
		while(c != '\n'){
 8005404:	7bfb      	ldrb	r3, [r7, #15]
 8005406:	2b0a      	cmp	r3, #10
 8005408:	d1e8      	bne.n	80053dc <lineBufferGetLine+0x1e>
			if (uLineBuffer->lineReadIndex == LINE_BUFFER_DIM) {
				uLineBuffer->lineReadIndex = 0;
			}
		}

		uLineBuffer->numLines--;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8005410:	3b01      	subs	r3, #1
 8005412:	b2da      	uxtb	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
		line[i] = 0;//add eol char
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	683a      	ldr	r2, [r7, #0]
 800541e:	4413      	add	r3, r2
 8005420:	2200      	movs	r2, #0
 8005422:	701a      	strb	r2, [r3, #0]
	}
}
 8005424:	bf00      	nop
 8005426:	3714      	adds	r7, #20
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <processLines>:



void processLines(void)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b082      	sub	sp, #8
 8005434:	af00      	add	r7, sp, #0


    if(lineBufferNumLines(&lineBuffer)){//we have a line ready to read
 8005436:	483f      	ldr	r0, [pc, #252]	; (8005534 <processLines+0x104>)
 8005438:	f7ff ffb4 	bl	80053a4 <lineBufferNumLines>
 800543c:	4603      	mov	r3, r0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d074      	beq.n	800552c <processLines+0xfc>


       lineBufferGetLine(&lineBuffer, line);
 8005442:	493d      	ldr	r1, [pc, #244]	; (8005538 <processLines+0x108>)
 8005444:	483b      	ldr	r0, [pc, #236]	; (8005534 <processLines+0x104>)
 8005446:	f7ff ffba 	bl	80053be <lineBufferGetLine>
//       Uart_SendString("LINE:", pc_uart);
//       Uart_SendString(line, pc_uart);
//       Uart_SendString("\r\n", pc_uart);

       if(cgsn_flag){
 800544a:	4b3c      	ldr	r3, [pc, #240]	; (800553c <processLines+0x10c>)
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d03d      	beq.n	80054ce <processLines+0x9e>
    	   if(line[0] >= '0' && line [0] <= '9'){//first char is a number, assume this is the imei from cgsn
 8005452:	4b39      	ldr	r3, [pc, #228]	; (8005538 <processLines+0x108>)
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	2b2f      	cmp	r3, #47	; 0x2f
 8005458:	d939      	bls.n	80054ce <processLines+0x9e>
 800545a:	4b37      	ldr	r3, [pc, #220]	; (8005538 <processLines+0x108>)
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	2b39      	cmp	r3, #57	; 0x39
 8005460:	d835      	bhi.n	80054ce <processLines+0x9e>

    		   int i = 0;
 8005462:	2300      	movs	r3, #0
 8005464:	607b      	str	r3, [r7, #4]
    		   while(line[i] >= '0' && line [i] <= '9'){
 8005466:	e00d      	b.n	8005484 <processLines+0x54>
    			   getSettings()->MEI[i] = line[i];
 8005468:	f7fe fcbe 	bl	8003de8 <getSettings>
 800546c:	4602      	mov	r2, r0
 800546e:	4932      	ldr	r1, [pc, #200]	; (8005538 <processLines+0x108>)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	440b      	add	r3, r1
 8005474:	7819      	ldrb	r1, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4413      	add	r3, r2
 800547a:	460a      	mov	r2, r1
 800547c:	701a      	strb	r2, [r3, #0]

    			   i++;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	3301      	adds	r3, #1
 8005482:	607b      	str	r3, [r7, #4]
    		   while(line[i] >= '0' && line [i] <= '9'){
 8005484:	4a2c      	ldr	r2, [pc, #176]	; (8005538 <processLines+0x108>)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4413      	add	r3, r2
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	2b2f      	cmp	r3, #47	; 0x2f
 800548e:	d905      	bls.n	800549c <processLines+0x6c>
 8005490:	4a29      	ldr	r2, [pc, #164]	; (8005538 <processLines+0x108>)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4413      	add	r3, r2
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	2b39      	cmp	r3, #57	; 0x39
 800549a:	d9e5      	bls.n	8005468 <processLines+0x38>
    		   }
    		   getSettings()->MEI[i] = 0;//terminate with null char
 800549c:	f7fe fca4 	bl	8003de8 <getSettings>
 80054a0:	4602      	mov	r2, r0
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4413      	add	r3, r2
 80054a6:	2200      	movs	r2, #0
 80054a8:	701a      	strb	r2, [r3, #0]

    		   Uart_SendString("Updated IMEI: ", pc_uart);
 80054aa:	4925      	ldr	r1, [pc, #148]	; (8005540 <processLines+0x110>)
 80054ac:	4825      	ldr	r0, [pc, #148]	; (8005544 <processLines+0x114>)
 80054ae:	f7fc fa71 	bl	8001994 <Uart_SendString>
    		   Uart_SendString(getSettings()->MEI, pc_uart);
 80054b2:	f7fe fc99 	bl	8003de8 <getSettings>
 80054b6:	4603      	mov	r3, r0
 80054b8:	4921      	ldr	r1, [pc, #132]	; (8005540 <processLines+0x110>)
 80054ba:	4618      	mov	r0, r3
 80054bc:	f7fc fa6a 	bl	8001994 <Uart_SendString>
    		   Uart_SendString("\r\n", pc_uart);
 80054c0:	491f      	ldr	r1, [pc, #124]	; (8005540 <processLines+0x110>)
 80054c2:	4821      	ldr	r0, [pc, #132]	; (8005548 <processLines+0x118>)
 80054c4:	f7fc fa66 	bl	8001994 <Uart_SendString>

    		   cgsn_flag = 0;
 80054c8:	4b1c      	ldr	r3, [pc, #112]	; (800553c <processLines+0x10c>)
 80054ca:	2200      	movs	r2, #0
 80054cc:	701a      	strb	r2, [r3, #0]
    	   }
       }

       if(line[0] == '+'){
 80054ce:	4b1a      	ldr	r3, [pc, #104]	; (8005538 <processLines+0x108>)
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	2b2b      	cmp	r3, #43	; 0x2b
 80054d4:	d103      	bne.n	80054de <processLines+0xae>
           URCProcessor(line);
 80054d6:	4818      	ldr	r0, [pc, #96]	; (8005538 <processLines+0x108>)
 80054d8:	f000 f886 	bl	80055e8 <URCProcessor>

	   }


    }
}
 80054dc:	e026      	b.n	800552c <processLines+0xfc>
       else if(line[0] == '$') {
 80054de:	4b16      	ldr	r3, [pc, #88]	; (8005538 <processLines+0x108>)
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	2b24      	cmp	r3, #36	; 0x24
 80054e4:	d103      	bne.n	80054ee <processLines+0xbe>
    	   NMEAProcessor(line);
 80054e6:	4814      	ldr	r0, [pc, #80]	; (8005538 <processLines+0x108>)
 80054e8:	f000 f83c 	bl	8005564 <NMEAProcessor>
}
 80054ec:	e01e      	b.n	800552c <processLines+0xfc>
       else if(!strncmp(line, "RDY", 3)) {
 80054ee:	2203      	movs	r2, #3
 80054f0:	4916      	ldr	r1, [pc, #88]	; (800554c <processLines+0x11c>)
 80054f2:	4811      	ldr	r0, [pc, #68]	; (8005538 <processLines+0x108>)
 80054f4:	f00c fb8a 	bl	8011c0c <strncmp>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d107      	bne.n	800550e <processLines+0xde>
           readyState = STATE_OK;
 80054fe:	4b14      	ldr	r3, [pc, #80]	; (8005550 <processLines+0x120>)
 8005500:	2202      	movs	r2, #2
 8005502:	701a      	strb	r2, [r3, #0]
       	   Uart_SendString("SIM7600 Ready\r\n", pc_uart);
 8005504:	490e      	ldr	r1, [pc, #56]	; (8005540 <processLines+0x110>)
 8005506:	4813      	ldr	r0, [pc, #76]	; (8005554 <processLines+0x124>)
 8005508:	f7fc fa44 	bl	8001994 <Uart_SendString>
}
 800550c:	e00e      	b.n	800552c <processLines+0xfc>
       else if(!strncmp(line, "ERROR", 5)) {
 800550e:	2205      	movs	r2, #5
 8005510:	4911      	ldr	r1, [pc, #68]	; (8005558 <processLines+0x128>)
 8005512:	4809      	ldr	r0, [pc, #36]	; (8005538 <processLines+0x108>)
 8005514:	f00c fb7a 	bl	8011c0c <strncmp>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d106      	bne.n	800552c <processLines+0xfc>
    	  Uart_SendString("SIM7600 ERROR\r\n", pc_uart);
 800551e:	4908      	ldr	r1, [pc, #32]	; (8005540 <processLines+0x110>)
 8005520:	480e      	ldr	r0, [pc, #56]	; (800555c <processLines+0x12c>)
 8005522:	f7fc fa37 	bl	8001994 <Uart_SendString>
		  errorMonitorFlag = 1;
 8005526:	4b0e      	ldr	r3, [pc, #56]	; (8005560 <processLines+0x130>)
 8005528:	2201      	movs	r2, #1
 800552a:	701a      	strb	r2, [r3, #0]
}
 800552c:	bf00      	nop
 800552e:	3708      	adds	r7, #8
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	20007330 	.word	0x20007330
 8005538:	20007734 	.word	0x20007734
 800553c:	2000781c 	.word	0x2000781c
 8005540:	20003fd8 	.word	0x20003fd8
 8005544:	08018c00 	.word	0x08018c00
 8005548:	08018c10 	.word	0x08018c10
 800554c:	08018c14 	.word	0x08018c14
 8005550:	20007826 	.word	0x20007826
 8005554:	08018c18 	.word	0x08018c18
 8005558:	08018c28 	.word	0x08018c28
 800555c:	08018c30 	.word	0x08018c30
 8005560:	20007a14 	.word	0x20007a14

08005564 <NMEAProcessor>:

void NMEAProcessor(char * line){
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
//	 Uart_SendString("Process line\r\n", pc_uart);
	if(!strncmp(line, "$FFWX,2", 7)){
 800556c:	2207      	movs	r2, #7
 800556e:	491a      	ldr	r1, [pc, #104]	; (80055d8 <NMEAProcessor+0x74>)
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f00c fb4b 	bl	8011c0c <strncmp>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d10a      	bne.n	8005592 <NMEAProcessor+0x2e>
		//$FFWX,2,67,1607845207657
		//0123456789012345678901234
		returnIndex = util_atoi_n(line+8, 20);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	3308      	adds	r3, #8
 8005580:	2114      	movs	r1, #20
 8005582:	4618      	mov	r0, r3
 8005584:	f001 f862 	bl	800664c <util_atoi_n>
 8005588:	4603      	mov	r3, r0
 800558a:	461a      	mov	r2, r3
 800558c:	4b13      	ldr	r3, [pc, #76]	; (80055dc <NMEAProcessor+0x78>)
 800558e:	601a      	str	r2, [r3, #0]
		//$FFWX,4,SID=setting
		//$FFWX,4,CLK=setting
		//0123456789012345678901234
		settingsLineProcessor(line+8,1,0);
	}
}
 8005590:	e01e      	b.n	80055d0 <NMEAProcessor+0x6c>
	else if(!strncmp(line, "$FFWX,3", 7)){
 8005592:	2207      	movs	r2, #7
 8005594:	4912      	ldr	r1, [pc, #72]	; (80055e0 <NMEAProcessor+0x7c>)
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f00c fb38 	bl	8011c0c <strncmp>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d107      	bne.n	80055b2 <NMEAProcessor+0x4e>
		settingsLineProcessor(line+8,1,1);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	3308      	adds	r3, #8
 80055a6:	2201      	movs	r2, #1
 80055a8:	2101      	movs	r1, #1
 80055aa:	4618      	mov	r0, r3
 80055ac:	f7fe fc42 	bl	8003e34 <settingsLineProcessor>
}
 80055b0:	e00e      	b.n	80055d0 <NMEAProcessor+0x6c>
	else if(!strncmp(line, "$FFWX,4", 7)){
 80055b2:	2207      	movs	r2, #7
 80055b4:	490b      	ldr	r1, [pc, #44]	; (80055e4 <NMEAProcessor+0x80>)
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f00c fb28 	bl	8011c0c <strncmp>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d106      	bne.n	80055d0 <NMEAProcessor+0x6c>
		settingsLineProcessor(line+8,1,0);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	3308      	adds	r3, #8
 80055c6:	2200      	movs	r2, #0
 80055c8:	2101      	movs	r1, #1
 80055ca:	4618      	mov	r0, r3
 80055cc:	f7fe fc32 	bl	8003e34 <settingsLineProcessor>
}
 80055d0:	bf00      	nop
 80055d2:	3708      	adds	r7, #8
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	08018c40 	.word	0x08018c40
 80055dc:	20007a10 	.word	0x20007a10
 80055e0:	08018c48 	.word	0x08018c48
 80055e4:	08018c50 	.word	0x08018c50

080055e8 <URCProcessor>:



void URCProcessor(char * line){
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]



    if(!strncmp(line, "+CSQ:", 5)) {
 80055f0:	2205      	movs	r2, #5
 80055f2:	4932      	ldr	r1, [pc, #200]	; (80056bc <URCProcessor+0xd4>)
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f00c fb09 	bl	8011c0c <strncmp>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d10a      	bne.n	8005616 <URCProcessor+0x2e>
    	//+CSQ: 19,99
    	//012345678901

    	csq = util_atoi_n(line + 6 ,2);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	3306      	adds	r3, #6
 8005604:	2102      	movs	r1, #2
 8005606:	4618      	mov	r0, r3
 8005608:	f001 f820 	bl	800664c <util_atoi_n>
 800560c:	4603      	mov	r3, r0
 800560e:	b29a      	uxth	r2, r3
 8005610:	4b2b      	ldr	r3, [pc, #172]	; (80056c0 <URCProcessor+0xd8>)
 8005612:	801a      	strh	r2, [r3, #0]

    else if(!strncmp(line, "+HTTPREAD:0", 11)) {
		httpReadSuccessFlag = 1;
	}

}
 8005614:	e04e      	b.n	80056b4 <URCProcessor+0xcc>
    else if(!strncmp(line, "+CPIN: READY", 12)) {
 8005616:	220c      	movs	r2, #12
 8005618:	492a      	ldr	r1, [pc, #168]	; (80056c4 <URCProcessor+0xdc>)
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f00c faf6 	bl	8011c0c <strncmp>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d103      	bne.n	800562e <URCProcessor+0x46>
    	cpinState = STATE_OK;
 8005626:	4b28      	ldr	r3, [pc, #160]	; (80056c8 <URCProcessor+0xe0>)
 8005628:	2202      	movs	r2, #2
 800562a:	701a      	strb	r2, [r3, #0]
}
 800562c:	e042      	b.n	80056b4 <URCProcessor+0xcc>
    else if(!strncmp(line, "+HTTPACTION:", 12)) {
 800562e:	220c      	movs	r2, #12
 8005630:	4926      	ldr	r1, [pc, #152]	; (80056cc <URCProcessor+0xe4>)
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f00c faea 	bl	8011c0c <strncmp>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d114      	bne.n	8005668 <URCProcessor+0x80>
       	httpStatusCode = util_atoi_n(line + 15 ,3);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	330f      	adds	r3, #15
 8005642:	2103      	movs	r1, #3
 8005644:	4618      	mov	r0, r3
 8005646:	f001 f801 	bl	800664c <util_atoi_n>
 800564a:	4603      	mov	r3, r0
 800564c:	461a      	mov	r2, r3
 800564e:	4b20      	ldr	r3, [pc, #128]	; (80056d0 <URCProcessor+0xe8>)
 8005650:	601a      	str	r2, [r3, #0]
       	httpDataLen = util_atoi_n(line + 19,5);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	3313      	adds	r3, #19
 8005656:	2105      	movs	r1, #5
 8005658:	4618      	mov	r0, r3
 800565a:	f000 fff7 	bl	800664c <util_atoi_n>
 800565e:	4603      	mov	r3, r0
 8005660:	461a      	mov	r2, r3
 8005662:	4b1c      	ldr	r3, [pc, #112]	; (80056d4 <URCProcessor+0xec>)
 8005664:	601a      	str	r2, [r3, #0]
}
 8005666:	e025      	b.n	80056b4 <URCProcessor+0xcc>
    else if(!strncmp(line, "+CCLK:", 6)) {
 8005668:	2206      	movs	r2, #6
 800566a:	491b      	ldr	r1, [pc, #108]	; (80056d8 <URCProcessor+0xf0>)
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f00c facd 	bl	8011c0c <strncmp>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d106      	bne.n	8005686 <URCProcessor+0x9e>
    	setTime(line + 8, TIMESTATE_OK_NITZ);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	3308      	adds	r3, #8
 800567c:	2101      	movs	r1, #1
 800567e:	4618      	mov	r0, r3
 8005680:	f000 fd60 	bl	8006144 <setTime>
}
 8005684:	e016      	b.n	80056b4 <URCProcessor+0xcc>
    else if(!strncmp(line, "+HTTPREAD: 0", 12)) {
 8005686:	220c      	movs	r2, #12
 8005688:	4914      	ldr	r1, [pc, #80]	; (80056dc <URCProcessor+0xf4>)
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f00c fabe 	bl	8011c0c <strncmp>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d103      	bne.n	800569e <URCProcessor+0xb6>
    	httpReadSuccessFlag = 1;
 8005696:	4b12      	ldr	r3, [pc, #72]	; (80056e0 <URCProcessor+0xf8>)
 8005698:	2201      	movs	r2, #1
 800569a:	701a      	strb	r2, [r3, #0]
}
 800569c:	e00a      	b.n	80056b4 <URCProcessor+0xcc>
    else if(!strncmp(line, "+HTTPREAD:0", 11)) {
 800569e:	220b      	movs	r2, #11
 80056a0:	4910      	ldr	r1, [pc, #64]	; (80056e4 <URCProcessor+0xfc>)
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f00c fab2 	bl	8011c0c <strncmp>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d102      	bne.n	80056b4 <URCProcessor+0xcc>
		httpReadSuccessFlag = 1;
 80056ae:	4b0c      	ldr	r3, [pc, #48]	; (80056e0 <URCProcessor+0xf8>)
 80056b0:	2201      	movs	r2, #1
 80056b2:	701a      	strb	r2, [r3, #0]
}
 80056b4:	bf00      	nop
 80056b6:	3708      	adds	r7, #8
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	08018c58 	.word	0x08018c58
 80056c0:	200077b4 	.word	0x200077b4
 80056c4:	08018c60 	.word	0x08018c60
 80056c8:	20007827 	.word	0x20007827
 80056cc:	08018c70 	.word	0x08018c70
 80056d0:	20007a04 	.word	0x20007a04
 80056d4:	20007a08 	.word	0x20007a08
 80056d8:	08018c80 	.word	0x08018c80
 80056dc:	08018c88 	.word	0x08018c88
 80056e0:	20007a1b 	.word	0x20007a1b
 80056e4:	08018c98 	.word	0x08018c98

080056e8 <toggleHold>:
uint8_t getCSQ(void ){
	return csq;

}

void toggleHold(void){
 80056e8:	b580      	push	{r7, lr}
 80056ea:	af00      	add	r7, sp, #0
	if(hold == 0){
 80056ec:	4b0a      	ldr	r3, [pc, #40]	; (8005718 <toggleHold+0x30>)
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d107      	bne.n	8005704 <toggleHold+0x1c>
		hold = 1;
 80056f4:	4b08      	ldr	r3, [pc, #32]	; (8005718 <toggleHold+0x30>)
 80056f6:	2201      	movs	r2, #1
 80056f8:	701a      	strb	r2, [r3, #0]
		 Uart_SendString("Toggle Hold ON\r\n", pc_uart);
 80056fa:	4908      	ldr	r1, [pc, #32]	; (800571c <toggleHold+0x34>)
 80056fc:	4808      	ldr	r0, [pc, #32]	; (8005720 <toggleHold+0x38>)
 80056fe:	f7fc f949 	bl	8001994 <Uart_SendString>
	}
	else{
		hold = 0;
		 Uart_SendString("Toggle Hold OFF\r\n", pc_uart);
	}
}
 8005702:	e006      	b.n	8005712 <toggleHold+0x2a>
		hold = 0;
 8005704:	4b04      	ldr	r3, [pc, #16]	; (8005718 <toggleHold+0x30>)
 8005706:	2200      	movs	r2, #0
 8005708:	701a      	strb	r2, [r3, #0]
		 Uart_SendString("Toggle Hold OFF\r\n", pc_uart);
 800570a:	4904      	ldr	r1, [pc, #16]	; (800571c <toggleHold+0x34>)
 800570c:	4805      	ldr	r0, [pc, #20]	; (8005724 <toggleHold+0x3c>)
 800570e:	f7fc f941 	bl	8001994 <Uart_SendString>
}
 8005712:	bf00      	nop
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	20007847 	.word	0x20007847
 800571c:	20003fd8 	.word	0x20003fd8
 8005720:	08018ca4 	.word	0x08018ca4
 8005724:	08018cb8 	.word	0x08018cb8

08005728 <Debug>:

void Debug(char * line){
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
	if(1){
		Uart_SendString(line, pc_uart);
 8005730:	4903      	ldr	r1, [pc, #12]	; (8005740 <Debug+0x18>)
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f7fc f92e 	bl	8001994 <Uart_SendString>
	}

}
 8005738:	bf00      	nop
 800573a:	3708      	adds	r7, #8
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}
 8005740:	20003fd8 	.word	0x20003fd8

08005744 <setCommandState>:

void setCommandState(CMD_STATE newState){
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	4603      	mov	r3, r0
 800574c:	71fb      	strb	r3, [r7, #7]
//	Debug("\r\n#CommandSate=");
//	sprintf(pbuffer, "%u",newState);
//	Debug(pbuffer);
//	Debug("\r\n");

	cmdState = newState;
 800574e:	4a04      	ldr	r2, [pc, #16]	; (8005760 <setCommandState+0x1c>)
 8005750:	79fb      	ldrb	r3, [r7, #7]
 8005752:	7013      	strb	r3, [r2, #0]
}
 8005754:	bf00      	nop
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr
 8005760:	20007829 	.word	0x20007829

08005764 <pauseCommmandSate>:

void pauseCommmandSate(CMD_STATE newState, uint32_t pause){
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
 800576a:	4603      	mov	r3, r0
 800576c:	6039      	str	r1, [r7, #0]
 800576e:	71fb      	strb	r3, [r7, #7]
	pauseTimeout = pause;
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	b29a      	uxth	r2, r3
 8005774:	4b05      	ldr	r3, [pc, #20]	; (800578c <pauseCommmandSate+0x28>)
 8005776:	801a      	strh	r2, [r3, #0]
	pauseNextState = newState;
 8005778:	4a05      	ldr	r2, [pc, #20]	; (8005790 <pauseCommmandSate+0x2c>)
 800577a:	79fb      	ldrb	r3, [r7, #7]
 800577c:	7013      	strb	r3, [r2, #0]
	setCommandState(CMD_PAUSE);
 800577e:	2007      	movs	r0, #7
 8005780:	f7ff ffe0 	bl	8005744 <setCommandState>
}
 8005784:	bf00      	nop
 8005786:	3708      	adds	r7, #8
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}
 800578c:	20007844 	.word	0x20007844
 8005790:	20007846 	.word	0x20007846

08005794 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800579a:	2300      	movs	r3, #0
 800579c:	607b      	str	r3, [r7, #4]
 800579e:	4b10      	ldr	r3, [pc, #64]	; (80057e0 <HAL_MspInit+0x4c>)
 80057a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057a2:	4a0f      	ldr	r2, [pc, #60]	; (80057e0 <HAL_MspInit+0x4c>)
 80057a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80057a8:	6453      	str	r3, [r2, #68]	; 0x44
 80057aa:	4b0d      	ldr	r3, [pc, #52]	; (80057e0 <HAL_MspInit+0x4c>)
 80057ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057b2:	607b      	str	r3, [r7, #4]
 80057b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80057b6:	2300      	movs	r3, #0
 80057b8:	603b      	str	r3, [r7, #0]
 80057ba:	4b09      	ldr	r3, [pc, #36]	; (80057e0 <HAL_MspInit+0x4c>)
 80057bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057be:	4a08      	ldr	r2, [pc, #32]	; (80057e0 <HAL_MspInit+0x4c>)
 80057c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057c4:	6413      	str	r3, [r2, #64]	; 0x40
 80057c6:	4b06      	ldr	r3, [pc, #24]	; (80057e0 <HAL_MspInit+0x4c>)
 80057c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057ce:	603b      	str	r3, [r7, #0]
 80057d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80057d2:	bf00      	nop
 80057d4:	370c      	adds	r7, #12
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	40023800 	.word	0x40023800

080057e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b08a      	sub	sp, #40	; 0x28
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057ec:	f107 0314 	add.w	r3, r7, #20
 80057f0:	2200      	movs	r2, #0
 80057f2:	601a      	str	r2, [r3, #0]
 80057f4:	605a      	str	r2, [r3, #4]
 80057f6:	609a      	str	r2, [r3, #8]
 80057f8:	60da      	str	r2, [r3, #12]
 80057fa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a2f      	ldr	r2, [pc, #188]	; (80058c0 <HAL_ADC_MspInit+0xdc>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d157      	bne.n	80058b6 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005806:	2300      	movs	r3, #0
 8005808:	613b      	str	r3, [r7, #16]
 800580a:	4b2e      	ldr	r3, [pc, #184]	; (80058c4 <HAL_ADC_MspInit+0xe0>)
 800580c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800580e:	4a2d      	ldr	r2, [pc, #180]	; (80058c4 <HAL_ADC_MspInit+0xe0>)
 8005810:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005814:	6453      	str	r3, [r2, #68]	; 0x44
 8005816:	4b2b      	ldr	r3, [pc, #172]	; (80058c4 <HAL_ADC_MspInit+0xe0>)
 8005818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800581a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800581e:	613b      	str	r3, [r7, #16]
 8005820:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005822:	2300      	movs	r3, #0
 8005824:	60fb      	str	r3, [r7, #12]
 8005826:	4b27      	ldr	r3, [pc, #156]	; (80058c4 <HAL_ADC_MspInit+0xe0>)
 8005828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800582a:	4a26      	ldr	r2, [pc, #152]	; (80058c4 <HAL_ADC_MspInit+0xe0>)
 800582c:	f043 0301 	orr.w	r3, r3, #1
 8005830:	6313      	str	r3, [r2, #48]	; 0x30
 8005832:	4b24      	ldr	r3, [pc, #144]	; (80058c4 <HAL_ADC_MspInit+0xe0>)
 8005834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005836:	f003 0301 	and.w	r3, r3, #1
 800583a:	60fb      	str	r3, [r7, #12]
 800583c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ADC1_IN0_WINDDIR_Pin|ADC1_IN1_VSENSE_Pin;
 800583e:	2303      	movs	r3, #3
 8005840:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005842:	2303      	movs	r3, #3
 8005844:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005846:	2300      	movs	r3, #0
 8005848:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800584a:	f107 0314 	add.w	r3, r7, #20
 800584e:	4619      	mov	r1, r3
 8005850:	481d      	ldr	r0, [pc, #116]	; (80058c8 <HAL_ADC_MspInit+0xe4>)
 8005852:	f002 f95f 	bl	8007b14 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8005856:	4b1d      	ldr	r3, [pc, #116]	; (80058cc <HAL_ADC_MspInit+0xe8>)
 8005858:	4a1d      	ldr	r2, [pc, #116]	; (80058d0 <HAL_ADC_MspInit+0xec>)
 800585a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800585c:	4b1b      	ldr	r3, [pc, #108]	; (80058cc <HAL_ADC_MspInit+0xe8>)
 800585e:	2200      	movs	r2, #0
 8005860:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005862:	4b1a      	ldr	r3, [pc, #104]	; (80058cc <HAL_ADC_MspInit+0xe8>)
 8005864:	2200      	movs	r2, #0
 8005866:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005868:	4b18      	ldr	r3, [pc, #96]	; (80058cc <HAL_ADC_MspInit+0xe8>)
 800586a:	2200      	movs	r2, #0
 800586c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800586e:	4b17      	ldr	r3, [pc, #92]	; (80058cc <HAL_ADC_MspInit+0xe8>)
 8005870:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005874:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005876:	4b15      	ldr	r3, [pc, #84]	; (80058cc <HAL_ADC_MspInit+0xe8>)
 8005878:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800587c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800587e:	4b13      	ldr	r3, [pc, #76]	; (80058cc <HAL_ADC_MspInit+0xe8>)
 8005880:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005884:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005886:	4b11      	ldr	r3, [pc, #68]	; (80058cc <HAL_ADC_MspInit+0xe8>)
 8005888:	f44f 7280 	mov.w	r2, #256	; 0x100
 800588c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800588e:	4b0f      	ldr	r3, [pc, #60]	; (80058cc <HAL_ADC_MspInit+0xe8>)
 8005890:	2200      	movs	r2, #0
 8005892:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005894:	4b0d      	ldr	r3, [pc, #52]	; (80058cc <HAL_ADC_MspInit+0xe8>)
 8005896:	2200      	movs	r2, #0
 8005898:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800589a:	480c      	ldr	r0, [pc, #48]	; (80058cc <HAL_ADC_MspInit+0xe8>)
 800589c:	f001 fd2c 	bl	80072f8 <HAL_DMA_Init>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d001      	beq.n	80058aa <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80058a6:	f7fd fb87 	bl	8002fb8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a07      	ldr	r2, [pc, #28]	; (80058cc <HAL_ADC_MspInit+0xe8>)
 80058ae:	639a      	str	r2, [r3, #56]	; 0x38
 80058b0:	4a06      	ldr	r2, [pc, #24]	; (80058cc <HAL_ADC_MspInit+0xe8>)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80058b6:	bf00      	nop
 80058b8:	3728      	adds	r7, #40	; 0x28
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	40012000 	.word	0x40012000
 80058c4:	40023800 	.word	0x40023800
 80058c8:	40020000 	.word	0x40020000
 80058cc:	20003bbc 	.word	0x20003bbc
 80058d0:	40026410 	.word	0x40026410

080058d4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b088      	sub	sp, #32
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80058dc:	f107 0308 	add.w	r3, r7, #8
 80058e0:	2200      	movs	r2, #0
 80058e2:	601a      	str	r2, [r3, #0]
 80058e4:	605a      	str	r2, [r3, #4]
 80058e6:	609a      	str	r2, [r3, #8]
 80058e8:	60da      	str	r2, [r3, #12]
 80058ea:	611a      	str	r2, [r3, #16]
 80058ec:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a0c      	ldr	r2, [pc, #48]	; (8005924 <HAL_RTC_MspInit+0x50>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d110      	bne.n	800591a <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80058f8:	2302      	movs	r3, #2
 80058fa:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 80058fc:	4b0a      	ldr	r3, [pc, #40]	; (8005928 <HAL_RTC_MspInit+0x54>)
 80058fe:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005900:	f107 0308 	add.w	r3, r7, #8
 8005904:	4618      	mov	r0, r3
 8005906:	f002 ff7d 	bl	8008804 <HAL_RCCEx_PeriphCLKConfig>
 800590a:	4603      	mov	r3, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d001      	beq.n	8005914 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8005910:	f7fd fb52 	bl	8002fb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005914:	4b05      	ldr	r3, [pc, #20]	; (800592c <HAL_RTC_MspInit+0x58>)
 8005916:	2201      	movs	r2, #1
 8005918:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800591a:	bf00      	nop
 800591c:	3720      	adds	r7, #32
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
 8005922:	bf00      	nop
 8005924:	40002800 	.word	0x40002800
 8005928:	00190300 	.word	0x00190300
 800592c:	42470e3c 	.word	0x42470e3c

08005930 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b08a      	sub	sp, #40	; 0x28
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005938:	f107 0314 	add.w	r3, r7, #20
 800593c:	2200      	movs	r2, #0
 800593e:	601a      	str	r2, [r3, #0]
 8005940:	605a      	str	r2, [r3, #4]
 8005942:	609a      	str	r2, [r3, #8]
 8005944:	60da      	str	r2, [r3, #12]
 8005946:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a70      	ldr	r2, [pc, #448]	; (8005b10 <HAL_SD_MspInit+0x1e0>)
 800594e:	4293      	cmp	r3, r2
 8005950:	f040 80da 	bne.w	8005b08 <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8005954:	2300      	movs	r3, #0
 8005956:	613b      	str	r3, [r7, #16]
 8005958:	4b6e      	ldr	r3, [pc, #440]	; (8005b14 <HAL_SD_MspInit+0x1e4>)
 800595a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800595c:	4a6d      	ldr	r2, [pc, #436]	; (8005b14 <HAL_SD_MspInit+0x1e4>)
 800595e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005962:	6453      	str	r3, [r2, #68]	; 0x44
 8005964:	4b6b      	ldr	r3, [pc, #428]	; (8005b14 <HAL_SD_MspInit+0x1e4>)
 8005966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005968:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800596c:	613b      	str	r3, [r7, #16]
 800596e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005970:	2300      	movs	r3, #0
 8005972:	60fb      	str	r3, [r7, #12]
 8005974:	4b67      	ldr	r3, [pc, #412]	; (8005b14 <HAL_SD_MspInit+0x1e4>)
 8005976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005978:	4a66      	ldr	r2, [pc, #408]	; (8005b14 <HAL_SD_MspInit+0x1e4>)
 800597a:	f043 0301 	orr.w	r3, r3, #1
 800597e:	6313      	str	r3, [r2, #48]	; 0x30
 8005980:	4b64      	ldr	r3, [pc, #400]	; (8005b14 <HAL_SD_MspInit+0x1e4>)
 8005982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005984:	f003 0301 	and.w	r3, r3, #1
 8005988:	60fb      	str	r3, [r7, #12]
 800598a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800598c:	2300      	movs	r3, #0
 800598e:	60bb      	str	r3, [r7, #8]
 8005990:	4b60      	ldr	r3, [pc, #384]	; (8005b14 <HAL_SD_MspInit+0x1e4>)
 8005992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005994:	4a5f      	ldr	r2, [pc, #380]	; (8005b14 <HAL_SD_MspInit+0x1e4>)
 8005996:	f043 0302 	orr.w	r3, r3, #2
 800599a:	6313      	str	r3, [r2, #48]	; 0x30
 800599c:	4b5d      	ldr	r3, [pc, #372]	; (8005b14 <HAL_SD_MspInit+0x1e4>)
 800599e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a0:	f003 0302 	and.w	r3, r3, #2
 80059a4:	60bb      	str	r3, [r7, #8]
 80059a6:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> SDIO_D1
    PA9     ------> SDIO_D2
    PB5     ------> SDIO_D3
    PB7     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 80059a8:	f44f 7350 	mov.w	r3, #832	; 0x340
 80059ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059ae:	2302      	movs	r3, #2
 80059b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80059b2:	2301      	movs	r3, #1
 80059b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059b6:	2303      	movs	r3, #3
 80059b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80059ba:	230c      	movs	r3, #12
 80059bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059be:	f107 0314 	add.w	r3, r7, #20
 80059c2:	4619      	mov	r1, r3
 80059c4:	4854      	ldr	r0, [pc, #336]	; (8005b18 <HAL_SD_MspInit+0x1e8>)
 80059c6:	f002 f8a5 	bl	8007b14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80059ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059d0:	2302      	movs	r3, #2
 80059d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059d4:	2300      	movs	r3, #0
 80059d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059d8:	2303      	movs	r3, #3
 80059da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80059dc:	230c      	movs	r3, #12
 80059de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059e0:	f107 0314 	add.w	r3, r7, #20
 80059e4:	4619      	mov	r1, r3
 80059e6:	484d      	ldr	r0, [pc, #308]	; (8005b1c <HAL_SD_MspInit+0x1ec>)
 80059e8:	f002 f894 	bl	8007b14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80059ec:	23a0      	movs	r3, #160	; 0xa0
 80059ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059f0:	2302      	movs	r3, #2
 80059f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80059f4:	2301      	movs	r3, #1
 80059f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059f8:	2303      	movs	r3, #3
 80059fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80059fc:	230c      	movs	r3, #12
 80059fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a00:	f107 0314 	add.w	r3, r7, #20
 8005a04:	4619      	mov	r1, r3
 8005a06:	4845      	ldr	r0, [pc, #276]	; (8005b1c <HAL_SD_MspInit+0x1ec>)
 8005a08:	f002 f884 	bl	8007b14 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8005a0c:	4b44      	ldr	r3, [pc, #272]	; (8005b20 <HAL_SD_MspInit+0x1f0>)
 8005a0e:	4a45      	ldr	r2, [pc, #276]	; (8005b24 <HAL_SD_MspInit+0x1f4>)
 8005a10:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8005a12:	4b43      	ldr	r3, [pc, #268]	; (8005b20 <HAL_SD_MspInit+0x1f0>)
 8005a14:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005a18:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005a1a:	4b41      	ldr	r3, [pc, #260]	; (8005b20 <HAL_SD_MspInit+0x1f0>)
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a20:	4b3f      	ldr	r3, [pc, #252]	; (8005b20 <HAL_SD_MspInit+0x1f0>)
 8005a22:	2200      	movs	r2, #0
 8005a24:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005a26:	4b3e      	ldr	r3, [pc, #248]	; (8005b20 <HAL_SD_MspInit+0x1f0>)
 8005a28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005a2c:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005a2e:	4b3c      	ldr	r3, [pc, #240]	; (8005b20 <HAL_SD_MspInit+0x1f0>)
 8005a30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005a34:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005a36:	4b3a      	ldr	r3, [pc, #232]	; (8005b20 <HAL_SD_MspInit+0x1f0>)
 8005a38:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005a3c:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8005a3e:	4b38      	ldr	r3, [pc, #224]	; (8005b20 <HAL_SD_MspInit+0x1f0>)
 8005a40:	2220      	movs	r2, #32
 8005a42:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005a44:	4b36      	ldr	r3, [pc, #216]	; (8005b20 <HAL_SD_MspInit+0x1f0>)
 8005a46:	2200      	movs	r2, #0
 8005a48:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005a4a:	4b35      	ldr	r3, [pc, #212]	; (8005b20 <HAL_SD_MspInit+0x1f0>)
 8005a4c:	2204      	movs	r2, #4
 8005a4e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005a50:	4b33      	ldr	r3, [pc, #204]	; (8005b20 <HAL_SD_MspInit+0x1f0>)
 8005a52:	2203      	movs	r2, #3
 8005a54:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8005a56:	4b32      	ldr	r3, [pc, #200]	; (8005b20 <HAL_SD_MspInit+0x1f0>)
 8005a58:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005a5c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8005a5e:	4b30      	ldr	r3, [pc, #192]	; (8005b20 <HAL_SD_MspInit+0x1f0>)
 8005a60:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005a64:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8005a66:	482e      	ldr	r0, [pc, #184]	; (8005b20 <HAL_SD_MspInit+0x1f0>)
 8005a68:	f001 fc46 	bl	80072f8 <HAL_DMA_Init>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d001      	beq.n	8005a76 <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 8005a72:	f7fd faa1 	bl	8002fb8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a29      	ldr	r2, [pc, #164]	; (8005b20 <HAL_SD_MspInit+0x1f0>)
 8005a7a:	641a      	str	r2, [r3, #64]	; 0x40
 8005a7c:	4a28      	ldr	r2, [pc, #160]	; (8005b20 <HAL_SD_MspInit+0x1f0>)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8005a82:	4b29      	ldr	r3, [pc, #164]	; (8005b28 <HAL_SD_MspInit+0x1f8>)
 8005a84:	4a29      	ldr	r2, [pc, #164]	; (8005b2c <HAL_SD_MspInit+0x1fc>)
 8005a86:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8005a88:	4b27      	ldr	r3, [pc, #156]	; (8005b28 <HAL_SD_MspInit+0x1f8>)
 8005a8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005a8e:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005a90:	4b25      	ldr	r3, [pc, #148]	; (8005b28 <HAL_SD_MspInit+0x1f8>)
 8005a92:	2240      	movs	r2, #64	; 0x40
 8005a94:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a96:	4b24      	ldr	r3, [pc, #144]	; (8005b28 <HAL_SD_MspInit+0x1f8>)
 8005a98:	2200      	movs	r2, #0
 8005a9a:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005a9c:	4b22      	ldr	r3, [pc, #136]	; (8005b28 <HAL_SD_MspInit+0x1f8>)
 8005a9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005aa2:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005aa4:	4b20      	ldr	r3, [pc, #128]	; (8005b28 <HAL_SD_MspInit+0x1f8>)
 8005aa6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005aaa:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005aac:	4b1e      	ldr	r3, [pc, #120]	; (8005b28 <HAL_SD_MspInit+0x1f8>)
 8005aae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005ab2:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8005ab4:	4b1c      	ldr	r3, [pc, #112]	; (8005b28 <HAL_SD_MspInit+0x1f8>)
 8005ab6:	2220      	movs	r2, #32
 8005ab8:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005aba:	4b1b      	ldr	r3, [pc, #108]	; (8005b28 <HAL_SD_MspInit+0x1f8>)
 8005abc:	2200      	movs	r2, #0
 8005abe:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005ac0:	4b19      	ldr	r3, [pc, #100]	; (8005b28 <HAL_SD_MspInit+0x1f8>)
 8005ac2:	2204      	movs	r2, #4
 8005ac4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005ac6:	4b18      	ldr	r3, [pc, #96]	; (8005b28 <HAL_SD_MspInit+0x1f8>)
 8005ac8:	2203      	movs	r2, #3
 8005aca:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8005acc:	4b16      	ldr	r3, [pc, #88]	; (8005b28 <HAL_SD_MspInit+0x1f8>)
 8005ace:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005ad2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8005ad4:	4b14      	ldr	r3, [pc, #80]	; (8005b28 <HAL_SD_MspInit+0x1f8>)
 8005ad6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005ada:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8005adc:	4812      	ldr	r0, [pc, #72]	; (8005b28 <HAL_SD_MspInit+0x1f8>)
 8005ade:	f001 fc0b 	bl	80072f8 <HAL_DMA_Init>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d001      	beq.n	8005aec <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 8005ae8:	f7fd fa66 	bl	8002fb8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a0e      	ldr	r2, [pc, #56]	; (8005b28 <HAL_SD_MspInit+0x1f8>)
 8005af0:	63da      	str	r2, [r3, #60]	; 0x3c
 8005af2:	4a0d      	ldr	r2, [pc, #52]	; (8005b28 <HAL_SD_MspInit+0x1f8>)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8005af8:	2200      	movs	r2, #0
 8005afa:	2100      	movs	r1, #0
 8005afc:	2031      	movs	r0, #49	; 0x31
 8005afe:	f001 fbc4 	bl	800728a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8005b02:	2031      	movs	r0, #49	; 0x31
 8005b04:	f001 fbdd 	bl	80072c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8005b08:	bf00      	nop
 8005b0a:	3728      	adds	r7, #40	; 0x28
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	40012c00 	.word	0x40012c00
 8005b14:	40023800 	.word	0x40023800
 8005b18:	40020000 	.word	0x40020000
 8005b1c:	40020400 	.word	0x40020400
 8005b20:	20003ccc 	.word	0x20003ccc
 8005b24:	40026458 	.word	0x40026458
 8005b28:	20003d2c 	.word	0x20003d2c
 8005b2c:	400264a0 	.word	0x400264a0

08005b30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b08a      	sub	sp, #40	; 0x28
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b38:	f107 0314 	add.w	r3, r7, #20
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	601a      	str	r2, [r3, #0]
 8005b40:	605a      	str	r2, [r3, #4]
 8005b42:	609a      	str	r2, [r3, #8]
 8005b44:	60da      	str	r2, [r3, #12]
 8005b46:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a28      	ldr	r2, [pc, #160]	; (8005bf0 <HAL_SPI_MspInit+0xc0>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d149      	bne.n	8005be6 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005b52:	2300      	movs	r3, #0
 8005b54:	613b      	str	r3, [r7, #16]
 8005b56:	4b27      	ldr	r3, [pc, #156]	; (8005bf4 <HAL_SPI_MspInit+0xc4>)
 8005b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b5a:	4a26      	ldr	r2, [pc, #152]	; (8005bf4 <HAL_SPI_MspInit+0xc4>)
 8005b5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005b60:	6453      	str	r3, [r2, #68]	; 0x44
 8005b62:	4b24      	ldr	r3, [pc, #144]	; (8005bf4 <HAL_SPI_MspInit+0xc4>)
 8005b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b6a:	613b      	str	r3, [r7, #16]
 8005b6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b6e:	2300      	movs	r3, #0
 8005b70:	60fb      	str	r3, [r7, #12]
 8005b72:	4b20      	ldr	r3, [pc, #128]	; (8005bf4 <HAL_SPI_MspInit+0xc4>)
 8005b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b76:	4a1f      	ldr	r2, [pc, #124]	; (8005bf4 <HAL_SPI_MspInit+0xc4>)
 8005b78:	f043 0301 	orr.w	r3, r3, #1
 8005b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8005b7e:	4b1d      	ldr	r3, [pc, #116]	; (8005bf4 <HAL_SPI_MspInit+0xc4>)
 8005b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b82:	f003 0301 	and.w	r3, r3, #1
 8005b86:	60fb      	str	r3, [r7, #12]
 8005b88:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	60bb      	str	r3, [r7, #8]
 8005b8e:	4b19      	ldr	r3, [pc, #100]	; (8005bf4 <HAL_SPI_MspInit+0xc4>)
 8005b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b92:	4a18      	ldr	r2, [pc, #96]	; (8005bf4 <HAL_SPI_MspInit+0xc4>)
 8005b94:	f043 0302 	orr.w	r3, r3, #2
 8005b98:	6313      	str	r3, [r2, #48]	; 0x30
 8005b9a:	4b16      	ldr	r3, [pc, #88]	; (8005bf4 <HAL_SPI_MspInit+0xc4>)
 8005b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9e:	f003 0302 	and.w	r3, r3, #2
 8005ba2:	60bb      	str	r3, [r7, #8]
 8005ba4:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8005ba6:	23a0      	movs	r3, #160	; 0xa0
 8005ba8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005baa:	2302      	movs	r3, #2
 8005bac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005bb6:	2305      	movs	r3, #5
 8005bb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005bba:	f107 0314 	add.w	r3, r7, #20
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	480d      	ldr	r0, [pc, #52]	; (8005bf8 <HAL_SPI_MspInit+0xc8>)
 8005bc2:	f001 ffa7 	bl	8007b14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005bc6:	2310      	movs	r3, #16
 8005bc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bca:	2302      	movs	r3, #2
 8005bcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005bd6:	2305      	movs	r3, #5
 8005bd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005bda:	f107 0314 	add.w	r3, r7, #20
 8005bde:	4619      	mov	r1, r3
 8005be0:	4806      	ldr	r0, [pc, #24]	; (8005bfc <HAL_SPI_MspInit+0xcc>)
 8005be2:	f001 ff97 	bl	8007b14 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8005be6:	bf00      	nop
 8005be8:	3728      	adds	r7, #40	; 0x28
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	40013000 	.word	0x40013000
 8005bf4:	40023800 	.word	0x40023800
 8005bf8:	40020000 	.word	0x40020000
 8005bfc:	40020400 	.word	0x40020400

08005c00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b088      	sub	sp, #32
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c10:	d10e      	bne.n	8005c30 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005c12:	2300      	movs	r3, #0
 8005c14:	61fb      	str	r3, [r7, #28]
 8005c16:	4b3e      	ldr	r3, [pc, #248]	; (8005d10 <HAL_TIM_Base_MspInit+0x110>)
 8005c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1a:	4a3d      	ldr	r2, [pc, #244]	; (8005d10 <HAL_TIM_Base_MspInit+0x110>)
 8005c1c:	f043 0301 	orr.w	r3, r3, #1
 8005c20:	6413      	str	r3, [r2, #64]	; 0x40
 8005c22:	4b3b      	ldr	r3, [pc, #236]	; (8005d10 <HAL_TIM_Base_MspInit+0x110>)
 8005c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c26:	f003 0301 	and.w	r3, r3, #1
 8005c2a:	61fb      	str	r3, [r7, #28]
 8005c2c:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8005c2e:	e06a      	b.n	8005d06 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM3)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a37      	ldr	r2, [pc, #220]	; (8005d14 <HAL_TIM_Base_MspInit+0x114>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d116      	bne.n	8005c68 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	61bb      	str	r3, [r7, #24]
 8005c3e:	4b34      	ldr	r3, [pc, #208]	; (8005d10 <HAL_TIM_Base_MspInit+0x110>)
 8005c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c42:	4a33      	ldr	r2, [pc, #204]	; (8005d10 <HAL_TIM_Base_MspInit+0x110>)
 8005c44:	f043 0302 	orr.w	r3, r3, #2
 8005c48:	6413      	str	r3, [r2, #64]	; 0x40
 8005c4a:	4b31      	ldr	r3, [pc, #196]	; (8005d10 <HAL_TIM_Base_MspInit+0x110>)
 8005c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4e:	f003 0302 	and.w	r3, r3, #2
 8005c52:	61bb      	str	r3, [r7, #24]
 8005c54:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8005c56:	2200      	movs	r2, #0
 8005c58:	2102      	movs	r1, #2
 8005c5a:	201d      	movs	r0, #29
 8005c5c:	f001 fb15 	bl	800728a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005c60:	201d      	movs	r0, #29
 8005c62:	f001 fb2e 	bl	80072c2 <HAL_NVIC_EnableIRQ>
}
 8005c66:	e04e      	b.n	8005d06 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM4)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a2a      	ldr	r2, [pc, #168]	; (8005d18 <HAL_TIM_Base_MspInit+0x118>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d10e      	bne.n	8005c90 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005c72:	2300      	movs	r3, #0
 8005c74:	617b      	str	r3, [r7, #20]
 8005c76:	4b26      	ldr	r3, [pc, #152]	; (8005d10 <HAL_TIM_Base_MspInit+0x110>)
 8005c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7a:	4a25      	ldr	r2, [pc, #148]	; (8005d10 <HAL_TIM_Base_MspInit+0x110>)
 8005c7c:	f043 0304 	orr.w	r3, r3, #4
 8005c80:	6413      	str	r3, [r2, #64]	; 0x40
 8005c82:	4b23      	ldr	r3, [pc, #140]	; (8005d10 <HAL_TIM_Base_MspInit+0x110>)
 8005c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c86:	f003 0304 	and.w	r3, r3, #4
 8005c8a:	617b      	str	r3, [r7, #20]
 8005c8c:	697b      	ldr	r3, [r7, #20]
}
 8005c8e:	e03a      	b.n	8005d06 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM5)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a21      	ldr	r2, [pc, #132]	; (8005d1c <HAL_TIM_Base_MspInit+0x11c>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d10e      	bne.n	8005cb8 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	613b      	str	r3, [r7, #16]
 8005c9e:	4b1c      	ldr	r3, [pc, #112]	; (8005d10 <HAL_TIM_Base_MspInit+0x110>)
 8005ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca2:	4a1b      	ldr	r2, [pc, #108]	; (8005d10 <HAL_TIM_Base_MspInit+0x110>)
 8005ca4:	f043 0308 	orr.w	r3, r3, #8
 8005ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8005caa:	4b19      	ldr	r3, [pc, #100]	; (8005d10 <HAL_TIM_Base_MspInit+0x110>)
 8005cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cae:	f003 0308 	and.w	r3, r3, #8
 8005cb2:	613b      	str	r3, [r7, #16]
 8005cb4:	693b      	ldr	r3, [r7, #16]
}
 8005cb6:	e026      	b.n	8005d06 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM9)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a18      	ldr	r2, [pc, #96]	; (8005d20 <HAL_TIM_Base_MspInit+0x120>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d10e      	bne.n	8005ce0 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	60fb      	str	r3, [r7, #12]
 8005cc6:	4b12      	ldr	r3, [pc, #72]	; (8005d10 <HAL_TIM_Base_MspInit+0x110>)
 8005cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cca:	4a11      	ldr	r2, [pc, #68]	; (8005d10 <HAL_TIM_Base_MspInit+0x110>)
 8005ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cd0:	6453      	str	r3, [r2, #68]	; 0x44
 8005cd2:	4b0f      	ldr	r3, [pc, #60]	; (8005d10 <HAL_TIM_Base_MspInit+0x110>)
 8005cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cda:	60fb      	str	r3, [r7, #12]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
}
 8005cde:	e012      	b.n	8005d06 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM10)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a0f      	ldr	r2, [pc, #60]	; (8005d24 <HAL_TIM_Base_MspInit+0x124>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d10d      	bne.n	8005d06 <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8005cea:	2300      	movs	r3, #0
 8005cec:	60bb      	str	r3, [r7, #8]
 8005cee:	4b08      	ldr	r3, [pc, #32]	; (8005d10 <HAL_TIM_Base_MspInit+0x110>)
 8005cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cf2:	4a07      	ldr	r2, [pc, #28]	; (8005d10 <HAL_TIM_Base_MspInit+0x110>)
 8005cf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cf8:	6453      	str	r3, [r2, #68]	; 0x44
 8005cfa:	4b05      	ldr	r3, [pc, #20]	; (8005d10 <HAL_TIM_Base_MspInit+0x110>)
 8005cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d02:	60bb      	str	r3, [r7, #8]
 8005d04:	68bb      	ldr	r3, [r7, #8]
}
 8005d06:	bf00      	nop
 8005d08:	3720      	adds	r7, #32
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	40023800 	.word	0x40023800
 8005d14:	40000400 	.word	0x40000400
 8005d18:	40000800 	.word	0x40000800
 8005d1c:	40000c00 	.word	0x40000c00
 8005d20:	40014000 	.word	0x40014000
 8005d24:	40014400 	.word	0x40014400

08005d28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b08c      	sub	sp, #48	; 0x30
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d30:	f107 031c 	add.w	r3, r7, #28
 8005d34:	2200      	movs	r2, #0
 8005d36:	601a      	str	r2, [r3, #0]
 8005d38:	605a      	str	r2, [r3, #4]
 8005d3a:	609a      	str	r2, [r3, #8]
 8005d3c:	60da      	str	r2, [r3, #12]
 8005d3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a49      	ldr	r2, [pc, #292]	; (8005e6c <HAL_UART_MspInit+0x144>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d153      	bne.n	8005df2 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	61bb      	str	r3, [r7, #24]
 8005d4e:	4b48      	ldr	r3, [pc, #288]	; (8005e70 <HAL_UART_MspInit+0x148>)
 8005d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d52:	4a47      	ldr	r2, [pc, #284]	; (8005e70 <HAL_UART_MspInit+0x148>)
 8005d54:	f043 0310 	orr.w	r3, r3, #16
 8005d58:	6453      	str	r3, [r2, #68]	; 0x44
 8005d5a:	4b45      	ldr	r3, [pc, #276]	; (8005e70 <HAL_UART_MspInit+0x148>)
 8005d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d5e:	f003 0310 	and.w	r3, r3, #16
 8005d62:	61bb      	str	r3, [r7, #24]
 8005d64:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d66:	2300      	movs	r3, #0
 8005d68:	617b      	str	r3, [r7, #20]
 8005d6a:	4b41      	ldr	r3, [pc, #260]	; (8005e70 <HAL_UART_MspInit+0x148>)
 8005d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d6e:	4a40      	ldr	r2, [pc, #256]	; (8005e70 <HAL_UART_MspInit+0x148>)
 8005d70:	f043 0301 	orr.w	r3, r3, #1
 8005d74:	6313      	str	r3, [r2, #48]	; 0x30
 8005d76:	4b3e      	ldr	r3, [pc, #248]	; (8005e70 <HAL_UART_MspInit+0x148>)
 8005d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d7a:	f003 0301 	and.w	r3, r3, #1
 8005d7e:	617b      	str	r3, [r7, #20]
 8005d80:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d82:	2300      	movs	r3, #0
 8005d84:	613b      	str	r3, [r7, #16]
 8005d86:	4b3a      	ldr	r3, [pc, #232]	; (8005e70 <HAL_UART_MspInit+0x148>)
 8005d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d8a:	4a39      	ldr	r2, [pc, #228]	; (8005e70 <HAL_UART_MspInit+0x148>)
 8005d8c:	f043 0302 	orr.w	r3, r3, #2
 8005d90:	6313      	str	r3, [r2, #48]	; 0x30
 8005d92:	4b37      	ldr	r3, [pc, #220]	; (8005e70 <HAL_UART_MspInit+0x148>)
 8005d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d96:	f003 0302 	and.w	r3, r3, #2
 8005d9a:	613b      	str	r3, [r7, #16]
 8005d9c:	693b      	ldr	r3, [r7, #16]
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    PA15     ------> USART1_TX
    PB3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
 8005d9e:	f44f 4318 	mov.w	r3, #38912	; 0x9800
 8005da2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005da4:	2302      	movs	r3, #2
 8005da6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005da8:	2300      	movs	r3, #0
 8005daa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005dac:	2303      	movs	r3, #3
 8005dae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005db0:	2307      	movs	r3, #7
 8005db2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005db4:	f107 031c 	add.w	r3, r7, #28
 8005db8:	4619      	mov	r1, r3
 8005dba:	482e      	ldr	r0, [pc, #184]	; (8005e74 <HAL_UART_MspInit+0x14c>)
 8005dbc:	f001 feaa 	bl	8007b14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005dc0:	2308      	movs	r3, #8
 8005dc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dc4:	2302      	movs	r3, #2
 8005dc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005dcc:	2303      	movs	r3, #3
 8005dce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005dd0:	2307      	movs	r3, #7
 8005dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005dd4:	f107 031c 	add.w	r3, r7, #28
 8005dd8:	4619      	mov	r1, r3
 8005dda:	4827      	ldr	r0, [pc, #156]	; (8005e78 <HAL_UART_MspInit+0x150>)
 8005ddc:	f001 fe9a 	bl	8007b14 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8005de0:	2200      	movs	r2, #0
 8005de2:	2103      	movs	r1, #3
 8005de4:	2025      	movs	r0, #37	; 0x25
 8005de6:	f001 fa50 	bl	800728a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005dea:	2025      	movs	r0, #37	; 0x25
 8005dec:	f001 fa69 	bl	80072c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005df0:	e038      	b.n	8005e64 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART2)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a21      	ldr	r2, [pc, #132]	; (8005e7c <HAL_UART_MspInit+0x154>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d133      	bne.n	8005e64 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	60fb      	str	r3, [r7, #12]
 8005e00:	4b1b      	ldr	r3, [pc, #108]	; (8005e70 <HAL_UART_MspInit+0x148>)
 8005e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e04:	4a1a      	ldr	r2, [pc, #104]	; (8005e70 <HAL_UART_MspInit+0x148>)
 8005e06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e0a:	6413      	str	r3, [r2, #64]	; 0x40
 8005e0c:	4b18      	ldr	r3, [pc, #96]	; (8005e70 <HAL_UART_MspInit+0x148>)
 8005e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e14:	60fb      	str	r3, [r7, #12]
 8005e16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e18:	2300      	movs	r3, #0
 8005e1a:	60bb      	str	r3, [r7, #8]
 8005e1c:	4b14      	ldr	r3, [pc, #80]	; (8005e70 <HAL_UART_MspInit+0x148>)
 8005e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e20:	4a13      	ldr	r2, [pc, #76]	; (8005e70 <HAL_UART_MspInit+0x148>)
 8005e22:	f043 0301 	orr.w	r3, r3, #1
 8005e26:	6313      	str	r3, [r2, #48]	; 0x30
 8005e28:	4b11      	ldr	r3, [pc, #68]	; (8005e70 <HAL_UART_MspInit+0x148>)
 8005e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e2c:	f003 0301 	and.w	r3, r3, #1
 8005e30:	60bb      	str	r3, [r7, #8]
 8005e32:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005e34:	230c      	movs	r3, #12
 8005e36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e38:	2302      	movs	r3, #2
 8005e3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e40:	2303      	movs	r3, #3
 8005e42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005e44:	2307      	movs	r3, #7
 8005e46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e48:	f107 031c 	add.w	r3, r7, #28
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	4809      	ldr	r0, [pc, #36]	; (8005e74 <HAL_UART_MspInit+0x14c>)
 8005e50:	f001 fe60 	bl	8007b14 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8005e54:	2200      	movs	r2, #0
 8005e56:	2103      	movs	r1, #3
 8005e58:	2026      	movs	r0, #38	; 0x26
 8005e5a:	f001 fa16 	bl	800728a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005e5e:	2026      	movs	r0, #38	; 0x26
 8005e60:	f001 fa2f 	bl	80072c2 <HAL_NVIC_EnableIRQ>
}
 8005e64:	bf00      	nop
 8005e66:	3730      	adds	r7, #48	; 0x30
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	40011000 	.word	0x40011000
 8005e70:	40023800 	.word	0x40023800
 8005e74:	40020000 	.word	0x40020000
 8005e78:	40020400 	.word	0x40020400
 8005e7c:	40004400 	.word	0x40004400

08005e80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005e80:	b480      	push	{r7}
 8005e82:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005e84:	bf00      	nop
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr

08005e8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005e8e:	b480      	push	{r7}
 8005e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005e92:	e7fe      	b.n	8005e92 <HardFault_Handler+0x4>

08005e94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005e94:	b480      	push	{r7}
 8005e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005e98:	e7fe      	b.n	8005e98 <MemManage_Handler+0x4>

08005e9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005e9a:	b480      	push	{r7}
 8005e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005e9e:	e7fe      	b.n	8005e9e <BusFault_Handler+0x4>

08005ea0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005ea4:	e7fe      	b.n	8005ea4 <UsageFault_Handler+0x4>

08005ea6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005ea6:	b480      	push	{r7}
 8005ea8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005eaa:	bf00      	nop
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005eb8:	bf00      	nop
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr

08005ec2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005ec2:	b480      	push	{r7}
 8005ec4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005ec6:	bf00      	nop
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr

08005ed0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005ed4:	f000 fcb8 	bl	8006848 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005ed8:	bf00      	nop
 8005eda:	bd80      	pop	{r7, pc}

08005edc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_IN_WINDCOUNT_Pin);
 8005ee0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005ee4:	f001 ffcc 	bl	8007e80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005ee8:	bf00      	nop
 8005eea:	bd80      	pop	{r7, pc}

08005eec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005ef0:	4802      	ldr	r0, [pc, #8]	; (8005efc <TIM3_IRQHandler+0x10>)
 8005ef2:	f005 fa85 	bl	800b400 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005ef6:	bf00      	nop
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	bf00      	nop
 8005efc:	20003e2c 	.word	0x20003e2c

08005f00 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr (&huart1);
 8005f04:	4803      	ldr	r0, [pc, #12]	; (8005f14 <USART1_IRQHandler+0x14>)
 8005f06:	f7fb fd5d 	bl	80019c4 <Uart_isr>

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005f0a:	4802      	ldr	r0, [pc, #8]	; (8005f14 <USART1_IRQHandler+0x14>)
 8005f0c:	f005 fe5a 	bl	800bbc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005f10:	bf00      	nop
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	20003f94 	.word	0x20003f94

08005f18 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	Uart_isr (&huart2);
 8005f1c:	4803      	ldr	r0, [pc, #12]	; (8005f2c <USART2_IRQHandler+0x14>)
 8005f1e:	f7fb fd51 	bl	80019c4 <Uart_isr>

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005f22:	4802      	ldr	r0, [pc, #8]	; (8005f2c <USART2_IRQHandler+0x14>)
 8005f24:	f005 fe4e 	bl	800bbc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005f28:	bf00      	nop
 8005f2a:	bd80      	pop	{r7, pc}
 8005f2c:	20003fd8 	.word	0x20003fd8

08005f30 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8005f34:	4802      	ldr	r0, [pc, #8]	; (8005f40 <SDIO_IRQHandler+0x10>)
 8005f36:	f003 facb 	bl	80094d0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8005f3a:	bf00      	nop
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	20003c48 	.word	0x20003c48

08005f44 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005f48:	4802      	ldr	r0, [pc, #8]	; (8005f54 <DMA2_Stream0_IRQHandler+0x10>)
 8005f4a:	f001 fb6d 	bl	8007628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8005f4e:	bf00      	nop
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	20003bbc 	.word	0x20003bbc

08005f58 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8005f5c:	4802      	ldr	r0, [pc, #8]	; (8005f68 <DMA2_Stream3_IRQHandler+0x10>)
 8005f5e:	f001 fb63 	bl	8007628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8005f62:	bf00      	nop
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	20003ccc 	.word	0x20003ccc

08005f6c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8005f70:	4802      	ldr	r0, [pc, #8]	; (8005f7c <DMA2_Stream6_IRQHandler+0x10>)
 8005f72:	f001 fb59 	bl	8007628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8005f76:	bf00      	nop
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	20003d2c 	.word	0x20003d2c

08005f80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005f80:	b480      	push	{r7}
 8005f82:	af00      	add	r7, sp, #0
	return 1;
 8005f84:	2301      	movs	r3, #1
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <_kill>:

int _kill(int pid, int sig)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b082      	sub	sp, #8
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005f9a:	f00a fd3f 	bl	8010a1c <__errno>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	2216      	movs	r2, #22
 8005fa2:	601a      	str	r2, [r3, #0]
	return -1;
 8005fa4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3708      	adds	r7, #8
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <_exit>:

void _exit (int status)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b082      	sub	sp, #8
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005fb8:	f04f 31ff 	mov.w	r1, #4294967295
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f7ff ffe7 	bl	8005f90 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005fc2:	e7fe      	b.n	8005fc2 <_exit+0x12>

08005fc4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b086      	sub	sp, #24
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	617b      	str	r3, [r7, #20]
 8005fd4:	e00a      	b.n	8005fec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005fd6:	f3af 8000 	nop.w
 8005fda:	4601      	mov	r1, r0
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	1c5a      	adds	r2, r3, #1
 8005fe0:	60ba      	str	r2, [r7, #8]
 8005fe2:	b2ca      	uxtb	r2, r1
 8005fe4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	3301      	adds	r3, #1
 8005fea:	617b      	str	r3, [r7, #20]
 8005fec:	697a      	ldr	r2, [r7, #20]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	dbf0      	blt.n	8005fd6 <_read+0x12>
	}

return len;
 8005ff4:	687b      	ldr	r3, [r7, #4]
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3718      	adds	r7, #24
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}

08005ffe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005ffe:	b580      	push	{r7, lr}
 8006000:	b086      	sub	sp, #24
 8006002:	af00      	add	r7, sp, #0
 8006004:	60f8      	str	r0, [r7, #12]
 8006006:	60b9      	str	r1, [r7, #8]
 8006008:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800600a:	2300      	movs	r3, #0
 800600c:	617b      	str	r3, [r7, #20]
 800600e:	e009      	b.n	8006024 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	1c5a      	adds	r2, r3, #1
 8006014:	60ba      	str	r2, [r7, #8]
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	4618      	mov	r0, r3
 800601a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	3301      	adds	r3, #1
 8006022:	617b      	str	r3, [r7, #20]
 8006024:	697a      	ldr	r2, [r7, #20]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	429a      	cmp	r2, r3
 800602a:	dbf1      	blt.n	8006010 <_write+0x12>
	}
	return len;
 800602c:	687b      	ldr	r3, [r7, #4]
}
 800602e:	4618      	mov	r0, r3
 8006030:	3718      	adds	r7, #24
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}

08006036 <_close>:

int _close(int file)
{
 8006036:	b480      	push	{r7}
 8006038:	b083      	sub	sp, #12
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
	return -1;
 800603e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006042:	4618      	mov	r0, r3
 8006044:	370c      	adds	r7, #12
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr

0800604e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800604e:	b480      	push	{r7}
 8006050:	b083      	sub	sp, #12
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
 8006056:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800605e:	605a      	str	r2, [r3, #4]
	return 0;
 8006060:	2300      	movs	r3, #0
}
 8006062:	4618      	mov	r0, r3
 8006064:	370c      	adds	r7, #12
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr

0800606e <_isatty>:

int _isatty(int file)
{
 800606e:	b480      	push	{r7}
 8006070:	b083      	sub	sp, #12
 8006072:	af00      	add	r7, sp, #0
 8006074:	6078      	str	r0, [r7, #4]
	return 1;
 8006076:	2301      	movs	r3, #1
}
 8006078:	4618      	mov	r0, r3
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006084:	b480      	push	{r7}
 8006086:	b085      	sub	sp, #20
 8006088:	af00      	add	r7, sp, #0
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	607a      	str	r2, [r7, #4]
	return 0;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3714      	adds	r7, #20
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr
	...

080060a0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80060a8:	4b11      	ldr	r3, [pc, #68]	; (80060f0 <_sbrk+0x50>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d102      	bne.n	80060b6 <_sbrk+0x16>
		heap_end = &end;
 80060b0:	4b0f      	ldr	r3, [pc, #60]	; (80060f0 <_sbrk+0x50>)
 80060b2:	4a10      	ldr	r2, [pc, #64]	; (80060f4 <_sbrk+0x54>)
 80060b4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80060b6:	4b0e      	ldr	r3, [pc, #56]	; (80060f0 <_sbrk+0x50>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80060bc:	4b0c      	ldr	r3, [pc, #48]	; (80060f0 <_sbrk+0x50>)
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	4413      	add	r3, r2
 80060c4:	466a      	mov	r2, sp
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d907      	bls.n	80060da <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80060ca:	f00a fca7 	bl	8010a1c <__errno>
 80060ce:	4603      	mov	r3, r0
 80060d0:	220c      	movs	r2, #12
 80060d2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80060d4:	f04f 33ff 	mov.w	r3, #4294967295
 80060d8:	e006      	b.n	80060e8 <_sbrk+0x48>
	}

	heap_end += incr;
 80060da:	4b05      	ldr	r3, [pc, #20]	; (80060f0 <_sbrk+0x50>)
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4413      	add	r3, r2
 80060e2:	4a03      	ldr	r2, [pc, #12]	; (80060f0 <_sbrk+0x50>)
 80060e4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80060e6:	68fb      	ldr	r3, [r7, #12]
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3710      	adds	r7, #16
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}
 80060f0:	20007a24 	.word	0x20007a24
 80060f4:	20007b38 	.word	0x20007b38

080060f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80060f8:	b480      	push	{r7}
 80060fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80060fc:	4b08      	ldr	r3, [pc, #32]	; (8006120 <SystemInit+0x28>)
 80060fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006102:	4a07      	ldr	r2, [pc, #28]	; (8006120 <SystemInit+0x28>)
 8006104:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006108:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800610c:	4b04      	ldr	r3, [pc, #16]	; (8006120 <SystemInit+0x28>)
 800610e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006112:	609a      	str	r2, [r3, #8]
#endif
}
 8006114:	bf00      	nop
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr
 800611e:	bf00      	nop
 8006120:	e000ed00 	.word	0xe000ed00

08006124 <initTime>:
RTC_TimeTypeDef sTime;
RTC_DateTypeDef sDate;

RTC_HandleTypeDef * p_hrtc;

void initTime(void){
 8006124:	b580      	push	{r7, lr}
 8006126:	af00      	add	r7, sp, #0
	timeState = TIMESTATE_INIT;
 8006128:	4b04      	ldr	r3, [pc, #16]	; (800613c <initTime+0x18>)
 800612a:	2200      	movs	r2, #0
 800612c:	701a      	strb	r2, [r3, #0]
	p_hrtc = getHRTC();
 800612e:	f7fc fc41 	bl	80029b4 <getHRTC>
 8006132:	4603      	mov	r3, r0
 8006134:	4a02      	ldr	r2, [pc, #8]	; (8006140 <initTime+0x1c>)
 8006136:	6013      	str	r3, [r2, #0]
}
 8006138:	bf00      	nop
 800613a:	bd80      	pop	{r7, pc}
 800613c:	20007a8c 	.word	0x20007a8c
 8006140:	20007ab0 	.word	0x20007ab0

08006144 <setTime>:

void setTime(char * line, TIMESTATE successTimestate){
 8006144:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006148:	b09f      	sub	sp, #124	; 0x7c
 800614a:	af06      	add	r7, sp, #24
 800614c:	6078      	str	r0, [r7, #4]
 800614e:	460b      	mov	r3, r1
 8006150:	70fb      	strb	r3, [r7, #3]
	int minute;
	int second;
	int utc_offset;//quarter hours - can be negative


	year = util_atoi_n(line ,2);//year starts at position 9, 2 chars.
 8006152:	2102      	movs	r1, #2
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 fa79 	bl	800664c <util_atoi_n>
 800615a:	65f8      	str	r0, [r7, #92]	; 0x5c
	month = util_atoi_n(line + 3 ,2);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	3303      	adds	r3, #3
 8006160:	2102      	movs	r1, #2
 8006162:	4618      	mov	r0, r3
 8006164:	f000 fa72 	bl	800664c <util_atoi_n>
 8006168:	65b8      	str	r0, [r7, #88]	; 0x58
	day = util_atoi_n(line +  6,2);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	3306      	adds	r3, #6
 800616e:	2102      	movs	r1, #2
 8006170:	4618      	mov	r0, r3
 8006172:	f000 fa6b 	bl	800664c <util_atoi_n>
 8006176:	6578      	str	r0, [r7, #84]	; 0x54
	hour = util_atoi_n(line +  9,2);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	3309      	adds	r3, #9
 800617c:	2102      	movs	r1, #2
 800617e:	4618      	mov	r0, r3
 8006180:	f000 fa64 	bl	800664c <util_atoi_n>
 8006184:	6538      	str	r0, [r7, #80]	; 0x50
	minute = util_atoi_n(line + 12 ,2);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	330c      	adds	r3, #12
 800618a:	2102      	movs	r1, #2
 800618c:	4618      	mov	r0, r3
 800618e:	f000 fa5d 	bl	800664c <util_atoi_n>
 8006192:	64f8      	str	r0, [r7, #76]	; 0x4c
	second = util_atoi_n(line + 15 ,2);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	330f      	adds	r3, #15
 8006198:	2102      	movs	r1, #2
 800619a:	4618      	mov	r0, r3
 800619c:	f000 fa56 	bl	800664c <util_atoi_n>
 80061a0:	64b8      	str	r0, [r7, #72]	; 0x48
	utc_offset = util_atoi_n(line + 18 ,2);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	3312      	adds	r3, #18
 80061a6:	2102      	movs	r1, #2
 80061a8:	4618      	mov	r0, r3
 80061aa:	f000 fa4f 	bl	800664c <util_atoi_n>
 80061ae:	6478      	str	r0, [r7, #68]	; 0x44

	sprintf(tbuffer, "CCLK Year,%i\r\n",year);
 80061b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80061b2:	496b      	ldr	r1, [pc, #428]	; (8006360 <setTime+0x21c>)
 80061b4:	486b      	ldr	r0, [pc, #428]	; (8006364 <setTime+0x220>)
 80061b6:	f00b fd09 	bl	8011bcc <siprintf>
	Uart_SendString(tbuffer, pc_uart);
 80061ba:	496b      	ldr	r1, [pc, #428]	; (8006368 <setTime+0x224>)
 80061bc:	4869      	ldr	r0, [pc, #420]	; (8006364 <setTime+0x220>)
 80061be:	f7fb fbe9 	bl	8001994 <Uart_SendString>

	if(year == 80){//not valid time
 80061c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061c4:	2b50      	cmp	r3, #80	; 0x50
 80061c6:	d107      	bne.n	80061d8 <setTime+0x94>

		Uart_SendString("CCLK Time invalid - Year = 80\r\n", pc_uart);
 80061c8:	4967      	ldr	r1, [pc, #412]	; (8006368 <setTime+0x224>)
 80061ca:	4868      	ldr	r0, [pc, #416]	; (800636c <setTime+0x228>)
 80061cc:	f7fb fbe2 	bl	8001994 <Uart_SendString>
		timeState = TIMESTATE_ERR;
 80061d0:	4b67      	ldr	r3, [pc, #412]	; (8006370 <setTime+0x22c>)
 80061d2:	2204      	movs	r2, #4
 80061d4:	701a      	strb	r2, [r3, #0]

		timeState = successTimestate;
		getEpochTime(&epochTime1);
	}

}
 80061d6:	e0be      	b.n	8006356 <setTime+0x212>
		Uart_SendString("CCLK Time valid\r\n", pc_uart);
 80061d8:	4963      	ldr	r1, [pc, #396]	; (8006368 <setTime+0x224>)
 80061da:	4866      	ldr	r0, [pc, #408]	; (8006374 <setTime+0x230>)
 80061dc:	f7fb fbda 	bl	8001994 <Uart_SendString>
		sprintf(tbuffer, "Valid time %i/%i/%i %i:%i:%i %i\r\n",year,month,day,hour,minute,second,utc_offset);
 80061e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061e2:	9304      	str	r3, [sp, #16]
 80061e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061e6:	9303      	str	r3, [sp, #12]
 80061e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061ea:	9302      	str	r3, [sp, #8]
 80061ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061ee:	9301      	str	r3, [sp, #4]
 80061f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061f2:	9300      	str	r3, [sp, #0]
 80061f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061f6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80061f8:	495f      	ldr	r1, [pc, #380]	; (8006378 <setTime+0x234>)
 80061fa:	485a      	ldr	r0, [pc, #360]	; (8006364 <setTime+0x220>)
 80061fc:	f00b fce6 	bl	8011bcc <siprintf>
		Uart_SendString(tbuffer, pc_uart);
 8006200:	4959      	ldr	r1, [pc, #356]	; (8006368 <setTime+0x224>)
 8006202:	4858      	ldr	r0, [pc, #352]	; (8006364 <setTime+0x220>)
 8006204:	f7fb fbc6 	bl	8001994 <Uart_SendString>
		dateTime.tm_year = 100 + year;
 8006208:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800620a:	3364      	adds	r3, #100	; 0x64
 800620c:	623b      	str	r3, [r7, #32]
		dateTime.tm_mon = month - 1;
 800620e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006210:	3b01      	subs	r3, #1
 8006212:	61fb      	str	r3, [r7, #28]
		dateTime.tm_mday = day;
 8006214:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006216:	61bb      	str	r3, [r7, #24]
		dateTime.tm_hour = hour;
 8006218:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800621a:	617b      	str	r3, [r7, #20]
		dateTime.tm_min = minute;
 800621c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800621e:	613b      	str	r3, [r7, #16]
		dateTime.tm_sec = second;
 8006220:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006222:	60fb      	str	r3, [r7, #12]
		time = mktime(&dateTime);
 8006224:	f107 030c 	add.w	r3, r7, #12
 8006228:	4618      	mov	r0, r3
 800622a:	f00a fddb 	bl	8010de4 <mktime>
 800622e:	4602      	mov	r2, r0
 8006230:	460b      	mov	r3, r1
 8006232:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		sprintf(tbuffer, "EpochTime in Local,%i\r\n",(int)time);
 8006236:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800623a:	4613      	mov	r3, r2
 800623c:	461a      	mov	r2, r3
 800623e:	494f      	ldr	r1, [pc, #316]	; (800637c <setTime+0x238>)
 8006240:	4848      	ldr	r0, [pc, #288]	; (8006364 <setTime+0x220>)
 8006242:	f00b fcc3 	bl	8011bcc <siprintf>
		Uart_SendString(tbuffer, pc_uart);
 8006246:	4948      	ldr	r1, [pc, #288]	; (8006368 <setTime+0x224>)
 8006248:	4846      	ldr	r0, [pc, #280]	; (8006364 <setTime+0x220>)
 800624a:	f7fb fba3 	bl	8001994 <Uart_SendString>
		time -= (utc_offset * 15 * 60);
 800624e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006252:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006254:	f44f 7061 	mov.w	r0, #900	; 0x384
 8006258:	fb00 f101 	mul.w	r1, r0, r1
 800625c:	17c8      	asrs	r0, r1, #31
 800625e:	460c      	mov	r4, r1
 8006260:	4605      	mov	r5, r0
 8006262:	ebb2 0804 	subs.w	r8, r2, r4
 8006266:	eb63 0905 	sbc.w	r9, r3, r5
 800626a:	e9c7 890c 	strd	r8, r9, [r7, #48]	; 0x30
		sprintf(tbuffer, "EpochTime in UTC,%i\r\n",(int)time);
 800626e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006272:	4613      	mov	r3, r2
 8006274:	461a      	mov	r2, r3
 8006276:	4942      	ldr	r1, [pc, #264]	; (8006380 <setTime+0x23c>)
 8006278:	483a      	ldr	r0, [pc, #232]	; (8006364 <setTime+0x220>)
 800627a:	f00b fca7 	bl	8011bcc <siprintf>
		Uart_SendString(tbuffer, pc_uart);
 800627e:	493a      	ldr	r1, [pc, #232]	; (8006368 <setTime+0x224>)
 8006280:	4838      	ldr	r0, [pc, #224]	; (8006364 <setTime+0x220>)
 8006282:	f7fb fb87 	bl	8001994 <Uart_SendString>
		dateTime2_p = gmtime(&time);
 8006286:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800628a:	4618      	mov	r0, r3
 800628c:	f00a fbcc 	bl	8010a28 <gmtime>
 8006290:	6438      	str	r0, [r7, #64]	; 0x40
		sDate.Year = (uint8_t)(dateTime2_p->tm_year - 100);
 8006292:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006294:	695b      	ldr	r3, [r3, #20]
 8006296:	b2db      	uxtb	r3, r3
 8006298:	3b64      	subs	r3, #100	; 0x64
 800629a:	b2da      	uxtb	r2, r3
 800629c:	4b39      	ldr	r3, [pc, #228]	; (8006384 <setTime+0x240>)
 800629e:	70da      	strb	r2, [r3, #3]
		sDate.Month = (uint8_t)(dateTime2_p->tm_mon + 1);
 80062a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	3301      	adds	r3, #1
 80062a8:	b2da      	uxtb	r2, r3
 80062aa:	4b36      	ldr	r3, [pc, #216]	; (8006384 <setTime+0x240>)
 80062ac:	705a      	strb	r2, [r3, #1]
		sDate.Date = (uint8_t)(dateTime2_p->tm_mday);
 80062ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	b2da      	uxtb	r2, r3
 80062b4:	4b33      	ldr	r3, [pc, #204]	; (8006384 <setTime+0x240>)
 80062b6:	709a      	strb	r2, [r3, #2]
		sDate.WeekDay = 0;
 80062b8:	4b32      	ldr	r3, [pc, #200]	; (8006384 <setTime+0x240>)
 80062ba:	2200      	movs	r2, #0
 80062bc:	701a      	strb	r2, [r3, #0]
		sTime.Hours = (uint8_t)(dateTime2_p->tm_hour);
 80062be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	b2da      	uxtb	r2, r3
 80062c4:	4b30      	ldr	r3, [pc, #192]	; (8006388 <setTime+0x244>)
 80062c6:	701a      	strb	r2, [r3, #0]
		sTime.Minutes = (uint8_t)(dateTime2_p->tm_min);
 80062c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	b2da      	uxtb	r2, r3
 80062ce:	4b2e      	ldr	r3, [pc, #184]	; (8006388 <setTime+0x244>)
 80062d0:	705a      	strb	r2, [r3, #1]
		sTime.Seconds = (uint8_t)(dateTime2_p->tm_sec);
 80062d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	b2da      	uxtb	r2, r3
 80062d8:	4b2b      	ldr	r3, [pc, #172]	; (8006388 <setTime+0x244>)
 80062da:	709a      	strb	r2, [r3, #2]
		sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80062dc:	4b2a      	ldr	r3, [pc, #168]	; (8006388 <setTime+0x244>)
 80062de:	2200      	movs	r2, #0
 80062e0:	60da      	str	r2, [r3, #12]
		sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80062e2:	4b29      	ldr	r3, [pc, #164]	; (8006388 <setTime+0x244>)
 80062e4:	2200      	movs	r2, #0
 80062e6:	611a      	str	r2, [r3, #16]
		sprintf(tbuffer, "RTCTime %u/%u/%u %u:%u:%u %lu \r\n",(unsigned int)sDate.Year,(unsigned int)sDate.Month,(unsigned int)sDate.Date,(unsigned int)sTime.Hours,(unsigned int)sTime.Minutes,(unsigned int)sTime.Seconds, (unsigned long)time);
 80062e8:	4b26      	ldr	r3, [pc, #152]	; (8006384 <setTime+0x240>)
 80062ea:	78db      	ldrb	r3, [r3, #3]
 80062ec:	461e      	mov	r6, r3
 80062ee:	4b25      	ldr	r3, [pc, #148]	; (8006384 <setTime+0x240>)
 80062f0:	785b      	ldrb	r3, [r3, #1]
 80062f2:	469c      	mov	ip, r3
 80062f4:	4b23      	ldr	r3, [pc, #140]	; (8006384 <setTime+0x240>)
 80062f6:	789b      	ldrb	r3, [r3, #2]
 80062f8:	4619      	mov	r1, r3
 80062fa:	4b23      	ldr	r3, [pc, #140]	; (8006388 <setTime+0x244>)
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	4618      	mov	r0, r3
 8006300:	4b21      	ldr	r3, [pc, #132]	; (8006388 <setTime+0x244>)
 8006302:	785b      	ldrb	r3, [r3, #1]
 8006304:	461c      	mov	r4, r3
 8006306:	4b20      	ldr	r3, [pc, #128]	; (8006388 <setTime+0x244>)
 8006308:	789b      	ldrb	r3, [r3, #2]
 800630a:	461d      	mov	r5, r3
 800630c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006310:	4613      	mov	r3, r2
 8006312:	9304      	str	r3, [sp, #16]
 8006314:	9503      	str	r5, [sp, #12]
 8006316:	9402      	str	r4, [sp, #8]
 8006318:	9001      	str	r0, [sp, #4]
 800631a:	9100      	str	r1, [sp, #0]
 800631c:	4663      	mov	r3, ip
 800631e:	4632      	mov	r2, r6
 8006320:	491a      	ldr	r1, [pc, #104]	; (800638c <setTime+0x248>)
 8006322:	4810      	ldr	r0, [pc, #64]	; (8006364 <setTime+0x220>)
 8006324:	f00b fc52 	bl	8011bcc <siprintf>
		Uart_SendString(tbuffer, pc_uart);
 8006328:	490f      	ldr	r1, [pc, #60]	; (8006368 <setTime+0x224>)
 800632a:	480e      	ldr	r0, [pc, #56]	; (8006364 <setTime+0x220>)
 800632c:	f7fb fb32 	bl	8001994 <Uart_SendString>
		RTC_HandleTypeDef * p_hrtc = getHRTC();
 8006330:	f7fc fb40 	bl	80029b4 <getHRTC>
 8006334:	63f8      	str	r0, [r7, #60]	; 0x3c
		HAL_RTC_SetTime(p_hrtc, &sTime, RTC_FORMAT_BIN);
 8006336:	2200      	movs	r2, #0
 8006338:	4913      	ldr	r1, [pc, #76]	; (8006388 <setTime+0x244>)
 800633a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800633c:	f002 fbc8 	bl	8008ad0 <HAL_RTC_SetTime>
		HAL_RTC_SetDate(p_hrtc, &sDate, RTC_FORMAT_BIN);
 8006340:	2200      	movs	r2, #0
 8006342:	4910      	ldr	r1, [pc, #64]	; (8006384 <setTime+0x240>)
 8006344:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006346:	f002 fcbb 	bl	8008cc0 <HAL_RTC_SetDate>
		timeState = successTimestate;
 800634a:	4a09      	ldr	r2, [pc, #36]	; (8006370 <setTime+0x22c>)
 800634c:	78fb      	ldrb	r3, [r7, #3]
 800634e:	7013      	strb	r3, [r2, #0]
		getEpochTime(&epochTime1);
 8006350:	480f      	ldr	r0, [pc, #60]	; (8006390 <setTime+0x24c>)
 8006352:	f000 f81f 	bl	8006394 <getEpochTime>
}
 8006356:	bf00      	nop
 8006358:	3764      	adds	r7, #100	; 0x64
 800635a:	46bd      	mov	sp, r7
 800635c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006360:	08018ccc 	.word	0x08018ccc
 8006364:	20007a28 	.word	0x20007a28
 8006368:	20003fd8 	.word	0x20003fd8
 800636c:	08018cdc 	.word	0x08018cdc
 8006370:	20007a8c 	.word	0x20007a8c
 8006374:	08018cfc 	.word	0x08018cfc
 8006378:	08018d10 	.word	0x08018d10
 800637c:	08018d34 	.word	0x08018d34
 8006380:	08018d4c 	.word	0x08018d4c
 8006384:	20007aac 	.word	0x20007aac
 8006388:	20007a98 	.word	0x20007a98
 800638c:	08018d64 	.word	0x08018d64
 8006390:	20007a90 	.word	0x20007a90

08006394 <getEpochTime>:



void getEpochTime(EpochTime * epoch){
 8006394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006396:	b09b      	sub	sp, #108	; 0x6c
 8006398:	af08      	add	r7, sp, #32
 800639a:	6078      	str	r0, [r7, #4]
	if(timeState == TIMESTATE_OK_NITZ || timeState == TIMESTATE_OK_SERVER){
 800639c:	4b4d      	ldr	r3, [pc, #308]	; (80064d4 <getEpochTime+0x140>)
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d004      	beq.n	80063ae <getEpochTime+0x1a>
 80063a4:	4b4b      	ldr	r3, [pc, #300]	; (80064d4 <getEpochTime+0x140>)
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	2b02      	cmp	r3, #2
 80063aa:	f040 8087 	bne.w	80064bc <getEpochTime+0x128>


		RTC_HandleTypeDef * p_hrtc = getHRTC();
 80063ae:	f7fc fb01 	bl	80029b4 <getHRTC>
 80063b2:	6478      	str	r0, [r7, #68]	; 0x44

		HAL_RTC_GetTime(p_hrtc, &sTime, RTC_FORMAT_BIN);
 80063b4:	2200      	movs	r2, #0
 80063b6:	4948      	ldr	r1, [pc, #288]	; (80064d8 <getEpochTime+0x144>)
 80063b8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80063ba:	f002 fc23 	bl	8008c04 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(p_hrtc, &sDate, RTC_FORMAT_BIN);
 80063be:	2200      	movs	r2, #0
 80063c0:	4946      	ldr	r1, [pc, #280]	; (80064dc <getEpochTime+0x148>)
 80063c2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80063c4:	f002 fd00 	bl	8008dc8 <HAL_RTC_GetDate>

		struct tm dateTime;
		time_t time;

		dateTime.tm_year = 100 + sDate.Year;
 80063c8:	4b44      	ldr	r3, [pc, #272]	; (80064dc <getEpochTime+0x148>)
 80063ca:	78db      	ldrb	r3, [r3, #3]
 80063cc:	3364      	adds	r3, #100	; 0x64
 80063ce:	61fb      	str	r3, [r7, #28]
		dateTime.tm_mon = sDate.Month - 1;
 80063d0:	4b42      	ldr	r3, [pc, #264]	; (80064dc <getEpochTime+0x148>)
 80063d2:	785b      	ldrb	r3, [r3, #1]
 80063d4:	3b01      	subs	r3, #1
 80063d6:	61bb      	str	r3, [r7, #24]
		dateTime.tm_mday = sDate.Date;
 80063d8:	4b40      	ldr	r3, [pc, #256]	; (80064dc <getEpochTime+0x148>)
 80063da:	789b      	ldrb	r3, [r3, #2]
 80063dc:	617b      	str	r3, [r7, #20]
		dateTime.tm_hour = sTime.Hours;
 80063de:	4b3e      	ldr	r3, [pc, #248]	; (80064d8 <getEpochTime+0x144>)
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	613b      	str	r3, [r7, #16]
		dateTime.tm_min = sTime.Minutes;
 80063e4:	4b3c      	ldr	r3, [pc, #240]	; (80064d8 <getEpochTime+0x144>)
 80063e6:	785b      	ldrb	r3, [r3, #1]
 80063e8:	60fb      	str	r3, [r7, #12]
		dateTime.tm_sec = sTime.Seconds;
 80063ea:	4b3b      	ldr	r3, [pc, #236]	; (80064d8 <getEpochTime+0x144>)
 80063ec:	789b      	ldrb	r3, [r3, #2]
 80063ee:	60bb      	str	r3, [r7, #8]

		time = mktime(&dateTime);
 80063f0:	f107 0308 	add.w	r3, r7, #8
 80063f4:	4618      	mov	r0, r3
 80063f6:	f00a fcf5 	bl	8010de4 <mktime>
 80063fa:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38

		uint32_t sub = sTime.SubSeconds;
 80063fe:	4b36      	ldr	r3, [pc, #216]	; (80064d8 <getEpochTime+0x144>)
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	637b      	str	r3, [r7, #52]	; 0x34
		uint32_t fract = sTime.SecondFraction;
 8006404:	4b34      	ldr	r3, [pc, #208]	; (80064d8 <getEpochTime+0x144>)
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	633b      	str	r3, [r7, #48]	; 0x30



		uint32_t ms;
		ms = (unsigned int)(((float)fract-(float)sub)/((float)fract+1) * 1000.0);
 800640a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800640c:	ee07 3a90 	vmov	s15, r3
 8006410:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006416:	ee07 3a90 	vmov	s15, r3
 800641a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800641e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006424:	ee07 3a90 	vmov	s15, r3
 8006428:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800642c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006430:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006434:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006438:	ee16 0a90 	vmov	r0, s13
 800643c:	f7fa f89c 	bl	8000578 <__aeabi_f2d>
 8006440:	f04f 0200 	mov.w	r2, #0
 8006444:	4b26      	ldr	r3, [pc, #152]	; (80064e0 <getEpochTime+0x14c>)
 8006446:	f7fa f8ef 	bl	8000628 <__aeabi_dmul>
 800644a:	4602      	mov	r2, r0
 800644c:	460b      	mov	r3, r1
 800644e:	4610      	mov	r0, r2
 8006450:	4619      	mov	r1, r3
 8006452:	f7fa fbc1 	bl	8000bd8 <__aeabi_d2uiz>
 8006456:	4603      	mov	r3, r0
 8006458:	62fb      	str	r3, [r7, #44]	; 0x2c

		epoch->seconds = (uint32_t)time;
 800645a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	601a      	str	r2, [r3, #0]
		epoch->ms = (uint16_t)ms;
 8006460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006462:	b29a      	uxth	r2, r3
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	809a      	strh	r2, [r3, #4]


//		sprintf(pbuffer, "Fract:%u Sub:%u = %03u\r\n",(unsigned int)fract, (unsigned int)sub,ms);
//		Uart_sendstring(pbuffer, pc_uart);

		sprintf(tbuffer, "RTCTime %02u/%02u/%02u %02u:%02u:%02u.%03u %lu %03u\r\n",(unsigned int)sDate.Year,(unsigned int)sDate.Month,(unsigned int)sDate.Date,(unsigned int)sTime.Hours,(unsigned int)sTime.Minutes,(unsigned int)sTime.Seconds,(unsigned int)epoch->ms, (unsigned long)epoch->seconds, (unsigned int)epoch->ms);
 8006468:	4b1c      	ldr	r3, [pc, #112]	; (80064dc <getEpochTime+0x148>)
 800646a:	78db      	ldrb	r3, [r3, #3]
 800646c:	469c      	mov	ip, r3
 800646e:	4b1b      	ldr	r3, [pc, #108]	; (80064dc <getEpochTime+0x148>)
 8006470:	785b      	ldrb	r3, [r3, #1]
 8006472:	469e      	mov	lr, r3
 8006474:	4b19      	ldr	r3, [pc, #100]	; (80064dc <getEpochTime+0x148>)
 8006476:	789b      	ldrb	r3, [r3, #2]
 8006478:	4619      	mov	r1, r3
 800647a:	4b17      	ldr	r3, [pc, #92]	; (80064d8 <getEpochTime+0x144>)
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	4618      	mov	r0, r3
 8006480:	4b15      	ldr	r3, [pc, #84]	; (80064d8 <getEpochTime+0x144>)
 8006482:	785b      	ldrb	r3, [r3, #1]
 8006484:	461c      	mov	r4, r3
 8006486:	4b14      	ldr	r3, [pc, #80]	; (80064d8 <getEpochTime+0x144>)
 8006488:	789b      	ldrb	r3, [r3, #2]
 800648a:	461d      	mov	r5, r3
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	889b      	ldrh	r3, [r3, #4]
 8006490:	461e      	mov	r6, r3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	8892      	ldrh	r2, [r2, #4]
 800649a:	9206      	str	r2, [sp, #24]
 800649c:	9305      	str	r3, [sp, #20]
 800649e:	9604      	str	r6, [sp, #16]
 80064a0:	9503      	str	r5, [sp, #12]
 80064a2:	9402      	str	r4, [sp, #8]
 80064a4:	9001      	str	r0, [sp, #4]
 80064a6:	9100      	str	r1, [sp, #0]
 80064a8:	4673      	mov	r3, lr
 80064aa:	4662      	mov	r2, ip
 80064ac:	490d      	ldr	r1, [pc, #52]	; (80064e4 <getEpochTime+0x150>)
 80064ae:	480e      	ldr	r0, [pc, #56]	; (80064e8 <getEpochTime+0x154>)
 80064b0:	f00b fb8c 	bl	8011bcc <siprintf>
		Debug(tbuffer);
 80064b4:	480c      	ldr	r0, [pc, #48]	; (80064e8 <getEpochTime+0x154>)
 80064b6:	f7ff f937 	bl	8005728 <Debug>
	if(timeState == TIMESTATE_OK_NITZ || timeState == TIMESTATE_OK_SERVER){
 80064ba:	e006      	b.n	80064ca <getEpochTime+0x136>

	}
	else{
		epoch->seconds = 0;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	601a      	str	r2, [r3, #0]
		epoch->ms = 0;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	809a      	strh	r2, [r3, #4]
	}


}
 80064c8:	bf00      	nop
 80064ca:	bf00      	nop
 80064cc:	374c      	adds	r7, #76	; 0x4c
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064d2:	bf00      	nop
 80064d4:	20007a8c 	.word	0x20007a8c
 80064d8:	20007a98 	.word	0x20007a98
 80064dc:	20007aac 	.word	0x20007aac
 80064e0:	408f4000 	.word	0x408f4000
 80064e4:	08018d88 	.word	0x08018d88
 80064e8:	20007a28 	.word	0x20007a28

080064ec <getTimeState>:

TIMESTATE getTimeState(void){
 80064ec:	b480      	push	{r7}
 80064ee:	af00      	add	r7, sp, #0
	return timeState;
 80064f0:	4b03      	ldr	r3, [pc, #12]	; (8006500 <getTimeState+0x14>)
 80064f2:	781b      	ldrb	r3, [r3, #0]
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop
 8006500:	20007a8c 	.word	0x20007a8c

08006504 <getYearCharDirName>:

void getYearCharDirName(char * buf){
 8006504:	b580      	push	{r7, lr}
 8006506:	b082      	sub	sp, #8
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
	HAL_RTC_GetTime(p_hrtc, &sTime, RTC_FORMAT_BIN);
 800650c:	4b0d      	ldr	r3, [pc, #52]	; (8006544 <getYearCharDirName+0x40>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	2200      	movs	r2, #0
 8006512:	490d      	ldr	r1, [pc, #52]	; (8006548 <getYearCharDirName+0x44>)
 8006514:	4618      	mov	r0, r3
 8006516:	f002 fb75 	bl	8008c04 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(p_hrtc, &sDate, RTC_FORMAT_BIN);
 800651a:	4b0a      	ldr	r3, [pc, #40]	; (8006544 <getYearCharDirName+0x40>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	2200      	movs	r2, #0
 8006520:	490a      	ldr	r1, [pc, #40]	; (800654c <getYearCharDirName+0x48>)
 8006522:	4618      	mov	r0, r3
 8006524:	f002 fc50 	bl	8008dc8 <HAL_RTC_GetDate>
	sprintf(buf, "/20%02u_%02u",(unsigned int)sDate.Year,(unsigned int)sDate.Month);
 8006528:	4b08      	ldr	r3, [pc, #32]	; (800654c <getYearCharDirName+0x48>)
 800652a:	78db      	ldrb	r3, [r3, #3]
 800652c:	461a      	mov	r2, r3
 800652e:	4b07      	ldr	r3, [pc, #28]	; (800654c <getYearCharDirName+0x48>)
 8006530:	785b      	ldrb	r3, [r3, #1]
 8006532:	4907      	ldr	r1, [pc, #28]	; (8006550 <getYearCharDirName+0x4c>)
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f00b fb49 	bl	8011bcc <siprintf>
}
 800653a:	bf00      	nop
 800653c:	3708      	adds	r7, #8
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	20007ab0 	.word	0x20007ab0
 8006548:	20007a98 	.word	0x20007a98
 800654c:	20007aac 	.word	0x20007aac
 8006550:	08018dc0 	.word	0x08018dc0

08006554 <getDateCharFileName>:

void getDateCharFileName(char * buf){
 8006554:	b590      	push	{r4, r7, lr}
 8006556:	b087      	sub	sp, #28
 8006558:	af04      	add	r7, sp, #16
 800655a:	6078      	str	r0, [r7, #4]
	HAL_RTC_GetTime(p_hrtc, &sTime, RTC_FORMAT_BIN);
 800655c:	4b14      	ldr	r3, [pc, #80]	; (80065b0 <getDateCharFileName+0x5c>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2200      	movs	r2, #0
 8006562:	4914      	ldr	r1, [pc, #80]	; (80065b4 <getDateCharFileName+0x60>)
 8006564:	4618      	mov	r0, r3
 8006566:	f002 fb4d 	bl	8008c04 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(p_hrtc, &sDate, RTC_FORMAT_BIN);
 800656a:	4b11      	ldr	r3, [pc, #68]	; (80065b0 <getDateCharFileName+0x5c>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2200      	movs	r2, #0
 8006570:	4911      	ldr	r1, [pc, #68]	; (80065b8 <getDateCharFileName+0x64>)
 8006572:	4618      	mov	r0, r3
 8006574:	f002 fc28 	bl	8008dc8 <HAL_RTC_GetDate>
	sprintf(buf, "/20%02u_%02u/%02u%02u%02u.txt",(unsigned int)sDate.Year,(unsigned int)sDate.Month,(unsigned int)sDate.Year,(unsigned int)sDate.Month,(unsigned int)sDate.Date);
 8006578:	4b0f      	ldr	r3, [pc, #60]	; (80065b8 <getDateCharFileName+0x64>)
 800657a:	78db      	ldrb	r3, [r3, #3]
 800657c:	4618      	mov	r0, r3
 800657e:	4b0e      	ldr	r3, [pc, #56]	; (80065b8 <getDateCharFileName+0x64>)
 8006580:	785b      	ldrb	r3, [r3, #1]
 8006582:	461c      	mov	r4, r3
 8006584:	4b0c      	ldr	r3, [pc, #48]	; (80065b8 <getDateCharFileName+0x64>)
 8006586:	78db      	ldrb	r3, [r3, #3]
 8006588:	461a      	mov	r2, r3
 800658a:	4b0b      	ldr	r3, [pc, #44]	; (80065b8 <getDateCharFileName+0x64>)
 800658c:	785b      	ldrb	r3, [r3, #1]
 800658e:	4619      	mov	r1, r3
 8006590:	4b09      	ldr	r3, [pc, #36]	; (80065b8 <getDateCharFileName+0x64>)
 8006592:	789b      	ldrb	r3, [r3, #2]
 8006594:	9302      	str	r3, [sp, #8]
 8006596:	9101      	str	r1, [sp, #4]
 8006598:	9200      	str	r2, [sp, #0]
 800659a:	4623      	mov	r3, r4
 800659c:	4602      	mov	r2, r0
 800659e:	4907      	ldr	r1, [pc, #28]	; (80065bc <getDateCharFileName+0x68>)
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f00b fb13 	bl	8011bcc <siprintf>
}
 80065a6:	bf00      	nop
 80065a8:	370c      	adds	r7, #12
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd90      	pop	{r4, r7, pc}
 80065ae:	bf00      	nop
 80065b0:	20007ab0 	.word	0x20007ab0
 80065b4:	20007a98 	.word	0x20007a98
 80065b8:	20007aac 	.word	0x20007aac
 80065bc:	08018dd0 	.word	0x08018dd0

080065c0 <getHour>:

uint8_t getHour(void){
 80065c0:	b580      	push	{r7, lr}
 80065c2:	af00      	add	r7, sp, #0
	HAL_RTC_GetTime(p_hrtc, &sTime, RTC_FORMAT_BIN);
 80065c4:	4b08      	ldr	r3, [pc, #32]	; (80065e8 <getHour+0x28>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	2200      	movs	r2, #0
 80065ca:	4908      	ldr	r1, [pc, #32]	; (80065ec <getHour+0x2c>)
 80065cc:	4618      	mov	r0, r3
 80065ce:	f002 fb19 	bl	8008c04 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(p_hrtc, &sDate, RTC_FORMAT_BIN);
 80065d2:	4b05      	ldr	r3, [pc, #20]	; (80065e8 <getHour+0x28>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	2200      	movs	r2, #0
 80065d8:	4905      	ldr	r1, [pc, #20]	; (80065f0 <getHour+0x30>)
 80065da:	4618      	mov	r0, r3
 80065dc:	f002 fbf4 	bl	8008dc8 <HAL_RTC_GetDate>
	return (uint8_t)sTime.Hours;
 80065e0:	4b02      	ldr	r3, [pc, #8]	; (80065ec <getHour+0x2c>)
 80065e2:	781b      	ldrb	r3, [r3, #0]
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	bd80      	pop	{r7, pc}
 80065e8:	20007ab0 	.word	0x20007ab0
 80065ec:	20007a98 	.word	0x20007a98
 80065f0:	20007aac 	.word	0x20007aac

080065f4 <getTimeChar>:

void getTimeChar(char * buf){
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af02      	add	r7, sp, #8
 80065fa:	6078      	str	r0, [r7, #4]
	HAL_RTC_GetTime(p_hrtc, &sTime, RTC_FORMAT_BIN);
 80065fc:	4b0f      	ldr	r3, [pc, #60]	; (800663c <getTimeChar+0x48>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	2200      	movs	r2, #0
 8006602:	490f      	ldr	r1, [pc, #60]	; (8006640 <getTimeChar+0x4c>)
 8006604:	4618      	mov	r0, r3
 8006606:	f002 fafd 	bl	8008c04 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(p_hrtc, &sDate, RTC_FORMAT_BIN);
 800660a:	4b0c      	ldr	r3, [pc, #48]	; (800663c <getTimeChar+0x48>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2200      	movs	r2, #0
 8006610:	490c      	ldr	r1, [pc, #48]	; (8006644 <getTimeChar+0x50>)
 8006612:	4618      	mov	r0, r3
 8006614:	f002 fbd8 	bl	8008dc8 <HAL_RTC_GetDate>
	sprintf(buf, "%02u:%02u:%02u UTC",(unsigned int)sTime.Hours,(unsigned int)sTime.Minutes,(unsigned int)sTime.Seconds);
 8006618:	4b09      	ldr	r3, [pc, #36]	; (8006640 <getTimeChar+0x4c>)
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	461a      	mov	r2, r3
 800661e:	4b08      	ldr	r3, [pc, #32]	; (8006640 <getTimeChar+0x4c>)
 8006620:	785b      	ldrb	r3, [r3, #1]
 8006622:	4619      	mov	r1, r3
 8006624:	4b06      	ldr	r3, [pc, #24]	; (8006640 <getTimeChar+0x4c>)
 8006626:	789b      	ldrb	r3, [r3, #2]
 8006628:	9300      	str	r3, [sp, #0]
 800662a:	460b      	mov	r3, r1
 800662c:	4906      	ldr	r1, [pc, #24]	; (8006648 <getTimeChar+0x54>)
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f00b facc 	bl	8011bcc <siprintf>
}
 8006634:	bf00      	nop
 8006636:	3708      	adds	r7, #8
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}
 800663c:	20007ab0 	.word	0x20007ab0
 8006640:	20007a98 	.word	0x20007a98
 8006644:	20007aac 	.word	0x20007aac
 8006648:	08018df0 	.word	0x08018df0

0800664c <util_atoi_n>:
#include "util.h"
//#include "UartRingbuffer.h"

int util_atoi_n(char *c, int n) {
 800664c:	b480      	push	{r7}
 800664e:	b085      	sub	sp, #20
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
    int result = 0;
 8006656:	2300      	movs	r3, #0
 8006658:	60fb      	str	r3, [r7, #12]
    int multiplier = 1;
 800665a:	2301      	movs	r3, #1
 800665c:	60bb      	str	r3, [r7, #8]
//    Uart_write('#', pc_uart);
//    Uart_write(&c, pc_uart);



    if (c && *c == '-') {
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d00a      	beq.n	800667a <util_atoi_n+0x2e>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	2b2d      	cmp	r3, #45	; 0x2d
 800666a:	d106      	bne.n	800667a <util_atoi_n+0x2e>
        multiplier = -1;
 800666c:	f04f 33ff 	mov.w	r3, #4294967295
 8006670:	60bb      	str	r3, [r7, #8]
        c++;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	3301      	adds	r3, #1
 8006676:	607b      	str	r3, [r7, #4]
 8006678:	e00e      	b.n	8006698 <util_atoi_n+0x4c>
    }

    else if (c && *c == '+') {
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d009      	beq.n	8006694 <util_atoi_n+0x48>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	2b2b      	cmp	r3, #43	; 0x2b
 8006686:	d105      	bne.n	8006694 <util_atoi_n+0x48>
            multiplier = 1;
 8006688:	2301      	movs	r3, #1
 800668a:	60bb      	str	r3, [r7, #8]
            c++;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	3301      	adds	r3, #1
 8006690:	607b      	str	r3, [r7, #4]
 8006692:	e001      	b.n	8006698 <util_atoi_n+0x4c>
    }

    else {
        multiplier = 1;
 8006694:	2301      	movs	r3, #1
 8006696:	60bb      	str	r3, [r7, #8]
    }

    while (*c && n) {
 8006698:	e01e      	b.n	80066d8 <util_atoi_n+0x8c>
        if (*c < '0' || *c > '9') {
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	2b2f      	cmp	r3, #47	; 0x2f
 80066a0:	d903      	bls.n	80066aa <util_atoi_n+0x5e>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	2b39      	cmp	r3, #57	; 0x39
 80066a8:	d904      	bls.n	80066b4 <util_atoi_n+0x68>
            return result * multiplier;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	68ba      	ldr	r2, [r7, #8]
 80066ae:	fb02 f303 	mul.w	r3, r2, r3
 80066b2:	e01c      	b.n	80066ee <util_atoi_n+0xa2>
        }



        result *= 10;
 80066b4:	68fa      	ldr	r2, [r7, #12]
 80066b6:	4613      	mov	r3, r2
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	4413      	add	r3, r2
 80066bc:	005b      	lsls	r3, r3, #1
 80066be:	60fb      	str	r3, [r7, #12]
        result += *c - '0';
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	3b30      	subs	r3, #48	; 0x30
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	4413      	add	r3, r2
 80066ca:	60fb      	str	r3, [r7, #12]
        c++;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	3301      	adds	r3, #1
 80066d0:	607b      	str	r3, [r7, #4]
        n--;
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	3b01      	subs	r3, #1
 80066d6:	603b      	str	r3, [r7, #0]
    while (*c && n) {
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d002      	beq.n	80066e6 <util_atoi_n+0x9a>
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d1d9      	bne.n	800669a <util_atoi_n+0x4e>
    }
    return (result * multiplier);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	68ba      	ldr	r2, [r7, #8]
 80066ea:	fb02 f303 	mul.w	r3, r2, r3
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3714      	adds	r7, #20
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr

080066fa <appendStr>:

int appendStr(char *dst, char *src, int beginIndex) {
 80066fa:	b480      	push	{r7}
 80066fc:	b087      	sub	sp, #28
 80066fe:	af00      	add	r7, sp, #0
 8006700:	60f8      	str	r0, [r7, #12]
 8006702:	60b9      	str	r1, [r7, #8]
 8006704:	607a      	str	r2, [r7, #4]
    int di = beginIndex;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	617b      	str	r3, [r7, #20]
    int si = 0;
 800670a:	2300      	movs	r3, #0
 800670c:	613b      	str	r3, [r7, #16]
//    int append = 0;

    while (src[si]) {
 800670e:	e00d      	b.n	800672c <appendStr+0x32>
//        if (dst[di] == 0) {
//            append = 1;
//        }
//        if (append) {
            dst[di] = src[si];
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	68ba      	ldr	r2, [r7, #8]
 8006714:	441a      	add	r2, r3
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	68f9      	ldr	r1, [r7, #12]
 800671a:	440b      	add	r3, r1
 800671c:	7812      	ldrb	r2, [r2, #0]
 800671e:	701a      	strb	r2, [r3, #0]
            si++;
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	3301      	adds	r3, #1
 8006724:	613b      	str	r3, [r7, #16]
//        }
        di++;
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	3301      	adds	r3, #1
 800672a:	617b      	str	r3, [r7, #20]
    while (src[si]) {
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	68ba      	ldr	r2, [r7, #8]
 8006730:	4413      	add	r3, r2
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d1eb      	bne.n	8006710 <appendStr+0x16>
    }
    dst[di] = 0;
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	68fa      	ldr	r2, [r7, #12]
 800673c:	4413      	add	r3, r2
 800673e:	2200      	movs	r2, #0
 8006740:	701a      	strb	r2, [r3, #0]

    return di;
 8006742:	697b      	ldr	r3, [r7, #20]
}
 8006744:	4618      	mov	r0, r3
 8006746:	371c      	adds	r7, #28
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8006750:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006788 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006754:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006756:	e003      	b.n	8006760 <LoopCopyDataInit>

08006758 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006758:	4b0c      	ldr	r3, [pc, #48]	; (800678c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800675a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800675c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800675e:	3104      	adds	r1, #4

08006760 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006760:	480b      	ldr	r0, [pc, #44]	; (8006790 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006762:	4b0c      	ldr	r3, [pc, #48]	; (8006794 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006764:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006766:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006768:	d3f6      	bcc.n	8006758 <CopyDataInit>
  ldr  r2, =_sbss
 800676a:	4a0b      	ldr	r2, [pc, #44]	; (8006798 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800676c:	e002      	b.n	8006774 <LoopFillZerobss>

0800676e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800676e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006770:	f842 3b04 	str.w	r3, [r2], #4

08006774 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006774:	4b09      	ldr	r3, [pc, #36]	; (800679c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006776:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006778:	d3f9      	bcc.n	800676e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800677a:	f7ff fcbd 	bl	80060f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800677e:	f00a fa1d 	bl	8010bbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006782:	f7fb fb33 	bl	8001dec <main>
  bx  lr    
 8006786:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8006788:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800678c:	08019778 	.word	0x08019778
  ldr  r0, =_sdata
 8006790:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006794:	20000258 	.word	0x20000258
  ldr  r2, =_sbss
 8006798:	20000258 	.word	0x20000258
  ldr  r3, = _ebss
 800679c:	20007b34 	.word	0x20007b34

080067a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80067a0:	e7fe      	b.n	80067a0 <ADC_IRQHandler>
	...

080067a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80067a8:	4b0e      	ldr	r3, [pc, #56]	; (80067e4 <HAL_Init+0x40>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a0d      	ldr	r2, [pc, #52]	; (80067e4 <HAL_Init+0x40>)
 80067ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80067b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80067b4:	4b0b      	ldr	r3, [pc, #44]	; (80067e4 <HAL_Init+0x40>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a0a      	ldr	r2, [pc, #40]	; (80067e4 <HAL_Init+0x40>)
 80067ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80067be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80067c0:	4b08      	ldr	r3, [pc, #32]	; (80067e4 <HAL_Init+0x40>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a07      	ldr	r2, [pc, #28]	; (80067e4 <HAL_Init+0x40>)
 80067c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80067cc:	2003      	movs	r0, #3
 80067ce:	f000 fd51 	bl	8007274 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80067d2:	2000      	movs	r0, #0
 80067d4:	f000 f808 	bl	80067e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80067d8:	f7fe ffdc 	bl	8005794 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	40023c00 	.word	0x40023c00

080067e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80067f0:	4b12      	ldr	r3, [pc, #72]	; (800683c <HAL_InitTick+0x54>)
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	4b12      	ldr	r3, [pc, #72]	; (8006840 <HAL_InitTick+0x58>)
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	4619      	mov	r1, r3
 80067fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80067fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8006802:	fbb2 f3f3 	udiv	r3, r2, r3
 8006806:	4618      	mov	r0, r3
 8006808:	f000 fd69 	bl	80072de <HAL_SYSTICK_Config>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d001      	beq.n	8006816 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e00e      	b.n	8006834 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2b0f      	cmp	r3, #15
 800681a:	d80a      	bhi.n	8006832 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800681c:	2200      	movs	r2, #0
 800681e:	6879      	ldr	r1, [r7, #4]
 8006820:	f04f 30ff 	mov.w	r0, #4294967295
 8006824:	f000 fd31 	bl	800728a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006828:	4a06      	ldr	r2, [pc, #24]	; (8006844 <HAL_InitTick+0x5c>)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800682e:	2300      	movs	r3, #0
 8006830:	e000      	b.n	8006834 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006832:	2301      	movs	r3, #1
}
 8006834:	4618      	mov	r0, r3
 8006836:	3708      	adds	r7, #8
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}
 800683c:	20000014 	.word	0x20000014
 8006840:	2000001c 	.word	0x2000001c
 8006844:	20000018 	.word	0x20000018

08006848 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006848:	b480      	push	{r7}
 800684a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800684c:	4b06      	ldr	r3, [pc, #24]	; (8006868 <HAL_IncTick+0x20>)
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	461a      	mov	r2, r3
 8006852:	4b06      	ldr	r3, [pc, #24]	; (800686c <HAL_IncTick+0x24>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4413      	add	r3, r2
 8006858:	4a04      	ldr	r2, [pc, #16]	; (800686c <HAL_IncTick+0x24>)
 800685a:	6013      	str	r3, [r2, #0]
}
 800685c:	bf00      	nop
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr
 8006866:	bf00      	nop
 8006868:	2000001c 	.word	0x2000001c
 800686c:	20007ab4 	.word	0x20007ab4

08006870 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006870:	b480      	push	{r7}
 8006872:	af00      	add	r7, sp, #0
  return uwTick;
 8006874:	4b03      	ldr	r3, [pc, #12]	; (8006884 <HAL_GetTick+0x14>)
 8006876:	681b      	ldr	r3, [r3, #0]
}
 8006878:	4618      	mov	r0, r3
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr
 8006882:	bf00      	nop
 8006884:	20007ab4 	.word	0x20007ab4

08006888 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006890:	f7ff ffee 	bl	8006870 <HAL_GetTick>
 8006894:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068a0:	d005      	beq.n	80068ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80068a2:	4b0a      	ldr	r3, [pc, #40]	; (80068cc <HAL_Delay+0x44>)
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	461a      	mov	r2, r3
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	4413      	add	r3, r2
 80068ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80068ae:	bf00      	nop
 80068b0:	f7ff ffde 	bl	8006870 <HAL_GetTick>
 80068b4:	4602      	mov	r2, r0
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	1ad3      	subs	r3, r2, r3
 80068ba:	68fa      	ldr	r2, [r7, #12]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d8f7      	bhi.n	80068b0 <HAL_Delay+0x28>
  {
  }
}
 80068c0:	bf00      	nop
 80068c2:	bf00      	nop
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	2000001c 	.word	0x2000001c

080068d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80068d8:	2300      	movs	r3, #0
 80068da:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d101      	bne.n	80068e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e033      	b.n	800694e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d109      	bne.n	8006902 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f7fe ff78 	bl	80057e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006906:	f003 0310 	and.w	r3, r3, #16
 800690a:	2b00      	cmp	r3, #0
 800690c:	d118      	bne.n	8006940 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006912:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006916:	f023 0302 	bic.w	r3, r3, #2
 800691a:	f043 0202 	orr.w	r2, r3, #2
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 fa58 	bl	8006dd8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006932:	f023 0303 	bic.w	r3, r3, #3
 8006936:	f043 0201 	orr.w	r2, r3, #1
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	641a      	str	r2, [r3, #64]	; 0x40
 800693e:	e001      	b.n	8006944 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800694c:	7bfb      	ldrb	r3, [r7, #15]
}
 800694e:	4618      	mov	r0, r3
 8006950:	3710      	adds	r7, #16
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
	...

08006958 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b086      	sub	sp, #24
 800695c:	af00      	add	r7, sp, #0
 800695e:	60f8      	str	r0, [r7, #12]
 8006960:	60b9      	str	r1, [r7, #8]
 8006962:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006964:	2300      	movs	r3, #0
 8006966:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800696e:	2b01      	cmp	r3, #1
 8006970:	d101      	bne.n	8006976 <HAL_ADC_Start_DMA+0x1e>
 8006972:	2302      	movs	r3, #2
 8006974:	e0ce      	b.n	8006b14 <HAL_ADC_Start_DMA+0x1bc>
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2201      	movs	r2, #1
 800697a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	f003 0301 	and.w	r3, r3, #1
 8006988:	2b01      	cmp	r3, #1
 800698a:	d018      	beq.n	80069be <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	689a      	ldr	r2, [r3, #8]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f042 0201 	orr.w	r2, r2, #1
 800699a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800699c:	4b5f      	ldr	r3, [pc, #380]	; (8006b1c <HAL_ADC_Start_DMA+0x1c4>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a5f      	ldr	r2, [pc, #380]	; (8006b20 <HAL_ADC_Start_DMA+0x1c8>)
 80069a2:	fba2 2303 	umull	r2, r3, r2, r3
 80069a6:	0c9a      	lsrs	r2, r3, #18
 80069a8:	4613      	mov	r3, r2
 80069aa:	005b      	lsls	r3, r3, #1
 80069ac:	4413      	add	r3, r2
 80069ae:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80069b0:	e002      	b.n	80069b8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	3b01      	subs	r3, #1
 80069b6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d1f9      	bne.n	80069b2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069cc:	d107      	bne.n	80069de <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	689a      	ldr	r2, [r3, #8]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80069dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	f003 0301 	and.w	r3, r3, #1
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	f040 8086 	bne.w	8006afa <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80069f6:	f023 0301 	bic.w	r3, r3, #1
 80069fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d007      	beq.n	8006a20 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a14:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006a18:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a2c:	d106      	bne.n	8006a3c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a32:	f023 0206 	bic.w	r2, r3, #6
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	645a      	str	r2, [r3, #68]	; 0x44
 8006a3a:	e002      	b.n	8006a42 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006a4a:	4b36      	ldr	r3, [pc, #216]	; (8006b24 <HAL_ADC_Start_DMA+0x1cc>)
 8006a4c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a52:	4a35      	ldr	r2, [pc, #212]	; (8006b28 <HAL_ADC_Start_DMA+0x1d0>)
 8006a54:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a5a:	4a34      	ldr	r2, [pc, #208]	; (8006b2c <HAL_ADC_Start_DMA+0x1d4>)
 8006a5c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a62:	4a33      	ldr	r2, [pc, #204]	; (8006b30 <HAL_ADC_Start_DMA+0x1d8>)
 8006a64:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006a6e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	685a      	ldr	r2, [r3, #4]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006a7e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	689a      	ldr	r2, [r3, #8]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a8e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	334c      	adds	r3, #76	; 0x4c
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	68ba      	ldr	r2, [r7, #8]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f000 fcd8 	bl	8007454 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	f003 031f 	and.w	r3, r3, #31
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d10f      	bne.n	8006ad0 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d129      	bne.n	8006b12 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	689a      	ldr	r2, [r3, #8]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006acc:	609a      	str	r2, [r3, #8]
 8006ace:	e020      	b.n	8006b12 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a17      	ldr	r2, [pc, #92]	; (8006b34 <HAL_ADC_Start_DMA+0x1dc>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d11b      	bne.n	8006b12 <HAL_ADC_Start_DMA+0x1ba>
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d114      	bne.n	8006b12 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	689a      	ldr	r2, [r3, #8]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006af6:	609a      	str	r2, [r3, #8]
 8006af8:	e00b      	b.n	8006b12 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afe:	f043 0210 	orr.w	r2, r3, #16
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b0a:	f043 0201 	orr.w	r2, r3, #1
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006b12:	2300      	movs	r3, #0
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3718      	adds	r7, #24
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}
 8006b1c:	20000014 	.word	0x20000014
 8006b20:	431bde83 	.word	0x431bde83
 8006b24:	40012300 	.word	0x40012300
 8006b28:	08006fd1 	.word	0x08006fd1
 8006b2c:	0800708b 	.word	0x0800708b
 8006b30:	080070a7 	.word	0x080070a7
 8006b34:	40012000 	.word	0x40012000

08006b38 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8006b40:	bf00      	nop
 8006b42:	370c      	adds	r7, #12
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr

08006b4c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006b54:	bf00      	nop
 8006b56:	370c      	adds	r7, #12
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr

08006b60 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b083      	sub	sp, #12
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006b68:	bf00      	nop
 8006b6a:	370c      	adds	r7, #12
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr

08006b74 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b085      	sub	sp, #20
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d101      	bne.n	8006b90 <HAL_ADC_ConfigChannel+0x1c>
 8006b8c:	2302      	movs	r3, #2
 8006b8e:	e113      	b.n	8006db8 <HAL_ADC_ConfigChannel+0x244>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	2b09      	cmp	r3, #9
 8006b9e:	d925      	bls.n	8006bec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	68d9      	ldr	r1, [r3, #12]
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	461a      	mov	r2, r3
 8006bae:	4613      	mov	r3, r2
 8006bb0:	005b      	lsls	r3, r3, #1
 8006bb2:	4413      	add	r3, r2
 8006bb4:	3b1e      	subs	r3, #30
 8006bb6:	2207      	movs	r2, #7
 8006bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8006bbc:	43da      	mvns	r2, r3
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	400a      	ands	r2, r1
 8006bc4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	68d9      	ldr	r1, [r3, #12]
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	689a      	ldr	r2, [r3, #8]
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	4603      	mov	r3, r0
 8006bda:	005b      	lsls	r3, r3, #1
 8006bdc:	4403      	add	r3, r0
 8006bde:	3b1e      	subs	r3, #30
 8006be0:	409a      	lsls	r2, r3
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	430a      	orrs	r2, r1
 8006be8:	60da      	str	r2, [r3, #12]
 8006bea:	e022      	b.n	8006c32 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	6919      	ldr	r1, [r3, #16]
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	4613      	mov	r3, r2
 8006bfc:	005b      	lsls	r3, r3, #1
 8006bfe:	4413      	add	r3, r2
 8006c00:	2207      	movs	r2, #7
 8006c02:	fa02 f303 	lsl.w	r3, r2, r3
 8006c06:	43da      	mvns	r2, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	400a      	ands	r2, r1
 8006c0e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	6919      	ldr	r1, [r3, #16]
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	689a      	ldr	r2, [r3, #8]
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	4618      	mov	r0, r3
 8006c22:	4603      	mov	r3, r0
 8006c24:	005b      	lsls	r3, r3, #1
 8006c26:	4403      	add	r3, r0
 8006c28:	409a      	lsls	r2, r3
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	430a      	orrs	r2, r1
 8006c30:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	2b06      	cmp	r3, #6
 8006c38:	d824      	bhi.n	8006c84 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	685a      	ldr	r2, [r3, #4]
 8006c44:	4613      	mov	r3, r2
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	4413      	add	r3, r2
 8006c4a:	3b05      	subs	r3, #5
 8006c4c:	221f      	movs	r2, #31
 8006c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c52:	43da      	mvns	r2, r3
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	400a      	ands	r2, r1
 8006c5a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	4618      	mov	r0, r3
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	685a      	ldr	r2, [r3, #4]
 8006c6e:	4613      	mov	r3, r2
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	4413      	add	r3, r2
 8006c74:	3b05      	subs	r3, #5
 8006c76:	fa00 f203 	lsl.w	r2, r0, r3
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	430a      	orrs	r2, r1
 8006c80:	635a      	str	r2, [r3, #52]	; 0x34
 8006c82:	e04c      	b.n	8006d1e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	2b0c      	cmp	r3, #12
 8006c8a:	d824      	bhi.n	8006cd6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	685a      	ldr	r2, [r3, #4]
 8006c96:	4613      	mov	r3, r2
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	4413      	add	r3, r2
 8006c9c:	3b23      	subs	r3, #35	; 0x23
 8006c9e:	221f      	movs	r2, #31
 8006ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ca4:	43da      	mvns	r2, r3
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	400a      	ands	r2, r1
 8006cac:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	4618      	mov	r0, r3
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	685a      	ldr	r2, [r3, #4]
 8006cc0:	4613      	mov	r3, r2
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	4413      	add	r3, r2
 8006cc6:	3b23      	subs	r3, #35	; 0x23
 8006cc8:	fa00 f203 	lsl.w	r2, r0, r3
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	430a      	orrs	r2, r1
 8006cd2:	631a      	str	r2, [r3, #48]	; 0x30
 8006cd4:	e023      	b.n	8006d1e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	685a      	ldr	r2, [r3, #4]
 8006ce0:	4613      	mov	r3, r2
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	4413      	add	r3, r2
 8006ce6:	3b41      	subs	r3, #65	; 0x41
 8006ce8:	221f      	movs	r2, #31
 8006cea:	fa02 f303 	lsl.w	r3, r2, r3
 8006cee:	43da      	mvns	r2, r3
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	400a      	ands	r2, r1
 8006cf6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	4618      	mov	r0, r3
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	685a      	ldr	r2, [r3, #4]
 8006d0a:	4613      	mov	r3, r2
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	4413      	add	r3, r2
 8006d10:	3b41      	subs	r3, #65	; 0x41
 8006d12:	fa00 f203 	lsl.w	r2, r0, r3
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	430a      	orrs	r2, r1
 8006d1c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006d1e:	4b29      	ldr	r3, [pc, #164]	; (8006dc4 <HAL_ADC_ConfigChannel+0x250>)
 8006d20:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a28      	ldr	r2, [pc, #160]	; (8006dc8 <HAL_ADC_ConfigChannel+0x254>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d10f      	bne.n	8006d4c <HAL_ADC_ConfigChannel+0x1d8>
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	2b12      	cmp	r3, #18
 8006d32:	d10b      	bne.n	8006d4c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a1d      	ldr	r2, [pc, #116]	; (8006dc8 <HAL_ADC_ConfigChannel+0x254>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d12b      	bne.n	8006dae <HAL_ADC_ConfigChannel+0x23a>
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a1c      	ldr	r2, [pc, #112]	; (8006dcc <HAL_ADC_ConfigChannel+0x258>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d003      	beq.n	8006d68 <HAL_ADC_ConfigChannel+0x1f4>
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2b11      	cmp	r3, #17
 8006d66:	d122      	bne.n	8006dae <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a11      	ldr	r2, [pc, #68]	; (8006dcc <HAL_ADC_ConfigChannel+0x258>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d111      	bne.n	8006dae <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006d8a:	4b11      	ldr	r3, [pc, #68]	; (8006dd0 <HAL_ADC_ConfigChannel+0x25c>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a11      	ldr	r2, [pc, #68]	; (8006dd4 <HAL_ADC_ConfigChannel+0x260>)
 8006d90:	fba2 2303 	umull	r2, r3, r2, r3
 8006d94:	0c9a      	lsrs	r2, r3, #18
 8006d96:	4613      	mov	r3, r2
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	4413      	add	r3, r2
 8006d9c:	005b      	lsls	r3, r3, #1
 8006d9e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006da0:	e002      	b.n	8006da8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	3b01      	subs	r3, #1
 8006da6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d1f9      	bne.n	8006da2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006db6:	2300      	movs	r3, #0
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3714      	adds	r7, #20
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr
 8006dc4:	40012300 	.word	0x40012300
 8006dc8:	40012000 	.word	0x40012000
 8006dcc:	10000012 	.word	0x10000012
 8006dd0:	20000014 	.word	0x20000014
 8006dd4:	431bde83 	.word	0x431bde83

08006dd8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b085      	sub	sp, #20
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006de0:	4b79      	ldr	r3, [pc, #484]	; (8006fc8 <ADC_Init+0x1f0>)
 8006de2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	685a      	ldr	r2, [r3, #4]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	431a      	orrs	r2, r3
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	685a      	ldr	r2, [r3, #4]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	6859      	ldr	r1, [r3, #4]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	691b      	ldr	r3, [r3, #16]
 8006e18:	021a      	lsls	r2, r3, #8
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	430a      	orrs	r2, r1
 8006e20:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	685a      	ldr	r2, [r3, #4]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006e30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	6859      	ldr	r1, [r3, #4]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	689a      	ldr	r2, [r3, #8]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	430a      	orrs	r2, r1
 8006e42:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	689a      	ldr	r2, [r3, #8]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	6899      	ldr	r1, [r3, #8]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	68da      	ldr	r2, [r3, #12]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	430a      	orrs	r2, r1
 8006e64:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e6a:	4a58      	ldr	r2, [pc, #352]	; (8006fcc <ADC_Init+0x1f4>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d022      	beq.n	8006eb6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	689a      	ldr	r2, [r3, #8]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006e7e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	6899      	ldr	r1, [r3, #8]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	430a      	orrs	r2, r1
 8006e90:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	689a      	ldr	r2, [r3, #8]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006ea0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	6899      	ldr	r1, [r3, #8]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	430a      	orrs	r2, r1
 8006eb2:	609a      	str	r2, [r3, #8]
 8006eb4:	e00f      	b.n	8006ed6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	689a      	ldr	r2, [r3, #8]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006ec4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	689a      	ldr	r2, [r3, #8]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006ed4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	689a      	ldr	r2, [r3, #8]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f022 0202 	bic.w	r2, r2, #2
 8006ee4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	6899      	ldr	r1, [r3, #8]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	7e1b      	ldrb	r3, [r3, #24]
 8006ef0:	005a      	lsls	r2, r3, #1
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	430a      	orrs	r2, r1
 8006ef8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d01b      	beq.n	8006f3c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	685a      	ldr	r2, [r3, #4]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f12:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	685a      	ldr	r2, [r3, #4]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006f22:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	6859      	ldr	r1, [r3, #4]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2e:	3b01      	subs	r3, #1
 8006f30:	035a      	lsls	r2, r3, #13
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	430a      	orrs	r2, r1
 8006f38:	605a      	str	r2, [r3, #4]
 8006f3a:	e007      	b.n	8006f4c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	685a      	ldr	r2, [r3, #4]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f4a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006f5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	69db      	ldr	r3, [r3, #28]
 8006f66:	3b01      	subs	r3, #1
 8006f68:	051a      	lsls	r2, r3, #20
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	430a      	orrs	r2, r1
 8006f70:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	689a      	ldr	r2, [r3, #8]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006f80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	6899      	ldr	r1, [r3, #8]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006f8e:	025a      	lsls	r2, r3, #9
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	430a      	orrs	r2, r1
 8006f96:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	689a      	ldr	r2, [r3, #8]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fa6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	6899      	ldr	r1, [r3, #8]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	695b      	ldr	r3, [r3, #20]
 8006fb2:	029a      	lsls	r2, r3, #10
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	430a      	orrs	r2, r1
 8006fba:	609a      	str	r2, [r3, #8]
}
 8006fbc:	bf00      	nop
 8006fbe:	3714      	adds	r7, #20
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr
 8006fc8:	40012300 	.word	0x40012300
 8006fcc:	0f000001 	.word	0x0f000001

08006fd0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fdc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d13c      	bne.n	8007064 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007000:	2b00      	cmp	r3, #0
 8007002:	d12b      	bne.n	800705c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007008:	2b00      	cmp	r3, #0
 800700a:	d127      	bne.n	800705c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007012:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007016:	2b00      	cmp	r3, #0
 8007018:	d006      	beq.n	8007028 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007024:	2b00      	cmp	r3, #0
 8007026:	d119      	bne.n	800705c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	685a      	ldr	r2, [r3, #4]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f022 0220 	bic.w	r2, r2, #32
 8007036:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800703c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007048:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800704c:	2b00      	cmp	r3, #0
 800704e:	d105      	bne.n	800705c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007054:	f043 0201 	orr.w	r2, r3, #1
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800705c:	68f8      	ldr	r0, [r7, #12]
 800705e:	f7ff fd6b 	bl	8006b38 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007062:	e00e      	b.n	8007082 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007068:	f003 0310 	and.w	r3, r3, #16
 800706c:	2b00      	cmp	r3, #0
 800706e:	d003      	beq.n	8007078 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8007070:	68f8      	ldr	r0, [r7, #12]
 8007072:	f7ff fd75 	bl	8006b60 <HAL_ADC_ErrorCallback>
}
 8007076:	e004      	b.n	8007082 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800707c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	4798      	blx	r3
}
 8007082:	bf00      	nop
 8007084:	3710      	adds	r7, #16
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}

0800708a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800708a:	b580      	push	{r7, lr}
 800708c:	b084      	sub	sp, #16
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007096:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007098:	68f8      	ldr	r0, [r7, #12]
 800709a:	f7ff fd57 	bl	8006b4c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800709e:	bf00      	nop
 80070a0:	3710      	adds	r7, #16
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}

080070a6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80070a6:	b580      	push	{r7, lr}
 80070a8:	b084      	sub	sp, #16
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070b2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2240      	movs	r2, #64	; 0x40
 80070b8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070be:	f043 0204 	orr.w	r2, r3, #4
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80070c6:	68f8      	ldr	r0, [r7, #12]
 80070c8:	f7ff fd4a 	bl	8006b60 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80070cc:	bf00      	nop
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <__NVIC_SetPriorityGrouping>:
{
 80070d4:	b480      	push	{r7}
 80070d6:	b085      	sub	sp, #20
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f003 0307 	and.w	r3, r3, #7
 80070e2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80070e4:	4b0c      	ldr	r3, [pc, #48]	; (8007118 <__NVIC_SetPriorityGrouping+0x44>)
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80070ea:	68ba      	ldr	r2, [r7, #8]
 80070ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80070f0:	4013      	ands	r3, r2
 80070f2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80070fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007104:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007106:	4a04      	ldr	r2, [pc, #16]	; (8007118 <__NVIC_SetPriorityGrouping+0x44>)
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	60d3      	str	r3, [r2, #12]
}
 800710c:	bf00      	nop
 800710e:	3714      	adds	r7, #20
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr
 8007118:	e000ed00 	.word	0xe000ed00

0800711c <__NVIC_GetPriorityGrouping>:
{
 800711c:	b480      	push	{r7}
 800711e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007120:	4b04      	ldr	r3, [pc, #16]	; (8007134 <__NVIC_GetPriorityGrouping+0x18>)
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	0a1b      	lsrs	r3, r3, #8
 8007126:	f003 0307 	and.w	r3, r3, #7
}
 800712a:	4618      	mov	r0, r3
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr
 8007134:	e000ed00 	.word	0xe000ed00

08007138 <__NVIC_EnableIRQ>:
{
 8007138:	b480      	push	{r7}
 800713a:	b083      	sub	sp, #12
 800713c:	af00      	add	r7, sp, #0
 800713e:	4603      	mov	r3, r0
 8007140:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007146:	2b00      	cmp	r3, #0
 8007148:	db0b      	blt.n	8007162 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800714a:	79fb      	ldrb	r3, [r7, #7]
 800714c:	f003 021f 	and.w	r2, r3, #31
 8007150:	4907      	ldr	r1, [pc, #28]	; (8007170 <__NVIC_EnableIRQ+0x38>)
 8007152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007156:	095b      	lsrs	r3, r3, #5
 8007158:	2001      	movs	r0, #1
 800715a:	fa00 f202 	lsl.w	r2, r0, r2
 800715e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007162:	bf00      	nop
 8007164:	370c      	adds	r7, #12
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr
 800716e:	bf00      	nop
 8007170:	e000e100 	.word	0xe000e100

08007174 <__NVIC_SetPriority>:
{
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
 800717a:	4603      	mov	r3, r0
 800717c:	6039      	str	r1, [r7, #0]
 800717e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007184:	2b00      	cmp	r3, #0
 8007186:	db0a      	blt.n	800719e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	b2da      	uxtb	r2, r3
 800718c:	490c      	ldr	r1, [pc, #48]	; (80071c0 <__NVIC_SetPriority+0x4c>)
 800718e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007192:	0112      	lsls	r2, r2, #4
 8007194:	b2d2      	uxtb	r2, r2
 8007196:	440b      	add	r3, r1
 8007198:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800719c:	e00a      	b.n	80071b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	b2da      	uxtb	r2, r3
 80071a2:	4908      	ldr	r1, [pc, #32]	; (80071c4 <__NVIC_SetPriority+0x50>)
 80071a4:	79fb      	ldrb	r3, [r7, #7]
 80071a6:	f003 030f 	and.w	r3, r3, #15
 80071aa:	3b04      	subs	r3, #4
 80071ac:	0112      	lsls	r2, r2, #4
 80071ae:	b2d2      	uxtb	r2, r2
 80071b0:	440b      	add	r3, r1
 80071b2:	761a      	strb	r2, [r3, #24]
}
 80071b4:	bf00      	nop
 80071b6:	370c      	adds	r7, #12
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr
 80071c0:	e000e100 	.word	0xe000e100
 80071c4:	e000ed00 	.word	0xe000ed00

080071c8 <NVIC_EncodePriority>:
{
 80071c8:	b480      	push	{r7}
 80071ca:	b089      	sub	sp, #36	; 0x24
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	60b9      	str	r1, [r7, #8]
 80071d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f003 0307 	and.w	r3, r3, #7
 80071da:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80071dc:	69fb      	ldr	r3, [r7, #28]
 80071de:	f1c3 0307 	rsb	r3, r3, #7
 80071e2:	2b04      	cmp	r3, #4
 80071e4:	bf28      	it	cs
 80071e6:	2304      	movcs	r3, #4
 80071e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80071ea:	69fb      	ldr	r3, [r7, #28]
 80071ec:	3304      	adds	r3, #4
 80071ee:	2b06      	cmp	r3, #6
 80071f0:	d902      	bls.n	80071f8 <NVIC_EncodePriority+0x30>
 80071f2:	69fb      	ldr	r3, [r7, #28]
 80071f4:	3b03      	subs	r3, #3
 80071f6:	e000      	b.n	80071fa <NVIC_EncodePriority+0x32>
 80071f8:	2300      	movs	r3, #0
 80071fa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80071fc:	f04f 32ff 	mov.w	r2, #4294967295
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	fa02 f303 	lsl.w	r3, r2, r3
 8007206:	43da      	mvns	r2, r3
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	401a      	ands	r2, r3
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007210:	f04f 31ff 	mov.w	r1, #4294967295
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	fa01 f303 	lsl.w	r3, r1, r3
 800721a:	43d9      	mvns	r1, r3
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007220:	4313      	orrs	r3, r2
}
 8007222:	4618      	mov	r0, r3
 8007224:	3724      	adds	r7, #36	; 0x24
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr
	...

08007230 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b082      	sub	sp, #8
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	3b01      	subs	r3, #1
 800723c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007240:	d301      	bcc.n	8007246 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007242:	2301      	movs	r3, #1
 8007244:	e00f      	b.n	8007266 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007246:	4a0a      	ldr	r2, [pc, #40]	; (8007270 <SysTick_Config+0x40>)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	3b01      	subs	r3, #1
 800724c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800724e:	210f      	movs	r1, #15
 8007250:	f04f 30ff 	mov.w	r0, #4294967295
 8007254:	f7ff ff8e 	bl	8007174 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007258:	4b05      	ldr	r3, [pc, #20]	; (8007270 <SysTick_Config+0x40>)
 800725a:	2200      	movs	r2, #0
 800725c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800725e:	4b04      	ldr	r3, [pc, #16]	; (8007270 <SysTick_Config+0x40>)
 8007260:	2207      	movs	r2, #7
 8007262:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007264:	2300      	movs	r3, #0
}
 8007266:	4618      	mov	r0, r3
 8007268:	3708      	adds	r7, #8
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
 800726e:	bf00      	nop
 8007270:	e000e010 	.word	0xe000e010

08007274 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b082      	sub	sp, #8
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f7ff ff29 	bl	80070d4 <__NVIC_SetPriorityGrouping>
}
 8007282:	bf00      	nop
 8007284:	3708      	adds	r7, #8
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}

0800728a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800728a:	b580      	push	{r7, lr}
 800728c:	b086      	sub	sp, #24
 800728e:	af00      	add	r7, sp, #0
 8007290:	4603      	mov	r3, r0
 8007292:	60b9      	str	r1, [r7, #8]
 8007294:	607a      	str	r2, [r7, #4]
 8007296:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007298:	2300      	movs	r3, #0
 800729a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800729c:	f7ff ff3e 	bl	800711c <__NVIC_GetPriorityGrouping>
 80072a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	68b9      	ldr	r1, [r7, #8]
 80072a6:	6978      	ldr	r0, [r7, #20]
 80072a8:	f7ff ff8e 	bl	80071c8 <NVIC_EncodePriority>
 80072ac:	4602      	mov	r2, r0
 80072ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80072b2:	4611      	mov	r1, r2
 80072b4:	4618      	mov	r0, r3
 80072b6:	f7ff ff5d 	bl	8007174 <__NVIC_SetPriority>
}
 80072ba:	bf00      	nop
 80072bc:	3718      	adds	r7, #24
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}

080072c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80072c2:	b580      	push	{r7, lr}
 80072c4:	b082      	sub	sp, #8
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	4603      	mov	r3, r0
 80072ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80072cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072d0:	4618      	mov	r0, r3
 80072d2:	f7ff ff31 	bl	8007138 <__NVIC_EnableIRQ>
}
 80072d6:	bf00      	nop
 80072d8:	3708      	adds	r7, #8
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}

080072de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80072de:	b580      	push	{r7, lr}
 80072e0:	b082      	sub	sp, #8
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f7ff ffa2 	bl	8007230 <SysTick_Config>
 80072ec:	4603      	mov	r3, r0
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3708      	adds	r7, #8
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
	...

080072f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b086      	sub	sp, #24
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007300:	2300      	movs	r3, #0
 8007302:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007304:	f7ff fab4 	bl	8006870 <HAL_GetTick>
 8007308:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d101      	bne.n	8007314 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	e099      	b.n	8007448 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2202      	movs	r2, #2
 8007318:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2200      	movs	r2, #0
 8007320:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f022 0201 	bic.w	r2, r2, #1
 8007332:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007334:	e00f      	b.n	8007356 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007336:	f7ff fa9b 	bl	8006870 <HAL_GetTick>
 800733a:	4602      	mov	r2, r0
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	1ad3      	subs	r3, r2, r3
 8007340:	2b05      	cmp	r3, #5
 8007342:	d908      	bls.n	8007356 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2220      	movs	r2, #32
 8007348:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2203      	movs	r2, #3
 800734e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007352:	2303      	movs	r3, #3
 8007354:	e078      	b.n	8007448 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f003 0301 	and.w	r3, r3, #1
 8007360:	2b00      	cmp	r3, #0
 8007362:	d1e8      	bne.n	8007336 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800736c:	697a      	ldr	r2, [r7, #20]
 800736e:	4b38      	ldr	r3, [pc, #224]	; (8007450 <HAL_DMA_Init+0x158>)
 8007370:	4013      	ands	r3, r2
 8007372:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	685a      	ldr	r2, [r3, #4]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007382:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	691b      	ldr	r3, [r3, #16]
 8007388:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800738e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	699b      	ldr	r3, [r3, #24]
 8007394:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800739a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6a1b      	ldr	r3, [r3, #32]
 80073a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80073a2:	697a      	ldr	r2, [r7, #20]
 80073a4:	4313      	orrs	r3, r2
 80073a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ac:	2b04      	cmp	r3, #4
 80073ae:	d107      	bne.n	80073c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073b8:	4313      	orrs	r3, r2
 80073ba:	697a      	ldr	r2, [r7, #20]
 80073bc:	4313      	orrs	r3, r2
 80073be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	697a      	ldr	r2, [r7, #20]
 80073c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	695b      	ldr	r3, [r3, #20]
 80073ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	f023 0307 	bic.w	r3, r3, #7
 80073d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073dc:	697a      	ldr	r2, [r7, #20]
 80073de:	4313      	orrs	r3, r2
 80073e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e6:	2b04      	cmp	r3, #4
 80073e8:	d117      	bne.n	800741a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ee:	697a      	ldr	r2, [r7, #20]
 80073f0:	4313      	orrs	r3, r2
 80073f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d00e      	beq.n	800741a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 fb0d 	bl	8007a1c <DMA_CheckFifoParam>
 8007402:	4603      	mov	r3, r0
 8007404:	2b00      	cmp	r3, #0
 8007406:	d008      	beq.n	800741a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2240      	movs	r2, #64	; 0x40
 800740c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2201      	movs	r2, #1
 8007412:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007416:	2301      	movs	r3, #1
 8007418:	e016      	b.n	8007448 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	697a      	ldr	r2, [r7, #20]
 8007420:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 fac4 	bl	80079b0 <DMA_CalcBaseAndBitshift>
 8007428:	4603      	mov	r3, r0
 800742a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007430:	223f      	movs	r2, #63	; 0x3f
 8007432:	409a      	lsls	r2, r3
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2201      	movs	r2, #1
 8007442:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007446:	2300      	movs	r3, #0
}
 8007448:	4618      	mov	r0, r3
 800744a:	3718      	adds	r7, #24
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}
 8007450:	f010803f 	.word	0xf010803f

08007454 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b086      	sub	sp, #24
 8007458:	af00      	add	r7, sp, #0
 800745a:	60f8      	str	r0, [r7, #12]
 800745c:	60b9      	str	r1, [r7, #8]
 800745e:	607a      	str	r2, [r7, #4]
 8007460:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007462:	2300      	movs	r3, #0
 8007464:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800746a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007472:	2b01      	cmp	r3, #1
 8007474:	d101      	bne.n	800747a <HAL_DMA_Start_IT+0x26>
 8007476:	2302      	movs	r3, #2
 8007478:	e040      	b.n	80074fc <HAL_DMA_Start_IT+0xa8>
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2201      	movs	r2, #1
 800747e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007488:	b2db      	uxtb	r3, r3
 800748a:	2b01      	cmp	r3, #1
 800748c:	d12f      	bne.n	80074ee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2202      	movs	r2, #2
 8007492:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2200      	movs	r2, #0
 800749a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	68b9      	ldr	r1, [r7, #8]
 80074a2:	68f8      	ldr	r0, [r7, #12]
 80074a4:	f000 fa56 	bl	8007954 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074ac:	223f      	movs	r2, #63	; 0x3f
 80074ae:	409a      	lsls	r2, r3
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f042 0216 	orr.w	r2, r2, #22
 80074c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d007      	beq.n	80074dc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f042 0208 	orr.w	r2, r2, #8
 80074da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	681a      	ldr	r2, [r3, #0]
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f042 0201 	orr.w	r2, r2, #1
 80074ea:	601a      	str	r2, [r3, #0]
 80074ec:	e005      	b.n	80074fa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2200      	movs	r2, #0
 80074f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80074f6:	2302      	movs	r3, #2
 80074f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80074fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3718      	adds	r7, #24
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007510:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007512:	f7ff f9ad 	bl	8006870 <HAL_GetTick>
 8007516:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800751e:	b2db      	uxtb	r3, r3
 8007520:	2b02      	cmp	r3, #2
 8007522:	d008      	beq.n	8007536 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2280      	movs	r2, #128	; 0x80
 8007528:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007532:	2301      	movs	r3, #1
 8007534:	e052      	b.n	80075dc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f022 0216 	bic.w	r2, r2, #22
 8007544:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	695a      	ldr	r2, [r3, #20]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007554:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800755a:	2b00      	cmp	r3, #0
 800755c:	d103      	bne.n	8007566 <HAL_DMA_Abort+0x62>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007562:	2b00      	cmp	r3, #0
 8007564:	d007      	beq.n	8007576 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f022 0208 	bic.w	r2, r2, #8
 8007574:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f022 0201 	bic.w	r2, r2, #1
 8007584:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007586:	e013      	b.n	80075b0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007588:	f7ff f972 	bl	8006870 <HAL_GetTick>
 800758c:	4602      	mov	r2, r0
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	1ad3      	subs	r3, r2, r3
 8007592:	2b05      	cmp	r3, #5
 8007594:	d90c      	bls.n	80075b0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2220      	movs	r2, #32
 800759a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2203      	movs	r2, #3
 80075a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80075ac:	2303      	movs	r3, #3
 80075ae:	e015      	b.n	80075dc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f003 0301 	and.w	r3, r3, #1
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d1e4      	bne.n	8007588 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075c2:	223f      	movs	r2, #63	; 0x3f
 80075c4:	409a      	lsls	r2, r3
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2201      	movs	r2, #1
 80075ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80075da:	2300      	movs	r3, #0
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3710      	adds	r7, #16
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b083      	sub	sp, #12
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	2b02      	cmp	r3, #2
 80075f6:	d004      	beq.n	8007602 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2280      	movs	r2, #128	; 0x80
 80075fc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80075fe:	2301      	movs	r3, #1
 8007600:	e00c      	b.n	800761c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2205      	movs	r2, #5
 8007606:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	681a      	ldr	r2, [r3, #0]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f022 0201 	bic.w	r2, r2, #1
 8007618:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800761a:	2300      	movs	r3, #0
}
 800761c:	4618      	mov	r0, r3
 800761e:	370c      	adds	r7, #12
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr

08007628 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b086      	sub	sp, #24
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007630:	2300      	movs	r3, #0
 8007632:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007634:	4b8e      	ldr	r3, [pc, #568]	; (8007870 <HAL_DMA_IRQHandler+0x248>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a8e      	ldr	r2, [pc, #568]	; (8007874 <HAL_DMA_IRQHandler+0x24c>)
 800763a:	fba2 2303 	umull	r2, r3, r2, r3
 800763e:	0a9b      	lsrs	r3, r3, #10
 8007640:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007646:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007652:	2208      	movs	r2, #8
 8007654:	409a      	lsls	r2, r3
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	4013      	ands	r3, r2
 800765a:	2b00      	cmp	r3, #0
 800765c:	d01a      	beq.n	8007694 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f003 0304 	and.w	r3, r3, #4
 8007668:	2b00      	cmp	r3, #0
 800766a:	d013      	beq.n	8007694 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	681a      	ldr	r2, [r3, #0]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f022 0204 	bic.w	r2, r2, #4
 800767a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007680:	2208      	movs	r2, #8
 8007682:	409a      	lsls	r2, r3
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800768c:	f043 0201 	orr.w	r2, r3, #1
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007698:	2201      	movs	r2, #1
 800769a:	409a      	lsls	r2, r3
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	4013      	ands	r3, r2
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d012      	beq.n	80076ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	695b      	ldr	r3, [r3, #20]
 80076aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d00b      	beq.n	80076ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076b6:	2201      	movs	r2, #1
 80076b8:	409a      	lsls	r2, r3
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076c2:	f043 0202 	orr.w	r2, r3, #2
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076ce:	2204      	movs	r2, #4
 80076d0:	409a      	lsls	r2, r3
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	4013      	ands	r3, r2
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d012      	beq.n	8007700 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f003 0302 	and.w	r3, r3, #2
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d00b      	beq.n	8007700 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076ec:	2204      	movs	r2, #4
 80076ee:	409a      	lsls	r2, r3
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076f8:	f043 0204 	orr.w	r2, r3, #4
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007704:	2210      	movs	r2, #16
 8007706:	409a      	lsls	r2, r3
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	4013      	ands	r3, r2
 800770c:	2b00      	cmp	r3, #0
 800770e:	d043      	beq.n	8007798 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f003 0308 	and.w	r3, r3, #8
 800771a:	2b00      	cmp	r3, #0
 800771c:	d03c      	beq.n	8007798 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007722:	2210      	movs	r2, #16
 8007724:	409a      	lsls	r2, r3
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007734:	2b00      	cmp	r3, #0
 8007736:	d018      	beq.n	800776a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007742:	2b00      	cmp	r3, #0
 8007744:	d108      	bne.n	8007758 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800774a:	2b00      	cmp	r3, #0
 800774c:	d024      	beq.n	8007798 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	4798      	blx	r3
 8007756:	e01f      	b.n	8007798 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800775c:	2b00      	cmp	r3, #0
 800775e:	d01b      	beq.n	8007798 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	4798      	blx	r3
 8007768:	e016      	b.n	8007798 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007774:	2b00      	cmp	r3, #0
 8007776:	d107      	bne.n	8007788 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f022 0208 	bic.w	r2, r2, #8
 8007786:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800778c:	2b00      	cmp	r3, #0
 800778e:	d003      	beq.n	8007798 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800779c:	2220      	movs	r2, #32
 800779e:	409a      	lsls	r2, r3
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	4013      	ands	r3, r2
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	f000 808f 	beq.w	80078c8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f003 0310 	and.w	r3, r3, #16
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	f000 8087 	beq.w	80078c8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077be:	2220      	movs	r2, #32
 80077c0:	409a      	lsls	r2, r3
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	2b05      	cmp	r3, #5
 80077d0:	d136      	bne.n	8007840 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f022 0216 	bic.w	r2, r2, #22
 80077e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	695a      	ldr	r2, [r3, #20]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80077f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d103      	bne.n	8007802 <HAL_DMA_IRQHandler+0x1da>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d007      	beq.n	8007812 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f022 0208 	bic.w	r2, r2, #8
 8007810:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007816:	223f      	movs	r2, #63	; 0x3f
 8007818:	409a      	lsls	r2, r3
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2201      	movs	r2, #1
 8007822:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007832:	2b00      	cmp	r3, #0
 8007834:	d07e      	beq.n	8007934 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	4798      	blx	r3
        }
        return;
 800783e:	e079      	b.n	8007934 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800784a:	2b00      	cmp	r3, #0
 800784c:	d01d      	beq.n	800788a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007858:	2b00      	cmp	r3, #0
 800785a:	d10d      	bne.n	8007878 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007860:	2b00      	cmp	r3, #0
 8007862:	d031      	beq.n	80078c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	4798      	blx	r3
 800786c:	e02c      	b.n	80078c8 <HAL_DMA_IRQHandler+0x2a0>
 800786e:	bf00      	nop
 8007870:	20000014 	.word	0x20000014
 8007874:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800787c:	2b00      	cmp	r3, #0
 800787e:	d023      	beq.n	80078c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	4798      	blx	r3
 8007888:	e01e      	b.n	80078c8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007894:	2b00      	cmp	r3, #0
 8007896:	d10f      	bne.n	80078b8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f022 0210 	bic.w	r2, r2, #16
 80078a6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2201      	movs	r2, #1
 80078ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d003      	beq.n	80078c8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d032      	beq.n	8007936 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078d4:	f003 0301 	and.w	r3, r3, #1
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d022      	beq.n	8007922 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2205      	movs	r2, #5
 80078e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f022 0201 	bic.w	r2, r2, #1
 80078f2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	3301      	adds	r3, #1
 80078f8:	60bb      	str	r3, [r7, #8]
 80078fa:	697a      	ldr	r2, [r7, #20]
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d307      	bcc.n	8007910 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f003 0301 	and.w	r3, r3, #1
 800790a:	2b00      	cmp	r3, #0
 800790c:	d1f2      	bne.n	80078f4 <HAL_DMA_IRQHandler+0x2cc>
 800790e:	e000      	b.n	8007912 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007910:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2201      	movs	r2, #1
 8007916:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2200      	movs	r2, #0
 800791e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007926:	2b00      	cmp	r3, #0
 8007928:	d005      	beq.n	8007936 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	4798      	blx	r3
 8007932:	e000      	b.n	8007936 <HAL_DMA_IRQHandler+0x30e>
        return;
 8007934:	bf00      	nop
    }
  }
}
 8007936:	3718      	adds	r7, #24
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}

0800793c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8007948:	4618      	mov	r0, r3
 800794a:	370c      	adds	r7, #12
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr

08007954 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007954:	b480      	push	{r7}
 8007956:	b085      	sub	sp, #20
 8007958:	af00      	add	r7, sp, #0
 800795a:	60f8      	str	r0, [r7, #12]
 800795c:	60b9      	str	r1, [r7, #8]
 800795e:	607a      	str	r2, [r7, #4]
 8007960:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007970:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	683a      	ldr	r2, [r7, #0]
 8007978:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	2b40      	cmp	r3, #64	; 0x40
 8007980:	d108      	bne.n	8007994 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	68ba      	ldr	r2, [r7, #8]
 8007990:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007992:	e007      	b.n	80079a4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	68ba      	ldr	r2, [r7, #8]
 800799a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	60da      	str	r2, [r3, #12]
}
 80079a4:	bf00      	nop
 80079a6:	3714      	adds	r7, #20
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr

080079b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b085      	sub	sp, #20
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	3b10      	subs	r3, #16
 80079c0:	4a14      	ldr	r2, [pc, #80]	; (8007a14 <DMA_CalcBaseAndBitshift+0x64>)
 80079c2:	fba2 2303 	umull	r2, r3, r2, r3
 80079c6:	091b      	lsrs	r3, r3, #4
 80079c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80079ca:	4a13      	ldr	r2, [pc, #76]	; (8007a18 <DMA_CalcBaseAndBitshift+0x68>)
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	4413      	add	r3, r2
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	461a      	mov	r2, r3
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2b03      	cmp	r3, #3
 80079dc:	d909      	bls.n	80079f2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80079e6:	f023 0303 	bic.w	r3, r3, #3
 80079ea:	1d1a      	adds	r2, r3, #4
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	659a      	str	r2, [r3, #88]	; 0x58
 80079f0:	e007      	b.n	8007a02 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80079fa:	f023 0303 	bic.w	r3, r3, #3
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3714      	adds	r7, #20
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr
 8007a12:	bf00      	nop
 8007a14:	aaaaaaab 	.word	0xaaaaaaab
 8007a18:	08018e6c 	.word	0x08018e6c

08007a1c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b085      	sub	sp, #20
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a24:	2300      	movs	r3, #0
 8007a26:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a2c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	699b      	ldr	r3, [r3, #24]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d11f      	bne.n	8007a76 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	2b03      	cmp	r3, #3
 8007a3a:	d856      	bhi.n	8007aea <DMA_CheckFifoParam+0xce>
 8007a3c:	a201      	add	r2, pc, #4	; (adr r2, 8007a44 <DMA_CheckFifoParam+0x28>)
 8007a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a42:	bf00      	nop
 8007a44:	08007a55 	.word	0x08007a55
 8007a48:	08007a67 	.word	0x08007a67
 8007a4c:	08007a55 	.word	0x08007a55
 8007a50:	08007aeb 	.word	0x08007aeb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d046      	beq.n	8007aee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a64:	e043      	b.n	8007aee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a6a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007a6e:	d140      	bne.n	8007af2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007a70:	2301      	movs	r3, #1
 8007a72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a74:	e03d      	b.n	8007af2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	699b      	ldr	r3, [r3, #24]
 8007a7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a7e:	d121      	bne.n	8007ac4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	2b03      	cmp	r3, #3
 8007a84:	d837      	bhi.n	8007af6 <DMA_CheckFifoParam+0xda>
 8007a86:	a201      	add	r2, pc, #4	; (adr r2, 8007a8c <DMA_CheckFifoParam+0x70>)
 8007a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a8c:	08007a9d 	.word	0x08007a9d
 8007a90:	08007aa3 	.word	0x08007aa3
 8007a94:	08007a9d 	.word	0x08007a9d
 8007a98:	08007ab5 	.word	0x08007ab5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	73fb      	strb	r3, [r7, #15]
      break;
 8007aa0:	e030      	b.n	8007b04 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aa6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d025      	beq.n	8007afa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007ab2:	e022      	b.n	8007afa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007abc:	d11f      	bne.n	8007afe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007ac2:	e01c      	b.n	8007afe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	2b02      	cmp	r3, #2
 8007ac8:	d903      	bls.n	8007ad2 <DMA_CheckFifoParam+0xb6>
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	2b03      	cmp	r3, #3
 8007ace:	d003      	beq.n	8007ad8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007ad0:	e018      	b.n	8007b04 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	73fb      	strb	r3, [r7, #15]
      break;
 8007ad6:	e015      	b.n	8007b04 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007adc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d00e      	beq.n	8007b02 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	73fb      	strb	r3, [r7, #15]
      break;
 8007ae8:	e00b      	b.n	8007b02 <DMA_CheckFifoParam+0xe6>
      break;
 8007aea:	bf00      	nop
 8007aec:	e00a      	b.n	8007b04 <DMA_CheckFifoParam+0xe8>
      break;
 8007aee:	bf00      	nop
 8007af0:	e008      	b.n	8007b04 <DMA_CheckFifoParam+0xe8>
      break;
 8007af2:	bf00      	nop
 8007af4:	e006      	b.n	8007b04 <DMA_CheckFifoParam+0xe8>
      break;
 8007af6:	bf00      	nop
 8007af8:	e004      	b.n	8007b04 <DMA_CheckFifoParam+0xe8>
      break;
 8007afa:	bf00      	nop
 8007afc:	e002      	b.n	8007b04 <DMA_CheckFifoParam+0xe8>
      break;   
 8007afe:	bf00      	nop
 8007b00:	e000      	b.n	8007b04 <DMA_CheckFifoParam+0xe8>
      break;
 8007b02:	bf00      	nop
    }
  } 
  
  return status; 
 8007b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3714      	adds	r7, #20
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr
 8007b12:	bf00      	nop

08007b14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b089      	sub	sp, #36	; 0x24
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007b22:	2300      	movs	r3, #0
 8007b24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007b26:	2300      	movs	r3, #0
 8007b28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	61fb      	str	r3, [r7, #28]
 8007b2e:	e159      	b.n	8007de4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007b30:	2201      	movs	r2, #1
 8007b32:	69fb      	ldr	r3, [r7, #28]
 8007b34:	fa02 f303 	lsl.w	r3, r2, r3
 8007b38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	697a      	ldr	r2, [r7, #20]
 8007b40:	4013      	ands	r3, r2
 8007b42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007b44:	693a      	ldr	r2, [r7, #16]
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	f040 8148 	bne.w	8007dde <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	f003 0303 	and.w	r3, r3, #3
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d005      	beq.n	8007b66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007b62:	2b02      	cmp	r3, #2
 8007b64:	d130      	bne.n	8007bc8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007b6c:	69fb      	ldr	r3, [r7, #28]
 8007b6e:	005b      	lsls	r3, r3, #1
 8007b70:	2203      	movs	r2, #3
 8007b72:	fa02 f303 	lsl.w	r3, r2, r3
 8007b76:	43db      	mvns	r3, r3
 8007b78:	69ba      	ldr	r2, [r7, #24]
 8007b7a:	4013      	ands	r3, r2
 8007b7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	68da      	ldr	r2, [r3, #12]
 8007b82:	69fb      	ldr	r3, [r7, #28]
 8007b84:	005b      	lsls	r3, r3, #1
 8007b86:	fa02 f303 	lsl.w	r3, r2, r3
 8007b8a:	69ba      	ldr	r2, [r7, #24]
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	69ba      	ldr	r2, [r7, #24]
 8007b94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	69fb      	ldr	r3, [r7, #28]
 8007ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ba4:	43db      	mvns	r3, r3
 8007ba6:	69ba      	ldr	r2, [r7, #24]
 8007ba8:	4013      	ands	r3, r2
 8007baa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	091b      	lsrs	r3, r3, #4
 8007bb2:	f003 0201 	and.w	r2, r3, #1
 8007bb6:	69fb      	ldr	r3, [r7, #28]
 8007bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8007bbc:	69ba      	ldr	r2, [r7, #24]
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	69ba      	ldr	r2, [r7, #24]
 8007bc6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	f003 0303 	and.w	r3, r3, #3
 8007bd0:	2b03      	cmp	r3, #3
 8007bd2:	d017      	beq.n	8007c04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	68db      	ldr	r3, [r3, #12]
 8007bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007bda:	69fb      	ldr	r3, [r7, #28]
 8007bdc:	005b      	lsls	r3, r3, #1
 8007bde:	2203      	movs	r2, #3
 8007be0:	fa02 f303 	lsl.w	r3, r2, r3
 8007be4:	43db      	mvns	r3, r3
 8007be6:	69ba      	ldr	r2, [r7, #24]
 8007be8:	4013      	ands	r3, r2
 8007bea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	689a      	ldr	r2, [r3, #8]
 8007bf0:	69fb      	ldr	r3, [r7, #28]
 8007bf2:	005b      	lsls	r3, r3, #1
 8007bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8007bf8:	69ba      	ldr	r2, [r7, #24]
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	69ba      	ldr	r2, [r7, #24]
 8007c02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	f003 0303 	and.w	r3, r3, #3
 8007c0c:	2b02      	cmp	r3, #2
 8007c0e:	d123      	bne.n	8007c58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007c10:	69fb      	ldr	r3, [r7, #28]
 8007c12:	08da      	lsrs	r2, r3, #3
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	3208      	adds	r2, #8
 8007c18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007c1e:	69fb      	ldr	r3, [r7, #28]
 8007c20:	f003 0307 	and.w	r3, r3, #7
 8007c24:	009b      	lsls	r3, r3, #2
 8007c26:	220f      	movs	r2, #15
 8007c28:	fa02 f303 	lsl.w	r3, r2, r3
 8007c2c:	43db      	mvns	r3, r3
 8007c2e:	69ba      	ldr	r2, [r7, #24]
 8007c30:	4013      	ands	r3, r2
 8007c32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	691a      	ldr	r2, [r3, #16]
 8007c38:	69fb      	ldr	r3, [r7, #28]
 8007c3a:	f003 0307 	and.w	r3, r3, #7
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	fa02 f303 	lsl.w	r3, r2, r3
 8007c44:	69ba      	ldr	r2, [r7, #24]
 8007c46:	4313      	orrs	r3, r2
 8007c48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007c4a:	69fb      	ldr	r3, [r7, #28]
 8007c4c:	08da      	lsrs	r2, r3, #3
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	3208      	adds	r2, #8
 8007c52:	69b9      	ldr	r1, [r7, #24]
 8007c54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007c5e:	69fb      	ldr	r3, [r7, #28]
 8007c60:	005b      	lsls	r3, r3, #1
 8007c62:	2203      	movs	r2, #3
 8007c64:	fa02 f303 	lsl.w	r3, r2, r3
 8007c68:	43db      	mvns	r3, r3
 8007c6a:	69ba      	ldr	r2, [r7, #24]
 8007c6c:	4013      	ands	r3, r2
 8007c6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	f003 0203 	and.w	r2, r3, #3
 8007c78:	69fb      	ldr	r3, [r7, #28]
 8007c7a:	005b      	lsls	r3, r3, #1
 8007c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c80:	69ba      	ldr	r2, [r7, #24]
 8007c82:	4313      	orrs	r3, r2
 8007c84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	69ba      	ldr	r2, [r7, #24]
 8007c8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	f000 80a2 	beq.w	8007dde <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	60fb      	str	r3, [r7, #12]
 8007c9e:	4b57      	ldr	r3, [pc, #348]	; (8007dfc <HAL_GPIO_Init+0x2e8>)
 8007ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ca2:	4a56      	ldr	r2, [pc, #344]	; (8007dfc <HAL_GPIO_Init+0x2e8>)
 8007ca4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007ca8:	6453      	str	r3, [r2, #68]	; 0x44
 8007caa:	4b54      	ldr	r3, [pc, #336]	; (8007dfc <HAL_GPIO_Init+0x2e8>)
 8007cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007cb2:	60fb      	str	r3, [r7, #12]
 8007cb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007cb6:	4a52      	ldr	r2, [pc, #328]	; (8007e00 <HAL_GPIO_Init+0x2ec>)
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	089b      	lsrs	r3, r3, #2
 8007cbc:	3302      	adds	r3, #2
 8007cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007cc4:	69fb      	ldr	r3, [r7, #28]
 8007cc6:	f003 0303 	and.w	r3, r3, #3
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	220f      	movs	r2, #15
 8007cce:	fa02 f303 	lsl.w	r3, r2, r3
 8007cd2:	43db      	mvns	r3, r3
 8007cd4:	69ba      	ldr	r2, [r7, #24]
 8007cd6:	4013      	ands	r3, r2
 8007cd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	4a49      	ldr	r2, [pc, #292]	; (8007e04 <HAL_GPIO_Init+0x2f0>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d019      	beq.n	8007d16 <HAL_GPIO_Init+0x202>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	4a48      	ldr	r2, [pc, #288]	; (8007e08 <HAL_GPIO_Init+0x2f4>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d013      	beq.n	8007d12 <HAL_GPIO_Init+0x1fe>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	4a47      	ldr	r2, [pc, #284]	; (8007e0c <HAL_GPIO_Init+0x2f8>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d00d      	beq.n	8007d0e <HAL_GPIO_Init+0x1fa>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	4a46      	ldr	r2, [pc, #280]	; (8007e10 <HAL_GPIO_Init+0x2fc>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d007      	beq.n	8007d0a <HAL_GPIO_Init+0x1f6>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	4a45      	ldr	r2, [pc, #276]	; (8007e14 <HAL_GPIO_Init+0x300>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d101      	bne.n	8007d06 <HAL_GPIO_Init+0x1f2>
 8007d02:	2304      	movs	r3, #4
 8007d04:	e008      	b.n	8007d18 <HAL_GPIO_Init+0x204>
 8007d06:	2307      	movs	r3, #7
 8007d08:	e006      	b.n	8007d18 <HAL_GPIO_Init+0x204>
 8007d0a:	2303      	movs	r3, #3
 8007d0c:	e004      	b.n	8007d18 <HAL_GPIO_Init+0x204>
 8007d0e:	2302      	movs	r3, #2
 8007d10:	e002      	b.n	8007d18 <HAL_GPIO_Init+0x204>
 8007d12:	2301      	movs	r3, #1
 8007d14:	e000      	b.n	8007d18 <HAL_GPIO_Init+0x204>
 8007d16:	2300      	movs	r3, #0
 8007d18:	69fa      	ldr	r2, [r7, #28]
 8007d1a:	f002 0203 	and.w	r2, r2, #3
 8007d1e:	0092      	lsls	r2, r2, #2
 8007d20:	4093      	lsls	r3, r2
 8007d22:	69ba      	ldr	r2, [r7, #24]
 8007d24:	4313      	orrs	r3, r2
 8007d26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007d28:	4935      	ldr	r1, [pc, #212]	; (8007e00 <HAL_GPIO_Init+0x2ec>)
 8007d2a:	69fb      	ldr	r3, [r7, #28]
 8007d2c:	089b      	lsrs	r3, r3, #2
 8007d2e:	3302      	adds	r3, #2
 8007d30:	69ba      	ldr	r2, [r7, #24]
 8007d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007d36:	4b38      	ldr	r3, [pc, #224]	; (8007e18 <HAL_GPIO_Init+0x304>)
 8007d38:	689b      	ldr	r3, [r3, #8]
 8007d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	43db      	mvns	r3, r3
 8007d40:	69ba      	ldr	r2, [r7, #24]
 8007d42:	4013      	ands	r3, r2
 8007d44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d003      	beq.n	8007d5a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8007d52:	69ba      	ldr	r2, [r7, #24]
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	4313      	orrs	r3, r2
 8007d58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007d5a:	4a2f      	ldr	r2, [pc, #188]	; (8007e18 <HAL_GPIO_Init+0x304>)
 8007d5c:	69bb      	ldr	r3, [r7, #24]
 8007d5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007d60:	4b2d      	ldr	r3, [pc, #180]	; (8007e18 <HAL_GPIO_Init+0x304>)
 8007d62:	68db      	ldr	r3, [r3, #12]
 8007d64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	43db      	mvns	r3, r3
 8007d6a:	69ba      	ldr	r2, [r7, #24]
 8007d6c:	4013      	ands	r3, r2
 8007d6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d003      	beq.n	8007d84 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8007d7c:	69ba      	ldr	r2, [r7, #24]
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	4313      	orrs	r3, r2
 8007d82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007d84:	4a24      	ldr	r2, [pc, #144]	; (8007e18 <HAL_GPIO_Init+0x304>)
 8007d86:	69bb      	ldr	r3, [r7, #24]
 8007d88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007d8a:	4b23      	ldr	r3, [pc, #140]	; (8007e18 <HAL_GPIO_Init+0x304>)
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	43db      	mvns	r3, r3
 8007d94:	69ba      	ldr	r2, [r7, #24]
 8007d96:	4013      	ands	r3, r2
 8007d98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d003      	beq.n	8007dae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8007da6:	69ba      	ldr	r2, [r7, #24]
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	4313      	orrs	r3, r2
 8007dac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007dae:	4a1a      	ldr	r2, [pc, #104]	; (8007e18 <HAL_GPIO_Init+0x304>)
 8007db0:	69bb      	ldr	r3, [r7, #24]
 8007db2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007db4:	4b18      	ldr	r3, [pc, #96]	; (8007e18 <HAL_GPIO_Init+0x304>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	43db      	mvns	r3, r3
 8007dbe:	69ba      	ldr	r2, [r7, #24]
 8007dc0:	4013      	ands	r3, r2
 8007dc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d003      	beq.n	8007dd8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8007dd0:	69ba      	ldr	r2, [r7, #24]
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007dd8:	4a0f      	ldr	r2, [pc, #60]	; (8007e18 <HAL_GPIO_Init+0x304>)
 8007dda:	69bb      	ldr	r3, [r7, #24]
 8007ddc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007dde:	69fb      	ldr	r3, [r7, #28]
 8007de0:	3301      	adds	r3, #1
 8007de2:	61fb      	str	r3, [r7, #28]
 8007de4:	69fb      	ldr	r3, [r7, #28]
 8007de6:	2b0f      	cmp	r3, #15
 8007de8:	f67f aea2 	bls.w	8007b30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007dec:	bf00      	nop
 8007dee:	bf00      	nop
 8007df0:	3724      	adds	r7, #36	; 0x24
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr
 8007dfa:	bf00      	nop
 8007dfc:	40023800 	.word	0x40023800
 8007e00:	40013800 	.word	0x40013800
 8007e04:	40020000 	.word	0x40020000
 8007e08:	40020400 	.word	0x40020400
 8007e0c:	40020800 	.word	0x40020800
 8007e10:	40020c00 	.word	0x40020c00
 8007e14:	40021000 	.word	0x40021000
 8007e18:	40013c00 	.word	0x40013c00

08007e1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b085      	sub	sp, #20
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	460b      	mov	r3, r1
 8007e26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	691a      	ldr	r2, [r3, #16]
 8007e2c:	887b      	ldrh	r3, [r7, #2]
 8007e2e:	4013      	ands	r3, r2
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d002      	beq.n	8007e3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007e34:	2301      	movs	r3, #1
 8007e36:	73fb      	strb	r3, [r7, #15]
 8007e38:	e001      	b.n	8007e3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3714      	adds	r7, #20
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	460b      	mov	r3, r1
 8007e56:	807b      	strh	r3, [r7, #2]
 8007e58:	4613      	mov	r3, r2
 8007e5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007e5c:	787b      	ldrb	r3, [r7, #1]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d003      	beq.n	8007e6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007e62:	887a      	ldrh	r2, [r7, #2]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007e68:	e003      	b.n	8007e72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007e6a:	887b      	ldrh	r3, [r7, #2]
 8007e6c:	041a      	lsls	r2, r3, #16
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	619a      	str	r2, [r3, #24]
}
 8007e72:	bf00      	nop
 8007e74:	370c      	adds	r7, #12
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr
	...

08007e80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b082      	sub	sp, #8
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	4603      	mov	r3, r0
 8007e88:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007e8a:	4b08      	ldr	r3, [pc, #32]	; (8007eac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007e8c:	695a      	ldr	r2, [r3, #20]
 8007e8e:	88fb      	ldrh	r3, [r7, #6]
 8007e90:	4013      	ands	r3, r2
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d006      	beq.n	8007ea4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007e96:	4a05      	ldr	r2, [pc, #20]	; (8007eac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007e98:	88fb      	ldrh	r3, [r7, #6]
 8007e9a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007e9c:	88fb      	ldrh	r3, [r7, #6]
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f7fa fd92 	bl	80029c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8007ea4:	bf00      	nop
 8007ea6:	3708      	adds	r7, #8
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}
 8007eac:	40013c00 	.word	0x40013c00

08007eb0 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b084      	sub	sp, #16
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d101      	bne.n	8007ec2 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	e034      	b.n	8007f2c <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8007eca:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f245 5255 	movw	r2, #21845	; 0x5555
 8007ed4:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	687a      	ldr	r2, [r7, #4]
 8007edc:	6852      	ldr	r2, [r2, #4]
 8007ede:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	687a      	ldr	r2, [r7, #4]
 8007ee6:	6892      	ldr	r2, [r2, #8]
 8007ee8:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8007eea:	f7fe fcc1 	bl	8006870 <HAL_GetTick>
 8007eee:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8007ef0:	e00f      	b.n	8007f12 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8007ef2:	f7fe fcbd 	bl	8006870 <HAL_GetTick>
 8007ef6:	4602      	mov	r2, r0
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	1ad3      	subs	r3, r2, r3
 8007efc:	2b31      	cmp	r3, #49	; 0x31
 8007efe:	d908      	bls.n	8007f12 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	68db      	ldr	r3, [r3, #12]
 8007f06:	f003 0303 	and.w	r3, r3, #3
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d001      	beq.n	8007f12 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8007f0e:	2303      	movs	r3, #3
 8007f10:	e00c      	b.n	8007f2c <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	68db      	ldr	r3, [r3, #12]
 8007f18:	f003 0303 	and.w	r3, r3, #3
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d1e8      	bne.n	8007ef2 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8007f28:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007f2a:	2300      	movs	r3, #0
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3710      	adds	r7, #16
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b083      	sub	sp, #12
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8007f44:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007f46:	2300      	movs	r3, #0
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	370c      	adds	r7, #12
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr

08007f54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b086      	sub	sp, #24
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d101      	bne.n	8007f66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007f62:	2301      	movs	r3, #1
 8007f64:	e267      	b.n	8008436 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f003 0301 	and.w	r3, r3, #1
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d075      	beq.n	800805e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007f72:	4b88      	ldr	r3, [pc, #544]	; (8008194 <HAL_RCC_OscConfig+0x240>)
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	f003 030c 	and.w	r3, r3, #12
 8007f7a:	2b04      	cmp	r3, #4
 8007f7c:	d00c      	beq.n	8007f98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007f7e:	4b85      	ldr	r3, [pc, #532]	; (8008194 <HAL_RCC_OscConfig+0x240>)
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007f86:	2b08      	cmp	r3, #8
 8007f88:	d112      	bne.n	8007fb0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007f8a:	4b82      	ldr	r3, [pc, #520]	; (8008194 <HAL_RCC_OscConfig+0x240>)
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f96:	d10b      	bne.n	8007fb0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f98:	4b7e      	ldr	r3, [pc, #504]	; (8008194 <HAL_RCC_OscConfig+0x240>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d05b      	beq.n	800805c <HAL_RCC_OscConfig+0x108>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d157      	bne.n	800805c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007fac:	2301      	movs	r3, #1
 8007fae:	e242      	b.n	8008436 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fb8:	d106      	bne.n	8007fc8 <HAL_RCC_OscConfig+0x74>
 8007fba:	4b76      	ldr	r3, [pc, #472]	; (8008194 <HAL_RCC_OscConfig+0x240>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a75      	ldr	r2, [pc, #468]	; (8008194 <HAL_RCC_OscConfig+0x240>)
 8007fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fc4:	6013      	str	r3, [r2, #0]
 8007fc6:	e01d      	b.n	8008004 <HAL_RCC_OscConfig+0xb0>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007fd0:	d10c      	bne.n	8007fec <HAL_RCC_OscConfig+0x98>
 8007fd2:	4b70      	ldr	r3, [pc, #448]	; (8008194 <HAL_RCC_OscConfig+0x240>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a6f      	ldr	r2, [pc, #444]	; (8008194 <HAL_RCC_OscConfig+0x240>)
 8007fd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007fdc:	6013      	str	r3, [r2, #0]
 8007fde:	4b6d      	ldr	r3, [pc, #436]	; (8008194 <HAL_RCC_OscConfig+0x240>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a6c      	ldr	r2, [pc, #432]	; (8008194 <HAL_RCC_OscConfig+0x240>)
 8007fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fe8:	6013      	str	r3, [r2, #0]
 8007fea:	e00b      	b.n	8008004 <HAL_RCC_OscConfig+0xb0>
 8007fec:	4b69      	ldr	r3, [pc, #420]	; (8008194 <HAL_RCC_OscConfig+0x240>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a68      	ldr	r2, [pc, #416]	; (8008194 <HAL_RCC_OscConfig+0x240>)
 8007ff2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ff6:	6013      	str	r3, [r2, #0]
 8007ff8:	4b66      	ldr	r3, [pc, #408]	; (8008194 <HAL_RCC_OscConfig+0x240>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a65      	ldr	r2, [pc, #404]	; (8008194 <HAL_RCC_OscConfig+0x240>)
 8007ffe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008002:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d013      	beq.n	8008034 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800800c:	f7fe fc30 	bl	8006870 <HAL_GetTick>
 8008010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008012:	e008      	b.n	8008026 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008014:	f7fe fc2c 	bl	8006870 <HAL_GetTick>
 8008018:	4602      	mov	r2, r0
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	1ad3      	subs	r3, r2, r3
 800801e:	2b64      	cmp	r3, #100	; 0x64
 8008020:	d901      	bls.n	8008026 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008022:	2303      	movs	r3, #3
 8008024:	e207      	b.n	8008436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008026:	4b5b      	ldr	r3, [pc, #364]	; (8008194 <HAL_RCC_OscConfig+0x240>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800802e:	2b00      	cmp	r3, #0
 8008030:	d0f0      	beq.n	8008014 <HAL_RCC_OscConfig+0xc0>
 8008032:	e014      	b.n	800805e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008034:	f7fe fc1c 	bl	8006870 <HAL_GetTick>
 8008038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800803a:	e008      	b.n	800804e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800803c:	f7fe fc18 	bl	8006870 <HAL_GetTick>
 8008040:	4602      	mov	r2, r0
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	1ad3      	subs	r3, r2, r3
 8008046:	2b64      	cmp	r3, #100	; 0x64
 8008048:	d901      	bls.n	800804e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800804a:	2303      	movs	r3, #3
 800804c:	e1f3      	b.n	8008436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800804e:	4b51      	ldr	r3, [pc, #324]	; (8008194 <HAL_RCC_OscConfig+0x240>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008056:	2b00      	cmp	r3, #0
 8008058:	d1f0      	bne.n	800803c <HAL_RCC_OscConfig+0xe8>
 800805a:	e000      	b.n	800805e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800805c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f003 0302 	and.w	r3, r3, #2
 8008066:	2b00      	cmp	r3, #0
 8008068:	d063      	beq.n	8008132 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800806a:	4b4a      	ldr	r3, [pc, #296]	; (8008194 <HAL_RCC_OscConfig+0x240>)
 800806c:	689b      	ldr	r3, [r3, #8]
 800806e:	f003 030c 	and.w	r3, r3, #12
 8008072:	2b00      	cmp	r3, #0
 8008074:	d00b      	beq.n	800808e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008076:	4b47      	ldr	r3, [pc, #284]	; (8008194 <HAL_RCC_OscConfig+0x240>)
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800807e:	2b08      	cmp	r3, #8
 8008080:	d11c      	bne.n	80080bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008082:	4b44      	ldr	r3, [pc, #272]	; (8008194 <HAL_RCC_OscConfig+0x240>)
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800808a:	2b00      	cmp	r3, #0
 800808c:	d116      	bne.n	80080bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800808e:	4b41      	ldr	r3, [pc, #260]	; (8008194 <HAL_RCC_OscConfig+0x240>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f003 0302 	and.w	r3, r3, #2
 8008096:	2b00      	cmp	r3, #0
 8008098:	d005      	beq.n	80080a6 <HAL_RCC_OscConfig+0x152>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	68db      	ldr	r3, [r3, #12]
 800809e:	2b01      	cmp	r3, #1
 80080a0:	d001      	beq.n	80080a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	e1c7      	b.n	8008436 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080a6:	4b3b      	ldr	r3, [pc, #236]	; (8008194 <HAL_RCC_OscConfig+0x240>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	691b      	ldr	r3, [r3, #16]
 80080b2:	00db      	lsls	r3, r3, #3
 80080b4:	4937      	ldr	r1, [pc, #220]	; (8008194 <HAL_RCC_OscConfig+0x240>)
 80080b6:	4313      	orrs	r3, r2
 80080b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80080ba:	e03a      	b.n	8008132 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	68db      	ldr	r3, [r3, #12]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d020      	beq.n	8008106 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80080c4:	4b34      	ldr	r3, [pc, #208]	; (8008198 <HAL_RCC_OscConfig+0x244>)
 80080c6:	2201      	movs	r2, #1
 80080c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080ca:	f7fe fbd1 	bl	8006870 <HAL_GetTick>
 80080ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080d0:	e008      	b.n	80080e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80080d2:	f7fe fbcd 	bl	8006870 <HAL_GetTick>
 80080d6:	4602      	mov	r2, r0
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	1ad3      	subs	r3, r2, r3
 80080dc:	2b02      	cmp	r3, #2
 80080de:	d901      	bls.n	80080e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80080e0:	2303      	movs	r3, #3
 80080e2:	e1a8      	b.n	8008436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080e4:	4b2b      	ldr	r3, [pc, #172]	; (8008194 <HAL_RCC_OscConfig+0x240>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f003 0302 	and.w	r3, r3, #2
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d0f0      	beq.n	80080d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080f0:	4b28      	ldr	r3, [pc, #160]	; (8008194 <HAL_RCC_OscConfig+0x240>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	691b      	ldr	r3, [r3, #16]
 80080fc:	00db      	lsls	r3, r3, #3
 80080fe:	4925      	ldr	r1, [pc, #148]	; (8008194 <HAL_RCC_OscConfig+0x240>)
 8008100:	4313      	orrs	r3, r2
 8008102:	600b      	str	r3, [r1, #0]
 8008104:	e015      	b.n	8008132 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008106:	4b24      	ldr	r3, [pc, #144]	; (8008198 <HAL_RCC_OscConfig+0x244>)
 8008108:	2200      	movs	r2, #0
 800810a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800810c:	f7fe fbb0 	bl	8006870 <HAL_GetTick>
 8008110:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008112:	e008      	b.n	8008126 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008114:	f7fe fbac 	bl	8006870 <HAL_GetTick>
 8008118:	4602      	mov	r2, r0
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	1ad3      	subs	r3, r2, r3
 800811e:	2b02      	cmp	r3, #2
 8008120:	d901      	bls.n	8008126 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008122:	2303      	movs	r3, #3
 8008124:	e187      	b.n	8008436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008126:	4b1b      	ldr	r3, [pc, #108]	; (8008194 <HAL_RCC_OscConfig+0x240>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f003 0302 	and.w	r3, r3, #2
 800812e:	2b00      	cmp	r3, #0
 8008130:	d1f0      	bne.n	8008114 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f003 0308 	and.w	r3, r3, #8
 800813a:	2b00      	cmp	r3, #0
 800813c:	d036      	beq.n	80081ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	695b      	ldr	r3, [r3, #20]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d016      	beq.n	8008174 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008146:	4b15      	ldr	r3, [pc, #84]	; (800819c <HAL_RCC_OscConfig+0x248>)
 8008148:	2201      	movs	r2, #1
 800814a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800814c:	f7fe fb90 	bl	8006870 <HAL_GetTick>
 8008150:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008152:	e008      	b.n	8008166 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008154:	f7fe fb8c 	bl	8006870 <HAL_GetTick>
 8008158:	4602      	mov	r2, r0
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	1ad3      	subs	r3, r2, r3
 800815e:	2b02      	cmp	r3, #2
 8008160:	d901      	bls.n	8008166 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008162:	2303      	movs	r3, #3
 8008164:	e167      	b.n	8008436 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008166:	4b0b      	ldr	r3, [pc, #44]	; (8008194 <HAL_RCC_OscConfig+0x240>)
 8008168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800816a:	f003 0302 	and.w	r3, r3, #2
 800816e:	2b00      	cmp	r3, #0
 8008170:	d0f0      	beq.n	8008154 <HAL_RCC_OscConfig+0x200>
 8008172:	e01b      	b.n	80081ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008174:	4b09      	ldr	r3, [pc, #36]	; (800819c <HAL_RCC_OscConfig+0x248>)
 8008176:	2200      	movs	r2, #0
 8008178:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800817a:	f7fe fb79 	bl	8006870 <HAL_GetTick>
 800817e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008180:	e00e      	b.n	80081a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008182:	f7fe fb75 	bl	8006870 <HAL_GetTick>
 8008186:	4602      	mov	r2, r0
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	1ad3      	subs	r3, r2, r3
 800818c:	2b02      	cmp	r3, #2
 800818e:	d907      	bls.n	80081a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008190:	2303      	movs	r3, #3
 8008192:	e150      	b.n	8008436 <HAL_RCC_OscConfig+0x4e2>
 8008194:	40023800 	.word	0x40023800
 8008198:	42470000 	.word	0x42470000
 800819c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80081a0:	4b88      	ldr	r3, [pc, #544]	; (80083c4 <HAL_RCC_OscConfig+0x470>)
 80081a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081a4:	f003 0302 	and.w	r3, r3, #2
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d1ea      	bne.n	8008182 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f003 0304 	and.w	r3, r3, #4
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	f000 8097 	beq.w	80082e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80081ba:	2300      	movs	r3, #0
 80081bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80081be:	4b81      	ldr	r3, [pc, #516]	; (80083c4 <HAL_RCC_OscConfig+0x470>)
 80081c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d10f      	bne.n	80081ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80081ca:	2300      	movs	r3, #0
 80081cc:	60bb      	str	r3, [r7, #8]
 80081ce:	4b7d      	ldr	r3, [pc, #500]	; (80083c4 <HAL_RCC_OscConfig+0x470>)
 80081d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d2:	4a7c      	ldr	r2, [pc, #496]	; (80083c4 <HAL_RCC_OscConfig+0x470>)
 80081d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081d8:	6413      	str	r3, [r2, #64]	; 0x40
 80081da:	4b7a      	ldr	r3, [pc, #488]	; (80083c4 <HAL_RCC_OscConfig+0x470>)
 80081dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081e2:	60bb      	str	r3, [r7, #8]
 80081e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80081e6:	2301      	movs	r3, #1
 80081e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081ea:	4b77      	ldr	r3, [pc, #476]	; (80083c8 <HAL_RCC_OscConfig+0x474>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d118      	bne.n	8008228 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80081f6:	4b74      	ldr	r3, [pc, #464]	; (80083c8 <HAL_RCC_OscConfig+0x474>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a73      	ldr	r2, [pc, #460]	; (80083c8 <HAL_RCC_OscConfig+0x474>)
 80081fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008200:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008202:	f7fe fb35 	bl	8006870 <HAL_GetTick>
 8008206:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008208:	e008      	b.n	800821c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800820a:	f7fe fb31 	bl	8006870 <HAL_GetTick>
 800820e:	4602      	mov	r2, r0
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	1ad3      	subs	r3, r2, r3
 8008214:	2b02      	cmp	r3, #2
 8008216:	d901      	bls.n	800821c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008218:	2303      	movs	r3, #3
 800821a:	e10c      	b.n	8008436 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800821c:	4b6a      	ldr	r3, [pc, #424]	; (80083c8 <HAL_RCC_OscConfig+0x474>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008224:	2b00      	cmp	r3, #0
 8008226:	d0f0      	beq.n	800820a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	2b01      	cmp	r3, #1
 800822e:	d106      	bne.n	800823e <HAL_RCC_OscConfig+0x2ea>
 8008230:	4b64      	ldr	r3, [pc, #400]	; (80083c4 <HAL_RCC_OscConfig+0x470>)
 8008232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008234:	4a63      	ldr	r2, [pc, #396]	; (80083c4 <HAL_RCC_OscConfig+0x470>)
 8008236:	f043 0301 	orr.w	r3, r3, #1
 800823a:	6713      	str	r3, [r2, #112]	; 0x70
 800823c:	e01c      	b.n	8008278 <HAL_RCC_OscConfig+0x324>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	2b05      	cmp	r3, #5
 8008244:	d10c      	bne.n	8008260 <HAL_RCC_OscConfig+0x30c>
 8008246:	4b5f      	ldr	r3, [pc, #380]	; (80083c4 <HAL_RCC_OscConfig+0x470>)
 8008248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800824a:	4a5e      	ldr	r2, [pc, #376]	; (80083c4 <HAL_RCC_OscConfig+0x470>)
 800824c:	f043 0304 	orr.w	r3, r3, #4
 8008250:	6713      	str	r3, [r2, #112]	; 0x70
 8008252:	4b5c      	ldr	r3, [pc, #368]	; (80083c4 <HAL_RCC_OscConfig+0x470>)
 8008254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008256:	4a5b      	ldr	r2, [pc, #364]	; (80083c4 <HAL_RCC_OscConfig+0x470>)
 8008258:	f043 0301 	orr.w	r3, r3, #1
 800825c:	6713      	str	r3, [r2, #112]	; 0x70
 800825e:	e00b      	b.n	8008278 <HAL_RCC_OscConfig+0x324>
 8008260:	4b58      	ldr	r3, [pc, #352]	; (80083c4 <HAL_RCC_OscConfig+0x470>)
 8008262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008264:	4a57      	ldr	r2, [pc, #348]	; (80083c4 <HAL_RCC_OscConfig+0x470>)
 8008266:	f023 0301 	bic.w	r3, r3, #1
 800826a:	6713      	str	r3, [r2, #112]	; 0x70
 800826c:	4b55      	ldr	r3, [pc, #340]	; (80083c4 <HAL_RCC_OscConfig+0x470>)
 800826e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008270:	4a54      	ldr	r2, [pc, #336]	; (80083c4 <HAL_RCC_OscConfig+0x470>)
 8008272:	f023 0304 	bic.w	r3, r3, #4
 8008276:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d015      	beq.n	80082ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008280:	f7fe faf6 	bl	8006870 <HAL_GetTick>
 8008284:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008286:	e00a      	b.n	800829e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008288:	f7fe faf2 	bl	8006870 <HAL_GetTick>
 800828c:	4602      	mov	r2, r0
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	1ad3      	subs	r3, r2, r3
 8008292:	f241 3288 	movw	r2, #5000	; 0x1388
 8008296:	4293      	cmp	r3, r2
 8008298:	d901      	bls.n	800829e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800829a:	2303      	movs	r3, #3
 800829c:	e0cb      	b.n	8008436 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800829e:	4b49      	ldr	r3, [pc, #292]	; (80083c4 <HAL_RCC_OscConfig+0x470>)
 80082a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082a2:	f003 0302 	and.w	r3, r3, #2
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d0ee      	beq.n	8008288 <HAL_RCC_OscConfig+0x334>
 80082aa:	e014      	b.n	80082d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80082ac:	f7fe fae0 	bl	8006870 <HAL_GetTick>
 80082b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80082b2:	e00a      	b.n	80082ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80082b4:	f7fe fadc 	bl	8006870 <HAL_GetTick>
 80082b8:	4602      	mov	r2, r0
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	1ad3      	subs	r3, r2, r3
 80082be:	f241 3288 	movw	r2, #5000	; 0x1388
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d901      	bls.n	80082ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80082c6:	2303      	movs	r3, #3
 80082c8:	e0b5      	b.n	8008436 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80082ca:	4b3e      	ldr	r3, [pc, #248]	; (80083c4 <HAL_RCC_OscConfig+0x470>)
 80082cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082ce:	f003 0302 	and.w	r3, r3, #2
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d1ee      	bne.n	80082b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80082d6:	7dfb      	ldrb	r3, [r7, #23]
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d105      	bne.n	80082e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80082dc:	4b39      	ldr	r3, [pc, #228]	; (80083c4 <HAL_RCC_OscConfig+0x470>)
 80082de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082e0:	4a38      	ldr	r2, [pc, #224]	; (80083c4 <HAL_RCC_OscConfig+0x470>)
 80082e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80082e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	699b      	ldr	r3, [r3, #24]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	f000 80a1 	beq.w	8008434 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80082f2:	4b34      	ldr	r3, [pc, #208]	; (80083c4 <HAL_RCC_OscConfig+0x470>)
 80082f4:	689b      	ldr	r3, [r3, #8]
 80082f6:	f003 030c 	and.w	r3, r3, #12
 80082fa:	2b08      	cmp	r3, #8
 80082fc:	d05c      	beq.n	80083b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	699b      	ldr	r3, [r3, #24]
 8008302:	2b02      	cmp	r3, #2
 8008304:	d141      	bne.n	800838a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008306:	4b31      	ldr	r3, [pc, #196]	; (80083cc <HAL_RCC_OscConfig+0x478>)
 8008308:	2200      	movs	r2, #0
 800830a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800830c:	f7fe fab0 	bl	8006870 <HAL_GetTick>
 8008310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008312:	e008      	b.n	8008326 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008314:	f7fe faac 	bl	8006870 <HAL_GetTick>
 8008318:	4602      	mov	r2, r0
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	1ad3      	subs	r3, r2, r3
 800831e:	2b02      	cmp	r3, #2
 8008320:	d901      	bls.n	8008326 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008322:	2303      	movs	r3, #3
 8008324:	e087      	b.n	8008436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008326:	4b27      	ldr	r3, [pc, #156]	; (80083c4 <HAL_RCC_OscConfig+0x470>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800832e:	2b00      	cmp	r3, #0
 8008330:	d1f0      	bne.n	8008314 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	69da      	ldr	r2, [r3, #28]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6a1b      	ldr	r3, [r3, #32]
 800833a:	431a      	orrs	r2, r3
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008340:	019b      	lsls	r3, r3, #6
 8008342:	431a      	orrs	r2, r3
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008348:	085b      	lsrs	r3, r3, #1
 800834a:	3b01      	subs	r3, #1
 800834c:	041b      	lsls	r3, r3, #16
 800834e:	431a      	orrs	r2, r3
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008354:	061b      	lsls	r3, r3, #24
 8008356:	491b      	ldr	r1, [pc, #108]	; (80083c4 <HAL_RCC_OscConfig+0x470>)
 8008358:	4313      	orrs	r3, r2
 800835a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800835c:	4b1b      	ldr	r3, [pc, #108]	; (80083cc <HAL_RCC_OscConfig+0x478>)
 800835e:	2201      	movs	r2, #1
 8008360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008362:	f7fe fa85 	bl	8006870 <HAL_GetTick>
 8008366:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008368:	e008      	b.n	800837c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800836a:	f7fe fa81 	bl	8006870 <HAL_GetTick>
 800836e:	4602      	mov	r2, r0
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	1ad3      	subs	r3, r2, r3
 8008374:	2b02      	cmp	r3, #2
 8008376:	d901      	bls.n	800837c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008378:	2303      	movs	r3, #3
 800837a:	e05c      	b.n	8008436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800837c:	4b11      	ldr	r3, [pc, #68]	; (80083c4 <HAL_RCC_OscConfig+0x470>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008384:	2b00      	cmp	r3, #0
 8008386:	d0f0      	beq.n	800836a <HAL_RCC_OscConfig+0x416>
 8008388:	e054      	b.n	8008434 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800838a:	4b10      	ldr	r3, [pc, #64]	; (80083cc <HAL_RCC_OscConfig+0x478>)
 800838c:	2200      	movs	r2, #0
 800838e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008390:	f7fe fa6e 	bl	8006870 <HAL_GetTick>
 8008394:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008396:	e008      	b.n	80083aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008398:	f7fe fa6a 	bl	8006870 <HAL_GetTick>
 800839c:	4602      	mov	r2, r0
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	1ad3      	subs	r3, r2, r3
 80083a2:	2b02      	cmp	r3, #2
 80083a4:	d901      	bls.n	80083aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80083a6:	2303      	movs	r3, #3
 80083a8:	e045      	b.n	8008436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083aa:	4b06      	ldr	r3, [pc, #24]	; (80083c4 <HAL_RCC_OscConfig+0x470>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d1f0      	bne.n	8008398 <HAL_RCC_OscConfig+0x444>
 80083b6:	e03d      	b.n	8008434 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	699b      	ldr	r3, [r3, #24]
 80083bc:	2b01      	cmp	r3, #1
 80083be:	d107      	bne.n	80083d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80083c0:	2301      	movs	r3, #1
 80083c2:	e038      	b.n	8008436 <HAL_RCC_OscConfig+0x4e2>
 80083c4:	40023800 	.word	0x40023800
 80083c8:	40007000 	.word	0x40007000
 80083cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80083d0:	4b1b      	ldr	r3, [pc, #108]	; (8008440 <HAL_RCC_OscConfig+0x4ec>)
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	699b      	ldr	r3, [r3, #24]
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d028      	beq.n	8008430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d121      	bne.n	8008430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d11a      	bne.n	8008430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80083fa:	68fa      	ldr	r2, [r7, #12]
 80083fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008400:	4013      	ands	r3, r2
 8008402:	687a      	ldr	r2, [r7, #4]
 8008404:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008406:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008408:	4293      	cmp	r3, r2
 800840a:	d111      	bne.n	8008430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008416:	085b      	lsrs	r3, r3, #1
 8008418:	3b01      	subs	r3, #1
 800841a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800841c:	429a      	cmp	r2, r3
 800841e:	d107      	bne.n	8008430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800842a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800842c:	429a      	cmp	r2, r3
 800842e:	d001      	beq.n	8008434 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008430:	2301      	movs	r3, #1
 8008432:	e000      	b.n	8008436 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008434:	2300      	movs	r3, #0
}
 8008436:	4618      	mov	r0, r3
 8008438:	3718      	adds	r7, #24
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}
 800843e:	bf00      	nop
 8008440:	40023800 	.word	0x40023800

08008444 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b084      	sub	sp, #16
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d101      	bne.n	8008458 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008454:	2301      	movs	r3, #1
 8008456:	e0cc      	b.n	80085f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008458:	4b68      	ldr	r3, [pc, #416]	; (80085fc <HAL_RCC_ClockConfig+0x1b8>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f003 0307 	and.w	r3, r3, #7
 8008460:	683a      	ldr	r2, [r7, #0]
 8008462:	429a      	cmp	r2, r3
 8008464:	d90c      	bls.n	8008480 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008466:	4b65      	ldr	r3, [pc, #404]	; (80085fc <HAL_RCC_ClockConfig+0x1b8>)
 8008468:	683a      	ldr	r2, [r7, #0]
 800846a:	b2d2      	uxtb	r2, r2
 800846c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800846e:	4b63      	ldr	r3, [pc, #396]	; (80085fc <HAL_RCC_ClockConfig+0x1b8>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f003 0307 	and.w	r3, r3, #7
 8008476:	683a      	ldr	r2, [r7, #0]
 8008478:	429a      	cmp	r2, r3
 800847a:	d001      	beq.n	8008480 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800847c:	2301      	movs	r3, #1
 800847e:	e0b8      	b.n	80085f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f003 0302 	and.w	r3, r3, #2
 8008488:	2b00      	cmp	r3, #0
 800848a:	d020      	beq.n	80084ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f003 0304 	and.w	r3, r3, #4
 8008494:	2b00      	cmp	r3, #0
 8008496:	d005      	beq.n	80084a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008498:	4b59      	ldr	r3, [pc, #356]	; (8008600 <HAL_RCC_ClockConfig+0x1bc>)
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	4a58      	ldr	r2, [pc, #352]	; (8008600 <HAL_RCC_ClockConfig+0x1bc>)
 800849e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80084a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f003 0308 	and.w	r3, r3, #8
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d005      	beq.n	80084bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80084b0:	4b53      	ldr	r3, [pc, #332]	; (8008600 <HAL_RCC_ClockConfig+0x1bc>)
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	4a52      	ldr	r2, [pc, #328]	; (8008600 <HAL_RCC_ClockConfig+0x1bc>)
 80084b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80084ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80084bc:	4b50      	ldr	r3, [pc, #320]	; (8008600 <HAL_RCC_ClockConfig+0x1bc>)
 80084be:	689b      	ldr	r3, [r3, #8]
 80084c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	494d      	ldr	r1, [pc, #308]	; (8008600 <HAL_RCC_ClockConfig+0x1bc>)
 80084ca:	4313      	orrs	r3, r2
 80084cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f003 0301 	and.w	r3, r3, #1
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d044      	beq.n	8008564 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	2b01      	cmp	r3, #1
 80084e0:	d107      	bne.n	80084f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80084e2:	4b47      	ldr	r3, [pc, #284]	; (8008600 <HAL_RCC_ClockConfig+0x1bc>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d119      	bne.n	8008522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80084ee:	2301      	movs	r3, #1
 80084f0:	e07f      	b.n	80085f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	685b      	ldr	r3, [r3, #4]
 80084f6:	2b02      	cmp	r3, #2
 80084f8:	d003      	beq.n	8008502 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80084fe:	2b03      	cmp	r3, #3
 8008500:	d107      	bne.n	8008512 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008502:	4b3f      	ldr	r3, [pc, #252]	; (8008600 <HAL_RCC_ClockConfig+0x1bc>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800850a:	2b00      	cmp	r3, #0
 800850c:	d109      	bne.n	8008522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800850e:	2301      	movs	r3, #1
 8008510:	e06f      	b.n	80085f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008512:	4b3b      	ldr	r3, [pc, #236]	; (8008600 <HAL_RCC_ClockConfig+0x1bc>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f003 0302 	and.w	r3, r3, #2
 800851a:	2b00      	cmp	r3, #0
 800851c:	d101      	bne.n	8008522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800851e:	2301      	movs	r3, #1
 8008520:	e067      	b.n	80085f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008522:	4b37      	ldr	r3, [pc, #220]	; (8008600 <HAL_RCC_ClockConfig+0x1bc>)
 8008524:	689b      	ldr	r3, [r3, #8]
 8008526:	f023 0203 	bic.w	r2, r3, #3
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	4934      	ldr	r1, [pc, #208]	; (8008600 <HAL_RCC_ClockConfig+0x1bc>)
 8008530:	4313      	orrs	r3, r2
 8008532:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008534:	f7fe f99c 	bl	8006870 <HAL_GetTick>
 8008538:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800853a:	e00a      	b.n	8008552 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800853c:	f7fe f998 	bl	8006870 <HAL_GetTick>
 8008540:	4602      	mov	r2, r0
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	1ad3      	subs	r3, r2, r3
 8008546:	f241 3288 	movw	r2, #5000	; 0x1388
 800854a:	4293      	cmp	r3, r2
 800854c:	d901      	bls.n	8008552 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800854e:	2303      	movs	r3, #3
 8008550:	e04f      	b.n	80085f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008552:	4b2b      	ldr	r3, [pc, #172]	; (8008600 <HAL_RCC_ClockConfig+0x1bc>)
 8008554:	689b      	ldr	r3, [r3, #8]
 8008556:	f003 020c 	and.w	r2, r3, #12
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	685b      	ldr	r3, [r3, #4]
 800855e:	009b      	lsls	r3, r3, #2
 8008560:	429a      	cmp	r2, r3
 8008562:	d1eb      	bne.n	800853c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008564:	4b25      	ldr	r3, [pc, #148]	; (80085fc <HAL_RCC_ClockConfig+0x1b8>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f003 0307 	and.w	r3, r3, #7
 800856c:	683a      	ldr	r2, [r7, #0]
 800856e:	429a      	cmp	r2, r3
 8008570:	d20c      	bcs.n	800858c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008572:	4b22      	ldr	r3, [pc, #136]	; (80085fc <HAL_RCC_ClockConfig+0x1b8>)
 8008574:	683a      	ldr	r2, [r7, #0]
 8008576:	b2d2      	uxtb	r2, r2
 8008578:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800857a:	4b20      	ldr	r3, [pc, #128]	; (80085fc <HAL_RCC_ClockConfig+0x1b8>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f003 0307 	and.w	r3, r3, #7
 8008582:	683a      	ldr	r2, [r7, #0]
 8008584:	429a      	cmp	r2, r3
 8008586:	d001      	beq.n	800858c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008588:	2301      	movs	r3, #1
 800858a:	e032      	b.n	80085f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f003 0304 	and.w	r3, r3, #4
 8008594:	2b00      	cmp	r3, #0
 8008596:	d008      	beq.n	80085aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008598:	4b19      	ldr	r3, [pc, #100]	; (8008600 <HAL_RCC_ClockConfig+0x1bc>)
 800859a:	689b      	ldr	r3, [r3, #8]
 800859c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	68db      	ldr	r3, [r3, #12]
 80085a4:	4916      	ldr	r1, [pc, #88]	; (8008600 <HAL_RCC_ClockConfig+0x1bc>)
 80085a6:	4313      	orrs	r3, r2
 80085a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f003 0308 	and.w	r3, r3, #8
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d009      	beq.n	80085ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80085b6:	4b12      	ldr	r3, [pc, #72]	; (8008600 <HAL_RCC_ClockConfig+0x1bc>)
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	691b      	ldr	r3, [r3, #16]
 80085c2:	00db      	lsls	r3, r3, #3
 80085c4:	490e      	ldr	r1, [pc, #56]	; (8008600 <HAL_RCC_ClockConfig+0x1bc>)
 80085c6:	4313      	orrs	r3, r2
 80085c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80085ca:	f000 f821 	bl	8008610 <HAL_RCC_GetSysClockFreq>
 80085ce:	4602      	mov	r2, r0
 80085d0:	4b0b      	ldr	r3, [pc, #44]	; (8008600 <HAL_RCC_ClockConfig+0x1bc>)
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	091b      	lsrs	r3, r3, #4
 80085d6:	f003 030f 	and.w	r3, r3, #15
 80085da:	490a      	ldr	r1, [pc, #40]	; (8008604 <HAL_RCC_ClockConfig+0x1c0>)
 80085dc:	5ccb      	ldrb	r3, [r1, r3]
 80085de:	fa22 f303 	lsr.w	r3, r2, r3
 80085e2:	4a09      	ldr	r2, [pc, #36]	; (8008608 <HAL_RCC_ClockConfig+0x1c4>)
 80085e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80085e6:	4b09      	ldr	r3, [pc, #36]	; (800860c <HAL_RCC_ClockConfig+0x1c8>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4618      	mov	r0, r3
 80085ec:	f7fe f8fc 	bl	80067e8 <HAL_InitTick>

  return HAL_OK;
 80085f0:	2300      	movs	r3, #0
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3710      	adds	r7, #16
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	bf00      	nop
 80085fc:	40023c00 	.word	0x40023c00
 8008600:	40023800 	.word	0x40023800
 8008604:	08018e54 	.word	0x08018e54
 8008608:	20000014 	.word	0x20000014
 800860c:	20000018 	.word	0x20000018

08008610 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008610:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008614:	b090      	sub	sp, #64	; 0x40
 8008616:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008618:	2300      	movs	r3, #0
 800861a:	637b      	str	r3, [r7, #52]	; 0x34
 800861c:	2300      	movs	r3, #0
 800861e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008620:	2300      	movs	r3, #0
 8008622:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8008624:	2300      	movs	r3, #0
 8008626:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008628:	4b59      	ldr	r3, [pc, #356]	; (8008790 <HAL_RCC_GetSysClockFreq+0x180>)
 800862a:	689b      	ldr	r3, [r3, #8]
 800862c:	f003 030c 	and.w	r3, r3, #12
 8008630:	2b08      	cmp	r3, #8
 8008632:	d00d      	beq.n	8008650 <HAL_RCC_GetSysClockFreq+0x40>
 8008634:	2b08      	cmp	r3, #8
 8008636:	f200 80a1 	bhi.w	800877c <HAL_RCC_GetSysClockFreq+0x16c>
 800863a:	2b00      	cmp	r3, #0
 800863c:	d002      	beq.n	8008644 <HAL_RCC_GetSysClockFreq+0x34>
 800863e:	2b04      	cmp	r3, #4
 8008640:	d003      	beq.n	800864a <HAL_RCC_GetSysClockFreq+0x3a>
 8008642:	e09b      	b.n	800877c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008644:	4b53      	ldr	r3, [pc, #332]	; (8008794 <HAL_RCC_GetSysClockFreq+0x184>)
 8008646:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8008648:	e09b      	b.n	8008782 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800864a:	4b53      	ldr	r3, [pc, #332]	; (8008798 <HAL_RCC_GetSysClockFreq+0x188>)
 800864c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800864e:	e098      	b.n	8008782 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008650:	4b4f      	ldr	r3, [pc, #316]	; (8008790 <HAL_RCC_GetSysClockFreq+0x180>)
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008658:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800865a:	4b4d      	ldr	r3, [pc, #308]	; (8008790 <HAL_RCC_GetSysClockFreq+0x180>)
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008662:	2b00      	cmp	r3, #0
 8008664:	d028      	beq.n	80086b8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008666:	4b4a      	ldr	r3, [pc, #296]	; (8008790 <HAL_RCC_GetSysClockFreq+0x180>)
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	099b      	lsrs	r3, r3, #6
 800866c:	2200      	movs	r2, #0
 800866e:	623b      	str	r3, [r7, #32]
 8008670:	627a      	str	r2, [r7, #36]	; 0x24
 8008672:	6a3b      	ldr	r3, [r7, #32]
 8008674:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008678:	2100      	movs	r1, #0
 800867a:	4b47      	ldr	r3, [pc, #284]	; (8008798 <HAL_RCC_GetSysClockFreq+0x188>)
 800867c:	fb03 f201 	mul.w	r2, r3, r1
 8008680:	2300      	movs	r3, #0
 8008682:	fb00 f303 	mul.w	r3, r0, r3
 8008686:	4413      	add	r3, r2
 8008688:	4a43      	ldr	r2, [pc, #268]	; (8008798 <HAL_RCC_GetSysClockFreq+0x188>)
 800868a:	fba0 1202 	umull	r1, r2, r0, r2
 800868e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008690:	460a      	mov	r2, r1
 8008692:	62ba      	str	r2, [r7, #40]	; 0x28
 8008694:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008696:	4413      	add	r3, r2
 8008698:	62fb      	str	r3, [r7, #44]	; 0x2c
 800869a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800869c:	2200      	movs	r2, #0
 800869e:	61bb      	str	r3, [r7, #24]
 80086a0:	61fa      	str	r2, [r7, #28]
 80086a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80086a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80086aa:	f7f8 fb55 	bl	8000d58 <__aeabi_uldivmod>
 80086ae:	4602      	mov	r2, r0
 80086b0:	460b      	mov	r3, r1
 80086b2:	4613      	mov	r3, r2
 80086b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086b6:	e053      	b.n	8008760 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80086b8:	4b35      	ldr	r3, [pc, #212]	; (8008790 <HAL_RCC_GetSysClockFreq+0x180>)
 80086ba:	685b      	ldr	r3, [r3, #4]
 80086bc:	099b      	lsrs	r3, r3, #6
 80086be:	2200      	movs	r2, #0
 80086c0:	613b      	str	r3, [r7, #16]
 80086c2:	617a      	str	r2, [r7, #20]
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80086ca:	f04f 0b00 	mov.w	fp, #0
 80086ce:	4652      	mov	r2, sl
 80086d0:	465b      	mov	r3, fp
 80086d2:	f04f 0000 	mov.w	r0, #0
 80086d6:	f04f 0100 	mov.w	r1, #0
 80086da:	0159      	lsls	r1, r3, #5
 80086dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80086e0:	0150      	lsls	r0, r2, #5
 80086e2:	4602      	mov	r2, r0
 80086e4:	460b      	mov	r3, r1
 80086e6:	ebb2 080a 	subs.w	r8, r2, sl
 80086ea:	eb63 090b 	sbc.w	r9, r3, fp
 80086ee:	f04f 0200 	mov.w	r2, #0
 80086f2:	f04f 0300 	mov.w	r3, #0
 80086f6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80086fa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80086fe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008702:	ebb2 0408 	subs.w	r4, r2, r8
 8008706:	eb63 0509 	sbc.w	r5, r3, r9
 800870a:	f04f 0200 	mov.w	r2, #0
 800870e:	f04f 0300 	mov.w	r3, #0
 8008712:	00eb      	lsls	r3, r5, #3
 8008714:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008718:	00e2      	lsls	r2, r4, #3
 800871a:	4614      	mov	r4, r2
 800871c:	461d      	mov	r5, r3
 800871e:	eb14 030a 	adds.w	r3, r4, sl
 8008722:	603b      	str	r3, [r7, #0]
 8008724:	eb45 030b 	adc.w	r3, r5, fp
 8008728:	607b      	str	r3, [r7, #4]
 800872a:	f04f 0200 	mov.w	r2, #0
 800872e:	f04f 0300 	mov.w	r3, #0
 8008732:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008736:	4629      	mov	r1, r5
 8008738:	028b      	lsls	r3, r1, #10
 800873a:	4621      	mov	r1, r4
 800873c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008740:	4621      	mov	r1, r4
 8008742:	028a      	lsls	r2, r1, #10
 8008744:	4610      	mov	r0, r2
 8008746:	4619      	mov	r1, r3
 8008748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800874a:	2200      	movs	r2, #0
 800874c:	60bb      	str	r3, [r7, #8]
 800874e:	60fa      	str	r2, [r7, #12]
 8008750:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008754:	f7f8 fb00 	bl	8000d58 <__aeabi_uldivmod>
 8008758:	4602      	mov	r2, r0
 800875a:	460b      	mov	r3, r1
 800875c:	4613      	mov	r3, r2
 800875e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008760:	4b0b      	ldr	r3, [pc, #44]	; (8008790 <HAL_RCC_GetSysClockFreq+0x180>)
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	0c1b      	lsrs	r3, r3, #16
 8008766:	f003 0303 	and.w	r3, r3, #3
 800876a:	3301      	adds	r3, #1
 800876c:	005b      	lsls	r3, r3, #1
 800876e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8008770:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008774:	fbb2 f3f3 	udiv	r3, r2, r3
 8008778:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800877a:	e002      	b.n	8008782 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800877c:	4b05      	ldr	r3, [pc, #20]	; (8008794 <HAL_RCC_GetSysClockFreq+0x184>)
 800877e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008780:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8008784:	4618      	mov	r0, r3
 8008786:	3740      	adds	r7, #64	; 0x40
 8008788:	46bd      	mov	sp, r7
 800878a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800878e:	bf00      	nop
 8008790:	40023800 	.word	0x40023800
 8008794:	00f42400 	.word	0x00f42400
 8008798:	017d7840 	.word	0x017d7840

0800879c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800879c:	b480      	push	{r7}
 800879e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80087a0:	4b03      	ldr	r3, [pc, #12]	; (80087b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80087a2:	681b      	ldr	r3, [r3, #0]
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	46bd      	mov	sp, r7
 80087a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ac:	4770      	bx	lr
 80087ae:	bf00      	nop
 80087b0:	20000014 	.word	0x20000014

080087b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80087b8:	f7ff fff0 	bl	800879c <HAL_RCC_GetHCLKFreq>
 80087bc:	4602      	mov	r2, r0
 80087be:	4b05      	ldr	r3, [pc, #20]	; (80087d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80087c0:	689b      	ldr	r3, [r3, #8]
 80087c2:	0a9b      	lsrs	r3, r3, #10
 80087c4:	f003 0307 	and.w	r3, r3, #7
 80087c8:	4903      	ldr	r1, [pc, #12]	; (80087d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80087ca:	5ccb      	ldrb	r3, [r1, r3]
 80087cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	bd80      	pop	{r7, pc}
 80087d4:	40023800 	.word	0x40023800
 80087d8:	08018e64 	.word	0x08018e64

080087dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80087e0:	f7ff ffdc 	bl	800879c <HAL_RCC_GetHCLKFreq>
 80087e4:	4602      	mov	r2, r0
 80087e6:	4b05      	ldr	r3, [pc, #20]	; (80087fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80087e8:	689b      	ldr	r3, [r3, #8]
 80087ea:	0b5b      	lsrs	r3, r3, #13
 80087ec:	f003 0307 	and.w	r3, r3, #7
 80087f0:	4903      	ldr	r1, [pc, #12]	; (8008800 <HAL_RCC_GetPCLK2Freq+0x24>)
 80087f2:	5ccb      	ldrb	r3, [r1, r3]
 80087f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	bd80      	pop	{r7, pc}
 80087fc:	40023800 	.word	0x40023800
 8008800:	08018e64 	.word	0x08018e64

08008804 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b086      	sub	sp, #24
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800880c:	2300      	movs	r3, #0
 800880e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008810:	2300      	movs	r3, #0
 8008812:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f003 0301 	and.w	r3, r3, #1
 800881c:	2b00      	cmp	r3, #0
 800881e:	d105      	bne.n	800882c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008828:	2b00      	cmp	r3, #0
 800882a:	d038      	beq.n	800889e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800882c:	4b68      	ldr	r3, [pc, #416]	; (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800882e:	2200      	movs	r2, #0
 8008830:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008832:	f7fe f81d 	bl	8006870 <HAL_GetTick>
 8008836:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008838:	e008      	b.n	800884c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800883a:	f7fe f819 	bl	8006870 <HAL_GetTick>
 800883e:	4602      	mov	r2, r0
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	1ad3      	subs	r3, r2, r3
 8008844:	2b02      	cmp	r3, #2
 8008846:	d901      	bls.n	800884c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008848:	2303      	movs	r3, #3
 800884a:	e0bd      	b.n	80089c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800884c:	4b61      	ldr	r3, [pc, #388]	; (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008854:	2b00      	cmp	r3, #0
 8008856:	d1f0      	bne.n	800883a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	685a      	ldr	r2, [r3, #4]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	019b      	lsls	r3, r3, #6
 8008862:	431a      	orrs	r2, r3
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	071b      	lsls	r3, r3, #28
 800886a:	495a      	ldr	r1, [pc, #360]	; (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800886c:	4313      	orrs	r3, r2
 800886e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008872:	4b57      	ldr	r3, [pc, #348]	; (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008874:	2201      	movs	r2, #1
 8008876:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008878:	f7fd fffa 	bl	8006870 <HAL_GetTick>
 800887c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800887e:	e008      	b.n	8008892 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008880:	f7fd fff6 	bl	8006870 <HAL_GetTick>
 8008884:	4602      	mov	r2, r0
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	1ad3      	subs	r3, r2, r3
 800888a:	2b02      	cmp	r3, #2
 800888c:	d901      	bls.n	8008892 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800888e:	2303      	movs	r3, #3
 8008890:	e09a      	b.n	80089c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008892:	4b50      	ldr	r3, [pc, #320]	; (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800889a:	2b00      	cmp	r3, #0
 800889c:	d0f0      	beq.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f003 0302 	and.w	r3, r3, #2
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	f000 8083 	beq.w	80089b2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80088ac:	2300      	movs	r3, #0
 80088ae:	60fb      	str	r3, [r7, #12]
 80088b0:	4b48      	ldr	r3, [pc, #288]	; (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80088b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088b4:	4a47      	ldr	r2, [pc, #284]	; (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80088b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088ba:	6413      	str	r3, [r2, #64]	; 0x40
 80088bc:	4b45      	ldr	r3, [pc, #276]	; (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80088be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088c4:	60fb      	str	r3, [r7, #12]
 80088c6:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80088c8:	4b43      	ldr	r3, [pc, #268]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	4a42      	ldr	r2, [pc, #264]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80088ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088d2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80088d4:	f7fd ffcc 	bl	8006870 <HAL_GetTick>
 80088d8:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80088da:	e008      	b.n	80088ee <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80088dc:	f7fd ffc8 	bl	8006870 <HAL_GetTick>
 80088e0:	4602      	mov	r2, r0
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	1ad3      	subs	r3, r2, r3
 80088e6:	2b02      	cmp	r3, #2
 80088e8:	d901      	bls.n	80088ee <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80088ea:	2303      	movs	r3, #3
 80088ec:	e06c      	b.n	80089c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80088ee:	4b3a      	ldr	r3, [pc, #232]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d0f0      	beq.n	80088dc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80088fa:	4b36      	ldr	r3, [pc, #216]	; (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80088fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008902:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d02f      	beq.n	800896a <HAL_RCCEx_PeriphCLKConfig+0x166>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	691b      	ldr	r3, [r3, #16]
 800890e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008912:	693a      	ldr	r2, [r7, #16]
 8008914:	429a      	cmp	r2, r3
 8008916:	d028      	beq.n	800896a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008918:	4b2e      	ldr	r3, [pc, #184]	; (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800891a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800891c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008920:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008922:	4b2e      	ldr	r3, [pc, #184]	; (80089dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008924:	2201      	movs	r2, #1
 8008926:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008928:	4b2c      	ldr	r3, [pc, #176]	; (80089dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800892a:	2200      	movs	r2, #0
 800892c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800892e:	4a29      	ldr	r2, [pc, #164]	; (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008934:	4b27      	ldr	r3, [pc, #156]	; (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008938:	f003 0301 	and.w	r3, r3, #1
 800893c:	2b01      	cmp	r3, #1
 800893e:	d114      	bne.n	800896a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008940:	f7fd ff96 	bl	8006870 <HAL_GetTick>
 8008944:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008946:	e00a      	b.n	800895e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008948:	f7fd ff92 	bl	8006870 <HAL_GetTick>
 800894c:	4602      	mov	r2, r0
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	1ad3      	subs	r3, r2, r3
 8008952:	f241 3288 	movw	r2, #5000	; 0x1388
 8008956:	4293      	cmp	r3, r2
 8008958:	d901      	bls.n	800895e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800895a:	2303      	movs	r3, #3
 800895c:	e034      	b.n	80089c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800895e:	4b1d      	ldr	r3, [pc, #116]	; (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008962:	f003 0302 	and.w	r3, r3, #2
 8008966:	2b00      	cmp	r3, #0
 8008968:	d0ee      	beq.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	691b      	ldr	r3, [r3, #16]
 800896e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008972:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008976:	d10d      	bne.n	8008994 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8008978:	4b16      	ldr	r3, [pc, #88]	; (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800897a:	689b      	ldr	r3, [r3, #8]
 800897c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	691b      	ldr	r3, [r3, #16]
 8008984:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800898c:	4911      	ldr	r1, [pc, #68]	; (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800898e:	4313      	orrs	r3, r2
 8008990:	608b      	str	r3, [r1, #8]
 8008992:	e005      	b.n	80089a0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8008994:	4b0f      	ldr	r3, [pc, #60]	; (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008996:	689b      	ldr	r3, [r3, #8]
 8008998:	4a0e      	ldr	r2, [pc, #56]	; (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800899a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800899e:	6093      	str	r3, [r2, #8]
 80089a0:	4b0c      	ldr	r3, [pc, #48]	; (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80089a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	691b      	ldr	r3, [r3, #16]
 80089a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80089ac:	4909      	ldr	r1, [pc, #36]	; (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80089ae:	4313      	orrs	r3, r2
 80089b0:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f003 0308 	and.w	r3, r3, #8
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d003      	beq.n	80089c6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	7d1a      	ldrb	r2, [r3, #20]
 80089c2:	4b07      	ldr	r3, [pc, #28]	; (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80089c4:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80089c6:	2300      	movs	r3, #0
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3718      	adds	r7, #24
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}
 80089d0:	42470068 	.word	0x42470068
 80089d4:	40023800 	.word	0x40023800
 80089d8:	40007000 	.word	0x40007000
 80089dc:	42470e40 	.word	0x42470e40
 80089e0:	424711e0 	.word	0x424711e0

080089e4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b084      	sub	sp, #16
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80089ec:	2301      	movs	r3, #1
 80089ee:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d101      	bne.n	80089fa <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80089f6:	2301      	movs	r3, #1
 80089f8:	e066      	b.n	8008ac8 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	7f5b      	ldrb	r3, [r3, #29]
 80089fe:	b2db      	uxtb	r3, r3
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d105      	bne.n	8008a10 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2200      	movs	r2, #0
 8008a08:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f7fc ff62 	bl	80058d4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2202      	movs	r2, #2
 8008a14:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	22ca      	movs	r2, #202	; 0xca
 8008a1c:	625a      	str	r2, [r3, #36]	; 0x24
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	2253      	movs	r2, #83	; 0x53
 8008a24:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f000 fa45 	bl	8008eb6 <RTC_EnterInitMode>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8008a30:	7bfb      	ldrb	r3, [r7, #15]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d12c      	bne.n	8008a90 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	689b      	ldr	r3, [r3, #8]
 8008a3c:	687a      	ldr	r2, [r7, #4]
 8008a3e:	6812      	ldr	r2, [r2, #0]
 8008a40:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008a44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a48:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	6899      	ldr	r1, [r3, #8]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	685a      	ldr	r2, [r3, #4]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	691b      	ldr	r3, [r3, #16]
 8008a58:	431a      	orrs	r2, r3
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	695b      	ldr	r3, [r3, #20]
 8008a5e:	431a      	orrs	r2, r3
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	430a      	orrs	r2, r1
 8008a66:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	687a      	ldr	r2, [r7, #4]
 8008a6e:	68d2      	ldr	r2, [r2, #12]
 8008a70:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	6919      	ldr	r1, [r3, #16]
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	689b      	ldr	r3, [r3, #8]
 8008a7c:	041a      	lsls	r2, r3, #16
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	430a      	orrs	r2, r1
 8008a84:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f000 fa4c 	bl	8008f24 <RTC_ExitInitMode>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008a90:	7bfb      	ldrb	r3, [r7, #15]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d113      	bne.n	8008abe <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008aa4:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	699a      	ldr	r2, [r3, #24]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	430a      	orrs	r2, r1
 8008ab6:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2201      	movs	r2, #1
 8008abc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	22ff      	movs	r2, #255	; 0xff
 8008ac4:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8008ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3710      	adds	r7, #16
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008ad0:	b590      	push	{r4, r7, lr}
 8008ad2:	b087      	sub	sp, #28
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	60f8      	str	r0, [r7, #12]
 8008ad8:	60b9      	str	r1, [r7, #8]
 8008ada:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008adc:	2300      	movs	r3, #0
 8008ade:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	7f1b      	ldrb	r3, [r3, #28]
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d101      	bne.n	8008aec <HAL_RTC_SetTime+0x1c>
 8008ae8:	2302      	movs	r3, #2
 8008aea:	e087      	b.n	8008bfc <HAL_RTC_SetTime+0x12c>
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	2201      	movs	r2, #1
 8008af0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	2202      	movs	r2, #2
 8008af6:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d126      	bne.n	8008b4c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	689b      	ldr	r3, [r3, #8]
 8008b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d102      	bne.n	8008b12 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	781b      	ldrb	r3, [r3, #0]
 8008b16:	4618      	mov	r0, r3
 8008b18:	f000 fa29 	bl	8008f6e <RTC_ByteToBcd2>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	785b      	ldrb	r3, [r3, #1]
 8008b24:	4618      	mov	r0, r3
 8008b26:	f000 fa22 	bl	8008f6e <RTC_ByteToBcd2>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008b2e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	789b      	ldrb	r3, [r3, #2]
 8008b34:	4618      	mov	r0, r3
 8008b36:	f000 fa1a 	bl	8008f6e <RTC_ByteToBcd2>
 8008b3a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008b3c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	78db      	ldrb	r3, [r3, #3]
 8008b44:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008b46:	4313      	orrs	r3, r2
 8008b48:	617b      	str	r3, [r7, #20]
 8008b4a:	e018      	b.n	8008b7e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	689b      	ldr	r3, [r3, #8]
 8008b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d102      	bne.n	8008b60 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	781b      	ldrb	r3, [r3, #0]
 8008b64:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	785b      	ldrb	r3, [r3, #1]
 8008b6a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008b6c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8008b6e:	68ba      	ldr	r2, [r7, #8]
 8008b70:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008b72:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	78db      	ldrb	r3, [r3, #3]
 8008b78:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	22ca      	movs	r2, #202	; 0xca
 8008b84:	625a      	str	r2, [r3, #36]	; 0x24
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	2253      	movs	r2, #83	; 0x53
 8008b8c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008b8e:	68f8      	ldr	r0, [r7, #12]
 8008b90:	f000 f991 	bl	8008eb6 <RTC_EnterInitMode>
 8008b94:	4603      	mov	r3, r0
 8008b96:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008b98:	7cfb      	ldrb	r3, [r7, #19]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d120      	bne.n	8008be0 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681a      	ldr	r2, [r3, #0]
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008ba8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008bac:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	689a      	ldr	r2, [r3, #8]
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008bbc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	6899      	ldr	r1, [r3, #8]
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	68da      	ldr	r2, [r3, #12]
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	691b      	ldr	r3, [r3, #16]
 8008bcc:	431a      	orrs	r2, r3
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	430a      	orrs	r2, r1
 8008bd4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008bd6:	68f8      	ldr	r0, [r7, #12]
 8008bd8:	f000 f9a4 	bl	8008f24 <RTC_ExitInitMode>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008be0:	7cfb      	ldrb	r3, [r7, #19]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d102      	bne.n	8008bec <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2201      	movs	r2, #1
 8008bea:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	22ff      	movs	r2, #255	; 0xff
 8008bf2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	771a      	strb	r2, [r3, #28]

  return status;
 8008bfa:	7cfb      	ldrb	r3, [r7, #19]
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	371c      	adds	r7, #28
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd90      	pop	{r4, r7, pc}

08008c04 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b086      	sub	sp, #24
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	60f8      	str	r0, [r7, #12]
 8008c0c:	60b9      	str	r1, [r7, #8]
 8008c0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008c10:	2300      	movs	r3, #0
 8008c12:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	691b      	ldr	r3, [r3, #16]
 8008c24:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008c36:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008c3a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	0c1b      	lsrs	r3, r3, #16
 8008c40:	b2db      	uxtb	r3, r3
 8008c42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c46:	b2da      	uxtb	r2, r3
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	0a1b      	lsrs	r3, r3, #8
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c56:	b2da      	uxtb	r2, r3
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	b2db      	uxtb	r3, r3
 8008c60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c64:	b2da      	uxtb	r2, r3
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	0d9b      	lsrs	r3, r3, #22
 8008c6e:	b2db      	uxtb	r3, r3
 8008c70:	f003 0301 	and.w	r3, r3, #1
 8008c74:	b2da      	uxtb	r2, r3
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d11a      	bne.n	8008cb6 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	781b      	ldrb	r3, [r3, #0]
 8008c84:	4618      	mov	r0, r3
 8008c86:	f000 f98f 	bl	8008fa8 <RTC_Bcd2ToByte>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	461a      	mov	r2, r3
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	785b      	ldrb	r3, [r3, #1]
 8008c96:	4618      	mov	r0, r3
 8008c98:	f000 f986 	bl	8008fa8 <RTC_Bcd2ToByte>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	461a      	mov	r2, r3
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	789b      	ldrb	r3, [r3, #2]
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f000 f97d 	bl	8008fa8 <RTC_Bcd2ToByte>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	461a      	mov	r2, r3
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8008cb6:	2300      	movs	r3, #0
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3718      	adds	r7, #24
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}

08008cc0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008cc0:	b590      	push	{r4, r7, lr}
 8008cc2:	b087      	sub	sp, #28
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	60f8      	str	r0, [r7, #12]
 8008cc8:	60b9      	str	r1, [r7, #8]
 8008cca:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	7f1b      	ldrb	r3, [r3, #28]
 8008cd4:	2b01      	cmp	r3, #1
 8008cd6:	d101      	bne.n	8008cdc <HAL_RTC_SetDate+0x1c>
 8008cd8:	2302      	movs	r3, #2
 8008cda:	e071      	b.n	8008dc0 <HAL_RTC_SetDate+0x100>
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2201      	movs	r2, #1
 8008ce0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2202      	movs	r2, #2
 8008ce6:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d10e      	bne.n	8008d0c <HAL_RTC_SetDate+0x4c>
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	785b      	ldrb	r3, [r3, #1]
 8008cf2:	f003 0310 	and.w	r3, r3, #16
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d008      	beq.n	8008d0c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	785b      	ldrb	r3, [r3, #1]
 8008cfe:	f023 0310 	bic.w	r3, r3, #16
 8008d02:	b2db      	uxtb	r3, r3
 8008d04:	330a      	adds	r3, #10
 8008d06:	b2da      	uxtb	r2, r3
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d11c      	bne.n	8008d4c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	78db      	ldrb	r3, [r3, #3]
 8008d16:	4618      	mov	r0, r3
 8008d18:	f000 f929 	bl	8008f6e <RTC_ByteToBcd2>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	785b      	ldrb	r3, [r3, #1]
 8008d24:	4618      	mov	r0, r3
 8008d26:	f000 f922 	bl	8008f6e <RTC_ByteToBcd2>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008d2e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	789b      	ldrb	r3, [r3, #2]
 8008d34:	4618      	mov	r0, r3
 8008d36:	f000 f91a 	bl	8008f6e <RTC_ByteToBcd2>
 8008d3a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008d3c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	781b      	ldrb	r3, [r3, #0]
 8008d44:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008d46:	4313      	orrs	r3, r2
 8008d48:	617b      	str	r3, [r7, #20]
 8008d4a:	e00e      	b.n	8008d6a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	78db      	ldrb	r3, [r3, #3]
 8008d50:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	785b      	ldrb	r3, [r3, #1]
 8008d56:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008d58:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8008d5a:	68ba      	ldr	r2, [r7, #8]
 8008d5c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008d5e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008d66:	4313      	orrs	r3, r2
 8008d68:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	22ca      	movs	r2, #202	; 0xca
 8008d70:	625a      	str	r2, [r3, #36]	; 0x24
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	2253      	movs	r2, #83	; 0x53
 8008d78:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008d7a:	68f8      	ldr	r0, [r7, #12]
 8008d7c:	f000 f89b 	bl	8008eb6 <RTC_EnterInitMode>
 8008d80:	4603      	mov	r3, r0
 8008d82:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008d84:	7cfb      	ldrb	r3, [r7, #19]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d10c      	bne.n	8008da4 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681a      	ldr	r2, [r3, #0]
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008d94:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008d98:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008d9a:	68f8      	ldr	r0, [r7, #12]
 8008d9c:	f000 f8c2 	bl	8008f24 <RTC_ExitInitMode>
 8008da0:	4603      	mov	r3, r0
 8008da2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008da4:	7cfb      	ldrb	r3, [r7, #19]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d102      	bne.n	8008db0 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2201      	movs	r2, #1
 8008dae:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	22ff      	movs	r2, #255	; 0xff
 8008db6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	771a      	strb	r2, [r3, #28]

  return status;
 8008dbe:	7cfb      	ldrb	r3, [r7, #19]
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	371c      	adds	r7, #28
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd90      	pop	{r4, r7, pc}

08008dc8 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b086      	sub	sp, #24
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	60f8      	str	r0, [r7, #12]
 8008dd0:	60b9      	str	r1, [r7, #8]
 8008dd2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	685b      	ldr	r3, [r3, #4]
 8008dde:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008de2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008de6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	0c1b      	lsrs	r3, r3, #16
 8008dec:	b2da      	uxtb	r2, r3
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	0a1b      	lsrs	r3, r3, #8
 8008df6:	b2db      	uxtb	r3, r3
 8008df8:	f003 031f 	and.w	r3, r3, #31
 8008dfc:	b2da      	uxtb	r2, r3
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	b2db      	uxtb	r3, r3
 8008e06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e0a:	b2da      	uxtb	r2, r3
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	0b5b      	lsrs	r3, r3, #13
 8008e14:	b2db      	uxtb	r3, r3
 8008e16:	f003 0307 	and.w	r3, r3, #7
 8008e1a:	b2da      	uxtb	r2, r3
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d11a      	bne.n	8008e5c <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	78db      	ldrb	r3, [r3, #3]
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f000 f8bc 	bl	8008fa8 <RTC_Bcd2ToByte>
 8008e30:	4603      	mov	r3, r0
 8008e32:	461a      	mov	r2, r3
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	785b      	ldrb	r3, [r3, #1]
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f000 f8b3 	bl	8008fa8 <RTC_Bcd2ToByte>
 8008e42:	4603      	mov	r3, r0
 8008e44:	461a      	mov	r2, r3
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	789b      	ldrb	r3, [r3, #2]
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f000 f8aa 	bl	8008fa8 <RTC_Bcd2ToByte>
 8008e54:	4603      	mov	r3, r0
 8008e56:	461a      	mov	r2, r3
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008e5c:	2300      	movs	r3, #0
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3718      	adds	r7, #24
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}

08008e66 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008e66:	b580      	push	{r7, lr}
 8008e68:	b084      	sub	sp, #16
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	68da      	ldr	r2, [r3, #12]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008e80:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008e82:	f7fd fcf5 	bl	8006870 <HAL_GetTick>
 8008e86:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008e88:	e009      	b.n	8008e9e <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008e8a:	f7fd fcf1 	bl	8006870 <HAL_GetTick>
 8008e8e:	4602      	mov	r2, r0
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	1ad3      	subs	r3, r2, r3
 8008e94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e98:	d901      	bls.n	8008e9e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008e9a:	2303      	movs	r3, #3
 8008e9c:	e007      	b.n	8008eae <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	68db      	ldr	r3, [r3, #12]
 8008ea4:	f003 0320 	and.w	r3, r3, #32
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d0ee      	beq.n	8008e8a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008eac:	2300      	movs	r3, #0
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3710      	adds	r7, #16
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}

08008eb6 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008eb6:	b580      	push	{r7, lr}
 8008eb8:	b084      	sub	sp, #16
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	68db      	ldr	r3, [r3, #12]
 8008ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d122      	bne.n	8008f1a <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	68da      	ldr	r2, [r3, #12]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008ee2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008ee4:	f7fd fcc4 	bl	8006870 <HAL_GetTick>
 8008ee8:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008eea:	e00c      	b.n	8008f06 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008eec:	f7fd fcc0 	bl	8006870 <HAL_GetTick>
 8008ef0:	4602      	mov	r2, r0
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	1ad3      	subs	r3, r2, r3
 8008ef6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008efa:	d904      	bls.n	8008f06 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2204      	movs	r2, #4
 8008f00:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8008f02:	2301      	movs	r3, #1
 8008f04:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	68db      	ldr	r3, [r3, #12]
 8008f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d102      	bne.n	8008f1a <RTC_EnterInitMode+0x64>
 8008f14:	7bfb      	ldrb	r3, [r7, #15]
 8008f16:	2b01      	cmp	r3, #1
 8008f18:	d1e8      	bne.n	8008eec <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8008f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3710      	adds	r7, #16
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b084      	sub	sp, #16
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	68da      	ldr	r2, [r3, #12]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f3e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	689b      	ldr	r3, [r3, #8]
 8008f46:	f003 0320 	and.w	r3, r3, #32
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d10a      	bne.n	8008f64 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f7ff ff89 	bl	8008e66 <HAL_RTC_WaitForSynchro>
 8008f54:	4603      	mov	r3, r0
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d004      	beq.n	8008f64 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2204      	movs	r2, #4
 8008f5e:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8008f60:	2301      	movs	r3, #1
 8008f62:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8008f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3710      	adds	r7, #16
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}

08008f6e <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8008f6e:	b480      	push	{r7}
 8008f70:	b085      	sub	sp, #20
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	4603      	mov	r3, r0
 8008f76:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8008f78:	2300      	movs	r3, #0
 8008f7a:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8008f7c:	e005      	b.n	8008f8a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008f7e:	7bfb      	ldrb	r3, [r7, #15]
 8008f80:	3301      	adds	r3, #1
 8008f82:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8008f84:	79fb      	ldrb	r3, [r7, #7]
 8008f86:	3b0a      	subs	r3, #10
 8008f88:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8008f8a:	79fb      	ldrb	r3, [r7, #7]
 8008f8c:	2b09      	cmp	r3, #9
 8008f8e:	d8f6      	bhi.n	8008f7e <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8008f90:	7bfb      	ldrb	r3, [r7, #15]
 8008f92:	011b      	lsls	r3, r3, #4
 8008f94:	b2da      	uxtb	r2, r3
 8008f96:	79fb      	ldrb	r3, [r7, #7]
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	b2db      	uxtb	r3, r3
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3714      	adds	r7, #20
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa6:	4770      	bx	lr

08008fa8 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b085      	sub	sp, #20
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	4603      	mov	r3, r0
 8008fb0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8008fb6:	79fb      	ldrb	r3, [r7, #7]
 8008fb8:	091b      	lsrs	r3, r3, #4
 8008fba:	b2db      	uxtb	r3, r3
 8008fbc:	461a      	mov	r2, r3
 8008fbe:	0092      	lsls	r2, r2, #2
 8008fc0:	4413      	add	r3, r2
 8008fc2:	005b      	lsls	r3, r3, #1
 8008fc4:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8008fc6:	79fb      	ldrb	r3, [r7, #7]
 8008fc8:	f003 030f 	and.w	r3, r3, #15
 8008fcc:	b2da      	uxtb	r2, r3
 8008fce:	7bfb      	ldrb	r3, [r7, #15]
 8008fd0:	4413      	add	r3, r2
 8008fd2:	b2db      	uxtb	r3, r3
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3714      	adds	r7, #20
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fde:	4770      	bx	lr

08008fe0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d101      	bne.n	8008ff2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008fee:	2301      	movs	r3, #1
 8008ff0:	e022      	b.n	8009038 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008ff8:	b2db      	uxtb	r3, r3
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d105      	bne.n	800900a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2200      	movs	r2, #0
 8009002:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f7fc fc93 	bl	8005930 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2203      	movs	r2, #3
 800900e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f000 f814 	bl	8009040 <HAL_SD_InitCard>
 8009018:	4603      	mov	r3, r0
 800901a:	2b00      	cmp	r3, #0
 800901c:	d001      	beq.n	8009022 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800901e:	2301      	movs	r3, #1
 8009020:	e00a      	b.n	8009038 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2200      	movs	r2, #0
 8009026:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2200      	movs	r2, #0
 800902c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2201      	movs	r2, #1
 8009032:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009036:	2300      	movs	r3, #0
}
 8009038:	4618      	mov	r0, r3
 800903a:	3708      	adds	r7, #8
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}

08009040 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009040:	b5b0      	push	{r4, r5, r7, lr}
 8009042:	b08e      	sub	sp, #56	; 0x38
 8009044:	af04      	add	r7, sp, #16
 8009046:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8009048:	2300      	movs	r3, #0
 800904a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800904c:	2300      	movs	r3, #0
 800904e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8009050:	2300      	movs	r3, #0
 8009052:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8009054:	2300      	movs	r3, #0
 8009056:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8009058:	2300      	movs	r3, #0
 800905a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800905c:	2376      	movs	r3, #118	; 0x76
 800905e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681d      	ldr	r5, [r3, #0]
 8009064:	466c      	mov	r4, sp
 8009066:	f107 0314 	add.w	r3, r7, #20
 800906a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800906e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009072:	f107 0308 	add.w	r3, r7, #8
 8009076:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009078:	4628      	mov	r0, r5
 800907a:	f003 fc69 	bl	800c950 <SDIO_Init>
 800907e:	4603      	mov	r3, r0
 8009080:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8009084:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009088:	2b00      	cmp	r3, #0
 800908a:	d001      	beq.n	8009090 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800908c:	2301      	movs	r3, #1
 800908e:	e04f      	b.n	8009130 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8009090:	4b29      	ldr	r3, [pc, #164]	; (8009138 <HAL_SD_InitCard+0xf8>)
 8009092:	2200      	movs	r2, #0
 8009094:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	4618      	mov	r0, r3
 800909c:	f003 fca1 	bl	800c9e2 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80090a0:	4b25      	ldr	r3, [pc, #148]	; (8009138 <HAL_SD_InitCard+0xf8>)
 80090a2:	2201      	movs	r2, #1
 80090a4:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80090a6:	2002      	movs	r0, #2
 80090a8:	f7fd fbee 	bl	8006888 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f001 f805 	bl	800a0bc <SD_PowerON>
 80090b2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80090b4:	6a3b      	ldr	r3, [r7, #32]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d00b      	beq.n	80090d2 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2201      	movs	r2, #1
 80090be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090c6:	6a3b      	ldr	r3, [r7, #32]
 80090c8:	431a      	orrs	r2, r3
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80090ce:	2301      	movs	r3, #1
 80090d0:	e02e      	b.n	8009130 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 ff24 	bl	8009f20 <SD_InitCard>
 80090d8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80090da:	6a3b      	ldr	r3, [r7, #32]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d00b      	beq.n	80090f8 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2201      	movs	r2, #1
 80090e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090ec:	6a3b      	ldr	r3, [r7, #32]
 80090ee:	431a      	orrs	r2, r3
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80090f4:	2301      	movs	r3, #1
 80090f6:	e01b      	b.n	8009130 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009100:	4618      	mov	r0, r3
 8009102:	f003 fd00 	bl	800cb06 <SDMMC_CmdBlockLength>
 8009106:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009108:	6a3b      	ldr	r3, [r7, #32]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d00f      	beq.n	800912e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	4a0a      	ldr	r2, [pc, #40]	; (800913c <HAL_SD_InitCard+0xfc>)
 8009114:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800911a:	6a3b      	ldr	r3, [r7, #32]
 800911c:	431a      	orrs	r2, r3
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2201      	movs	r2, #1
 8009126:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800912a:	2301      	movs	r3, #1
 800912c:	e000      	b.n	8009130 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800912e:	2300      	movs	r3, #0
}
 8009130:	4618      	mov	r0, r3
 8009132:	3728      	adds	r7, #40	; 0x28
 8009134:	46bd      	mov	sp, r7
 8009136:	bdb0      	pop	{r4, r5, r7, pc}
 8009138:	422580a0 	.word	0x422580a0
 800913c:	004005ff 	.word	0x004005ff

08009140 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b08c      	sub	sp, #48	; 0x30
 8009144:	af00      	add	r7, sp, #0
 8009146:	60f8      	str	r0, [r7, #12]
 8009148:	60b9      	str	r1, [r7, #8]
 800914a:	607a      	str	r2, [r7, #4]
 800914c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d107      	bne.n	8009168 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800915c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009164:	2301      	movs	r3, #1
 8009166:	e0c0      	b.n	80092ea <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800916e:	b2db      	uxtb	r3, r3
 8009170:	2b01      	cmp	r3, #1
 8009172:	f040 80b9 	bne.w	80092e8 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	2200      	movs	r2, #0
 800917a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800917c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	441a      	add	r2, r3
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009186:	429a      	cmp	r2, r3
 8009188:	d907      	bls.n	800919a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800918e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009196:	2301      	movs	r3, #1
 8009198:	e0a7      	b.n	80092ea <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2203      	movs	r2, #3
 800919e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	2200      	movs	r2, #0
 80091a8:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091b0:	68fa      	ldr	r2, [r7, #12]
 80091b2:	6812      	ldr	r2, [r2, #0]
 80091b4:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 80091b8:	f043 0302 	orr.w	r3, r3, #2
 80091bc:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091c2:	4a4c      	ldr	r2, [pc, #304]	; (80092f4 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 80091c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ca:	4a4b      	ldr	r2, [pc, #300]	; (80092f8 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80091cc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091d2:	2200      	movs	r2, #0
 80091d4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091da:	2200      	movs	r2, #0
 80091dc:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ee:	689a      	ldr	r2, [r3, #8]
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	430a      	orrs	r2, r1
 80091f8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	3380      	adds	r3, #128	; 0x80
 8009204:	4619      	mov	r1, r3
 8009206:	68ba      	ldr	r2, [r7, #8]
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	025b      	lsls	r3, r3, #9
 800920c:	089b      	lsrs	r3, r3, #2
 800920e:	f7fe f921 	bl	8007454 <HAL_DMA_Start_IT>
 8009212:	4603      	mov	r3, r0
 8009214:	2b00      	cmp	r3, #0
 8009216:	d017      	beq.n	8009248 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8009226:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a33      	ldr	r2, [pc, #204]	; (80092fc <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800922e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009234:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	2201      	movs	r2, #1
 8009240:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009244:	2301      	movs	r3, #1
 8009246:	e050      	b.n	80092ea <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8009248:	4b2d      	ldr	r3, [pc, #180]	; (8009300 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800924a:	2201      	movs	r2, #1
 800924c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009252:	2b01      	cmp	r3, #1
 8009254:	d002      	beq.n	800925c <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8009256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009258:	025b      	lsls	r3, r3, #9
 800925a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800925c:	f04f 33ff 	mov.w	r3, #4294967295
 8009260:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	025b      	lsls	r3, r3, #9
 8009266:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8009268:	2390      	movs	r3, #144	; 0x90
 800926a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800926c:	2302      	movs	r3, #2
 800926e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009270:	2300      	movs	r3, #0
 8009272:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8009274:	2301      	movs	r3, #1
 8009276:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f107 0210 	add.w	r2, r7, #16
 8009280:	4611      	mov	r1, r2
 8009282:	4618      	mov	r0, r3
 8009284:	f003 fc13 	bl	800caae <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	2b01      	cmp	r3, #1
 800928c:	d90a      	bls.n	80092a4 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	2282      	movs	r2, #130	; 0x82
 8009292:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800929a:	4618      	mov	r0, r3
 800929c:	f003 fc77 	bl	800cb8e <SDMMC_CmdReadMultiBlock>
 80092a0:	62f8      	str	r0, [r7, #44]	; 0x2c
 80092a2:	e009      	b.n	80092b8 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2281      	movs	r2, #129	; 0x81
 80092a8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80092b0:	4618      	mov	r0, r3
 80092b2:	f003 fc4a 	bl	800cb4a <SDMMC_CmdReadSingleBlock>
 80092b6:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80092b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d012      	beq.n	80092e4 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	4a0e      	ldr	r2, [pc, #56]	; (80092fc <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80092c4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092cc:	431a      	orrs	r2, r3
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2201      	movs	r2, #1
 80092d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2200      	movs	r2, #0
 80092de:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80092e0:	2301      	movs	r3, #1
 80092e2:	e002      	b.n	80092ea <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 80092e4:	2300      	movs	r3, #0
 80092e6:	e000      	b.n	80092ea <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 80092e8:	2302      	movs	r3, #2
  }
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3730      	adds	r7, #48	; 0x30
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}
 80092f2:	bf00      	nop
 80092f4:	08009d2f 	.word	0x08009d2f
 80092f8:	08009da1 	.word	0x08009da1
 80092fc:	004005ff 	.word	0x004005ff
 8009300:	4225858c 	.word	0x4225858c

08009304 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b08c      	sub	sp, #48	; 0x30
 8009308:	af00      	add	r7, sp, #0
 800930a:	60f8      	str	r0, [r7, #12]
 800930c:	60b9      	str	r1, [r7, #8]
 800930e:	607a      	str	r2, [r7, #4]
 8009310:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d107      	bne.n	800932c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009320:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009328:	2301      	movs	r3, #1
 800932a:	e0c5      	b.n	80094b8 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009332:	b2db      	uxtb	r3, r3
 8009334:	2b01      	cmp	r3, #1
 8009336:	f040 80be 	bne.w	80094b6 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2200      	movs	r2, #0
 800933e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009340:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	441a      	add	r2, r3
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800934a:	429a      	cmp	r2, r3
 800934c:	d907      	bls.n	800935e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009352:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800935a:	2301      	movs	r3, #1
 800935c:	e0ac      	b.n	80094b8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	2203      	movs	r2, #3
 8009362:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	2200      	movs	r2, #0
 800936c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009374:	68fa      	ldr	r2, [r7, #12]
 8009376:	6812      	ldr	r2, [r2, #0]
 8009378:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 800937c:	f043 0302 	orr.w	r3, r3, #2
 8009380:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009386:	4a4e      	ldr	r2, [pc, #312]	; (80094c0 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8009388:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800938e:	4a4d      	ldr	r2, [pc, #308]	; (80094c4 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8009390:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009396:	2200      	movs	r2, #0
 8009398:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800939e:	2b01      	cmp	r3, #1
 80093a0:	d002      	beq.n	80093a8 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 80093a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093a4:	025b      	lsls	r3, r3, #9
 80093a6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	2b01      	cmp	r3, #1
 80093ac:	d90a      	bls.n	80093c4 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	22a0      	movs	r2, #160	; 0xa0
 80093b2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80093ba:	4618      	mov	r0, r3
 80093bc:	f003 fc2b 	bl	800cc16 <SDMMC_CmdWriteMultiBlock>
 80093c0:	62f8      	str	r0, [r7, #44]	; 0x2c
 80093c2:	e009      	b.n	80093d8 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	2290      	movs	r2, #144	; 0x90
 80093c8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80093d0:	4618      	mov	r0, r3
 80093d2:	f003 fbfe 	bl	800cbd2 <SDMMC_CmdWriteSingleBlock>
 80093d6:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80093d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d012      	beq.n	8009404 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4a39      	ldr	r2, [pc, #228]	; (80094c8 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80093e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ec:	431a      	orrs	r2, r3
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2201      	movs	r2, #1
 80093f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	2200      	movs	r2, #0
 80093fe:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009400:	2301      	movs	r3, #1
 8009402:	e059      	b.n	80094b8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8009404:	4b31      	ldr	r3, [pc, #196]	; (80094cc <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8009406:	2201      	movs	r2, #1
 8009408:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800940e:	2240      	movs	r2, #64	; 0x40
 8009410:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009422:	689a      	ldr	r2, [r3, #8]
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	430a      	orrs	r2, r1
 800942c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009432:	68b9      	ldr	r1, [r7, #8]
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	3380      	adds	r3, #128	; 0x80
 800943a:	461a      	mov	r2, r3
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	025b      	lsls	r3, r3, #9
 8009440:	089b      	lsrs	r3, r3, #2
 8009442:	f7fe f807 	bl	8007454 <HAL_DMA_Start_IT>
 8009446:	4603      	mov	r3, r0
 8009448:	2b00      	cmp	r3, #0
 800944a:	d01c      	beq.n	8009486 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009452:	68fa      	ldr	r2, [r7, #12]
 8009454:	6812      	ldr	r2, [r2, #0]
 8009456:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 800945a:	f023 0302 	bic.w	r3, r3, #2
 800945e:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a18      	ldr	r2, [pc, #96]	; (80094c8 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8009466:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800946c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	2201      	movs	r2, #1
 8009478:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	2200      	movs	r2, #0
 8009480:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009482:	2301      	movs	r3, #1
 8009484:	e018      	b.n	80094b8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009486:	f04f 33ff 	mov.w	r3, #4294967295
 800948a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	025b      	lsls	r3, r3, #9
 8009490:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8009492:	2390      	movs	r3, #144	; 0x90
 8009494:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8009496:	2300      	movs	r3, #0
 8009498:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800949a:	2300      	movs	r3, #0
 800949c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800949e:	2301      	movs	r3, #1
 80094a0:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f107 0210 	add.w	r2, r7, #16
 80094aa:	4611      	mov	r1, r2
 80094ac:	4618      	mov	r0, r3
 80094ae:	f003 fafe 	bl	800caae <SDIO_ConfigData>

      return HAL_OK;
 80094b2:	2300      	movs	r3, #0
 80094b4:	e000      	b.n	80094b8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 80094b6:	2302      	movs	r3, #2
  }
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	3730      	adds	r7, #48	; 0x30
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}
 80094c0:	08009d05 	.word	0x08009d05
 80094c4:	08009da1 	.word	0x08009da1
 80094c8:	004005ff 	.word	0x004005ff
 80094cc:	4225858c 	.word	0x4225858c

080094d0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b084      	sub	sp, #16
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094dc:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d008      	beq.n	80094fe <HAL_SD_IRQHandler+0x2e>
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f003 0308 	and.w	r3, r3, #8
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d003      	beq.n	80094fe <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f000 ffff 	bl	800a4fa <SD_Read_IT>
 80094fc:	e165      	b.n	80097ca <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009508:	2b00      	cmp	r3, #0
 800950a:	f000 808f 	beq.w	800962c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009516:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800951e:	687a      	ldr	r2, [r7, #4]
 8009520:	6812      	ldr	r2, [r2, #0]
 8009522:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8009526:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800952a:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f022 0201 	bic.w	r2, r2, #1
 800953a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	f003 0308 	and.w	r3, r3, #8
 8009542:	2b00      	cmp	r3, #0
 8009544:	d039      	beq.n	80095ba <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	f003 0302 	and.w	r3, r3, #2
 800954c:	2b00      	cmp	r3, #0
 800954e:	d104      	bne.n	800955a <HAL_SD_IRQHandler+0x8a>
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	f003 0320 	and.w	r3, r3, #32
 8009556:	2b00      	cmp	r3, #0
 8009558:	d011      	beq.n	800957e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	4618      	mov	r0, r3
 8009560:	f003 fb7c 	bl	800cc5c <SDMMC_CmdStopTransfer>
 8009564:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d008      	beq.n	800957e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	431a      	orrs	r2, r3
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f000 f92f 	bl	80097dc <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f240 523a 	movw	r2, #1338	; 0x53a
 8009586:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2201      	movs	r2, #1
 800958c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2200      	movs	r2, #0
 8009594:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	f003 0301 	and.w	r3, r3, #1
 800959c:	2b00      	cmp	r3, #0
 800959e:	d104      	bne.n	80095aa <HAL_SD_IRQHandler+0xda>
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	f003 0302 	and.w	r3, r3, #2
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d003      	beq.n	80095b2 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f003 ffea 	bl	800d584 <HAL_SD_RxCpltCallback>
 80095b0:	e10b      	b.n	80097ca <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f003 ffdc 	bl	800d570 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80095b8:	e107      	b.n	80097ca <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	f000 8102 	beq.w	80097ca <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	f003 0320 	and.w	r3, r3, #32
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d011      	beq.n	80095f4 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4618      	mov	r0, r3
 80095d6:	f003 fb41 	bl	800cc5c <SDMMC_CmdStopTransfer>
 80095da:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d008      	beq.n	80095f4 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	431a      	orrs	r2, r3
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f000 f8f4 	bl	80097dc <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f003 0301 	and.w	r3, r3, #1
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	f040 80e5 	bne.w	80097ca <HAL_SD_IRQHandler+0x2fa>
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	f003 0302 	and.w	r3, r3, #2
 8009606:	2b00      	cmp	r3, #0
 8009608:	f040 80df 	bne.w	80097ca <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f022 0208 	bic.w	r2, r2, #8
 800961a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2201      	movs	r2, #1
 8009620:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f003 ffa3 	bl	800d570 <HAL_SD_TxCpltCallback>
}
 800962a:	e0ce      	b.n	80097ca <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009632:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009636:	2b00      	cmp	r3, #0
 8009638:	d008      	beq.n	800964c <HAL_SD_IRQHandler+0x17c>
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	f003 0308 	and.w	r3, r3, #8
 8009640:	2b00      	cmp	r3, #0
 8009642:	d003      	beq.n	800964c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f000 ffa9 	bl	800a59c <SD_Write_IT>
 800964a:	e0be      	b.n	80097ca <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009652:	f240 233a 	movw	r3, #570	; 0x23a
 8009656:	4013      	ands	r3, r2
 8009658:	2b00      	cmp	r3, #0
 800965a:	f000 80b6 	beq.w	80097ca <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009664:	f003 0302 	and.w	r3, r3, #2
 8009668:	2b00      	cmp	r3, #0
 800966a:	d005      	beq.n	8009678 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009670:	f043 0202 	orr.w	r2, r3, #2
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800967e:	f003 0308 	and.w	r3, r3, #8
 8009682:	2b00      	cmp	r3, #0
 8009684:	d005      	beq.n	8009692 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800968a:	f043 0208 	orr.w	r2, r3, #8
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009698:	f003 0320 	and.w	r3, r3, #32
 800969c:	2b00      	cmp	r3, #0
 800969e:	d005      	beq.n	80096ac <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096a4:	f043 0220 	orr.w	r2, r3, #32
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096b2:	f003 0310 	and.w	r3, r3, #16
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d005      	beq.n	80096c6 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096be:	f043 0210 	orr.w	r2, r3, #16
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d005      	beq.n	80096e0 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096d8:	f043 0208 	orr.w	r2, r3, #8
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f240 723a 	movw	r2, #1850	; 0x73a
 80096e8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096f0:	687a      	ldr	r2, [r7, #4]
 80096f2:	6812      	ldr	r2, [r2, #0]
 80096f4:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 80096f8:	f023 0302 	bic.w	r3, r3, #2
 80096fc:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	4618      	mov	r0, r3
 8009704:	f003 faaa 	bl	800cc5c <SDMMC_CmdStopTransfer>
 8009708:	4602      	mov	r2, r0
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800970e:	431a      	orrs	r2, r3
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	f003 0308 	and.w	r3, r3, #8
 800971a:	2b00      	cmp	r3, #0
 800971c:	d00a      	beq.n	8009734 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2201      	movs	r2, #1
 8009722:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2200      	movs	r2, #0
 800972a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f000 f855 	bl	80097dc <HAL_SD_ErrorCallback>
}
 8009732:	e04a      	b.n	80097ca <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800973a:	2b00      	cmp	r3, #0
 800973c:	d045      	beq.n	80097ca <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	f003 0310 	and.w	r3, r3, #16
 8009744:	2b00      	cmp	r3, #0
 8009746:	d104      	bne.n	8009752 <HAL_SD_IRQHandler+0x282>
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	f003 0320 	and.w	r3, r3, #32
 800974e:	2b00      	cmp	r3, #0
 8009750:	d011      	beq.n	8009776 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009756:	4a1f      	ldr	r2, [pc, #124]	; (80097d4 <HAL_SD_IRQHandler+0x304>)
 8009758:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800975e:	4618      	mov	r0, r3
 8009760:	f7fd ff40 	bl	80075e4 <HAL_DMA_Abort_IT>
 8009764:	4603      	mov	r3, r0
 8009766:	2b00      	cmp	r3, #0
 8009768:	d02f      	beq.n	80097ca <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800976e:	4618      	mov	r0, r3
 8009770:	f000 fb68 	bl	8009e44 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8009774:	e029      	b.n	80097ca <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	f003 0301 	and.w	r3, r3, #1
 800977c:	2b00      	cmp	r3, #0
 800977e:	d104      	bne.n	800978a <HAL_SD_IRQHandler+0x2ba>
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	f003 0302 	and.w	r3, r3, #2
 8009786:	2b00      	cmp	r3, #0
 8009788:	d011      	beq.n	80097ae <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800978e:	4a12      	ldr	r2, [pc, #72]	; (80097d8 <HAL_SD_IRQHandler+0x308>)
 8009790:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009796:	4618      	mov	r0, r3
 8009798:	f7fd ff24 	bl	80075e4 <HAL_DMA_Abort_IT>
 800979c:	4603      	mov	r3, r0
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d013      	beq.n	80097ca <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097a6:	4618      	mov	r0, r3
 80097a8:	f000 fb83 	bl	8009eb2 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80097ac:	e00d      	b.n	80097ca <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2200      	movs	r2, #0
 80097b2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2201      	movs	r2, #1
 80097b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2200      	movs	r2, #0
 80097c0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f003 feca 	bl	800d55c <HAL_SD_AbortCallback>
}
 80097c8:	e7ff      	b.n	80097ca <HAL_SD_IRQHandler+0x2fa>
 80097ca:	bf00      	nop
 80097cc:	3710      	adds	r7, #16
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}
 80097d2:	bf00      	nop
 80097d4:	08009e45 	.word	0x08009e45
 80097d8:	08009eb3 	.word	0x08009eb3

080097dc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80097dc:	b480      	push	{r7}
 80097de:	b083      	sub	sp, #12
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80097e4:	bf00      	nop
 80097e6:	370c      	adds	r7, #12
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr

080097f0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b083      	sub	sp, #12
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
 80097f8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80097fe:	0f9b      	lsrs	r3, r3, #30
 8009800:	b2da      	uxtb	r2, r3
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800980a:	0e9b      	lsrs	r3, r3, #26
 800980c:	b2db      	uxtb	r3, r3
 800980e:	f003 030f 	and.w	r3, r3, #15
 8009812:	b2da      	uxtb	r2, r3
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800981c:	0e1b      	lsrs	r3, r3, #24
 800981e:	b2db      	uxtb	r3, r3
 8009820:	f003 0303 	and.w	r3, r3, #3
 8009824:	b2da      	uxtb	r2, r3
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800982e:	0c1b      	lsrs	r3, r3, #16
 8009830:	b2da      	uxtb	r2, r3
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800983a:	0a1b      	lsrs	r3, r3, #8
 800983c:	b2da      	uxtb	r2, r3
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009846:	b2da      	uxtb	r2, r3
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009850:	0d1b      	lsrs	r3, r3, #20
 8009852:	b29a      	uxth	r2, r3
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800985c:	0c1b      	lsrs	r3, r3, #16
 800985e:	b2db      	uxtb	r3, r3
 8009860:	f003 030f 	and.w	r3, r3, #15
 8009864:	b2da      	uxtb	r2, r3
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800986e:	0bdb      	lsrs	r3, r3, #15
 8009870:	b2db      	uxtb	r3, r3
 8009872:	f003 0301 	and.w	r3, r3, #1
 8009876:	b2da      	uxtb	r2, r3
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009880:	0b9b      	lsrs	r3, r3, #14
 8009882:	b2db      	uxtb	r3, r3
 8009884:	f003 0301 	and.w	r3, r3, #1
 8009888:	b2da      	uxtb	r2, r3
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009892:	0b5b      	lsrs	r3, r3, #13
 8009894:	b2db      	uxtb	r3, r3
 8009896:	f003 0301 	and.w	r3, r3, #1
 800989a:	b2da      	uxtb	r2, r3
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80098a4:	0b1b      	lsrs	r3, r3, #12
 80098a6:	b2db      	uxtb	r3, r3
 80098a8:	f003 0301 	and.w	r3, r3, #1
 80098ac:	b2da      	uxtb	r2, r3
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	2200      	movs	r2, #0
 80098b6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d163      	bne.n	8009988 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80098c4:	009a      	lsls	r2, r3, #2
 80098c6:	f640 73fc 	movw	r3, #4092	; 0xffc
 80098ca:	4013      	ands	r3, r2
 80098cc:	687a      	ldr	r2, [r7, #4]
 80098ce:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80098d0:	0f92      	lsrs	r2, r2, #30
 80098d2:	431a      	orrs	r2, r3
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098dc:	0edb      	lsrs	r3, r3, #27
 80098de:	b2db      	uxtb	r3, r3
 80098e0:	f003 0307 	and.w	r3, r3, #7
 80098e4:	b2da      	uxtb	r2, r3
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098ee:	0e1b      	lsrs	r3, r3, #24
 80098f0:	b2db      	uxtb	r3, r3
 80098f2:	f003 0307 	and.w	r3, r3, #7
 80098f6:	b2da      	uxtb	r2, r3
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009900:	0d5b      	lsrs	r3, r3, #21
 8009902:	b2db      	uxtb	r3, r3
 8009904:	f003 0307 	and.w	r3, r3, #7
 8009908:	b2da      	uxtb	r2, r3
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009912:	0c9b      	lsrs	r3, r3, #18
 8009914:	b2db      	uxtb	r3, r3
 8009916:	f003 0307 	and.w	r3, r3, #7
 800991a:	b2da      	uxtb	r2, r3
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009924:	0bdb      	lsrs	r3, r3, #15
 8009926:	b2db      	uxtb	r3, r3
 8009928:	f003 0307 	and.w	r3, r3, #7
 800992c:	b2da      	uxtb	r2, r3
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	691b      	ldr	r3, [r3, #16]
 8009936:	1c5a      	adds	r2, r3, #1
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	7e1b      	ldrb	r3, [r3, #24]
 8009940:	b2db      	uxtb	r3, r3
 8009942:	f003 0307 	and.w	r3, r3, #7
 8009946:	3302      	adds	r3, #2
 8009948:	2201      	movs	r2, #1
 800994a:	fa02 f303 	lsl.w	r3, r2, r3
 800994e:	687a      	ldr	r2, [r7, #4]
 8009950:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8009952:	fb03 f202 	mul.w	r2, r3, r2
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	7a1b      	ldrb	r3, [r3, #8]
 800995e:	b2db      	uxtb	r3, r3
 8009960:	f003 030f 	and.w	r3, r3, #15
 8009964:	2201      	movs	r2, #1
 8009966:	409a      	lsls	r2, r3
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009970:	687a      	ldr	r2, [r7, #4]
 8009972:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009974:	0a52      	lsrs	r2, r2, #9
 8009976:	fb03 f202 	mul.w	r2, r3, r2
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009984:	661a      	str	r2, [r3, #96]	; 0x60
 8009986:	e031      	b.n	80099ec <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800998c:	2b01      	cmp	r3, #1
 800998e:	d11d      	bne.n	80099cc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009994:	041b      	lsls	r3, r3, #16
 8009996:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800999e:	0c1b      	lsrs	r3, r3, #16
 80099a0:	431a      	orrs	r2, r3
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	691b      	ldr	r3, [r3, #16]
 80099aa:	3301      	adds	r3, #1
 80099ac:	029a      	lsls	r2, r3, #10
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80099c0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	661a      	str	r2, [r3, #96]	; 0x60
 80099ca:	e00f      	b.n	80099ec <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	4a58      	ldr	r2, [pc, #352]	; (8009b34 <HAL_SD_GetCardCSD+0x344>)
 80099d2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099d8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2201      	movs	r2, #1
 80099e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80099e8:	2301      	movs	r3, #1
 80099ea:	e09d      	b.n	8009b28 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099f0:	0b9b      	lsrs	r3, r3, #14
 80099f2:	b2db      	uxtb	r3, r3
 80099f4:	f003 0301 	and.w	r3, r3, #1
 80099f8:	b2da      	uxtb	r2, r3
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a02:	09db      	lsrs	r3, r3, #7
 8009a04:	b2db      	uxtb	r3, r3
 8009a06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a0a:	b2da      	uxtb	r2, r3
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a14:	b2db      	uxtb	r3, r3
 8009a16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a1a:	b2da      	uxtb	r2, r3
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a24:	0fdb      	lsrs	r3, r3, #31
 8009a26:	b2da      	uxtb	r2, r3
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a30:	0f5b      	lsrs	r3, r3, #29
 8009a32:	b2db      	uxtb	r3, r3
 8009a34:	f003 0303 	and.w	r3, r3, #3
 8009a38:	b2da      	uxtb	r2, r3
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a42:	0e9b      	lsrs	r3, r3, #26
 8009a44:	b2db      	uxtb	r3, r3
 8009a46:	f003 0307 	and.w	r3, r3, #7
 8009a4a:	b2da      	uxtb	r2, r3
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a54:	0d9b      	lsrs	r3, r3, #22
 8009a56:	b2db      	uxtb	r3, r3
 8009a58:	f003 030f 	and.w	r3, r3, #15
 8009a5c:	b2da      	uxtb	r2, r3
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a66:	0d5b      	lsrs	r3, r3, #21
 8009a68:	b2db      	uxtb	r3, r3
 8009a6a:	f003 0301 	and.w	r3, r3, #1
 8009a6e:	b2da      	uxtb	r2, r3
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a82:	0c1b      	lsrs	r3, r3, #16
 8009a84:	b2db      	uxtb	r3, r3
 8009a86:	f003 0301 	and.w	r3, r3, #1
 8009a8a:	b2da      	uxtb	r2, r3
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a96:	0bdb      	lsrs	r3, r3, #15
 8009a98:	b2db      	uxtb	r3, r3
 8009a9a:	f003 0301 	and.w	r3, r3, #1
 8009a9e:	b2da      	uxtb	r2, r3
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009aaa:	0b9b      	lsrs	r3, r3, #14
 8009aac:	b2db      	uxtb	r3, r3
 8009aae:	f003 0301 	and.w	r3, r3, #1
 8009ab2:	b2da      	uxtb	r2, r3
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009abe:	0b5b      	lsrs	r3, r3, #13
 8009ac0:	b2db      	uxtb	r3, r3
 8009ac2:	f003 0301 	and.w	r3, r3, #1
 8009ac6:	b2da      	uxtb	r2, r3
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ad2:	0b1b      	lsrs	r3, r3, #12
 8009ad4:	b2db      	uxtb	r3, r3
 8009ad6:	f003 0301 	and.w	r3, r3, #1
 8009ada:	b2da      	uxtb	r2, r3
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ae6:	0a9b      	lsrs	r3, r3, #10
 8009ae8:	b2db      	uxtb	r3, r3
 8009aea:	f003 0303 	and.w	r3, r3, #3
 8009aee:	b2da      	uxtb	r2, r3
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009afa:	0a1b      	lsrs	r3, r3, #8
 8009afc:	b2db      	uxtb	r3, r3
 8009afe:	f003 0303 	and.w	r3, r3, #3
 8009b02:	b2da      	uxtb	r2, r3
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b0e:	085b      	lsrs	r3, r3, #1
 8009b10:	b2db      	uxtb	r3, r3
 8009b12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b16:	b2da      	uxtb	r2, r3
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	2201      	movs	r2, #1
 8009b22:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8009b26:	2300      	movs	r3, #0
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	370c      	adds	r7, #12
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b32:	4770      	bx	lr
 8009b34:	004005ff 	.word	0x004005ff

08009b38 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b083      	sub	sp, #12
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
 8009b40:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009b82:	2300      	movs	r3, #0
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	370c      	adds	r7, #12
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8e:	4770      	bx	lr

08009b90 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009b90:	b5b0      	push	{r4, r5, r7, lr}
 8009b92:	b08e      	sub	sp, #56	; 0x38
 8009b94:	af04      	add	r7, sp, #16
 8009b96:	6078      	str	r0, [r7, #4]
 8009b98:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2203      	movs	r2, #3
 8009ba4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bac:	2b03      	cmp	r3, #3
 8009bae:	d02e      	beq.n	8009c0e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bb6:	d106      	bne.n	8009bc6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bbc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	639a      	str	r2, [r3, #56]	; 0x38
 8009bc4:	e029      	b.n	8009c1a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009bcc:	d10a      	bne.n	8009be4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f000 fb2a 	bl	800a228 <SD_WideBus_Enable>
 8009bd4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009bda:	6a3b      	ldr	r3, [r7, #32]
 8009bdc:	431a      	orrs	r2, r3
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	639a      	str	r2, [r3, #56]	; 0x38
 8009be2:	e01a      	b.n	8009c1a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d10a      	bne.n	8009c00 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f000 fb67 	bl	800a2be <SD_WideBus_Disable>
 8009bf0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009bf6:	6a3b      	ldr	r3, [r7, #32]
 8009bf8:	431a      	orrs	r2, r3
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	639a      	str	r2, [r3, #56]	; 0x38
 8009bfe:	e00c      	b.n	8009c1a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c04:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	639a      	str	r2, [r3, #56]	; 0x38
 8009c0c:	e005      	b.n	8009c1a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c12:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d00b      	beq.n	8009c3a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	4a26      	ldr	r2, [pc, #152]	; (8009cc0 <HAL_SD_ConfigWideBusOperation+0x130>)
 8009c28:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2201      	movs	r2, #1
 8009c2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8009c32:	2301      	movs	r3, #1
 8009c34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009c38:	e01f      	b.n	8009c7a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	689b      	ldr	r3, [r3, #8]
 8009c44:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	68db      	ldr	r3, [r3, #12]
 8009c4a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	695b      	ldr	r3, [r3, #20]
 8009c54:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	699b      	ldr	r3, [r3, #24]
 8009c5a:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681d      	ldr	r5, [r3, #0]
 8009c60:	466c      	mov	r4, sp
 8009c62:	f107 0314 	add.w	r3, r7, #20
 8009c66:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009c6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009c6e:	f107 0308 	add.w	r3, r7, #8
 8009c72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009c74:	4628      	mov	r0, r5
 8009c76:	f002 fe6b 	bl	800c950 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009c82:	4618      	mov	r0, r3
 8009c84:	f002 ff3f 	bl	800cb06 <SDMMC_CmdBlockLength>
 8009c88:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c8a:	6a3b      	ldr	r3, [r7, #32]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d00c      	beq.n	8009caa <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	4a0a      	ldr	r2, [pc, #40]	; (8009cc0 <HAL_SD_ConfigWideBusOperation+0x130>)
 8009c96:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c9c:	6a3b      	ldr	r3, [r7, #32]
 8009c9e:	431a      	orrs	r2, r3
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2201      	movs	r2, #1
 8009cae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8009cb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	3728      	adds	r7, #40	; 0x28
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bdb0      	pop	{r4, r5, r7, pc}
 8009cbe:	bf00      	nop
 8009cc0:	004005ff 	.word	0x004005ff

08009cc4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b086      	sub	sp, #24
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009ccc:	2300      	movs	r3, #0
 8009cce:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009cd0:	f107 030c 	add.w	r3, r7, #12
 8009cd4:	4619      	mov	r1, r3
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f000 fa7e 	bl	800a1d8 <SD_SendStatus>
 8009cdc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d005      	beq.n	8009cf0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	431a      	orrs	r2, r3
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	0a5b      	lsrs	r3, r3, #9
 8009cf4:	f003 030f 	and.w	r3, r3, #15
 8009cf8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009cfa:	693b      	ldr	r3, [r7, #16]
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3718      	adds	r7, #24
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}

08009d04 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009d04:	b480      	push	{r7}
 8009d06:	b085      	sub	sp, #20
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d10:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009d20:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8009d22:	bf00      	nop
 8009d24:	3714      	adds	r7, #20
 8009d26:	46bd      	mov	sp, r7
 8009d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2c:	4770      	bx	lr

08009d2e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009d2e:	b580      	push	{r7, lr}
 8009d30:	b084      	sub	sp, #16
 8009d32:	af00      	add	r7, sp, #0
 8009d34:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d3a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d40:	2b82      	cmp	r3, #130	; 0x82
 8009d42:	d111      	bne.n	8009d68 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f002 ff87 	bl	800cc5c <SDMMC_CmdStopTransfer>
 8009d4e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d008      	beq.n	8009d68 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	431a      	orrs	r2, r3
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8009d62:	68f8      	ldr	r0, [r7, #12]
 8009d64:	f7ff fd3a 	bl	80097dc <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f022 0208 	bic.w	r2, r2, #8
 8009d76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f240 523a 	movw	r2, #1338	; 0x53a
 8009d80:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	2201      	movs	r2, #1
 8009d86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8009d90:	68f8      	ldr	r0, [r7, #12]
 8009d92:	f003 fbf7 	bl	800d584 <HAL_SD_RxCpltCallback>
#endif
}
 8009d96:	bf00      	nop
 8009d98:	3710      	adds	r7, #16
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
	...

08009da0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b086      	sub	sp, #24
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dac:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f7fd fdc4 	bl	800793c <HAL_DMA_GetError>
 8009db4:	4603      	mov	r3, r0
 8009db6:	2b02      	cmp	r3, #2
 8009db8:	d03e      	beq.n	8009e38 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8009dba:	697b      	ldr	r3, [r7, #20]
 8009dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dc0:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dc8:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	2b01      	cmp	r3, #1
 8009dce:	d002      	beq.n	8009dd6 <SD_DMAError+0x36>
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	2b01      	cmp	r3, #1
 8009dd4:	d12d      	bne.n	8009e32 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	4a19      	ldr	r2, [pc, #100]	; (8009e40 <SD_DMAError+0xa0>)
 8009ddc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009dec:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009df2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8009dfa:	6978      	ldr	r0, [r7, #20]
 8009dfc:	f7ff ff62 	bl	8009cc4 <HAL_SD_GetCardState>
 8009e00:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	2b06      	cmp	r3, #6
 8009e06:	d002      	beq.n	8009e0e <SD_DMAError+0x6e>
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	2b05      	cmp	r3, #5
 8009e0c:	d10a      	bne.n	8009e24 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	4618      	mov	r0, r3
 8009e14:	f002 ff22 	bl	800cc5c <SDMMC_CmdStopTransfer>
 8009e18:	4602      	mov	r2, r0
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e1e:	431a      	orrs	r2, r3
 8009e20:	697b      	ldr	r3, [r7, #20]
 8009e22:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	2201      	movs	r2, #1
 8009e28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8009e32:	6978      	ldr	r0, [r7, #20]
 8009e34:	f7ff fcd2 	bl	80097dc <HAL_SD_ErrorCallback>
#endif
  }
}
 8009e38:	bf00      	nop
 8009e3a:	3718      	adds	r7, #24
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}
 8009e40:	004005ff 	.word	0x004005ff

08009e44 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b084      	sub	sp, #16
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e50:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f240 523a 	movw	r2, #1338	; 0x53a
 8009e5a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009e5c:	68f8      	ldr	r0, [r7, #12]
 8009e5e:	f7ff ff31 	bl	8009cc4 <HAL_SD_GetCardState>
 8009e62:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	2201      	movs	r2, #1
 8009e68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	2b06      	cmp	r3, #6
 8009e76:	d002      	beq.n	8009e7e <SD_DMATxAbort+0x3a>
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	2b05      	cmp	r3, #5
 8009e7c:	d10a      	bne.n	8009e94 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	4618      	mov	r0, r3
 8009e84:	f002 feea 	bl	800cc5c <SDMMC_CmdStopTransfer>
 8009e88:	4602      	mov	r2, r0
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e8e:	431a      	orrs	r2, r3
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d103      	bne.n	8009ea4 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009e9c:	68f8      	ldr	r0, [r7, #12]
 8009e9e:	f003 fb5d 	bl	800d55c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009ea2:	e002      	b.n	8009eaa <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009ea4:	68f8      	ldr	r0, [r7, #12]
 8009ea6:	f7ff fc99 	bl	80097dc <HAL_SD_ErrorCallback>
}
 8009eaa:	bf00      	nop
 8009eac:	3710      	adds	r7, #16
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}

08009eb2 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8009eb2:	b580      	push	{r7, lr}
 8009eb4:	b084      	sub	sp, #16
 8009eb6:	af00      	add	r7, sp, #0
 8009eb8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ebe:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f240 523a 	movw	r2, #1338	; 0x53a
 8009ec8:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009eca:	68f8      	ldr	r0, [r7, #12]
 8009ecc:	f7ff fefa 	bl	8009cc4 <HAL_SD_GetCardState>
 8009ed0:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	2201      	movs	r2, #1
 8009ed6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	2200      	movs	r2, #0
 8009ede:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	2b06      	cmp	r3, #6
 8009ee4:	d002      	beq.n	8009eec <SD_DMARxAbort+0x3a>
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	2b05      	cmp	r3, #5
 8009eea:	d10a      	bne.n	8009f02 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f002 feb3 	bl	800cc5c <SDMMC_CmdStopTransfer>
 8009ef6:	4602      	mov	r2, r0
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009efc:	431a      	orrs	r2, r3
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d103      	bne.n	8009f12 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009f0a:	68f8      	ldr	r0, [r7, #12]
 8009f0c:	f003 fb26 	bl	800d55c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009f10:	e002      	b.n	8009f18 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009f12:	68f8      	ldr	r0, [r7, #12]
 8009f14:	f7ff fc62 	bl	80097dc <HAL_SD_ErrorCallback>
}
 8009f18:	bf00      	nop
 8009f1a:	3710      	adds	r7, #16
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}

08009f20 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009f20:	b5b0      	push	{r4, r5, r7, lr}
 8009f22:	b094      	sub	sp, #80	; 0x50
 8009f24:	af04      	add	r7, sp, #16
 8009f26:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009f28:	2301      	movs	r3, #1
 8009f2a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4618      	mov	r0, r3
 8009f32:	f002 fd64 	bl	800c9fe <SDIO_GetPowerState>
 8009f36:	4603      	mov	r3, r0
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d102      	bne.n	8009f42 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009f3c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009f40:	e0b8      	b.n	800a0b4 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f46:	2b03      	cmp	r3, #3
 8009f48:	d02f      	beq.n	8009faa <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f002 ff8e 	bl	800ce70 <SDMMC_CmdSendCID>
 8009f54:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d001      	beq.n	8009f60 <SD_InitCard+0x40>
    {
      return errorstate;
 8009f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f5e:	e0a9      	b.n	800a0b4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	2100      	movs	r1, #0
 8009f66:	4618      	mov	r0, r3
 8009f68:	f002 fd8e 	bl	800ca88 <SDIO_GetResponse>
 8009f6c:	4602      	mov	r2, r0
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	2104      	movs	r1, #4
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f002 fd85 	bl	800ca88 <SDIO_GetResponse>
 8009f7e:	4602      	mov	r2, r0
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	2108      	movs	r1, #8
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f002 fd7c 	bl	800ca88 <SDIO_GetResponse>
 8009f90:	4602      	mov	r2, r0
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	210c      	movs	r1, #12
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	f002 fd73 	bl	800ca88 <SDIO_GetResponse>
 8009fa2:	4602      	mov	r2, r0
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fae:	2b03      	cmp	r3, #3
 8009fb0:	d00d      	beq.n	8009fce <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f107 020e 	add.w	r2, r7, #14
 8009fba:	4611      	mov	r1, r2
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f002 ff94 	bl	800ceea <SDMMC_CmdSetRelAdd>
 8009fc2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009fc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d001      	beq.n	8009fce <SD_InitCard+0xae>
    {
      return errorstate;
 8009fca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fcc:	e072      	b.n	800a0b4 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fd2:	2b03      	cmp	r3, #3
 8009fd4:	d036      	beq.n	800a044 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009fd6:	89fb      	ldrh	r3, [r7, #14]
 8009fd8:	461a      	mov	r2, r3
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681a      	ldr	r2, [r3, #0]
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fe6:	041b      	lsls	r3, r3, #16
 8009fe8:	4619      	mov	r1, r3
 8009fea:	4610      	mov	r0, r2
 8009fec:	f002 ff5e 	bl	800ceac <SDMMC_CmdSendCSD>
 8009ff0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d001      	beq.n	8009ffc <SD_InitCard+0xdc>
    {
      return errorstate;
 8009ff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ffa:	e05b      	b.n	800a0b4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	2100      	movs	r1, #0
 800a002:	4618      	mov	r0, r3
 800a004:	f002 fd40 	bl	800ca88 <SDIO_GetResponse>
 800a008:	4602      	mov	r2, r0
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	2104      	movs	r1, #4
 800a014:	4618      	mov	r0, r3
 800a016:	f002 fd37 	bl	800ca88 <SDIO_GetResponse>
 800a01a:	4602      	mov	r2, r0
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	2108      	movs	r1, #8
 800a026:	4618      	mov	r0, r3
 800a028:	f002 fd2e 	bl	800ca88 <SDIO_GetResponse>
 800a02c:	4602      	mov	r2, r0
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	210c      	movs	r1, #12
 800a038:	4618      	mov	r0, r3
 800a03a:	f002 fd25 	bl	800ca88 <SDIO_GetResponse>
 800a03e:	4602      	mov	r2, r0
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	2104      	movs	r1, #4
 800a04a:	4618      	mov	r0, r3
 800a04c:	f002 fd1c 	bl	800ca88 <SDIO_GetResponse>
 800a050:	4603      	mov	r3, r0
 800a052:	0d1a      	lsrs	r2, r3, #20
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a058:	f107 0310 	add.w	r3, r7, #16
 800a05c:	4619      	mov	r1, r3
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f7ff fbc6 	bl	80097f0 <HAL_SD_GetCardCSD>
 800a064:	4603      	mov	r3, r0
 800a066:	2b00      	cmp	r3, #0
 800a068:	d002      	beq.n	800a070 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a06a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a06e:	e021      	b.n	800a0b4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6819      	ldr	r1, [r3, #0]
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a078:	041b      	lsls	r3, r3, #16
 800a07a:	2200      	movs	r2, #0
 800a07c:	461c      	mov	r4, r3
 800a07e:	4615      	mov	r5, r2
 800a080:	4622      	mov	r2, r4
 800a082:	462b      	mov	r3, r5
 800a084:	4608      	mov	r0, r1
 800a086:	f002 fe0b 	bl	800cca0 <SDMMC_CmdSelDesel>
 800a08a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800a08c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d001      	beq.n	800a096 <SD_InitCard+0x176>
  {
    return errorstate;
 800a092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a094:	e00e      	b.n	800a0b4 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681d      	ldr	r5, [r3, #0]
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	466c      	mov	r4, sp
 800a09e:	f103 0210 	add.w	r2, r3, #16
 800a0a2:	ca07      	ldmia	r2, {r0, r1, r2}
 800a0a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a0a8:	3304      	adds	r3, #4
 800a0aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a0ac:	4628      	mov	r0, r5
 800a0ae:	f002 fc4f 	bl	800c950 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a0b2:	2300      	movs	r3, #0
}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	3740      	adds	r7, #64	; 0x40
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bdb0      	pop	{r4, r5, r7, pc}

0800a0bc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b086      	sub	sp, #24
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	617b      	str	r3, [r7, #20]
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	f002 fe06 	bl	800cce6 <SDMMC_CmdGoIdleState>
 800a0da:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d001      	beq.n	800a0e6 <SD_PowerON+0x2a>
  {
    return errorstate;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	e072      	b.n	800a1cc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	f002 fe19 	bl	800cd22 <SDMMC_CmdOperCond>
 800a0f0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d00d      	beq.n	800a114 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	4618      	mov	r0, r3
 800a104:	f002 fdef 	bl	800cce6 <SDMMC_CmdGoIdleState>
 800a108:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d004      	beq.n	800a11a <SD_PowerON+0x5e>
    {
      return errorstate;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	e05b      	b.n	800a1cc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2201      	movs	r2, #1
 800a118:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a11e:	2b01      	cmp	r3, #1
 800a120:	d137      	bne.n	800a192 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	2100      	movs	r1, #0
 800a128:	4618      	mov	r0, r3
 800a12a:	f002 fe19 	bl	800cd60 <SDMMC_CmdAppCommand>
 800a12e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d02d      	beq.n	800a192 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a136:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a13a:	e047      	b.n	800a1cc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	2100      	movs	r1, #0
 800a142:	4618      	mov	r0, r3
 800a144:	f002 fe0c 	bl	800cd60 <SDMMC_CmdAppCommand>
 800a148:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d001      	beq.n	800a154 <SD_PowerON+0x98>
    {
      return errorstate;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	e03b      	b.n	800a1cc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	491e      	ldr	r1, [pc, #120]	; (800a1d4 <SD_PowerON+0x118>)
 800a15a:	4618      	mov	r0, r3
 800a15c:	f002 fe22 	bl	800cda4 <SDMMC_CmdAppOperCommand>
 800a160:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d002      	beq.n	800a16e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a168:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a16c:	e02e      	b.n	800a1cc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	2100      	movs	r1, #0
 800a174:	4618      	mov	r0, r3
 800a176:	f002 fc87 	bl	800ca88 <SDIO_GetResponse>
 800a17a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a17c:	697b      	ldr	r3, [r7, #20]
 800a17e:	0fdb      	lsrs	r3, r3, #31
 800a180:	2b01      	cmp	r3, #1
 800a182:	d101      	bne.n	800a188 <SD_PowerON+0xcc>
 800a184:	2301      	movs	r3, #1
 800a186:	e000      	b.n	800a18a <SD_PowerON+0xce>
 800a188:	2300      	movs	r3, #0
 800a18a:	613b      	str	r3, [r7, #16]

    count++;
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	3301      	adds	r3, #1
 800a190:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a198:	4293      	cmp	r3, r2
 800a19a:	d802      	bhi.n	800a1a2 <SD_PowerON+0xe6>
 800a19c:	693b      	ldr	r3, [r7, #16]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d0cc      	beq.n	800a13c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	d902      	bls.n	800a1b2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a1ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a1b0:	e00c      	b.n	800a1cc <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d003      	beq.n	800a1c4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2201      	movs	r2, #1
 800a1c0:	645a      	str	r2, [r3, #68]	; 0x44
 800a1c2:	e002      	b.n	800a1ca <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800a1ca:	2300      	movs	r3, #0
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3718      	adds	r7, #24
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}
 800a1d4:	c1100000 	.word	0xc1100000

0800a1d8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b084      	sub	sp, #16
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
 800a1e0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d102      	bne.n	800a1ee <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a1e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a1ec:	e018      	b.n	800a220 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681a      	ldr	r2, [r3, #0]
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1f6:	041b      	lsls	r3, r3, #16
 800a1f8:	4619      	mov	r1, r3
 800a1fa:	4610      	mov	r0, r2
 800a1fc:	f002 fe96 	bl	800cf2c <SDMMC_CmdSendStatus>
 800a200:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d001      	beq.n	800a20c <SD_SendStatus+0x34>
  {
    return errorstate;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	e009      	b.n	800a220 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	2100      	movs	r1, #0
 800a212:	4618      	mov	r0, r3
 800a214:	f002 fc38 	bl	800ca88 <SDIO_GetResponse>
 800a218:	4602      	mov	r2, r0
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a21e:	2300      	movs	r3, #0
}
 800a220:	4618      	mov	r0, r3
 800a222:	3710      	adds	r7, #16
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}

0800a228 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b086      	sub	sp, #24
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a230:	2300      	movs	r3, #0
 800a232:	60fb      	str	r3, [r7, #12]
 800a234:	2300      	movs	r3, #0
 800a236:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	2100      	movs	r1, #0
 800a23e:	4618      	mov	r0, r3
 800a240:	f002 fc22 	bl	800ca88 <SDIO_GetResponse>
 800a244:	4603      	mov	r3, r0
 800a246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a24a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a24e:	d102      	bne.n	800a256 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a250:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a254:	e02f      	b.n	800a2b6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a256:	f107 030c 	add.w	r3, r7, #12
 800a25a:	4619      	mov	r1, r3
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f000 f879 	bl	800a354 <SD_FindSCR>
 800a262:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a264:	697b      	ldr	r3, [r7, #20]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d001      	beq.n	800a26e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	e023      	b.n	800a2b6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a274:	2b00      	cmp	r3, #0
 800a276:	d01c      	beq.n	800a2b2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681a      	ldr	r2, [r3, #0]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a280:	041b      	lsls	r3, r3, #16
 800a282:	4619      	mov	r1, r3
 800a284:	4610      	mov	r0, r2
 800a286:	f002 fd6b 	bl	800cd60 <SDMMC_CmdAppCommand>
 800a28a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a28c:	697b      	ldr	r3, [r7, #20]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d001      	beq.n	800a296 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	e00f      	b.n	800a2b6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	2102      	movs	r1, #2
 800a29c:	4618      	mov	r0, r3
 800a29e:	f002 fda4 	bl	800cdea <SDMMC_CmdBusWidth>
 800a2a2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a2a4:	697b      	ldr	r3, [r7, #20]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d001      	beq.n	800a2ae <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800a2aa:	697b      	ldr	r3, [r7, #20]
 800a2ac:	e003      	b.n	800a2b6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	e001      	b.n	800a2b6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a2b2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3718      	adds	r7, #24
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}

0800a2be <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800a2be:	b580      	push	{r7, lr}
 800a2c0:	b086      	sub	sp, #24
 800a2c2:	af00      	add	r7, sp, #0
 800a2c4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	60fb      	str	r3, [r7, #12]
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	2100      	movs	r1, #0
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f002 fbd7 	bl	800ca88 <SDIO_GetResponse>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a2e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a2e4:	d102      	bne.n	800a2ec <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a2e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a2ea:	e02f      	b.n	800a34c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a2ec:	f107 030c 	add.w	r3, r7, #12
 800a2f0:	4619      	mov	r1, r3
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f000 f82e 	bl	800a354 <SD_FindSCR>
 800a2f8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d001      	beq.n	800a304 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	e023      	b.n	800a34c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a304:	693b      	ldr	r3, [r7, #16]
 800a306:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d01c      	beq.n	800a348 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681a      	ldr	r2, [r3, #0]
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a316:	041b      	lsls	r3, r3, #16
 800a318:	4619      	mov	r1, r3
 800a31a:	4610      	mov	r0, r2
 800a31c:	f002 fd20 	bl	800cd60 <SDMMC_CmdAppCommand>
 800a320:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d001      	beq.n	800a32c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	e00f      	b.n	800a34c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	2100      	movs	r1, #0
 800a332:	4618      	mov	r0, r3
 800a334:	f002 fd59 	bl	800cdea <SDMMC_CmdBusWidth>
 800a338:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d001      	beq.n	800a344 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800a340:	697b      	ldr	r3, [r7, #20]
 800a342:	e003      	b.n	800a34c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a344:	2300      	movs	r3, #0
 800a346:	e001      	b.n	800a34c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a348:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a34c:	4618      	mov	r0, r3
 800a34e:	3718      	adds	r7, #24
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}

0800a354 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a354:	b590      	push	{r4, r7, lr}
 800a356:	b08f      	sub	sp, #60	; 0x3c
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
 800a35c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a35e:	f7fc fa87 	bl	8006870 <HAL_GetTick>
 800a362:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800a364:	2300      	movs	r3, #0
 800a366:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800a368:	2300      	movs	r3, #0
 800a36a:	60bb      	str	r3, [r7, #8]
 800a36c:	2300      	movs	r3, #0
 800a36e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	2108      	movs	r1, #8
 800a37a:	4618      	mov	r0, r3
 800a37c:	f002 fbc3 	bl	800cb06 <SDMMC_CmdBlockLength>
 800a380:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a384:	2b00      	cmp	r3, #0
 800a386:	d001      	beq.n	800a38c <SD_FindSCR+0x38>
  {
    return errorstate;
 800a388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a38a:	e0b2      	b.n	800a4f2 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681a      	ldr	r2, [r3, #0]
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a394:	041b      	lsls	r3, r3, #16
 800a396:	4619      	mov	r1, r3
 800a398:	4610      	mov	r0, r2
 800a39a:	f002 fce1 	bl	800cd60 <SDMMC_CmdAppCommand>
 800a39e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a3a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d001      	beq.n	800a3aa <SD_FindSCR+0x56>
  {
    return errorstate;
 800a3a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3a8:	e0a3      	b.n	800a4f2 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a3aa:	f04f 33ff 	mov.w	r3, #4294967295
 800a3ae:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a3b0:	2308      	movs	r3, #8
 800a3b2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800a3b4:	2330      	movs	r3, #48	; 0x30
 800a3b6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800a3b8:	2302      	movs	r3, #2
 800a3ba:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a3bc:	2300      	movs	r3, #0
 800a3be:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800a3c0:	2301      	movs	r3, #1
 800a3c2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f107 0210 	add.w	r2, r7, #16
 800a3cc:	4611      	mov	r1, r2
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f002 fb6d 	bl	800caae <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f002 fd28 	bl	800ce2e <SDMMC_CmdSendSCR>
 800a3de:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a3e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d02a      	beq.n	800a43c <SD_FindSCR+0xe8>
  {
    return errorstate;
 800a3e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3e8:	e083      	b.n	800a4f2 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d00f      	beq.n	800a418 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6819      	ldr	r1, [r3, #0]
 800a3fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3fe:	009b      	lsls	r3, r3, #2
 800a400:	f107 0208 	add.w	r2, r7, #8
 800a404:	18d4      	adds	r4, r2, r3
 800a406:	4608      	mov	r0, r1
 800a408:	f002 facd 	bl	800c9a6 <SDIO_ReadFIFO>
 800a40c:	4603      	mov	r3, r0
 800a40e:	6023      	str	r3, [r4, #0]
      index++;
 800a410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a412:	3301      	adds	r3, #1
 800a414:	637b      	str	r3, [r7, #52]	; 0x34
 800a416:	e006      	b.n	800a426 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a41e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a422:	2b00      	cmp	r3, #0
 800a424:	d012      	beq.n	800a44c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a426:	f7fc fa23 	bl	8006870 <HAL_GetTick>
 800a42a:	4602      	mov	r2, r0
 800a42c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a42e:	1ad3      	subs	r3, r2, r3
 800a430:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a434:	d102      	bne.n	800a43c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a436:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a43a:	e05a      	b.n	800a4f2 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a442:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800a446:	2b00      	cmp	r3, #0
 800a448:	d0cf      	beq.n	800a3ea <SD_FindSCR+0x96>
 800a44a:	e000      	b.n	800a44e <SD_FindSCR+0xfa>
      break;
 800a44c:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a454:	f003 0308 	and.w	r3, r3, #8
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d005      	beq.n	800a468 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	2208      	movs	r2, #8
 800a462:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a464:	2308      	movs	r3, #8
 800a466:	e044      	b.n	800a4f2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a46e:	f003 0302 	and.w	r3, r3, #2
 800a472:	2b00      	cmp	r3, #0
 800a474:	d005      	beq.n	800a482 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	2202      	movs	r2, #2
 800a47c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a47e:	2302      	movs	r3, #2
 800a480:	e037      	b.n	800a4f2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a488:	f003 0320 	and.w	r3, r3, #32
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d005      	beq.n	800a49c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	2220      	movs	r2, #32
 800a496:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a498:	2320      	movs	r3, #32
 800a49a:	e02a      	b.n	800a4f2 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f240 523a 	movw	r2, #1338	; 0x53a
 800a4a4:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	061a      	lsls	r2, r3, #24
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	021b      	lsls	r3, r3, #8
 800a4ae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a4b2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	0a1b      	lsrs	r3, r3, #8
 800a4b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a4bc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	0e1b      	lsrs	r3, r3, #24
 800a4c2:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4c6:	601a      	str	r2, [r3, #0]
    scr++;
 800a4c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ca:	3304      	adds	r3, #4
 800a4cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	061a      	lsls	r2, r3, #24
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	021b      	lsls	r3, r3, #8
 800a4d6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a4da:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	0a1b      	lsrs	r3, r3, #8
 800a4e0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a4e4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	0e1b      	lsrs	r3, r3, #24
 800a4ea:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a4ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ee:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a4f0:	2300      	movs	r3, #0
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	373c      	adds	r7, #60	; 0x3c
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd90      	pop	{r4, r7, pc}

0800a4fa <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800a4fa:	b580      	push	{r7, lr}
 800a4fc:	b086      	sub	sp, #24
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a506:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a50c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d03f      	beq.n	800a594 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800a514:	2300      	movs	r3, #0
 800a516:	617b      	str	r3, [r7, #20]
 800a518:	e033      	b.n	800a582 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	4618      	mov	r0, r3
 800a520:	f002 fa41 	bl	800c9a6 <SDIO_ReadFIFO>
 800a524:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	b2da      	uxtb	r2, r3
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	3301      	adds	r3, #1
 800a532:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a534:	693b      	ldr	r3, [r7, #16]
 800a536:	3b01      	subs	r3, #1
 800a538:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	0a1b      	lsrs	r3, r3, #8
 800a53e:	b2da      	uxtb	r2, r3
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	3301      	adds	r3, #1
 800a548:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a54a:	693b      	ldr	r3, [r7, #16]
 800a54c:	3b01      	subs	r3, #1
 800a54e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	0c1b      	lsrs	r3, r3, #16
 800a554:	b2da      	uxtb	r2, r3
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	3301      	adds	r3, #1
 800a55e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	3b01      	subs	r3, #1
 800a564:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	0e1b      	lsrs	r3, r3, #24
 800a56a:	b2da      	uxtb	r2, r3
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	3301      	adds	r3, #1
 800a574:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a576:	693b      	ldr	r3, [r7, #16]
 800a578:	3b01      	subs	r3, #1
 800a57a:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	3301      	adds	r3, #1
 800a580:	617b      	str	r3, [r7, #20]
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	2b07      	cmp	r3, #7
 800a586:	d9c8      	bls.n	800a51a <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	68fa      	ldr	r2, [r7, #12]
 800a58c:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	693a      	ldr	r2, [r7, #16]
 800a592:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800a594:	bf00      	nop
 800a596:	3718      	adds	r7, #24
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd80      	pop	{r7, pc}

0800a59c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b086      	sub	sp, #24
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	6a1b      	ldr	r3, [r3, #32]
 800a5a8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ae:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800a5b0:	693b      	ldr	r3, [r7, #16]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d043      	beq.n	800a63e <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	617b      	str	r3, [r7, #20]
 800a5ba:	e037      	b.n	800a62c <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	781b      	ldrb	r3, [r3, #0]
 800a5c0:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	3301      	adds	r3, #1
 800a5c6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a5c8:	693b      	ldr	r3, [r7, #16]
 800a5ca:	3b01      	subs	r3, #1
 800a5cc:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	781b      	ldrb	r3, [r3, #0]
 800a5d2:	021a      	lsls	r2, r3, #8
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	4313      	orrs	r3, r2
 800a5d8:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	3301      	adds	r3, #1
 800a5de:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	3b01      	subs	r3, #1
 800a5e4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	781b      	ldrb	r3, [r3, #0]
 800a5ea:	041a      	lsls	r2, r3, #16
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	4313      	orrs	r3, r2
 800a5f0:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	3301      	adds	r3, #1
 800a5f6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	3b01      	subs	r3, #1
 800a5fc:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	781b      	ldrb	r3, [r3, #0]
 800a602:	061a      	lsls	r2, r3, #24
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	4313      	orrs	r3, r2
 800a608:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	3301      	adds	r3, #1
 800a60e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a610:	693b      	ldr	r3, [r7, #16]
 800a612:	3b01      	subs	r3, #1
 800a614:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f107 0208 	add.w	r2, r7, #8
 800a61e:	4611      	mov	r1, r2
 800a620:	4618      	mov	r0, r3
 800a622:	f002 f9cd 	bl	800c9c0 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	3301      	adds	r3, #1
 800a62a:	617b      	str	r3, [r7, #20]
 800a62c:	697b      	ldr	r3, [r7, #20]
 800a62e:	2b07      	cmp	r3, #7
 800a630:	d9c4      	bls.n	800a5bc <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	68fa      	ldr	r2, [r7, #12]
 800a636:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	693a      	ldr	r2, [r7, #16]
 800a63c:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800a63e:	bf00      	nop
 800a640:	3718      	adds	r7, #24
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}

0800a646 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a646:	b580      	push	{r7, lr}
 800a648:	b082      	sub	sp, #8
 800a64a:	af00      	add	r7, sp, #0
 800a64c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d101      	bne.n	800a658 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a654:	2301      	movs	r3, #1
 800a656:	e07b      	b.n	800a750 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d108      	bne.n	800a672 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	685b      	ldr	r3, [r3, #4]
 800a664:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a668:	d009      	beq.n	800a67e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2200      	movs	r2, #0
 800a66e:	61da      	str	r2, [r3, #28]
 800a670:	e005      	b.n	800a67e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2200      	movs	r2, #0
 800a676:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2200      	movs	r2, #0
 800a67c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2200      	movs	r2, #0
 800a682:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a68a:	b2db      	uxtb	r3, r3
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d106      	bne.n	800a69e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2200      	movs	r2, #0
 800a694:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f7fb fa49 	bl	8005b30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2202      	movs	r2, #2
 800a6a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	681a      	ldr	r2, [r3, #0]
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a6b4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	689b      	ldr	r3, [r3, #8]
 800a6c2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a6c6:	431a      	orrs	r2, r3
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	68db      	ldr	r3, [r3, #12]
 800a6cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a6d0:	431a      	orrs	r2, r3
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	691b      	ldr	r3, [r3, #16]
 800a6d6:	f003 0302 	and.w	r3, r3, #2
 800a6da:	431a      	orrs	r2, r3
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	695b      	ldr	r3, [r3, #20]
 800a6e0:	f003 0301 	and.w	r3, r3, #1
 800a6e4:	431a      	orrs	r2, r3
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	699b      	ldr	r3, [r3, #24]
 800a6ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a6ee:	431a      	orrs	r2, r3
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	69db      	ldr	r3, [r3, #28]
 800a6f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a6f8:	431a      	orrs	r2, r3
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6a1b      	ldr	r3, [r3, #32]
 800a6fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a702:	ea42 0103 	orr.w	r1, r2, r3
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a70a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	430a      	orrs	r2, r1
 800a714:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	699b      	ldr	r3, [r3, #24]
 800a71a:	0c1b      	lsrs	r3, r3, #16
 800a71c:	f003 0104 	and.w	r1, r3, #4
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a724:	f003 0210 	and.w	r2, r3, #16
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	430a      	orrs	r2, r1
 800a72e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	69da      	ldr	r2, [r3, #28]
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a73e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2200      	movs	r2, #0
 800a744:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2201      	movs	r2, #1
 800a74a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a74e:	2300      	movs	r3, #0
}
 800a750:	4618      	mov	r0, r3
 800a752:	3708      	adds	r7, #8
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}

0800a758 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b088      	sub	sp, #32
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	60f8      	str	r0, [r7, #12]
 800a760:	60b9      	str	r1, [r7, #8]
 800a762:	603b      	str	r3, [r7, #0]
 800a764:	4613      	mov	r3, r2
 800a766:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a768:	2300      	movs	r3, #0
 800a76a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a772:	2b01      	cmp	r3, #1
 800a774:	d101      	bne.n	800a77a <HAL_SPI_Transmit+0x22>
 800a776:	2302      	movs	r3, #2
 800a778:	e126      	b.n	800a9c8 <HAL_SPI_Transmit+0x270>
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	2201      	movs	r2, #1
 800a77e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a782:	f7fc f875 	bl	8006870 <HAL_GetTick>
 800a786:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a788:	88fb      	ldrh	r3, [r7, #6]
 800a78a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a792:	b2db      	uxtb	r3, r3
 800a794:	2b01      	cmp	r3, #1
 800a796:	d002      	beq.n	800a79e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a798:	2302      	movs	r3, #2
 800a79a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a79c:	e10b      	b.n	800a9b6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a79e:	68bb      	ldr	r3, [r7, #8]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d002      	beq.n	800a7aa <HAL_SPI_Transmit+0x52>
 800a7a4:	88fb      	ldrh	r3, [r7, #6]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d102      	bne.n	800a7b0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a7ae:	e102      	b.n	800a9b6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	2203      	movs	r2, #3
 800a7b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	68ba      	ldr	r2, [r7, #8]
 800a7c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	88fa      	ldrh	r2, [r7, #6]
 800a7c8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	88fa      	ldrh	r2, [r7, #6]
 800a7ce:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	689b      	ldr	r3, [r3, #8]
 800a7f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a7f6:	d10f      	bne.n	800a818 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	681a      	ldr	r2, [r3, #0]
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a806:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	681a      	ldr	r2, [r3, #0]
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a816:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a822:	2b40      	cmp	r3, #64	; 0x40
 800a824:	d007      	beq.n	800a836 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	681a      	ldr	r2, [r3, #0]
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a834:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	68db      	ldr	r3, [r3, #12]
 800a83a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a83e:	d14b      	bne.n	800a8d8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	685b      	ldr	r3, [r3, #4]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d002      	beq.n	800a84e <HAL_SPI_Transmit+0xf6>
 800a848:	8afb      	ldrh	r3, [r7, #22]
 800a84a:	2b01      	cmp	r3, #1
 800a84c:	d13e      	bne.n	800a8cc <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a852:	881a      	ldrh	r2, [r3, #0]
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a85e:	1c9a      	adds	r2, r3, #2
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a868:	b29b      	uxth	r3, r3
 800a86a:	3b01      	subs	r3, #1
 800a86c:	b29a      	uxth	r2, r3
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a872:	e02b      	b.n	800a8cc <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	689b      	ldr	r3, [r3, #8]
 800a87a:	f003 0302 	and.w	r3, r3, #2
 800a87e:	2b02      	cmp	r3, #2
 800a880:	d112      	bne.n	800a8a8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a886:	881a      	ldrh	r2, [r3, #0]
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a892:	1c9a      	adds	r2, r3, #2
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a89c:	b29b      	uxth	r3, r3
 800a89e:	3b01      	subs	r3, #1
 800a8a0:	b29a      	uxth	r2, r3
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	86da      	strh	r2, [r3, #54]	; 0x36
 800a8a6:	e011      	b.n	800a8cc <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a8a8:	f7fb ffe2 	bl	8006870 <HAL_GetTick>
 800a8ac:	4602      	mov	r2, r0
 800a8ae:	69bb      	ldr	r3, [r7, #24]
 800a8b0:	1ad3      	subs	r3, r2, r3
 800a8b2:	683a      	ldr	r2, [r7, #0]
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	d803      	bhi.n	800a8c0 <HAL_SPI_Transmit+0x168>
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8be:	d102      	bne.n	800a8c6 <HAL_SPI_Transmit+0x16e>
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d102      	bne.n	800a8cc <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800a8c6:	2303      	movs	r3, #3
 800a8c8:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a8ca:	e074      	b.n	800a9b6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a8d0:	b29b      	uxth	r3, r3
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d1ce      	bne.n	800a874 <HAL_SPI_Transmit+0x11c>
 800a8d6:	e04c      	b.n	800a972 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	685b      	ldr	r3, [r3, #4]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d002      	beq.n	800a8e6 <HAL_SPI_Transmit+0x18e>
 800a8e0:	8afb      	ldrh	r3, [r7, #22]
 800a8e2:	2b01      	cmp	r3, #1
 800a8e4:	d140      	bne.n	800a968 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	330c      	adds	r3, #12
 800a8f0:	7812      	ldrb	r2, [r2, #0]
 800a8f2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8f8:	1c5a      	adds	r2, r3, #1
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a902:	b29b      	uxth	r3, r3
 800a904:	3b01      	subs	r3, #1
 800a906:	b29a      	uxth	r2, r3
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a90c:	e02c      	b.n	800a968 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	689b      	ldr	r3, [r3, #8]
 800a914:	f003 0302 	and.w	r3, r3, #2
 800a918:	2b02      	cmp	r3, #2
 800a91a:	d113      	bne.n	800a944 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	330c      	adds	r3, #12
 800a926:	7812      	ldrb	r2, [r2, #0]
 800a928:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a92e:	1c5a      	adds	r2, r3, #1
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a938:	b29b      	uxth	r3, r3
 800a93a:	3b01      	subs	r3, #1
 800a93c:	b29a      	uxth	r2, r3
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	86da      	strh	r2, [r3, #54]	; 0x36
 800a942:	e011      	b.n	800a968 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a944:	f7fb ff94 	bl	8006870 <HAL_GetTick>
 800a948:	4602      	mov	r2, r0
 800a94a:	69bb      	ldr	r3, [r7, #24]
 800a94c:	1ad3      	subs	r3, r2, r3
 800a94e:	683a      	ldr	r2, [r7, #0]
 800a950:	429a      	cmp	r2, r3
 800a952:	d803      	bhi.n	800a95c <HAL_SPI_Transmit+0x204>
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a95a:	d102      	bne.n	800a962 <HAL_SPI_Transmit+0x20a>
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d102      	bne.n	800a968 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800a962:	2303      	movs	r3, #3
 800a964:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a966:	e026      	b.n	800a9b6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a96c:	b29b      	uxth	r3, r3
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d1cd      	bne.n	800a90e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a972:	69ba      	ldr	r2, [r7, #24]
 800a974:	6839      	ldr	r1, [r7, #0]
 800a976:	68f8      	ldr	r0, [r7, #12]
 800a978:	f000 fbcc 	bl	800b114 <SPI_EndRxTxTransaction>
 800a97c:	4603      	mov	r3, r0
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d002      	beq.n	800a988 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	2220      	movs	r2, #32
 800a986:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	689b      	ldr	r3, [r3, #8]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d10a      	bne.n	800a9a6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a990:	2300      	movs	r3, #0
 800a992:	613b      	str	r3, [r7, #16]
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	68db      	ldr	r3, [r3, #12]
 800a99a:	613b      	str	r3, [r7, #16]
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	689b      	ldr	r3, [r3, #8]
 800a9a2:	613b      	str	r3, [r7, #16]
 800a9a4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d002      	beq.n	800a9b4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	77fb      	strb	r3, [r7, #31]
 800a9b2:	e000      	b.n	800a9b6 <HAL_SPI_Transmit+0x25e>
  }

error:
 800a9b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	2201      	movs	r2, #1
 800a9ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a9c6:	7ffb      	ldrb	r3, [r7, #31]
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3720      	adds	r7, #32
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}

0800a9d0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b088      	sub	sp, #32
 800a9d4:	af02      	add	r7, sp, #8
 800a9d6:	60f8      	str	r0, [r7, #12]
 800a9d8:	60b9      	str	r1, [r7, #8]
 800a9da:	603b      	str	r3, [r7, #0]
 800a9dc:	4613      	mov	r3, r2
 800a9de:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	685b      	ldr	r3, [r3, #4]
 800a9e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a9ec:	d112      	bne.n	800aa14 <HAL_SPI_Receive+0x44>
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	689b      	ldr	r3, [r3, #8]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d10e      	bne.n	800aa14 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	2204      	movs	r2, #4
 800a9fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800a9fe:	88fa      	ldrh	r2, [r7, #6]
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	9300      	str	r3, [sp, #0]
 800aa04:	4613      	mov	r3, r2
 800aa06:	68ba      	ldr	r2, [r7, #8]
 800aa08:	68b9      	ldr	r1, [r7, #8]
 800aa0a:	68f8      	ldr	r0, [r7, #12]
 800aa0c:	f000 f8f1 	bl	800abf2 <HAL_SPI_TransmitReceive>
 800aa10:	4603      	mov	r3, r0
 800aa12:	e0ea      	b.n	800abea <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800aa1a:	2b01      	cmp	r3, #1
 800aa1c:	d101      	bne.n	800aa22 <HAL_SPI_Receive+0x52>
 800aa1e:	2302      	movs	r3, #2
 800aa20:	e0e3      	b.n	800abea <HAL_SPI_Receive+0x21a>
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	2201      	movs	r2, #1
 800aa26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800aa2a:	f7fb ff21 	bl	8006870 <HAL_GetTick>
 800aa2e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800aa36:	b2db      	uxtb	r3, r3
 800aa38:	2b01      	cmp	r3, #1
 800aa3a:	d002      	beq.n	800aa42 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800aa3c:	2302      	movs	r3, #2
 800aa3e:	75fb      	strb	r3, [r7, #23]
    goto error;
 800aa40:	e0ca      	b.n	800abd8 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800aa42:	68bb      	ldr	r3, [r7, #8]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d002      	beq.n	800aa4e <HAL_SPI_Receive+0x7e>
 800aa48:	88fb      	ldrh	r3, [r7, #6]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d102      	bne.n	800aa54 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800aa4e:	2301      	movs	r3, #1
 800aa50:	75fb      	strb	r3, [r7, #23]
    goto error;
 800aa52:	e0c1      	b.n	800abd8 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	2204      	movs	r2, #4
 800aa58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	2200      	movs	r2, #0
 800aa60:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	68ba      	ldr	r2, [r7, #8]
 800aa66:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	88fa      	ldrh	r2, [r7, #6]
 800aa6c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	88fa      	ldrh	r2, [r7, #6]
 800aa72:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	2200      	movs	r2, #0
 800aa78:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	2200      	movs	r2, #0
 800aa84:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	2200      	movs	r2, #0
 800aa8a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	689b      	ldr	r3, [r3, #8]
 800aa96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa9a:	d10f      	bne.n	800aabc <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	681a      	ldr	r2, [r3, #0]
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aaaa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	681a      	ldr	r2, [r3, #0]
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800aaba:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aac6:	2b40      	cmp	r3, #64	; 0x40
 800aac8:	d007      	beq.n	800aada <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	681a      	ldr	r2, [r3, #0]
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aad8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	68db      	ldr	r3, [r3, #12]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d162      	bne.n	800aba8 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800aae2:	e02e      	b.n	800ab42 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	689b      	ldr	r3, [r3, #8]
 800aaea:	f003 0301 	and.w	r3, r3, #1
 800aaee:	2b01      	cmp	r3, #1
 800aaf0:	d115      	bne.n	800ab1e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	f103 020c 	add.w	r2, r3, #12
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aafe:	7812      	ldrb	r2, [r2, #0]
 800ab00:	b2d2      	uxtb	r2, r2
 800ab02:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab08:	1c5a      	adds	r2, r3, #1
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab12:	b29b      	uxth	r3, r3
 800ab14:	3b01      	subs	r3, #1
 800ab16:	b29a      	uxth	r2, r3
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ab1c:	e011      	b.n	800ab42 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ab1e:	f7fb fea7 	bl	8006870 <HAL_GetTick>
 800ab22:	4602      	mov	r2, r0
 800ab24:	693b      	ldr	r3, [r7, #16]
 800ab26:	1ad3      	subs	r3, r2, r3
 800ab28:	683a      	ldr	r2, [r7, #0]
 800ab2a:	429a      	cmp	r2, r3
 800ab2c:	d803      	bhi.n	800ab36 <HAL_SPI_Receive+0x166>
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab34:	d102      	bne.n	800ab3c <HAL_SPI_Receive+0x16c>
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d102      	bne.n	800ab42 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800ab3c:	2303      	movs	r3, #3
 800ab3e:	75fb      	strb	r3, [r7, #23]
          goto error;
 800ab40:	e04a      	b.n	800abd8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab46:	b29b      	uxth	r3, r3
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d1cb      	bne.n	800aae4 <HAL_SPI_Receive+0x114>
 800ab4c:	e031      	b.n	800abb2 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	689b      	ldr	r3, [r3, #8]
 800ab54:	f003 0301 	and.w	r3, r3, #1
 800ab58:	2b01      	cmp	r3, #1
 800ab5a:	d113      	bne.n	800ab84 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	68da      	ldr	r2, [r3, #12]
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab66:	b292      	uxth	r2, r2
 800ab68:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab6e:	1c9a      	adds	r2, r3, #2
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab78:	b29b      	uxth	r3, r3
 800ab7a:	3b01      	subs	r3, #1
 800ab7c:	b29a      	uxth	r2, r3
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ab82:	e011      	b.n	800aba8 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ab84:	f7fb fe74 	bl	8006870 <HAL_GetTick>
 800ab88:	4602      	mov	r2, r0
 800ab8a:	693b      	ldr	r3, [r7, #16]
 800ab8c:	1ad3      	subs	r3, r2, r3
 800ab8e:	683a      	ldr	r2, [r7, #0]
 800ab90:	429a      	cmp	r2, r3
 800ab92:	d803      	bhi.n	800ab9c <HAL_SPI_Receive+0x1cc>
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab9a:	d102      	bne.n	800aba2 <HAL_SPI_Receive+0x1d2>
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d102      	bne.n	800aba8 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800aba2:	2303      	movs	r3, #3
 800aba4:	75fb      	strb	r3, [r7, #23]
          goto error;
 800aba6:	e017      	b.n	800abd8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800abac:	b29b      	uxth	r3, r3
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d1cd      	bne.n	800ab4e <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800abb2:	693a      	ldr	r2, [r7, #16]
 800abb4:	6839      	ldr	r1, [r7, #0]
 800abb6:	68f8      	ldr	r0, [r7, #12]
 800abb8:	f000 fa46 	bl	800b048 <SPI_EndRxTransaction>
 800abbc:	4603      	mov	r3, r0
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d002      	beq.n	800abc8 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	2220      	movs	r2, #32
 800abc6:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d002      	beq.n	800abd6 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800abd0:	2301      	movs	r3, #1
 800abd2:	75fb      	strb	r3, [r7, #23]
 800abd4:	e000      	b.n	800abd8 <HAL_SPI_Receive+0x208>
  }

error :
 800abd6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	2201      	movs	r2, #1
 800abdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	2200      	movs	r2, #0
 800abe4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800abe8:	7dfb      	ldrb	r3, [r7, #23]
}
 800abea:	4618      	mov	r0, r3
 800abec:	3718      	adds	r7, #24
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}

0800abf2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800abf2:	b580      	push	{r7, lr}
 800abf4:	b08c      	sub	sp, #48	; 0x30
 800abf6:	af00      	add	r7, sp, #0
 800abf8:	60f8      	str	r0, [r7, #12]
 800abfa:	60b9      	str	r1, [r7, #8]
 800abfc:	607a      	str	r2, [r7, #4]
 800abfe:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ac00:	2301      	movs	r3, #1
 800ac02:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ac04:	2300      	movs	r3, #0
 800ac06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ac10:	2b01      	cmp	r3, #1
 800ac12:	d101      	bne.n	800ac18 <HAL_SPI_TransmitReceive+0x26>
 800ac14:	2302      	movs	r3, #2
 800ac16:	e18a      	b.n	800af2e <HAL_SPI_TransmitReceive+0x33c>
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	2201      	movs	r2, #1
 800ac1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ac20:	f7fb fe26 	bl	8006870 <HAL_GetTick>
 800ac24:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ac2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	685b      	ldr	r3, [r3, #4]
 800ac34:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800ac36:	887b      	ldrh	r3, [r7, #2]
 800ac38:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ac3a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ac3e:	2b01      	cmp	r3, #1
 800ac40:	d00f      	beq.n	800ac62 <HAL_SPI_TransmitReceive+0x70>
 800ac42:	69fb      	ldr	r3, [r7, #28]
 800ac44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ac48:	d107      	bne.n	800ac5a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	689b      	ldr	r3, [r3, #8]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d103      	bne.n	800ac5a <HAL_SPI_TransmitReceive+0x68>
 800ac52:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ac56:	2b04      	cmp	r3, #4
 800ac58:	d003      	beq.n	800ac62 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800ac5a:	2302      	movs	r3, #2
 800ac5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ac60:	e15b      	b.n	800af1a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d005      	beq.n	800ac74 <HAL_SPI_TransmitReceive+0x82>
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d002      	beq.n	800ac74 <HAL_SPI_TransmitReceive+0x82>
 800ac6e:	887b      	ldrh	r3, [r7, #2]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d103      	bne.n	800ac7c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800ac74:	2301      	movs	r3, #1
 800ac76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ac7a:	e14e      	b.n	800af1a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ac82:	b2db      	uxtb	r3, r3
 800ac84:	2b04      	cmp	r3, #4
 800ac86:	d003      	beq.n	800ac90 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	2205      	movs	r2, #5
 800ac8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	2200      	movs	r2, #0
 800ac94:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	687a      	ldr	r2, [r7, #4]
 800ac9a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	887a      	ldrh	r2, [r7, #2]
 800aca0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	887a      	ldrh	r2, [r7, #2]
 800aca6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	68ba      	ldr	r2, [r7, #8]
 800acac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	887a      	ldrh	r2, [r7, #2]
 800acb2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	887a      	ldrh	r2, [r7, #2]
 800acb8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	2200      	movs	r2, #0
 800acbe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	2200      	movs	r2, #0
 800acc4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acd0:	2b40      	cmp	r3, #64	; 0x40
 800acd2:	d007      	beq.n	800ace4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	681a      	ldr	r2, [r3, #0]
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ace2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	68db      	ldr	r3, [r3, #12]
 800ace8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800acec:	d178      	bne.n	800ade0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	685b      	ldr	r3, [r3, #4]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d002      	beq.n	800acfc <HAL_SPI_TransmitReceive+0x10a>
 800acf6:	8b7b      	ldrh	r3, [r7, #26]
 800acf8:	2b01      	cmp	r3, #1
 800acfa:	d166      	bne.n	800adca <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad00:	881a      	ldrh	r2, [r3, #0]
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad0c:	1c9a      	adds	r2, r3, #2
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ad16:	b29b      	uxth	r3, r3
 800ad18:	3b01      	subs	r3, #1
 800ad1a:	b29a      	uxth	r2, r3
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ad20:	e053      	b.n	800adca <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	689b      	ldr	r3, [r3, #8]
 800ad28:	f003 0302 	and.w	r3, r3, #2
 800ad2c:	2b02      	cmp	r3, #2
 800ad2e:	d11b      	bne.n	800ad68 <HAL_SPI_TransmitReceive+0x176>
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ad34:	b29b      	uxth	r3, r3
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d016      	beq.n	800ad68 <HAL_SPI_TransmitReceive+0x176>
 800ad3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad3c:	2b01      	cmp	r3, #1
 800ad3e:	d113      	bne.n	800ad68 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad44:	881a      	ldrh	r2, [r3, #0]
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad50:	1c9a      	adds	r2, r3, #2
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ad5a:	b29b      	uxth	r3, r3
 800ad5c:	3b01      	subs	r3, #1
 800ad5e:	b29a      	uxth	r2, r3
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ad64:	2300      	movs	r3, #0
 800ad66:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	689b      	ldr	r3, [r3, #8]
 800ad6e:	f003 0301 	and.w	r3, r3, #1
 800ad72:	2b01      	cmp	r3, #1
 800ad74:	d119      	bne.n	800adaa <HAL_SPI_TransmitReceive+0x1b8>
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ad7a:	b29b      	uxth	r3, r3
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d014      	beq.n	800adaa <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	68da      	ldr	r2, [r3, #12]
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad8a:	b292      	uxth	r2, r2
 800ad8c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad92:	1c9a      	adds	r2, r3, #2
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ad9c:	b29b      	uxth	r3, r3
 800ad9e:	3b01      	subs	r3, #1
 800ada0:	b29a      	uxth	r2, r3
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ada6:	2301      	movs	r3, #1
 800ada8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800adaa:	f7fb fd61 	bl	8006870 <HAL_GetTick>
 800adae:	4602      	mov	r2, r0
 800adb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adb2:	1ad3      	subs	r3, r2, r3
 800adb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800adb6:	429a      	cmp	r2, r3
 800adb8:	d807      	bhi.n	800adca <HAL_SPI_TransmitReceive+0x1d8>
 800adba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adc0:	d003      	beq.n	800adca <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800adc2:	2303      	movs	r3, #3
 800adc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800adc8:	e0a7      	b.n	800af1a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800adce:	b29b      	uxth	r3, r3
 800add0:	2b00      	cmp	r3, #0
 800add2:	d1a6      	bne.n	800ad22 <HAL_SPI_TransmitReceive+0x130>
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800add8:	b29b      	uxth	r3, r3
 800adda:	2b00      	cmp	r3, #0
 800addc:	d1a1      	bne.n	800ad22 <HAL_SPI_TransmitReceive+0x130>
 800adde:	e07c      	b.n	800aeda <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	685b      	ldr	r3, [r3, #4]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d002      	beq.n	800adee <HAL_SPI_TransmitReceive+0x1fc>
 800ade8:	8b7b      	ldrh	r3, [r7, #26]
 800adea:	2b01      	cmp	r3, #1
 800adec:	d16b      	bne.n	800aec6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	330c      	adds	r3, #12
 800adf8:	7812      	ldrb	r2, [r2, #0]
 800adfa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae00:	1c5a      	adds	r2, r3, #1
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ae0a:	b29b      	uxth	r3, r3
 800ae0c:	3b01      	subs	r3, #1
 800ae0e:	b29a      	uxth	r2, r3
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ae14:	e057      	b.n	800aec6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	689b      	ldr	r3, [r3, #8]
 800ae1c:	f003 0302 	and.w	r3, r3, #2
 800ae20:	2b02      	cmp	r3, #2
 800ae22:	d11c      	bne.n	800ae5e <HAL_SPI_TransmitReceive+0x26c>
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ae28:	b29b      	uxth	r3, r3
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d017      	beq.n	800ae5e <HAL_SPI_TransmitReceive+0x26c>
 800ae2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae30:	2b01      	cmp	r3, #1
 800ae32:	d114      	bne.n	800ae5e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	330c      	adds	r3, #12
 800ae3e:	7812      	ldrb	r2, [r2, #0]
 800ae40:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae46:	1c5a      	adds	r2, r3, #1
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ae50:	b29b      	uxth	r3, r3
 800ae52:	3b01      	subs	r3, #1
 800ae54:	b29a      	uxth	r2, r3
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	689b      	ldr	r3, [r3, #8]
 800ae64:	f003 0301 	and.w	r3, r3, #1
 800ae68:	2b01      	cmp	r3, #1
 800ae6a:	d119      	bne.n	800aea0 <HAL_SPI_TransmitReceive+0x2ae>
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ae70:	b29b      	uxth	r3, r3
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d014      	beq.n	800aea0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	68da      	ldr	r2, [r3, #12]
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae80:	b2d2      	uxtb	r2, r2
 800ae82:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae88:	1c5a      	adds	r2, r3, #1
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ae92:	b29b      	uxth	r3, r3
 800ae94:	3b01      	subs	r3, #1
 800ae96:	b29a      	uxth	r2, r3
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800aea0:	f7fb fce6 	bl	8006870 <HAL_GetTick>
 800aea4:	4602      	mov	r2, r0
 800aea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aea8:	1ad3      	subs	r3, r2, r3
 800aeaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aeac:	429a      	cmp	r2, r3
 800aeae:	d803      	bhi.n	800aeb8 <HAL_SPI_TransmitReceive+0x2c6>
 800aeb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeb6:	d102      	bne.n	800aebe <HAL_SPI_TransmitReceive+0x2cc>
 800aeb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d103      	bne.n	800aec6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800aebe:	2303      	movs	r3, #3
 800aec0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800aec4:	e029      	b.n	800af1a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aeca:	b29b      	uxth	r3, r3
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d1a2      	bne.n	800ae16 <HAL_SPI_TransmitReceive+0x224>
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aed4:	b29b      	uxth	r3, r3
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d19d      	bne.n	800ae16 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800aeda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aedc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800aede:	68f8      	ldr	r0, [r7, #12]
 800aee0:	f000 f918 	bl	800b114 <SPI_EndRxTxTransaction>
 800aee4:	4603      	mov	r3, r0
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d006      	beq.n	800aef8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800aeea:	2301      	movs	r3, #1
 800aeec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	2220      	movs	r2, #32
 800aef4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800aef6:	e010      	b.n	800af1a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	689b      	ldr	r3, [r3, #8]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d10b      	bne.n	800af18 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800af00:	2300      	movs	r3, #0
 800af02:	617b      	str	r3, [r7, #20]
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	68db      	ldr	r3, [r3, #12]
 800af0a:	617b      	str	r3, [r7, #20]
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	689b      	ldr	r3, [r3, #8]
 800af12:	617b      	str	r3, [r7, #20]
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	e000      	b.n	800af1a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800af18:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	2201      	movs	r2, #1
 800af1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	2200      	movs	r2, #0
 800af26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800af2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800af2e:	4618      	mov	r0, r3
 800af30:	3730      	adds	r7, #48	; 0x30
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}
	...

0800af38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b088      	sub	sp, #32
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	60f8      	str	r0, [r7, #12]
 800af40:	60b9      	str	r1, [r7, #8]
 800af42:	603b      	str	r3, [r7, #0]
 800af44:	4613      	mov	r3, r2
 800af46:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800af48:	f7fb fc92 	bl	8006870 <HAL_GetTick>
 800af4c:	4602      	mov	r2, r0
 800af4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af50:	1a9b      	subs	r3, r3, r2
 800af52:	683a      	ldr	r2, [r7, #0]
 800af54:	4413      	add	r3, r2
 800af56:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800af58:	f7fb fc8a 	bl	8006870 <HAL_GetTick>
 800af5c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800af5e:	4b39      	ldr	r3, [pc, #228]	; (800b044 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	015b      	lsls	r3, r3, #5
 800af64:	0d1b      	lsrs	r3, r3, #20
 800af66:	69fa      	ldr	r2, [r7, #28]
 800af68:	fb02 f303 	mul.w	r3, r2, r3
 800af6c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800af6e:	e054      	b.n	800b01a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af76:	d050      	beq.n	800b01a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800af78:	f7fb fc7a 	bl	8006870 <HAL_GetTick>
 800af7c:	4602      	mov	r2, r0
 800af7e:	69bb      	ldr	r3, [r7, #24]
 800af80:	1ad3      	subs	r3, r2, r3
 800af82:	69fa      	ldr	r2, [r7, #28]
 800af84:	429a      	cmp	r2, r3
 800af86:	d902      	bls.n	800af8e <SPI_WaitFlagStateUntilTimeout+0x56>
 800af88:	69fb      	ldr	r3, [r7, #28]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d13d      	bne.n	800b00a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	685a      	ldr	r2, [r3, #4]
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800af9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	685b      	ldr	r3, [r3, #4]
 800afa2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800afa6:	d111      	bne.n	800afcc <SPI_WaitFlagStateUntilTimeout+0x94>
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	689b      	ldr	r3, [r3, #8]
 800afac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800afb0:	d004      	beq.n	800afbc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	689b      	ldr	r3, [r3, #8]
 800afb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800afba:	d107      	bne.n	800afcc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	681a      	ldr	r2, [r3, #0]
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800afca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800afd4:	d10f      	bne.n	800aff6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	681a      	ldr	r2, [r3, #0]
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800afe4:	601a      	str	r2, [r3, #0]
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	681a      	ldr	r2, [r3, #0]
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800aff4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	2201      	movs	r2, #1
 800affa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	2200      	movs	r2, #0
 800b002:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800b006:	2303      	movs	r3, #3
 800b008:	e017      	b.n	800b03a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b00a:	697b      	ldr	r3, [r7, #20]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d101      	bne.n	800b014 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b010:	2300      	movs	r3, #0
 800b012:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b014:	697b      	ldr	r3, [r7, #20]
 800b016:	3b01      	subs	r3, #1
 800b018:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	689a      	ldr	r2, [r3, #8]
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	4013      	ands	r3, r2
 800b024:	68ba      	ldr	r2, [r7, #8]
 800b026:	429a      	cmp	r2, r3
 800b028:	bf0c      	ite	eq
 800b02a:	2301      	moveq	r3, #1
 800b02c:	2300      	movne	r3, #0
 800b02e:	b2db      	uxtb	r3, r3
 800b030:	461a      	mov	r2, r3
 800b032:	79fb      	ldrb	r3, [r7, #7]
 800b034:	429a      	cmp	r2, r3
 800b036:	d19b      	bne.n	800af70 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b038:	2300      	movs	r3, #0
}
 800b03a:	4618      	mov	r0, r3
 800b03c:	3720      	adds	r7, #32
 800b03e:	46bd      	mov	sp, r7
 800b040:	bd80      	pop	{r7, pc}
 800b042:	bf00      	nop
 800b044:	20000014 	.word	0x20000014

0800b048 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b086      	sub	sp, #24
 800b04c:	af02      	add	r7, sp, #8
 800b04e:	60f8      	str	r0, [r7, #12]
 800b050:	60b9      	str	r1, [r7, #8]
 800b052:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	685b      	ldr	r3, [r3, #4]
 800b058:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b05c:	d111      	bne.n	800b082 <SPI_EndRxTransaction+0x3a>
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	689b      	ldr	r3, [r3, #8]
 800b062:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b066:	d004      	beq.n	800b072 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	689b      	ldr	r3, [r3, #8]
 800b06c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b070:	d107      	bne.n	800b082 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	681a      	ldr	r2, [r3, #0]
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b080:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	685b      	ldr	r3, [r3, #4]
 800b086:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b08a:	d12a      	bne.n	800b0e2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	689b      	ldr	r3, [r3, #8]
 800b090:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b094:	d012      	beq.n	800b0bc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	9300      	str	r3, [sp, #0]
 800b09a:	68bb      	ldr	r3, [r7, #8]
 800b09c:	2200      	movs	r2, #0
 800b09e:	2180      	movs	r1, #128	; 0x80
 800b0a0:	68f8      	ldr	r0, [r7, #12]
 800b0a2:	f7ff ff49 	bl	800af38 <SPI_WaitFlagStateUntilTimeout>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d02d      	beq.n	800b108 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0b0:	f043 0220 	orr.w	r2, r3, #32
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800b0b8:	2303      	movs	r3, #3
 800b0ba:	e026      	b.n	800b10a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	9300      	str	r3, [sp, #0]
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	2101      	movs	r1, #1
 800b0c6:	68f8      	ldr	r0, [r7, #12]
 800b0c8:	f7ff ff36 	bl	800af38 <SPI_WaitFlagStateUntilTimeout>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d01a      	beq.n	800b108 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0d6:	f043 0220 	orr.w	r2, r3, #32
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800b0de:	2303      	movs	r3, #3
 800b0e0:	e013      	b.n	800b10a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	9300      	str	r3, [sp, #0]
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	2101      	movs	r1, #1
 800b0ec:	68f8      	ldr	r0, [r7, #12]
 800b0ee:	f7ff ff23 	bl	800af38 <SPI_WaitFlagStateUntilTimeout>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d007      	beq.n	800b108 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0fc:	f043 0220 	orr.w	r2, r3, #32
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b104:	2303      	movs	r3, #3
 800b106:	e000      	b.n	800b10a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800b108:	2300      	movs	r3, #0
}
 800b10a:	4618      	mov	r0, r3
 800b10c:	3710      	adds	r7, #16
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}
	...

0800b114 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b088      	sub	sp, #32
 800b118:	af02      	add	r7, sp, #8
 800b11a:	60f8      	str	r0, [r7, #12]
 800b11c:	60b9      	str	r1, [r7, #8]
 800b11e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b120:	4b1b      	ldr	r3, [pc, #108]	; (800b190 <SPI_EndRxTxTransaction+0x7c>)
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	4a1b      	ldr	r2, [pc, #108]	; (800b194 <SPI_EndRxTxTransaction+0x80>)
 800b126:	fba2 2303 	umull	r2, r3, r2, r3
 800b12a:	0d5b      	lsrs	r3, r3, #21
 800b12c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b130:	fb02 f303 	mul.w	r3, r2, r3
 800b134:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	685b      	ldr	r3, [r3, #4]
 800b13a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b13e:	d112      	bne.n	800b166 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	9300      	str	r3, [sp, #0]
 800b144:	68bb      	ldr	r3, [r7, #8]
 800b146:	2200      	movs	r2, #0
 800b148:	2180      	movs	r1, #128	; 0x80
 800b14a:	68f8      	ldr	r0, [r7, #12]
 800b14c:	f7ff fef4 	bl	800af38 <SPI_WaitFlagStateUntilTimeout>
 800b150:	4603      	mov	r3, r0
 800b152:	2b00      	cmp	r3, #0
 800b154:	d016      	beq.n	800b184 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b15a:	f043 0220 	orr.w	r2, r3, #32
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b162:	2303      	movs	r3, #3
 800b164:	e00f      	b.n	800b186 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b166:	697b      	ldr	r3, [r7, #20]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d00a      	beq.n	800b182 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800b16c:	697b      	ldr	r3, [r7, #20]
 800b16e:	3b01      	subs	r3, #1
 800b170:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	689b      	ldr	r3, [r3, #8]
 800b178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b17c:	2b80      	cmp	r3, #128	; 0x80
 800b17e:	d0f2      	beq.n	800b166 <SPI_EndRxTxTransaction+0x52>
 800b180:	e000      	b.n	800b184 <SPI_EndRxTxTransaction+0x70>
        break;
 800b182:	bf00      	nop
  }

  return HAL_OK;
 800b184:	2300      	movs	r3, #0
}
 800b186:	4618      	mov	r0, r3
 800b188:	3718      	adds	r7, #24
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}
 800b18e:	bf00      	nop
 800b190:	20000014 	.word	0x20000014
 800b194:	165e9f81 	.word	0x165e9f81

0800b198 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b082      	sub	sp, #8
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d101      	bne.n	800b1aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	e041      	b.n	800b22e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1b0:	b2db      	uxtb	r3, r3
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d106      	bne.n	800b1c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f7fa fd1e 	bl	8005c00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2202      	movs	r2, #2
 800b1c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681a      	ldr	r2, [r3, #0]
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	3304      	adds	r3, #4
 800b1d4:	4619      	mov	r1, r3
 800b1d6:	4610      	mov	r0, r2
 800b1d8:	f000 fb0a 	bl	800b7f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2201      	movs	r2, #1
 800b1e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2201      	movs	r2, #1
 800b1e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2201      	movs	r2, #1
 800b1f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2201      	movs	r2, #1
 800b1f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2201      	movs	r2, #1
 800b200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2201      	movs	r2, #1
 800b208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2201      	movs	r2, #1
 800b210:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2201      	movs	r2, #1
 800b218:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2201      	movs	r2, #1
 800b220:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2201      	movs	r2, #1
 800b228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b22c:	2300      	movs	r3, #0
}
 800b22e:	4618      	mov	r0, r3
 800b230:	3708      	adds	r7, #8
 800b232:	46bd      	mov	sp, r7
 800b234:	bd80      	pop	{r7, pc}
	...

0800b238 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b238:	b480      	push	{r7}
 800b23a:	b085      	sub	sp, #20
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b246:	b2db      	uxtb	r3, r3
 800b248:	2b01      	cmp	r3, #1
 800b24a:	d001      	beq.n	800b250 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b24c:	2301      	movs	r3, #1
 800b24e:	e03c      	b.n	800b2ca <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2202      	movs	r2, #2
 800b254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	4a1e      	ldr	r2, [pc, #120]	; (800b2d8 <HAL_TIM_Base_Start+0xa0>)
 800b25e:	4293      	cmp	r3, r2
 800b260:	d018      	beq.n	800b294 <HAL_TIM_Base_Start+0x5c>
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b26a:	d013      	beq.n	800b294 <HAL_TIM_Base_Start+0x5c>
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	4a1a      	ldr	r2, [pc, #104]	; (800b2dc <HAL_TIM_Base_Start+0xa4>)
 800b272:	4293      	cmp	r3, r2
 800b274:	d00e      	beq.n	800b294 <HAL_TIM_Base_Start+0x5c>
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	4a19      	ldr	r2, [pc, #100]	; (800b2e0 <HAL_TIM_Base_Start+0xa8>)
 800b27c:	4293      	cmp	r3, r2
 800b27e:	d009      	beq.n	800b294 <HAL_TIM_Base_Start+0x5c>
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	4a17      	ldr	r2, [pc, #92]	; (800b2e4 <HAL_TIM_Base_Start+0xac>)
 800b286:	4293      	cmp	r3, r2
 800b288:	d004      	beq.n	800b294 <HAL_TIM_Base_Start+0x5c>
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	4a16      	ldr	r2, [pc, #88]	; (800b2e8 <HAL_TIM_Base_Start+0xb0>)
 800b290:	4293      	cmp	r3, r2
 800b292:	d111      	bne.n	800b2b8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	689b      	ldr	r3, [r3, #8]
 800b29a:	f003 0307 	and.w	r3, r3, #7
 800b29e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	2b06      	cmp	r3, #6
 800b2a4:	d010      	beq.n	800b2c8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	681a      	ldr	r2, [r3, #0]
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f042 0201 	orr.w	r2, r2, #1
 800b2b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2b6:	e007      	b.n	800b2c8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	681a      	ldr	r2, [r3, #0]
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	f042 0201 	orr.w	r2, r2, #1
 800b2c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b2c8:	2300      	movs	r3, #0
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	3714      	adds	r7, #20
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d4:	4770      	bx	lr
 800b2d6:	bf00      	nop
 800b2d8:	40010000 	.word	0x40010000
 800b2dc:	40000400 	.word	0x40000400
 800b2e0:	40000800 	.word	0x40000800
 800b2e4:	40000c00 	.word	0x40000c00
 800b2e8:	40014000 	.word	0x40014000

0800b2ec <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800b2ec:	b480      	push	{r7}
 800b2ee:	b083      	sub	sp, #12
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	6a1a      	ldr	r2, [r3, #32]
 800b2fa:	f241 1311 	movw	r3, #4369	; 0x1111
 800b2fe:	4013      	ands	r3, r2
 800b300:	2b00      	cmp	r3, #0
 800b302:	d10f      	bne.n	800b324 <HAL_TIM_Base_Stop+0x38>
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	6a1a      	ldr	r2, [r3, #32]
 800b30a:	f240 4344 	movw	r3, #1092	; 0x444
 800b30e:	4013      	ands	r3, r2
 800b310:	2b00      	cmp	r3, #0
 800b312:	d107      	bne.n	800b324 <HAL_TIM_Base_Stop+0x38>
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	681a      	ldr	r2, [r3, #0]
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	f022 0201 	bic.w	r2, r2, #1
 800b322:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2201      	movs	r2, #1
 800b328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800b32c:	2300      	movs	r3, #0
}
 800b32e:	4618      	mov	r0, r3
 800b330:	370c      	adds	r7, #12
 800b332:	46bd      	mov	sp, r7
 800b334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b338:	4770      	bx	lr
	...

0800b33c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b33c:	b480      	push	{r7}
 800b33e:	b085      	sub	sp, #20
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b34a:	b2db      	uxtb	r3, r3
 800b34c:	2b01      	cmp	r3, #1
 800b34e:	d001      	beq.n	800b354 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b350:	2301      	movs	r3, #1
 800b352:	e044      	b.n	800b3de <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2202      	movs	r2, #2
 800b358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	68da      	ldr	r2, [r3, #12]
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	f042 0201 	orr.w	r2, r2, #1
 800b36a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	4a1e      	ldr	r2, [pc, #120]	; (800b3ec <HAL_TIM_Base_Start_IT+0xb0>)
 800b372:	4293      	cmp	r3, r2
 800b374:	d018      	beq.n	800b3a8 <HAL_TIM_Base_Start_IT+0x6c>
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b37e:	d013      	beq.n	800b3a8 <HAL_TIM_Base_Start_IT+0x6c>
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	4a1a      	ldr	r2, [pc, #104]	; (800b3f0 <HAL_TIM_Base_Start_IT+0xb4>)
 800b386:	4293      	cmp	r3, r2
 800b388:	d00e      	beq.n	800b3a8 <HAL_TIM_Base_Start_IT+0x6c>
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	4a19      	ldr	r2, [pc, #100]	; (800b3f4 <HAL_TIM_Base_Start_IT+0xb8>)
 800b390:	4293      	cmp	r3, r2
 800b392:	d009      	beq.n	800b3a8 <HAL_TIM_Base_Start_IT+0x6c>
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	4a17      	ldr	r2, [pc, #92]	; (800b3f8 <HAL_TIM_Base_Start_IT+0xbc>)
 800b39a:	4293      	cmp	r3, r2
 800b39c:	d004      	beq.n	800b3a8 <HAL_TIM_Base_Start_IT+0x6c>
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	4a16      	ldr	r2, [pc, #88]	; (800b3fc <HAL_TIM_Base_Start_IT+0xc0>)
 800b3a4:	4293      	cmp	r3, r2
 800b3a6:	d111      	bne.n	800b3cc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	689b      	ldr	r3, [r3, #8]
 800b3ae:	f003 0307 	and.w	r3, r3, #7
 800b3b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	2b06      	cmp	r3, #6
 800b3b8:	d010      	beq.n	800b3dc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	681a      	ldr	r2, [r3, #0]
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	f042 0201 	orr.w	r2, r2, #1
 800b3c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3ca:	e007      	b.n	800b3dc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	681a      	ldr	r2, [r3, #0]
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f042 0201 	orr.w	r2, r2, #1
 800b3da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b3dc:	2300      	movs	r3, #0
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	3714      	adds	r7, #20
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e8:	4770      	bx	lr
 800b3ea:	bf00      	nop
 800b3ec:	40010000 	.word	0x40010000
 800b3f0:	40000400 	.word	0x40000400
 800b3f4:	40000800 	.word	0x40000800
 800b3f8:	40000c00 	.word	0x40000c00
 800b3fc:	40014000 	.word	0x40014000

0800b400 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b082      	sub	sp, #8
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	691b      	ldr	r3, [r3, #16]
 800b40e:	f003 0302 	and.w	r3, r3, #2
 800b412:	2b02      	cmp	r3, #2
 800b414:	d122      	bne.n	800b45c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	68db      	ldr	r3, [r3, #12]
 800b41c:	f003 0302 	and.w	r3, r3, #2
 800b420:	2b02      	cmp	r3, #2
 800b422:	d11b      	bne.n	800b45c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	f06f 0202 	mvn.w	r2, #2
 800b42c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2201      	movs	r2, #1
 800b432:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	699b      	ldr	r3, [r3, #24]
 800b43a:	f003 0303 	and.w	r3, r3, #3
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d003      	beq.n	800b44a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b442:	6878      	ldr	r0, [r7, #4]
 800b444:	f000 f9b5 	bl	800b7b2 <HAL_TIM_IC_CaptureCallback>
 800b448:	e005      	b.n	800b456 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f000 f9a7 	bl	800b79e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	f000 f9b8 	bl	800b7c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2200      	movs	r2, #0
 800b45a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	691b      	ldr	r3, [r3, #16]
 800b462:	f003 0304 	and.w	r3, r3, #4
 800b466:	2b04      	cmp	r3, #4
 800b468:	d122      	bne.n	800b4b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	68db      	ldr	r3, [r3, #12]
 800b470:	f003 0304 	and.w	r3, r3, #4
 800b474:	2b04      	cmp	r3, #4
 800b476:	d11b      	bne.n	800b4b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	f06f 0204 	mvn.w	r2, #4
 800b480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2202      	movs	r2, #2
 800b486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	699b      	ldr	r3, [r3, #24]
 800b48e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b492:	2b00      	cmp	r3, #0
 800b494:	d003      	beq.n	800b49e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	f000 f98b 	bl	800b7b2 <HAL_TIM_IC_CaptureCallback>
 800b49c:	e005      	b.n	800b4aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b49e:	6878      	ldr	r0, [r7, #4]
 800b4a0:	f000 f97d 	bl	800b79e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	f000 f98e 	bl	800b7c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	691b      	ldr	r3, [r3, #16]
 800b4b6:	f003 0308 	and.w	r3, r3, #8
 800b4ba:	2b08      	cmp	r3, #8
 800b4bc:	d122      	bne.n	800b504 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	68db      	ldr	r3, [r3, #12]
 800b4c4:	f003 0308 	and.w	r3, r3, #8
 800b4c8:	2b08      	cmp	r3, #8
 800b4ca:	d11b      	bne.n	800b504 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f06f 0208 	mvn.w	r2, #8
 800b4d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2204      	movs	r2, #4
 800b4da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	69db      	ldr	r3, [r3, #28]
 800b4e2:	f003 0303 	and.w	r3, r3, #3
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d003      	beq.n	800b4f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b4ea:	6878      	ldr	r0, [r7, #4]
 800b4ec:	f000 f961 	bl	800b7b2 <HAL_TIM_IC_CaptureCallback>
 800b4f0:	e005      	b.n	800b4fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f000 f953 	bl	800b79e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b4f8:	6878      	ldr	r0, [r7, #4]
 800b4fa:	f000 f964 	bl	800b7c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2200      	movs	r2, #0
 800b502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	691b      	ldr	r3, [r3, #16]
 800b50a:	f003 0310 	and.w	r3, r3, #16
 800b50e:	2b10      	cmp	r3, #16
 800b510:	d122      	bne.n	800b558 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	68db      	ldr	r3, [r3, #12]
 800b518:	f003 0310 	and.w	r3, r3, #16
 800b51c:	2b10      	cmp	r3, #16
 800b51e:	d11b      	bne.n	800b558 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	f06f 0210 	mvn.w	r2, #16
 800b528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2208      	movs	r2, #8
 800b52e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	69db      	ldr	r3, [r3, #28]
 800b536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d003      	beq.n	800b546 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f000 f937 	bl	800b7b2 <HAL_TIM_IC_CaptureCallback>
 800b544:	e005      	b.n	800b552 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	f000 f929 	bl	800b79e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	f000 f93a 	bl	800b7c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2200      	movs	r2, #0
 800b556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	691b      	ldr	r3, [r3, #16]
 800b55e:	f003 0301 	and.w	r3, r3, #1
 800b562:	2b01      	cmp	r3, #1
 800b564:	d10e      	bne.n	800b584 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	68db      	ldr	r3, [r3, #12]
 800b56c:	f003 0301 	and.w	r3, r3, #1
 800b570:	2b01      	cmp	r3, #1
 800b572:	d107      	bne.n	800b584 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	f06f 0201 	mvn.w	r2, #1
 800b57c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f7f7 fa46 	bl	8002a10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	691b      	ldr	r3, [r3, #16]
 800b58a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b58e:	2b80      	cmp	r3, #128	; 0x80
 800b590:	d10e      	bne.n	800b5b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	68db      	ldr	r3, [r3, #12]
 800b598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b59c:	2b80      	cmp	r3, #128	; 0x80
 800b59e:	d107      	bne.n	800b5b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b5a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f000 fab2 	bl	800bb14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	691b      	ldr	r3, [r3, #16]
 800b5b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5ba:	2b40      	cmp	r3, #64	; 0x40
 800b5bc:	d10e      	bne.n	800b5dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	68db      	ldr	r3, [r3, #12]
 800b5c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5c8:	2b40      	cmp	r3, #64	; 0x40
 800b5ca:	d107      	bne.n	800b5dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b5d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f000 f8ff 	bl	800b7da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	691b      	ldr	r3, [r3, #16]
 800b5e2:	f003 0320 	and.w	r3, r3, #32
 800b5e6:	2b20      	cmp	r3, #32
 800b5e8:	d10e      	bne.n	800b608 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	68db      	ldr	r3, [r3, #12]
 800b5f0:	f003 0320 	and.w	r3, r3, #32
 800b5f4:	2b20      	cmp	r3, #32
 800b5f6:	d107      	bne.n	800b608 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	f06f 0220 	mvn.w	r2, #32
 800b600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f000 fa7c 	bl	800bb00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b608:	bf00      	nop
 800b60a:	3708      	adds	r7, #8
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bd80      	pop	{r7, pc}

0800b610 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b084      	sub	sp, #16
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b61a:	2300      	movs	r3, #0
 800b61c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b624:	2b01      	cmp	r3, #1
 800b626:	d101      	bne.n	800b62c <HAL_TIM_ConfigClockSource+0x1c>
 800b628:	2302      	movs	r3, #2
 800b62a:	e0b4      	b.n	800b796 <HAL_TIM_ConfigClockSource+0x186>
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2201      	movs	r2, #1
 800b630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2202      	movs	r2, #2
 800b638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	689b      	ldr	r3, [r3, #8]
 800b642:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b64a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b64c:	68bb      	ldr	r3, [r7, #8]
 800b64e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b652:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	68ba      	ldr	r2, [r7, #8]
 800b65a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b664:	d03e      	beq.n	800b6e4 <HAL_TIM_ConfigClockSource+0xd4>
 800b666:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b66a:	f200 8087 	bhi.w	800b77c <HAL_TIM_ConfigClockSource+0x16c>
 800b66e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b672:	f000 8086 	beq.w	800b782 <HAL_TIM_ConfigClockSource+0x172>
 800b676:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b67a:	d87f      	bhi.n	800b77c <HAL_TIM_ConfigClockSource+0x16c>
 800b67c:	2b70      	cmp	r3, #112	; 0x70
 800b67e:	d01a      	beq.n	800b6b6 <HAL_TIM_ConfigClockSource+0xa6>
 800b680:	2b70      	cmp	r3, #112	; 0x70
 800b682:	d87b      	bhi.n	800b77c <HAL_TIM_ConfigClockSource+0x16c>
 800b684:	2b60      	cmp	r3, #96	; 0x60
 800b686:	d050      	beq.n	800b72a <HAL_TIM_ConfigClockSource+0x11a>
 800b688:	2b60      	cmp	r3, #96	; 0x60
 800b68a:	d877      	bhi.n	800b77c <HAL_TIM_ConfigClockSource+0x16c>
 800b68c:	2b50      	cmp	r3, #80	; 0x50
 800b68e:	d03c      	beq.n	800b70a <HAL_TIM_ConfigClockSource+0xfa>
 800b690:	2b50      	cmp	r3, #80	; 0x50
 800b692:	d873      	bhi.n	800b77c <HAL_TIM_ConfigClockSource+0x16c>
 800b694:	2b40      	cmp	r3, #64	; 0x40
 800b696:	d058      	beq.n	800b74a <HAL_TIM_ConfigClockSource+0x13a>
 800b698:	2b40      	cmp	r3, #64	; 0x40
 800b69a:	d86f      	bhi.n	800b77c <HAL_TIM_ConfigClockSource+0x16c>
 800b69c:	2b30      	cmp	r3, #48	; 0x30
 800b69e:	d064      	beq.n	800b76a <HAL_TIM_ConfigClockSource+0x15a>
 800b6a0:	2b30      	cmp	r3, #48	; 0x30
 800b6a2:	d86b      	bhi.n	800b77c <HAL_TIM_ConfigClockSource+0x16c>
 800b6a4:	2b20      	cmp	r3, #32
 800b6a6:	d060      	beq.n	800b76a <HAL_TIM_ConfigClockSource+0x15a>
 800b6a8:	2b20      	cmp	r3, #32
 800b6aa:	d867      	bhi.n	800b77c <HAL_TIM_ConfigClockSource+0x16c>
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d05c      	beq.n	800b76a <HAL_TIM_ConfigClockSource+0x15a>
 800b6b0:	2b10      	cmp	r3, #16
 800b6b2:	d05a      	beq.n	800b76a <HAL_TIM_ConfigClockSource+0x15a>
 800b6b4:	e062      	b.n	800b77c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	6818      	ldr	r0, [r3, #0]
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	6899      	ldr	r1, [r3, #8]
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	685a      	ldr	r2, [r3, #4]
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	68db      	ldr	r3, [r3, #12]
 800b6c6:	f000 f98d 	bl	800b9e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	689b      	ldr	r3, [r3, #8]
 800b6d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b6d2:	68bb      	ldr	r3, [r7, #8]
 800b6d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b6d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	68ba      	ldr	r2, [r7, #8]
 800b6e0:	609a      	str	r2, [r3, #8]
      break;
 800b6e2:	e04f      	b.n	800b784 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	6818      	ldr	r0, [r3, #0]
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	6899      	ldr	r1, [r3, #8]
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	685a      	ldr	r2, [r3, #4]
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	68db      	ldr	r3, [r3, #12]
 800b6f4:	f000 f976 	bl	800b9e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	689a      	ldr	r2, [r3, #8]
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b706:	609a      	str	r2, [r3, #8]
      break;
 800b708:	e03c      	b.n	800b784 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6818      	ldr	r0, [r3, #0]
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	6859      	ldr	r1, [r3, #4]
 800b712:	683b      	ldr	r3, [r7, #0]
 800b714:	68db      	ldr	r3, [r3, #12]
 800b716:	461a      	mov	r2, r3
 800b718:	f000 f8ea 	bl	800b8f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	2150      	movs	r1, #80	; 0x50
 800b722:	4618      	mov	r0, r3
 800b724:	f000 f943 	bl	800b9ae <TIM_ITRx_SetConfig>
      break;
 800b728:	e02c      	b.n	800b784 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6818      	ldr	r0, [r3, #0]
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	6859      	ldr	r1, [r3, #4]
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	68db      	ldr	r3, [r3, #12]
 800b736:	461a      	mov	r2, r3
 800b738:	f000 f909 	bl	800b94e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	2160      	movs	r1, #96	; 0x60
 800b742:	4618      	mov	r0, r3
 800b744:	f000 f933 	bl	800b9ae <TIM_ITRx_SetConfig>
      break;
 800b748:	e01c      	b.n	800b784 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	6818      	ldr	r0, [r3, #0]
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	6859      	ldr	r1, [r3, #4]
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	68db      	ldr	r3, [r3, #12]
 800b756:	461a      	mov	r2, r3
 800b758:	f000 f8ca 	bl	800b8f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	2140      	movs	r1, #64	; 0x40
 800b762:	4618      	mov	r0, r3
 800b764:	f000 f923 	bl	800b9ae <TIM_ITRx_SetConfig>
      break;
 800b768:	e00c      	b.n	800b784 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681a      	ldr	r2, [r3, #0]
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	4619      	mov	r1, r3
 800b774:	4610      	mov	r0, r2
 800b776:	f000 f91a 	bl	800b9ae <TIM_ITRx_SetConfig>
      break;
 800b77a:	e003      	b.n	800b784 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b77c:	2301      	movs	r3, #1
 800b77e:	73fb      	strb	r3, [r7, #15]
      break;
 800b780:	e000      	b.n	800b784 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b782:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2201      	movs	r2, #1
 800b788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2200      	movs	r2, #0
 800b790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b794:	7bfb      	ldrb	r3, [r7, #15]
}
 800b796:	4618      	mov	r0, r3
 800b798:	3710      	adds	r7, #16
 800b79a:	46bd      	mov	sp, r7
 800b79c:	bd80      	pop	{r7, pc}

0800b79e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b79e:	b480      	push	{r7}
 800b7a0:	b083      	sub	sp, #12
 800b7a2:	af00      	add	r7, sp, #0
 800b7a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b7a6:	bf00      	nop
 800b7a8:	370c      	adds	r7, #12
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b0:	4770      	bx	lr

0800b7b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b7b2:	b480      	push	{r7}
 800b7b4:	b083      	sub	sp, #12
 800b7b6:	af00      	add	r7, sp, #0
 800b7b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b7ba:	bf00      	nop
 800b7bc:	370c      	adds	r7, #12
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c4:	4770      	bx	lr

0800b7c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b7c6:	b480      	push	{r7}
 800b7c8:	b083      	sub	sp, #12
 800b7ca:	af00      	add	r7, sp, #0
 800b7cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b7ce:	bf00      	nop
 800b7d0:	370c      	adds	r7, #12
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d8:	4770      	bx	lr

0800b7da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b7da:	b480      	push	{r7}
 800b7dc:	b083      	sub	sp, #12
 800b7de:	af00      	add	r7, sp, #0
 800b7e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b7e2:	bf00      	nop
 800b7e4:	370c      	adds	r7, #12
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ec:	4770      	bx	lr
	...

0800b7f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b7f0:	b480      	push	{r7}
 800b7f2:	b085      	sub	sp, #20
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
 800b7f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	4a34      	ldr	r2, [pc, #208]	; (800b8d4 <TIM_Base_SetConfig+0xe4>)
 800b804:	4293      	cmp	r3, r2
 800b806:	d00f      	beq.n	800b828 <TIM_Base_SetConfig+0x38>
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b80e:	d00b      	beq.n	800b828 <TIM_Base_SetConfig+0x38>
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	4a31      	ldr	r2, [pc, #196]	; (800b8d8 <TIM_Base_SetConfig+0xe8>)
 800b814:	4293      	cmp	r3, r2
 800b816:	d007      	beq.n	800b828 <TIM_Base_SetConfig+0x38>
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	4a30      	ldr	r2, [pc, #192]	; (800b8dc <TIM_Base_SetConfig+0xec>)
 800b81c:	4293      	cmp	r3, r2
 800b81e:	d003      	beq.n	800b828 <TIM_Base_SetConfig+0x38>
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	4a2f      	ldr	r2, [pc, #188]	; (800b8e0 <TIM_Base_SetConfig+0xf0>)
 800b824:	4293      	cmp	r3, r2
 800b826:	d108      	bne.n	800b83a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b82e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	685b      	ldr	r3, [r3, #4]
 800b834:	68fa      	ldr	r2, [r7, #12]
 800b836:	4313      	orrs	r3, r2
 800b838:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	4a25      	ldr	r2, [pc, #148]	; (800b8d4 <TIM_Base_SetConfig+0xe4>)
 800b83e:	4293      	cmp	r3, r2
 800b840:	d01b      	beq.n	800b87a <TIM_Base_SetConfig+0x8a>
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b848:	d017      	beq.n	800b87a <TIM_Base_SetConfig+0x8a>
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	4a22      	ldr	r2, [pc, #136]	; (800b8d8 <TIM_Base_SetConfig+0xe8>)
 800b84e:	4293      	cmp	r3, r2
 800b850:	d013      	beq.n	800b87a <TIM_Base_SetConfig+0x8a>
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	4a21      	ldr	r2, [pc, #132]	; (800b8dc <TIM_Base_SetConfig+0xec>)
 800b856:	4293      	cmp	r3, r2
 800b858:	d00f      	beq.n	800b87a <TIM_Base_SetConfig+0x8a>
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	4a20      	ldr	r2, [pc, #128]	; (800b8e0 <TIM_Base_SetConfig+0xf0>)
 800b85e:	4293      	cmp	r3, r2
 800b860:	d00b      	beq.n	800b87a <TIM_Base_SetConfig+0x8a>
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	4a1f      	ldr	r2, [pc, #124]	; (800b8e4 <TIM_Base_SetConfig+0xf4>)
 800b866:	4293      	cmp	r3, r2
 800b868:	d007      	beq.n	800b87a <TIM_Base_SetConfig+0x8a>
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	4a1e      	ldr	r2, [pc, #120]	; (800b8e8 <TIM_Base_SetConfig+0xf8>)
 800b86e:	4293      	cmp	r3, r2
 800b870:	d003      	beq.n	800b87a <TIM_Base_SetConfig+0x8a>
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	4a1d      	ldr	r2, [pc, #116]	; (800b8ec <TIM_Base_SetConfig+0xfc>)
 800b876:	4293      	cmp	r3, r2
 800b878:	d108      	bne.n	800b88c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b880:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	68db      	ldr	r3, [r3, #12]
 800b886:	68fa      	ldr	r2, [r7, #12]
 800b888:	4313      	orrs	r3, r2
 800b88a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	695b      	ldr	r3, [r3, #20]
 800b896:	4313      	orrs	r3, r2
 800b898:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	68fa      	ldr	r2, [r7, #12]
 800b89e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	689a      	ldr	r2, [r3, #8]
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	681a      	ldr	r2, [r3, #0]
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	4a08      	ldr	r2, [pc, #32]	; (800b8d4 <TIM_Base_SetConfig+0xe4>)
 800b8b4:	4293      	cmp	r3, r2
 800b8b6:	d103      	bne.n	800b8c0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	691a      	ldr	r2, [r3, #16]
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2201      	movs	r2, #1
 800b8c4:	615a      	str	r2, [r3, #20]
}
 800b8c6:	bf00      	nop
 800b8c8:	3714      	adds	r7, #20
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d0:	4770      	bx	lr
 800b8d2:	bf00      	nop
 800b8d4:	40010000 	.word	0x40010000
 800b8d8:	40000400 	.word	0x40000400
 800b8dc:	40000800 	.word	0x40000800
 800b8e0:	40000c00 	.word	0x40000c00
 800b8e4:	40014000 	.word	0x40014000
 800b8e8:	40014400 	.word	0x40014400
 800b8ec:	40014800 	.word	0x40014800

0800b8f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b8f0:	b480      	push	{r7}
 800b8f2:	b087      	sub	sp, #28
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	60f8      	str	r0, [r7, #12]
 800b8f8:	60b9      	str	r1, [r7, #8]
 800b8fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	6a1b      	ldr	r3, [r3, #32]
 800b900:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	6a1b      	ldr	r3, [r3, #32]
 800b906:	f023 0201 	bic.w	r2, r3, #1
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	699b      	ldr	r3, [r3, #24]
 800b912:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b914:	693b      	ldr	r3, [r7, #16]
 800b916:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b91a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	011b      	lsls	r3, r3, #4
 800b920:	693a      	ldr	r2, [r7, #16]
 800b922:	4313      	orrs	r3, r2
 800b924:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b926:	697b      	ldr	r3, [r7, #20]
 800b928:	f023 030a 	bic.w	r3, r3, #10
 800b92c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b92e:	697a      	ldr	r2, [r7, #20]
 800b930:	68bb      	ldr	r3, [r7, #8]
 800b932:	4313      	orrs	r3, r2
 800b934:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	693a      	ldr	r2, [r7, #16]
 800b93a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	697a      	ldr	r2, [r7, #20]
 800b940:	621a      	str	r2, [r3, #32]
}
 800b942:	bf00      	nop
 800b944:	371c      	adds	r7, #28
 800b946:	46bd      	mov	sp, r7
 800b948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94c:	4770      	bx	lr

0800b94e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b94e:	b480      	push	{r7}
 800b950:	b087      	sub	sp, #28
 800b952:	af00      	add	r7, sp, #0
 800b954:	60f8      	str	r0, [r7, #12]
 800b956:	60b9      	str	r1, [r7, #8]
 800b958:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	6a1b      	ldr	r3, [r3, #32]
 800b95e:	f023 0210 	bic.w	r2, r3, #16
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	699b      	ldr	r3, [r3, #24]
 800b96a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	6a1b      	ldr	r3, [r3, #32]
 800b970:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b972:	697b      	ldr	r3, [r7, #20]
 800b974:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b978:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	031b      	lsls	r3, r3, #12
 800b97e:	697a      	ldr	r2, [r7, #20]
 800b980:	4313      	orrs	r3, r2
 800b982:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b984:	693b      	ldr	r3, [r7, #16]
 800b986:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b98a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	011b      	lsls	r3, r3, #4
 800b990:	693a      	ldr	r2, [r7, #16]
 800b992:	4313      	orrs	r3, r2
 800b994:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	697a      	ldr	r2, [r7, #20]
 800b99a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	693a      	ldr	r2, [r7, #16]
 800b9a0:	621a      	str	r2, [r3, #32]
}
 800b9a2:	bf00      	nop
 800b9a4:	371c      	adds	r7, #28
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ac:	4770      	bx	lr

0800b9ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b9ae:	b480      	push	{r7}
 800b9b0:	b085      	sub	sp, #20
 800b9b2:	af00      	add	r7, sp, #0
 800b9b4:	6078      	str	r0, [r7, #4]
 800b9b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	689b      	ldr	r3, [r3, #8]
 800b9bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b9c6:	683a      	ldr	r2, [r7, #0]
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	4313      	orrs	r3, r2
 800b9cc:	f043 0307 	orr.w	r3, r3, #7
 800b9d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	68fa      	ldr	r2, [r7, #12]
 800b9d6:	609a      	str	r2, [r3, #8]
}
 800b9d8:	bf00      	nop
 800b9da:	3714      	adds	r7, #20
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e2:	4770      	bx	lr

0800b9e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	b087      	sub	sp, #28
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	60f8      	str	r0, [r7, #12]
 800b9ec:	60b9      	str	r1, [r7, #8]
 800b9ee:	607a      	str	r2, [r7, #4]
 800b9f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	689b      	ldr	r3, [r3, #8]
 800b9f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b9f8:	697b      	ldr	r3, [r7, #20]
 800b9fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b9fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	021a      	lsls	r2, r3, #8
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	431a      	orrs	r2, r3
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	4313      	orrs	r3, r2
 800ba0c:	697a      	ldr	r2, [r7, #20]
 800ba0e:	4313      	orrs	r3, r2
 800ba10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	697a      	ldr	r2, [r7, #20]
 800ba16:	609a      	str	r2, [r3, #8]
}
 800ba18:	bf00      	nop
 800ba1a:	371c      	adds	r7, #28
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba22:	4770      	bx	lr

0800ba24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ba24:	b480      	push	{r7}
 800ba26:	b085      	sub	sp, #20
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
 800ba2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba34:	2b01      	cmp	r3, #1
 800ba36:	d101      	bne.n	800ba3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ba38:	2302      	movs	r3, #2
 800ba3a:	e050      	b.n	800bade <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2201      	movs	r2, #1
 800ba40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2202      	movs	r2, #2
 800ba48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	685b      	ldr	r3, [r3, #4]
 800ba52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	689b      	ldr	r3, [r3, #8]
 800ba5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	68fa      	ldr	r2, [r7, #12]
 800ba6a:	4313      	orrs	r3, r2
 800ba6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	68fa      	ldr	r2, [r7, #12]
 800ba74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	4a1c      	ldr	r2, [pc, #112]	; (800baec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800ba7c:	4293      	cmp	r3, r2
 800ba7e:	d018      	beq.n	800bab2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba88:	d013      	beq.n	800bab2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	4a18      	ldr	r2, [pc, #96]	; (800baf0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800ba90:	4293      	cmp	r3, r2
 800ba92:	d00e      	beq.n	800bab2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	4a16      	ldr	r2, [pc, #88]	; (800baf4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800ba9a:	4293      	cmp	r3, r2
 800ba9c:	d009      	beq.n	800bab2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	4a15      	ldr	r2, [pc, #84]	; (800baf8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800baa4:	4293      	cmp	r3, r2
 800baa6:	d004      	beq.n	800bab2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	4a13      	ldr	r2, [pc, #76]	; (800bafc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800baae:	4293      	cmp	r3, r2
 800bab0:	d10c      	bne.n	800bacc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bab2:	68bb      	ldr	r3, [r7, #8]
 800bab4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bab8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	685b      	ldr	r3, [r3, #4]
 800babe:	68ba      	ldr	r2, [r7, #8]
 800bac0:	4313      	orrs	r3, r2
 800bac2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	68ba      	ldr	r2, [r7, #8]
 800baca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2201      	movs	r2, #1
 800bad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2200      	movs	r2, #0
 800bad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800badc:	2300      	movs	r3, #0
}
 800bade:	4618      	mov	r0, r3
 800bae0:	3714      	adds	r7, #20
 800bae2:	46bd      	mov	sp, r7
 800bae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae8:	4770      	bx	lr
 800baea:	bf00      	nop
 800baec:	40010000 	.word	0x40010000
 800baf0:	40000400 	.word	0x40000400
 800baf4:	40000800 	.word	0x40000800
 800baf8:	40000c00 	.word	0x40000c00
 800bafc:	40014000 	.word	0x40014000

0800bb00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bb00:	b480      	push	{r7}
 800bb02:	b083      	sub	sp, #12
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bb08:	bf00      	nop
 800bb0a:	370c      	adds	r7, #12
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb12:	4770      	bx	lr

0800bb14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bb14:	b480      	push	{r7}
 800bb16:	b083      	sub	sp, #12
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bb1c:	bf00      	nop
 800bb1e:	370c      	adds	r7, #12
 800bb20:	46bd      	mov	sp, r7
 800bb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb26:	4770      	bx	lr

0800bb28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b082      	sub	sp, #8
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d101      	bne.n	800bb3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bb36:	2301      	movs	r3, #1
 800bb38:	e03f      	b.n	800bbba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb40:	b2db      	uxtb	r3, r3
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d106      	bne.n	800bb54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2200      	movs	r2, #0
 800bb4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bb4e:	6878      	ldr	r0, [r7, #4]
 800bb50:	f7fa f8ea 	bl	8005d28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2224      	movs	r2, #36	; 0x24
 800bb58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	68da      	ldr	r2, [r3, #12]
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bb6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	f000 fc7b 	bl	800c468 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	691a      	ldr	r2, [r3, #16]
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bb80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	695a      	ldr	r2, [r3, #20]
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bb90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	68da      	ldr	r2, [r3, #12]
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bba0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	2200      	movs	r2, #0
 800bba6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2220      	movs	r2, #32
 800bbac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2220      	movs	r2, #32
 800bbb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800bbb8:	2300      	movs	r3, #0
}
 800bbba:	4618      	mov	r0, r3
 800bbbc:	3708      	adds	r7, #8
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd80      	pop	{r7, pc}
	...

0800bbc4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b0ba      	sub	sp, #232	; 0xe8
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	68db      	ldr	r3, [r3, #12]
 800bbdc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	695b      	ldr	r3, [r3, #20]
 800bbe6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800bbea:	2300      	movs	r3, #0
 800bbec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800bbf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbfa:	f003 030f 	and.w	r3, r3, #15
 800bbfe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800bc02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d10f      	bne.n	800bc2a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bc0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc0e:	f003 0320 	and.w	r3, r3, #32
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d009      	beq.n	800bc2a <HAL_UART_IRQHandler+0x66>
 800bc16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc1a:	f003 0320 	and.w	r3, r3, #32
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d003      	beq.n	800bc2a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f000 fb65 	bl	800c2f2 <UART_Receive_IT>
      return;
 800bc28:	e256      	b.n	800c0d8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800bc2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	f000 80de 	beq.w	800bdf0 <HAL_UART_IRQHandler+0x22c>
 800bc34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc38:	f003 0301 	and.w	r3, r3, #1
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d106      	bne.n	800bc4e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800bc40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc44:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	f000 80d1 	beq.w	800bdf0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800bc4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc52:	f003 0301 	and.w	r3, r3, #1
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d00b      	beq.n	800bc72 <HAL_UART_IRQHandler+0xae>
 800bc5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d005      	beq.n	800bc72 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc6a:	f043 0201 	orr.w	r2, r3, #1
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bc72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc76:	f003 0304 	and.w	r3, r3, #4
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d00b      	beq.n	800bc96 <HAL_UART_IRQHandler+0xd2>
 800bc7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc82:	f003 0301 	and.w	r3, r3, #1
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d005      	beq.n	800bc96 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc8e:	f043 0202 	orr.w	r2, r3, #2
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bc96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc9a:	f003 0302 	and.w	r3, r3, #2
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d00b      	beq.n	800bcba <HAL_UART_IRQHandler+0xf6>
 800bca2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bca6:	f003 0301 	and.w	r3, r3, #1
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d005      	beq.n	800bcba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcb2:	f043 0204 	orr.w	r2, r3, #4
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800bcba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcbe:	f003 0308 	and.w	r3, r3, #8
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d011      	beq.n	800bcea <HAL_UART_IRQHandler+0x126>
 800bcc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bcca:	f003 0320 	and.w	r3, r3, #32
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d105      	bne.n	800bcde <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800bcd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bcd6:	f003 0301 	and.w	r3, r3, #1
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d005      	beq.n	800bcea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bce2:	f043 0208 	orr.w	r2, r3, #8
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	f000 81ed 	beq.w	800c0ce <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bcf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcf8:	f003 0320 	and.w	r3, r3, #32
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d008      	beq.n	800bd12 <HAL_UART_IRQHandler+0x14e>
 800bd00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd04:	f003 0320 	and.w	r3, r3, #32
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d002      	beq.n	800bd12 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800bd0c:	6878      	ldr	r0, [r7, #4]
 800bd0e:	f000 faf0 	bl	800c2f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	695b      	ldr	r3, [r3, #20]
 800bd18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd1c:	2b40      	cmp	r3, #64	; 0x40
 800bd1e:	bf0c      	ite	eq
 800bd20:	2301      	moveq	r3, #1
 800bd22:	2300      	movne	r3, #0
 800bd24:	b2db      	uxtb	r3, r3
 800bd26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd2e:	f003 0308 	and.w	r3, r3, #8
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d103      	bne.n	800bd3e <HAL_UART_IRQHandler+0x17a>
 800bd36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d04f      	beq.n	800bdde <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bd3e:	6878      	ldr	r0, [r7, #4]
 800bd40:	f000 f9f8 	bl	800c134 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	695b      	ldr	r3, [r3, #20]
 800bd4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd4e:	2b40      	cmp	r3, #64	; 0x40
 800bd50:	d141      	bne.n	800bdd6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	3314      	adds	r3, #20
 800bd58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bd60:	e853 3f00 	ldrex	r3, [r3]
 800bd64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bd68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bd6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	3314      	adds	r3, #20
 800bd7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bd7e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bd82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bd8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bd8e:	e841 2300 	strex	r3, r2, [r1]
 800bd92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bd96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d1d9      	bne.n	800bd52 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d013      	beq.n	800bdce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdaa:	4a7d      	ldr	r2, [pc, #500]	; (800bfa0 <HAL_UART_IRQHandler+0x3dc>)
 800bdac:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f7fb fc16 	bl	80075e4 <HAL_DMA_Abort_IT>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d016      	beq.n	800bdec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdc4:	687a      	ldr	r2, [r7, #4]
 800bdc6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800bdc8:	4610      	mov	r0, r2
 800bdca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bdcc:	e00e      	b.n	800bdec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bdce:	6878      	ldr	r0, [r7, #4]
 800bdd0:	f000 f99a 	bl	800c108 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bdd4:	e00a      	b.n	800bdec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bdd6:	6878      	ldr	r0, [r7, #4]
 800bdd8:	f000 f996 	bl	800c108 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bddc:	e006      	b.n	800bdec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	f000 f992 	bl	800c108 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2200      	movs	r2, #0
 800bde8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800bdea:	e170      	b.n	800c0ce <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bdec:	bf00      	nop
    return;
 800bdee:	e16e      	b.n	800c0ce <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdf4:	2b01      	cmp	r3, #1
 800bdf6:	f040 814a 	bne.w	800c08e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800bdfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bdfe:	f003 0310 	and.w	r3, r3, #16
 800be02:	2b00      	cmp	r3, #0
 800be04:	f000 8143 	beq.w	800c08e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800be08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be0c:	f003 0310 	and.w	r3, r3, #16
 800be10:	2b00      	cmp	r3, #0
 800be12:	f000 813c 	beq.w	800c08e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800be16:	2300      	movs	r3, #0
 800be18:	60bb      	str	r3, [r7, #8]
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	60bb      	str	r3, [r7, #8]
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	685b      	ldr	r3, [r3, #4]
 800be28:	60bb      	str	r3, [r7, #8]
 800be2a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	695b      	ldr	r3, [r3, #20]
 800be32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be36:	2b40      	cmp	r3, #64	; 0x40
 800be38:	f040 80b4 	bne.w	800bfa4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	685b      	ldr	r3, [r3, #4]
 800be44:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800be48:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	f000 8140 	beq.w	800c0d2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800be56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800be5a:	429a      	cmp	r2, r3
 800be5c:	f080 8139 	bcs.w	800c0d2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800be66:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be6c:	69db      	ldr	r3, [r3, #28]
 800be6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be72:	f000 8088 	beq.w	800bf86 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	330c      	adds	r3, #12
 800be7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800be84:	e853 3f00 	ldrex	r3, [r3]
 800be88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800be8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800be90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800be94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	330c      	adds	r3, #12
 800be9e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800bea2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bea6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beaa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800beae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800beb2:	e841 2300 	strex	r3, r2, [r1]
 800beb6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800beba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d1d9      	bne.n	800be76 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	3314      	adds	r3, #20
 800bec8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800becc:	e853 3f00 	ldrex	r3, [r3]
 800bed0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bed2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bed4:	f023 0301 	bic.w	r3, r3, #1
 800bed8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	3314      	adds	r3, #20
 800bee2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bee6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800beea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800beee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bef2:	e841 2300 	strex	r3, r2, [r1]
 800bef6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bef8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800befa:	2b00      	cmp	r3, #0
 800befc:	d1e1      	bne.n	800bec2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	3314      	adds	r3, #20
 800bf04:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bf08:	e853 3f00 	ldrex	r3, [r3]
 800bf0c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bf0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	3314      	adds	r3, #20
 800bf1e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bf22:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bf24:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf26:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bf28:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bf2a:	e841 2300 	strex	r3, r2, [r1]
 800bf2e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bf30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d1e3      	bne.n	800befe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	2220      	movs	r2, #32
 800bf3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2200      	movs	r2, #0
 800bf42:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	330c      	adds	r3, #12
 800bf4a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf4e:	e853 3f00 	ldrex	r3, [r3]
 800bf52:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bf54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf56:	f023 0310 	bic.w	r3, r3, #16
 800bf5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	330c      	adds	r3, #12
 800bf64:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bf68:	65ba      	str	r2, [r7, #88]	; 0x58
 800bf6a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf6c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bf6e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bf70:	e841 2300 	strex	r3, r2, [r1]
 800bf74:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bf76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d1e3      	bne.n	800bf44 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf80:	4618      	mov	r0, r3
 800bf82:	f7fb fabf 	bl	8007504 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bf8e:	b29b      	uxth	r3, r3
 800bf90:	1ad3      	subs	r3, r2, r3
 800bf92:	b29b      	uxth	r3, r3
 800bf94:	4619      	mov	r1, r3
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	f000 f8c0 	bl	800c11c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bf9c:	e099      	b.n	800c0d2 <HAL_UART_IRQHandler+0x50e>
 800bf9e:	bf00      	nop
 800bfa0:	0800c1fb 	.word	0x0800c1fb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bfac:	b29b      	uxth	r3, r3
 800bfae:	1ad3      	subs	r3, r2, r3
 800bfb0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bfb8:	b29b      	uxth	r3, r3
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	f000 808b 	beq.w	800c0d6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800bfc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	f000 8086 	beq.w	800c0d6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	330c      	adds	r3, #12
 800bfd0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfd4:	e853 3f00 	ldrex	r3, [r3]
 800bfd8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bfda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfdc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bfe0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	330c      	adds	r3, #12
 800bfea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bfee:	647a      	str	r2, [r7, #68]	; 0x44
 800bff0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bff2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bff4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bff6:	e841 2300 	strex	r3, r2, [r1]
 800bffa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d1e3      	bne.n	800bfca <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	3314      	adds	r3, #20
 800c008:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c00c:	e853 3f00 	ldrex	r3, [r3]
 800c010:	623b      	str	r3, [r7, #32]
   return(result);
 800c012:	6a3b      	ldr	r3, [r7, #32]
 800c014:	f023 0301 	bic.w	r3, r3, #1
 800c018:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	3314      	adds	r3, #20
 800c022:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c026:	633a      	str	r2, [r7, #48]	; 0x30
 800c028:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c02a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c02c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c02e:	e841 2300 	strex	r3, r2, [r1]
 800c032:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c036:	2b00      	cmp	r3, #0
 800c038:	d1e3      	bne.n	800c002 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2220      	movs	r2, #32
 800c03e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2200      	movs	r2, #0
 800c046:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	330c      	adds	r3, #12
 800c04e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c050:	693b      	ldr	r3, [r7, #16]
 800c052:	e853 3f00 	ldrex	r3, [r3]
 800c056:	60fb      	str	r3, [r7, #12]
   return(result);
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	f023 0310 	bic.w	r3, r3, #16
 800c05e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	330c      	adds	r3, #12
 800c068:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c06c:	61fa      	str	r2, [r7, #28]
 800c06e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c070:	69b9      	ldr	r1, [r7, #24]
 800c072:	69fa      	ldr	r2, [r7, #28]
 800c074:	e841 2300 	strex	r3, r2, [r1]
 800c078:	617b      	str	r3, [r7, #20]
   return(result);
 800c07a:	697b      	ldr	r3, [r7, #20]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d1e3      	bne.n	800c048 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c080:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c084:	4619      	mov	r1, r3
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	f000 f848 	bl	800c11c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c08c:	e023      	b.n	800c0d6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c08e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c096:	2b00      	cmp	r3, #0
 800c098:	d009      	beq.n	800c0ae <HAL_UART_IRQHandler+0x4ea>
 800c09a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c09e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d003      	beq.n	800c0ae <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800c0a6:	6878      	ldr	r0, [r7, #4]
 800c0a8:	f000 f8bb 	bl	800c222 <UART_Transmit_IT>
    return;
 800c0ac:	e014      	b.n	800c0d8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c0ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d00e      	beq.n	800c0d8 <HAL_UART_IRQHandler+0x514>
 800c0ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d008      	beq.n	800c0d8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f000 f8fb 	bl	800c2c2 <UART_EndTransmit_IT>
    return;
 800c0cc:	e004      	b.n	800c0d8 <HAL_UART_IRQHandler+0x514>
    return;
 800c0ce:	bf00      	nop
 800c0d0:	e002      	b.n	800c0d8 <HAL_UART_IRQHandler+0x514>
      return;
 800c0d2:	bf00      	nop
 800c0d4:	e000      	b.n	800c0d8 <HAL_UART_IRQHandler+0x514>
      return;
 800c0d6:	bf00      	nop
  }
}
 800c0d8:	37e8      	adds	r7, #232	; 0xe8
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}
 800c0de:	bf00      	nop

0800c0e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c0e0:	b480      	push	{r7}
 800c0e2:	b083      	sub	sp, #12
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c0e8:	bf00      	nop
 800c0ea:	370c      	adds	r7, #12
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f2:	4770      	bx	lr

0800c0f4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c0f4:	b480      	push	{r7}
 800c0f6:	b083      	sub	sp, #12
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800c0fc:	bf00      	nop
 800c0fe:	370c      	adds	r7, #12
 800c100:	46bd      	mov	sp, r7
 800c102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c106:	4770      	bx	lr

0800c108 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c108:	b480      	push	{r7}
 800c10a:	b083      	sub	sp, #12
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c110:	bf00      	nop
 800c112:	370c      	adds	r7, #12
 800c114:	46bd      	mov	sp, r7
 800c116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11a:	4770      	bx	lr

0800c11c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c11c:	b480      	push	{r7}
 800c11e:	b083      	sub	sp, #12
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
 800c124:	460b      	mov	r3, r1
 800c126:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c128:	bf00      	nop
 800c12a:	370c      	adds	r7, #12
 800c12c:	46bd      	mov	sp, r7
 800c12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c132:	4770      	bx	lr

0800c134 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c134:	b480      	push	{r7}
 800c136:	b095      	sub	sp, #84	; 0x54
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	330c      	adds	r3, #12
 800c142:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c146:	e853 3f00 	ldrex	r3, [r3]
 800c14a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c14c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c14e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c152:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	330c      	adds	r3, #12
 800c15a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c15c:	643a      	str	r2, [r7, #64]	; 0x40
 800c15e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c160:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c162:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c164:	e841 2300 	strex	r3, r2, [r1]
 800c168:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c16a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d1e5      	bne.n	800c13c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	3314      	adds	r3, #20
 800c176:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c178:	6a3b      	ldr	r3, [r7, #32]
 800c17a:	e853 3f00 	ldrex	r3, [r3]
 800c17e:	61fb      	str	r3, [r7, #28]
   return(result);
 800c180:	69fb      	ldr	r3, [r7, #28]
 800c182:	f023 0301 	bic.w	r3, r3, #1
 800c186:	64bb      	str	r3, [r7, #72]	; 0x48
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	3314      	adds	r3, #20
 800c18e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c190:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c192:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c194:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c196:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c198:	e841 2300 	strex	r3, r2, [r1]
 800c19c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d1e5      	bne.n	800c170 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1a8:	2b01      	cmp	r3, #1
 800c1aa:	d119      	bne.n	800c1e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	330c      	adds	r3, #12
 800c1b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	e853 3f00 	ldrex	r3, [r3]
 800c1ba:	60bb      	str	r3, [r7, #8]
   return(result);
 800c1bc:	68bb      	ldr	r3, [r7, #8]
 800c1be:	f023 0310 	bic.w	r3, r3, #16
 800c1c2:	647b      	str	r3, [r7, #68]	; 0x44
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	330c      	adds	r3, #12
 800c1ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c1cc:	61ba      	str	r2, [r7, #24]
 800c1ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1d0:	6979      	ldr	r1, [r7, #20]
 800c1d2:	69ba      	ldr	r2, [r7, #24]
 800c1d4:	e841 2300 	strex	r3, r2, [r1]
 800c1d8:	613b      	str	r3, [r7, #16]
   return(result);
 800c1da:	693b      	ldr	r3, [r7, #16]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d1e5      	bne.n	800c1ac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2220      	movs	r2, #32
 800c1e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c1ee:	bf00      	nop
 800c1f0:	3754      	adds	r7, #84	; 0x54
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f8:	4770      	bx	lr

0800c1fa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c1fa:	b580      	push	{r7, lr}
 800c1fc:	b084      	sub	sp, #16
 800c1fe:	af00      	add	r7, sp, #0
 800c200:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c206:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	2200      	movs	r2, #0
 800c20c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	2200      	movs	r2, #0
 800c212:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c214:	68f8      	ldr	r0, [r7, #12]
 800c216:	f7ff ff77 	bl	800c108 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c21a:	bf00      	nop
 800c21c:	3710      	adds	r7, #16
 800c21e:	46bd      	mov	sp, r7
 800c220:	bd80      	pop	{r7, pc}

0800c222 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c222:	b480      	push	{r7}
 800c224:	b085      	sub	sp, #20
 800c226:	af00      	add	r7, sp, #0
 800c228:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c230:	b2db      	uxtb	r3, r3
 800c232:	2b21      	cmp	r3, #33	; 0x21
 800c234:	d13e      	bne.n	800c2b4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	689b      	ldr	r3, [r3, #8]
 800c23a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c23e:	d114      	bne.n	800c26a <UART_Transmit_IT+0x48>
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	691b      	ldr	r3, [r3, #16]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d110      	bne.n	800c26a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	6a1b      	ldr	r3, [r3, #32]
 800c24c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	881b      	ldrh	r3, [r3, #0]
 800c252:	461a      	mov	r2, r3
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c25c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	6a1b      	ldr	r3, [r3, #32]
 800c262:	1c9a      	adds	r2, r3, #2
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	621a      	str	r2, [r3, #32]
 800c268:	e008      	b.n	800c27c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	6a1b      	ldr	r3, [r3, #32]
 800c26e:	1c59      	adds	r1, r3, #1
 800c270:	687a      	ldr	r2, [r7, #4]
 800c272:	6211      	str	r1, [r2, #32]
 800c274:	781a      	ldrb	r2, [r3, #0]
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c280:	b29b      	uxth	r3, r3
 800c282:	3b01      	subs	r3, #1
 800c284:	b29b      	uxth	r3, r3
 800c286:	687a      	ldr	r2, [r7, #4]
 800c288:	4619      	mov	r1, r3
 800c28a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d10f      	bne.n	800c2b0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	68da      	ldr	r2, [r3, #12]
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c29e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	68da      	ldr	r2, [r3, #12]
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c2ae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	e000      	b.n	800c2b6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c2b4:	2302      	movs	r3, #2
  }
}
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	3714      	adds	r7, #20
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c0:	4770      	bx	lr

0800c2c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c2c2:	b580      	push	{r7, lr}
 800c2c4:	b082      	sub	sp, #8
 800c2c6:	af00      	add	r7, sp, #0
 800c2c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	68da      	ldr	r2, [r3, #12]
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c2d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	2220      	movs	r2, #32
 800c2de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	f7ff fefc 	bl	800c0e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c2e8:	2300      	movs	r3, #0
}
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	3708      	adds	r7, #8
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}

0800c2f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c2f2:	b580      	push	{r7, lr}
 800c2f4:	b08c      	sub	sp, #48	; 0x30
 800c2f6:	af00      	add	r7, sp, #0
 800c2f8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c300:	b2db      	uxtb	r3, r3
 800c302:	2b22      	cmp	r3, #34	; 0x22
 800c304:	f040 80ab 	bne.w	800c45e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	689b      	ldr	r3, [r3, #8]
 800c30c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c310:	d117      	bne.n	800c342 <UART_Receive_IT+0x50>
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	691b      	ldr	r3, [r3, #16]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d113      	bne.n	800c342 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c31a:	2300      	movs	r3, #0
 800c31c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c322:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	685b      	ldr	r3, [r3, #4]
 800c32a:	b29b      	uxth	r3, r3
 800c32c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c330:	b29a      	uxth	r2, r3
 800c332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c334:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c33a:	1c9a      	adds	r2, r3, #2
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	629a      	str	r2, [r3, #40]	; 0x28
 800c340:	e026      	b.n	800c390 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c346:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c348:	2300      	movs	r3, #0
 800c34a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	689b      	ldr	r3, [r3, #8]
 800c350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c354:	d007      	beq.n	800c366 <UART_Receive_IT+0x74>
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	689b      	ldr	r3, [r3, #8]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d10a      	bne.n	800c374 <UART_Receive_IT+0x82>
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	691b      	ldr	r3, [r3, #16]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d106      	bne.n	800c374 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	685b      	ldr	r3, [r3, #4]
 800c36c:	b2da      	uxtb	r2, r3
 800c36e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c370:	701a      	strb	r2, [r3, #0]
 800c372:	e008      	b.n	800c386 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	685b      	ldr	r3, [r3, #4]
 800c37a:	b2db      	uxtb	r3, r3
 800c37c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c380:	b2da      	uxtb	r2, r3
 800c382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c384:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c38a:	1c5a      	adds	r2, r3, #1
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c394:	b29b      	uxth	r3, r3
 800c396:	3b01      	subs	r3, #1
 800c398:	b29b      	uxth	r3, r3
 800c39a:	687a      	ldr	r2, [r7, #4]
 800c39c:	4619      	mov	r1, r3
 800c39e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d15a      	bne.n	800c45a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	68da      	ldr	r2, [r3, #12]
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	f022 0220 	bic.w	r2, r2, #32
 800c3b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	68da      	ldr	r2, [r3, #12]
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c3c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	695a      	ldr	r2, [r3, #20]
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	f022 0201 	bic.w	r2, r2, #1
 800c3d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	2220      	movs	r2, #32
 800c3d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3e0:	2b01      	cmp	r3, #1
 800c3e2:	d135      	bne.n	800c450 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	330c      	adds	r3, #12
 800c3f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3f2:	697b      	ldr	r3, [r7, #20]
 800c3f4:	e853 3f00 	ldrex	r3, [r3]
 800c3f8:	613b      	str	r3, [r7, #16]
   return(result);
 800c3fa:	693b      	ldr	r3, [r7, #16]
 800c3fc:	f023 0310 	bic.w	r3, r3, #16
 800c400:	627b      	str	r3, [r7, #36]	; 0x24
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	330c      	adds	r3, #12
 800c408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c40a:	623a      	str	r2, [r7, #32]
 800c40c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c40e:	69f9      	ldr	r1, [r7, #28]
 800c410:	6a3a      	ldr	r2, [r7, #32]
 800c412:	e841 2300 	strex	r3, r2, [r1]
 800c416:	61bb      	str	r3, [r7, #24]
   return(result);
 800c418:	69bb      	ldr	r3, [r7, #24]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d1e5      	bne.n	800c3ea <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	f003 0310 	and.w	r3, r3, #16
 800c428:	2b10      	cmp	r3, #16
 800c42a:	d10a      	bne.n	800c442 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c42c:	2300      	movs	r3, #0
 800c42e:	60fb      	str	r3, [r7, #12]
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	60fb      	str	r3, [r7, #12]
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	685b      	ldr	r3, [r3, #4]
 800c43e:	60fb      	str	r3, [r7, #12]
 800c440:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c446:	4619      	mov	r1, r3
 800c448:	6878      	ldr	r0, [r7, #4]
 800c44a:	f7ff fe67 	bl	800c11c <HAL_UARTEx_RxEventCallback>
 800c44e:	e002      	b.n	800c456 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c450:	6878      	ldr	r0, [r7, #4]
 800c452:	f7ff fe4f 	bl	800c0f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c456:	2300      	movs	r3, #0
 800c458:	e002      	b.n	800c460 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800c45a:	2300      	movs	r3, #0
 800c45c:	e000      	b.n	800c460 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800c45e:	2302      	movs	r3, #2
  }
}
 800c460:	4618      	mov	r0, r3
 800c462:	3730      	adds	r7, #48	; 0x30
 800c464:	46bd      	mov	sp, r7
 800c466:	bd80      	pop	{r7, pc}

0800c468 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c468:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c46c:	b0c0      	sub	sp, #256	; 0x100
 800c46e:	af00      	add	r7, sp, #0
 800c470:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	691b      	ldr	r3, [r3, #16]
 800c47c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c484:	68d9      	ldr	r1, [r3, #12]
 800c486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c48a:	681a      	ldr	r2, [r3, #0]
 800c48c:	ea40 0301 	orr.w	r3, r0, r1
 800c490:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c496:	689a      	ldr	r2, [r3, #8]
 800c498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c49c:	691b      	ldr	r3, [r3, #16]
 800c49e:	431a      	orrs	r2, r3
 800c4a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c4a4:	695b      	ldr	r3, [r3, #20]
 800c4a6:	431a      	orrs	r2, r3
 800c4a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c4ac:	69db      	ldr	r3, [r3, #28]
 800c4ae:	4313      	orrs	r3, r2
 800c4b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c4b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	68db      	ldr	r3, [r3, #12]
 800c4bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c4c0:	f021 010c 	bic.w	r1, r1, #12
 800c4c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c4c8:	681a      	ldr	r2, [r3, #0]
 800c4ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c4ce:	430b      	orrs	r3, r1
 800c4d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c4d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	695b      	ldr	r3, [r3, #20]
 800c4da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c4de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c4e2:	6999      	ldr	r1, [r3, #24]
 800c4e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c4e8:	681a      	ldr	r2, [r3, #0]
 800c4ea:	ea40 0301 	orr.w	r3, r0, r1
 800c4ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c4f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c4f4:	681a      	ldr	r2, [r3, #0]
 800c4f6:	4b8f      	ldr	r3, [pc, #572]	; (800c734 <UART_SetConfig+0x2cc>)
 800c4f8:	429a      	cmp	r2, r3
 800c4fa:	d005      	beq.n	800c508 <UART_SetConfig+0xa0>
 800c4fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c500:	681a      	ldr	r2, [r3, #0]
 800c502:	4b8d      	ldr	r3, [pc, #564]	; (800c738 <UART_SetConfig+0x2d0>)
 800c504:	429a      	cmp	r2, r3
 800c506:	d104      	bne.n	800c512 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c508:	f7fc f968 	bl	80087dc <HAL_RCC_GetPCLK2Freq>
 800c50c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800c510:	e003      	b.n	800c51a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c512:	f7fc f94f 	bl	80087b4 <HAL_RCC_GetPCLK1Freq>
 800c516:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c51a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c51e:	69db      	ldr	r3, [r3, #28]
 800c520:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c524:	f040 810c 	bne.w	800c740 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c528:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c52c:	2200      	movs	r2, #0
 800c52e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c532:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800c536:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800c53a:	4622      	mov	r2, r4
 800c53c:	462b      	mov	r3, r5
 800c53e:	1891      	adds	r1, r2, r2
 800c540:	65b9      	str	r1, [r7, #88]	; 0x58
 800c542:	415b      	adcs	r3, r3
 800c544:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c546:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c54a:	4621      	mov	r1, r4
 800c54c:	eb12 0801 	adds.w	r8, r2, r1
 800c550:	4629      	mov	r1, r5
 800c552:	eb43 0901 	adc.w	r9, r3, r1
 800c556:	f04f 0200 	mov.w	r2, #0
 800c55a:	f04f 0300 	mov.w	r3, #0
 800c55e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c562:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c566:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c56a:	4690      	mov	r8, r2
 800c56c:	4699      	mov	r9, r3
 800c56e:	4623      	mov	r3, r4
 800c570:	eb18 0303 	adds.w	r3, r8, r3
 800c574:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c578:	462b      	mov	r3, r5
 800c57a:	eb49 0303 	adc.w	r3, r9, r3
 800c57e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c586:	685b      	ldr	r3, [r3, #4]
 800c588:	2200      	movs	r2, #0
 800c58a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c58e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800c592:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c596:	460b      	mov	r3, r1
 800c598:	18db      	adds	r3, r3, r3
 800c59a:	653b      	str	r3, [r7, #80]	; 0x50
 800c59c:	4613      	mov	r3, r2
 800c59e:	eb42 0303 	adc.w	r3, r2, r3
 800c5a2:	657b      	str	r3, [r7, #84]	; 0x54
 800c5a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c5a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800c5ac:	f7f4 fbd4 	bl	8000d58 <__aeabi_uldivmod>
 800c5b0:	4602      	mov	r2, r0
 800c5b2:	460b      	mov	r3, r1
 800c5b4:	4b61      	ldr	r3, [pc, #388]	; (800c73c <UART_SetConfig+0x2d4>)
 800c5b6:	fba3 2302 	umull	r2, r3, r3, r2
 800c5ba:	095b      	lsrs	r3, r3, #5
 800c5bc:	011c      	lsls	r4, r3, #4
 800c5be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c5c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800c5cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800c5d0:	4642      	mov	r2, r8
 800c5d2:	464b      	mov	r3, r9
 800c5d4:	1891      	adds	r1, r2, r2
 800c5d6:	64b9      	str	r1, [r7, #72]	; 0x48
 800c5d8:	415b      	adcs	r3, r3
 800c5da:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c5dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c5e0:	4641      	mov	r1, r8
 800c5e2:	eb12 0a01 	adds.w	sl, r2, r1
 800c5e6:	4649      	mov	r1, r9
 800c5e8:	eb43 0b01 	adc.w	fp, r3, r1
 800c5ec:	f04f 0200 	mov.w	r2, #0
 800c5f0:	f04f 0300 	mov.w	r3, #0
 800c5f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c5f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c5fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c600:	4692      	mov	sl, r2
 800c602:	469b      	mov	fp, r3
 800c604:	4643      	mov	r3, r8
 800c606:	eb1a 0303 	adds.w	r3, sl, r3
 800c60a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c60e:	464b      	mov	r3, r9
 800c610:	eb4b 0303 	adc.w	r3, fp, r3
 800c614:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c61c:	685b      	ldr	r3, [r3, #4]
 800c61e:	2200      	movs	r2, #0
 800c620:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c624:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c628:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c62c:	460b      	mov	r3, r1
 800c62e:	18db      	adds	r3, r3, r3
 800c630:	643b      	str	r3, [r7, #64]	; 0x40
 800c632:	4613      	mov	r3, r2
 800c634:	eb42 0303 	adc.w	r3, r2, r3
 800c638:	647b      	str	r3, [r7, #68]	; 0x44
 800c63a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c63e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800c642:	f7f4 fb89 	bl	8000d58 <__aeabi_uldivmod>
 800c646:	4602      	mov	r2, r0
 800c648:	460b      	mov	r3, r1
 800c64a:	4611      	mov	r1, r2
 800c64c:	4b3b      	ldr	r3, [pc, #236]	; (800c73c <UART_SetConfig+0x2d4>)
 800c64e:	fba3 2301 	umull	r2, r3, r3, r1
 800c652:	095b      	lsrs	r3, r3, #5
 800c654:	2264      	movs	r2, #100	; 0x64
 800c656:	fb02 f303 	mul.w	r3, r2, r3
 800c65a:	1acb      	subs	r3, r1, r3
 800c65c:	00db      	lsls	r3, r3, #3
 800c65e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c662:	4b36      	ldr	r3, [pc, #216]	; (800c73c <UART_SetConfig+0x2d4>)
 800c664:	fba3 2302 	umull	r2, r3, r3, r2
 800c668:	095b      	lsrs	r3, r3, #5
 800c66a:	005b      	lsls	r3, r3, #1
 800c66c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c670:	441c      	add	r4, r3
 800c672:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c676:	2200      	movs	r2, #0
 800c678:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c67c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c680:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800c684:	4642      	mov	r2, r8
 800c686:	464b      	mov	r3, r9
 800c688:	1891      	adds	r1, r2, r2
 800c68a:	63b9      	str	r1, [r7, #56]	; 0x38
 800c68c:	415b      	adcs	r3, r3
 800c68e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c690:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c694:	4641      	mov	r1, r8
 800c696:	1851      	adds	r1, r2, r1
 800c698:	6339      	str	r1, [r7, #48]	; 0x30
 800c69a:	4649      	mov	r1, r9
 800c69c:	414b      	adcs	r3, r1
 800c69e:	637b      	str	r3, [r7, #52]	; 0x34
 800c6a0:	f04f 0200 	mov.w	r2, #0
 800c6a4:	f04f 0300 	mov.w	r3, #0
 800c6a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800c6ac:	4659      	mov	r1, fp
 800c6ae:	00cb      	lsls	r3, r1, #3
 800c6b0:	4651      	mov	r1, sl
 800c6b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c6b6:	4651      	mov	r1, sl
 800c6b8:	00ca      	lsls	r2, r1, #3
 800c6ba:	4610      	mov	r0, r2
 800c6bc:	4619      	mov	r1, r3
 800c6be:	4603      	mov	r3, r0
 800c6c0:	4642      	mov	r2, r8
 800c6c2:	189b      	adds	r3, r3, r2
 800c6c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c6c8:	464b      	mov	r3, r9
 800c6ca:	460a      	mov	r2, r1
 800c6cc:	eb42 0303 	adc.w	r3, r2, r3
 800c6d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c6d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c6d8:	685b      	ldr	r3, [r3, #4]
 800c6da:	2200      	movs	r2, #0
 800c6dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c6e0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800c6e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c6e8:	460b      	mov	r3, r1
 800c6ea:	18db      	adds	r3, r3, r3
 800c6ec:	62bb      	str	r3, [r7, #40]	; 0x28
 800c6ee:	4613      	mov	r3, r2
 800c6f0:	eb42 0303 	adc.w	r3, r2, r3
 800c6f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c6f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c6fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800c6fe:	f7f4 fb2b 	bl	8000d58 <__aeabi_uldivmod>
 800c702:	4602      	mov	r2, r0
 800c704:	460b      	mov	r3, r1
 800c706:	4b0d      	ldr	r3, [pc, #52]	; (800c73c <UART_SetConfig+0x2d4>)
 800c708:	fba3 1302 	umull	r1, r3, r3, r2
 800c70c:	095b      	lsrs	r3, r3, #5
 800c70e:	2164      	movs	r1, #100	; 0x64
 800c710:	fb01 f303 	mul.w	r3, r1, r3
 800c714:	1ad3      	subs	r3, r2, r3
 800c716:	00db      	lsls	r3, r3, #3
 800c718:	3332      	adds	r3, #50	; 0x32
 800c71a:	4a08      	ldr	r2, [pc, #32]	; (800c73c <UART_SetConfig+0x2d4>)
 800c71c:	fba2 2303 	umull	r2, r3, r2, r3
 800c720:	095b      	lsrs	r3, r3, #5
 800c722:	f003 0207 	and.w	r2, r3, #7
 800c726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	4422      	add	r2, r4
 800c72e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c730:	e105      	b.n	800c93e <UART_SetConfig+0x4d6>
 800c732:	bf00      	nop
 800c734:	40011000 	.word	0x40011000
 800c738:	40011400 	.word	0x40011400
 800c73c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c740:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c744:	2200      	movs	r2, #0
 800c746:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c74a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c74e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800c752:	4642      	mov	r2, r8
 800c754:	464b      	mov	r3, r9
 800c756:	1891      	adds	r1, r2, r2
 800c758:	6239      	str	r1, [r7, #32]
 800c75a:	415b      	adcs	r3, r3
 800c75c:	627b      	str	r3, [r7, #36]	; 0x24
 800c75e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c762:	4641      	mov	r1, r8
 800c764:	1854      	adds	r4, r2, r1
 800c766:	4649      	mov	r1, r9
 800c768:	eb43 0501 	adc.w	r5, r3, r1
 800c76c:	f04f 0200 	mov.w	r2, #0
 800c770:	f04f 0300 	mov.w	r3, #0
 800c774:	00eb      	lsls	r3, r5, #3
 800c776:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c77a:	00e2      	lsls	r2, r4, #3
 800c77c:	4614      	mov	r4, r2
 800c77e:	461d      	mov	r5, r3
 800c780:	4643      	mov	r3, r8
 800c782:	18e3      	adds	r3, r4, r3
 800c784:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c788:	464b      	mov	r3, r9
 800c78a:	eb45 0303 	adc.w	r3, r5, r3
 800c78e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c796:	685b      	ldr	r3, [r3, #4]
 800c798:	2200      	movs	r2, #0
 800c79a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c79e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c7a2:	f04f 0200 	mov.w	r2, #0
 800c7a6:	f04f 0300 	mov.w	r3, #0
 800c7aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800c7ae:	4629      	mov	r1, r5
 800c7b0:	008b      	lsls	r3, r1, #2
 800c7b2:	4621      	mov	r1, r4
 800c7b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c7b8:	4621      	mov	r1, r4
 800c7ba:	008a      	lsls	r2, r1, #2
 800c7bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800c7c0:	f7f4 faca 	bl	8000d58 <__aeabi_uldivmod>
 800c7c4:	4602      	mov	r2, r0
 800c7c6:	460b      	mov	r3, r1
 800c7c8:	4b60      	ldr	r3, [pc, #384]	; (800c94c <UART_SetConfig+0x4e4>)
 800c7ca:	fba3 2302 	umull	r2, r3, r3, r2
 800c7ce:	095b      	lsrs	r3, r3, #5
 800c7d0:	011c      	lsls	r4, r3, #4
 800c7d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c7dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c7e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800c7e4:	4642      	mov	r2, r8
 800c7e6:	464b      	mov	r3, r9
 800c7e8:	1891      	adds	r1, r2, r2
 800c7ea:	61b9      	str	r1, [r7, #24]
 800c7ec:	415b      	adcs	r3, r3
 800c7ee:	61fb      	str	r3, [r7, #28]
 800c7f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c7f4:	4641      	mov	r1, r8
 800c7f6:	1851      	adds	r1, r2, r1
 800c7f8:	6139      	str	r1, [r7, #16]
 800c7fa:	4649      	mov	r1, r9
 800c7fc:	414b      	adcs	r3, r1
 800c7fe:	617b      	str	r3, [r7, #20]
 800c800:	f04f 0200 	mov.w	r2, #0
 800c804:	f04f 0300 	mov.w	r3, #0
 800c808:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c80c:	4659      	mov	r1, fp
 800c80e:	00cb      	lsls	r3, r1, #3
 800c810:	4651      	mov	r1, sl
 800c812:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c816:	4651      	mov	r1, sl
 800c818:	00ca      	lsls	r2, r1, #3
 800c81a:	4610      	mov	r0, r2
 800c81c:	4619      	mov	r1, r3
 800c81e:	4603      	mov	r3, r0
 800c820:	4642      	mov	r2, r8
 800c822:	189b      	adds	r3, r3, r2
 800c824:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c828:	464b      	mov	r3, r9
 800c82a:	460a      	mov	r2, r1
 800c82c:	eb42 0303 	adc.w	r3, r2, r3
 800c830:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c838:	685b      	ldr	r3, [r3, #4]
 800c83a:	2200      	movs	r2, #0
 800c83c:	67bb      	str	r3, [r7, #120]	; 0x78
 800c83e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c840:	f04f 0200 	mov.w	r2, #0
 800c844:	f04f 0300 	mov.w	r3, #0
 800c848:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800c84c:	4649      	mov	r1, r9
 800c84e:	008b      	lsls	r3, r1, #2
 800c850:	4641      	mov	r1, r8
 800c852:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c856:	4641      	mov	r1, r8
 800c858:	008a      	lsls	r2, r1, #2
 800c85a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c85e:	f7f4 fa7b 	bl	8000d58 <__aeabi_uldivmod>
 800c862:	4602      	mov	r2, r0
 800c864:	460b      	mov	r3, r1
 800c866:	4b39      	ldr	r3, [pc, #228]	; (800c94c <UART_SetConfig+0x4e4>)
 800c868:	fba3 1302 	umull	r1, r3, r3, r2
 800c86c:	095b      	lsrs	r3, r3, #5
 800c86e:	2164      	movs	r1, #100	; 0x64
 800c870:	fb01 f303 	mul.w	r3, r1, r3
 800c874:	1ad3      	subs	r3, r2, r3
 800c876:	011b      	lsls	r3, r3, #4
 800c878:	3332      	adds	r3, #50	; 0x32
 800c87a:	4a34      	ldr	r2, [pc, #208]	; (800c94c <UART_SetConfig+0x4e4>)
 800c87c:	fba2 2303 	umull	r2, r3, r2, r3
 800c880:	095b      	lsrs	r3, r3, #5
 800c882:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c886:	441c      	add	r4, r3
 800c888:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c88c:	2200      	movs	r2, #0
 800c88e:	673b      	str	r3, [r7, #112]	; 0x70
 800c890:	677a      	str	r2, [r7, #116]	; 0x74
 800c892:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800c896:	4642      	mov	r2, r8
 800c898:	464b      	mov	r3, r9
 800c89a:	1891      	adds	r1, r2, r2
 800c89c:	60b9      	str	r1, [r7, #8]
 800c89e:	415b      	adcs	r3, r3
 800c8a0:	60fb      	str	r3, [r7, #12]
 800c8a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c8a6:	4641      	mov	r1, r8
 800c8a8:	1851      	adds	r1, r2, r1
 800c8aa:	6039      	str	r1, [r7, #0]
 800c8ac:	4649      	mov	r1, r9
 800c8ae:	414b      	adcs	r3, r1
 800c8b0:	607b      	str	r3, [r7, #4]
 800c8b2:	f04f 0200 	mov.w	r2, #0
 800c8b6:	f04f 0300 	mov.w	r3, #0
 800c8ba:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c8be:	4659      	mov	r1, fp
 800c8c0:	00cb      	lsls	r3, r1, #3
 800c8c2:	4651      	mov	r1, sl
 800c8c4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c8c8:	4651      	mov	r1, sl
 800c8ca:	00ca      	lsls	r2, r1, #3
 800c8cc:	4610      	mov	r0, r2
 800c8ce:	4619      	mov	r1, r3
 800c8d0:	4603      	mov	r3, r0
 800c8d2:	4642      	mov	r2, r8
 800c8d4:	189b      	adds	r3, r3, r2
 800c8d6:	66bb      	str	r3, [r7, #104]	; 0x68
 800c8d8:	464b      	mov	r3, r9
 800c8da:	460a      	mov	r2, r1
 800c8dc:	eb42 0303 	adc.w	r3, r2, r3
 800c8e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c8e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c8e6:	685b      	ldr	r3, [r3, #4]
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	663b      	str	r3, [r7, #96]	; 0x60
 800c8ec:	667a      	str	r2, [r7, #100]	; 0x64
 800c8ee:	f04f 0200 	mov.w	r2, #0
 800c8f2:	f04f 0300 	mov.w	r3, #0
 800c8f6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800c8fa:	4649      	mov	r1, r9
 800c8fc:	008b      	lsls	r3, r1, #2
 800c8fe:	4641      	mov	r1, r8
 800c900:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c904:	4641      	mov	r1, r8
 800c906:	008a      	lsls	r2, r1, #2
 800c908:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c90c:	f7f4 fa24 	bl	8000d58 <__aeabi_uldivmod>
 800c910:	4602      	mov	r2, r0
 800c912:	460b      	mov	r3, r1
 800c914:	4b0d      	ldr	r3, [pc, #52]	; (800c94c <UART_SetConfig+0x4e4>)
 800c916:	fba3 1302 	umull	r1, r3, r3, r2
 800c91a:	095b      	lsrs	r3, r3, #5
 800c91c:	2164      	movs	r1, #100	; 0x64
 800c91e:	fb01 f303 	mul.w	r3, r1, r3
 800c922:	1ad3      	subs	r3, r2, r3
 800c924:	011b      	lsls	r3, r3, #4
 800c926:	3332      	adds	r3, #50	; 0x32
 800c928:	4a08      	ldr	r2, [pc, #32]	; (800c94c <UART_SetConfig+0x4e4>)
 800c92a:	fba2 2303 	umull	r2, r3, r2, r3
 800c92e:	095b      	lsrs	r3, r3, #5
 800c930:	f003 020f 	and.w	r2, r3, #15
 800c934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	4422      	add	r2, r4
 800c93c:	609a      	str	r2, [r3, #8]
}
 800c93e:	bf00      	nop
 800c940:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800c944:	46bd      	mov	sp, r7
 800c946:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c94a:	bf00      	nop
 800c94c:	51eb851f 	.word	0x51eb851f

0800c950 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800c950:	b084      	sub	sp, #16
 800c952:	b480      	push	{r7}
 800c954:	b085      	sub	sp, #20
 800c956:	af00      	add	r7, sp, #0
 800c958:	6078      	str	r0, [r7, #4]
 800c95a:	f107 001c 	add.w	r0, r7, #28
 800c95e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c962:	2300      	movs	r3, #0
 800c964:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800c966:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800c968:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800c96a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800c96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800c96e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c970:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800c972:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800c976:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800c97a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c97c:	68fa      	ldr	r2, [r7, #12]
 800c97e:	4313      	orrs	r3, r2
 800c980:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	685b      	ldr	r3, [r3, #4]
 800c986:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800c98a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c98e:	68fa      	ldr	r2, [r7, #12]
 800c990:	431a      	orrs	r2, r3
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c996:	2300      	movs	r3, #0
}
 800c998:	4618      	mov	r0, r3
 800c99a:	3714      	adds	r7, #20
 800c99c:	46bd      	mov	sp, r7
 800c99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a2:	b004      	add	sp, #16
 800c9a4:	4770      	bx	lr

0800c9a6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800c9a6:	b480      	push	{r7}
 800c9a8:	b083      	sub	sp, #12
 800c9aa:	af00      	add	r7, sp, #0
 800c9ac:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	370c      	adds	r7, #12
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9be:	4770      	bx	lr

0800c9c0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800c9c0:	b480      	push	{r7}
 800c9c2:	b083      	sub	sp, #12
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
 800c9c8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800c9ca:	683b      	ldr	r3, [r7, #0]
 800c9cc:	681a      	ldr	r2, [r3, #0]
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c9d4:	2300      	movs	r3, #0
}
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	370c      	adds	r7, #12
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e0:	4770      	bx	lr

0800c9e2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800c9e2:	b480      	push	{r7}
 800c9e4:	b083      	sub	sp, #12
 800c9e6:	af00      	add	r7, sp, #0
 800c9e8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	2203      	movs	r2, #3
 800c9ee:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800c9f0:	2300      	movs	r3, #0
}
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	370c      	adds	r7, #12
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fc:	4770      	bx	lr

0800c9fe <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800c9fe:	b480      	push	{r7}
 800ca00:	b083      	sub	sp, #12
 800ca02:	af00      	add	r7, sp, #0
 800ca04:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	f003 0303 	and.w	r3, r3, #3
}
 800ca0e:	4618      	mov	r0, r3
 800ca10:	370c      	adds	r7, #12
 800ca12:	46bd      	mov	sp, r7
 800ca14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca18:	4770      	bx	lr

0800ca1a <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800ca1a:	b480      	push	{r7}
 800ca1c:	b085      	sub	sp, #20
 800ca1e:	af00      	add	r7, sp, #0
 800ca20:	6078      	str	r0, [r7, #4]
 800ca22:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ca24:	2300      	movs	r3, #0
 800ca26:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800ca28:	683b      	ldr	r3, [r7, #0]
 800ca2a:	681a      	ldr	r2, [r3, #0]
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ca38:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800ca3e:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ca40:	683b      	ldr	r3, [r7, #0]
 800ca42:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800ca44:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ca46:	68fa      	ldr	r2, [r7, #12]
 800ca48:	4313      	orrs	r3, r2
 800ca4a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	68db      	ldr	r3, [r3, #12]
 800ca50:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800ca54:	f023 030f 	bic.w	r3, r3, #15
 800ca58:	68fa      	ldr	r2, [r7, #12]
 800ca5a:	431a      	orrs	r2, r3
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800ca60:	2300      	movs	r3, #0
}
 800ca62:	4618      	mov	r0, r3
 800ca64:	3714      	adds	r7, #20
 800ca66:	46bd      	mov	sp, r7
 800ca68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6c:	4770      	bx	lr

0800ca6e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800ca6e:	b480      	push	{r7}
 800ca70:	b083      	sub	sp, #12
 800ca72:	af00      	add	r7, sp, #0
 800ca74:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	691b      	ldr	r3, [r3, #16]
 800ca7a:	b2db      	uxtb	r3, r3
}
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	370c      	adds	r7, #12
 800ca80:	46bd      	mov	sp, r7
 800ca82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca86:	4770      	bx	lr

0800ca88 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800ca88:	b480      	push	{r7}
 800ca8a:	b085      	sub	sp, #20
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
 800ca90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	3314      	adds	r3, #20
 800ca96:	461a      	mov	r2, r3
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	4413      	add	r3, r2
 800ca9c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	681b      	ldr	r3, [r3, #0]
}  
 800caa2:	4618      	mov	r0, r3
 800caa4:	3714      	adds	r7, #20
 800caa6:	46bd      	mov	sp, r7
 800caa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caac:	4770      	bx	lr

0800caae <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800caae:	b480      	push	{r7}
 800cab0:	b085      	sub	sp, #20
 800cab2:	af00      	add	r7, sp, #0
 800cab4:	6078      	str	r0, [r7, #4]
 800cab6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800cab8:	2300      	movs	r3, #0
 800caba:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800cabc:	683b      	ldr	r3, [r7, #0]
 800cabe:	681a      	ldr	r2, [r3, #0]
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	685a      	ldr	r2, [r3, #4]
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cad4:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800cada:	431a      	orrs	r2, r3
                       Data->DPSM);
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800cae0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cae2:	68fa      	ldr	r2, [r7, #12]
 800cae4:	4313      	orrs	r3, r2
 800cae6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caec:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	431a      	orrs	r2, r3
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800caf8:	2300      	movs	r3, #0

}
 800cafa:	4618      	mov	r0, r3
 800cafc:	3714      	adds	r7, #20
 800cafe:	46bd      	mov	sp, r7
 800cb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb04:	4770      	bx	lr

0800cb06 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800cb06:	b580      	push	{r7, lr}
 800cb08:	b088      	sub	sp, #32
 800cb0a:	af00      	add	r7, sp, #0
 800cb0c:	6078      	str	r0, [r7, #4]
 800cb0e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800cb10:	683b      	ldr	r3, [r7, #0]
 800cb12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800cb14:	2310      	movs	r3, #16
 800cb16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cb18:	2340      	movs	r3, #64	; 0x40
 800cb1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cb20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb24:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cb26:	f107 0308 	add.w	r3, r7, #8
 800cb2a:	4619      	mov	r1, r3
 800cb2c:	6878      	ldr	r0, [r7, #4]
 800cb2e:	f7ff ff74 	bl	800ca1a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800cb32:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb36:	2110      	movs	r1, #16
 800cb38:	6878      	ldr	r0, [r7, #4]
 800cb3a:	f000 fa19 	bl	800cf70 <SDMMC_GetCmdResp1>
 800cb3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb40:	69fb      	ldr	r3, [r7, #28]
}
 800cb42:	4618      	mov	r0, r3
 800cb44:	3720      	adds	r7, #32
 800cb46:	46bd      	mov	sp, r7
 800cb48:	bd80      	pop	{r7, pc}

0800cb4a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800cb4a:	b580      	push	{r7, lr}
 800cb4c:	b088      	sub	sp, #32
 800cb4e:	af00      	add	r7, sp, #0
 800cb50:	6078      	str	r0, [r7, #4]
 800cb52:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800cb58:	2311      	movs	r3, #17
 800cb5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cb5c:	2340      	movs	r3, #64	; 0x40
 800cb5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cb60:	2300      	movs	r3, #0
 800cb62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cb64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb68:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cb6a:	f107 0308 	add.w	r3, r7, #8
 800cb6e:	4619      	mov	r1, r3
 800cb70:	6878      	ldr	r0, [r7, #4]
 800cb72:	f7ff ff52 	bl	800ca1a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800cb76:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb7a:	2111      	movs	r1, #17
 800cb7c:	6878      	ldr	r0, [r7, #4]
 800cb7e:	f000 f9f7 	bl	800cf70 <SDMMC_GetCmdResp1>
 800cb82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb84:	69fb      	ldr	r3, [r7, #28]
}
 800cb86:	4618      	mov	r0, r3
 800cb88:	3720      	adds	r7, #32
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	bd80      	pop	{r7, pc}

0800cb8e <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800cb8e:	b580      	push	{r7, lr}
 800cb90:	b088      	sub	sp, #32
 800cb92:	af00      	add	r7, sp, #0
 800cb94:	6078      	str	r0, [r7, #4]
 800cb96:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cb98:	683b      	ldr	r3, [r7, #0]
 800cb9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800cb9c:	2312      	movs	r3, #18
 800cb9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cba0:	2340      	movs	r3, #64	; 0x40
 800cba2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cba4:	2300      	movs	r3, #0
 800cba6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cba8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cbac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cbae:	f107 0308 	add.w	r3, r7, #8
 800cbb2:	4619      	mov	r1, r3
 800cbb4:	6878      	ldr	r0, [r7, #4]
 800cbb6:	f7ff ff30 	bl	800ca1a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800cbba:	f241 3288 	movw	r2, #5000	; 0x1388
 800cbbe:	2112      	movs	r1, #18
 800cbc0:	6878      	ldr	r0, [r7, #4]
 800cbc2:	f000 f9d5 	bl	800cf70 <SDMMC_GetCmdResp1>
 800cbc6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cbc8:	69fb      	ldr	r3, [r7, #28]
}
 800cbca:	4618      	mov	r0, r3
 800cbcc:	3720      	adds	r7, #32
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	bd80      	pop	{r7, pc}

0800cbd2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800cbd2:	b580      	push	{r7, lr}
 800cbd4:	b088      	sub	sp, #32
 800cbd6:	af00      	add	r7, sp, #0
 800cbd8:	6078      	str	r0, [r7, #4]
 800cbda:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800cbe0:	2318      	movs	r3, #24
 800cbe2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cbe4:	2340      	movs	r3, #64	; 0x40
 800cbe6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cbe8:	2300      	movs	r3, #0
 800cbea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cbec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cbf0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cbf2:	f107 0308 	add.w	r3, r7, #8
 800cbf6:	4619      	mov	r1, r3
 800cbf8:	6878      	ldr	r0, [r7, #4]
 800cbfa:	f7ff ff0e 	bl	800ca1a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800cbfe:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc02:	2118      	movs	r1, #24
 800cc04:	6878      	ldr	r0, [r7, #4]
 800cc06:	f000 f9b3 	bl	800cf70 <SDMMC_GetCmdResp1>
 800cc0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc0c:	69fb      	ldr	r3, [r7, #28]
}
 800cc0e:	4618      	mov	r0, r3
 800cc10:	3720      	adds	r7, #32
 800cc12:	46bd      	mov	sp, r7
 800cc14:	bd80      	pop	{r7, pc}

0800cc16 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800cc16:	b580      	push	{r7, lr}
 800cc18:	b088      	sub	sp, #32
 800cc1a:	af00      	add	r7, sp, #0
 800cc1c:	6078      	str	r0, [r7, #4]
 800cc1e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800cc24:	2319      	movs	r3, #25
 800cc26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cc28:	2340      	movs	r3, #64	; 0x40
 800cc2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cc30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc34:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cc36:	f107 0308 	add.w	r3, r7, #8
 800cc3a:	4619      	mov	r1, r3
 800cc3c:	6878      	ldr	r0, [r7, #4]
 800cc3e:	f7ff feec 	bl	800ca1a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800cc42:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc46:	2119      	movs	r1, #25
 800cc48:	6878      	ldr	r0, [r7, #4]
 800cc4a:	f000 f991 	bl	800cf70 <SDMMC_GetCmdResp1>
 800cc4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc50:	69fb      	ldr	r3, [r7, #28]
}
 800cc52:	4618      	mov	r0, r3
 800cc54:	3720      	adds	r7, #32
 800cc56:	46bd      	mov	sp, r7
 800cc58:	bd80      	pop	{r7, pc}
	...

0800cc5c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b088      	sub	sp, #32
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800cc64:	2300      	movs	r3, #0
 800cc66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800cc68:	230c      	movs	r3, #12
 800cc6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cc6c:	2340      	movs	r3, #64	; 0x40
 800cc6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cc70:	2300      	movs	r3, #0
 800cc72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cc74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc78:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cc7a:	f107 0308 	add.w	r3, r7, #8
 800cc7e:	4619      	mov	r1, r3
 800cc80:	6878      	ldr	r0, [r7, #4]
 800cc82:	f7ff feca 	bl	800ca1a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800cc86:	4a05      	ldr	r2, [pc, #20]	; (800cc9c <SDMMC_CmdStopTransfer+0x40>)
 800cc88:	210c      	movs	r1, #12
 800cc8a:	6878      	ldr	r0, [r7, #4]
 800cc8c:	f000 f970 	bl	800cf70 <SDMMC_GetCmdResp1>
 800cc90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc92:	69fb      	ldr	r3, [r7, #28]
}
 800cc94:	4618      	mov	r0, r3
 800cc96:	3720      	adds	r7, #32
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	bd80      	pop	{r7, pc}
 800cc9c:	05f5e100 	.word	0x05f5e100

0800cca0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b08a      	sub	sp, #40	; 0x28
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	60f8      	str	r0, [r7, #12]
 800cca8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ccac:	683b      	ldr	r3, [r7, #0]
 800ccae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ccb0:	2307      	movs	r3, #7
 800ccb2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ccb4:	2340      	movs	r3, #64	; 0x40
 800ccb6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ccb8:	2300      	movs	r3, #0
 800ccba:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ccbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ccc0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ccc2:	f107 0310 	add.w	r3, r7, #16
 800ccc6:	4619      	mov	r1, r3
 800ccc8:	68f8      	ldr	r0, [r7, #12]
 800ccca:	f7ff fea6 	bl	800ca1a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800ccce:	f241 3288 	movw	r2, #5000	; 0x1388
 800ccd2:	2107      	movs	r1, #7
 800ccd4:	68f8      	ldr	r0, [r7, #12]
 800ccd6:	f000 f94b 	bl	800cf70 <SDMMC_GetCmdResp1>
 800ccda:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800ccdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ccde:	4618      	mov	r0, r3
 800cce0:	3728      	adds	r7, #40	; 0x28
 800cce2:	46bd      	mov	sp, r7
 800cce4:	bd80      	pop	{r7, pc}

0800cce6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800cce6:	b580      	push	{r7, lr}
 800cce8:	b088      	sub	sp, #32
 800ccea:	af00      	add	r7, sp, #0
 800ccec:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800ccee:	2300      	movs	r3, #0
 800ccf0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ccfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd02:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cd04:	f107 0308 	add.w	r3, r7, #8
 800cd08:	4619      	mov	r1, r3
 800cd0a:	6878      	ldr	r0, [r7, #4]
 800cd0c:	f7ff fe85 	bl	800ca1a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800cd10:	6878      	ldr	r0, [r7, #4]
 800cd12:	f000 fb65 	bl	800d3e0 <SDMMC_GetCmdError>
 800cd16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd18:	69fb      	ldr	r3, [r7, #28]
}
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	3720      	adds	r7, #32
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	bd80      	pop	{r7, pc}

0800cd22 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800cd22:	b580      	push	{r7, lr}
 800cd24:	b088      	sub	sp, #32
 800cd26:	af00      	add	r7, sp, #0
 800cd28:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800cd2a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800cd2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800cd30:	2308      	movs	r3, #8
 800cd32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cd34:	2340      	movs	r3, #64	; 0x40
 800cd36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cd38:	2300      	movs	r3, #0
 800cd3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cd3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd40:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cd42:	f107 0308 	add.w	r3, r7, #8
 800cd46:	4619      	mov	r1, r3
 800cd48:	6878      	ldr	r0, [r7, #4]
 800cd4a:	f7ff fe66 	bl	800ca1a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800cd4e:	6878      	ldr	r0, [r7, #4]
 800cd50:	f000 faf8 	bl	800d344 <SDMMC_GetCmdResp7>
 800cd54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd56:	69fb      	ldr	r3, [r7, #28]
}
 800cd58:	4618      	mov	r0, r3
 800cd5a:	3720      	adds	r7, #32
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	bd80      	pop	{r7, pc}

0800cd60 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b088      	sub	sp, #32
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
 800cd68:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800cd6e:	2337      	movs	r3, #55	; 0x37
 800cd70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cd72:	2340      	movs	r3, #64	; 0x40
 800cd74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cd76:	2300      	movs	r3, #0
 800cd78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cd7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd7e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cd80:	f107 0308 	add.w	r3, r7, #8
 800cd84:	4619      	mov	r1, r3
 800cd86:	6878      	ldr	r0, [r7, #4]
 800cd88:	f7ff fe47 	bl	800ca1a <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800cd8c:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd90:	2137      	movs	r1, #55	; 0x37
 800cd92:	6878      	ldr	r0, [r7, #4]
 800cd94:	f000 f8ec 	bl	800cf70 <SDMMC_GetCmdResp1>
 800cd98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd9a:	69fb      	ldr	r3, [r7, #28]
}
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	3720      	adds	r7, #32
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd80      	pop	{r7, pc}

0800cda4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b088      	sub	sp, #32
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
 800cdac:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800cdae:	683b      	ldr	r3, [r7, #0]
 800cdb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cdb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cdb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800cdba:	2329      	movs	r3, #41	; 0x29
 800cdbc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cdbe:	2340      	movs	r3, #64	; 0x40
 800cdc0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cdc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cdca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cdcc:	f107 0308 	add.w	r3, r7, #8
 800cdd0:	4619      	mov	r1, r3
 800cdd2:	6878      	ldr	r0, [r7, #4]
 800cdd4:	f7ff fe21 	bl	800ca1a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800cdd8:	6878      	ldr	r0, [r7, #4]
 800cdda:	f000 f9ff 	bl	800d1dc <SDMMC_GetCmdResp3>
 800cdde:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cde0:	69fb      	ldr	r3, [r7, #28]
}
 800cde2:	4618      	mov	r0, r3
 800cde4:	3720      	adds	r7, #32
 800cde6:	46bd      	mov	sp, r7
 800cde8:	bd80      	pop	{r7, pc}

0800cdea <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800cdea:	b580      	push	{r7, lr}
 800cdec:	b088      	sub	sp, #32
 800cdee:	af00      	add	r7, sp, #0
 800cdf0:	6078      	str	r0, [r7, #4]
 800cdf2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800cdf8:	2306      	movs	r3, #6
 800cdfa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cdfc:	2340      	movs	r3, #64	; 0x40
 800cdfe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ce00:	2300      	movs	r3, #0
 800ce02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ce04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce08:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ce0a:	f107 0308 	add.w	r3, r7, #8
 800ce0e:	4619      	mov	r1, r3
 800ce10:	6878      	ldr	r0, [r7, #4]
 800ce12:	f7ff fe02 	bl	800ca1a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800ce16:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce1a:	2106      	movs	r1, #6
 800ce1c:	6878      	ldr	r0, [r7, #4]
 800ce1e:	f000 f8a7 	bl	800cf70 <SDMMC_GetCmdResp1>
 800ce22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce24:	69fb      	ldr	r3, [r7, #28]
}
 800ce26:	4618      	mov	r0, r3
 800ce28:	3720      	adds	r7, #32
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd80      	pop	{r7, pc}

0800ce2e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800ce2e:	b580      	push	{r7, lr}
 800ce30:	b088      	sub	sp, #32
 800ce32:	af00      	add	r7, sp, #0
 800ce34:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800ce36:	2300      	movs	r3, #0
 800ce38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800ce3a:	2333      	movs	r3, #51	; 0x33
 800ce3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ce3e:	2340      	movs	r3, #64	; 0x40
 800ce40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ce42:	2300      	movs	r3, #0
 800ce44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ce46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce4a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ce4c:	f107 0308 	add.w	r3, r7, #8
 800ce50:	4619      	mov	r1, r3
 800ce52:	6878      	ldr	r0, [r7, #4]
 800ce54:	f7ff fde1 	bl	800ca1a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800ce58:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce5c:	2133      	movs	r1, #51	; 0x33
 800ce5e:	6878      	ldr	r0, [r7, #4]
 800ce60:	f000 f886 	bl	800cf70 <SDMMC_GetCmdResp1>
 800ce64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce66:	69fb      	ldr	r3, [r7, #28]
}
 800ce68:	4618      	mov	r0, r3
 800ce6a:	3720      	adds	r7, #32
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	bd80      	pop	{r7, pc}

0800ce70 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b088      	sub	sp, #32
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800ce78:	2300      	movs	r3, #0
 800ce7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ce7c:	2302      	movs	r3, #2
 800ce7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800ce80:	23c0      	movs	r3, #192	; 0xc0
 800ce82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ce84:	2300      	movs	r3, #0
 800ce86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ce88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce8c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ce8e:	f107 0308 	add.w	r3, r7, #8
 800ce92:	4619      	mov	r1, r3
 800ce94:	6878      	ldr	r0, [r7, #4]
 800ce96:	f7ff fdc0 	bl	800ca1a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800ce9a:	6878      	ldr	r0, [r7, #4]
 800ce9c:	f000 f956 	bl	800d14c <SDMMC_GetCmdResp2>
 800cea0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cea2:	69fb      	ldr	r3, [r7, #28]
}
 800cea4:	4618      	mov	r0, r3
 800cea6:	3720      	adds	r7, #32
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	bd80      	pop	{r7, pc}

0800ceac <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b088      	sub	sp, #32
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
 800ceb4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ceba:	2309      	movs	r3, #9
 800cebc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800cebe:	23c0      	movs	r3, #192	; 0xc0
 800cec0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cec2:	2300      	movs	r3, #0
 800cec4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cec6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ceca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cecc:	f107 0308 	add.w	r3, r7, #8
 800ced0:	4619      	mov	r1, r3
 800ced2:	6878      	ldr	r0, [r7, #4]
 800ced4:	f7ff fda1 	bl	800ca1a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800ced8:	6878      	ldr	r0, [r7, #4]
 800ceda:	f000 f937 	bl	800d14c <SDMMC_GetCmdResp2>
 800cede:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cee0:	69fb      	ldr	r3, [r7, #28]
}
 800cee2:	4618      	mov	r0, r3
 800cee4:	3720      	adds	r7, #32
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bd80      	pop	{r7, pc}

0800ceea <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800ceea:	b580      	push	{r7, lr}
 800ceec:	b088      	sub	sp, #32
 800ceee:	af00      	add	r7, sp, #0
 800cef0:	6078      	str	r0, [r7, #4]
 800cef2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800cef4:	2300      	movs	r3, #0
 800cef6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800cef8:	2303      	movs	r3, #3
 800cefa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cefc:	2340      	movs	r3, #64	; 0x40
 800cefe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cf00:	2300      	movs	r3, #0
 800cf02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cf04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cf08:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cf0a:	f107 0308 	add.w	r3, r7, #8
 800cf0e:	4619      	mov	r1, r3
 800cf10:	6878      	ldr	r0, [r7, #4]
 800cf12:	f7ff fd82 	bl	800ca1a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800cf16:	683a      	ldr	r2, [r7, #0]
 800cf18:	2103      	movs	r1, #3
 800cf1a:	6878      	ldr	r0, [r7, #4]
 800cf1c:	f000 f99c 	bl	800d258 <SDMMC_GetCmdResp6>
 800cf20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf22:	69fb      	ldr	r3, [r7, #28]
}
 800cf24:	4618      	mov	r0, r3
 800cf26:	3720      	adds	r7, #32
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	bd80      	pop	{r7, pc}

0800cf2c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b088      	sub	sp, #32
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
 800cf34:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800cf36:	683b      	ldr	r3, [r7, #0]
 800cf38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800cf3a:	230d      	movs	r3, #13
 800cf3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cf3e:	2340      	movs	r3, #64	; 0x40
 800cf40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cf42:	2300      	movs	r3, #0
 800cf44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cf46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cf4a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cf4c:	f107 0308 	add.w	r3, r7, #8
 800cf50:	4619      	mov	r1, r3
 800cf52:	6878      	ldr	r0, [r7, #4]
 800cf54:	f7ff fd61 	bl	800ca1a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800cf58:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf5c:	210d      	movs	r1, #13
 800cf5e:	6878      	ldr	r0, [r7, #4]
 800cf60:	f000 f806 	bl	800cf70 <SDMMC_GetCmdResp1>
 800cf64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf66:	69fb      	ldr	r3, [r7, #28]
}
 800cf68:	4618      	mov	r0, r3
 800cf6a:	3720      	adds	r7, #32
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	bd80      	pop	{r7, pc}

0800cf70 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b088      	sub	sp, #32
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	60f8      	str	r0, [r7, #12]
 800cf78:	460b      	mov	r3, r1
 800cf7a:	607a      	str	r2, [r7, #4]
 800cf7c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800cf7e:	4b70      	ldr	r3, [pc, #448]	; (800d140 <SDMMC_GetCmdResp1+0x1d0>)
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	4a70      	ldr	r2, [pc, #448]	; (800d144 <SDMMC_GetCmdResp1+0x1d4>)
 800cf84:	fba2 2303 	umull	r2, r3, r2, r3
 800cf88:	0a5a      	lsrs	r2, r3, #9
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	fb02 f303 	mul.w	r3, r2, r3
 800cf90:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800cf92:	69fb      	ldr	r3, [r7, #28]
 800cf94:	1e5a      	subs	r2, r3, #1
 800cf96:	61fa      	str	r2, [r7, #28]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d102      	bne.n	800cfa2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cf9c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cfa0:	e0c9      	b.n	800d136 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfa6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cfa8:	69bb      	ldr	r3, [r7, #24]
 800cfaa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d0ef      	beq.n	800cf92 <SDMMC_GetCmdResp1+0x22>
 800cfb2:	69bb      	ldr	r3, [r7, #24]
 800cfb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d1ea      	bne.n	800cf92 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfc0:	f003 0304 	and.w	r3, r3, #4
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d004      	beq.n	800cfd2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	2204      	movs	r2, #4
 800cfcc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cfce:	2304      	movs	r3, #4
 800cfd0:	e0b1      	b.n	800d136 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfd6:	f003 0301 	and.w	r3, r3, #1
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d004      	beq.n	800cfe8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	2201      	movs	r2, #1
 800cfe2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cfe4:	2301      	movs	r3, #1
 800cfe6:	e0a6      	b.n	800d136 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	22c5      	movs	r2, #197	; 0xc5
 800cfec:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800cfee:	68f8      	ldr	r0, [r7, #12]
 800cff0:	f7ff fd3d 	bl	800ca6e <SDIO_GetCommandResponse>
 800cff4:	4603      	mov	r3, r0
 800cff6:	461a      	mov	r2, r3
 800cff8:	7afb      	ldrb	r3, [r7, #11]
 800cffa:	4293      	cmp	r3, r2
 800cffc:	d001      	beq.n	800d002 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cffe:	2301      	movs	r3, #1
 800d000:	e099      	b.n	800d136 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d002:	2100      	movs	r1, #0
 800d004:	68f8      	ldr	r0, [r7, #12]
 800d006:	f7ff fd3f 	bl	800ca88 <SDIO_GetResponse>
 800d00a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d00c:	697a      	ldr	r2, [r7, #20]
 800d00e:	4b4e      	ldr	r3, [pc, #312]	; (800d148 <SDMMC_GetCmdResp1+0x1d8>)
 800d010:	4013      	ands	r3, r2
 800d012:	2b00      	cmp	r3, #0
 800d014:	d101      	bne.n	800d01a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d016:	2300      	movs	r3, #0
 800d018:	e08d      	b.n	800d136 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d01a:	697b      	ldr	r3, [r7, #20]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	da02      	bge.n	800d026 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d020:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d024:	e087      	b.n	800d136 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d026:	697b      	ldr	r3, [r7, #20]
 800d028:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d001      	beq.n	800d034 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d030:	2340      	movs	r3, #64	; 0x40
 800d032:	e080      	b.n	800d136 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d034:	697b      	ldr	r3, [r7, #20]
 800d036:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d001      	beq.n	800d042 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d03e:	2380      	movs	r3, #128	; 0x80
 800d040:	e079      	b.n	800d136 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d042:	697b      	ldr	r3, [r7, #20]
 800d044:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d002      	beq.n	800d052 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d04c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d050:	e071      	b.n	800d136 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d052:	697b      	ldr	r3, [r7, #20]
 800d054:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d002      	beq.n	800d062 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d05c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d060:	e069      	b.n	800d136 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d062:	697b      	ldr	r3, [r7, #20]
 800d064:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d002      	beq.n	800d072 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d06c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d070:	e061      	b.n	800d136 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d072:	697b      	ldr	r3, [r7, #20]
 800d074:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d002      	beq.n	800d082 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d07c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d080:	e059      	b.n	800d136 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d082:	697b      	ldr	r3, [r7, #20]
 800d084:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d002      	beq.n	800d092 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d08c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d090:	e051      	b.n	800d136 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d092:	697b      	ldr	r3, [r7, #20]
 800d094:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d002      	beq.n	800d0a2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d09c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d0a0:	e049      	b.n	800d136 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d0a2:	697b      	ldr	r3, [r7, #20]
 800d0a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d002      	beq.n	800d0b2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d0ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d0b0:	e041      	b.n	800d136 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d0b2:	697b      	ldr	r3, [r7, #20]
 800d0b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d002      	beq.n	800d0c2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d0bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d0c0:	e039      	b.n	800d136 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d0c2:	697b      	ldr	r3, [r7, #20]
 800d0c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d002      	beq.n	800d0d2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d0cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d0d0:	e031      	b.n	800d136 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d0d2:	697b      	ldr	r3, [r7, #20]
 800d0d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d002      	beq.n	800d0e2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d0dc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d0e0:	e029      	b.n	800d136 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d0e2:	697b      	ldr	r3, [r7, #20]
 800d0e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d002      	beq.n	800d0f2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d0ec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d0f0:	e021      	b.n	800d136 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d0f2:	697b      	ldr	r3, [r7, #20]
 800d0f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d002      	beq.n	800d102 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d0fc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d100:	e019      	b.n	800d136 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d102:	697b      	ldr	r3, [r7, #20]
 800d104:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d002      	beq.n	800d112 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d10c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d110:	e011      	b.n	800d136 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d112:	697b      	ldr	r3, [r7, #20]
 800d114:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d002      	beq.n	800d122 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d11c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d120:	e009      	b.n	800d136 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d122:	697b      	ldr	r3, [r7, #20]
 800d124:	f003 0308 	and.w	r3, r3, #8
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d002      	beq.n	800d132 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d12c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d130:	e001      	b.n	800d136 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d132:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d136:	4618      	mov	r0, r3
 800d138:	3720      	adds	r7, #32
 800d13a:	46bd      	mov	sp, r7
 800d13c:	bd80      	pop	{r7, pc}
 800d13e:	bf00      	nop
 800d140:	20000014 	.word	0x20000014
 800d144:	10624dd3 	.word	0x10624dd3
 800d148:	fdffe008 	.word	0xfdffe008

0800d14c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800d14c:	b480      	push	{r7}
 800d14e:	b085      	sub	sp, #20
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d154:	4b1f      	ldr	r3, [pc, #124]	; (800d1d4 <SDMMC_GetCmdResp2+0x88>)
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	4a1f      	ldr	r2, [pc, #124]	; (800d1d8 <SDMMC_GetCmdResp2+0x8c>)
 800d15a:	fba2 2303 	umull	r2, r3, r2, r3
 800d15e:	0a5b      	lsrs	r3, r3, #9
 800d160:	f241 3288 	movw	r2, #5000	; 0x1388
 800d164:	fb02 f303 	mul.w	r3, r2, r3
 800d168:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	1e5a      	subs	r2, r3, #1
 800d16e:	60fa      	str	r2, [r7, #12]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d102      	bne.n	800d17a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d174:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d178:	e026      	b.n	800d1c8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d17e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d180:	68bb      	ldr	r3, [r7, #8]
 800d182:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d186:	2b00      	cmp	r3, #0
 800d188:	d0ef      	beq.n	800d16a <SDMMC_GetCmdResp2+0x1e>
 800d18a:	68bb      	ldr	r3, [r7, #8]
 800d18c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d190:	2b00      	cmp	r3, #0
 800d192:	d1ea      	bne.n	800d16a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d198:	f003 0304 	and.w	r3, r3, #4
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d004      	beq.n	800d1aa <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2204      	movs	r2, #4
 800d1a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d1a6:	2304      	movs	r3, #4
 800d1a8:	e00e      	b.n	800d1c8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1ae:	f003 0301 	and.w	r3, r3, #1
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d004      	beq.n	800d1c0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	2201      	movs	r2, #1
 800d1ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d1bc:	2301      	movs	r3, #1
 800d1be:	e003      	b.n	800d1c8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	22c5      	movs	r2, #197	; 0xc5
 800d1c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d1c6:	2300      	movs	r3, #0
}
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	3714      	adds	r7, #20
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d2:	4770      	bx	lr
 800d1d4:	20000014 	.word	0x20000014
 800d1d8:	10624dd3 	.word	0x10624dd3

0800d1dc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800d1dc:	b480      	push	{r7}
 800d1de:	b085      	sub	sp, #20
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d1e4:	4b1a      	ldr	r3, [pc, #104]	; (800d250 <SDMMC_GetCmdResp3+0x74>)
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	4a1a      	ldr	r2, [pc, #104]	; (800d254 <SDMMC_GetCmdResp3+0x78>)
 800d1ea:	fba2 2303 	umull	r2, r3, r2, r3
 800d1ee:	0a5b      	lsrs	r3, r3, #9
 800d1f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800d1f4:	fb02 f303 	mul.w	r3, r2, r3
 800d1f8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	1e5a      	subs	r2, r3, #1
 800d1fe:	60fa      	str	r2, [r7, #12]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d102      	bne.n	800d20a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d204:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d208:	e01b      	b.n	800d242 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d20e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d216:	2b00      	cmp	r3, #0
 800d218:	d0ef      	beq.n	800d1fa <SDMMC_GetCmdResp3+0x1e>
 800d21a:	68bb      	ldr	r3, [r7, #8]
 800d21c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d220:	2b00      	cmp	r3, #0
 800d222:	d1ea      	bne.n	800d1fa <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d228:	f003 0304 	and.w	r3, r3, #4
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d004      	beq.n	800d23a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	2204      	movs	r2, #4
 800d234:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d236:	2304      	movs	r3, #4
 800d238:	e003      	b.n	800d242 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	22c5      	movs	r2, #197	; 0xc5
 800d23e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d240:	2300      	movs	r3, #0
}
 800d242:	4618      	mov	r0, r3
 800d244:	3714      	adds	r7, #20
 800d246:	46bd      	mov	sp, r7
 800d248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24c:	4770      	bx	lr
 800d24e:	bf00      	nop
 800d250:	20000014 	.word	0x20000014
 800d254:	10624dd3 	.word	0x10624dd3

0800d258 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d258:	b580      	push	{r7, lr}
 800d25a:	b088      	sub	sp, #32
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	60f8      	str	r0, [r7, #12]
 800d260:	460b      	mov	r3, r1
 800d262:	607a      	str	r2, [r7, #4]
 800d264:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d266:	4b35      	ldr	r3, [pc, #212]	; (800d33c <SDMMC_GetCmdResp6+0xe4>)
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	4a35      	ldr	r2, [pc, #212]	; (800d340 <SDMMC_GetCmdResp6+0xe8>)
 800d26c:	fba2 2303 	umull	r2, r3, r2, r3
 800d270:	0a5b      	lsrs	r3, r3, #9
 800d272:	f241 3288 	movw	r2, #5000	; 0x1388
 800d276:	fb02 f303 	mul.w	r3, r2, r3
 800d27a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d27c:	69fb      	ldr	r3, [r7, #28]
 800d27e:	1e5a      	subs	r2, r3, #1
 800d280:	61fa      	str	r2, [r7, #28]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d102      	bne.n	800d28c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d286:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d28a:	e052      	b.n	800d332 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d290:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d292:	69bb      	ldr	r3, [r7, #24]
 800d294:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d0ef      	beq.n	800d27c <SDMMC_GetCmdResp6+0x24>
 800d29c:	69bb      	ldr	r3, [r7, #24]
 800d29e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d1ea      	bne.n	800d27c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2aa:	f003 0304 	and.w	r3, r3, #4
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d004      	beq.n	800d2bc <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	2204      	movs	r2, #4
 800d2b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d2b8:	2304      	movs	r3, #4
 800d2ba:	e03a      	b.n	800d332 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2c0:	f003 0301 	and.w	r3, r3, #1
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d004      	beq.n	800d2d2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	2201      	movs	r2, #1
 800d2cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d2ce:	2301      	movs	r3, #1
 800d2d0:	e02f      	b.n	800d332 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800d2d2:	68f8      	ldr	r0, [r7, #12]
 800d2d4:	f7ff fbcb 	bl	800ca6e <SDIO_GetCommandResponse>
 800d2d8:	4603      	mov	r3, r0
 800d2da:	461a      	mov	r2, r3
 800d2dc:	7afb      	ldrb	r3, [r7, #11]
 800d2de:	4293      	cmp	r3, r2
 800d2e0:	d001      	beq.n	800d2e6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d2e2:	2301      	movs	r3, #1
 800d2e4:	e025      	b.n	800d332 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	22c5      	movs	r2, #197	; 0xc5
 800d2ea:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d2ec:	2100      	movs	r1, #0
 800d2ee:	68f8      	ldr	r0, [r7, #12]
 800d2f0:	f7ff fbca 	bl	800ca88 <SDIO_GetResponse>
 800d2f4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800d2f6:	697b      	ldr	r3, [r7, #20]
 800d2f8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d106      	bne.n	800d30e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800d300:	697b      	ldr	r3, [r7, #20]
 800d302:	0c1b      	lsrs	r3, r3, #16
 800d304:	b29a      	uxth	r2, r3
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800d30a:	2300      	movs	r3, #0
 800d30c:	e011      	b.n	800d332 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d30e:	697b      	ldr	r3, [r7, #20]
 800d310:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d314:	2b00      	cmp	r3, #0
 800d316:	d002      	beq.n	800d31e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d318:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d31c:	e009      	b.n	800d332 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d31e:	697b      	ldr	r3, [r7, #20]
 800d320:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d324:	2b00      	cmp	r3, #0
 800d326:	d002      	beq.n	800d32e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d328:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d32c:	e001      	b.n	800d332 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d32e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d332:	4618      	mov	r0, r3
 800d334:	3720      	adds	r7, #32
 800d336:	46bd      	mov	sp, r7
 800d338:	bd80      	pop	{r7, pc}
 800d33a:	bf00      	nop
 800d33c:	20000014 	.word	0x20000014
 800d340:	10624dd3 	.word	0x10624dd3

0800d344 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800d344:	b480      	push	{r7}
 800d346:	b085      	sub	sp, #20
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d34c:	4b22      	ldr	r3, [pc, #136]	; (800d3d8 <SDMMC_GetCmdResp7+0x94>)
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	4a22      	ldr	r2, [pc, #136]	; (800d3dc <SDMMC_GetCmdResp7+0x98>)
 800d352:	fba2 2303 	umull	r2, r3, r2, r3
 800d356:	0a5b      	lsrs	r3, r3, #9
 800d358:	f241 3288 	movw	r2, #5000	; 0x1388
 800d35c:	fb02 f303 	mul.w	r3, r2, r3
 800d360:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	1e5a      	subs	r2, r3, #1
 800d366:	60fa      	str	r2, [r7, #12]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d102      	bne.n	800d372 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d36c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d370:	e02c      	b.n	800d3cc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d376:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d378:	68bb      	ldr	r3, [r7, #8]
 800d37a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d0ef      	beq.n	800d362 <SDMMC_GetCmdResp7+0x1e>
 800d382:	68bb      	ldr	r3, [r7, #8]
 800d384:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d1ea      	bne.n	800d362 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d390:	f003 0304 	and.w	r3, r3, #4
 800d394:	2b00      	cmp	r3, #0
 800d396:	d004      	beq.n	800d3a2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	2204      	movs	r2, #4
 800d39c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d39e:	2304      	movs	r3, #4
 800d3a0:	e014      	b.n	800d3cc <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3a6:	f003 0301 	and.w	r3, r3, #1
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d004      	beq.n	800d3b8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	2201      	movs	r2, #1
 800d3b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d3b4:	2301      	movs	r3, #1
 800d3b6:	e009      	b.n	800d3cc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d002      	beq.n	800d3ca <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	2240      	movs	r2, #64	; 0x40
 800d3c8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d3ca:	2300      	movs	r3, #0
  
}
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	3714      	adds	r7, #20
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d6:	4770      	bx	lr
 800d3d8:	20000014 	.word	0x20000014
 800d3dc:	10624dd3 	.word	0x10624dd3

0800d3e0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800d3e0:	b480      	push	{r7}
 800d3e2:	b085      	sub	sp, #20
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d3e8:	4b11      	ldr	r3, [pc, #68]	; (800d430 <SDMMC_GetCmdError+0x50>)
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	4a11      	ldr	r2, [pc, #68]	; (800d434 <SDMMC_GetCmdError+0x54>)
 800d3ee:	fba2 2303 	umull	r2, r3, r2, r3
 800d3f2:	0a5b      	lsrs	r3, r3, #9
 800d3f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800d3f8:	fb02 f303 	mul.w	r3, r2, r3
 800d3fc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	1e5a      	subs	r2, r3, #1
 800d402:	60fa      	str	r2, [r7, #12]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d102      	bne.n	800d40e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d408:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d40c:	e009      	b.n	800d422 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d416:	2b00      	cmp	r3, #0
 800d418:	d0f1      	beq.n	800d3fe <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	22c5      	movs	r2, #197	; 0xc5
 800d41e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800d420:	2300      	movs	r3, #0
}
 800d422:	4618      	mov	r0, r3
 800d424:	3714      	adds	r7, #20
 800d426:	46bd      	mov	sp, r7
 800d428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42c:	4770      	bx	lr
 800d42e:	bf00      	nop
 800d430:	20000014 	.word	0x20000014
 800d434:	10624dd3 	.word	0x10624dd3

0800d438 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d43c:	4904      	ldr	r1, [pc, #16]	; (800d450 <MX_FATFS_Init+0x18>)
 800d43e:	4805      	ldr	r0, [pc, #20]	; (800d454 <MX_FATFS_Init+0x1c>)
 800d440:	f003 fada 	bl	80109f8 <FATFS_LinkDriver>
 800d444:	4603      	mov	r3, r0
 800d446:	461a      	mov	r2, r3
 800d448:	4b03      	ldr	r3, [pc, #12]	; (800d458 <MX_FATFS_Init+0x20>)
 800d44a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d44c:	bf00      	nop
 800d44e:	bd80      	pop	{r7, pc}
 800d450:	20007abc 	.word	0x20007abc
 800d454:	08018e74 	.word	0x08018e74
 800d458:	20007ab8 	.word	0x20007ab8

0800d45c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800d45c:	b480      	push	{r7}
 800d45e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800d460:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800d462:	4618      	mov	r0, r3
 800d464:	46bd      	mov	sp, r7
 800d466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46a:	4770      	bx	lr

0800d46c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b082      	sub	sp, #8
 800d470:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d472:	2300      	movs	r3, #0
 800d474:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d476:	f000 f896 	bl	800d5a6 <BSP_SD_IsDetected>
 800d47a:	4603      	mov	r3, r0
 800d47c:	2b01      	cmp	r3, #1
 800d47e:	d001      	beq.n	800d484 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800d480:	2301      	movs	r3, #1
 800d482:	e012      	b.n	800d4aa <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800d484:	480b      	ldr	r0, [pc, #44]	; (800d4b4 <BSP_SD_Init+0x48>)
 800d486:	f7fb fdab 	bl	8008fe0 <HAL_SD_Init>
 800d48a:	4603      	mov	r3, r0
 800d48c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d48e:	79fb      	ldrb	r3, [r7, #7]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d109      	bne.n	800d4a8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800d494:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d498:	4806      	ldr	r0, [pc, #24]	; (800d4b4 <BSP_SD_Init+0x48>)
 800d49a:	f7fc fb79 	bl	8009b90 <HAL_SD_ConfigWideBusOperation>
 800d49e:	4603      	mov	r3, r0
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d001      	beq.n	800d4a8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800d4a4:	2301      	movs	r3, #1
 800d4a6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d4a8:	79fb      	ldrb	r3, [r7, #7]
}
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	3708      	adds	r7, #8
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	bd80      	pop	{r7, pc}
 800d4b2:	bf00      	nop
 800d4b4:	20003c48 	.word	0x20003c48

0800d4b8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b086      	sub	sp, #24
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	60f8      	str	r0, [r7, #12]
 800d4c0:	60b9      	str	r1, [r7, #8]
 800d4c2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	68ba      	ldr	r2, [r7, #8]
 800d4cc:	68f9      	ldr	r1, [r7, #12]
 800d4ce:	4806      	ldr	r0, [pc, #24]	; (800d4e8 <BSP_SD_ReadBlocks_DMA+0x30>)
 800d4d0:	f7fb fe36 	bl	8009140 <HAL_SD_ReadBlocks_DMA>
 800d4d4:	4603      	mov	r3, r0
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d001      	beq.n	800d4de <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d4da:	2301      	movs	r3, #1
 800d4dc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d4de:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	3718      	adds	r7, #24
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	bd80      	pop	{r7, pc}
 800d4e8:	20003c48 	.word	0x20003c48

0800d4ec <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b086      	sub	sp, #24
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	60f8      	str	r0, [r7, #12]
 800d4f4:	60b9      	str	r1, [r7, #8]
 800d4f6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	68ba      	ldr	r2, [r7, #8]
 800d500:	68f9      	ldr	r1, [r7, #12]
 800d502:	4806      	ldr	r0, [pc, #24]	; (800d51c <BSP_SD_WriteBlocks_DMA+0x30>)
 800d504:	f7fb fefe 	bl	8009304 <HAL_SD_WriteBlocks_DMA>
 800d508:	4603      	mov	r3, r0
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d001      	beq.n	800d512 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d50e:	2301      	movs	r3, #1
 800d510:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d512:	7dfb      	ldrb	r3, [r7, #23]
}
 800d514:	4618      	mov	r0, r3
 800d516:	3718      	adds	r7, #24
 800d518:	46bd      	mov	sp, r7
 800d51a:	bd80      	pop	{r7, pc}
 800d51c:	20003c48 	.word	0x20003c48

0800d520 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d520:	b580      	push	{r7, lr}
 800d522:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d524:	4805      	ldr	r0, [pc, #20]	; (800d53c <BSP_SD_GetCardState+0x1c>)
 800d526:	f7fc fbcd 	bl	8009cc4 <HAL_SD_GetCardState>
 800d52a:	4603      	mov	r3, r0
 800d52c:	2b04      	cmp	r3, #4
 800d52e:	bf14      	ite	ne
 800d530:	2301      	movne	r3, #1
 800d532:	2300      	moveq	r3, #0
 800d534:	b2db      	uxtb	r3, r3
}
 800d536:	4618      	mov	r0, r3
 800d538:	bd80      	pop	{r7, pc}
 800d53a:	bf00      	nop
 800d53c:	20003c48 	.word	0x20003c48

0800d540 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d540:	b580      	push	{r7, lr}
 800d542:	b082      	sub	sp, #8
 800d544:	af00      	add	r7, sp, #0
 800d546:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800d548:	6879      	ldr	r1, [r7, #4]
 800d54a:	4803      	ldr	r0, [pc, #12]	; (800d558 <BSP_SD_GetCardInfo+0x18>)
 800d54c:	f7fc faf4 	bl	8009b38 <HAL_SD_GetCardInfo>
}
 800d550:	bf00      	nop
 800d552:	3708      	adds	r7, #8
 800d554:	46bd      	mov	sp, r7
 800d556:	bd80      	pop	{r7, pc}
 800d558:	20003c48 	.word	0x20003c48

0800d55c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b082      	sub	sp, #8
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800d564:	f000 f818 	bl	800d598 <BSP_SD_AbortCallback>
}
 800d568:	bf00      	nop
 800d56a:	3708      	adds	r7, #8
 800d56c:	46bd      	mov	sp, r7
 800d56e:	bd80      	pop	{r7, pc}

0800d570 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b082      	sub	sp, #8
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800d578:	f000 f9a8 	bl	800d8cc <BSP_SD_WriteCpltCallback>
}
 800d57c:	bf00      	nop
 800d57e:	3708      	adds	r7, #8
 800d580:	46bd      	mov	sp, r7
 800d582:	bd80      	pop	{r7, pc}

0800d584 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b082      	sub	sp, #8
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800d58c:	f000 f9aa 	bl	800d8e4 <BSP_SD_ReadCpltCallback>
}
 800d590:	bf00      	nop
 800d592:	3708      	adds	r7, #8
 800d594:	46bd      	mov	sp, r7
 800d596:	bd80      	pop	{r7, pc}

0800d598 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800d598:	b480      	push	{r7}
 800d59a:	af00      	add	r7, sp, #0

}
 800d59c:	bf00      	nop
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a4:	4770      	bx	lr

0800d5a6 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d5a6:	b580      	push	{r7, lr}
 800d5a8:	b082      	sub	sp, #8
 800d5aa:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d5ac:	2301      	movs	r3, #1
 800d5ae:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800d5b0:	f000 f80c 	bl	800d5cc <BSP_PlatformIsDetected>
 800d5b4:	4603      	mov	r3, r0
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d101      	bne.n	800d5be <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d5be:	79fb      	ldrb	r3, [r7, #7]
 800d5c0:	b2db      	uxtb	r3, r3
}
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	3708      	adds	r7, #8
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	bd80      	pop	{r7, pc}
	...

0800d5cc <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b082      	sub	sp, #8
 800d5d0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d5d2:	2301      	movs	r3, #1
 800d5d4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d5d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d5da:	4806      	ldr	r0, [pc, #24]	; (800d5f4 <BSP_PlatformIsDetected+0x28>)
 800d5dc:	f7fa fc1e 	bl	8007e1c <HAL_GPIO_ReadPin>
 800d5e0:	4603      	mov	r3, r0
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d001      	beq.n	800d5ea <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800d5ea:	79fb      	ldrb	r3, [r7, #7]
}
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	3708      	adds	r7, #8
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	bd80      	pop	{r7, pc}
 800d5f4:	40020000 	.word	0x40020000

0800d5f8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b084      	sub	sp, #16
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800d600:	f7f9 f936 	bl	8006870 <HAL_GetTick>
 800d604:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800d606:	e006      	b.n	800d616 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d608:	f7ff ff8a 	bl	800d520 <BSP_SD_GetCardState>
 800d60c:	4603      	mov	r3, r0
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d101      	bne.n	800d616 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800d612:	2300      	movs	r3, #0
 800d614:	e009      	b.n	800d62a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800d616:	f7f9 f92b 	bl	8006870 <HAL_GetTick>
 800d61a:	4602      	mov	r2, r0
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	1ad3      	subs	r3, r2, r3
 800d620:	687a      	ldr	r2, [r7, #4]
 800d622:	429a      	cmp	r2, r3
 800d624:	d8f0      	bhi.n	800d608 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800d626:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d62a:	4618      	mov	r0, r3
 800d62c:	3710      	adds	r7, #16
 800d62e:	46bd      	mov	sp, r7
 800d630:	bd80      	pop	{r7, pc}
	...

0800d634 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d634:	b580      	push	{r7, lr}
 800d636:	b082      	sub	sp, #8
 800d638:	af00      	add	r7, sp, #0
 800d63a:	4603      	mov	r3, r0
 800d63c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d63e:	4b0b      	ldr	r3, [pc, #44]	; (800d66c <SD_CheckStatus+0x38>)
 800d640:	2201      	movs	r2, #1
 800d642:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800d644:	f7ff ff6c 	bl	800d520 <BSP_SD_GetCardState>
 800d648:	4603      	mov	r3, r0
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d107      	bne.n	800d65e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d64e:	4b07      	ldr	r3, [pc, #28]	; (800d66c <SD_CheckStatus+0x38>)
 800d650:	781b      	ldrb	r3, [r3, #0]
 800d652:	b2db      	uxtb	r3, r3
 800d654:	f023 0301 	bic.w	r3, r3, #1
 800d658:	b2da      	uxtb	r2, r3
 800d65a:	4b04      	ldr	r3, [pc, #16]	; (800d66c <SD_CheckStatus+0x38>)
 800d65c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d65e:	4b03      	ldr	r3, [pc, #12]	; (800d66c <SD_CheckStatus+0x38>)
 800d660:	781b      	ldrb	r3, [r3, #0]
 800d662:	b2db      	uxtb	r3, r3
}
 800d664:	4618      	mov	r0, r3
 800d666:	3708      	adds	r7, #8
 800d668:	46bd      	mov	sp, r7
 800d66a:	bd80      	pop	{r7, pc}
 800d66c:	2000001d 	.word	0x2000001d

0800d670 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b082      	sub	sp, #8
 800d674:	af00      	add	r7, sp, #0
 800d676:	4603      	mov	r3, r0
 800d678:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800d67a:	f7ff fef7 	bl	800d46c <BSP_SD_Init>
 800d67e:	4603      	mov	r3, r0
 800d680:	2b00      	cmp	r3, #0
 800d682:	d107      	bne.n	800d694 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800d684:	79fb      	ldrb	r3, [r7, #7]
 800d686:	4618      	mov	r0, r3
 800d688:	f7ff ffd4 	bl	800d634 <SD_CheckStatus>
 800d68c:	4603      	mov	r3, r0
 800d68e:	461a      	mov	r2, r3
 800d690:	4b04      	ldr	r3, [pc, #16]	; (800d6a4 <SD_initialize+0x34>)
 800d692:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800d694:	4b03      	ldr	r3, [pc, #12]	; (800d6a4 <SD_initialize+0x34>)
 800d696:	781b      	ldrb	r3, [r3, #0]
 800d698:	b2db      	uxtb	r3, r3
}
 800d69a:	4618      	mov	r0, r3
 800d69c:	3708      	adds	r7, #8
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	bd80      	pop	{r7, pc}
 800d6a2:	bf00      	nop
 800d6a4:	2000001d 	.word	0x2000001d

0800d6a8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b082      	sub	sp, #8
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	4603      	mov	r3, r0
 800d6b0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d6b2:	79fb      	ldrb	r3, [r7, #7]
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	f7ff ffbd 	bl	800d634 <SD_CheckStatus>
 800d6ba:	4603      	mov	r3, r0
}
 800d6bc:	4618      	mov	r0, r3
 800d6be:	3708      	adds	r7, #8
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	bd80      	pop	{r7, pc}

0800d6c4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b086      	sub	sp, #24
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	60b9      	str	r1, [r7, #8]
 800d6cc:	607a      	str	r2, [r7, #4]
 800d6ce:	603b      	str	r3, [r7, #0]
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d6d4:	2301      	movs	r3, #1
 800d6d6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d6d8:	f247 5030 	movw	r0, #30000	; 0x7530
 800d6dc:	f7ff ff8c 	bl	800d5f8 <SD_CheckStatusWithTimeout>
 800d6e0:	4603      	mov	r3, r0
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	da01      	bge.n	800d6ea <SD_read+0x26>
  {
    return res;
 800d6e6:	7dfb      	ldrb	r3, [r7, #23]
 800d6e8:	e03b      	b.n	800d762 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800d6ea:	683a      	ldr	r2, [r7, #0]
 800d6ec:	6879      	ldr	r1, [r7, #4]
 800d6ee:	68b8      	ldr	r0, [r7, #8]
 800d6f0:	f7ff fee2 	bl	800d4b8 <BSP_SD_ReadBlocks_DMA>
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d132      	bne.n	800d760 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800d6fa:	4b1c      	ldr	r3, [pc, #112]	; (800d76c <SD_read+0xa8>)
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800d700:	f7f9 f8b6 	bl	8006870 <HAL_GetTick>
 800d704:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800d706:	bf00      	nop
 800d708:	4b18      	ldr	r3, [pc, #96]	; (800d76c <SD_read+0xa8>)
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d108      	bne.n	800d722 <SD_read+0x5e>
 800d710:	f7f9 f8ae 	bl	8006870 <HAL_GetTick>
 800d714:	4602      	mov	r2, r0
 800d716:	693b      	ldr	r3, [r7, #16]
 800d718:	1ad3      	subs	r3, r2, r3
 800d71a:	f247 522f 	movw	r2, #29999	; 0x752f
 800d71e:	4293      	cmp	r3, r2
 800d720:	d9f2      	bls.n	800d708 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800d722:	4b12      	ldr	r3, [pc, #72]	; (800d76c <SD_read+0xa8>)
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d102      	bne.n	800d730 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800d72a:	2301      	movs	r3, #1
 800d72c:	75fb      	strb	r3, [r7, #23]
 800d72e:	e017      	b.n	800d760 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800d730:	4b0e      	ldr	r3, [pc, #56]	; (800d76c <SD_read+0xa8>)
 800d732:	2200      	movs	r2, #0
 800d734:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800d736:	f7f9 f89b 	bl	8006870 <HAL_GetTick>
 800d73a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d73c:	e007      	b.n	800d74e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d73e:	f7ff feef 	bl	800d520 <BSP_SD_GetCardState>
 800d742:	4603      	mov	r3, r0
 800d744:	2b00      	cmp	r3, #0
 800d746:	d102      	bne.n	800d74e <SD_read+0x8a>
          {
            res = RES_OK;
 800d748:	2300      	movs	r3, #0
 800d74a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800d74c:	e008      	b.n	800d760 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d74e:	f7f9 f88f 	bl	8006870 <HAL_GetTick>
 800d752:	4602      	mov	r2, r0
 800d754:	693b      	ldr	r3, [r7, #16]
 800d756:	1ad3      	subs	r3, r2, r3
 800d758:	f247 522f 	movw	r2, #29999	; 0x752f
 800d75c:	4293      	cmp	r3, r2
 800d75e:	d9ee      	bls.n	800d73e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800d760:	7dfb      	ldrb	r3, [r7, #23]
}
 800d762:	4618      	mov	r0, r3
 800d764:	3718      	adds	r7, #24
 800d766:	46bd      	mov	sp, r7
 800d768:	bd80      	pop	{r7, pc}
 800d76a:	bf00      	nop
 800d76c:	20007ac4 	.word	0x20007ac4

0800d770 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d770:	b580      	push	{r7, lr}
 800d772:	b086      	sub	sp, #24
 800d774:	af00      	add	r7, sp, #0
 800d776:	60b9      	str	r1, [r7, #8]
 800d778:	607a      	str	r2, [r7, #4]
 800d77a:	603b      	str	r3, [r7, #0]
 800d77c:	4603      	mov	r3, r0
 800d77e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d780:	2301      	movs	r3, #1
 800d782:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800d784:	4b24      	ldr	r3, [pc, #144]	; (800d818 <SD_write+0xa8>)
 800d786:	2200      	movs	r2, #0
 800d788:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d78a:	f247 5030 	movw	r0, #30000	; 0x7530
 800d78e:	f7ff ff33 	bl	800d5f8 <SD_CheckStatusWithTimeout>
 800d792:	4603      	mov	r3, r0
 800d794:	2b00      	cmp	r3, #0
 800d796:	da01      	bge.n	800d79c <SD_write+0x2c>
  {
    return res;
 800d798:	7dfb      	ldrb	r3, [r7, #23]
 800d79a:	e038      	b.n	800d80e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800d79c:	683a      	ldr	r2, [r7, #0]
 800d79e:	6879      	ldr	r1, [r7, #4]
 800d7a0:	68b8      	ldr	r0, [r7, #8]
 800d7a2:	f7ff fea3 	bl	800d4ec <BSP_SD_WriteBlocks_DMA>
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d12f      	bne.n	800d80c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800d7ac:	f7f9 f860 	bl	8006870 <HAL_GetTick>
 800d7b0:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800d7b2:	bf00      	nop
 800d7b4:	4b18      	ldr	r3, [pc, #96]	; (800d818 <SD_write+0xa8>)
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d108      	bne.n	800d7ce <SD_write+0x5e>
 800d7bc:	f7f9 f858 	bl	8006870 <HAL_GetTick>
 800d7c0:	4602      	mov	r2, r0
 800d7c2:	693b      	ldr	r3, [r7, #16]
 800d7c4:	1ad3      	subs	r3, r2, r3
 800d7c6:	f247 522f 	movw	r2, #29999	; 0x752f
 800d7ca:	4293      	cmp	r3, r2
 800d7cc:	d9f2      	bls.n	800d7b4 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800d7ce:	4b12      	ldr	r3, [pc, #72]	; (800d818 <SD_write+0xa8>)
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d102      	bne.n	800d7dc <SD_write+0x6c>
      {
        res = RES_ERROR;
 800d7d6:	2301      	movs	r3, #1
 800d7d8:	75fb      	strb	r3, [r7, #23]
 800d7da:	e017      	b.n	800d80c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800d7dc:	4b0e      	ldr	r3, [pc, #56]	; (800d818 <SD_write+0xa8>)
 800d7de:	2200      	movs	r2, #0
 800d7e0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800d7e2:	f7f9 f845 	bl	8006870 <HAL_GetTick>
 800d7e6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d7e8:	e007      	b.n	800d7fa <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d7ea:	f7ff fe99 	bl	800d520 <BSP_SD_GetCardState>
 800d7ee:	4603      	mov	r3, r0
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d102      	bne.n	800d7fa <SD_write+0x8a>
          {
            res = RES_OK;
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	75fb      	strb	r3, [r7, #23]
            break;
 800d7f8:	e008      	b.n	800d80c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d7fa:	f7f9 f839 	bl	8006870 <HAL_GetTick>
 800d7fe:	4602      	mov	r2, r0
 800d800:	693b      	ldr	r3, [r7, #16]
 800d802:	1ad3      	subs	r3, r2, r3
 800d804:	f247 522f 	movw	r2, #29999	; 0x752f
 800d808:	4293      	cmp	r3, r2
 800d80a:	d9ee      	bls.n	800d7ea <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800d80c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d80e:	4618      	mov	r0, r3
 800d810:	3718      	adds	r7, #24
 800d812:	46bd      	mov	sp, r7
 800d814:	bd80      	pop	{r7, pc}
 800d816:	bf00      	nop
 800d818:	20007ac0 	.word	0x20007ac0

0800d81c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b08c      	sub	sp, #48	; 0x30
 800d820:	af00      	add	r7, sp, #0
 800d822:	4603      	mov	r3, r0
 800d824:	603a      	str	r2, [r7, #0]
 800d826:	71fb      	strb	r3, [r7, #7]
 800d828:	460b      	mov	r3, r1
 800d82a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d82c:	2301      	movs	r3, #1
 800d82e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d832:	4b25      	ldr	r3, [pc, #148]	; (800d8c8 <SD_ioctl+0xac>)
 800d834:	781b      	ldrb	r3, [r3, #0]
 800d836:	b2db      	uxtb	r3, r3
 800d838:	f003 0301 	and.w	r3, r3, #1
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d001      	beq.n	800d844 <SD_ioctl+0x28>
 800d840:	2303      	movs	r3, #3
 800d842:	e03c      	b.n	800d8be <SD_ioctl+0xa2>

  switch (cmd)
 800d844:	79bb      	ldrb	r3, [r7, #6]
 800d846:	2b03      	cmp	r3, #3
 800d848:	d834      	bhi.n	800d8b4 <SD_ioctl+0x98>
 800d84a:	a201      	add	r2, pc, #4	; (adr r2, 800d850 <SD_ioctl+0x34>)
 800d84c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d850:	0800d861 	.word	0x0800d861
 800d854:	0800d869 	.word	0x0800d869
 800d858:	0800d881 	.word	0x0800d881
 800d85c:	0800d89b 	.word	0x0800d89b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d860:	2300      	movs	r3, #0
 800d862:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d866:	e028      	b.n	800d8ba <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d868:	f107 030c 	add.w	r3, r7, #12
 800d86c:	4618      	mov	r0, r3
 800d86e:	f7ff fe67 	bl	800d540 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d874:	683b      	ldr	r3, [r7, #0]
 800d876:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d878:	2300      	movs	r3, #0
 800d87a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d87e:	e01c      	b.n	800d8ba <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d880:	f107 030c 	add.w	r3, r7, #12
 800d884:	4618      	mov	r0, r3
 800d886:	f7ff fe5b 	bl	800d540 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d88a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d88c:	b29a      	uxth	r2, r3
 800d88e:	683b      	ldr	r3, [r7, #0]
 800d890:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d892:	2300      	movs	r3, #0
 800d894:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d898:	e00f      	b.n	800d8ba <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d89a:	f107 030c 	add.w	r3, r7, #12
 800d89e:	4618      	mov	r0, r3
 800d8a0:	f7ff fe4e 	bl	800d540 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8a6:	0a5a      	lsrs	r2, r3, #9
 800d8a8:	683b      	ldr	r3, [r7, #0]
 800d8aa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d8b2:	e002      	b.n	800d8ba <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d8b4:	2304      	movs	r3, #4
 800d8b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800d8ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d8be:	4618      	mov	r0, r3
 800d8c0:	3730      	adds	r7, #48	; 0x30
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	bd80      	pop	{r7, pc}
 800d8c6:	bf00      	nop
 800d8c8:	2000001d 	.word	0x2000001d

0800d8cc <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800d8cc:	b480      	push	{r7}
 800d8ce:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800d8d0:	4b03      	ldr	r3, [pc, #12]	; (800d8e0 <BSP_SD_WriteCpltCallback+0x14>)
 800d8d2:	2201      	movs	r2, #1
 800d8d4:	601a      	str	r2, [r3, #0]
}
 800d8d6:	bf00      	nop
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8de:	4770      	bx	lr
 800d8e0:	20007ac0 	.word	0x20007ac0

0800d8e4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800d8e4:	b480      	push	{r7}
 800d8e6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800d8e8:	4b03      	ldr	r3, [pc, #12]	; (800d8f8 <BSP_SD_ReadCpltCallback+0x14>)
 800d8ea:	2201      	movs	r2, #1
 800d8ec:	601a      	str	r2, [r3, #0]
}
 800d8ee:	bf00      	nop
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f6:	4770      	bx	lr
 800d8f8:	20007ac4 	.word	0x20007ac4

0800d8fc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b084      	sub	sp, #16
 800d900:	af00      	add	r7, sp, #0
 800d902:	4603      	mov	r3, r0
 800d904:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d906:	79fb      	ldrb	r3, [r7, #7]
 800d908:	4a08      	ldr	r2, [pc, #32]	; (800d92c <disk_status+0x30>)
 800d90a:	009b      	lsls	r3, r3, #2
 800d90c:	4413      	add	r3, r2
 800d90e:	685b      	ldr	r3, [r3, #4]
 800d910:	685b      	ldr	r3, [r3, #4]
 800d912:	79fa      	ldrb	r2, [r7, #7]
 800d914:	4905      	ldr	r1, [pc, #20]	; (800d92c <disk_status+0x30>)
 800d916:	440a      	add	r2, r1
 800d918:	7a12      	ldrb	r2, [r2, #8]
 800d91a:	4610      	mov	r0, r2
 800d91c:	4798      	blx	r3
 800d91e:	4603      	mov	r3, r0
 800d920:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d922:	7bfb      	ldrb	r3, [r7, #15]
}
 800d924:	4618      	mov	r0, r3
 800d926:	3710      	adds	r7, #16
 800d928:	46bd      	mov	sp, r7
 800d92a:	bd80      	pop	{r7, pc}
 800d92c:	20007af0 	.word	0x20007af0

0800d930 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d930:	b580      	push	{r7, lr}
 800d932:	b084      	sub	sp, #16
 800d934:	af00      	add	r7, sp, #0
 800d936:	4603      	mov	r3, r0
 800d938:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d93a:	2300      	movs	r3, #0
 800d93c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d93e:	79fb      	ldrb	r3, [r7, #7]
 800d940:	4a0d      	ldr	r2, [pc, #52]	; (800d978 <disk_initialize+0x48>)
 800d942:	5cd3      	ldrb	r3, [r2, r3]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d111      	bne.n	800d96c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800d948:	79fb      	ldrb	r3, [r7, #7]
 800d94a:	4a0b      	ldr	r2, [pc, #44]	; (800d978 <disk_initialize+0x48>)
 800d94c:	2101      	movs	r1, #1
 800d94e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d950:	79fb      	ldrb	r3, [r7, #7]
 800d952:	4a09      	ldr	r2, [pc, #36]	; (800d978 <disk_initialize+0x48>)
 800d954:	009b      	lsls	r3, r3, #2
 800d956:	4413      	add	r3, r2
 800d958:	685b      	ldr	r3, [r3, #4]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	79fa      	ldrb	r2, [r7, #7]
 800d95e:	4906      	ldr	r1, [pc, #24]	; (800d978 <disk_initialize+0x48>)
 800d960:	440a      	add	r2, r1
 800d962:	7a12      	ldrb	r2, [r2, #8]
 800d964:	4610      	mov	r0, r2
 800d966:	4798      	blx	r3
 800d968:	4603      	mov	r3, r0
 800d96a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800d96c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d96e:	4618      	mov	r0, r3
 800d970:	3710      	adds	r7, #16
 800d972:	46bd      	mov	sp, r7
 800d974:	bd80      	pop	{r7, pc}
 800d976:	bf00      	nop
 800d978:	20007af0 	.word	0x20007af0

0800d97c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d97c:	b590      	push	{r4, r7, lr}
 800d97e:	b087      	sub	sp, #28
 800d980:	af00      	add	r7, sp, #0
 800d982:	60b9      	str	r1, [r7, #8]
 800d984:	607a      	str	r2, [r7, #4]
 800d986:	603b      	str	r3, [r7, #0]
 800d988:	4603      	mov	r3, r0
 800d98a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d98c:	7bfb      	ldrb	r3, [r7, #15]
 800d98e:	4a0a      	ldr	r2, [pc, #40]	; (800d9b8 <disk_read+0x3c>)
 800d990:	009b      	lsls	r3, r3, #2
 800d992:	4413      	add	r3, r2
 800d994:	685b      	ldr	r3, [r3, #4]
 800d996:	689c      	ldr	r4, [r3, #8]
 800d998:	7bfb      	ldrb	r3, [r7, #15]
 800d99a:	4a07      	ldr	r2, [pc, #28]	; (800d9b8 <disk_read+0x3c>)
 800d99c:	4413      	add	r3, r2
 800d99e:	7a18      	ldrb	r0, [r3, #8]
 800d9a0:	683b      	ldr	r3, [r7, #0]
 800d9a2:	687a      	ldr	r2, [r7, #4]
 800d9a4:	68b9      	ldr	r1, [r7, #8]
 800d9a6:	47a0      	blx	r4
 800d9a8:	4603      	mov	r3, r0
 800d9aa:	75fb      	strb	r3, [r7, #23]
  return res;
 800d9ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	371c      	adds	r7, #28
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	bd90      	pop	{r4, r7, pc}
 800d9b6:	bf00      	nop
 800d9b8:	20007af0 	.word	0x20007af0

0800d9bc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d9bc:	b590      	push	{r4, r7, lr}
 800d9be:	b087      	sub	sp, #28
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	60b9      	str	r1, [r7, #8]
 800d9c4:	607a      	str	r2, [r7, #4]
 800d9c6:	603b      	str	r3, [r7, #0]
 800d9c8:	4603      	mov	r3, r0
 800d9ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d9cc:	7bfb      	ldrb	r3, [r7, #15]
 800d9ce:	4a0a      	ldr	r2, [pc, #40]	; (800d9f8 <disk_write+0x3c>)
 800d9d0:	009b      	lsls	r3, r3, #2
 800d9d2:	4413      	add	r3, r2
 800d9d4:	685b      	ldr	r3, [r3, #4]
 800d9d6:	68dc      	ldr	r4, [r3, #12]
 800d9d8:	7bfb      	ldrb	r3, [r7, #15]
 800d9da:	4a07      	ldr	r2, [pc, #28]	; (800d9f8 <disk_write+0x3c>)
 800d9dc:	4413      	add	r3, r2
 800d9de:	7a18      	ldrb	r0, [r3, #8]
 800d9e0:	683b      	ldr	r3, [r7, #0]
 800d9e2:	687a      	ldr	r2, [r7, #4]
 800d9e4:	68b9      	ldr	r1, [r7, #8]
 800d9e6:	47a0      	blx	r4
 800d9e8:	4603      	mov	r3, r0
 800d9ea:	75fb      	strb	r3, [r7, #23]
  return res;
 800d9ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	371c      	adds	r7, #28
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	bd90      	pop	{r4, r7, pc}
 800d9f6:	bf00      	nop
 800d9f8:	20007af0 	.word	0x20007af0

0800d9fc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b084      	sub	sp, #16
 800da00:	af00      	add	r7, sp, #0
 800da02:	4603      	mov	r3, r0
 800da04:	603a      	str	r2, [r7, #0]
 800da06:	71fb      	strb	r3, [r7, #7]
 800da08:	460b      	mov	r3, r1
 800da0a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800da0c:	79fb      	ldrb	r3, [r7, #7]
 800da0e:	4a09      	ldr	r2, [pc, #36]	; (800da34 <disk_ioctl+0x38>)
 800da10:	009b      	lsls	r3, r3, #2
 800da12:	4413      	add	r3, r2
 800da14:	685b      	ldr	r3, [r3, #4]
 800da16:	691b      	ldr	r3, [r3, #16]
 800da18:	79fa      	ldrb	r2, [r7, #7]
 800da1a:	4906      	ldr	r1, [pc, #24]	; (800da34 <disk_ioctl+0x38>)
 800da1c:	440a      	add	r2, r1
 800da1e:	7a10      	ldrb	r0, [r2, #8]
 800da20:	79b9      	ldrb	r1, [r7, #6]
 800da22:	683a      	ldr	r2, [r7, #0]
 800da24:	4798      	blx	r3
 800da26:	4603      	mov	r3, r0
 800da28:	73fb      	strb	r3, [r7, #15]
  return res;
 800da2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800da2c:	4618      	mov	r0, r3
 800da2e:	3710      	adds	r7, #16
 800da30:	46bd      	mov	sp, r7
 800da32:	bd80      	pop	{r7, pc}
 800da34:	20007af0 	.word	0x20007af0

0800da38 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800da38:	b480      	push	{r7}
 800da3a:	b085      	sub	sp, #20
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	3301      	adds	r3, #1
 800da44:	781b      	ldrb	r3, [r3, #0]
 800da46:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800da48:	89fb      	ldrh	r3, [r7, #14]
 800da4a:	021b      	lsls	r3, r3, #8
 800da4c:	b21a      	sxth	r2, r3
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	781b      	ldrb	r3, [r3, #0]
 800da52:	b21b      	sxth	r3, r3
 800da54:	4313      	orrs	r3, r2
 800da56:	b21b      	sxth	r3, r3
 800da58:	81fb      	strh	r3, [r7, #14]
	return rv;
 800da5a:	89fb      	ldrh	r3, [r7, #14]
}
 800da5c:	4618      	mov	r0, r3
 800da5e:	3714      	adds	r7, #20
 800da60:	46bd      	mov	sp, r7
 800da62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da66:	4770      	bx	lr

0800da68 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800da68:	b480      	push	{r7}
 800da6a:	b085      	sub	sp, #20
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	3303      	adds	r3, #3
 800da74:	781b      	ldrb	r3, [r3, #0]
 800da76:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	021b      	lsls	r3, r3, #8
 800da7c:	687a      	ldr	r2, [r7, #4]
 800da7e:	3202      	adds	r2, #2
 800da80:	7812      	ldrb	r2, [r2, #0]
 800da82:	4313      	orrs	r3, r2
 800da84:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	021b      	lsls	r3, r3, #8
 800da8a:	687a      	ldr	r2, [r7, #4]
 800da8c:	3201      	adds	r2, #1
 800da8e:	7812      	ldrb	r2, [r2, #0]
 800da90:	4313      	orrs	r3, r2
 800da92:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	021b      	lsls	r3, r3, #8
 800da98:	687a      	ldr	r2, [r7, #4]
 800da9a:	7812      	ldrb	r2, [r2, #0]
 800da9c:	4313      	orrs	r3, r2
 800da9e:	60fb      	str	r3, [r7, #12]
	return rv;
 800daa0:	68fb      	ldr	r3, [r7, #12]
}
 800daa2:	4618      	mov	r0, r3
 800daa4:	3714      	adds	r7, #20
 800daa6:	46bd      	mov	sp, r7
 800daa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daac:	4770      	bx	lr

0800daae <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800daae:	b480      	push	{r7}
 800dab0:	b083      	sub	sp, #12
 800dab2:	af00      	add	r7, sp, #0
 800dab4:	6078      	str	r0, [r7, #4]
 800dab6:	460b      	mov	r3, r1
 800dab8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	1c5a      	adds	r2, r3, #1
 800dabe:	607a      	str	r2, [r7, #4]
 800dac0:	887a      	ldrh	r2, [r7, #2]
 800dac2:	b2d2      	uxtb	r2, r2
 800dac4:	701a      	strb	r2, [r3, #0]
 800dac6:	887b      	ldrh	r3, [r7, #2]
 800dac8:	0a1b      	lsrs	r3, r3, #8
 800daca:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	1c5a      	adds	r2, r3, #1
 800dad0:	607a      	str	r2, [r7, #4]
 800dad2:	887a      	ldrh	r2, [r7, #2]
 800dad4:	b2d2      	uxtb	r2, r2
 800dad6:	701a      	strb	r2, [r3, #0]
}
 800dad8:	bf00      	nop
 800dada:	370c      	adds	r7, #12
 800dadc:	46bd      	mov	sp, r7
 800dade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae2:	4770      	bx	lr

0800dae4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800dae4:	b480      	push	{r7}
 800dae6:	b083      	sub	sp, #12
 800dae8:	af00      	add	r7, sp, #0
 800daea:	6078      	str	r0, [r7, #4]
 800daec:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	1c5a      	adds	r2, r3, #1
 800daf2:	607a      	str	r2, [r7, #4]
 800daf4:	683a      	ldr	r2, [r7, #0]
 800daf6:	b2d2      	uxtb	r2, r2
 800daf8:	701a      	strb	r2, [r3, #0]
 800dafa:	683b      	ldr	r3, [r7, #0]
 800dafc:	0a1b      	lsrs	r3, r3, #8
 800dafe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	1c5a      	adds	r2, r3, #1
 800db04:	607a      	str	r2, [r7, #4]
 800db06:	683a      	ldr	r2, [r7, #0]
 800db08:	b2d2      	uxtb	r2, r2
 800db0a:	701a      	strb	r2, [r3, #0]
 800db0c:	683b      	ldr	r3, [r7, #0]
 800db0e:	0a1b      	lsrs	r3, r3, #8
 800db10:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	1c5a      	adds	r2, r3, #1
 800db16:	607a      	str	r2, [r7, #4]
 800db18:	683a      	ldr	r2, [r7, #0]
 800db1a:	b2d2      	uxtb	r2, r2
 800db1c:	701a      	strb	r2, [r3, #0]
 800db1e:	683b      	ldr	r3, [r7, #0]
 800db20:	0a1b      	lsrs	r3, r3, #8
 800db22:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	1c5a      	adds	r2, r3, #1
 800db28:	607a      	str	r2, [r7, #4]
 800db2a:	683a      	ldr	r2, [r7, #0]
 800db2c:	b2d2      	uxtb	r2, r2
 800db2e:	701a      	strb	r2, [r3, #0]
}
 800db30:	bf00      	nop
 800db32:	370c      	adds	r7, #12
 800db34:	46bd      	mov	sp, r7
 800db36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3a:	4770      	bx	lr

0800db3c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800db3c:	b480      	push	{r7}
 800db3e:	b087      	sub	sp, #28
 800db40:	af00      	add	r7, sp, #0
 800db42:	60f8      	str	r0, [r7, #12]
 800db44:	60b9      	str	r1, [r7, #8]
 800db46:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800db4c:	68bb      	ldr	r3, [r7, #8]
 800db4e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d00d      	beq.n	800db72 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800db56:	693a      	ldr	r2, [r7, #16]
 800db58:	1c53      	adds	r3, r2, #1
 800db5a:	613b      	str	r3, [r7, #16]
 800db5c:	697b      	ldr	r3, [r7, #20]
 800db5e:	1c59      	adds	r1, r3, #1
 800db60:	6179      	str	r1, [r7, #20]
 800db62:	7812      	ldrb	r2, [r2, #0]
 800db64:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	3b01      	subs	r3, #1
 800db6a:	607b      	str	r3, [r7, #4]
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d1f1      	bne.n	800db56 <mem_cpy+0x1a>
	}
}
 800db72:	bf00      	nop
 800db74:	371c      	adds	r7, #28
 800db76:	46bd      	mov	sp, r7
 800db78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db7c:	4770      	bx	lr

0800db7e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800db7e:	b480      	push	{r7}
 800db80:	b087      	sub	sp, #28
 800db82:	af00      	add	r7, sp, #0
 800db84:	60f8      	str	r0, [r7, #12]
 800db86:	60b9      	str	r1, [r7, #8]
 800db88:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800db8e:	697b      	ldr	r3, [r7, #20]
 800db90:	1c5a      	adds	r2, r3, #1
 800db92:	617a      	str	r2, [r7, #20]
 800db94:	68ba      	ldr	r2, [r7, #8]
 800db96:	b2d2      	uxtb	r2, r2
 800db98:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	3b01      	subs	r3, #1
 800db9e:	607b      	str	r3, [r7, #4]
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d1f3      	bne.n	800db8e <mem_set+0x10>
}
 800dba6:	bf00      	nop
 800dba8:	bf00      	nop
 800dbaa:	371c      	adds	r7, #28
 800dbac:	46bd      	mov	sp, r7
 800dbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb2:	4770      	bx	lr

0800dbb4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800dbb4:	b480      	push	{r7}
 800dbb6:	b089      	sub	sp, #36	; 0x24
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	60f8      	str	r0, [r7, #12]
 800dbbc:	60b9      	str	r1, [r7, #8]
 800dbbe:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	61fb      	str	r3, [r7, #28]
 800dbc4:	68bb      	ldr	r3, [r7, #8]
 800dbc6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800dbc8:	2300      	movs	r3, #0
 800dbca:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800dbcc:	69fb      	ldr	r3, [r7, #28]
 800dbce:	1c5a      	adds	r2, r3, #1
 800dbd0:	61fa      	str	r2, [r7, #28]
 800dbd2:	781b      	ldrb	r3, [r3, #0]
 800dbd4:	4619      	mov	r1, r3
 800dbd6:	69bb      	ldr	r3, [r7, #24]
 800dbd8:	1c5a      	adds	r2, r3, #1
 800dbda:	61ba      	str	r2, [r7, #24]
 800dbdc:	781b      	ldrb	r3, [r3, #0]
 800dbde:	1acb      	subs	r3, r1, r3
 800dbe0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	3b01      	subs	r3, #1
 800dbe6:	607b      	str	r3, [r7, #4]
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d002      	beq.n	800dbf4 <mem_cmp+0x40>
 800dbee:	697b      	ldr	r3, [r7, #20]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d0eb      	beq.n	800dbcc <mem_cmp+0x18>

	return r;
 800dbf4:	697b      	ldr	r3, [r7, #20]
}
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	3724      	adds	r7, #36	; 0x24
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc00:	4770      	bx	lr

0800dc02 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800dc02:	b480      	push	{r7}
 800dc04:	b083      	sub	sp, #12
 800dc06:	af00      	add	r7, sp, #0
 800dc08:	6078      	str	r0, [r7, #4]
 800dc0a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800dc0c:	e002      	b.n	800dc14 <chk_chr+0x12>
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	3301      	adds	r3, #1
 800dc12:	607b      	str	r3, [r7, #4]
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	781b      	ldrb	r3, [r3, #0]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d005      	beq.n	800dc28 <chk_chr+0x26>
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	781b      	ldrb	r3, [r3, #0]
 800dc20:	461a      	mov	r2, r3
 800dc22:	683b      	ldr	r3, [r7, #0]
 800dc24:	4293      	cmp	r3, r2
 800dc26:	d1f2      	bne.n	800dc0e <chk_chr+0xc>
	return *str;
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	781b      	ldrb	r3, [r3, #0]
}
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	370c      	adds	r7, #12
 800dc30:	46bd      	mov	sp, r7
 800dc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc36:	4770      	bx	lr

0800dc38 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800dc38:	b480      	push	{r7}
 800dc3a:	b085      	sub	sp, #20
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
 800dc40:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800dc42:	2300      	movs	r3, #0
 800dc44:	60bb      	str	r3, [r7, #8]
 800dc46:	68bb      	ldr	r3, [r7, #8]
 800dc48:	60fb      	str	r3, [r7, #12]
 800dc4a:	e029      	b.n	800dca0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800dc4c:	4a27      	ldr	r2, [pc, #156]	; (800dcec <chk_lock+0xb4>)
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	011b      	lsls	r3, r3, #4
 800dc52:	4413      	add	r3, r2
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d01d      	beq.n	800dc96 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800dc5a:	4a24      	ldr	r2, [pc, #144]	; (800dcec <chk_lock+0xb4>)
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	011b      	lsls	r3, r3, #4
 800dc60:	4413      	add	r3, r2
 800dc62:	681a      	ldr	r2, [r3, #0]
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	429a      	cmp	r2, r3
 800dc6a:	d116      	bne.n	800dc9a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800dc6c:	4a1f      	ldr	r2, [pc, #124]	; (800dcec <chk_lock+0xb4>)
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	011b      	lsls	r3, r3, #4
 800dc72:	4413      	add	r3, r2
 800dc74:	3304      	adds	r3, #4
 800dc76:	681a      	ldr	r2, [r3, #0]
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800dc7c:	429a      	cmp	r2, r3
 800dc7e:	d10c      	bne.n	800dc9a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800dc80:	4a1a      	ldr	r2, [pc, #104]	; (800dcec <chk_lock+0xb4>)
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	011b      	lsls	r3, r3, #4
 800dc86:	4413      	add	r3, r2
 800dc88:	3308      	adds	r3, #8
 800dc8a:	681a      	ldr	r2, [r3, #0]
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800dc90:	429a      	cmp	r2, r3
 800dc92:	d102      	bne.n	800dc9a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800dc94:	e007      	b.n	800dca6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800dc96:	2301      	movs	r3, #1
 800dc98:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	3301      	adds	r3, #1
 800dc9e:	60fb      	str	r3, [r7, #12]
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	2b01      	cmp	r3, #1
 800dca4:	d9d2      	bls.n	800dc4c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	2b02      	cmp	r3, #2
 800dcaa:	d109      	bne.n	800dcc0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800dcac:	68bb      	ldr	r3, [r7, #8]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d102      	bne.n	800dcb8 <chk_lock+0x80>
 800dcb2:	683b      	ldr	r3, [r7, #0]
 800dcb4:	2b02      	cmp	r3, #2
 800dcb6:	d101      	bne.n	800dcbc <chk_lock+0x84>
 800dcb8:	2300      	movs	r3, #0
 800dcba:	e010      	b.n	800dcde <chk_lock+0xa6>
 800dcbc:	2312      	movs	r3, #18
 800dcbe:	e00e      	b.n	800dcde <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800dcc0:	683b      	ldr	r3, [r7, #0]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d108      	bne.n	800dcd8 <chk_lock+0xa0>
 800dcc6:	4a09      	ldr	r2, [pc, #36]	; (800dcec <chk_lock+0xb4>)
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	011b      	lsls	r3, r3, #4
 800dccc:	4413      	add	r3, r2
 800dcce:	330c      	adds	r3, #12
 800dcd0:	881b      	ldrh	r3, [r3, #0]
 800dcd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dcd6:	d101      	bne.n	800dcdc <chk_lock+0xa4>
 800dcd8:	2310      	movs	r3, #16
 800dcda:	e000      	b.n	800dcde <chk_lock+0xa6>
 800dcdc:	2300      	movs	r3, #0
}
 800dcde:	4618      	mov	r0, r3
 800dce0:	3714      	adds	r7, #20
 800dce2:	46bd      	mov	sp, r7
 800dce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce8:	4770      	bx	lr
 800dcea:	bf00      	nop
 800dcec:	20007ad0 	.word	0x20007ad0

0800dcf0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800dcf0:	b480      	push	{r7}
 800dcf2:	b083      	sub	sp, #12
 800dcf4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	607b      	str	r3, [r7, #4]
 800dcfa:	e002      	b.n	800dd02 <enq_lock+0x12>
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	3301      	adds	r3, #1
 800dd00:	607b      	str	r3, [r7, #4]
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	2b01      	cmp	r3, #1
 800dd06:	d806      	bhi.n	800dd16 <enq_lock+0x26>
 800dd08:	4a09      	ldr	r2, [pc, #36]	; (800dd30 <enq_lock+0x40>)
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	011b      	lsls	r3, r3, #4
 800dd0e:	4413      	add	r3, r2
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d1f2      	bne.n	800dcfc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	2b02      	cmp	r3, #2
 800dd1a:	bf14      	ite	ne
 800dd1c:	2301      	movne	r3, #1
 800dd1e:	2300      	moveq	r3, #0
 800dd20:	b2db      	uxtb	r3, r3
}
 800dd22:	4618      	mov	r0, r3
 800dd24:	370c      	adds	r7, #12
 800dd26:	46bd      	mov	sp, r7
 800dd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2c:	4770      	bx	lr
 800dd2e:	bf00      	nop
 800dd30:	20007ad0 	.word	0x20007ad0

0800dd34 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800dd34:	b480      	push	{r7}
 800dd36:	b085      	sub	sp, #20
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	6078      	str	r0, [r7, #4]
 800dd3c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800dd3e:	2300      	movs	r3, #0
 800dd40:	60fb      	str	r3, [r7, #12]
 800dd42:	e01f      	b.n	800dd84 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800dd44:	4a41      	ldr	r2, [pc, #260]	; (800de4c <inc_lock+0x118>)
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	011b      	lsls	r3, r3, #4
 800dd4a:	4413      	add	r3, r2
 800dd4c:	681a      	ldr	r2, [r3, #0]
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	429a      	cmp	r2, r3
 800dd54:	d113      	bne.n	800dd7e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800dd56:	4a3d      	ldr	r2, [pc, #244]	; (800de4c <inc_lock+0x118>)
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	011b      	lsls	r3, r3, #4
 800dd5c:	4413      	add	r3, r2
 800dd5e:	3304      	adds	r3, #4
 800dd60:	681a      	ldr	r2, [r3, #0]
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800dd66:	429a      	cmp	r2, r3
 800dd68:	d109      	bne.n	800dd7e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800dd6a:	4a38      	ldr	r2, [pc, #224]	; (800de4c <inc_lock+0x118>)
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	011b      	lsls	r3, r3, #4
 800dd70:	4413      	add	r3, r2
 800dd72:	3308      	adds	r3, #8
 800dd74:	681a      	ldr	r2, [r3, #0]
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800dd7a:	429a      	cmp	r2, r3
 800dd7c:	d006      	beq.n	800dd8c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	3301      	adds	r3, #1
 800dd82:	60fb      	str	r3, [r7, #12]
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	2b01      	cmp	r3, #1
 800dd88:	d9dc      	bls.n	800dd44 <inc_lock+0x10>
 800dd8a:	e000      	b.n	800dd8e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800dd8c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	2b02      	cmp	r3, #2
 800dd92:	d132      	bne.n	800ddfa <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800dd94:	2300      	movs	r3, #0
 800dd96:	60fb      	str	r3, [r7, #12]
 800dd98:	e002      	b.n	800dda0 <inc_lock+0x6c>
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	3301      	adds	r3, #1
 800dd9e:	60fb      	str	r3, [r7, #12]
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	2b01      	cmp	r3, #1
 800dda4:	d806      	bhi.n	800ddb4 <inc_lock+0x80>
 800dda6:	4a29      	ldr	r2, [pc, #164]	; (800de4c <inc_lock+0x118>)
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	011b      	lsls	r3, r3, #4
 800ddac:	4413      	add	r3, r2
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d1f2      	bne.n	800dd9a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	2b02      	cmp	r3, #2
 800ddb8:	d101      	bne.n	800ddbe <inc_lock+0x8a>
 800ddba:	2300      	movs	r3, #0
 800ddbc:	e040      	b.n	800de40 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	681a      	ldr	r2, [r3, #0]
 800ddc2:	4922      	ldr	r1, [pc, #136]	; (800de4c <inc_lock+0x118>)
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	011b      	lsls	r3, r3, #4
 800ddc8:	440b      	add	r3, r1
 800ddca:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	689a      	ldr	r2, [r3, #8]
 800ddd0:	491e      	ldr	r1, [pc, #120]	; (800de4c <inc_lock+0x118>)
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	011b      	lsls	r3, r3, #4
 800ddd6:	440b      	add	r3, r1
 800ddd8:	3304      	adds	r3, #4
 800ddda:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	695a      	ldr	r2, [r3, #20]
 800dde0:	491a      	ldr	r1, [pc, #104]	; (800de4c <inc_lock+0x118>)
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	011b      	lsls	r3, r3, #4
 800dde6:	440b      	add	r3, r1
 800dde8:	3308      	adds	r3, #8
 800ddea:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ddec:	4a17      	ldr	r2, [pc, #92]	; (800de4c <inc_lock+0x118>)
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	011b      	lsls	r3, r3, #4
 800ddf2:	4413      	add	r3, r2
 800ddf4:	330c      	adds	r3, #12
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ddfa:	683b      	ldr	r3, [r7, #0]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d009      	beq.n	800de14 <inc_lock+0xe0>
 800de00:	4a12      	ldr	r2, [pc, #72]	; (800de4c <inc_lock+0x118>)
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	011b      	lsls	r3, r3, #4
 800de06:	4413      	add	r3, r2
 800de08:	330c      	adds	r3, #12
 800de0a:	881b      	ldrh	r3, [r3, #0]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d001      	beq.n	800de14 <inc_lock+0xe0>
 800de10:	2300      	movs	r3, #0
 800de12:	e015      	b.n	800de40 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800de14:	683b      	ldr	r3, [r7, #0]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d108      	bne.n	800de2c <inc_lock+0xf8>
 800de1a:	4a0c      	ldr	r2, [pc, #48]	; (800de4c <inc_lock+0x118>)
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	011b      	lsls	r3, r3, #4
 800de20:	4413      	add	r3, r2
 800de22:	330c      	adds	r3, #12
 800de24:	881b      	ldrh	r3, [r3, #0]
 800de26:	3301      	adds	r3, #1
 800de28:	b29a      	uxth	r2, r3
 800de2a:	e001      	b.n	800de30 <inc_lock+0xfc>
 800de2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800de30:	4906      	ldr	r1, [pc, #24]	; (800de4c <inc_lock+0x118>)
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	011b      	lsls	r3, r3, #4
 800de36:	440b      	add	r3, r1
 800de38:	330c      	adds	r3, #12
 800de3a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	3301      	adds	r3, #1
}
 800de40:	4618      	mov	r0, r3
 800de42:	3714      	adds	r7, #20
 800de44:	46bd      	mov	sp, r7
 800de46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4a:	4770      	bx	lr
 800de4c:	20007ad0 	.word	0x20007ad0

0800de50 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800de50:	b480      	push	{r7}
 800de52:	b085      	sub	sp, #20
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	3b01      	subs	r3, #1
 800de5c:	607b      	str	r3, [r7, #4]
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	2b01      	cmp	r3, #1
 800de62:	d825      	bhi.n	800deb0 <dec_lock+0x60>
		n = Files[i].ctr;
 800de64:	4a17      	ldr	r2, [pc, #92]	; (800dec4 <dec_lock+0x74>)
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	011b      	lsls	r3, r3, #4
 800de6a:	4413      	add	r3, r2
 800de6c:	330c      	adds	r3, #12
 800de6e:	881b      	ldrh	r3, [r3, #0]
 800de70:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800de72:	89fb      	ldrh	r3, [r7, #14]
 800de74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800de78:	d101      	bne.n	800de7e <dec_lock+0x2e>
 800de7a:	2300      	movs	r3, #0
 800de7c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800de7e:	89fb      	ldrh	r3, [r7, #14]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d002      	beq.n	800de8a <dec_lock+0x3a>
 800de84:	89fb      	ldrh	r3, [r7, #14]
 800de86:	3b01      	subs	r3, #1
 800de88:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800de8a:	4a0e      	ldr	r2, [pc, #56]	; (800dec4 <dec_lock+0x74>)
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	011b      	lsls	r3, r3, #4
 800de90:	4413      	add	r3, r2
 800de92:	330c      	adds	r3, #12
 800de94:	89fa      	ldrh	r2, [r7, #14]
 800de96:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800de98:	89fb      	ldrh	r3, [r7, #14]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d105      	bne.n	800deaa <dec_lock+0x5a>
 800de9e:	4a09      	ldr	r2, [pc, #36]	; (800dec4 <dec_lock+0x74>)
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	011b      	lsls	r3, r3, #4
 800dea4:	4413      	add	r3, r2
 800dea6:	2200      	movs	r2, #0
 800dea8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800deaa:	2300      	movs	r3, #0
 800deac:	737b      	strb	r3, [r7, #13]
 800deae:	e001      	b.n	800deb4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800deb0:	2302      	movs	r3, #2
 800deb2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800deb4:	7b7b      	ldrb	r3, [r7, #13]
}
 800deb6:	4618      	mov	r0, r3
 800deb8:	3714      	adds	r7, #20
 800deba:	46bd      	mov	sp, r7
 800debc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec0:	4770      	bx	lr
 800dec2:	bf00      	nop
 800dec4:	20007ad0 	.word	0x20007ad0

0800dec8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800dec8:	b480      	push	{r7}
 800deca:	b085      	sub	sp, #20
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ded0:	2300      	movs	r3, #0
 800ded2:	60fb      	str	r3, [r7, #12]
 800ded4:	e010      	b.n	800def8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ded6:	4a0d      	ldr	r2, [pc, #52]	; (800df0c <clear_lock+0x44>)
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	011b      	lsls	r3, r3, #4
 800dedc:	4413      	add	r3, r2
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	687a      	ldr	r2, [r7, #4]
 800dee2:	429a      	cmp	r2, r3
 800dee4:	d105      	bne.n	800def2 <clear_lock+0x2a>
 800dee6:	4a09      	ldr	r2, [pc, #36]	; (800df0c <clear_lock+0x44>)
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	011b      	lsls	r3, r3, #4
 800deec:	4413      	add	r3, r2
 800deee:	2200      	movs	r2, #0
 800def0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	3301      	adds	r3, #1
 800def6:	60fb      	str	r3, [r7, #12]
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	2b01      	cmp	r3, #1
 800defc:	d9eb      	bls.n	800ded6 <clear_lock+0xe>
	}
}
 800defe:	bf00      	nop
 800df00:	bf00      	nop
 800df02:	3714      	adds	r7, #20
 800df04:	46bd      	mov	sp, r7
 800df06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0a:	4770      	bx	lr
 800df0c:	20007ad0 	.word	0x20007ad0

0800df10 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800df10:	b580      	push	{r7, lr}
 800df12:	b086      	sub	sp, #24
 800df14:	af00      	add	r7, sp, #0
 800df16:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800df18:	2300      	movs	r3, #0
 800df1a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	78db      	ldrb	r3, [r3, #3]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d034      	beq.n	800df8e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df28:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	7858      	ldrb	r0, [r3, #1]
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800df34:	2301      	movs	r3, #1
 800df36:	697a      	ldr	r2, [r7, #20]
 800df38:	f7ff fd40 	bl	800d9bc <disk_write>
 800df3c:	4603      	mov	r3, r0
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d002      	beq.n	800df48 <sync_window+0x38>
			res = FR_DISK_ERR;
 800df42:	2301      	movs	r3, #1
 800df44:	73fb      	strb	r3, [r7, #15]
 800df46:	e022      	b.n	800df8e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	2200      	movs	r2, #0
 800df4c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df52:	697a      	ldr	r2, [r7, #20]
 800df54:	1ad2      	subs	r2, r2, r3
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	69db      	ldr	r3, [r3, #28]
 800df5a:	429a      	cmp	r2, r3
 800df5c:	d217      	bcs.n	800df8e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	789b      	ldrb	r3, [r3, #2]
 800df62:	613b      	str	r3, [r7, #16]
 800df64:	e010      	b.n	800df88 <sync_window+0x78>
					wsect += fs->fsize;
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	69db      	ldr	r3, [r3, #28]
 800df6a:	697a      	ldr	r2, [r7, #20]
 800df6c:	4413      	add	r3, r2
 800df6e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	7858      	ldrb	r0, [r3, #1]
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800df7a:	2301      	movs	r3, #1
 800df7c:	697a      	ldr	r2, [r7, #20]
 800df7e:	f7ff fd1d 	bl	800d9bc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800df82:	693b      	ldr	r3, [r7, #16]
 800df84:	3b01      	subs	r3, #1
 800df86:	613b      	str	r3, [r7, #16]
 800df88:	693b      	ldr	r3, [r7, #16]
 800df8a:	2b01      	cmp	r3, #1
 800df8c:	d8eb      	bhi.n	800df66 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800df8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800df90:	4618      	mov	r0, r3
 800df92:	3718      	adds	r7, #24
 800df94:	46bd      	mov	sp, r7
 800df96:	bd80      	pop	{r7, pc}

0800df98 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800df98:	b580      	push	{r7, lr}
 800df9a:	b084      	sub	sp, #16
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	6078      	str	r0, [r7, #4]
 800dfa0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfaa:	683a      	ldr	r2, [r7, #0]
 800dfac:	429a      	cmp	r2, r3
 800dfae:	d01b      	beq.n	800dfe8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800dfb0:	6878      	ldr	r0, [r7, #4]
 800dfb2:	f7ff ffad 	bl	800df10 <sync_window>
 800dfb6:	4603      	mov	r3, r0
 800dfb8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800dfba:	7bfb      	ldrb	r3, [r7, #15]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d113      	bne.n	800dfe8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	7858      	ldrb	r0, [r3, #1]
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800dfca:	2301      	movs	r3, #1
 800dfcc:	683a      	ldr	r2, [r7, #0]
 800dfce:	f7ff fcd5 	bl	800d97c <disk_read>
 800dfd2:	4603      	mov	r3, r0
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d004      	beq.n	800dfe2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800dfd8:	f04f 33ff 	mov.w	r3, #4294967295
 800dfdc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800dfde:	2301      	movs	r3, #1
 800dfe0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	683a      	ldr	r2, [r7, #0]
 800dfe6:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800dfe8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfea:	4618      	mov	r0, r3
 800dfec:	3710      	adds	r7, #16
 800dfee:	46bd      	mov	sp, r7
 800dff0:	bd80      	pop	{r7, pc}
	...

0800dff4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b084      	sub	sp, #16
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800dffc:	6878      	ldr	r0, [r7, #4]
 800dffe:	f7ff ff87 	bl	800df10 <sync_window>
 800e002:	4603      	mov	r3, r0
 800e004:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e006:	7bfb      	ldrb	r3, [r7, #15]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d159      	bne.n	800e0c0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	781b      	ldrb	r3, [r3, #0]
 800e010:	2b03      	cmp	r3, #3
 800e012:	d149      	bne.n	800e0a8 <sync_fs+0xb4>
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	791b      	ldrb	r3, [r3, #4]
 800e018:	2b01      	cmp	r3, #1
 800e01a:	d145      	bne.n	800e0a8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	899b      	ldrh	r3, [r3, #12]
 800e026:	461a      	mov	r2, r3
 800e028:	2100      	movs	r1, #0
 800e02a:	f7ff fda8 	bl	800db7e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	3334      	adds	r3, #52	; 0x34
 800e032:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e036:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800e03a:	4618      	mov	r0, r3
 800e03c:	f7ff fd37 	bl	800daae <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	3334      	adds	r3, #52	; 0x34
 800e044:	4921      	ldr	r1, [pc, #132]	; (800e0cc <sync_fs+0xd8>)
 800e046:	4618      	mov	r0, r3
 800e048:	f7ff fd4c 	bl	800dae4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	3334      	adds	r3, #52	; 0x34
 800e050:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e054:	491e      	ldr	r1, [pc, #120]	; (800e0d0 <sync_fs+0xdc>)
 800e056:	4618      	mov	r0, r3
 800e058:	f7ff fd44 	bl	800dae4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	3334      	adds	r3, #52	; 0x34
 800e060:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	695b      	ldr	r3, [r3, #20]
 800e068:	4619      	mov	r1, r3
 800e06a:	4610      	mov	r0, r2
 800e06c:	f7ff fd3a 	bl	800dae4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	3334      	adds	r3, #52	; 0x34
 800e074:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	691b      	ldr	r3, [r3, #16]
 800e07c:	4619      	mov	r1, r3
 800e07e:	4610      	mov	r0, r2
 800e080:	f7ff fd30 	bl	800dae4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	6a1b      	ldr	r3, [r3, #32]
 800e088:	1c5a      	adds	r2, r3, #1
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	7858      	ldrb	r0, [r3, #1]
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e09c:	2301      	movs	r3, #1
 800e09e:	f7ff fc8d 	bl	800d9bc <disk_write>
			fs->fsi_flag = 0;
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	2200      	movs	r2, #0
 800e0a6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	785b      	ldrb	r3, [r3, #1]
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	2100      	movs	r1, #0
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	f7ff fca3 	bl	800d9fc <disk_ioctl>
 800e0b6:	4603      	mov	r3, r0
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d001      	beq.n	800e0c0 <sync_fs+0xcc>
 800e0bc:	2301      	movs	r3, #1
 800e0be:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800e0c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	3710      	adds	r7, #16
 800e0c6:	46bd      	mov	sp, r7
 800e0c8:	bd80      	pop	{r7, pc}
 800e0ca:	bf00      	nop
 800e0cc:	41615252 	.word	0x41615252
 800e0d0:	61417272 	.word	0x61417272

0800e0d4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800e0d4:	b480      	push	{r7}
 800e0d6:	b083      	sub	sp, #12
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
 800e0dc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800e0de:	683b      	ldr	r3, [r7, #0]
 800e0e0:	3b02      	subs	r3, #2
 800e0e2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	699b      	ldr	r3, [r3, #24]
 800e0e8:	3b02      	subs	r3, #2
 800e0ea:	683a      	ldr	r2, [r7, #0]
 800e0ec:	429a      	cmp	r2, r3
 800e0ee:	d301      	bcc.n	800e0f4 <clust2sect+0x20>
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	e008      	b.n	800e106 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	895b      	ldrh	r3, [r3, #10]
 800e0f8:	461a      	mov	r2, r3
 800e0fa:	683b      	ldr	r3, [r7, #0]
 800e0fc:	fb03 f202 	mul.w	r2, r3, r2
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e104:	4413      	add	r3, r2
}
 800e106:	4618      	mov	r0, r3
 800e108:	370c      	adds	r7, #12
 800e10a:	46bd      	mov	sp, r7
 800e10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e110:	4770      	bx	lr

0800e112 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800e112:	b580      	push	{r7, lr}
 800e114:	b086      	sub	sp, #24
 800e116:	af00      	add	r7, sp, #0
 800e118:	6078      	str	r0, [r7, #4]
 800e11a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e122:	683b      	ldr	r3, [r7, #0]
 800e124:	2b01      	cmp	r3, #1
 800e126:	d904      	bls.n	800e132 <get_fat+0x20>
 800e128:	693b      	ldr	r3, [r7, #16]
 800e12a:	699b      	ldr	r3, [r3, #24]
 800e12c:	683a      	ldr	r2, [r7, #0]
 800e12e:	429a      	cmp	r2, r3
 800e130:	d302      	bcc.n	800e138 <get_fat+0x26>
		val = 1;	/* Internal error */
 800e132:	2301      	movs	r3, #1
 800e134:	617b      	str	r3, [r7, #20]
 800e136:	e0bb      	b.n	800e2b0 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800e138:	f04f 33ff 	mov.w	r3, #4294967295
 800e13c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800e13e:	693b      	ldr	r3, [r7, #16]
 800e140:	781b      	ldrb	r3, [r3, #0]
 800e142:	2b03      	cmp	r3, #3
 800e144:	f000 8083 	beq.w	800e24e <get_fat+0x13c>
 800e148:	2b03      	cmp	r3, #3
 800e14a:	f300 80a7 	bgt.w	800e29c <get_fat+0x18a>
 800e14e:	2b01      	cmp	r3, #1
 800e150:	d002      	beq.n	800e158 <get_fat+0x46>
 800e152:	2b02      	cmp	r3, #2
 800e154:	d056      	beq.n	800e204 <get_fat+0xf2>
 800e156:	e0a1      	b.n	800e29c <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800e158:	683b      	ldr	r3, [r7, #0]
 800e15a:	60fb      	str	r3, [r7, #12]
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	085b      	lsrs	r3, r3, #1
 800e160:	68fa      	ldr	r2, [r7, #12]
 800e162:	4413      	add	r3, r2
 800e164:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e166:	693b      	ldr	r3, [r7, #16]
 800e168:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e16a:	693b      	ldr	r3, [r7, #16]
 800e16c:	899b      	ldrh	r3, [r3, #12]
 800e16e:	4619      	mov	r1, r3
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	fbb3 f3f1 	udiv	r3, r3, r1
 800e176:	4413      	add	r3, r2
 800e178:	4619      	mov	r1, r3
 800e17a:	6938      	ldr	r0, [r7, #16]
 800e17c:	f7ff ff0c 	bl	800df98 <move_window>
 800e180:	4603      	mov	r3, r0
 800e182:	2b00      	cmp	r3, #0
 800e184:	f040 808d 	bne.w	800e2a2 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	1c5a      	adds	r2, r3, #1
 800e18c:	60fa      	str	r2, [r7, #12]
 800e18e:	693a      	ldr	r2, [r7, #16]
 800e190:	8992      	ldrh	r2, [r2, #12]
 800e192:	fbb3 f1f2 	udiv	r1, r3, r2
 800e196:	fb01 f202 	mul.w	r2, r1, r2
 800e19a:	1a9b      	subs	r3, r3, r2
 800e19c:	693a      	ldr	r2, [r7, #16]
 800e19e:	4413      	add	r3, r2
 800e1a0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e1a4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e1a6:	693b      	ldr	r3, [r7, #16]
 800e1a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e1aa:	693b      	ldr	r3, [r7, #16]
 800e1ac:	899b      	ldrh	r3, [r3, #12]
 800e1ae:	4619      	mov	r1, r3
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	fbb3 f3f1 	udiv	r3, r3, r1
 800e1b6:	4413      	add	r3, r2
 800e1b8:	4619      	mov	r1, r3
 800e1ba:	6938      	ldr	r0, [r7, #16]
 800e1bc:	f7ff feec 	bl	800df98 <move_window>
 800e1c0:	4603      	mov	r3, r0
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d16f      	bne.n	800e2a6 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800e1c6:	693b      	ldr	r3, [r7, #16]
 800e1c8:	899b      	ldrh	r3, [r3, #12]
 800e1ca:	461a      	mov	r2, r3
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	fbb3 f1f2 	udiv	r1, r3, r2
 800e1d2:	fb01 f202 	mul.w	r2, r1, r2
 800e1d6:	1a9b      	subs	r3, r3, r2
 800e1d8:	693a      	ldr	r2, [r7, #16]
 800e1da:	4413      	add	r3, r2
 800e1dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e1e0:	021b      	lsls	r3, r3, #8
 800e1e2:	461a      	mov	r2, r3
 800e1e4:	68bb      	ldr	r3, [r7, #8]
 800e1e6:	4313      	orrs	r3, r2
 800e1e8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e1ea:	683b      	ldr	r3, [r7, #0]
 800e1ec:	f003 0301 	and.w	r3, r3, #1
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d002      	beq.n	800e1fa <get_fat+0xe8>
 800e1f4:	68bb      	ldr	r3, [r7, #8]
 800e1f6:	091b      	lsrs	r3, r3, #4
 800e1f8:	e002      	b.n	800e200 <get_fat+0xee>
 800e1fa:	68bb      	ldr	r3, [r7, #8]
 800e1fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e200:	617b      	str	r3, [r7, #20]
			break;
 800e202:	e055      	b.n	800e2b0 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e204:	693b      	ldr	r3, [r7, #16]
 800e206:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e208:	693b      	ldr	r3, [r7, #16]
 800e20a:	899b      	ldrh	r3, [r3, #12]
 800e20c:	085b      	lsrs	r3, r3, #1
 800e20e:	b29b      	uxth	r3, r3
 800e210:	4619      	mov	r1, r3
 800e212:	683b      	ldr	r3, [r7, #0]
 800e214:	fbb3 f3f1 	udiv	r3, r3, r1
 800e218:	4413      	add	r3, r2
 800e21a:	4619      	mov	r1, r3
 800e21c:	6938      	ldr	r0, [r7, #16]
 800e21e:	f7ff febb 	bl	800df98 <move_window>
 800e222:	4603      	mov	r3, r0
 800e224:	2b00      	cmp	r3, #0
 800e226:	d140      	bne.n	800e2aa <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800e228:	693b      	ldr	r3, [r7, #16]
 800e22a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e22e:	683b      	ldr	r3, [r7, #0]
 800e230:	005b      	lsls	r3, r3, #1
 800e232:	693a      	ldr	r2, [r7, #16]
 800e234:	8992      	ldrh	r2, [r2, #12]
 800e236:	fbb3 f0f2 	udiv	r0, r3, r2
 800e23a:	fb00 f202 	mul.w	r2, r0, r2
 800e23e:	1a9b      	subs	r3, r3, r2
 800e240:	440b      	add	r3, r1
 800e242:	4618      	mov	r0, r3
 800e244:	f7ff fbf8 	bl	800da38 <ld_word>
 800e248:	4603      	mov	r3, r0
 800e24a:	617b      	str	r3, [r7, #20]
			break;
 800e24c:	e030      	b.n	800e2b0 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e24e:	693b      	ldr	r3, [r7, #16]
 800e250:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e252:	693b      	ldr	r3, [r7, #16]
 800e254:	899b      	ldrh	r3, [r3, #12]
 800e256:	089b      	lsrs	r3, r3, #2
 800e258:	b29b      	uxth	r3, r3
 800e25a:	4619      	mov	r1, r3
 800e25c:	683b      	ldr	r3, [r7, #0]
 800e25e:	fbb3 f3f1 	udiv	r3, r3, r1
 800e262:	4413      	add	r3, r2
 800e264:	4619      	mov	r1, r3
 800e266:	6938      	ldr	r0, [r7, #16]
 800e268:	f7ff fe96 	bl	800df98 <move_window>
 800e26c:	4603      	mov	r3, r0
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d11d      	bne.n	800e2ae <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e272:	693b      	ldr	r3, [r7, #16]
 800e274:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e278:	683b      	ldr	r3, [r7, #0]
 800e27a:	009b      	lsls	r3, r3, #2
 800e27c:	693a      	ldr	r2, [r7, #16]
 800e27e:	8992      	ldrh	r2, [r2, #12]
 800e280:	fbb3 f0f2 	udiv	r0, r3, r2
 800e284:	fb00 f202 	mul.w	r2, r0, r2
 800e288:	1a9b      	subs	r3, r3, r2
 800e28a:	440b      	add	r3, r1
 800e28c:	4618      	mov	r0, r3
 800e28e:	f7ff fbeb 	bl	800da68 <ld_dword>
 800e292:	4603      	mov	r3, r0
 800e294:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800e298:	617b      	str	r3, [r7, #20]
			break;
 800e29a:	e009      	b.n	800e2b0 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800e29c:	2301      	movs	r3, #1
 800e29e:	617b      	str	r3, [r7, #20]
 800e2a0:	e006      	b.n	800e2b0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e2a2:	bf00      	nop
 800e2a4:	e004      	b.n	800e2b0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e2a6:	bf00      	nop
 800e2a8:	e002      	b.n	800e2b0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e2aa:	bf00      	nop
 800e2ac:	e000      	b.n	800e2b0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e2ae:	bf00      	nop
		}
	}

	return val;
 800e2b0:	697b      	ldr	r3, [r7, #20]
}
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	3718      	adds	r7, #24
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	bd80      	pop	{r7, pc}

0800e2ba <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800e2ba:	b590      	push	{r4, r7, lr}
 800e2bc:	b089      	sub	sp, #36	; 0x24
 800e2be:	af00      	add	r7, sp, #0
 800e2c0:	60f8      	str	r0, [r7, #12]
 800e2c2:	60b9      	str	r1, [r7, #8]
 800e2c4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800e2c6:	2302      	movs	r3, #2
 800e2c8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e2ca:	68bb      	ldr	r3, [r7, #8]
 800e2cc:	2b01      	cmp	r3, #1
 800e2ce:	f240 8102 	bls.w	800e4d6 <put_fat+0x21c>
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	699b      	ldr	r3, [r3, #24]
 800e2d6:	68ba      	ldr	r2, [r7, #8]
 800e2d8:	429a      	cmp	r2, r3
 800e2da:	f080 80fc 	bcs.w	800e4d6 <put_fat+0x21c>
		switch (fs->fs_type) {
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	781b      	ldrb	r3, [r3, #0]
 800e2e2:	2b03      	cmp	r3, #3
 800e2e4:	f000 80b6 	beq.w	800e454 <put_fat+0x19a>
 800e2e8:	2b03      	cmp	r3, #3
 800e2ea:	f300 80fd 	bgt.w	800e4e8 <put_fat+0x22e>
 800e2ee:	2b01      	cmp	r3, #1
 800e2f0:	d003      	beq.n	800e2fa <put_fat+0x40>
 800e2f2:	2b02      	cmp	r3, #2
 800e2f4:	f000 8083 	beq.w	800e3fe <put_fat+0x144>
 800e2f8:	e0f6      	b.n	800e4e8 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800e2fa:	68bb      	ldr	r3, [r7, #8]
 800e2fc:	61bb      	str	r3, [r7, #24]
 800e2fe:	69bb      	ldr	r3, [r7, #24]
 800e300:	085b      	lsrs	r3, r3, #1
 800e302:	69ba      	ldr	r2, [r7, #24]
 800e304:	4413      	add	r3, r2
 800e306:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	899b      	ldrh	r3, [r3, #12]
 800e310:	4619      	mov	r1, r3
 800e312:	69bb      	ldr	r3, [r7, #24]
 800e314:	fbb3 f3f1 	udiv	r3, r3, r1
 800e318:	4413      	add	r3, r2
 800e31a:	4619      	mov	r1, r3
 800e31c:	68f8      	ldr	r0, [r7, #12]
 800e31e:	f7ff fe3b 	bl	800df98 <move_window>
 800e322:	4603      	mov	r3, r0
 800e324:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e326:	7ffb      	ldrb	r3, [r7, #31]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	f040 80d6 	bne.w	800e4da <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e334:	69bb      	ldr	r3, [r7, #24]
 800e336:	1c5a      	adds	r2, r3, #1
 800e338:	61ba      	str	r2, [r7, #24]
 800e33a:	68fa      	ldr	r2, [r7, #12]
 800e33c:	8992      	ldrh	r2, [r2, #12]
 800e33e:	fbb3 f0f2 	udiv	r0, r3, r2
 800e342:	fb00 f202 	mul.w	r2, r0, r2
 800e346:	1a9b      	subs	r3, r3, r2
 800e348:	440b      	add	r3, r1
 800e34a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e34c:	68bb      	ldr	r3, [r7, #8]
 800e34e:	f003 0301 	and.w	r3, r3, #1
 800e352:	2b00      	cmp	r3, #0
 800e354:	d00d      	beq.n	800e372 <put_fat+0xb8>
 800e356:	697b      	ldr	r3, [r7, #20]
 800e358:	781b      	ldrb	r3, [r3, #0]
 800e35a:	b25b      	sxtb	r3, r3
 800e35c:	f003 030f 	and.w	r3, r3, #15
 800e360:	b25a      	sxtb	r2, r3
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	b2db      	uxtb	r3, r3
 800e366:	011b      	lsls	r3, r3, #4
 800e368:	b25b      	sxtb	r3, r3
 800e36a:	4313      	orrs	r3, r2
 800e36c:	b25b      	sxtb	r3, r3
 800e36e:	b2db      	uxtb	r3, r3
 800e370:	e001      	b.n	800e376 <put_fat+0xbc>
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	b2db      	uxtb	r3, r3
 800e376:	697a      	ldr	r2, [r7, #20]
 800e378:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	2201      	movs	r2, #1
 800e37e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	899b      	ldrh	r3, [r3, #12]
 800e388:	4619      	mov	r1, r3
 800e38a:	69bb      	ldr	r3, [r7, #24]
 800e38c:	fbb3 f3f1 	udiv	r3, r3, r1
 800e390:	4413      	add	r3, r2
 800e392:	4619      	mov	r1, r3
 800e394:	68f8      	ldr	r0, [r7, #12]
 800e396:	f7ff fdff 	bl	800df98 <move_window>
 800e39a:	4603      	mov	r3, r0
 800e39c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e39e:	7ffb      	ldrb	r3, [r7, #31]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	f040 809c 	bne.w	800e4de <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	899b      	ldrh	r3, [r3, #12]
 800e3b0:	461a      	mov	r2, r3
 800e3b2:	69bb      	ldr	r3, [r7, #24]
 800e3b4:	fbb3 f0f2 	udiv	r0, r3, r2
 800e3b8:	fb00 f202 	mul.w	r2, r0, r2
 800e3bc:	1a9b      	subs	r3, r3, r2
 800e3be:	440b      	add	r3, r1
 800e3c0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e3c2:	68bb      	ldr	r3, [r7, #8]
 800e3c4:	f003 0301 	and.w	r3, r3, #1
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d003      	beq.n	800e3d4 <put_fat+0x11a>
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	091b      	lsrs	r3, r3, #4
 800e3d0:	b2db      	uxtb	r3, r3
 800e3d2:	e00e      	b.n	800e3f2 <put_fat+0x138>
 800e3d4:	697b      	ldr	r3, [r7, #20]
 800e3d6:	781b      	ldrb	r3, [r3, #0]
 800e3d8:	b25b      	sxtb	r3, r3
 800e3da:	f023 030f 	bic.w	r3, r3, #15
 800e3de:	b25a      	sxtb	r2, r3
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	0a1b      	lsrs	r3, r3, #8
 800e3e4:	b25b      	sxtb	r3, r3
 800e3e6:	f003 030f 	and.w	r3, r3, #15
 800e3ea:	b25b      	sxtb	r3, r3
 800e3ec:	4313      	orrs	r3, r2
 800e3ee:	b25b      	sxtb	r3, r3
 800e3f0:	b2db      	uxtb	r3, r3
 800e3f2:	697a      	ldr	r2, [r7, #20]
 800e3f4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	2201      	movs	r2, #1
 800e3fa:	70da      	strb	r2, [r3, #3]
			break;
 800e3fc:	e074      	b.n	800e4e8 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	899b      	ldrh	r3, [r3, #12]
 800e406:	085b      	lsrs	r3, r3, #1
 800e408:	b29b      	uxth	r3, r3
 800e40a:	4619      	mov	r1, r3
 800e40c:	68bb      	ldr	r3, [r7, #8]
 800e40e:	fbb3 f3f1 	udiv	r3, r3, r1
 800e412:	4413      	add	r3, r2
 800e414:	4619      	mov	r1, r3
 800e416:	68f8      	ldr	r0, [r7, #12]
 800e418:	f7ff fdbe 	bl	800df98 <move_window>
 800e41c:	4603      	mov	r3, r0
 800e41e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e420:	7ffb      	ldrb	r3, [r7, #31]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d15d      	bne.n	800e4e2 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e42c:	68bb      	ldr	r3, [r7, #8]
 800e42e:	005b      	lsls	r3, r3, #1
 800e430:	68fa      	ldr	r2, [r7, #12]
 800e432:	8992      	ldrh	r2, [r2, #12]
 800e434:	fbb3 f0f2 	udiv	r0, r3, r2
 800e438:	fb00 f202 	mul.w	r2, r0, r2
 800e43c:	1a9b      	subs	r3, r3, r2
 800e43e:	440b      	add	r3, r1
 800e440:	687a      	ldr	r2, [r7, #4]
 800e442:	b292      	uxth	r2, r2
 800e444:	4611      	mov	r1, r2
 800e446:	4618      	mov	r0, r3
 800e448:	f7ff fb31 	bl	800daae <st_word>
			fs->wflag = 1;
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	2201      	movs	r2, #1
 800e450:	70da      	strb	r2, [r3, #3]
			break;
 800e452:	e049      	b.n	800e4e8 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	899b      	ldrh	r3, [r3, #12]
 800e45c:	089b      	lsrs	r3, r3, #2
 800e45e:	b29b      	uxth	r3, r3
 800e460:	4619      	mov	r1, r3
 800e462:	68bb      	ldr	r3, [r7, #8]
 800e464:	fbb3 f3f1 	udiv	r3, r3, r1
 800e468:	4413      	add	r3, r2
 800e46a:	4619      	mov	r1, r3
 800e46c:	68f8      	ldr	r0, [r7, #12]
 800e46e:	f7ff fd93 	bl	800df98 <move_window>
 800e472:	4603      	mov	r3, r0
 800e474:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e476:	7ffb      	ldrb	r3, [r7, #31]
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d134      	bne.n	800e4e6 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e488:	68bb      	ldr	r3, [r7, #8]
 800e48a:	009b      	lsls	r3, r3, #2
 800e48c:	68fa      	ldr	r2, [r7, #12]
 800e48e:	8992      	ldrh	r2, [r2, #12]
 800e490:	fbb3 f0f2 	udiv	r0, r3, r2
 800e494:	fb00 f202 	mul.w	r2, r0, r2
 800e498:	1a9b      	subs	r3, r3, r2
 800e49a:	440b      	add	r3, r1
 800e49c:	4618      	mov	r0, r3
 800e49e:	f7ff fae3 	bl	800da68 <ld_dword>
 800e4a2:	4603      	mov	r3, r0
 800e4a4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800e4a8:	4323      	orrs	r3, r4
 800e4aa:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e4b2:	68bb      	ldr	r3, [r7, #8]
 800e4b4:	009b      	lsls	r3, r3, #2
 800e4b6:	68fa      	ldr	r2, [r7, #12]
 800e4b8:	8992      	ldrh	r2, [r2, #12]
 800e4ba:	fbb3 f0f2 	udiv	r0, r3, r2
 800e4be:	fb00 f202 	mul.w	r2, r0, r2
 800e4c2:	1a9b      	subs	r3, r3, r2
 800e4c4:	440b      	add	r3, r1
 800e4c6:	6879      	ldr	r1, [r7, #4]
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	f7ff fb0b 	bl	800dae4 <st_dword>
			fs->wflag = 1;
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	2201      	movs	r2, #1
 800e4d2:	70da      	strb	r2, [r3, #3]
			break;
 800e4d4:	e008      	b.n	800e4e8 <put_fat+0x22e>
		}
	}
 800e4d6:	bf00      	nop
 800e4d8:	e006      	b.n	800e4e8 <put_fat+0x22e>
			if (res != FR_OK) break;
 800e4da:	bf00      	nop
 800e4dc:	e004      	b.n	800e4e8 <put_fat+0x22e>
			if (res != FR_OK) break;
 800e4de:	bf00      	nop
 800e4e0:	e002      	b.n	800e4e8 <put_fat+0x22e>
			if (res != FR_OK) break;
 800e4e2:	bf00      	nop
 800e4e4:	e000      	b.n	800e4e8 <put_fat+0x22e>
			if (res != FR_OK) break;
 800e4e6:	bf00      	nop
	return res;
 800e4e8:	7ffb      	ldrb	r3, [r7, #31]
}
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	3724      	adds	r7, #36	; 0x24
 800e4ee:	46bd      	mov	sp, r7
 800e4f0:	bd90      	pop	{r4, r7, pc}

0800e4f2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800e4f2:	b580      	push	{r7, lr}
 800e4f4:	b088      	sub	sp, #32
 800e4f6:	af00      	add	r7, sp, #0
 800e4f8:	60f8      	str	r0, [r7, #12]
 800e4fa:	60b9      	str	r1, [r7, #8]
 800e4fc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800e4fe:	2300      	movs	r3, #0
 800e500:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800e508:	68bb      	ldr	r3, [r7, #8]
 800e50a:	2b01      	cmp	r3, #1
 800e50c:	d904      	bls.n	800e518 <remove_chain+0x26>
 800e50e:	69bb      	ldr	r3, [r7, #24]
 800e510:	699b      	ldr	r3, [r3, #24]
 800e512:	68ba      	ldr	r2, [r7, #8]
 800e514:	429a      	cmp	r2, r3
 800e516:	d301      	bcc.n	800e51c <remove_chain+0x2a>
 800e518:	2302      	movs	r3, #2
 800e51a:	e04b      	b.n	800e5b4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d00c      	beq.n	800e53c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800e522:	f04f 32ff 	mov.w	r2, #4294967295
 800e526:	6879      	ldr	r1, [r7, #4]
 800e528:	69b8      	ldr	r0, [r7, #24]
 800e52a:	f7ff fec6 	bl	800e2ba <put_fat>
 800e52e:	4603      	mov	r3, r0
 800e530:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800e532:	7ffb      	ldrb	r3, [r7, #31]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d001      	beq.n	800e53c <remove_chain+0x4a>
 800e538:	7ffb      	ldrb	r3, [r7, #31]
 800e53a:	e03b      	b.n	800e5b4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800e53c:	68b9      	ldr	r1, [r7, #8]
 800e53e:	68f8      	ldr	r0, [r7, #12]
 800e540:	f7ff fde7 	bl	800e112 <get_fat>
 800e544:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800e546:	697b      	ldr	r3, [r7, #20]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d031      	beq.n	800e5b0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800e54c:	697b      	ldr	r3, [r7, #20]
 800e54e:	2b01      	cmp	r3, #1
 800e550:	d101      	bne.n	800e556 <remove_chain+0x64>
 800e552:	2302      	movs	r3, #2
 800e554:	e02e      	b.n	800e5b4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800e556:	697b      	ldr	r3, [r7, #20]
 800e558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e55c:	d101      	bne.n	800e562 <remove_chain+0x70>
 800e55e:	2301      	movs	r3, #1
 800e560:	e028      	b.n	800e5b4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800e562:	2200      	movs	r2, #0
 800e564:	68b9      	ldr	r1, [r7, #8]
 800e566:	69b8      	ldr	r0, [r7, #24]
 800e568:	f7ff fea7 	bl	800e2ba <put_fat>
 800e56c:	4603      	mov	r3, r0
 800e56e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800e570:	7ffb      	ldrb	r3, [r7, #31]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d001      	beq.n	800e57a <remove_chain+0x88>
 800e576:	7ffb      	ldrb	r3, [r7, #31]
 800e578:	e01c      	b.n	800e5b4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800e57a:	69bb      	ldr	r3, [r7, #24]
 800e57c:	695a      	ldr	r2, [r3, #20]
 800e57e:	69bb      	ldr	r3, [r7, #24]
 800e580:	699b      	ldr	r3, [r3, #24]
 800e582:	3b02      	subs	r3, #2
 800e584:	429a      	cmp	r2, r3
 800e586:	d20b      	bcs.n	800e5a0 <remove_chain+0xae>
			fs->free_clst++;
 800e588:	69bb      	ldr	r3, [r7, #24]
 800e58a:	695b      	ldr	r3, [r3, #20]
 800e58c:	1c5a      	adds	r2, r3, #1
 800e58e:	69bb      	ldr	r3, [r7, #24]
 800e590:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800e592:	69bb      	ldr	r3, [r7, #24]
 800e594:	791b      	ldrb	r3, [r3, #4]
 800e596:	f043 0301 	orr.w	r3, r3, #1
 800e59a:	b2da      	uxtb	r2, r3
 800e59c:	69bb      	ldr	r3, [r7, #24]
 800e59e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800e5a0:	697b      	ldr	r3, [r7, #20]
 800e5a2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800e5a4:	69bb      	ldr	r3, [r7, #24]
 800e5a6:	699b      	ldr	r3, [r3, #24]
 800e5a8:	68ba      	ldr	r2, [r7, #8]
 800e5aa:	429a      	cmp	r2, r3
 800e5ac:	d3c6      	bcc.n	800e53c <remove_chain+0x4a>
 800e5ae:	e000      	b.n	800e5b2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800e5b0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800e5b2:	2300      	movs	r3, #0
}
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	3720      	adds	r7, #32
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	bd80      	pop	{r7, pc}

0800e5bc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800e5bc:	b580      	push	{r7, lr}
 800e5be:	b088      	sub	sp, #32
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	6078      	str	r0, [r7, #4]
 800e5c4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800e5cc:	683b      	ldr	r3, [r7, #0]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d10d      	bne.n	800e5ee <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800e5d2:	693b      	ldr	r3, [r7, #16]
 800e5d4:	691b      	ldr	r3, [r3, #16]
 800e5d6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800e5d8:	69bb      	ldr	r3, [r7, #24]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d004      	beq.n	800e5e8 <create_chain+0x2c>
 800e5de:	693b      	ldr	r3, [r7, #16]
 800e5e0:	699b      	ldr	r3, [r3, #24]
 800e5e2:	69ba      	ldr	r2, [r7, #24]
 800e5e4:	429a      	cmp	r2, r3
 800e5e6:	d31b      	bcc.n	800e620 <create_chain+0x64>
 800e5e8:	2301      	movs	r3, #1
 800e5ea:	61bb      	str	r3, [r7, #24]
 800e5ec:	e018      	b.n	800e620 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800e5ee:	6839      	ldr	r1, [r7, #0]
 800e5f0:	6878      	ldr	r0, [r7, #4]
 800e5f2:	f7ff fd8e 	bl	800e112 <get_fat>
 800e5f6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	2b01      	cmp	r3, #1
 800e5fc:	d801      	bhi.n	800e602 <create_chain+0x46>
 800e5fe:	2301      	movs	r3, #1
 800e600:	e070      	b.n	800e6e4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e608:	d101      	bne.n	800e60e <create_chain+0x52>
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	e06a      	b.n	800e6e4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800e60e:	693b      	ldr	r3, [r7, #16]
 800e610:	699b      	ldr	r3, [r3, #24]
 800e612:	68fa      	ldr	r2, [r7, #12]
 800e614:	429a      	cmp	r2, r3
 800e616:	d201      	bcs.n	800e61c <create_chain+0x60>
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	e063      	b.n	800e6e4 <create_chain+0x128>
		scl = clst;
 800e61c:	683b      	ldr	r3, [r7, #0]
 800e61e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800e620:	69bb      	ldr	r3, [r7, #24]
 800e622:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800e624:	69fb      	ldr	r3, [r7, #28]
 800e626:	3301      	adds	r3, #1
 800e628:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800e62a:	693b      	ldr	r3, [r7, #16]
 800e62c:	699b      	ldr	r3, [r3, #24]
 800e62e:	69fa      	ldr	r2, [r7, #28]
 800e630:	429a      	cmp	r2, r3
 800e632:	d307      	bcc.n	800e644 <create_chain+0x88>
				ncl = 2;
 800e634:	2302      	movs	r3, #2
 800e636:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800e638:	69fa      	ldr	r2, [r7, #28]
 800e63a:	69bb      	ldr	r3, [r7, #24]
 800e63c:	429a      	cmp	r2, r3
 800e63e:	d901      	bls.n	800e644 <create_chain+0x88>
 800e640:	2300      	movs	r3, #0
 800e642:	e04f      	b.n	800e6e4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800e644:	69f9      	ldr	r1, [r7, #28]
 800e646:	6878      	ldr	r0, [r7, #4]
 800e648:	f7ff fd63 	bl	800e112 <get_fat>
 800e64c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d00e      	beq.n	800e672 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	2b01      	cmp	r3, #1
 800e658:	d003      	beq.n	800e662 <create_chain+0xa6>
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e660:	d101      	bne.n	800e666 <create_chain+0xaa>
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	e03e      	b.n	800e6e4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800e666:	69fa      	ldr	r2, [r7, #28]
 800e668:	69bb      	ldr	r3, [r7, #24]
 800e66a:	429a      	cmp	r2, r3
 800e66c:	d1da      	bne.n	800e624 <create_chain+0x68>
 800e66e:	2300      	movs	r3, #0
 800e670:	e038      	b.n	800e6e4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800e672:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800e674:	f04f 32ff 	mov.w	r2, #4294967295
 800e678:	69f9      	ldr	r1, [r7, #28]
 800e67a:	6938      	ldr	r0, [r7, #16]
 800e67c:	f7ff fe1d 	bl	800e2ba <put_fat>
 800e680:	4603      	mov	r3, r0
 800e682:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800e684:	7dfb      	ldrb	r3, [r7, #23]
 800e686:	2b00      	cmp	r3, #0
 800e688:	d109      	bne.n	800e69e <create_chain+0xe2>
 800e68a:	683b      	ldr	r3, [r7, #0]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d006      	beq.n	800e69e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800e690:	69fa      	ldr	r2, [r7, #28]
 800e692:	6839      	ldr	r1, [r7, #0]
 800e694:	6938      	ldr	r0, [r7, #16]
 800e696:	f7ff fe10 	bl	800e2ba <put_fat>
 800e69a:	4603      	mov	r3, r0
 800e69c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800e69e:	7dfb      	ldrb	r3, [r7, #23]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d116      	bne.n	800e6d2 <create_chain+0x116>
		fs->last_clst = ncl;
 800e6a4:	693b      	ldr	r3, [r7, #16]
 800e6a6:	69fa      	ldr	r2, [r7, #28]
 800e6a8:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800e6aa:	693b      	ldr	r3, [r7, #16]
 800e6ac:	695a      	ldr	r2, [r3, #20]
 800e6ae:	693b      	ldr	r3, [r7, #16]
 800e6b0:	699b      	ldr	r3, [r3, #24]
 800e6b2:	3b02      	subs	r3, #2
 800e6b4:	429a      	cmp	r2, r3
 800e6b6:	d804      	bhi.n	800e6c2 <create_chain+0x106>
 800e6b8:	693b      	ldr	r3, [r7, #16]
 800e6ba:	695b      	ldr	r3, [r3, #20]
 800e6bc:	1e5a      	subs	r2, r3, #1
 800e6be:	693b      	ldr	r3, [r7, #16]
 800e6c0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800e6c2:	693b      	ldr	r3, [r7, #16]
 800e6c4:	791b      	ldrb	r3, [r3, #4]
 800e6c6:	f043 0301 	orr.w	r3, r3, #1
 800e6ca:	b2da      	uxtb	r2, r3
 800e6cc:	693b      	ldr	r3, [r7, #16]
 800e6ce:	711a      	strb	r2, [r3, #4]
 800e6d0:	e007      	b.n	800e6e2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800e6d2:	7dfb      	ldrb	r3, [r7, #23]
 800e6d4:	2b01      	cmp	r3, #1
 800e6d6:	d102      	bne.n	800e6de <create_chain+0x122>
 800e6d8:	f04f 33ff 	mov.w	r3, #4294967295
 800e6dc:	e000      	b.n	800e6e0 <create_chain+0x124>
 800e6de:	2301      	movs	r3, #1
 800e6e0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800e6e2:	69fb      	ldr	r3, [r7, #28]
}
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	3720      	adds	r7, #32
 800e6e8:	46bd      	mov	sp, r7
 800e6ea:	bd80      	pop	{r7, pc}

0800e6ec <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800e6ec:	b480      	push	{r7}
 800e6ee:	b087      	sub	sp, #28
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	6078      	str	r0, [r7, #4]
 800e6f4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e700:	3304      	adds	r3, #4
 800e702:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	899b      	ldrh	r3, [r3, #12]
 800e708:	461a      	mov	r2, r3
 800e70a:	683b      	ldr	r3, [r7, #0]
 800e70c:	fbb3 f3f2 	udiv	r3, r3, r2
 800e710:	68fa      	ldr	r2, [r7, #12]
 800e712:	8952      	ldrh	r2, [r2, #10]
 800e714:	fbb3 f3f2 	udiv	r3, r3, r2
 800e718:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e71a:	693b      	ldr	r3, [r7, #16]
 800e71c:	1d1a      	adds	r2, r3, #4
 800e71e:	613a      	str	r2, [r7, #16]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800e724:	68bb      	ldr	r3, [r7, #8]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d101      	bne.n	800e72e <clmt_clust+0x42>
 800e72a:	2300      	movs	r3, #0
 800e72c:	e010      	b.n	800e750 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800e72e:	697a      	ldr	r2, [r7, #20]
 800e730:	68bb      	ldr	r3, [r7, #8]
 800e732:	429a      	cmp	r2, r3
 800e734:	d307      	bcc.n	800e746 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800e736:	697a      	ldr	r2, [r7, #20]
 800e738:	68bb      	ldr	r3, [r7, #8]
 800e73a:	1ad3      	subs	r3, r2, r3
 800e73c:	617b      	str	r3, [r7, #20]
 800e73e:	693b      	ldr	r3, [r7, #16]
 800e740:	3304      	adds	r3, #4
 800e742:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e744:	e7e9      	b.n	800e71a <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800e746:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800e748:	693b      	ldr	r3, [r7, #16]
 800e74a:	681a      	ldr	r2, [r3, #0]
 800e74c:	697b      	ldr	r3, [r7, #20]
 800e74e:	4413      	add	r3, r2
}
 800e750:	4618      	mov	r0, r3
 800e752:	371c      	adds	r7, #28
 800e754:	46bd      	mov	sp, r7
 800e756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75a:	4770      	bx	lr

0800e75c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800e75c:	b580      	push	{r7, lr}
 800e75e:	b086      	sub	sp, #24
 800e760:	af00      	add	r7, sp, #0
 800e762:	6078      	str	r0, [r7, #4]
 800e764:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800e76c:	683b      	ldr	r3, [r7, #0]
 800e76e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e772:	d204      	bcs.n	800e77e <dir_sdi+0x22>
 800e774:	683b      	ldr	r3, [r7, #0]
 800e776:	f003 031f 	and.w	r3, r3, #31
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d001      	beq.n	800e782 <dir_sdi+0x26>
		return FR_INT_ERR;
 800e77e:	2302      	movs	r3, #2
 800e780:	e071      	b.n	800e866 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	683a      	ldr	r2, [r7, #0]
 800e786:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	689b      	ldr	r3, [r3, #8]
 800e78c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800e78e:	697b      	ldr	r3, [r7, #20]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d106      	bne.n	800e7a2 <dir_sdi+0x46>
 800e794:	693b      	ldr	r3, [r7, #16]
 800e796:	781b      	ldrb	r3, [r3, #0]
 800e798:	2b02      	cmp	r3, #2
 800e79a:	d902      	bls.n	800e7a2 <dir_sdi+0x46>
		clst = fs->dirbase;
 800e79c:	693b      	ldr	r3, [r7, #16]
 800e79e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7a0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e7a2:	697b      	ldr	r3, [r7, #20]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d10c      	bne.n	800e7c2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800e7a8:	683b      	ldr	r3, [r7, #0]
 800e7aa:	095b      	lsrs	r3, r3, #5
 800e7ac:	693a      	ldr	r2, [r7, #16]
 800e7ae:	8912      	ldrh	r2, [r2, #8]
 800e7b0:	4293      	cmp	r3, r2
 800e7b2:	d301      	bcc.n	800e7b8 <dir_sdi+0x5c>
 800e7b4:	2302      	movs	r3, #2
 800e7b6:	e056      	b.n	800e866 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800e7b8:	693b      	ldr	r3, [r7, #16]
 800e7ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	61da      	str	r2, [r3, #28]
 800e7c0:	e02d      	b.n	800e81e <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800e7c2:	693b      	ldr	r3, [r7, #16]
 800e7c4:	895b      	ldrh	r3, [r3, #10]
 800e7c6:	461a      	mov	r2, r3
 800e7c8:	693b      	ldr	r3, [r7, #16]
 800e7ca:	899b      	ldrh	r3, [r3, #12]
 800e7cc:	fb02 f303 	mul.w	r3, r2, r3
 800e7d0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e7d2:	e019      	b.n	800e808 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	6979      	ldr	r1, [r7, #20]
 800e7d8:	4618      	mov	r0, r3
 800e7da:	f7ff fc9a 	bl	800e112 <get_fat>
 800e7de:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e7e0:	697b      	ldr	r3, [r7, #20]
 800e7e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7e6:	d101      	bne.n	800e7ec <dir_sdi+0x90>
 800e7e8:	2301      	movs	r3, #1
 800e7ea:	e03c      	b.n	800e866 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800e7ec:	697b      	ldr	r3, [r7, #20]
 800e7ee:	2b01      	cmp	r3, #1
 800e7f0:	d904      	bls.n	800e7fc <dir_sdi+0xa0>
 800e7f2:	693b      	ldr	r3, [r7, #16]
 800e7f4:	699b      	ldr	r3, [r3, #24]
 800e7f6:	697a      	ldr	r2, [r7, #20]
 800e7f8:	429a      	cmp	r2, r3
 800e7fa:	d301      	bcc.n	800e800 <dir_sdi+0xa4>
 800e7fc:	2302      	movs	r3, #2
 800e7fe:	e032      	b.n	800e866 <dir_sdi+0x10a>
			ofs -= csz;
 800e800:	683a      	ldr	r2, [r7, #0]
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	1ad3      	subs	r3, r2, r3
 800e806:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e808:	683a      	ldr	r2, [r7, #0]
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	429a      	cmp	r2, r3
 800e80e:	d2e1      	bcs.n	800e7d4 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800e810:	6979      	ldr	r1, [r7, #20]
 800e812:	6938      	ldr	r0, [r7, #16]
 800e814:	f7ff fc5e 	bl	800e0d4 <clust2sect>
 800e818:	4602      	mov	r2, r0
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	697a      	ldr	r2, [r7, #20]
 800e822:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	69db      	ldr	r3, [r3, #28]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d101      	bne.n	800e830 <dir_sdi+0xd4>
 800e82c:	2302      	movs	r3, #2
 800e82e:	e01a      	b.n	800e866 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	69da      	ldr	r2, [r3, #28]
 800e834:	693b      	ldr	r3, [r7, #16]
 800e836:	899b      	ldrh	r3, [r3, #12]
 800e838:	4619      	mov	r1, r3
 800e83a:	683b      	ldr	r3, [r7, #0]
 800e83c:	fbb3 f3f1 	udiv	r3, r3, r1
 800e840:	441a      	add	r2, r3
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e846:	693b      	ldr	r3, [r7, #16]
 800e848:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e84c:	693b      	ldr	r3, [r7, #16]
 800e84e:	899b      	ldrh	r3, [r3, #12]
 800e850:	461a      	mov	r2, r3
 800e852:	683b      	ldr	r3, [r7, #0]
 800e854:	fbb3 f0f2 	udiv	r0, r3, r2
 800e858:	fb00 f202 	mul.w	r2, r0, r2
 800e85c:	1a9b      	subs	r3, r3, r2
 800e85e:	18ca      	adds	r2, r1, r3
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e864:	2300      	movs	r3, #0
}
 800e866:	4618      	mov	r0, r3
 800e868:	3718      	adds	r7, #24
 800e86a:	46bd      	mov	sp, r7
 800e86c:	bd80      	pop	{r7, pc}

0800e86e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e86e:	b580      	push	{r7, lr}
 800e870:	b086      	sub	sp, #24
 800e872:	af00      	add	r7, sp, #0
 800e874:	6078      	str	r0, [r7, #4]
 800e876:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	695b      	ldr	r3, [r3, #20]
 800e882:	3320      	adds	r3, #32
 800e884:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	69db      	ldr	r3, [r3, #28]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d003      	beq.n	800e896 <dir_next+0x28>
 800e88e:	68bb      	ldr	r3, [r7, #8]
 800e890:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e894:	d301      	bcc.n	800e89a <dir_next+0x2c>
 800e896:	2304      	movs	r3, #4
 800e898:	e0bb      	b.n	800ea12 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	899b      	ldrh	r3, [r3, #12]
 800e89e:	461a      	mov	r2, r3
 800e8a0:	68bb      	ldr	r3, [r7, #8]
 800e8a2:	fbb3 f1f2 	udiv	r1, r3, r2
 800e8a6:	fb01 f202 	mul.w	r2, r1, r2
 800e8aa:	1a9b      	subs	r3, r3, r2
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	f040 809d 	bne.w	800e9ec <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	69db      	ldr	r3, [r3, #28]
 800e8b6:	1c5a      	adds	r2, r3, #1
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	699b      	ldr	r3, [r3, #24]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d10b      	bne.n	800e8dc <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e8c4:	68bb      	ldr	r3, [r7, #8]
 800e8c6:	095b      	lsrs	r3, r3, #5
 800e8c8:	68fa      	ldr	r2, [r7, #12]
 800e8ca:	8912      	ldrh	r2, [r2, #8]
 800e8cc:	4293      	cmp	r3, r2
 800e8ce:	f0c0 808d 	bcc.w	800e9ec <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	2200      	movs	r2, #0
 800e8d6:	61da      	str	r2, [r3, #28]
 800e8d8:	2304      	movs	r3, #4
 800e8da:	e09a      	b.n	800ea12 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	899b      	ldrh	r3, [r3, #12]
 800e8e0:	461a      	mov	r2, r3
 800e8e2:	68bb      	ldr	r3, [r7, #8]
 800e8e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800e8e8:	68fa      	ldr	r2, [r7, #12]
 800e8ea:	8952      	ldrh	r2, [r2, #10]
 800e8ec:	3a01      	subs	r2, #1
 800e8ee:	4013      	ands	r3, r2
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d17b      	bne.n	800e9ec <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e8f4:	687a      	ldr	r2, [r7, #4]
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	699b      	ldr	r3, [r3, #24]
 800e8fa:	4619      	mov	r1, r3
 800e8fc:	4610      	mov	r0, r2
 800e8fe:	f7ff fc08 	bl	800e112 <get_fat>
 800e902:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e904:	697b      	ldr	r3, [r7, #20]
 800e906:	2b01      	cmp	r3, #1
 800e908:	d801      	bhi.n	800e90e <dir_next+0xa0>
 800e90a:	2302      	movs	r3, #2
 800e90c:	e081      	b.n	800ea12 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e90e:	697b      	ldr	r3, [r7, #20]
 800e910:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e914:	d101      	bne.n	800e91a <dir_next+0xac>
 800e916:	2301      	movs	r3, #1
 800e918:	e07b      	b.n	800ea12 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	699b      	ldr	r3, [r3, #24]
 800e91e:	697a      	ldr	r2, [r7, #20]
 800e920:	429a      	cmp	r2, r3
 800e922:	d359      	bcc.n	800e9d8 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800e924:	683b      	ldr	r3, [r7, #0]
 800e926:	2b00      	cmp	r3, #0
 800e928:	d104      	bne.n	800e934 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	2200      	movs	r2, #0
 800e92e:	61da      	str	r2, [r3, #28]
 800e930:	2304      	movs	r3, #4
 800e932:	e06e      	b.n	800ea12 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800e934:	687a      	ldr	r2, [r7, #4]
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	699b      	ldr	r3, [r3, #24]
 800e93a:	4619      	mov	r1, r3
 800e93c:	4610      	mov	r0, r2
 800e93e:	f7ff fe3d 	bl	800e5bc <create_chain>
 800e942:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e944:	697b      	ldr	r3, [r7, #20]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d101      	bne.n	800e94e <dir_next+0xe0>
 800e94a:	2307      	movs	r3, #7
 800e94c:	e061      	b.n	800ea12 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800e94e:	697b      	ldr	r3, [r7, #20]
 800e950:	2b01      	cmp	r3, #1
 800e952:	d101      	bne.n	800e958 <dir_next+0xea>
 800e954:	2302      	movs	r3, #2
 800e956:	e05c      	b.n	800ea12 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e958:	697b      	ldr	r3, [r7, #20]
 800e95a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e95e:	d101      	bne.n	800e964 <dir_next+0xf6>
 800e960:	2301      	movs	r3, #1
 800e962:	e056      	b.n	800ea12 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800e964:	68f8      	ldr	r0, [r7, #12]
 800e966:	f7ff fad3 	bl	800df10 <sync_window>
 800e96a:	4603      	mov	r3, r0
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d001      	beq.n	800e974 <dir_next+0x106>
 800e970:	2301      	movs	r3, #1
 800e972:	e04e      	b.n	800ea12 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	899b      	ldrh	r3, [r3, #12]
 800e97e:	461a      	mov	r2, r3
 800e980:	2100      	movs	r1, #0
 800e982:	f7ff f8fc 	bl	800db7e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e986:	2300      	movs	r3, #0
 800e988:	613b      	str	r3, [r7, #16]
 800e98a:	6979      	ldr	r1, [r7, #20]
 800e98c:	68f8      	ldr	r0, [r7, #12]
 800e98e:	f7ff fba1 	bl	800e0d4 <clust2sect>
 800e992:	4602      	mov	r2, r0
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	631a      	str	r2, [r3, #48]	; 0x30
 800e998:	e012      	b.n	800e9c0 <dir_next+0x152>
						fs->wflag = 1;
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	2201      	movs	r2, #1
 800e99e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800e9a0:	68f8      	ldr	r0, [r7, #12]
 800e9a2:	f7ff fab5 	bl	800df10 <sync_window>
 800e9a6:	4603      	mov	r3, r0
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d001      	beq.n	800e9b0 <dir_next+0x142>
 800e9ac:	2301      	movs	r3, #1
 800e9ae:	e030      	b.n	800ea12 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e9b0:	693b      	ldr	r3, [r7, #16]
 800e9b2:	3301      	adds	r3, #1
 800e9b4:	613b      	str	r3, [r7, #16]
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9ba:	1c5a      	adds	r2, r3, #1
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	631a      	str	r2, [r3, #48]	; 0x30
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	895b      	ldrh	r3, [r3, #10]
 800e9c4:	461a      	mov	r2, r3
 800e9c6:	693b      	ldr	r3, [r7, #16]
 800e9c8:	4293      	cmp	r3, r2
 800e9ca:	d3e6      	bcc.n	800e99a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e9d0:	693b      	ldr	r3, [r7, #16]
 800e9d2:	1ad2      	subs	r2, r2, r3
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	697a      	ldr	r2, [r7, #20]
 800e9dc:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800e9de:	6979      	ldr	r1, [r7, #20]
 800e9e0:	68f8      	ldr	r0, [r7, #12]
 800e9e2:	f7ff fb77 	bl	800e0d4 <clust2sect>
 800e9e6:	4602      	mov	r2, r0
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	68ba      	ldr	r2, [r7, #8]
 800e9f0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	899b      	ldrh	r3, [r3, #12]
 800e9fc:	461a      	mov	r2, r3
 800e9fe:	68bb      	ldr	r3, [r7, #8]
 800ea00:	fbb3 f0f2 	udiv	r0, r3, r2
 800ea04:	fb00 f202 	mul.w	r2, r0, r2
 800ea08:	1a9b      	subs	r3, r3, r2
 800ea0a:	18ca      	adds	r2, r1, r3
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ea10:	2300      	movs	r3, #0
}
 800ea12:	4618      	mov	r0, r3
 800ea14:	3718      	adds	r7, #24
 800ea16:	46bd      	mov	sp, r7
 800ea18:	bd80      	pop	{r7, pc}

0800ea1a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ea1a:	b580      	push	{r7, lr}
 800ea1c:	b086      	sub	sp, #24
 800ea1e:	af00      	add	r7, sp, #0
 800ea20:	6078      	str	r0, [r7, #4]
 800ea22:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ea2a:	2100      	movs	r1, #0
 800ea2c:	6878      	ldr	r0, [r7, #4]
 800ea2e:	f7ff fe95 	bl	800e75c <dir_sdi>
 800ea32:	4603      	mov	r3, r0
 800ea34:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ea36:	7dfb      	ldrb	r3, [r7, #23]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d12b      	bne.n	800ea94 <dir_alloc+0x7a>
		n = 0;
 800ea3c:	2300      	movs	r3, #0
 800ea3e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	69db      	ldr	r3, [r3, #28]
 800ea44:	4619      	mov	r1, r3
 800ea46:	68f8      	ldr	r0, [r7, #12]
 800ea48:	f7ff faa6 	bl	800df98 <move_window>
 800ea4c:	4603      	mov	r3, r0
 800ea4e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ea50:	7dfb      	ldrb	r3, [r7, #23]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d11d      	bne.n	800ea92 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	6a1b      	ldr	r3, [r3, #32]
 800ea5a:	781b      	ldrb	r3, [r3, #0]
 800ea5c:	2be5      	cmp	r3, #229	; 0xe5
 800ea5e:	d004      	beq.n	800ea6a <dir_alloc+0x50>
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	6a1b      	ldr	r3, [r3, #32]
 800ea64:	781b      	ldrb	r3, [r3, #0]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d107      	bne.n	800ea7a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ea6a:	693b      	ldr	r3, [r7, #16]
 800ea6c:	3301      	adds	r3, #1
 800ea6e:	613b      	str	r3, [r7, #16]
 800ea70:	693a      	ldr	r2, [r7, #16]
 800ea72:	683b      	ldr	r3, [r7, #0]
 800ea74:	429a      	cmp	r2, r3
 800ea76:	d102      	bne.n	800ea7e <dir_alloc+0x64>
 800ea78:	e00c      	b.n	800ea94 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ea7e:	2101      	movs	r1, #1
 800ea80:	6878      	ldr	r0, [r7, #4]
 800ea82:	f7ff fef4 	bl	800e86e <dir_next>
 800ea86:	4603      	mov	r3, r0
 800ea88:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ea8a:	7dfb      	ldrb	r3, [r7, #23]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d0d7      	beq.n	800ea40 <dir_alloc+0x26>
 800ea90:	e000      	b.n	800ea94 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ea92:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ea94:	7dfb      	ldrb	r3, [r7, #23]
 800ea96:	2b04      	cmp	r3, #4
 800ea98:	d101      	bne.n	800ea9e <dir_alloc+0x84>
 800ea9a:	2307      	movs	r3, #7
 800ea9c:	75fb      	strb	r3, [r7, #23]
	return res;
 800ea9e:	7dfb      	ldrb	r3, [r7, #23]
}
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	3718      	adds	r7, #24
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	bd80      	pop	{r7, pc}

0800eaa8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	b084      	sub	sp, #16
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	6078      	str	r0, [r7, #4]
 800eab0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800eab2:	683b      	ldr	r3, [r7, #0]
 800eab4:	331a      	adds	r3, #26
 800eab6:	4618      	mov	r0, r3
 800eab8:	f7fe ffbe 	bl	800da38 <ld_word>
 800eabc:	4603      	mov	r3, r0
 800eabe:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	781b      	ldrb	r3, [r3, #0]
 800eac4:	2b03      	cmp	r3, #3
 800eac6:	d109      	bne.n	800eadc <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800eac8:	683b      	ldr	r3, [r7, #0]
 800eaca:	3314      	adds	r3, #20
 800eacc:	4618      	mov	r0, r3
 800eace:	f7fe ffb3 	bl	800da38 <ld_word>
 800ead2:	4603      	mov	r3, r0
 800ead4:	041b      	lsls	r3, r3, #16
 800ead6:	68fa      	ldr	r2, [r7, #12]
 800ead8:	4313      	orrs	r3, r2
 800eada:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800eadc:	68fb      	ldr	r3, [r7, #12]
}
 800eade:	4618      	mov	r0, r3
 800eae0:	3710      	adds	r7, #16
 800eae2:	46bd      	mov	sp, r7
 800eae4:	bd80      	pop	{r7, pc}

0800eae6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800eae6:	b580      	push	{r7, lr}
 800eae8:	b084      	sub	sp, #16
 800eaea:	af00      	add	r7, sp, #0
 800eaec:	60f8      	str	r0, [r7, #12]
 800eaee:	60b9      	str	r1, [r7, #8]
 800eaf0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800eaf2:	68bb      	ldr	r3, [r7, #8]
 800eaf4:	331a      	adds	r3, #26
 800eaf6:	687a      	ldr	r2, [r7, #4]
 800eaf8:	b292      	uxth	r2, r2
 800eafa:	4611      	mov	r1, r2
 800eafc:	4618      	mov	r0, r3
 800eafe:	f7fe ffd6 	bl	800daae <st_word>
	if (fs->fs_type == FS_FAT32) {
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	781b      	ldrb	r3, [r3, #0]
 800eb06:	2b03      	cmp	r3, #3
 800eb08:	d109      	bne.n	800eb1e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800eb0a:	68bb      	ldr	r3, [r7, #8]
 800eb0c:	f103 0214 	add.w	r2, r3, #20
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	0c1b      	lsrs	r3, r3, #16
 800eb14:	b29b      	uxth	r3, r3
 800eb16:	4619      	mov	r1, r3
 800eb18:	4610      	mov	r0, r2
 800eb1a:	f7fe ffc8 	bl	800daae <st_word>
	}
}
 800eb1e:	bf00      	nop
 800eb20:	3710      	adds	r7, #16
 800eb22:	46bd      	mov	sp, r7
 800eb24:	bd80      	pop	{r7, pc}

0800eb26 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800eb26:	b580      	push	{r7, lr}
 800eb28:	b086      	sub	sp, #24
 800eb2a:	af00      	add	r7, sp, #0
 800eb2c:	6078      	str	r0, [r7, #4]
 800eb2e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800eb30:	2304      	movs	r3, #4
 800eb32:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800eb3a:	e03c      	b.n	800ebb6 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	69db      	ldr	r3, [r3, #28]
 800eb40:	4619      	mov	r1, r3
 800eb42:	6938      	ldr	r0, [r7, #16]
 800eb44:	f7ff fa28 	bl	800df98 <move_window>
 800eb48:	4603      	mov	r3, r0
 800eb4a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800eb4c:	7dfb      	ldrb	r3, [r7, #23]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d136      	bne.n	800ebc0 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	6a1b      	ldr	r3, [r3, #32]
 800eb56:	781b      	ldrb	r3, [r3, #0]
 800eb58:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800eb5a:	7bfb      	ldrb	r3, [r7, #15]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d102      	bne.n	800eb66 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800eb60:	2304      	movs	r3, #4
 800eb62:	75fb      	strb	r3, [r7, #23]
 800eb64:	e031      	b.n	800ebca <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	6a1b      	ldr	r3, [r3, #32]
 800eb6a:	330b      	adds	r3, #11
 800eb6c:	781b      	ldrb	r3, [r3, #0]
 800eb6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eb72:	73bb      	strb	r3, [r7, #14]
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	7bba      	ldrb	r2, [r7, #14]
 800eb78:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800eb7a:	7bfb      	ldrb	r3, [r7, #15]
 800eb7c:	2be5      	cmp	r3, #229	; 0xe5
 800eb7e:	d011      	beq.n	800eba4 <dir_read+0x7e>
 800eb80:	7bfb      	ldrb	r3, [r7, #15]
 800eb82:	2b2e      	cmp	r3, #46	; 0x2e
 800eb84:	d00e      	beq.n	800eba4 <dir_read+0x7e>
 800eb86:	7bbb      	ldrb	r3, [r7, #14]
 800eb88:	2b0f      	cmp	r3, #15
 800eb8a:	d00b      	beq.n	800eba4 <dir_read+0x7e>
 800eb8c:	7bbb      	ldrb	r3, [r7, #14]
 800eb8e:	f023 0320 	bic.w	r3, r3, #32
 800eb92:	2b08      	cmp	r3, #8
 800eb94:	bf0c      	ite	eq
 800eb96:	2301      	moveq	r3, #1
 800eb98:	2300      	movne	r3, #0
 800eb9a:	b2db      	uxtb	r3, r3
 800eb9c:	461a      	mov	r2, r3
 800eb9e:	683b      	ldr	r3, [r7, #0]
 800eba0:	4293      	cmp	r3, r2
 800eba2:	d00f      	beq.n	800ebc4 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800eba4:	2100      	movs	r1, #0
 800eba6:	6878      	ldr	r0, [r7, #4]
 800eba8:	f7ff fe61 	bl	800e86e <dir_next>
 800ebac:	4603      	mov	r3, r0
 800ebae:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ebb0:	7dfb      	ldrb	r3, [r7, #23]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d108      	bne.n	800ebc8 <dir_read+0xa2>
	while (dp->sect) {
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	69db      	ldr	r3, [r3, #28]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d1be      	bne.n	800eb3c <dir_read+0x16>
 800ebbe:	e004      	b.n	800ebca <dir_read+0xa4>
		if (res != FR_OK) break;
 800ebc0:	bf00      	nop
 800ebc2:	e002      	b.n	800ebca <dir_read+0xa4>
				break;
 800ebc4:	bf00      	nop
 800ebc6:	e000      	b.n	800ebca <dir_read+0xa4>
		if (res != FR_OK) break;
 800ebc8:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800ebca:	7dfb      	ldrb	r3, [r7, #23]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d002      	beq.n	800ebd6 <dir_read+0xb0>
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	2200      	movs	r2, #0
 800ebd4:	61da      	str	r2, [r3, #28]
	return res;
 800ebd6:	7dfb      	ldrb	r3, [r7, #23]
}
 800ebd8:	4618      	mov	r0, r3
 800ebda:	3718      	adds	r7, #24
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	bd80      	pop	{r7, pc}

0800ebe0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ebe0:	b580      	push	{r7, lr}
 800ebe2:	b086      	sub	sp, #24
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ebee:	2100      	movs	r1, #0
 800ebf0:	6878      	ldr	r0, [r7, #4]
 800ebf2:	f7ff fdb3 	bl	800e75c <dir_sdi>
 800ebf6:	4603      	mov	r3, r0
 800ebf8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ebfa:	7dfb      	ldrb	r3, [r7, #23]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d001      	beq.n	800ec04 <dir_find+0x24>
 800ec00:	7dfb      	ldrb	r3, [r7, #23]
 800ec02:	e03e      	b.n	800ec82 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	69db      	ldr	r3, [r3, #28]
 800ec08:	4619      	mov	r1, r3
 800ec0a:	6938      	ldr	r0, [r7, #16]
 800ec0c:	f7ff f9c4 	bl	800df98 <move_window>
 800ec10:	4603      	mov	r3, r0
 800ec12:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ec14:	7dfb      	ldrb	r3, [r7, #23]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d12f      	bne.n	800ec7a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	6a1b      	ldr	r3, [r3, #32]
 800ec1e:	781b      	ldrb	r3, [r3, #0]
 800ec20:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ec22:	7bfb      	ldrb	r3, [r7, #15]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d102      	bne.n	800ec2e <dir_find+0x4e>
 800ec28:	2304      	movs	r3, #4
 800ec2a:	75fb      	strb	r3, [r7, #23]
 800ec2c:	e028      	b.n	800ec80 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	6a1b      	ldr	r3, [r3, #32]
 800ec32:	330b      	adds	r3, #11
 800ec34:	781b      	ldrb	r3, [r3, #0]
 800ec36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ec3a:	b2da      	uxtb	r2, r3
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	6a1b      	ldr	r3, [r3, #32]
 800ec44:	330b      	adds	r3, #11
 800ec46:	781b      	ldrb	r3, [r3, #0]
 800ec48:	f003 0308 	and.w	r3, r3, #8
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d10a      	bne.n	800ec66 <dir_find+0x86>
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	6a18      	ldr	r0, [r3, #32]
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	3324      	adds	r3, #36	; 0x24
 800ec58:	220b      	movs	r2, #11
 800ec5a:	4619      	mov	r1, r3
 800ec5c:	f7fe ffaa 	bl	800dbb4 <mem_cmp>
 800ec60:	4603      	mov	r3, r0
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d00b      	beq.n	800ec7e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ec66:	2100      	movs	r1, #0
 800ec68:	6878      	ldr	r0, [r7, #4]
 800ec6a:	f7ff fe00 	bl	800e86e <dir_next>
 800ec6e:	4603      	mov	r3, r0
 800ec70:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ec72:	7dfb      	ldrb	r3, [r7, #23]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d0c5      	beq.n	800ec04 <dir_find+0x24>
 800ec78:	e002      	b.n	800ec80 <dir_find+0xa0>
		if (res != FR_OK) break;
 800ec7a:	bf00      	nop
 800ec7c:	e000      	b.n	800ec80 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ec7e:	bf00      	nop

	return res;
 800ec80:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec82:	4618      	mov	r0, r3
 800ec84:	3718      	adds	r7, #24
 800ec86:	46bd      	mov	sp, r7
 800ec88:	bd80      	pop	{r7, pc}

0800ec8a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ec8a:	b580      	push	{r7, lr}
 800ec8c:	b084      	sub	sp, #16
 800ec8e:	af00      	add	r7, sp, #0
 800ec90:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800ec98:	2101      	movs	r1, #1
 800ec9a:	6878      	ldr	r0, [r7, #4]
 800ec9c:	f7ff febd 	bl	800ea1a <dir_alloc>
 800eca0:	4603      	mov	r3, r0
 800eca2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800eca4:	7bfb      	ldrb	r3, [r7, #15]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d11c      	bne.n	800ece4 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	69db      	ldr	r3, [r3, #28]
 800ecae:	4619      	mov	r1, r3
 800ecb0:	68b8      	ldr	r0, [r7, #8]
 800ecb2:	f7ff f971 	bl	800df98 <move_window>
 800ecb6:	4603      	mov	r3, r0
 800ecb8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ecba:	7bfb      	ldrb	r3, [r7, #15]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d111      	bne.n	800ece4 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	6a1b      	ldr	r3, [r3, #32]
 800ecc4:	2220      	movs	r2, #32
 800ecc6:	2100      	movs	r1, #0
 800ecc8:	4618      	mov	r0, r3
 800ecca:	f7fe ff58 	bl	800db7e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	6a18      	ldr	r0, [r3, #32]
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	3324      	adds	r3, #36	; 0x24
 800ecd6:	220b      	movs	r2, #11
 800ecd8:	4619      	mov	r1, r3
 800ecda:	f7fe ff2f 	bl	800db3c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800ecde:	68bb      	ldr	r3, [r7, #8]
 800ece0:	2201      	movs	r2, #1
 800ece2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ece4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ece6:	4618      	mov	r0, r3
 800ece8:	3710      	adds	r7, #16
 800ecea:	46bd      	mov	sp, r7
 800ecec:	bd80      	pop	{r7, pc}

0800ecee <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800ecee:	b580      	push	{r7, lr}
 800ecf0:	b084      	sub	sp, #16
 800ecf2:	af00      	add	r7, sp, #0
 800ecf4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	69db      	ldr	r3, [r3, #28]
 800ed00:	4619      	mov	r1, r3
 800ed02:	68f8      	ldr	r0, [r7, #12]
 800ed04:	f7ff f948 	bl	800df98 <move_window>
 800ed08:	4603      	mov	r3, r0
 800ed0a:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 800ed0c:	7afb      	ldrb	r3, [r7, #11]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d106      	bne.n	800ed20 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	6a1b      	ldr	r3, [r3, #32]
 800ed16:	22e5      	movs	r2, #229	; 0xe5
 800ed18:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	2201      	movs	r2, #1
 800ed1e:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 800ed20:	7afb      	ldrb	r3, [r7, #11]
}
 800ed22:	4618      	mov	r0, r3
 800ed24:	3710      	adds	r7, #16
 800ed26:	46bd      	mov	sp, r7
 800ed28:	bd80      	pop	{r7, pc}

0800ed2a <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800ed2a:	b580      	push	{r7, lr}
 800ed2c:	b086      	sub	sp, #24
 800ed2e:	af00      	add	r7, sp, #0
 800ed30:	6078      	str	r0, [r7, #4]
 800ed32:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800ed34:	683b      	ldr	r3, [r7, #0]
 800ed36:	2200      	movs	r2, #0
 800ed38:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	69db      	ldr	r3, [r3, #28]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d04e      	beq.n	800ede0 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800ed42:	2300      	movs	r3, #0
 800ed44:	613b      	str	r3, [r7, #16]
 800ed46:	693b      	ldr	r3, [r7, #16]
 800ed48:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800ed4a:	e021      	b.n	800ed90 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	6a1a      	ldr	r2, [r3, #32]
 800ed50:	697b      	ldr	r3, [r7, #20]
 800ed52:	1c59      	adds	r1, r3, #1
 800ed54:	6179      	str	r1, [r7, #20]
 800ed56:	4413      	add	r3, r2
 800ed58:	781b      	ldrb	r3, [r3, #0]
 800ed5a:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800ed5c:	7bfb      	ldrb	r3, [r7, #15]
 800ed5e:	2b20      	cmp	r3, #32
 800ed60:	d100      	bne.n	800ed64 <get_fileinfo+0x3a>
 800ed62:	e015      	b.n	800ed90 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800ed64:	7bfb      	ldrb	r3, [r7, #15]
 800ed66:	2b05      	cmp	r3, #5
 800ed68:	d101      	bne.n	800ed6e <get_fileinfo+0x44>
 800ed6a:	23e5      	movs	r3, #229	; 0xe5
 800ed6c:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800ed6e:	697b      	ldr	r3, [r7, #20]
 800ed70:	2b09      	cmp	r3, #9
 800ed72:	d106      	bne.n	800ed82 <get_fileinfo+0x58>
 800ed74:	693b      	ldr	r3, [r7, #16]
 800ed76:	1c5a      	adds	r2, r3, #1
 800ed78:	613a      	str	r2, [r7, #16]
 800ed7a:	683a      	ldr	r2, [r7, #0]
 800ed7c:	4413      	add	r3, r2
 800ed7e:	222e      	movs	r2, #46	; 0x2e
 800ed80:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800ed82:	693b      	ldr	r3, [r7, #16]
 800ed84:	1c5a      	adds	r2, r3, #1
 800ed86:	613a      	str	r2, [r7, #16]
 800ed88:	683a      	ldr	r2, [r7, #0]
 800ed8a:	4413      	add	r3, r2
 800ed8c:	7bfa      	ldrb	r2, [r7, #15]
 800ed8e:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800ed90:	697b      	ldr	r3, [r7, #20]
 800ed92:	2b0a      	cmp	r3, #10
 800ed94:	d9da      	bls.n	800ed4c <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800ed96:	683a      	ldr	r2, [r7, #0]
 800ed98:	693b      	ldr	r3, [r7, #16]
 800ed9a:	4413      	add	r3, r2
 800ed9c:	3309      	adds	r3, #9
 800ed9e:	2200      	movs	r2, #0
 800eda0:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	6a1b      	ldr	r3, [r3, #32]
 800eda6:	7ada      	ldrb	r2, [r3, #11]
 800eda8:	683b      	ldr	r3, [r7, #0]
 800edaa:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	6a1b      	ldr	r3, [r3, #32]
 800edb0:	331c      	adds	r3, #28
 800edb2:	4618      	mov	r0, r3
 800edb4:	f7fe fe58 	bl	800da68 <ld_dword>
 800edb8:	4602      	mov	r2, r0
 800edba:	683b      	ldr	r3, [r7, #0]
 800edbc:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	6a1b      	ldr	r3, [r3, #32]
 800edc2:	3316      	adds	r3, #22
 800edc4:	4618      	mov	r0, r3
 800edc6:	f7fe fe4f 	bl	800da68 <ld_dword>
 800edca:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800edcc:	68bb      	ldr	r3, [r7, #8]
 800edce:	b29a      	uxth	r2, r3
 800edd0:	683b      	ldr	r3, [r7, #0]
 800edd2:	80da      	strh	r2, [r3, #6]
 800edd4:	68bb      	ldr	r3, [r7, #8]
 800edd6:	0c1b      	lsrs	r3, r3, #16
 800edd8:	b29a      	uxth	r2, r3
 800edda:	683b      	ldr	r3, [r7, #0]
 800eddc:	809a      	strh	r2, [r3, #4]
 800edde:	e000      	b.n	800ede2 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800ede0:	bf00      	nop
}
 800ede2:	3718      	adds	r7, #24
 800ede4:	46bd      	mov	sp, r7
 800ede6:	bd80      	pop	{r7, pc}

0800ede8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ede8:	b580      	push	{r7, lr}
 800edea:	b088      	sub	sp, #32
 800edec:	af00      	add	r7, sp, #0
 800edee:	6078      	str	r0, [r7, #4]
 800edf0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800edf2:	683b      	ldr	r3, [r7, #0]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	60fb      	str	r3, [r7, #12]
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	3324      	adds	r3, #36	; 0x24
 800edfc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800edfe:	220b      	movs	r2, #11
 800ee00:	2120      	movs	r1, #32
 800ee02:	68b8      	ldr	r0, [r7, #8]
 800ee04:	f7fe febb 	bl	800db7e <mem_set>
	si = i = 0; ni = 8;
 800ee08:	2300      	movs	r3, #0
 800ee0a:	613b      	str	r3, [r7, #16]
 800ee0c:	693b      	ldr	r3, [r7, #16]
 800ee0e:	61fb      	str	r3, [r7, #28]
 800ee10:	2308      	movs	r3, #8
 800ee12:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800ee14:	69fb      	ldr	r3, [r7, #28]
 800ee16:	1c5a      	adds	r2, r3, #1
 800ee18:	61fa      	str	r2, [r7, #28]
 800ee1a:	68fa      	ldr	r2, [r7, #12]
 800ee1c:	4413      	add	r3, r2
 800ee1e:	781b      	ldrb	r3, [r3, #0]
 800ee20:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ee22:	7efb      	ldrb	r3, [r7, #27]
 800ee24:	2b20      	cmp	r3, #32
 800ee26:	d94e      	bls.n	800eec6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800ee28:	7efb      	ldrb	r3, [r7, #27]
 800ee2a:	2b2f      	cmp	r3, #47	; 0x2f
 800ee2c:	d006      	beq.n	800ee3c <create_name+0x54>
 800ee2e:	7efb      	ldrb	r3, [r7, #27]
 800ee30:	2b5c      	cmp	r3, #92	; 0x5c
 800ee32:	d110      	bne.n	800ee56 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ee34:	e002      	b.n	800ee3c <create_name+0x54>
 800ee36:	69fb      	ldr	r3, [r7, #28]
 800ee38:	3301      	adds	r3, #1
 800ee3a:	61fb      	str	r3, [r7, #28]
 800ee3c:	68fa      	ldr	r2, [r7, #12]
 800ee3e:	69fb      	ldr	r3, [r7, #28]
 800ee40:	4413      	add	r3, r2
 800ee42:	781b      	ldrb	r3, [r3, #0]
 800ee44:	2b2f      	cmp	r3, #47	; 0x2f
 800ee46:	d0f6      	beq.n	800ee36 <create_name+0x4e>
 800ee48:	68fa      	ldr	r2, [r7, #12]
 800ee4a:	69fb      	ldr	r3, [r7, #28]
 800ee4c:	4413      	add	r3, r2
 800ee4e:	781b      	ldrb	r3, [r3, #0]
 800ee50:	2b5c      	cmp	r3, #92	; 0x5c
 800ee52:	d0f0      	beq.n	800ee36 <create_name+0x4e>
			break;
 800ee54:	e038      	b.n	800eec8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800ee56:	7efb      	ldrb	r3, [r7, #27]
 800ee58:	2b2e      	cmp	r3, #46	; 0x2e
 800ee5a:	d003      	beq.n	800ee64 <create_name+0x7c>
 800ee5c:	693a      	ldr	r2, [r7, #16]
 800ee5e:	697b      	ldr	r3, [r7, #20]
 800ee60:	429a      	cmp	r2, r3
 800ee62:	d30c      	bcc.n	800ee7e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800ee64:	697b      	ldr	r3, [r7, #20]
 800ee66:	2b0b      	cmp	r3, #11
 800ee68:	d002      	beq.n	800ee70 <create_name+0x88>
 800ee6a:	7efb      	ldrb	r3, [r7, #27]
 800ee6c:	2b2e      	cmp	r3, #46	; 0x2e
 800ee6e:	d001      	beq.n	800ee74 <create_name+0x8c>
 800ee70:	2306      	movs	r3, #6
 800ee72:	e044      	b.n	800eefe <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800ee74:	2308      	movs	r3, #8
 800ee76:	613b      	str	r3, [r7, #16]
 800ee78:	230b      	movs	r3, #11
 800ee7a:	617b      	str	r3, [r7, #20]
			continue;
 800ee7c:	e022      	b.n	800eec4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800ee7e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	da04      	bge.n	800ee90 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800ee86:	7efb      	ldrb	r3, [r7, #27]
 800ee88:	3b80      	subs	r3, #128	; 0x80
 800ee8a:	4a1f      	ldr	r2, [pc, #124]	; (800ef08 <create_name+0x120>)
 800ee8c:	5cd3      	ldrb	r3, [r2, r3]
 800ee8e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800ee90:	7efb      	ldrb	r3, [r7, #27]
 800ee92:	4619      	mov	r1, r3
 800ee94:	481d      	ldr	r0, [pc, #116]	; (800ef0c <create_name+0x124>)
 800ee96:	f7fe feb4 	bl	800dc02 <chk_chr>
 800ee9a:	4603      	mov	r3, r0
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d001      	beq.n	800eea4 <create_name+0xbc>
 800eea0:	2306      	movs	r3, #6
 800eea2:	e02c      	b.n	800eefe <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800eea4:	7efb      	ldrb	r3, [r7, #27]
 800eea6:	2b60      	cmp	r3, #96	; 0x60
 800eea8:	d905      	bls.n	800eeb6 <create_name+0xce>
 800eeaa:	7efb      	ldrb	r3, [r7, #27]
 800eeac:	2b7a      	cmp	r3, #122	; 0x7a
 800eeae:	d802      	bhi.n	800eeb6 <create_name+0xce>
 800eeb0:	7efb      	ldrb	r3, [r7, #27]
 800eeb2:	3b20      	subs	r3, #32
 800eeb4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800eeb6:	693b      	ldr	r3, [r7, #16]
 800eeb8:	1c5a      	adds	r2, r3, #1
 800eeba:	613a      	str	r2, [r7, #16]
 800eebc:	68ba      	ldr	r2, [r7, #8]
 800eebe:	4413      	add	r3, r2
 800eec0:	7efa      	ldrb	r2, [r7, #27]
 800eec2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800eec4:	e7a6      	b.n	800ee14 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800eec6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800eec8:	68fa      	ldr	r2, [r7, #12]
 800eeca:	69fb      	ldr	r3, [r7, #28]
 800eecc:	441a      	add	r2, r3
 800eece:	683b      	ldr	r3, [r7, #0]
 800eed0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800eed2:	693b      	ldr	r3, [r7, #16]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d101      	bne.n	800eedc <create_name+0xf4>
 800eed8:	2306      	movs	r3, #6
 800eeda:	e010      	b.n	800eefe <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800eedc:	68bb      	ldr	r3, [r7, #8]
 800eede:	781b      	ldrb	r3, [r3, #0]
 800eee0:	2be5      	cmp	r3, #229	; 0xe5
 800eee2:	d102      	bne.n	800eeea <create_name+0x102>
 800eee4:	68bb      	ldr	r3, [r7, #8]
 800eee6:	2205      	movs	r2, #5
 800eee8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800eeea:	7efb      	ldrb	r3, [r7, #27]
 800eeec:	2b20      	cmp	r3, #32
 800eeee:	d801      	bhi.n	800eef4 <create_name+0x10c>
 800eef0:	2204      	movs	r2, #4
 800eef2:	e000      	b.n	800eef6 <create_name+0x10e>
 800eef4:	2200      	movs	r2, #0
 800eef6:	68bb      	ldr	r3, [r7, #8]
 800eef8:	330b      	adds	r3, #11
 800eefa:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800eefc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800eefe:	4618      	mov	r0, r3
 800ef00:	3720      	adds	r7, #32
 800ef02:	46bd      	mov	sp, r7
 800ef04:	bd80      	pop	{r7, pc}
 800ef06:	bf00      	nop
 800ef08:	08018e88 	.word	0x08018e88
 800ef0c:	08018e04 	.word	0x08018e04

0800ef10 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ef10:	b580      	push	{r7, lr}
 800ef12:	b086      	sub	sp, #24
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	6078      	str	r0, [r7, #4]
 800ef18:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ef1e:	693b      	ldr	r3, [r7, #16]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ef24:	e002      	b.n	800ef2c <follow_path+0x1c>
 800ef26:	683b      	ldr	r3, [r7, #0]
 800ef28:	3301      	adds	r3, #1
 800ef2a:	603b      	str	r3, [r7, #0]
 800ef2c:	683b      	ldr	r3, [r7, #0]
 800ef2e:	781b      	ldrb	r3, [r3, #0]
 800ef30:	2b2f      	cmp	r3, #47	; 0x2f
 800ef32:	d0f8      	beq.n	800ef26 <follow_path+0x16>
 800ef34:	683b      	ldr	r3, [r7, #0]
 800ef36:	781b      	ldrb	r3, [r3, #0]
 800ef38:	2b5c      	cmp	r3, #92	; 0x5c
 800ef3a:	d0f4      	beq.n	800ef26 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ef3c:	693b      	ldr	r3, [r7, #16]
 800ef3e:	2200      	movs	r2, #0
 800ef40:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ef42:	683b      	ldr	r3, [r7, #0]
 800ef44:	781b      	ldrb	r3, [r3, #0]
 800ef46:	2b1f      	cmp	r3, #31
 800ef48:	d80a      	bhi.n	800ef60 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	2280      	movs	r2, #128	; 0x80
 800ef4e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800ef52:	2100      	movs	r1, #0
 800ef54:	6878      	ldr	r0, [r7, #4]
 800ef56:	f7ff fc01 	bl	800e75c <dir_sdi>
 800ef5a:	4603      	mov	r3, r0
 800ef5c:	75fb      	strb	r3, [r7, #23]
 800ef5e:	e048      	b.n	800eff2 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ef60:	463b      	mov	r3, r7
 800ef62:	4619      	mov	r1, r3
 800ef64:	6878      	ldr	r0, [r7, #4]
 800ef66:	f7ff ff3f 	bl	800ede8 <create_name>
 800ef6a:	4603      	mov	r3, r0
 800ef6c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ef6e:	7dfb      	ldrb	r3, [r7, #23]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d139      	bne.n	800efe8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ef74:	6878      	ldr	r0, [r7, #4]
 800ef76:	f7ff fe33 	bl	800ebe0 <dir_find>
 800ef7a:	4603      	mov	r3, r0
 800ef7c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ef84:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ef86:	7dfb      	ldrb	r3, [r7, #23]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d00a      	beq.n	800efa2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ef8c:	7dfb      	ldrb	r3, [r7, #23]
 800ef8e:	2b04      	cmp	r3, #4
 800ef90:	d12c      	bne.n	800efec <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ef92:	7afb      	ldrb	r3, [r7, #11]
 800ef94:	f003 0304 	and.w	r3, r3, #4
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d127      	bne.n	800efec <follow_path+0xdc>
 800ef9c:	2305      	movs	r3, #5
 800ef9e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800efa0:	e024      	b.n	800efec <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800efa2:	7afb      	ldrb	r3, [r7, #11]
 800efa4:	f003 0304 	and.w	r3, r3, #4
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d121      	bne.n	800eff0 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800efac:	693b      	ldr	r3, [r7, #16]
 800efae:	799b      	ldrb	r3, [r3, #6]
 800efb0:	f003 0310 	and.w	r3, r3, #16
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d102      	bne.n	800efbe <follow_path+0xae>
				res = FR_NO_PATH; break;
 800efb8:	2305      	movs	r3, #5
 800efba:	75fb      	strb	r3, [r7, #23]
 800efbc:	e019      	b.n	800eff2 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	695b      	ldr	r3, [r3, #20]
 800efc8:	68fa      	ldr	r2, [r7, #12]
 800efca:	8992      	ldrh	r2, [r2, #12]
 800efcc:	fbb3 f0f2 	udiv	r0, r3, r2
 800efd0:	fb00 f202 	mul.w	r2, r0, r2
 800efd4:	1a9b      	subs	r3, r3, r2
 800efd6:	440b      	add	r3, r1
 800efd8:	4619      	mov	r1, r3
 800efda:	68f8      	ldr	r0, [r7, #12]
 800efdc:	f7ff fd64 	bl	800eaa8 <ld_clust>
 800efe0:	4602      	mov	r2, r0
 800efe2:	693b      	ldr	r3, [r7, #16]
 800efe4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800efe6:	e7bb      	b.n	800ef60 <follow_path+0x50>
			if (res != FR_OK) break;
 800efe8:	bf00      	nop
 800efea:	e002      	b.n	800eff2 <follow_path+0xe2>
				break;
 800efec:	bf00      	nop
 800efee:	e000      	b.n	800eff2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800eff0:	bf00      	nop
			}
		}
	}

	return res;
 800eff2:	7dfb      	ldrb	r3, [r7, #23]
}
 800eff4:	4618      	mov	r0, r3
 800eff6:	3718      	adds	r7, #24
 800eff8:	46bd      	mov	sp, r7
 800effa:	bd80      	pop	{r7, pc}

0800effc <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800effc:	b480      	push	{r7}
 800effe:	b087      	sub	sp, #28
 800f000:	af00      	add	r7, sp, #0
 800f002:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f004:	f04f 33ff 	mov.w	r3, #4294967295
 800f008:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d031      	beq.n	800f076 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	617b      	str	r3, [r7, #20]
 800f018:	e002      	b.n	800f020 <get_ldnumber+0x24>
 800f01a:	697b      	ldr	r3, [r7, #20]
 800f01c:	3301      	adds	r3, #1
 800f01e:	617b      	str	r3, [r7, #20]
 800f020:	697b      	ldr	r3, [r7, #20]
 800f022:	781b      	ldrb	r3, [r3, #0]
 800f024:	2b20      	cmp	r3, #32
 800f026:	d903      	bls.n	800f030 <get_ldnumber+0x34>
 800f028:	697b      	ldr	r3, [r7, #20]
 800f02a:	781b      	ldrb	r3, [r3, #0]
 800f02c:	2b3a      	cmp	r3, #58	; 0x3a
 800f02e:	d1f4      	bne.n	800f01a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f030:	697b      	ldr	r3, [r7, #20]
 800f032:	781b      	ldrb	r3, [r3, #0]
 800f034:	2b3a      	cmp	r3, #58	; 0x3a
 800f036:	d11c      	bne.n	800f072 <get_ldnumber+0x76>
			tp = *path;
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	1c5a      	adds	r2, r3, #1
 800f042:	60fa      	str	r2, [r7, #12]
 800f044:	781b      	ldrb	r3, [r3, #0]
 800f046:	3b30      	subs	r3, #48	; 0x30
 800f048:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f04a:	68bb      	ldr	r3, [r7, #8]
 800f04c:	2b09      	cmp	r3, #9
 800f04e:	d80e      	bhi.n	800f06e <get_ldnumber+0x72>
 800f050:	68fa      	ldr	r2, [r7, #12]
 800f052:	697b      	ldr	r3, [r7, #20]
 800f054:	429a      	cmp	r2, r3
 800f056:	d10a      	bne.n	800f06e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f058:	68bb      	ldr	r3, [r7, #8]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d107      	bne.n	800f06e <get_ldnumber+0x72>
					vol = (int)i;
 800f05e:	68bb      	ldr	r3, [r7, #8]
 800f060:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f062:	697b      	ldr	r3, [r7, #20]
 800f064:	3301      	adds	r3, #1
 800f066:	617b      	str	r3, [r7, #20]
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	697a      	ldr	r2, [r7, #20]
 800f06c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f06e:	693b      	ldr	r3, [r7, #16]
 800f070:	e002      	b.n	800f078 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f072:	2300      	movs	r3, #0
 800f074:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f076:	693b      	ldr	r3, [r7, #16]
}
 800f078:	4618      	mov	r0, r3
 800f07a:	371c      	adds	r7, #28
 800f07c:	46bd      	mov	sp, r7
 800f07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f082:	4770      	bx	lr

0800f084 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f084:	b580      	push	{r7, lr}
 800f086:	b082      	sub	sp, #8
 800f088:	af00      	add	r7, sp, #0
 800f08a:	6078      	str	r0, [r7, #4]
 800f08c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	2200      	movs	r2, #0
 800f092:	70da      	strb	r2, [r3, #3]
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	f04f 32ff 	mov.w	r2, #4294967295
 800f09a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f09c:	6839      	ldr	r1, [r7, #0]
 800f09e:	6878      	ldr	r0, [r7, #4]
 800f0a0:	f7fe ff7a 	bl	800df98 <move_window>
 800f0a4:	4603      	mov	r3, r0
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d001      	beq.n	800f0ae <check_fs+0x2a>
 800f0aa:	2304      	movs	r3, #4
 800f0ac:	e038      	b.n	800f120 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	3334      	adds	r3, #52	; 0x34
 800f0b2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	f7fe fcbe 	bl	800da38 <ld_word>
 800f0bc:	4603      	mov	r3, r0
 800f0be:	461a      	mov	r2, r3
 800f0c0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f0c4:	429a      	cmp	r2, r3
 800f0c6:	d001      	beq.n	800f0cc <check_fs+0x48>
 800f0c8:	2303      	movs	r3, #3
 800f0ca:	e029      	b.n	800f120 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f0d2:	2be9      	cmp	r3, #233	; 0xe9
 800f0d4:	d009      	beq.n	800f0ea <check_fs+0x66>
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f0dc:	2beb      	cmp	r3, #235	; 0xeb
 800f0de:	d11e      	bne.n	800f11e <check_fs+0x9a>
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800f0e6:	2b90      	cmp	r3, #144	; 0x90
 800f0e8:	d119      	bne.n	800f11e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	3334      	adds	r3, #52	; 0x34
 800f0ee:	3336      	adds	r3, #54	; 0x36
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	f7fe fcb9 	bl	800da68 <ld_dword>
 800f0f6:	4603      	mov	r3, r0
 800f0f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f0fc:	4a0a      	ldr	r2, [pc, #40]	; (800f128 <check_fs+0xa4>)
 800f0fe:	4293      	cmp	r3, r2
 800f100:	d101      	bne.n	800f106 <check_fs+0x82>
 800f102:	2300      	movs	r3, #0
 800f104:	e00c      	b.n	800f120 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	3334      	adds	r3, #52	; 0x34
 800f10a:	3352      	adds	r3, #82	; 0x52
 800f10c:	4618      	mov	r0, r3
 800f10e:	f7fe fcab 	bl	800da68 <ld_dword>
 800f112:	4603      	mov	r3, r0
 800f114:	4a05      	ldr	r2, [pc, #20]	; (800f12c <check_fs+0xa8>)
 800f116:	4293      	cmp	r3, r2
 800f118:	d101      	bne.n	800f11e <check_fs+0x9a>
 800f11a:	2300      	movs	r3, #0
 800f11c:	e000      	b.n	800f120 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800f11e:	2302      	movs	r3, #2
}
 800f120:	4618      	mov	r0, r3
 800f122:	3708      	adds	r7, #8
 800f124:	46bd      	mov	sp, r7
 800f126:	bd80      	pop	{r7, pc}
 800f128:	00544146 	.word	0x00544146
 800f12c:	33544146 	.word	0x33544146

0800f130 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f130:	b580      	push	{r7, lr}
 800f132:	b096      	sub	sp, #88	; 0x58
 800f134:	af00      	add	r7, sp, #0
 800f136:	60f8      	str	r0, [r7, #12]
 800f138:	60b9      	str	r1, [r7, #8]
 800f13a:	4613      	mov	r3, r2
 800f13c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f13e:	68bb      	ldr	r3, [r7, #8]
 800f140:	2200      	movs	r2, #0
 800f142:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f144:	68f8      	ldr	r0, [r7, #12]
 800f146:	f7ff ff59 	bl	800effc <get_ldnumber>
 800f14a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f14c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f14e:	2b00      	cmp	r3, #0
 800f150:	da01      	bge.n	800f156 <find_volume+0x26>
 800f152:	230b      	movs	r3, #11
 800f154:	e262      	b.n	800f61c <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f156:	4a9f      	ldr	r2, [pc, #636]	; (800f3d4 <find_volume+0x2a4>)
 800f158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f15a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f15e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f162:	2b00      	cmp	r3, #0
 800f164:	d101      	bne.n	800f16a <find_volume+0x3a>
 800f166:	230c      	movs	r3, #12
 800f168:	e258      	b.n	800f61c <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800f16a:	68bb      	ldr	r3, [r7, #8]
 800f16c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f16e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f170:	79fb      	ldrb	r3, [r7, #7]
 800f172:	f023 0301 	bic.w	r3, r3, #1
 800f176:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f17a:	781b      	ldrb	r3, [r3, #0]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d01a      	beq.n	800f1b6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800f180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f182:	785b      	ldrb	r3, [r3, #1]
 800f184:	4618      	mov	r0, r3
 800f186:	f7fe fbb9 	bl	800d8fc <disk_status>
 800f18a:	4603      	mov	r3, r0
 800f18c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f190:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f194:	f003 0301 	and.w	r3, r3, #1
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d10c      	bne.n	800f1b6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f19c:	79fb      	ldrb	r3, [r7, #7]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d007      	beq.n	800f1b2 <find_volume+0x82>
 800f1a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f1a6:	f003 0304 	and.w	r3, r3, #4
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d001      	beq.n	800f1b2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800f1ae:	230a      	movs	r3, #10
 800f1b0:	e234      	b.n	800f61c <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	e232      	b.n	800f61c <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f1b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1b8:	2200      	movs	r2, #0
 800f1ba:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f1bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1be:	b2da      	uxtb	r2, r3
 800f1c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1c2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1c6:	785b      	ldrb	r3, [r3, #1]
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	f7fe fbb1 	bl	800d930 <disk_initialize>
 800f1ce:	4603      	mov	r3, r0
 800f1d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f1d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f1d8:	f003 0301 	and.w	r3, r3, #1
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d001      	beq.n	800f1e4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f1e0:	2303      	movs	r3, #3
 800f1e2:	e21b      	b.n	800f61c <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f1e4:	79fb      	ldrb	r3, [r7, #7]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d007      	beq.n	800f1fa <find_volume+0xca>
 800f1ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f1ee:	f003 0304 	and.w	r3, r3, #4
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d001      	beq.n	800f1fa <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800f1f6:	230a      	movs	r3, #10
 800f1f8:	e210      	b.n	800f61c <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800f1fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1fc:	7858      	ldrb	r0, [r3, #1]
 800f1fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f200:	330c      	adds	r3, #12
 800f202:	461a      	mov	r2, r3
 800f204:	2102      	movs	r1, #2
 800f206:	f7fe fbf9 	bl	800d9fc <disk_ioctl>
 800f20a:	4603      	mov	r3, r0
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d001      	beq.n	800f214 <find_volume+0xe4>
 800f210:	2301      	movs	r3, #1
 800f212:	e203      	b.n	800f61c <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800f214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f216:	899b      	ldrh	r3, [r3, #12]
 800f218:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f21c:	d80d      	bhi.n	800f23a <find_volume+0x10a>
 800f21e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f220:	899b      	ldrh	r3, [r3, #12]
 800f222:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f226:	d308      	bcc.n	800f23a <find_volume+0x10a>
 800f228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f22a:	899b      	ldrh	r3, [r3, #12]
 800f22c:	461a      	mov	r2, r3
 800f22e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f230:	899b      	ldrh	r3, [r3, #12]
 800f232:	3b01      	subs	r3, #1
 800f234:	4013      	ands	r3, r2
 800f236:	2b00      	cmp	r3, #0
 800f238:	d001      	beq.n	800f23e <find_volume+0x10e>
 800f23a:	2301      	movs	r3, #1
 800f23c:	e1ee      	b.n	800f61c <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f23e:	2300      	movs	r3, #0
 800f240:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f242:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f244:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f246:	f7ff ff1d 	bl	800f084 <check_fs>
 800f24a:	4603      	mov	r3, r0
 800f24c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f250:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f254:	2b02      	cmp	r3, #2
 800f256:	d149      	bne.n	800f2ec <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f258:	2300      	movs	r3, #0
 800f25a:	643b      	str	r3, [r7, #64]	; 0x40
 800f25c:	e01e      	b.n	800f29c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f25e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f260:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f264:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f266:	011b      	lsls	r3, r3, #4
 800f268:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800f26c:	4413      	add	r3, r2
 800f26e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f272:	3304      	adds	r3, #4
 800f274:	781b      	ldrb	r3, [r3, #0]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d006      	beq.n	800f288 <find_volume+0x158>
 800f27a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f27c:	3308      	adds	r3, #8
 800f27e:	4618      	mov	r0, r3
 800f280:	f7fe fbf2 	bl	800da68 <ld_dword>
 800f284:	4602      	mov	r2, r0
 800f286:	e000      	b.n	800f28a <find_volume+0x15a>
 800f288:	2200      	movs	r2, #0
 800f28a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f28c:	009b      	lsls	r3, r3, #2
 800f28e:	3358      	adds	r3, #88	; 0x58
 800f290:	443b      	add	r3, r7
 800f292:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f296:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f298:	3301      	adds	r3, #1
 800f29a:	643b      	str	r3, [r7, #64]	; 0x40
 800f29c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f29e:	2b03      	cmp	r3, #3
 800f2a0:	d9dd      	bls.n	800f25e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f2a2:	2300      	movs	r3, #0
 800f2a4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800f2a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d002      	beq.n	800f2b2 <find_volume+0x182>
 800f2ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f2ae:	3b01      	subs	r3, #1
 800f2b0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f2b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f2b4:	009b      	lsls	r3, r3, #2
 800f2b6:	3358      	adds	r3, #88	; 0x58
 800f2b8:	443b      	add	r3, r7
 800f2ba:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f2be:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f2c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d005      	beq.n	800f2d2 <find_volume+0x1a2>
 800f2c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f2c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f2ca:	f7ff fedb 	bl	800f084 <check_fs>
 800f2ce:	4603      	mov	r3, r0
 800f2d0:	e000      	b.n	800f2d4 <find_volume+0x1a4>
 800f2d2:	2303      	movs	r3, #3
 800f2d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f2d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f2dc:	2b01      	cmp	r3, #1
 800f2de:	d905      	bls.n	800f2ec <find_volume+0x1bc>
 800f2e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f2e2:	3301      	adds	r3, #1
 800f2e4:	643b      	str	r3, [r7, #64]	; 0x40
 800f2e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f2e8:	2b03      	cmp	r3, #3
 800f2ea:	d9e2      	bls.n	800f2b2 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f2ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f2f0:	2b04      	cmp	r3, #4
 800f2f2:	d101      	bne.n	800f2f8 <find_volume+0x1c8>
 800f2f4:	2301      	movs	r3, #1
 800f2f6:	e191      	b.n	800f61c <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f2f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f2fc:	2b01      	cmp	r3, #1
 800f2fe:	d901      	bls.n	800f304 <find_volume+0x1d4>
 800f300:	230d      	movs	r3, #13
 800f302:	e18b      	b.n	800f61c <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f306:	3334      	adds	r3, #52	; 0x34
 800f308:	330b      	adds	r3, #11
 800f30a:	4618      	mov	r0, r3
 800f30c:	f7fe fb94 	bl	800da38 <ld_word>
 800f310:	4603      	mov	r3, r0
 800f312:	461a      	mov	r2, r3
 800f314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f316:	899b      	ldrh	r3, [r3, #12]
 800f318:	429a      	cmp	r2, r3
 800f31a:	d001      	beq.n	800f320 <find_volume+0x1f0>
 800f31c:	230d      	movs	r3, #13
 800f31e:	e17d      	b.n	800f61c <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f322:	3334      	adds	r3, #52	; 0x34
 800f324:	3316      	adds	r3, #22
 800f326:	4618      	mov	r0, r3
 800f328:	f7fe fb86 	bl	800da38 <ld_word>
 800f32c:	4603      	mov	r3, r0
 800f32e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f330:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f332:	2b00      	cmp	r3, #0
 800f334:	d106      	bne.n	800f344 <find_volume+0x214>
 800f336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f338:	3334      	adds	r3, #52	; 0x34
 800f33a:	3324      	adds	r3, #36	; 0x24
 800f33c:	4618      	mov	r0, r3
 800f33e:	f7fe fb93 	bl	800da68 <ld_dword>
 800f342:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800f344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f346:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f348:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f34a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f34c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800f350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f352:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f356:	789b      	ldrb	r3, [r3, #2]
 800f358:	2b01      	cmp	r3, #1
 800f35a:	d005      	beq.n	800f368 <find_volume+0x238>
 800f35c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f35e:	789b      	ldrb	r3, [r3, #2]
 800f360:	2b02      	cmp	r3, #2
 800f362:	d001      	beq.n	800f368 <find_volume+0x238>
 800f364:	230d      	movs	r3, #13
 800f366:	e159      	b.n	800f61c <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f36a:	789b      	ldrb	r3, [r3, #2]
 800f36c:	461a      	mov	r2, r3
 800f36e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f370:	fb02 f303 	mul.w	r3, r2, r3
 800f374:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f378:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f37c:	b29a      	uxth	r2, r3
 800f37e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f380:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f384:	895b      	ldrh	r3, [r3, #10]
 800f386:	2b00      	cmp	r3, #0
 800f388:	d008      	beq.n	800f39c <find_volume+0x26c>
 800f38a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f38c:	895b      	ldrh	r3, [r3, #10]
 800f38e:	461a      	mov	r2, r3
 800f390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f392:	895b      	ldrh	r3, [r3, #10]
 800f394:	3b01      	subs	r3, #1
 800f396:	4013      	ands	r3, r2
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d001      	beq.n	800f3a0 <find_volume+0x270>
 800f39c:	230d      	movs	r3, #13
 800f39e:	e13d      	b.n	800f61c <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f3a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3a2:	3334      	adds	r3, #52	; 0x34
 800f3a4:	3311      	adds	r3, #17
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	f7fe fb46 	bl	800da38 <ld_word>
 800f3ac:	4603      	mov	r3, r0
 800f3ae:	461a      	mov	r2, r3
 800f3b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3b2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f3b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3b6:	891b      	ldrh	r3, [r3, #8]
 800f3b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f3ba:	8992      	ldrh	r2, [r2, #12]
 800f3bc:	0952      	lsrs	r2, r2, #5
 800f3be:	b292      	uxth	r2, r2
 800f3c0:	fbb3 f1f2 	udiv	r1, r3, r2
 800f3c4:	fb01 f202 	mul.w	r2, r1, r2
 800f3c8:	1a9b      	subs	r3, r3, r2
 800f3ca:	b29b      	uxth	r3, r3
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d003      	beq.n	800f3d8 <find_volume+0x2a8>
 800f3d0:	230d      	movs	r3, #13
 800f3d2:	e123      	b.n	800f61c <find_volume+0x4ec>
 800f3d4:	20007ac8 	.word	0x20007ac8

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f3d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3da:	3334      	adds	r3, #52	; 0x34
 800f3dc:	3313      	adds	r3, #19
 800f3de:	4618      	mov	r0, r3
 800f3e0:	f7fe fb2a 	bl	800da38 <ld_word>
 800f3e4:	4603      	mov	r3, r0
 800f3e6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f3e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d106      	bne.n	800f3fc <find_volume+0x2cc>
 800f3ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3f0:	3334      	adds	r3, #52	; 0x34
 800f3f2:	3320      	adds	r3, #32
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	f7fe fb37 	bl	800da68 <ld_dword>
 800f3fa:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f3fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3fe:	3334      	adds	r3, #52	; 0x34
 800f400:	330e      	adds	r3, #14
 800f402:	4618      	mov	r0, r3
 800f404:	f7fe fb18 	bl	800da38 <ld_word>
 800f408:	4603      	mov	r3, r0
 800f40a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f40c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d101      	bne.n	800f416 <find_volume+0x2e6>
 800f412:	230d      	movs	r3, #13
 800f414:	e102      	b.n	800f61c <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f416:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f418:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f41a:	4413      	add	r3, r2
 800f41c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f41e:	8911      	ldrh	r1, [r2, #8]
 800f420:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f422:	8992      	ldrh	r2, [r2, #12]
 800f424:	0952      	lsrs	r2, r2, #5
 800f426:	b292      	uxth	r2, r2
 800f428:	fbb1 f2f2 	udiv	r2, r1, r2
 800f42c:	b292      	uxth	r2, r2
 800f42e:	4413      	add	r3, r2
 800f430:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f432:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f436:	429a      	cmp	r2, r3
 800f438:	d201      	bcs.n	800f43e <find_volume+0x30e>
 800f43a:	230d      	movs	r3, #13
 800f43c:	e0ee      	b.n	800f61c <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f43e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f442:	1ad3      	subs	r3, r2, r3
 800f444:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f446:	8952      	ldrh	r2, [r2, #10]
 800f448:	fbb3 f3f2 	udiv	r3, r3, r2
 800f44c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f44e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f450:	2b00      	cmp	r3, #0
 800f452:	d101      	bne.n	800f458 <find_volume+0x328>
 800f454:	230d      	movs	r3, #13
 800f456:	e0e1      	b.n	800f61c <find_volume+0x4ec>
		fmt = FS_FAT32;
 800f458:	2303      	movs	r3, #3
 800f45a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f45e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f460:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f464:	4293      	cmp	r3, r2
 800f466:	d802      	bhi.n	800f46e <find_volume+0x33e>
 800f468:	2302      	movs	r3, #2
 800f46a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f470:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f474:	4293      	cmp	r3, r2
 800f476:	d802      	bhi.n	800f47e <find_volume+0x34e>
 800f478:	2301      	movs	r3, #1
 800f47a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f47e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f480:	1c9a      	adds	r2, r3, #2
 800f482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f484:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800f486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f488:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f48a:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f48c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f48e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f490:	441a      	add	r2, r3
 800f492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f494:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800f496:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f49a:	441a      	add	r2, r3
 800f49c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f49e:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800f4a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f4a4:	2b03      	cmp	r3, #3
 800f4a6:	d11e      	bne.n	800f4e6 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f4a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4aa:	3334      	adds	r3, #52	; 0x34
 800f4ac:	332a      	adds	r3, #42	; 0x2a
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	f7fe fac2 	bl	800da38 <ld_word>
 800f4b4:	4603      	mov	r3, r0
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d001      	beq.n	800f4be <find_volume+0x38e>
 800f4ba:	230d      	movs	r3, #13
 800f4bc:	e0ae      	b.n	800f61c <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f4be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4c0:	891b      	ldrh	r3, [r3, #8]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d001      	beq.n	800f4ca <find_volume+0x39a>
 800f4c6:	230d      	movs	r3, #13
 800f4c8:	e0a8      	b.n	800f61c <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f4ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4cc:	3334      	adds	r3, #52	; 0x34
 800f4ce:	332c      	adds	r3, #44	; 0x2c
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	f7fe fac9 	bl	800da68 <ld_dword>
 800f4d6:	4602      	mov	r2, r0
 800f4d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4da:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f4dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4de:	699b      	ldr	r3, [r3, #24]
 800f4e0:	009b      	lsls	r3, r3, #2
 800f4e2:	647b      	str	r3, [r7, #68]	; 0x44
 800f4e4:	e01f      	b.n	800f526 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f4e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4e8:	891b      	ldrh	r3, [r3, #8]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d101      	bne.n	800f4f2 <find_volume+0x3c2>
 800f4ee:	230d      	movs	r3, #13
 800f4f0:	e094      	b.n	800f61c <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f4f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f4f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f4f8:	441a      	add	r2, r3
 800f4fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4fc:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f4fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f502:	2b02      	cmp	r3, #2
 800f504:	d103      	bne.n	800f50e <find_volume+0x3de>
 800f506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f508:	699b      	ldr	r3, [r3, #24]
 800f50a:	005b      	lsls	r3, r3, #1
 800f50c:	e00a      	b.n	800f524 <find_volume+0x3f4>
 800f50e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f510:	699a      	ldr	r2, [r3, #24]
 800f512:	4613      	mov	r3, r2
 800f514:	005b      	lsls	r3, r3, #1
 800f516:	4413      	add	r3, r2
 800f518:	085a      	lsrs	r2, r3, #1
 800f51a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f51c:	699b      	ldr	r3, [r3, #24]
 800f51e:	f003 0301 	and.w	r3, r3, #1
 800f522:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f524:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f528:	69da      	ldr	r2, [r3, #28]
 800f52a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f52c:	899b      	ldrh	r3, [r3, #12]
 800f52e:	4619      	mov	r1, r3
 800f530:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f532:	440b      	add	r3, r1
 800f534:	3b01      	subs	r3, #1
 800f536:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f538:	8989      	ldrh	r1, [r1, #12]
 800f53a:	fbb3 f3f1 	udiv	r3, r3, r1
 800f53e:	429a      	cmp	r2, r3
 800f540:	d201      	bcs.n	800f546 <find_volume+0x416>
 800f542:	230d      	movs	r3, #13
 800f544:	e06a      	b.n	800f61c <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f548:	f04f 32ff 	mov.w	r2, #4294967295
 800f54c:	615a      	str	r2, [r3, #20]
 800f54e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f550:	695a      	ldr	r2, [r3, #20]
 800f552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f554:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800f556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f558:	2280      	movs	r2, #128	; 0x80
 800f55a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f55c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f560:	2b03      	cmp	r3, #3
 800f562:	d149      	bne.n	800f5f8 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f566:	3334      	adds	r3, #52	; 0x34
 800f568:	3330      	adds	r3, #48	; 0x30
 800f56a:	4618      	mov	r0, r3
 800f56c:	f7fe fa64 	bl	800da38 <ld_word>
 800f570:	4603      	mov	r3, r0
 800f572:	2b01      	cmp	r3, #1
 800f574:	d140      	bne.n	800f5f8 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f576:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f578:	3301      	adds	r3, #1
 800f57a:	4619      	mov	r1, r3
 800f57c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f57e:	f7fe fd0b 	bl	800df98 <move_window>
 800f582:	4603      	mov	r3, r0
 800f584:	2b00      	cmp	r3, #0
 800f586:	d137      	bne.n	800f5f8 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800f588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f58a:	2200      	movs	r2, #0
 800f58c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f58e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f590:	3334      	adds	r3, #52	; 0x34
 800f592:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f596:	4618      	mov	r0, r3
 800f598:	f7fe fa4e 	bl	800da38 <ld_word>
 800f59c:	4603      	mov	r3, r0
 800f59e:	461a      	mov	r2, r3
 800f5a0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f5a4:	429a      	cmp	r2, r3
 800f5a6:	d127      	bne.n	800f5f8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f5a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5aa:	3334      	adds	r3, #52	; 0x34
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	f7fe fa5b 	bl	800da68 <ld_dword>
 800f5b2:	4603      	mov	r3, r0
 800f5b4:	4a1b      	ldr	r2, [pc, #108]	; (800f624 <find_volume+0x4f4>)
 800f5b6:	4293      	cmp	r3, r2
 800f5b8:	d11e      	bne.n	800f5f8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f5ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5bc:	3334      	adds	r3, #52	; 0x34
 800f5be:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	f7fe fa50 	bl	800da68 <ld_dword>
 800f5c8:	4603      	mov	r3, r0
 800f5ca:	4a17      	ldr	r2, [pc, #92]	; (800f628 <find_volume+0x4f8>)
 800f5cc:	4293      	cmp	r3, r2
 800f5ce:	d113      	bne.n	800f5f8 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5d2:	3334      	adds	r3, #52	; 0x34
 800f5d4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800f5d8:	4618      	mov	r0, r3
 800f5da:	f7fe fa45 	bl	800da68 <ld_dword>
 800f5de:	4602      	mov	r2, r0
 800f5e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5e2:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f5e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5e6:	3334      	adds	r3, #52	; 0x34
 800f5e8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	f7fe fa3b 	bl	800da68 <ld_dword>
 800f5f2:	4602      	mov	r2, r0
 800f5f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5f6:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f5f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5fa:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800f5fe:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f600:	4b0a      	ldr	r3, [pc, #40]	; (800f62c <find_volume+0x4fc>)
 800f602:	881b      	ldrh	r3, [r3, #0]
 800f604:	3301      	adds	r3, #1
 800f606:	b29a      	uxth	r2, r3
 800f608:	4b08      	ldr	r3, [pc, #32]	; (800f62c <find_volume+0x4fc>)
 800f60a:	801a      	strh	r2, [r3, #0]
 800f60c:	4b07      	ldr	r3, [pc, #28]	; (800f62c <find_volume+0x4fc>)
 800f60e:	881a      	ldrh	r2, [r3, #0]
 800f610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f612:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f614:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f616:	f7fe fc57 	bl	800dec8 <clear_lock>
#endif
	return FR_OK;
 800f61a:	2300      	movs	r3, #0
}
 800f61c:	4618      	mov	r0, r3
 800f61e:	3758      	adds	r7, #88	; 0x58
 800f620:	46bd      	mov	sp, r7
 800f622:	bd80      	pop	{r7, pc}
 800f624:	41615252 	.word	0x41615252
 800f628:	61417272 	.word	0x61417272
 800f62c:	20007acc 	.word	0x20007acc

0800f630 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f630:	b580      	push	{r7, lr}
 800f632:	b084      	sub	sp, #16
 800f634:	af00      	add	r7, sp, #0
 800f636:	6078      	str	r0, [r7, #4]
 800f638:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f63a:	2309      	movs	r3, #9
 800f63c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	2b00      	cmp	r3, #0
 800f642:	d01c      	beq.n	800f67e <validate+0x4e>
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d018      	beq.n	800f67e <validate+0x4e>
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	781b      	ldrb	r3, [r3, #0]
 800f652:	2b00      	cmp	r3, #0
 800f654:	d013      	beq.n	800f67e <validate+0x4e>
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	889a      	ldrh	r2, [r3, #4]
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	88db      	ldrh	r3, [r3, #6]
 800f660:	429a      	cmp	r2, r3
 800f662:	d10c      	bne.n	800f67e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	785b      	ldrb	r3, [r3, #1]
 800f66a:	4618      	mov	r0, r3
 800f66c:	f7fe f946 	bl	800d8fc <disk_status>
 800f670:	4603      	mov	r3, r0
 800f672:	f003 0301 	and.w	r3, r3, #1
 800f676:	2b00      	cmp	r3, #0
 800f678:	d101      	bne.n	800f67e <validate+0x4e>
			res = FR_OK;
 800f67a:	2300      	movs	r3, #0
 800f67c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f67e:	7bfb      	ldrb	r3, [r7, #15]
 800f680:	2b00      	cmp	r3, #0
 800f682:	d102      	bne.n	800f68a <validate+0x5a>
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	e000      	b.n	800f68c <validate+0x5c>
 800f68a:	2300      	movs	r3, #0
 800f68c:	683a      	ldr	r2, [r7, #0]
 800f68e:	6013      	str	r3, [r2, #0]
	return res;
 800f690:	7bfb      	ldrb	r3, [r7, #15]
}
 800f692:	4618      	mov	r0, r3
 800f694:	3710      	adds	r7, #16
 800f696:	46bd      	mov	sp, r7
 800f698:	bd80      	pop	{r7, pc}
	...

0800f69c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f69c:	b580      	push	{r7, lr}
 800f69e:	b088      	sub	sp, #32
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	60f8      	str	r0, [r7, #12]
 800f6a4:	60b9      	str	r1, [r7, #8]
 800f6a6:	4613      	mov	r3, r2
 800f6a8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f6aa:	68bb      	ldr	r3, [r7, #8]
 800f6ac:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f6ae:	f107 0310 	add.w	r3, r7, #16
 800f6b2:	4618      	mov	r0, r3
 800f6b4:	f7ff fca2 	bl	800effc <get_ldnumber>
 800f6b8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f6ba:	69fb      	ldr	r3, [r7, #28]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	da01      	bge.n	800f6c4 <f_mount+0x28>
 800f6c0:	230b      	movs	r3, #11
 800f6c2:	e02b      	b.n	800f71c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f6c4:	4a17      	ldr	r2, [pc, #92]	; (800f724 <f_mount+0x88>)
 800f6c6:	69fb      	ldr	r3, [r7, #28]
 800f6c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f6cc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f6ce:	69bb      	ldr	r3, [r7, #24]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d005      	beq.n	800f6e0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f6d4:	69b8      	ldr	r0, [r7, #24]
 800f6d6:	f7fe fbf7 	bl	800dec8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f6da:	69bb      	ldr	r3, [r7, #24]
 800f6dc:	2200      	movs	r2, #0
 800f6de:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d002      	beq.n	800f6ec <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	2200      	movs	r2, #0
 800f6ea:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f6ec:	68fa      	ldr	r2, [r7, #12]
 800f6ee:	490d      	ldr	r1, [pc, #52]	; (800f724 <f_mount+0x88>)
 800f6f0:	69fb      	ldr	r3, [r7, #28]
 800f6f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d002      	beq.n	800f702 <f_mount+0x66>
 800f6fc:	79fb      	ldrb	r3, [r7, #7]
 800f6fe:	2b01      	cmp	r3, #1
 800f700:	d001      	beq.n	800f706 <f_mount+0x6a>
 800f702:	2300      	movs	r3, #0
 800f704:	e00a      	b.n	800f71c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f706:	f107 010c 	add.w	r1, r7, #12
 800f70a:	f107 0308 	add.w	r3, r7, #8
 800f70e:	2200      	movs	r2, #0
 800f710:	4618      	mov	r0, r3
 800f712:	f7ff fd0d 	bl	800f130 <find_volume>
 800f716:	4603      	mov	r3, r0
 800f718:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f71a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f71c:	4618      	mov	r0, r3
 800f71e:	3720      	adds	r7, #32
 800f720:	46bd      	mov	sp, r7
 800f722:	bd80      	pop	{r7, pc}
 800f724:	20007ac8 	.word	0x20007ac8

0800f728 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f728:	b580      	push	{r7, lr}
 800f72a:	b098      	sub	sp, #96	; 0x60
 800f72c:	af00      	add	r7, sp, #0
 800f72e:	60f8      	str	r0, [r7, #12]
 800f730:	60b9      	str	r1, [r7, #8]
 800f732:	4613      	mov	r3, r2
 800f734:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d101      	bne.n	800f740 <f_open+0x18>
 800f73c:	2309      	movs	r3, #9
 800f73e:	e1bb      	b.n	800fab8 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f740:	79fb      	ldrb	r3, [r7, #7]
 800f742:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f746:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800f748:	79fa      	ldrb	r2, [r7, #7]
 800f74a:	f107 0110 	add.w	r1, r7, #16
 800f74e:	f107 0308 	add.w	r3, r7, #8
 800f752:	4618      	mov	r0, r3
 800f754:	f7ff fcec 	bl	800f130 <find_volume>
 800f758:	4603      	mov	r3, r0
 800f75a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800f75e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f762:	2b00      	cmp	r3, #0
 800f764:	f040 819f 	bne.w	800faa6 <f_open+0x37e>
		dj.obj.fs = fs;
 800f768:	693b      	ldr	r3, [r7, #16]
 800f76a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f76c:	68ba      	ldr	r2, [r7, #8]
 800f76e:	f107 0314 	add.w	r3, r7, #20
 800f772:	4611      	mov	r1, r2
 800f774:	4618      	mov	r0, r3
 800f776:	f7ff fbcb 	bl	800ef10 <follow_path>
 800f77a:	4603      	mov	r3, r0
 800f77c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f780:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f784:	2b00      	cmp	r3, #0
 800f786:	d11a      	bne.n	800f7be <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f788:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f78c:	b25b      	sxtb	r3, r3
 800f78e:	2b00      	cmp	r3, #0
 800f790:	da03      	bge.n	800f79a <f_open+0x72>
				res = FR_INVALID_NAME;
 800f792:	2306      	movs	r3, #6
 800f794:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f798:	e011      	b.n	800f7be <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f79a:	79fb      	ldrb	r3, [r7, #7]
 800f79c:	f023 0301 	bic.w	r3, r3, #1
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	bf14      	ite	ne
 800f7a4:	2301      	movne	r3, #1
 800f7a6:	2300      	moveq	r3, #0
 800f7a8:	b2db      	uxtb	r3, r3
 800f7aa:	461a      	mov	r2, r3
 800f7ac:	f107 0314 	add.w	r3, r7, #20
 800f7b0:	4611      	mov	r1, r2
 800f7b2:	4618      	mov	r0, r3
 800f7b4:	f7fe fa40 	bl	800dc38 <chk_lock>
 800f7b8:	4603      	mov	r3, r0
 800f7ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f7be:	79fb      	ldrb	r3, [r7, #7]
 800f7c0:	f003 031c 	and.w	r3, r3, #28
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d07f      	beq.n	800f8c8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800f7c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d017      	beq.n	800f800 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f7d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f7d4:	2b04      	cmp	r3, #4
 800f7d6:	d10e      	bne.n	800f7f6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f7d8:	f7fe fa8a 	bl	800dcf0 <enq_lock>
 800f7dc:	4603      	mov	r3, r0
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d006      	beq.n	800f7f0 <f_open+0xc8>
 800f7e2:	f107 0314 	add.w	r3, r7, #20
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	f7ff fa4f 	bl	800ec8a <dir_register>
 800f7ec:	4603      	mov	r3, r0
 800f7ee:	e000      	b.n	800f7f2 <f_open+0xca>
 800f7f0:	2312      	movs	r3, #18
 800f7f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f7f6:	79fb      	ldrb	r3, [r7, #7]
 800f7f8:	f043 0308 	orr.w	r3, r3, #8
 800f7fc:	71fb      	strb	r3, [r7, #7]
 800f7fe:	e010      	b.n	800f822 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f800:	7ebb      	ldrb	r3, [r7, #26]
 800f802:	f003 0311 	and.w	r3, r3, #17
 800f806:	2b00      	cmp	r3, #0
 800f808:	d003      	beq.n	800f812 <f_open+0xea>
					res = FR_DENIED;
 800f80a:	2307      	movs	r3, #7
 800f80c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f810:	e007      	b.n	800f822 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f812:	79fb      	ldrb	r3, [r7, #7]
 800f814:	f003 0304 	and.w	r3, r3, #4
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d002      	beq.n	800f822 <f_open+0xfa>
 800f81c:	2308      	movs	r3, #8
 800f81e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f822:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f826:	2b00      	cmp	r3, #0
 800f828:	d168      	bne.n	800f8fc <f_open+0x1d4>
 800f82a:	79fb      	ldrb	r3, [r7, #7]
 800f82c:	f003 0308 	and.w	r3, r3, #8
 800f830:	2b00      	cmp	r3, #0
 800f832:	d063      	beq.n	800f8fc <f_open+0x1d4>
				dw = GET_FATTIME();
 800f834:	f7fd fe12 	bl	800d45c <get_fattime>
 800f838:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f83a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f83c:	330e      	adds	r3, #14
 800f83e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f840:	4618      	mov	r0, r3
 800f842:	f7fe f94f 	bl	800dae4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f848:	3316      	adds	r3, #22
 800f84a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f84c:	4618      	mov	r0, r3
 800f84e:	f7fe f949 	bl	800dae4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f854:	330b      	adds	r3, #11
 800f856:	2220      	movs	r2, #32
 800f858:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f85a:	693b      	ldr	r3, [r7, #16]
 800f85c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f85e:	4611      	mov	r1, r2
 800f860:	4618      	mov	r0, r3
 800f862:	f7ff f921 	bl	800eaa8 <ld_clust>
 800f866:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f868:	693b      	ldr	r3, [r7, #16]
 800f86a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f86c:	2200      	movs	r2, #0
 800f86e:	4618      	mov	r0, r3
 800f870:	f7ff f939 	bl	800eae6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f876:	331c      	adds	r3, #28
 800f878:	2100      	movs	r1, #0
 800f87a:	4618      	mov	r0, r3
 800f87c:	f7fe f932 	bl	800dae4 <st_dword>
					fs->wflag = 1;
 800f880:	693b      	ldr	r3, [r7, #16]
 800f882:	2201      	movs	r2, #1
 800f884:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800f886:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d037      	beq.n	800f8fc <f_open+0x1d4>
						dw = fs->winsect;
 800f88c:	693b      	ldr	r3, [r7, #16]
 800f88e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f890:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800f892:	f107 0314 	add.w	r3, r7, #20
 800f896:	2200      	movs	r2, #0
 800f898:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f89a:	4618      	mov	r0, r3
 800f89c:	f7fe fe29 	bl	800e4f2 <remove_chain>
 800f8a0:	4603      	mov	r3, r0
 800f8a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800f8a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d126      	bne.n	800f8fc <f_open+0x1d4>
							res = move_window(fs, dw);
 800f8ae:	693b      	ldr	r3, [r7, #16]
 800f8b0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f8b2:	4618      	mov	r0, r3
 800f8b4:	f7fe fb70 	bl	800df98 <move_window>
 800f8b8:	4603      	mov	r3, r0
 800f8ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f8be:	693b      	ldr	r3, [r7, #16]
 800f8c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f8c2:	3a01      	subs	r2, #1
 800f8c4:	611a      	str	r2, [r3, #16]
 800f8c6:	e019      	b.n	800f8fc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800f8c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d115      	bne.n	800f8fc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f8d0:	7ebb      	ldrb	r3, [r7, #26]
 800f8d2:	f003 0310 	and.w	r3, r3, #16
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d003      	beq.n	800f8e2 <f_open+0x1ba>
					res = FR_NO_FILE;
 800f8da:	2304      	movs	r3, #4
 800f8dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f8e0:	e00c      	b.n	800f8fc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f8e2:	79fb      	ldrb	r3, [r7, #7]
 800f8e4:	f003 0302 	and.w	r3, r3, #2
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d007      	beq.n	800f8fc <f_open+0x1d4>
 800f8ec:	7ebb      	ldrb	r3, [r7, #26]
 800f8ee:	f003 0301 	and.w	r3, r3, #1
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d002      	beq.n	800f8fc <f_open+0x1d4>
						res = FR_DENIED;
 800f8f6:	2307      	movs	r3, #7
 800f8f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800f8fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f900:	2b00      	cmp	r3, #0
 800f902:	d128      	bne.n	800f956 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f904:	79fb      	ldrb	r3, [r7, #7]
 800f906:	f003 0308 	and.w	r3, r3, #8
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d003      	beq.n	800f916 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800f90e:	79fb      	ldrb	r3, [r7, #7]
 800f910:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f914:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f916:	693b      	ldr	r3, [r7, #16]
 800f918:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800f91e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f924:	79fb      	ldrb	r3, [r7, #7]
 800f926:	f023 0301 	bic.w	r3, r3, #1
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	bf14      	ite	ne
 800f92e:	2301      	movne	r3, #1
 800f930:	2300      	moveq	r3, #0
 800f932:	b2db      	uxtb	r3, r3
 800f934:	461a      	mov	r2, r3
 800f936:	f107 0314 	add.w	r3, r7, #20
 800f93a:	4611      	mov	r1, r2
 800f93c:	4618      	mov	r0, r3
 800f93e:	f7fe f9f9 	bl	800dd34 <inc_lock>
 800f942:	4602      	mov	r2, r0
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	691b      	ldr	r3, [r3, #16]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d102      	bne.n	800f956 <f_open+0x22e>
 800f950:	2302      	movs	r3, #2
 800f952:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800f956:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	f040 80a3 	bne.w	800faa6 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f960:	693b      	ldr	r3, [r7, #16]
 800f962:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f964:	4611      	mov	r1, r2
 800f966:	4618      	mov	r0, r3
 800f968:	f7ff f89e 	bl	800eaa8 <ld_clust>
 800f96c:	4602      	mov	r2, r0
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f974:	331c      	adds	r3, #28
 800f976:	4618      	mov	r0, r3
 800f978:	f7fe f876 	bl	800da68 <ld_dword>
 800f97c:	4602      	mov	r2, r0
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	2200      	movs	r2, #0
 800f986:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f988:	693a      	ldr	r2, [r7, #16]
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f98e:	693b      	ldr	r3, [r7, #16]
 800f990:	88da      	ldrh	r2, [r3, #6]
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	79fa      	ldrb	r2, [r7, #7]
 800f99a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	2200      	movs	r2, #0
 800f9a0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	2200      	movs	r2, #0
 800f9a6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	2200      	movs	r2, #0
 800f9ac:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	3330      	adds	r3, #48	; 0x30
 800f9b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f9b6:	2100      	movs	r1, #0
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	f7fe f8e0 	bl	800db7e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f9be:	79fb      	ldrb	r3, [r7, #7]
 800f9c0:	f003 0320 	and.w	r3, r3, #32
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d06e      	beq.n	800faa6 <f_open+0x37e>
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	68db      	ldr	r3, [r3, #12]
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d06a      	beq.n	800faa6 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	68da      	ldr	r2, [r3, #12]
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f9d8:	693b      	ldr	r3, [r7, #16]
 800f9da:	895b      	ldrh	r3, [r3, #10]
 800f9dc:	461a      	mov	r2, r3
 800f9de:	693b      	ldr	r3, [r7, #16]
 800f9e0:	899b      	ldrh	r3, [r3, #12]
 800f9e2:	fb02 f303 	mul.w	r3, r2, r3
 800f9e6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	689b      	ldr	r3, [r3, #8]
 800f9ec:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	68db      	ldr	r3, [r3, #12]
 800f9f2:	657b      	str	r3, [r7, #84]	; 0x54
 800f9f4:	e016      	b.n	800fa24 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	f7fe fb89 	bl	800e112 <get_fat>
 800fa00:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800fa02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fa04:	2b01      	cmp	r3, #1
 800fa06:	d802      	bhi.n	800fa0e <f_open+0x2e6>
 800fa08:	2302      	movs	r3, #2
 800fa0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800fa0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fa10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa14:	d102      	bne.n	800fa1c <f_open+0x2f4>
 800fa16:	2301      	movs	r3, #1
 800fa18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fa1c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fa1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa20:	1ad3      	subs	r3, r2, r3
 800fa22:	657b      	str	r3, [r7, #84]	; 0x54
 800fa24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d103      	bne.n	800fa34 <f_open+0x30c>
 800fa2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fa2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa30:	429a      	cmp	r2, r3
 800fa32:	d8e0      	bhi.n	800f9f6 <f_open+0x2ce>
				}
				fp->clust = clst;
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fa38:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800fa3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d131      	bne.n	800faa6 <f_open+0x37e>
 800fa42:	693b      	ldr	r3, [r7, #16]
 800fa44:	899b      	ldrh	r3, [r3, #12]
 800fa46:	461a      	mov	r2, r3
 800fa48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fa4a:	fbb3 f1f2 	udiv	r1, r3, r2
 800fa4e:	fb01 f202 	mul.w	r2, r1, r2
 800fa52:	1a9b      	subs	r3, r3, r2
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d026      	beq.n	800faa6 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800fa58:	693b      	ldr	r3, [r7, #16]
 800fa5a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	f7fe fb39 	bl	800e0d4 <clust2sect>
 800fa62:	6478      	str	r0, [r7, #68]	; 0x44
 800fa64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d103      	bne.n	800fa72 <f_open+0x34a>
						res = FR_INT_ERR;
 800fa6a:	2302      	movs	r3, #2
 800fa6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800fa70:	e019      	b.n	800faa6 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800fa72:	693b      	ldr	r3, [r7, #16]
 800fa74:	899b      	ldrh	r3, [r3, #12]
 800fa76:	461a      	mov	r2, r3
 800fa78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fa7a:	fbb3 f2f2 	udiv	r2, r3, r2
 800fa7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa80:	441a      	add	r2, r3
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800fa86:	693b      	ldr	r3, [r7, #16]
 800fa88:	7858      	ldrb	r0, [r3, #1]
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	6a1a      	ldr	r2, [r3, #32]
 800fa94:	2301      	movs	r3, #1
 800fa96:	f7fd ff71 	bl	800d97c <disk_read>
 800fa9a:	4603      	mov	r3, r0
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d002      	beq.n	800faa6 <f_open+0x37e>
 800faa0:	2301      	movs	r3, #1
 800faa2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800faa6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d002      	beq.n	800fab4 <f_open+0x38c>
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	2200      	movs	r2, #0
 800fab2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800fab4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800fab8:	4618      	mov	r0, r3
 800faba:	3760      	adds	r7, #96	; 0x60
 800fabc:	46bd      	mov	sp, r7
 800fabe:	bd80      	pop	{r7, pc}

0800fac0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800fac0:	b580      	push	{r7, lr}
 800fac2:	b08e      	sub	sp, #56	; 0x38
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	60f8      	str	r0, [r7, #12]
 800fac8:	60b9      	str	r1, [r7, #8]
 800faca:	607a      	str	r2, [r7, #4]
 800facc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800face:	68bb      	ldr	r3, [r7, #8]
 800fad0:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800fad2:	683b      	ldr	r3, [r7, #0]
 800fad4:	2200      	movs	r2, #0
 800fad6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	f107 0214 	add.w	r2, r7, #20
 800fade:	4611      	mov	r1, r2
 800fae0:	4618      	mov	r0, r3
 800fae2:	f7ff fda5 	bl	800f630 <validate>
 800fae6:	4603      	mov	r3, r0
 800fae8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800faec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d107      	bne.n	800fb04 <f_read+0x44>
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	7d5b      	ldrb	r3, [r3, #21]
 800faf8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800fafc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d002      	beq.n	800fb0a <f_read+0x4a>
 800fb04:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb08:	e135      	b.n	800fd76 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	7d1b      	ldrb	r3, [r3, #20]
 800fb0e:	f003 0301 	and.w	r3, r3, #1
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d101      	bne.n	800fb1a <f_read+0x5a>
 800fb16:	2307      	movs	r3, #7
 800fb18:	e12d      	b.n	800fd76 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	68da      	ldr	r2, [r3, #12]
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	699b      	ldr	r3, [r3, #24]
 800fb22:	1ad3      	subs	r3, r2, r3
 800fb24:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800fb26:	687a      	ldr	r2, [r7, #4]
 800fb28:	6a3b      	ldr	r3, [r7, #32]
 800fb2a:	429a      	cmp	r2, r3
 800fb2c:	f240 811e 	bls.w	800fd6c <f_read+0x2ac>
 800fb30:	6a3b      	ldr	r3, [r7, #32]
 800fb32:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800fb34:	e11a      	b.n	800fd6c <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	699b      	ldr	r3, [r3, #24]
 800fb3a:	697a      	ldr	r2, [r7, #20]
 800fb3c:	8992      	ldrh	r2, [r2, #12]
 800fb3e:	fbb3 f1f2 	udiv	r1, r3, r2
 800fb42:	fb01 f202 	mul.w	r2, r1, r2
 800fb46:	1a9b      	subs	r3, r3, r2
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	f040 80d5 	bne.w	800fcf8 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	699b      	ldr	r3, [r3, #24]
 800fb52:	697a      	ldr	r2, [r7, #20]
 800fb54:	8992      	ldrh	r2, [r2, #12]
 800fb56:	fbb3 f3f2 	udiv	r3, r3, r2
 800fb5a:	697a      	ldr	r2, [r7, #20]
 800fb5c:	8952      	ldrh	r2, [r2, #10]
 800fb5e:	3a01      	subs	r2, #1
 800fb60:	4013      	ands	r3, r2
 800fb62:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800fb64:	69fb      	ldr	r3, [r7, #28]
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d12f      	bne.n	800fbca <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	699b      	ldr	r3, [r3, #24]
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d103      	bne.n	800fb7a <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	689b      	ldr	r3, [r3, #8]
 800fb76:	633b      	str	r3, [r7, #48]	; 0x30
 800fb78:	e013      	b.n	800fba2 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d007      	beq.n	800fb92 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	699b      	ldr	r3, [r3, #24]
 800fb86:	4619      	mov	r1, r3
 800fb88:	68f8      	ldr	r0, [r7, #12]
 800fb8a:	f7fe fdaf 	bl	800e6ec <clmt_clust>
 800fb8e:	6338      	str	r0, [r7, #48]	; 0x30
 800fb90:	e007      	b.n	800fba2 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800fb92:	68fa      	ldr	r2, [r7, #12]
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	69db      	ldr	r3, [r3, #28]
 800fb98:	4619      	mov	r1, r3
 800fb9a:	4610      	mov	r0, r2
 800fb9c:	f7fe fab9 	bl	800e112 <get_fat>
 800fba0:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800fba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fba4:	2b01      	cmp	r3, #1
 800fba6:	d804      	bhi.n	800fbb2 <f_read+0xf2>
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	2202      	movs	r2, #2
 800fbac:	755a      	strb	r2, [r3, #21]
 800fbae:	2302      	movs	r3, #2
 800fbb0:	e0e1      	b.n	800fd76 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fbb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbb8:	d104      	bne.n	800fbc4 <f_read+0x104>
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	2201      	movs	r2, #1
 800fbbe:	755a      	strb	r2, [r3, #21]
 800fbc0:	2301      	movs	r3, #1
 800fbc2:	e0d8      	b.n	800fd76 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fbc8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800fbca:	697a      	ldr	r2, [r7, #20]
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	69db      	ldr	r3, [r3, #28]
 800fbd0:	4619      	mov	r1, r3
 800fbd2:	4610      	mov	r0, r2
 800fbd4:	f7fe fa7e 	bl	800e0d4 <clust2sect>
 800fbd8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800fbda:	69bb      	ldr	r3, [r7, #24]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d104      	bne.n	800fbea <f_read+0x12a>
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	2202      	movs	r2, #2
 800fbe4:	755a      	strb	r2, [r3, #21]
 800fbe6:	2302      	movs	r3, #2
 800fbe8:	e0c5      	b.n	800fd76 <f_read+0x2b6>
			sect += csect;
 800fbea:	69ba      	ldr	r2, [r7, #24]
 800fbec:	69fb      	ldr	r3, [r7, #28]
 800fbee:	4413      	add	r3, r2
 800fbf0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800fbf2:	697b      	ldr	r3, [r7, #20]
 800fbf4:	899b      	ldrh	r3, [r3, #12]
 800fbf6:	461a      	mov	r2, r3
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	fbb3 f3f2 	udiv	r3, r3, r2
 800fbfe:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800fc00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d041      	beq.n	800fc8a <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800fc06:	69fa      	ldr	r2, [r7, #28]
 800fc08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc0a:	4413      	add	r3, r2
 800fc0c:	697a      	ldr	r2, [r7, #20]
 800fc0e:	8952      	ldrh	r2, [r2, #10]
 800fc10:	4293      	cmp	r3, r2
 800fc12:	d905      	bls.n	800fc20 <f_read+0x160>
					cc = fs->csize - csect;
 800fc14:	697b      	ldr	r3, [r7, #20]
 800fc16:	895b      	ldrh	r3, [r3, #10]
 800fc18:	461a      	mov	r2, r3
 800fc1a:	69fb      	ldr	r3, [r7, #28]
 800fc1c:	1ad3      	subs	r3, r2, r3
 800fc1e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fc20:	697b      	ldr	r3, [r7, #20]
 800fc22:	7858      	ldrb	r0, [r3, #1]
 800fc24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc26:	69ba      	ldr	r2, [r7, #24]
 800fc28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fc2a:	f7fd fea7 	bl	800d97c <disk_read>
 800fc2e:	4603      	mov	r3, r0
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d004      	beq.n	800fc3e <f_read+0x17e>
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	2201      	movs	r2, #1
 800fc38:	755a      	strb	r2, [r3, #21]
 800fc3a:	2301      	movs	r3, #1
 800fc3c:	e09b      	b.n	800fd76 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	7d1b      	ldrb	r3, [r3, #20]
 800fc42:	b25b      	sxtb	r3, r3
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	da18      	bge.n	800fc7a <f_read+0x1ba>
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	6a1a      	ldr	r2, [r3, #32]
 800fc4c:	69bb      	ldr	r3, [r7, #24]
 800fc4e:	1ad3      	subs	r3, r2, r3
 800fc50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fc52:	429a      	cmp	r2, r3
 800fc54:	d911      	bls.n	800fc7a <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	6a1a      	ldr	r2, [r3, #32]
 800fc5a:	69bb      	ldr	r3, [r7, #24]
 800fc5c:	1ad3      	subs	r3, r2, r3
 800fc5e:	697a      	ldr	r2, [r7, #20]
 800fc60:	8992      	ldrh	r2, [r2, #12]
 800fc62:	fb02 f303 	mul.w	r3, r2, r3
 800fc66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc68:	18d0      	adds	r0, r2, r3
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fc70:	697b      	ldr	r3, [r7, #20]
 800fc72:	899b      	ldrh	r3, [r3, #12]
 800fc74:	461a      	mov	r2, r3
 800fc76:	f7fd ff61 	bl	800db3c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800fc7a:	697b      	ldr	r3, [r7, #20]
 800fc7c:	899b      	ldrh	r3, [r3, #12]
 800fc7e:	461a      	mov	r2, r3
 800fc80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc82:	fb02 f303 	mul.w	r3, r2, r3
 800fc86:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800fc88:	e05c      	b.n	800fd44 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	6a1b      	ldr	r3, [r3, #32]
 800fc8e:	69ba      	ldr	r2, [r7, #24]
 800fc90:	429a      	cmp	r2, r3
 800fc92:	d02e      	beq.n	800fcf2 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	7d1b      	ldrb	r3, [r3, #20]
 800fc98:	b25b      	sxtb	r3, r3
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	da18      	bge.n	800fcd0 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fc9e:	697b      	ldr	r3, [r7, #20]
 800fca0:	7858      	ldrb	r0, [r3, #1]
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	6a1a      	ldr	r2, [r3, #32]
 800fcac:	2301      	movs	r3, #1
 800fcae:	f7fd fe85 	bl	800d9bc <disk_write>
 800fcb2:	4603      	mov	r3, r0
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d004      	beq.n	800fcc2 <f_read+0x202>
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	2201      	movs	r2, #1
 800fcbc:	755a      	strb	r2, [r3, #21]
 800fcbe:	2301      	movs	r3, #1
 800fcc0:	e059      	b.n	800fd76 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	7d1b      	ldrb	r3, [r3, #20]
 800fcc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fcca:	b2da      	uxtb	r2, r3
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800fcd0:	697b      	ldr	r3, [r7, #20]
 800fcd2:	7858      	ldrb	r0, [r3, #1]
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fcda:	2301      	movs	r3, #1
 800fcdc:	69ba      	ldr	r2, [r7, #24]
 800fcde:	f7fd fe4d 	bl	800d97c <disk_read>
 800fce2:	4603      	mov	r3, r0
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d004      	beq.n	800fcf2 <f_read+0x232>
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	2201      	movs	r2, #1
 800fcec:	755a      	strb	r2, [r3, #21]
 800fcee:	2301      	movs	r3, #1
 800fcf0:	e041      	b.n	800fd76 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	69ba      	ldr	r2, [r7, #24]
 800fcf6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800fcf8:	697b      	ldr	r3, [r7, #20]
 800fcfa:	899b      	ldrh	r3, [r3, #12]
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	699b      	ldr	r3, [r3, #24]
 800fd02:	697a      	ldr	r2, [r7, #20]
 800fd04:	8992      	ldrh	r2, [r2, #12]
 800fd06:	fbb3 f1f2 	udiv	r1, r3, r2
 800fd0a:	fb01 f202 	mul.w	r2, r1, r2
 800fd0e:	1a9b      	subs	r3, r3, r2
 800fd10:	1ac3      	subs	r3, r0, r3
 800fd12:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800fd14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	429a      	cmp	r2, r3
 800fd1a:	d901      	bls.n	800fd20 <f_read+0x260>
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	699b      	ldr	r3, [r3, #24]
 800fd2a:	697a      	ldr	r2, [r7, #20]
 800fd2c:	8992      	ldrh	r2, [r2, #12]
 800fd2e:	fbb3 f0f2 	udiv	r0, r3, r2
 800fd32:	fb00 f202 	mul.w	r2, r0, r2
 800fd36:	1a9b      	subs	r3, r3, r2
 800fd38:	440b      	add	r3, r1
 800fd3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd3c:	4619      	mov	r1, r3
 800fd3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fd40:	f7fd fefc 	bl	800db3c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800fd44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd48:	4413      	add	r3, r2
 800fd4a:	627b      	str	r3, [r7, #36]	; 0x24
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	699a      	ldr	r2, [r3, #24]
 800fd50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd52:	441a      	add	r2, r3
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	619a      	str	r2, [r3, #24]
 800fd58:	683b      	ldr	r3, [r7, #0]
 800fd5a:	681a      	ldr	r2, [r3, #0]
 800fd5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd5e:	441a      	add	r2, r3
 800fd60:	683b      	ldr	r3, [r7, #0]
 800fd62:	601a      	str	r2, [r3, #0]
 800fd64:	687a      	ldr	r2, [r7, #4]
 800fd66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd68:	1ad3      	subs	r3, r2, r3
 800fd6a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	f47f aee1 	bne.w	800fb36 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800fd74:	2300      	movs	r3, #0
}
 800fd76:	4618      	mov	r0, r3
 800fd78:	3738      	adds	r7, #56	; 0x38
 800fd7a:	46bd      	mov	sp, r7
 800fd7c:	bd80      	pop	{r7, pc}

0800fd7e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800fd7e:	b580      	push	{r7, lr}
 800fd80:	b08c      	sub	sp, #48	; 0x30
 800fd82:	af00      	add	r7, sp, #0
 800fd84:	60f8      	str	r0, [r7, #12]
 800fd86:	60b9      	str	r1, [r7, #8]
 800fd88:	607a      	str	r2, [r7, #4]
 800fd8a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800fd8c:	68bb      	ldr	r3, [r7, #8]
 800fd8e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800fd90:	683b      	ldr	r3, [r7, #0]
 800fd92:	2200      	movs	r2, #0
 800fd94:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	f107 0210 	add.w	r2, r7, #16
 800fd9c:	4611      	mov	r1, r2
 800fd9e:	4618      	mov	r0, r3
 800fda0:	f7ff fc46 	bl	800f630 <validate>
 800fda4:	4603      	mov	r3, r0
 800fda6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800fdaa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d107      	bne.n	800fdc2 <f_write+0x44>
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	7d5b      	ldrb	r3, [r3, #21]
 800fdb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800fdba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d002      	beq.n	800fdc8 <f_write+0x4a>
 800fdc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fdc6:	e16a      	b.n	801009e <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	7d1b      	ldrb	r3, [r3, #20]
 800fdcc:	f003 0302 	and.w	r3, r3, #2
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d101      	bne.n	800fdd8 <f_write+0x5a>
 800fdd4:	2307      	movs	r3, #7
 800fdd6:	e162      	b.n	801009e <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	699a      	ldr	r2, [r3, #24]
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	441a      	add	r2, r3
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	699b      	ldr	r3, [r3, #24]
 800fde4:	429a      	cmp	r2, r3
 800fde6:	f080 814c 	bcs.w	8010082 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	699b      	ldr	r3, [r3, #24]
 800fdee:	43db      	mvns	r3, r3
 800fdf0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800fdf2:	e146      	b.n	8010082 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	699b      	ldr	r3, [r3, #24]
 800fdf8:	693a      	ldr	r2, [r7, #16]
 800fdfa:	8992      	ldrh	r2, [r2, #12]
 800fdfc:	fbb3 f1f2 	udiv	r1, r3, r2
 800fe00:	fb01 f202 	mul.w	r2, r1, r2
 800fe04:	1a9b      	subs	r3, r3, r2
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	f040 80f1 	bne.w	800ffee <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	699b      	ldr	r3, [r3, #24]
 800fe10:	693a      	ldr	r2, [r7, #16]
 800fe12:	8992      	ldrh	r2, [r2, #12]
 800fe14:	fbb3 f3f2 	udiv	r3, r3, r2
 800fe18:	693a      	ldr	r2, [r7, #16]
 800fe1a:	8952      	ldrh	r2, [r2, #10]
 800fe1c:	3a01      	subs	r2, #1
 800fe1e:	4013      	ands	r3, r2
 800fe20:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800fe22:	69bb      	ldr	r3, [r7, #24]
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d143      	bne.n	800feb0 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	699b      	ldr	r3, [r3, #24]
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d10c      	bne.n	800fe4a <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	689b      	ldr	r3, [r3, #8]
 800fe34:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800fe36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d11a      	bne.n	800fe72 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	2100      	movs	r1, #0
 800fe40:	4618      	mov	r0, r3
 800fe42:	f7fe fbbb 	bl	800e5bc <create_chain>
 800fe46:	62b8      	str	r0, [r7, #40]	; 0x28
 800fe48:	e013      	b.n	800fe72 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d007      	beq.n	800fe62 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	699b      	ldr	r3, [r3, #24]
 800fe56:	4619      	mov	r1, r3
 800fe58:	68f8      	ldr	r0, [r7, #12]
 800fe5a:	f7fe fc47 	bl	800e6ec <clmt_clust>
 800fe5e:	62b8      	str	r0, [r7, #40]	; 0x28
 800fe60:	e007      	b.n	800fe72 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800fe62:	68fa      	ldr	r2, [r7, #12]
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	69db      	ldr	r3, [r3, #28]
 800fe68:	4619      	mov	r1, r3
 800fe6a:	4610      	mov	r0, r2
 800fe6c:	f7fe fba6 	bl	800e5bc <create_chain>
 800fe70:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800fe72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	f000 8109 	beq.w	801008c <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800fe7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe7c:	2b01      	cmp	r3, #1
 800fe7e:	d104      	bne.n	800fe8a <f_write+0x10c>
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	2202      	movs	r2, #2
 800fe84:	755a      	strb	r2, [r3, #21]
 800fe86:	2302      	movs	r3, #2
 800fe88:	e109      	b.n	801009e <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fe8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe90:	d104      	bne.n	800fe9c <f_write+0x11e>
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	2201      	movs	r2, #1
 800fe96:	755a      	strb	r2, [r3, #21]
 800fe98:	2301      	movs	r3, #1
 800fe9a:	e100      	b.n	801009e <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fea0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	689b      	ldr	r3, [r3, #8]
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d102      	bne.n	800feb0 <f_write+0x132>
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800feae:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	7d1b      	ldrb	r3, [r3, #20]
 800feb4:	b25b      	sxtb	r3, r3
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	da18      	bge.n	800feec <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800feba:	693b      	ldr	r3, [r7, #16]
 800febc:	7858      	ldrb	r0, [r3, #1]
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	6a1a      	ldr	r2, [r3, #32]
 800fec8:	2301      	movs	r3, #1
 800feca:	f7fd fd77 	bl	800d9bc <disk_write>
 800fece:	4603      	mov	r3, r0
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d004      	beq.n	800fede <f_write+0x160>
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	2201      	movs	r2, #1
 800fed8:	755a      	strb	r2, [r3, #21]
 800feda:	2301      	movs	r3, #1
 800fedc:	e0df      	b.n	801009e <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	7d1b      	ldrb	r3, [r3, #20]
 800fee2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fee6:	b2da      	uxtb	r2, r3
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800feec:	693a      	ldr	r2, [r7, #16]
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	69db      	ldr	r3, [r3, #28]
 800fef2:	4619      	mov	r1, r3
 800fef4:	4610      	mov	r0, r2
 800fef6:	f7fe f8ed 	bl	800e0d4 <clust2sect>
 800fefa:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800fefc:	697b      	ldr	r3, [r7, #20]
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d104      	bne.n	800ff0c <f_write+0x18e>
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	2202      	movs	r2, #2
 800ff06:	755a      	strb	r2, [r3, #21]
 800ff08:	2302      	movs	r3, #2
 800ff0a:	e0c8      	b.n	801009e <f_write+0x320>
			sect += csect;
 800ff0c:	697a      	ldr	r2, [r7, #20]
 800ff0e:	69bb      	ldr	r3, [r7, #24]
 800ff10:	4413      	add	r3, r2
 800ff12:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ff14:	693b      	ldr	r3, [r7, #16]
 800ff16:	899b      	ldrh	r3, [r3, #12]
 800ff18:	461a      	mov	r2, r3
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ff20:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ff22:	6a3b      	ldr	r3, [r7, #32]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d043      	beq.n	800ffb0 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ff28:	69ba      	ldr	r2, [r7, #24]
 800ff2a:	6a3b      	ldr	r3, [r7, #32]
 800ff2c:	4413      	add	r3, r2
 800ff2e:	693a      	ldr	r2, [r7, #16]
 800ff30:	8952      	ldrh	r2, [r2, #10]
 800ff32:	4293      	cmp	r3, r2
 800ff34:	d905      	bls.n	800ff42 <f_write+0x1c4>
					cc = fs->csize - csect;
 800ff36:	693b      	ldr	r3, [r7, #16]
 800ff38:	895b      	ldrh	r3, [r3, #10]
 800ff3a:	461a      	mov	r2, r3
 800ff3c:	69bb      	ldr	r3, [r7, #24]
 800ff3e:	1ad3      	subs	r3, r2, r3
 800ff40:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ff42:	693b      	ldr	r3, [r7, #16]
 800ff44:	7858      	ldrb	r0, [r3, #1]
 800ff46:	6a3b      	ldr	r3, [r7, #32]
 800ff48:	697a      	ldr	r2, [r7, #20]
 800ff4a:	69f9      	ldr	r1, [r7, #28]
 800ff4c:	f7fd fd36 	bl	800d9bc <disk_write>
 800ff50:	4603      	mov	r3, r0
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d004      	beq.n	800ff60 <f_write+0x1e2>
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	2201      	movs	r2, #1
 800ff5a:	755a      	strb	r2, [r3, #21]
 800ff5c:	2301      	movs	r3, #1
 800ff5e:	e09e      	b.n	801009e <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	6a1a      	ldr	r2, [r3, #32]
 800ff64:	697b      	ldr	r3, [r7, #20]
 800ff66:	1ad3      	subs	r3, r2, r3
 800ff68:	6a3a      	ldr	r2, [r7, #32]
 800ff6a:	429a      	cmp	r2, r3
 800ff6c:	d918      	bls.n	800ffa0 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	6a1a      	ldr	r2, [r3, #32]
 800ff78:	697b      	ldr	r3, [r7, #20]
 800ff7a:	1ad3      	subs	r3, r2, r3
 800ff7c:	693a      	ldr	r2, [r7, #16]
 800ff7e:	8992      	ldrh	r2, [r2, #12]
 800ff80:	fb02 f303 	mul.w	r3, r2, r3
 800ff84:	69fa      	ldr	r2, [r7, #28]
 800ff86:	18d1      	adds	r1, r2, r3
 800ff88:	693b      	ldr	r3, [r7, #16]
 800ff8a:	899b      	ldrh	r3, [r3, #12]
 800ff8c:	461a      	mov	r2, r3
 800ff8e:	f7fd fdd5 	bl	800db3c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	7d1b      	ldrb	r3, [r3, #20]
 800ff96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ff9a:	b2da      	uxtb	r2, r3
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800ffa0:	693b      	ldr	r3, [r7, #16]
 800ffa2:	899b      	ldrh	r3, [r3, #12]
 800ffa4:	461a      	mov	r2, r3
 800ffa6:	6a3b      	ldr	r3, [r7, #32]
 800ffa8:	fb02 f303 	mul.w	r3, r2, r3
 800ffac:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800ffae:	e04b      	b.n	8010048 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	6a1b      	ldr	r3, [r3, #32]
 800ffb4:	697a      	ldr	r2, [r7, #20]
 800ffb6:	429a      	cmp	r2, r3
 800ffb8:	d016      	beq.n	800ffe8 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	699a      	ldr	r2, [r3, #24]
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ffc2:	429a      	cmp	r2, r3
 800ffc4:	d210      	bcs.n	800ffe8 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ffc6:	693b      	ldr	r3, [r7, #16]
 800ffc8:	7858      	ldrb	r0, [r3, #1]
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ffd0:	2301      	movs	r3, #1
 800ffd2:	697a      	ldr	r2, [r7, #20]
 800ffd4:	f7fd fcd2 	bl	800d97c <disk_read>
 800ffd8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d004      	beq.n	800ffe8 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	2201      	movs	r2, #1
 800ffe2:	755a      	strb	r2, [r3, #21]
 800ffe4:	2301      	movs	r3, #1
 800ffe6:	e05a      	b.n	801009e <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	697a      	ldr	r2, [r7, #20]
 800ffec:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ffee:	693b      	ldr	r3, [r7, #16]
 800fff0:	899b      	ldrh	r3, [r3, #12]
 800fff2:	4618      	mov	r0, r3
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	699b      	ldr	r3, [r3, #24]
 800fff8:	693a      	ldr	r2, [r7, #16]
 800fffa:	8992      	ldrh	r2, [r2, #12]
 800fffc:	fbb3 f1f2 	udiv	r1, r3, r2
 8010000:	fb01 f202 	mul.w	r2, r1, r2
 8010004:	1a9b      	subs	r3, r3, r2
 8010006:	1ac3      	subs	r3, r0, r3
 8010008:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801000a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	429a      	cmp	r2, r3
 8010010:	d901      	bls.n	8010016 <f_write+0x298>
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	699b      	ldr	r3, [r3, #24]
 8010020:	693a      	ldr	r2, [r7, #16]
 8010022:	8992      	ldrh	r2, [r2, #12]
 8010024:	fbb3 f0f2 	udiv	r0, r3, r2
 8010028:	fb00 f202 	mul.w	r2, r0, r2
 801002c:	1a9b      	subs	r3, r3, r2
 801002e:	440b      	add	r3, r1
 8010030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010032:	69f9      	ldr	r1, [r7, #28]
 8010034:	4618      	mov	r0, r3
 8010036:	f7fd fd81 	bl	800db3c <mem_cpy>
		fp->flag |= FA_DIRTY;
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	7d1b      	ldrb	r3, [r3, #20]
 801003e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010042:	b2da      	uxtb	r2, r3
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8010048:	69fa      	ldr	r2, [r7, #28]
 801004a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801004c:	4413      	add	r3, r2
 801004e:	61fb      	str	r3, [r7, #28]
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	699a      	ldr	r2, [r3, #24]
 8010054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010056:	441a      	add	r2, r3
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	619a      	str	r2, [r3, #24]
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	68da      	ldr	r2, [r3, #12]
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	699b      	ldr	r3, [r3, #24]
 8010064:	429a      	cmp	r2, r3
 8010066:	bf38      	it	cc
 8010068:	461a      	movcc	r2, r3
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	60da      	str	r2, [r3, #12]
 801006e:	683b      	ldr	r3, [r7, #0]
 8010070:	681a      	ldr	r2, [r3, #0]
 8010072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010074:	441a      	add	r2, r3
 8010076:	683b      	ldr	r3, [r7, #0]
 8010078:	601a      	str	r2, [r3, #0]
 801007a:	687a      	ldr	r2, [r7, #4]
 801007c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801007e:	1ad3      	subs	r3, r2, r3
 8010080:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	2b00      	cmp	r3, #0
 8010086:	f47f aeb5 	bne.w	800fdf4 <f_write+0x76>
 801008a:	e000      	b.n	801008e <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801008c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	7d1b      	ldrb	r3, [r3, #20]
 8010092:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010096:	b2da      	uxtb	r2, r3
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801009c:	2300      	movs	r3, #0
}
 801009e:	4618      	mov	r0, r3
 80100a0:	3730      	adds	r7, #48	; 0x30
 80100a2:	46bd      	mov	sp, r7
 80100a4:	bd80      	pop	{r7, pc}

080100a6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80100a6:	b580      	push	{r7, lr}
 80100a8:	b086      	sub	sp, #24
 80100aa:	af00      	add	r7, sp, #0
 80100ac:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	f107 0208 	add.w	r2, r7, #8
 80100b4:	4611      	mov	r1, r2
 80100b6:	4618      	mov	r0, r3
 80100b8:	f7ff faba 	bl	800f630 <validate>
 80100bc:	4603      	mov	r3, r0
 80100be:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80100c0:	7dfb      	ldrb	r3, [r7, #23]
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d168      	bne.n	8010198 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	7d1b      	ldrb	r3, [r3, #20]
 80100ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d062      	beq.n	8010198 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	7d1b      	ldrb	r3, [r3, #20]
 80100d6:	b25b      	sxtb	r3, r3
 80100d8:	2b00      	cmp	r3, #0
 80100da:	da15      	bge.n	8010108 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80100dc:	68bb      	ldr	r3, [r7, #8]
 80100de:	7858      	ldrb	r0, [r3, #1]
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	6a1a      	ldr	r2, [r3, #32]
 80100ea:	2301      	movs	r3, #1
 80100ec:	f7fd fc66 	bl	800d9bc <disk_write>
 80100f0:	4603      	mov	r3, r0
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d001      	beq.n	80100fa <f_sync+0x54>
 80100f6:	2301      	movs	r3, #1
 80100f8:	e04f      	b.n	801019a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	7d1b      	ldrb	r3, [r3, #20]
 80100fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010102:	b2da      	uxtb	r2, r3
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010108:	f7fd f9a8 	bl	800d45c <get_fattime>
 801010c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801010e:	68ba      	ldr	r2, [r7, #8]
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010114:	4619      	mov	r1, r3
 8010116:	4610      	mov	r0, r2
 8010118:	f7fd ff3e 	bl	800df98 <move_window>
 801011c:	4603      	mov	r3, r0
 801011e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8010120:	7dfb      	ldrb	r3, [r7, #23]
 8010122:	2b00      	cmp	r3, #0
 8010124:	d138      	bne.n	8010198 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801012a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	330b      	adds	r3, #11
 8010130:	781a      	ldrb	r2, [r3, #0]
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	330b      	adds	r3, #11
 8010136:	f042 0220 	orr.w	r2, r2, #32
 801013a:	b2d2      	uxtb	r2, r2
 801013c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	6818      	ldr	r0, [r3, #0]
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	689b      	ldr	r3, [r3, #8]
 8010146:	461a      	mov	r2, r3
 8010148:	68f9      	ldr	r1, [r7, #12]
 801014a:	f7fe fccc 	bl	800eae6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	f103 021c 	add.w	r2, r3, #28
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	68db      	ldr	r3, [r3, #12]
 8010158:	4619      	mov	r1, r3
 801015a:	4610      	mov	r0, r2
 801015c:	f7fd fcc2 	bl	800dae4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	3316      	adds	r3, #22
 8010164:	6939      	ldr	r1, [r7, #16]
 8010166:	4618      	mov	r0, r3
 8010168:	f7fd fcbc 	bl	800dae4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	3312      	adds	r3, #18
 8010170:	2100      	movs	r1, #0
 8010172:	4618      	mov	r0, r3
 8010174:	f7fd fc9b 	bl	800daae <st_word>
					fs->wflag = 1;
 8010178:	68bb      	ldr	r3, [r7, #8]
 801017a:	2201      	movs	r2, #1
 801017c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801017e:	68bb      	ldr	r3, [r7, #8]
 8010180:	4618      	mov	r0, r3
 8010182:	f7fd ff37 	bl	800dff4 <sync_fs>
 8010186:	4603      	mov	r3, r0
 8010188:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	7d1b      	ldrb	r3, [r3, #20]
 801018e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010192:	b2da      	uxtb	r2, r3
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010198:	7dfb      	ldrb	r3, [r7, #23]
}
 801019a:	4618      	mov	r0, r3
 801019c:	3718      	adds	r7, #24
 801019e:	46bd      	mov	sp, r7
 80101a0:	bd80      	pop	{r7, pc}

080101a2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80101a2:	b580      	push	{r7, lr}
 80101a4:	b084      	sub	sp, #16
 80101a6:	af00      	add	r7, sp, #0
 80101a8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80101aa:	6878      	ldr	r0, [r7, #4]
 80101ac:	f7ff ff7b 	bl	80100a6 <f_sync>
 80101b0:	4603      	mov	r3, r0
 80101b2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80101b4:	7bfb      	ldrb	r3, [r7, #15]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d118      	bne.n	80101ec <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	f107 0208 	add.w	r2, r7, #8
 80101c0:	4611      	mov	r1, r2
 80101c2:	4618      	mov	r0, r3
 80101c4:	f7ff fa34 	bl	800f630 <validate>
 80101c8:	4603      	mov	r3, r0
 80101ca:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80101cc:	7bfb      	ldrb	r3, [r7, #15]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d10c      	bne.n	80101ec <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	691b      	ldr	r3, [r3, #16]
 80101d6:	4618      	mov	r0, r3
 80101d8:	f7fd fe3a 	bl	800de50 <dec_lock>
 80101dc:	4603      	mov	r3, r0
 80101de:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80101e0:	7bfb      	ldrb	r3, [r7, #15]
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d102      	bne.n	80101ec <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	2200      	movs	r2, #0
 80101ea:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80101ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80101ee:	4618      	mov	r0, r3
 80101f0:	3710      	adds	r7, #16
 80101f2:	46bd      	mov	sp, r7
 80101f4:	bd80      	pop	{r7, pc}

080101f6 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80101f6:	b580      	push	{r7, lr}
 80101f8:	b086      	sub	sp, #24
 80101fa:	af00      	add	r7, sp, #0
 80101fc:	6078      	str	r0, [r7, #4]
 80101fe:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	2b00      	cmp	r3, #0
 8010204:	d101      	bne.n	801020a <f_opendir+0x14>
 8010206:	2309      	movs	r3, #9
 8010208:	e064      	b.n	80102d4 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 801020e:	f107 010c 	add.w	r1, r7, #12
 8010212:	463b      	mov	r3, r7
 8010214:	2200      	movs	r2, #0
 8010216:	4618      	mov	r0, r3
 8010218:	f7fe ff8a 	bl	800f130 <find_volume>
 801021c:	4603      	mov	r3, r0
 801021e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010220:	7dfb      	ldrb	r3, [r7, #23]
 8010222:	2b00      	cmp	r3, #0
 8010224:	d14f      	bne.n	80102c6 <f_opendir+0xd0>
		obj->fs = fs;
 8010226:	68fa      	ldr	r2, [r7, #12]
 8010228:	693b      	ldr	r3, [r7, #16]
 801022a:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 801022c:	683b      	ldr	r3, [r7, #0]
 801022e:	4619      	mov	r1, r3
 8010230:	6878      	ldr	r0, [r7, #4]
 8010232:	f7fe fe6d 	bl	800ef10 <follow_path>
 8010236:	4603      	mov	r3, r0
 8010238:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 801023a:	7dfb      	ldrb	r3, [r7, #23]
 801023c:	2b00      	cmp	r3, #0
 801023e:	d13d      	bne.n	80102bc <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010246:	b25b      	sxtb	r3, r3
 8010248:	2b00      	cmp	r3, #0
 801024a:	db12      	blt.n	8010272 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 801024c:	693b      	ldr	r3, [r7, #16]
 801024e:	799b      	ldrb	r3, [r3, #6]
 8010250:	f003 0310 	and.w	r3, r3, #16
 8010254:	2b00      	cmp	r3, #0
 8010256:	d00a      	beq.n	801026e <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8010258:	68fa      	ldr	r2, [r7, #12]
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	6a1b      	ldr	r3, [r3, #32]
 801025e:	4619      	mov	r1, r3
 8010260:	4610      	mov	r0, r2
 8010262:	f7fe fc21 	bl	800eaa8 <ld_clust>
 8010266:	4602      	mov	r2, r0
 8010268:	693b      	ldr	r3, [r7, #16]
 801026a:	609a      	str	r2, [r3, #8]
 801026c:	e001      	b.n	8010272 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 801026e:	2305      	movs	r3, #5
 8010270:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8010272:	7dfb      	ldrb	r3, [r7, #23]
 8010274:	2b00      	cmp	r3, #0
 8010276:	d121      	bne.n	80102bc <f_opendir+0xc6>
				obj->id = fs->id;
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	88da      	ldrh	r2, [r3, #6]
 801027c:	693b      	ldr	r3, [r7, #16]
 801027e:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8010280:	2100      	movs	r1, #0
 8010282:	6878      	ldr	r0, [r7, #4]
 8010284:	f7fe fa6a 	bl	800e75c <dir_sdi>
 8010288:	4603      	mov	r3, r0
 801028a:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 801028c:	7dfb      	ldrb	r3, [r7, #23]
 801028e:	2b00      	cmp	r3, #0
 8010290:	d114      	bne.n	80102bc <f_opendir+0xc6>
					if (obj->sclust) {
 8010292:	693b      	ldr	r3, [r7, #16]
 8010294:	689b      	ldr	r3, [r3, #8]
 8010296:	2b00      	cmp	r3, #0
 8010298:	d00d      	beq.n	80102b6 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 801029a:	2100      	movs	r1, #0
 801029c:	6878      	ldr	r0, [r7, #4]
 801029e:	f7fd fd49 	bl	800dd34 <inc_lock>
 80102a2:	4602      	mov	r2, r0
 80102a4:	693b      	ldr	r3, [r7, #16]
 80102a6:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80102a8:	693b      	ldr	r3, [r7, #16]
 80102aa:	691b      	ldr	r3, [r3, #16]
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d105      	bne.n	80102bc <f_opendir+0xc6>
 80102b0:	2312      	movs	r3, #18
 80102b2:	75fb      	strb	r3, [r7, #23]
 80102b4:	e002      	b.n	80102bc <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 80102b6:	693b      	ldr	r3, [r7, #16]
 80102b8:	2200      	movs	r2, #0
 80102ba:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80102bc:	7dfb      	ldrb	r3, [r7, #23]
 80102be:	2b04      	cmp	r3, #4
 80102c0:	d101      	bne.n	80102c6 <f_opendir+0xd0>
 80102c2:	2305      	movs	r3, #5
 80102c4:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80102c6:	7dfb      	ldrb	r3, [r7, #23]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d002      	beq.n	80102d2 <f_opendir+0xdc>
 80102cc:	693b      	ldr	r3, [r7, #16]
 80102ce:	2200      	movs	r2, #0
 80102d0:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80102d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80102d4:	4618      	mov	r0, r3
 80102d6:	3718      	adds	r7, #24
 80102d8:	46bd      	mov	sp, r7
 80102da:	bd80      	pop	{r7, pc}

080102dc <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 80102dc:	b580      	push	{r7, lr}
 80102de:	b084      	sub	sp, #16
 80102e0:	af00      	add	r7, sp, #0
 80102e2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	f107 0208 	add.w	r2, r7, #8
 80102ea:	4611      	mov	r1, r2
 80102ec:	4618      	mov	r0, r3
 80102ee:	f7ff f99f 	bl	800f630 <validate>
 80102f2:	4603      	mov	r3, r0
 80102f4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80102f6:	7bfb      	ldrb	r3, [r7, #15]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d110      	bne.n	801031e <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	691b      	ldr	r3, [r3, #16]
 8010300:	2b00      	cmp	r3, #0
 8010302:	d006      	beq.n	8010312 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	691b      	ldr	r3, [r3, #16]
 8010308:	4618      	mov	r0, r3
 801030a:	f7fd fda1 	bl	800de50 <dec_lock>
 801030e:	4603      	mov	r3, r0
 8010310:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8010312:	7bfb      	ldrb	r3, [r7, #15]
 8010314:	2b00      	cmp	r3, #0
 8010316:	d102      	bne.n	801031e <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	2200      	movs	r2, #0
 801031c:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 801031e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010320:	4618      	mov	r0, r3
 8010322:	3710      	adds	r7, #16
 8010324:	46bd      	mov	sp, r7
 8010326:	bd80      	pop	{r7, pc}

08010328 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8010328:	b580      	push	{r7, lr}
 801032a:	b084      	sub	sp, #16
 801032c:	af00      	add	r7, sp, #0
 801032e:	6078      	str	r0, [r7, #4]
 8010330:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	f107 0208 	add.w	r2, r7, #8
 8010338:	4611      	mov	r1, r2
 801033a:	4618      	mov	r0, r3
 801033c:	f7ff f978 	bl	800f630 <validate>
 8010340:	4603      	mov	r3, r0
 8010342:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010344:	7bfb      	ldrb	r3, [r7, #15]
 8010346:	2b00      	cmp	r3, #0
 8010348:	d126      	bne.n	8010398 <f_readdir+0x70>
		if (!fno) {
 801034a:	683b      	ldr	r3, [r7, #0]
 801034c:	2b00      	cmp	r3, #0
 801034e:	d106      	bne.n	801035e <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8010350:	2100      	movs	r1, #0
 8010352:	6878      	ldr	r0, [r7, #4]
 8010354:	f7fe fa02 	bl	800e75c <dir_sdi>
 8010358:	4603      	mov	r3, r0
 801035a:	73fb      	strb	r3, [r7, #15]
 801035c:	e01c      	b.n	8010398 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 801035e:	2100      	movs	r1, #0
 8010360:	6878      	ldr	r0, [r7, #4]
 8010362:	f7fe fbe0 	bl	800eb26 <dir_read>
 8010366:	4603      	mov	r3, r0
 8010368:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 801036a:	7bfb      	ldrb	r3, [r7, #15]
 801036c:	2b04      	cmp	r3, #4
 801036e:	d101      	bne.n	8010374 <f_readdir+0x4c>
 8010370:	2300      	movs	r3, #0
 8010372:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8010374:	7bfb      	ldrb	r3, [r7, #15]
 8010376:	2b00      	cmp	r3, #0
 8010378:	d10e      	bne.n	8010398 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 801037a:	6839      	ldr	r1, [r7, #0]
 801037c:	6878      	ldr	r0, [r7, #4]
 801037e:	f7fe fcd4 	bl	800ed2a <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8010382:	2100      	movs	r1, #0
 8010384:	6878      	ldr	r0, [r7, #4]
 8010386:	f7fe fa72 	bl	800e86e <dir_next>
 801038a:	4603      	mov	r3, r0
 801038c:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 801038e:	7bfb      	ldrb	r3, [r7, #15]
 8010390:	2b04      	cmp	r3, #4
 8010392:	d101      	bne.n	8010398 <f_readdir+0x70>
 8010394:	2300      	movs	r3, #0
 8010396:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8010398:	7bfb      	ldrb	r3, [r7, #15]
}
 801039a:	4618      	mov	r0, r3
 801039c:	3710      	adds	r7, #16
 801039e:	46bd      	mov	sp, r7
 80103a0:	bd80      	pop	{r7, pc}

080103a2 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80103a2:	b580      	push	{r7, lr}
 80103a4:	b090      	sub	sp, #64	; 0x40
 80103a6:	af00      	add	r7, sp, #0
 80103a8:	6078      	str	r0, [r7, #4]
 80103aa:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 80103ac:	f107 010c 	add.w	r1, r7, #12
 80103b0:	1d3b      	adds	r3, r7, #4
 80103b2:	2200      	movs	r2, #0
 80103b4:	4618      	mov	r0, r3
 80103b6:	f7fe febb 	bl	800f130 <find_volume>
 80103ba:	4603      	mov	r3, r0
 80103bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 80103c0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d11f      	bne.n	8010408 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80103c8:	687a      	ldr	r2, [r7, #4]
 80103ca:	f107 030c 	add.w	r3, r7, #12
 80103ce:	4611      	mov	r1, r2
 80103d0:	4618      	mov	r0, r3
 80103d2:	f7fe fd9d 	bl	800ef10 <follow_path>
 80103d6:	4603      	mov	r3, r0
 80103d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 80103dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d111      	bne.n	8010408 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 80103e4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80103e8:	b25b      	sxtb	r3, r3
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	da03      	bge.n	80103f6 <f_stat+0x54>
				res = FR_INVALID_NAME;
 80103ee:	2306      	movs	r3, #6
 80103f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80103f4:	e008      	b.n	8010408 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 80103f6:	683b      	ldr	r3, [r7, #0]
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d005      	beq.n	8010408 <f_stat+0x66>
 80103fc:	f107 030c 	add.w	r3, r7, #12
 8010400:	6839      	ldr	r1, [r7, #0]
 8010402:	4618      	mov	r0, r3
 8010404:	f7fe fc91 	bl	800ed2a <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8010408:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801040c:	4618      	mov	r0, r3
 801040e:	3740      	adds	r7, #64	; 0x40
 8010410:	46bd      	mov	sp, r7
 8010412:	bd80      	pop	{r7, pc}

08010414 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8010414:	b580      	push	{r7, lr}
 8010416:	b092      	sub	sp, #72	; 0x48
 8010418:	af00      	add	r7, sp, #0
 801041a:	60f8      	str	r0, [r7, #12]
 801041c:	60b9      	str	r1, [r7, #8]
 801041e:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8010420:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8010424:	f107 030c 	add.w	r3, r7, #12
 8010428:	2200      	movs	r2, #0
 801042a:	4618      	mov	r0, r3
 801042c:	f7fe fe80 	bl	800f130 <find_volume>
 8010430:	4603      	mov	r3, r0
 8010432:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8010436:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801043a:	2b00      	cmp	r3, #0
 801043c:	f040 8099 	bne.w	8010572 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8010440:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8010446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010448:	695a      	ldr	r2, [r3, #20]
 801044a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801044c:	699b      	ldr	r3, [r3, #24]
 801044e:	3b02      	subs	r3, #2
 8010450:	429a      	cmp	r2, r3
 8010452:	d804      	bhi.n	801045e <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8010454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010456:	695a      	ldr	r2, [r3, #20]
 8010458:	68bb      	ldr	r3, [r7, #8]
 801045a:	601a      	str	r2, [r3, #0]
 801045c:	e089      	b.n	8010572 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 801045e:	2300      	movs	r3, #0
 8010460:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8010462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010464:	781b      	ldrb	r3, [r3, #0]
 8010466:	2b01      	cmp	r3, #1
 8010468:	d128      	bne.n	80104bc <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 801046a:	2302      	movs	r3, #2
 801046c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801046e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010470:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8010472:	f107 0314 	add.w	r3, r7, #20
 8010476:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010478:	4618      	mov	r0, r3
 801047a:	f7fd fe4a 	bl	800e112 <get_fat>
 801047e:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8010480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010486:	d103      	bne.n	8010490 <f_getfree+0x7c>
 8010488:	2301      	movs	r3, #1
 801048a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801048e:	e063      	b.n	8010558 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8010490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010492:	2b01      	cmp	r3, #1
 8010494:	d103      	bne.n	801049e <f_getfree+0x8a>
 8010496:	2302      	movs	r3, #2
 8010498:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801049c:	e05c      	b.n	8010558 <f_getfree+0x144>
					if (stat == 0) nfree++;
 801049e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d102      	bne.n	80104aa <f_getfree+0x96>
 80104a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80104a6:	3301      	adds	r3, #1
 80104a8:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 80104aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104ac:	3301      	adds	r3, #1
 80104ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80104b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104b2:	699b      	ldr	r3, [r3, #24]
 80104b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80104b6:	429a      	cmp	r2, r3
 80104b8:	d3db      	bcc.n	8010472 <f_getfree+0x5e>
 80104ba:	e04d      	b.n	8010558 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 80104bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104be:	699b      	ldr	r3, [r3, #24]
 80104c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80104c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104c6:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 80104c8:	2300      	movs	r3, #0
 80104ca:	637b      	str	r3, [r7, #52]	; 0x34
 80104cc:	2300      	movs	r3, #0
 80104ce:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 80104d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d113      	bne.n	80104fe <f_getfree+0xea>
							res = move_window(fs, sect++);
 80104d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80104d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104da:	1c5a      	adds	r2, r3, #1
 80104dc:	63ba      	str	r2, [r7, #56]	; 0x38
 80104de:	4619      	mov	r1, r3
 80104e0:	f7fd fd5a 	bl	800df98 <move_window>
 80104e4:	4603      	mov	r3, r0
 80104e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 80104ea:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d131      	bne.n	8010556 <f_getfree+0x142>
							p = fs->win;
 80104f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104f4:	3334      	adds	r3, #52	; 0x34
 80104f6:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 80104f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104fa:	899b      	ldrh	r3, [r3, #12]
 80104fc:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 80104fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010500:	781b      	ldrb	r3, [r3, #0]
 8010502:	2b02      	cmp	r3, #2
 8010504:	d10f      	bne.n	8010526 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8010506:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010508:	f7fd fa96 	bl	800da38 <ld_word>
 801050c:	4603      	mov	r3, r0
 801050e:	2b00      	cmp	r3, #0
 8010510:	d102      	bne.n	8010518 <f_getfree+0x104>
 8010512:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010514:	3301      	adds	r3, #1
 8010516:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8010518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801051a:	3302      	adds	r3, #2
 801051c:	633b      	str	r3, [r7, #48]	; 0x30
 801051e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010520:	3b02      	subs	r3, #2
 8010522:	637b      	str	r3, [r7, #52]	; 0x34
 8010524:	e010      	b.n	8010548 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8010526:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010528:	f7fd fa9e 	bl	800da68 <ld_dword>
 801052c:	4603      	mov	r3, r0
 801052e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8010532:	2b00      	cmp	r3, #0
 8010534:	d102      	bne.n	801053c <f_getfree+0x128>
 8010536:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010538:	3301      	adds	r3, #1
 801053a:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 801053c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801053e:	3304      	adds	r3, #4
 8010540:	633b      	str	r3, [r7, #48]	; 0x30
 8010542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010544:	3b04      	subs	r3, #4
 8010546:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8010548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801054a:	3b01      	subs	r3, #1
 801054c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801054e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010550:	2b00      	cmp	r3, #0
 8010552:	d1bd      	bne.n	80104d0 <f_getfree+0xbc>
 8010554:	e000      	b.n	8010558 <f_getfree+0x144>
							if (res != FR_OK) break;
 8010556:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8010558:	68bb      	ldr	r3, [r7, #8]
 801055a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801055c:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 801055e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010560:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010562:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8010564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010566:	791a      	ldrb	r2, [r3, #4]
 8010568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801056a:	f042 0201 	orr.w	r2, r2, #1
 801056e:	b2d2      	uxtb	r2, r2
 8010570:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8010572:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8010576:	4618      	mov	r0, r3
 8010578:	3748      	adds	r7, #72	; 0x48
 801057a:	46bd      	mov	sp, r7
 801057c:	bd80      	pop	{r7, pc}

0801057e <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 801057e:	b580      	push	{r7, lr}
 8010580:	b09e      	sub	sp, #120	; 0x78
 8010582:	af00      	add	r7, sp, #0
 8010584:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8010586:	2300      	movs	r3, #0
 8010588:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 801058a:	f107 010c 	add.w	r1, r7, #12
 801058e:	1d3b      	adds	r3, r7, #4
 8010590:	2202      	movs	r2, #2
 8010592:	4618      	mov	r0, r3
 8010594:	f7fe fdcc 	bl	800f130 <find_volume>
 8010598:	4603      	mov	r3, r0
 801059a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 80105a2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	f040 808e 	bne.w	80106c8 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 80105ac:	687a      	ldr	r2, [r7, #4]
 80105ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80105b2:	4611      	mov	r1, r2
 80105b4:	4618      	mov	r0, r3
 80105b6:	f7fe fcab 	bl	800ef10 <follow_path>
 80105ba:	4603      	mov	r3, r0
 80105bc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 80105c0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d108      	bne.n	80105da <f_unlink+0x5c>
 80105c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80105cc:	2102      	movs	r1, #2
 80105ce:	4618      	mov	r0, r3
 80105d0:	f7fd fb32 	bl	800dc38 <chk_lock>
 80105d4:	4603      	mov	r3, r0
 80105d6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 80105da:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d172      	bne.n	80106c8 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80105e2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80105e6:	b25b      	sxtb	r3, r3
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	da03      	bge.n	80105f4 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 80105ec:	2306      	movs	r3, #6
 80105ee:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80105f2:	e008      	b.n	8010606 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 80105f4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80105f8:	f003 0301 	and.w	r3, r3, #1
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d002      	beq.n	8010606 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8010600:	2307      	movs	r3, #7
 8010602:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8010606:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801060a:	2b00      	cmp	r3, #0
 801060c:	d134      	bne.n	8010678 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010612:	4611      	mov	r1, r2
 8010614:	4618      	mov	r0, r3
 8010616:	f7fe fa47 	bl	800eaa8 <ld_clust>
 801061a:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 801061c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8010620:	f003 0310 	and.w	r3, r3, #16
 8010624:	2b00      	cmp	r3, #0
 8010626:	d027      	beq.n	8010678 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 801062c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801062e:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8010630:	f107 0310 	add.w	r3, r7, #16
 8010634:	2100      	movs	r1, #0
 8010636:	4618      	mov	r0, r3
 8010638:	f7fe f890 	bl	800e75c <dir_sdi>
 801063c:	4603      	mov	r3, r0
 801063e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8010642:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8010646:	2b00      	cmp	r3, #0
 8010648:	d116      	bne.n	8010678 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 801064a:	f107 0310 	add.w	r3, r7, #16
 801064e:	2100      	movs	r1, #0
 8010650:	4618      	mov	r0, r3
 8010652:	f7fe fa68 	bl	800eb26 <dir_read>
 8010656:	4603      	mov	r3, r0
 8010658:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 801065c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8010660:	2b00      	cmp	r3, #0
 8010662:	d102      	bne.n	801066a <f_unlink+0xec>
 8010664:	2307      	movs	r3, #7
 8010666:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 801066a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801066e:	2b04      	cmp	r3, #4
 8010670:	d102      	bne.n	8010678 <f_unlink+0xfa>
 8010672:	2300      	movs	r3, #0
 8010674:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8010678:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801067c:	2b00      	cmp	r3, #0
 801067e:	d123      	bne.n	80106c8 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8010680:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010684:	4618      	mov	r0, r3
 8010686:	f7fe fb32 	bl	800ecee <dir_remove>
 801068a:	4603      	mov	r3, r0
 801068c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8010690:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8010694:	2b00      	cmp	r3, #0
 8010696:	d10c      	bne.n	80106b2 <f_unlink+0x134>
 8010698:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801069a:	2b00      	cmp	r3, #0
 801069c:	d009      	beq.n	80106b2 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 801069e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80106a2:	2200      	movs	r2, #0
 80106a4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80106a6:	4618      	mov	r0, r3
 80106a8:	f7fd ff23 	bl	800e4f2 <remove_chain>
 80106ac:	4603      	mov	r3, r0
 80106ae:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 80106b2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d106      	bne.n	80106c8 <f_unlink+0x14a>
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	4618      	mov	r0, r3
 80106be:	f7fd fc99 	bl	800dff4 <sync_fs>
 80106c2:	4603      	mov	r3, r0
 80106c4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80106c8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80106cc:	4618      	mov	r0, r3
 80106ce:	3778      	adds	r7, #120	; 0x78
 80106d0:	46bd      	mov	sp, r7
 80106d2:	bd80      	pop	{r7, pc}

080106d4 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 80106d4:	b580      	push	{r7, lr}
 80106d6:	b096      	sub	sp, #88	; 0x58
 80106d8:	af00      	add	r7, sp, #0
 80106da:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80106dc:	f107 0108 	add.w	r1, r7, #8
 80106e0:	1d3b      	adds	r3, r7, #4
 80106e2:	2202      	movs	r2, #2
 80106e4:	4618      	mov	r0, r3
 80106e6:	f7fe fd23 	bl	800f130 <find_volume>
 80106ea:	4603      	mov	r3, r0
 80106ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 80106f0:	68bb      	ldr	r3, [r7, #8]
 80106f2:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 80106f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	f040 80f2 	bne.w	80108e2 <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 80106fe:	687a      	ldr	r2, [r7, #4]
 8010700:	f107 030c 	add.w	r3, r7, #12
 8010704:	4611      	mov	r1, r2
 8010706:	4618      	mov	r0, r3
 8010708:	f7fe fc02 	bl	800ef10 <follow_path>
 801070c:	4603      	mov	r3, r0
 801070e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8010712:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010716:	2b00      	cmp	r3, #0
 8010718:	d102      	bne.n	8010720 <f_mkdir+0x4c>
 801071a:	2308      	movs	r3, #8
 801071c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8010720:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010724:	2b04      	cmp	r3, #4
 8010726:	f040 80dc 	bne.w	80108e2 <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 801072a:	f107 030c 	add.w	r3, r7, #12
 801072e:	2100      	movs	r1, #0
 8010730:	4618      	mov	r0, r3
 8010732:	f7fd ff43 	bl	800e5bc <create_chain>
 8010736:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8010738:	68bb      	ldr	r3, [r7, #8]
 801073a:	895b      	ldrh	r3, [r3, #10]
 801073c:	461a      	mov	r2, r3
 801073e:	68bb      	ldr	r3, [r7, #8]
 8010740:	899b      	ldrh	r3, [r3, #12]
 8010742:	fb02 f303 	mul.w	r3, r2, r3
 8010746:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8010748:	2300      	movs	r3, #0
 801074a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 801074e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010750:	2b00      	cmp	r3, #0
 8010752:	d102      	bne.n	801075a <f_mkdir+0x86>
 8010754:	2307      	movs	r3, #7
 8010756:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 801075a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801075c:	2b01      	cmp	r3, #1
 801075e:	d102      	bne.n	8010766 <f_mkdir+0x92>
 8010760:	2302      	movs	r3, #2
 8010762:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010766:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010768:	f1b3 3fff 	cmp.w	r3, #4294967295
 801076c:	d102      	bne.n	8010774 <f_mkdir+0xa0>
 801076e:	2301      	movs	r3, #1
 8010770:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8010774:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010778:	2b00      	cmp	r3, #0
 801077a:	d106      	bne.n	801078a <f_mkdir+0xb6>
 801077c:	68bb      	ldr	r3, [r7, #8]
 801077e:	4618      	mov	r0, r3
 8010780:	f7fd fbc6 	bl	800df10 <sync_window>
 8010784:	4603      	mov	r3, r0
 8010786:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 801078a:	f7fc fe67 	bl	800d45c <get_fattime>
 801078e:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8010790:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010794:	2b00      	cmp	r3, #0
 8010796:	d16c      	bne.n	8010872 <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 8010798:	68bb      	ldr	r3, [r7, #8]
 801079a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801079c:	4618      	mov	r0, r3
 801079e:	f7fd fc99 	bl	800e0d4 <clust2sect>
 80107a2:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 80107a4:	68bb      	ldr	r3, [r7, #8]
 80107a6:	3334      	adds	r3, #52	; 0x34
 80107a8:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 80107aa:	68bb      	ldr	r3, [r7, #8]
 80107ac:	899b      	ldrh	r3, [r3, #12]
 80107ae:	461a      	mov	r2, r3
 80107b0:	2100      	movs	r1, #0
 80107b2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80107b4:	f7fd f9e3 	bl	800db7e <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 80107b8:	220b      	movs	r2, #11
 80107ba:	2120      	movs	r1, #32
 80107bc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80107be:	f7fd f9de 	bl	800db7e <mem_set>
					dir[DIR_Name] = '.';
 80107c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107c4:	222e      	movs	r2, #46	; 0x2e
 80107c6:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 80107c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107ca:	330b      	adds	r3, #11
 80107cc:	2210      	movs	r2, #16
 80107ce:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 80107d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107d2:	3316      	adds	r3, #22
 80107d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80107d6:	4618      	mov	r0, r3
 80107d8:	f7fd f984 	bl	800dae4 <st_dword>
					st_clust(fs, dir, dcl);
 80107dc:	68bb      	ldr	r3, [r7, #8]
 80107de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80107e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80107e2:	4618      	mov	r0, r3
 80107e4:	f7fe f97f 	bl	800eae6 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 80107e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107ea:	3320      	adds	r3, #32
 80107ec:	2220      	movs	r2, #32
 80107ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80107f0:	4618      	mov	r0, r3
 80107f2:	f7fd f9a3 	bl	800db3c <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 80107f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107f8:	3321      	adds	r3, #33	; 0x21
 80107fa:	222e      	movs	r2, #46	; 0x2e
 80107fc:	701a      	strb	r2, [r3, #0]
 80107fe:	697b      	ldr	r3, [r7, #20]
 8010800:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8010802:	68bb      	ldr	r3, [r7, #8]
 8010804:	781b      	ldrb	r3, [r3, #0]
 8010806:	2b03      	cmp	r3, #3
 8010808:	d106      	bne.n	8010818 <f_mkdir+0x144>
 801080a:	68bb      	ldr	r3, [r7, #8]
 801080c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801080e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010810:	429a      	cmp	r2, r3
 8010812:	d101      	bne.n	8010818 <f_mkdir+0x144>
 8010814:	2300      	movs	r3, #0
 8010816:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8010818:	68b8      	ldr	r0, [r7, #8]
 801081a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801081c:	3320      	adds	r3, #32
 801081e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010820:	4619      	mov	r1, r3
 8010822:	f7fe f960 	bl	800eae6 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8010826:	68bb      	ldr	r3, [r7, #8]
 8010828:	895b      	ldrh	r3, [r3, #10]
 801082a:	653b      	str	r3, [r7, #80]	; 0x50
 801082c:	e01c      	b.n	8010868 <f_mkdir+0x194>
					fs->winsect = dsc++;
 801082e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010830:	1c5a      	adds	r2, r3, #1
 8010832:	64fa      	str	r2, [r7, #76]	; 0x4c
 8010834:	68ba      	ldr	r2, [r7, #8]
 8010836:	6313      	str	r3, [r2, #48]	; 0x30
					fs->wflag = 1;
 8010838:	68bb      	ldr	r3, [r7, #8]
 801083a:	2201      	movs	r2, #1
 801083c:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 801083e:	68bb      	ldr	r3, [r7, #8]
 8010840:	4618      	mov	r0, r3
 8010842:	f7fd fb65 	bl	800df10 <sync_window>
 8010846:	4603      	mov	r3, r0
 8010848:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 801084c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010850:	2b00      	cmp	r3, #0
 8010852:	d10d      	bne.n	8010870 <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 8010854:	68bb      	ldr	r3, [r7, #8]
 8010856:	899b      	ldrh	r3, [r3, #12]
 8010858:	461a      	mov	r2, r3
 801085a:	2100      	movs	r1, #0
 801085c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801085e:	f7fd f98e 	bl	800db7e <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8010862:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010864:	3b01      	subs	r3, #1
 8010866:	653b      	str	r3, [r7, #80]	; 0x50
 8010868:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801086a:	2b00      	cmp	r3, #0
 801086c:	d1df      	bne.n	801082e <f_mkdir+0x15a>
 801086e:	e000      	b.n	8010872 <f_mkdir+0x19e>
					if (res != FR_OK) break;
 8010870:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8010872:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010876:	2b00      	cmp	r3, #0
 8010878:	d107      	bne.n	801088a <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 801087a:	f107 030c 	add.w	r3, r7, #12
 801087e:	4618      	mov	r0, r3
 8010880:	f7fe fa03 	bl	800ec8a <dir_register>
 8010884:	4603      	mov	r3, r0
 8010886:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 801088a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801088e:	2b00      	cmp	r3, #0
 8010890:	d120      	bne.n	80108d4 <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8010892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010894:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8010896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010898:	3316      	adds	r3, #22
 801089a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801089c:	4618      	mov	r0, r3
 801089e:	f7fd f921 	bl	800dae4 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 80108a2:	68bb      	ldr	r3, [r7, #8]
 80108a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80108a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80108a8:	4618      	mov	r0, r3
 80108aa:	f7fe f91c 	bl	800eae6 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 80108ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80108b0:	330b      	adds	r3, #11
 80108b2:	2210      	movs	r2, #16
 80108b4:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 80108b6:	68bb      	ldr	r3, [r7, #8]
 80108b8:	2201      	movs	r2, #1
 80108ba:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 80108bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d10e      	bne.n	80108e2 <f_mkdir+0x20e>
					res = sync_fs(fs);
 80108c4:	68bb      	ldr	r3, [r7, #8]
 80108c6:	4618      	mov	r0, r3
 80108c8:	f7fd fb94 	bl	800dff4 <sync_fs>
 80108cc:	4603      	mov	r3, r0
 80108ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80108d2:	e006      	b.n	80108e2 <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 80108d4:	f107 030c 	add.w	r3, r7, #12
 80108d8:	2200      	movs	r2, #0
 80108da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80108dc:	4618      	mov	r0, r3
 80108de:	f7fd fe08 	bl	800e4f2 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80108e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 80108e6:	4618      	mov	r0, r3
 80108e8:	3758      	adds	r7, #88	; 0x58
 80108ea:	46bd      	mov	sp, r7
 80108ec:	bd80      	pop	{r7, pc}

080108ee <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80108ee:	b580      	push	{r7, lr}
 80108f0:	b088      	sub	sp, #32
 80108f2:	af00      	add	r7, sp, #0
 80108f4:	60f8      	str	r0, [r7, #12]
 80108f6:	60b9      	str	r1, [r7, #8]
 80108f8:	607a      	str	r2, [r7, #4]
	int n = 0;
 80108fa:	2300      	movs	r3, #0
 80108fc:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8010902:	e017      	b.n	8010934 <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8010904:	f107 0310 	add.w	r3, r7, #16
 8010908:	f107 0114 	add.w	r1, r7, #20
 801090c:	2201      	movs	r2, #1
 801090e:	6878      	ldr	r0, [r7, #4]
 8010910:	f7ff f8d6 	bl	800fac0 <f_read>
		if (rc != 1) break;
 8010914:	693b      	ldr	r3, [r7, #16]
 8010916:	2b01      	cmp	r3, #1
 8010918:	d112      	bne.n	8010940 <f_gets+0x52>
		c = s[0];
 801091a:	7d3b      	ldrb	r3, [r7, #20]
 801091c:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 801091e:	69bb      	ldr	r3, [r7, #24]
 8010920:	1c5a      	adds	r2, r3, #1
 8010922:	61ba      	str	r2, [r7, #24]
 8010924:	7dfa      	ldrb	r2, [r7, #23]
 8010926:	701a      	strb	r2, [r3, #0]
		n++;
 8010928:	69fb      	ldr	r3, [r7, #28]
 801092a:	3301      	adds	r3, #1
 801092c:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 801092e:	7dfb      	ldrb	r3, [r7, #23]
 8010930:	2b0a      	cmp	r3, #10
 8010932:	d007      	beq.n	8010944 <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8010934:	68bb      	ldr	r3, [r7, #8]
 8010936:	3b01      	subs	r3, #1
 8010938:	69fa      	ldr	r2, [r7, #28]
 801093a:	429a      	cmp	r2, r3
 801093c:	dbe2      	blt.n	8010904 <f_gets+0x16>
 801093e:	e002      	b.n	8010946 <f_gets+0x58>
		if (rc != 1) break;
 8010940:	bf00      	nop
 8010942:	e000      	b.n	8010946 <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 8010944:	bf00      	nop
	}
	*p = 0;
 8010946:	69bb      	ldr	r3, [r7, #24]
 8010948:	2200      	movs	r2, #0
 801094a:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 801094c:	69fb      	ldr	r3, [r7, #28]
 801094e:	2b00      	cmp	r3, #0
 8010950:	d001      	beq.n	8010956 <f_gets+0x68>
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	e000      	b.n	8010958 <f_gets+0x6a>
 8010956:	2300      	movs	r3, #0
}
 8010958:	4618      	mov	r0, r3
 801095a:	3720      	adds	r7, #32
 801095c:	46bd      	mov	sp, r7
 801095e:	bd80      	pop	{r7, pc}

08010960 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010960:	b480      	push	{r7}
 8010962:	b087      	sub	sp, #28
 8010964:	af00      	add	r7, sp, #0
 8010966:	60f8      	str	r0, [r7, #12]
 8010968:	60b9      	str	r1, [r7, #8]
 801096a:	4613      	mov	r3, r2
 801096c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801096e:	2301      	movs	r3, #1
 8010970:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010972:	2300      	movs	r3, #0
 8010974:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010976:	4b1f      	ldr	r3, [pc, #124]	; (80109f4 <FATFS_LinkDriverEx+0x94>)
 8010978:	7a5b      	ldrb	r3, [r3, #9]
 801097a:	b2db      	uxtb	r3, r3
 801097c:	2b00      	cmp	r3, #0
 801097e:	d131      	bne.n	80109e4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010980:	4b1c      	ldr	r3, [pc, #112]	; (80109f4 <FATFS_LinkDriverEx+0x94>)
 8010982:	7a5b      	ldrb	r3, [r3, #9]
 8010984:	b2db      	uxtb	r3, r3
 8010986:	461a      	mov	r2, r3
 8010988:	4b1a      	ldr	r3, [pc, #104]	; (80109f4 <FATFS_LinkDriverEx+0x94>)
 801098a:	2100      	movs	r1, #0
 801098c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801098e:	4b19      	ldr	r3, [pc, #100]	; (80109f4 <FATFS_LinkDriverEx+0x94>)
 8010990:	7a5b      	ldrb	r3, [r3, #9]
 8010992:	b2db      	uxtb	r3, r3
 8010994:	4a17      	ldr	r2, [pc, #92]	; (80109f4 <FATFS_LinkDriverEx+0x94>)
 8010996:	009b      	lsls	r3, r3, #2
 8010998:	4413      	add	r3, r2
 801099a:	68fa      	ldr	r2, [r7, #12]
 801099c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801099e:	4b15      	ldr	r3, [pc, #84]	; (80109f4 <FATFS_LinkDriverEx+0x94>)
 80109a0:	7a5b      	ldrb	r3, [r3, #9]
 80109a2:	b2db      	uxtb	r3, r3
 80109a4:	461a      	mov	r2, r3
 80109a6:	4b13      	ldr	r3, [pc, #76]	; (80109f4 <FATFS_LinkDriverEx+0x94>)
 80109a8:	4413      	add	r3, r2
 80109aa:	79fa      	ldrb	r2, [r7, #7]
 80109ac:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80109ae:	4b11      	ldr	r3, [pc, #68]	; (80109f4 <FATFS_LinkDriverEx+0x94>)
 80109b0:	7a5b      	ldrb	r3, [r3, #9]
 80109b2:	b2db      	uxtb	r3, r3
 80109b4:	1c5a      	adds	r2, r3, #1
 80109b6:	b2d1      	uxtb	r1, r2
 80109b8:	4a0e      	ldr	r2, [pc, #56]	; (80109f4 <FATFS_LinkDriverEx+0x94>)
 80109ba:	7251      	strb	r1, [r2, #9]
 80109bc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80109be:	7dbb      	ldrb	r3, [r7, #22]
 80109c0:	3330      	adds	r3, #48	; 0x30
 80109c2:	b2da      	uxtb	r2, r3
 80109c4:	68bb      	ldr	r3, [r7, #8]
 80109c6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80109c8:	68bb      	ldr	r3, [r7, #8]
 80109ca:	3301      	adds	r3, #1
 80109cc:	223a      	movs	r2, #58	; 0x3a
 80109ce:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80109d0:	68bb      	ldr	r3, [r7, #8]
 80109d2:	3302      	adds	r3, #2
 80109d4:	222f      	movs	r2, #47	; 0x2f
 80109d6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80109d8:	68bb      	ldr	r3, [r7, #8]
 80109da:	3303      	adds	r3, #3
 80109dc:	2200      	movs	r2, #0
 80109de:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80109e0:	2300      	movs	r3, #0
 80109e2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80109e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80109e6:	4618      	mov	r0, r3
 80109e8:	371c      	adds	r7, #28
 80109ea:	46bd      	mov	sp, r7
 80109ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f0:	4770      	bx	lr
 80109f2:	bf00      	nop
 80109f4:	20007af0 	.word	0x20007af0

080109f8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80109f8:	b580      	push	{r7, lr}
 80109fa:	b082      	sub	sp, #8
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	6078      	str	r0, [r7, #4]
 8010a00:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010a02:	2200      	movs	r2, #0
 8010a04:	6839      	ldr	r1, [r7, #0]
 8010a06:	6878      	ldr	r0, [r7, #4]
 8010a08:	f7ff ffaa 	bl	8010960 <FATFS_LinkDriverEx>
 8010a0c:	4603      	mov	r3, r0
}
 8010a0e:	4618      	mov	r0, r3
 8010a10:	3708      	adds	r7, #8
 8010a12:	46bd      	mov	sp, r7
 8010a14:	bd80      	pop	{r7, pc}

08010a16 <atof>:
 8010a16:	2100      	movs	r1, #0
 8010a18:	f001 bf30 	b.w	801287c <strtod>

08010a1c <__errno>:
 8010a1c:	4b01      	ldr	r3, [pc, #4]	; (8010a24 <__errno+0x8>)
 8010a1e:	6818      	ldr	r0, [r3, #0]
 8010a20:	4770      	bx	lr
 8010a22:	bf00      	nop
 8010a24:	20000020 	.word	0x20000020

08010a28 <gmtime>:
 8010a28:	b538      	push	{r3, r4, r5, lr}
 8010a2a:	4b0b      	ldr	r3, [pc, #44]	; (8010a58 <gmtime+0x30>)
 8010a2c:	681d      	ldr	r5, [r3, #0]
 8010a2e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8010a30:	4604      	mov	r4, r0
 8010a32:	b953      	cbnz	r3, 8010a4a <gmtime+0x22>
 8010a34:	2024      	movs	r0, #36	; 0x24
 8010a36:	f000 f8e5 	bl	8010c04 <malloc>
 8010a3a:	4602      	mov	r2, r0
 8010a3c:	63e8      	str	r0, [r5, #60]	; 0x3c
 8010a3e:	b920      	cbnz	r0, 8010a4a <gmtime+0x22>
 8010a40:	4b06      	ldr	r3, [pc, #24]	; (8010a5c <gmtime+0x34>)
 8010a42:	4807      	ldr	r0, [pc, #28]	; (8010a60 <gmtime+0x38>)
 8010a44:	2139      	movs	r1, #57	; 0x39
 8010a46:	f002 f961 	bl	8012d0c <__assert_func>
 8010a4a:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8010a4c:	4620      	mov	r0, r4
 8010a4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010a52:	f000 b807 	b.w	8010a64 <gmtime_r>
 8010a56:	bf00      	nop
 8010a58:	20000020 	.word	0x20000020
 8010a5c:	08018f08 	.word	0x08018f08
 8010a60:	08018f1f 	.word	0x08018f1f

08010a64 <gmtime_r>:
 8010a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a68:	e9d0 6700 	ldrd	r6, r7, [r0]
 8010a6c:	460c      	mov	r4, r1
 8010a6e:	4a4f      	ldr	r2, [pc, #316]	; (8010bac <gmtime_r+0x148>)
 8010a70:	2300      	movs	r3, #0
 8010a72:	4630      	mov	r0, r6
 8010a74:	4639      	mov	r1, r7
 8010a76:	f7f0 f91f 	bl	8000cb8 <__aeabi_ldivmod>
 8010a7a:	4639      	mov	r1, r7
 8010a7c:	4605      	mov	r5, r0
 8010a7e:	4a4b      	ldr	r2, [pc, #300]	; (8010bac <gmtime_r+0x148>)
 8010a80:	4630      	mov	r0, r6
 8010a82:	2300      	movs	r3, #0
 8010a84:	f7f0 f918 	bl	8000cb8 <__aeabi_ldivmod>
 8010a88:	2a00      	cmp	r2, #0
 8010a8a:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8010a8e:	bfb7      	itett	lt
 8010a90:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8010a94:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 8010a98:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 8010a9c:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8010aa0:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8010aa4:	fbb2 f1f0 	udiv	r1, r2, r0
 8010aa8:	fb00 2211 	mls	r2, r0, r1, r2
 8010aac:	203c      	movs	r0, #60	; 0x3c
 8010aae:	60a1      	str	r1, [r4, #8]
 8010ab0:	fbb2 f1f0 	udiv	r1, r2, r0
 8010ab4:	fb00 2211 	mls	r2, r0, r1, r2
 8010ab8:	6061      	str	r1, [r4, #4]
 8010aba:	6022      	str	r2, [r4, #0]
 8010abc:	2107      	movs	r1, #7
 8010abe:	1cda      	adds	r2, r3, #3
 8010ac0:	fb92 f1f1 	sdiv	r1, r2, r1
 8010ac4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8010ac8:	1a52      	subs	r2, r2, r1
 8010aca:	bf48      	it	mi
 8010acc:	3207      	addmi	r2, #7
 8010ace:	4d38      	ldr	r5, [pc, #224]	; (8010bb0 <gmtime_r+0x14c>)
 8010ad0:	4838      	ldr	r0, [pc, #224]	; (8010bb4 <gmtime_r+0x150>)
 8010ad2:	61a2      	str	r2, [r4, #24]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	bfb7      	itett	lt
 8010ad8:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 8010adc:	fb93 f5f5 	sdivge	r5, r3, r5
 8010ae0:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 8010ae4:	fb92 f5f5 	sdivlt	r5, r2, r5
 8010ae8:	fb00 3005 	mla	r0, r0, r5, r3
 8010aec:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8010af0:	fbb0 f2f2 	udiv	r2, r0, r2
 8010af4:	4402      	add	r2, r0
 8010af6:	f240 53b4 	movw	r3, #1460	; 0x5b4
 8010afa:	fbb0 f1f3 	udiv	r1, r0, r3
 8010afe:	1a52      	subs	r2, r2, r1
 8010b00:	f240 1c6d 	movw	ip, #365	; 0x16d
 8010b04:	492c      	ldr	r1, [pc, #176]	; (8010bb8 <gmtime_r+0x154>)
 8010b06:	fbb0 f1f1 	udiv	r1, r0, r1
 8010b0a:	2764      	movs	r7, #100	; 0x64
 8010b0c:	1a52      	subs	r2, r2, r1
 8010b0e:	fbb2 f1fc 	udiv	r1, r2, ip
 8010b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8010b16:	fbb1 f6f7 	udiv	r6, r1, r7
 8010b1a:	1af3      	subs	r3, r6, r3
 8010b1c:	4403      	add	r3, r0
 8010b1e:	fb0c 3311 	mls	r3, ip, r1, r3
 8010b22:	2299      	movs	r2, #153	; 0x99
 8010b24:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 8010b28:	f10e 0e02 	add.w	lr, lr, #2
 8010b2c:	f103 0c01 	add.w	ip, r3, #1
 8010b30:	fbbe f0f2 	udiv	r0, lr, r2
 8010b34:	4342      	muls	r2, r0
 8010b36:	3202      	adds	r2, #2
 8010b38:	f04f 0805 	mov.w	r8, #5
 8010b3c:	fbb2 f2f8 	udiv	r2, r2, r8
 8010b40:	ebac 0c02 	sub.w	ip, ip, r2
 8010b44:	f240 52f9 	movw	r2, #1529	; 0x5f9
 8010b48:	4596      	cmp	lr, r2
 8010b4a:	bf94      	ite	ls
 8010b4c:	2202      	movls	r2, #2
 8010b4e:	f06f 0209 	mvnhi.w	r2, #9
 8010b52:	4410      	add	r0, r2
 8010b54:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8010b58:	fb02 1505 	mla	r5, r2, r5, r1
 8010b5c:	2801      	cmp	r0, #1
 8010b5e:	bf98      	it	ls
 8010b60:	3501      	addls	r5, #1
 8010b62:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8010b66:	d30d      	bcc.n	8010b84 <gmtime_r+0x120>
 8010b68:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8010b6c:	61e3      	str	r3, [r4, #28]
 8010b6e:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 8010b72:	2300      	movs	r3, #0
 8010b74:	e9c4 0504 	strd	r0, r5, [r4, #16]
 8010b78:	f8c4 c00c 	str.w	ip, [r4, #12]
 8010b7c:	6223      	str	r3, [r4, #32]
 8010b7e:	4620      	mov	r0, r4
 8010b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b84:	078a      	lsls	r2, r1, #30
 8010b86:	d102      	bne.n	8010b8e <gmtime_r+0x12a>
 8010b88:	fb07 1616 	mls	r6, r7, r6, r1
 8010b8c:	b95e      	cbnz	r6, 8010ba6 <gmtime_r+0x142>
 8010b8e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8010b92:	fbb1 f6f2 	udiv	r6, r1, r2
 8010b96:	fb02 1216 	mls	r2, r2, r6, r1
 8010b9a:	fab2 f282 	clz	r2, r2
 8010b9e:	0952      	lsrs	r2, r2, #5
 8010ba0:	333b      	adds	r3, #59	; 0x3b
 8010ba2:	4413      	add	r3, r2
 8010ba4:	e7e2      	b.n	8010b6c <gmtime_r+0x108>
 8010ba6:	2201      	movs	r2, #1
 8010ba8:	e7fa      	b.n	8010ba0 <gmtime_r+0x13c>
 8010baa:	bf00      	nop
 8010bac:	00015180 	.word	0x00015180
 8010bb0:	00023ab1 	.word	0x00023ab1
 8010bb4:	fffdc54f 	.word	0xfffdc54f
 8010bb8:	00023ab0 	.word	0x00023ab0

08010bbc <__libc_init_array>:
 8010bbc:	b570      	push	{r4, r5, r6, lr}
 8010bbe:	4d0d      	ldr	r5, [pc, #52]	; (8010bf4 <__libc_init_array+0x38>)
 8010bc0:	4c0d      	ldr	r4, [pc, #52]	; (8010bf8 <__libc_init_array+0x3c>)
 8010bc2:	1b64      	subs	r4, r4, r5
 8010bc4:	10a4      	asrs	r4, r4, #2
 8010bc6:	2600      	movs	r6, #0
 8010bc8:	42a6      	cmp	r6, r4
 8010bca:	d109      	bne.n	8010be0 <__libc_init_array+0x24>
 8010bcc:	4d0b      	ldr	r5, [pc, #44]	; (8010bfc <__libc_init_array+0x40>)
 8010bce:	4c0c      	ldr	r4, [pc, #48]	; (8010c00 <__libc_init_array+0x44>)
 8010bd0:	f006 ffe0 	bl	8017b94 <_init>
 8010bd4:	1b64      	subs	r4, r4, r5
 8010bd6:	10a4      	asrs	r4, r4, #2
 8010bd8:	2600      	movs	r6, #0
 8010bda:	42a6      	cmp	r6, r4
 8010bdc:	d105      	bne.n	8010bea <__libc_init_array+0x2e>
 8010bde:	bd70      	pop	{r4, r5, r6, pc}
 8010be0:	f855 3b04 	ldr.w	r3, [r5], #4
 8010be4:	4798      	blx	r3
 8010be6:	3601      	adds	r6, #1
 8010be8:	e7ee      	b.n	8010bc8 <__libc_init_array+0xc>
 8010bea:	f855 3b04 	ldr.w	r3, [r5], #4
 8010bee:	4798      	blx	r3
 8010bf0:	3601      	adds	r6, #1
 8010bf2:	e7f2      	b.n	8010bda <__libc_init_array+0x1e>
 8010bf4:	08019770 	.word	0x08019770
 8010bf8:	08019770 	.word	0x08019770
 8010bfc:	08019770 	.word	0x08019770
 8010c00:	08019774 	.word	0x08019774

08010c04 <malloc>:
 8010c04:	4b02      	ldr	r3, [pc, #8]	; (8010c10 <malloc+0xc>)
 8010c06:	4601      	mov	r1, r0
 8010c08:	6818      	ldr	r0, [r3, #0]
 8010c0a:	f000 baf1 	b.w	80111f0 <_malloc_r>
 8010c0e:	bf00      	nop
 8010c10:	20000020 	.word	0x20000020

08010c14 <free>:
 8010c14:	4b02      	ldr	r3, [pc, #8]	; (8010c20 <free+0xc>)
 8010c16:	4601      	mov	r1, r0
 8010c18:	6818      	ldr	r0, [r3, #0]
 8010c1a:	f000 ba7d 	b.w	8011118 <_free_r>
 8010c1e:	bf00      	nop
 8010c20:	20000020 	.word	0x20000020

08010c24 <memset>:
 8010c24:	4402      	add	r2, r0
 8010c26:	4603      	mov	r3, r0
 8010c28:	4293      	cmp	r3, r2
 8010c2a:	d100      	bne.n	8010c2e <memset+0xa>
 8010c2c:	4770      	bx	lr
 8010c2e:	f803 1b01 	strb.w	r1, [r3], #1
 8010c32:	e7f9      	b.n	8010c28 <memset+0x4>

08010c34 <validate_structure>:
 8010c34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010c36:	6801      	ldr	r1, [r0, #0]
 8010c38:	293b      	cmp	r1, #59	; 0x3b
 8010c3a:	4604      	mov	r4, r0
 8010c3c:	d911      	bls.n	8010c62 <validate_structure+0x2e>
 8010c3e:	223c      	movs	r2, #60	; 0x3c
 8010c40:	4668      	mov	r0, sp
 8010c42:	f002 f881 	bl	8012d48 <div>
 8010c46:	9a01      	ldr	r2, [sp, #4]
 8010c48:	6863      	ldr	r3, [r4, #4]
 8010c4a:	9900      	ldr	r1, [sp, #0]
 8010c4c:	2a00      	cmp	r2, #0
 8010c4e:	440b      	add	r3, r1
 8010c50:	6063      	str	r3, [r4, #4]
 8010c52:	bfbb      	ittet	lt
 8010c54:	323c      	addlt	r2, #60	; 0x3c
 8010c56:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8010c5a:	6022      	strge	r2, [r4, #0]
 8010c5c:	6022      	strlt	r2, [r4, #0]
 8010c5e:	bfb8      	it	lt
 8010c60:	6063      	strlt	r3, [r4, #4]
 8010c62:	6861      	ldr	r1, [r4, #4]
 8010c64:	293b      	cmp	r1, #59	; 0x3b
 8010c66:	d911      	bls.n	8010c8c <validate_structure+0x58>
 8010c68:	223c      	movs	r2, #60	; 0x3c
 8010c6a:	4668      	mov	r0, sp
 8010c6c:	f002 f86c 	bl	8012d48 <div>
 8010c70:	9a01      	ldr	r2, [sp, #4]
 8010c72:	68a3      	ldr	r3, [r4, #8]
 8010c74:	9900      	ldr	r1, [sp, #0]
 8010c76:	2a00      	cmp	r2, #0
 8010c78:	440b      	add	r3, r1
 8010c7a:	60a3      	str	r3, [r4, #8]
 8010c7c:	bfbb      	ittet	lt
 8010c7e:	323c      	addlt	r2, #60	; 0x3c
 8010c80:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8010c84:	6062      	strge	r2, [r4, #4]
 8010c86:	6062      	strlt	r2, [r4, #4]
 8010c88:	bfb8      	it	lt
 8010c8a:	60a3      	strlt	r3, [r4, #8]
 8010c8c:	68a1      	ldr	r1, [r4, #8]
 8010c8e:	2917      	cmp	r1, #23
 8010c90:	d911      	bls.n	8010cb6 <validate_structure+0x82>
 8010c92:	2218      	movs	r2, #24
 8010c94:	4668      	mov	r0, sp
 8010c96:	f002 f857 	bl	8012d48 <div>
 8010c9a:	9a01      	ldr	r2, [sp, #4]
 8010c9c:	68e3      	ldr	r3, [r4, #12]
 8010c9e:	9900      	ldr	r1, [sp, #0]
 8010ca0:	2a00      	cmp	r2, #0
 8010ca2:	440b      	add	r3, r1
 8010ca4:	60e3      	str	r3, [r4, #12]
 8010ca6:	bfbb      	ittet	lt
 8010ca8:	3218      	addlt	r2, #24
 8010caa:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8010cae:	60a2      	strge	r2, [r4, #8]
 8010cb0:	60a2      	strlt	r2, [r4, #8]
 8010cb2:	bfb8      	it	lt
 8010cb4:	60e3      	strlt	r3, [r4, #12]
 8010cb6:	6921      	ldr	r1, [r4, #16]
 8010cb8:	290b      	cmp	r1, #11
 8010cba:	d911      	bls.n	8010ce0 <validate_structure+0xac>
 8010cbc:	220c      	movs	r2, #12
 8010cbe:	4668      	mov	r0, sp
 8010cc0:	f002 f842 	bl	8012d48 <div>
 8010cc4:	9a01      	ldr	r2, [sp, #4]
 8010cc6:	6963      	ldr	r3, [r4, #20]
 8010cc8:	9900      	ldr	r1, [sp, #0]
 8010cca:	2a00      	cmp	r2, #0
 8010ccc:	440b      	add	r3, r1
 8010cce:	6163      	str	r3, [r4, #20]
 8010cd0:	bfbb      	ittet	lt
 8010cd2:	320c      	addlt	r2, #12
 8010cd4:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8010cd8:	6122      	strge	r2, [r4, #16]
 8010cda:	6122      	strlt	r2, [r4, #16]
 8010cdc:	bfb8      	it	lt
 8010cde:	6163      	strlt	r3, [r4, #20]
 8010ce0:	6963      	ldr	r3, [r4, #20]
 8010ce2:	0798      	lsls	r0, r3, #30
 8010ce4:	d120      	bne.n	8010d28 <validate_structure+0xf4>
 8010ce6:	2164      	movs	r1, #100	; 0x64
 8010ce8:	fb93 f2f1 	sdiv	r2, r3, r1
 8010cec:	fb01 3212 	mls	r2, r1, r2, r3
 8010cf0:	b9e2      	cbnz	r2, 8010d2c <validate_structure+0xf8>
 8010cf2:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8010cf6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8010cfa:	fb93 f1f2 	sdiv	r1, r3, r2
 8010cfe:	fb02 3311 	mls	r3, r2, r1, r3
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	bf14      	ite	ne
 8010d06:	231c      	movne	r3, #28
 8010d08:	231d      	moveq	r3, #29
 8010d0a:	68e2      	ldr	r2, [r4, #12]
 8010d0c:	2a00      	cmp	r2, #0
 8010d0e:	dc0f      	bgt.n	8010d30 <validate_structure+0xfc>
 8010d10:	4f33      	ldr	r7, [pc, #204]	; (8010de0 <validate_structure+0x1ac>)
 8010d12:	260b      	movs	r6, #11
 8010d14:	2064      	movs	r0, #100	; 0x64
 8010d16:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8010d1a:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8010d1e:	f1bc 0f00 	cmp.w	ip, #0
 8010d22:	dd31      	ble.n	8010d88 <validate_structure+0x154>
 8010d24:	b003      	add	sp, #12
 8010d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d28:	231c      	movs	r3, #28
 8010d2a:	e7ee      	b.n	8010d0a <validate_structure+0xd6>
 8010d2c:	231d      	movs	r3, #29
 8010d2e:	e7ec      	b.n	8010d0a <validate_structure+0xd6>
 8010d30:	4e2b      	ldr	r6, [pc, #172]	; (8010de0 <validate_structure+0x1ac>)
 8010d32:	2700      	movs	r7, #0
 8010d34:	2064      	movs	r0, #100	; 0x64
 8010d36:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8010d3a:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8010d3e:	2a01      	cmp	r2, #1
 8010d40:	bf14      	ite	ne
 8010d42:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 8010d46:	469c      	moveq	ip, r3
 8010d48:	4561      	cmp	r1, ip
 8010d4a:	ddeb      	ble.n	8010d24 <validate_structure+0xf0>
 8010d4c:	3201      	adds	r2, #1
 8010d4e:	eba1 010c 	sub.w	r1, r1, ip
 8010d52:	2a0c      	cmp	r2, #12
 8010d54:	60e1      	str	r1, [r4, #12]
 8010d56:	6122      	str	r2, [r4, #16]
 8010d58:	d1ef      	bne.n	8010d3a <validate_structure+0x106>
 8010d5a:	6963      	ldr	r3, [r4, #20]
 8010d5c:	1c5a      	adds	r2, r3, #1
 8010d5e:	0791      	lsls	r1, r2, #30
 8010d60:	e9c4 7204 	strd	r7, r2, [r4, #16]
 8010d64:	d137      	bne.n	8010dd6 <validate_structure+0x1a2>
 8010d66:	fb92 f1f0 	sdiv	r1, r2, r0
 8010d6a:	fb00 2211 	mls	r2, r0, r1, r2
 8010d6e:	2a00      	cmp	r2, #0
 8010d70:	d133      	bne.n	8010dda <validate_structure+0x1a6>
 8010d72:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 8010d76:	fb93 f2f5 	sdiv	r2, r3, r5
 8010d7a:	fb05 3312 	mls	r3, r5, r2, r3
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	bf14      	ite	ne
 8010d82:	231c      	movne	r3, #28
 8010d84:	231d      	moveq	r3, #29
 8010d86:	e7d8      	b.n	8010d3a <validate_structure+0x106>
 8010d88:	6921      	ldr	r1, [r4, #16]
 8010d8a:	3901      	subs	r1, #1
 8010d8c:	6121      	str	r1, [r4, #16]
 8010d8e:	3101      	adds	r1, #1
 8010d90:	d114      	bne.n	8010dbc <validate_structure+0x188>
 8010d92:	6963      	ldr	r3, [r4, #20]
 8010d94:	1e5a      	subs	r2, r3, #1
 8010d96:	0791      	lsls	r1, r2, #30
 8010d98:	e9c4 6204 	strd	r6, r2, [r4, #16]
 8010d9c:	d117      	bne.n	8010dce <validate_structure+0x19a>
 8010d9e:	fb92 f1f0 	sdiv	r1, r2, r0
 8010da2:	fb00 2211 	mls	r2, r0, r1, r2
 8010da6:	b9a2      	cbnz	r2, 8010dd2 <validate_structure+0x19e>
 8010da8:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8010dac:	fb93 f2f5 	sdiv	r2, r3, r5
 8010db0:	fb05 3312 	mls	r3, r5, r2, r3
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	bf14      	ite	ne
 8010db8:	231c      	movne	r3, #28
 8010dba:	231d      	moveq	r3, #29
 8010dbc:	6922      	ldr	r2, [r4, #16]
 8010dbe:	2a01      	cmp	r2, #1
 8010dc0:	bf14      	ite	ne
 8010dc2:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 8010dc6:	461a      	moveq	r2, r3
 8010dc8:	4462      	add	r2, ip
 8010dca:	60e2      	str	r2, [r4, #12]
 8010dcc:	e7a5      	b.n	8010d1a <validate_structure+0xe6>
 8010dce:	231c      	movs	r3, #28
 8010dd0:	e7f4      	b.n	8010dbc <validate_structure+0x188>
 8010dd2:	231d      	movs	r3, #29
 8010dd4:	e7f2      	b.n	8010dbc <validate_structure+0x188>
 8010dd6:	231c      	movs	r3, #28
 8010dd8:	e7af      	b.n	8010d3a <validate_structure+0x106>
 8010dda:	231d      	movs	r3, #29
 8010ddc:	e7ad      	b.n	8010d3a <validate_structure+0x106>
 8010dde:	bf00      	nop
 8010de0:	08018f80 	.word	0x08018f80

08010de4 <mktime>:
 8010de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010de8:	b085      	sub	sp, #20
 8010dea:	4607      	mov	r7, r0
 8010dec:	f003 fa00 	bl	80141f0 <__gettzinfo>
 8010df0:	4681      	mov	r9, r0
 8010df2:	4638      	mov	r0, r7
 8010df4:	f7ff ff1e 	bl	8010c34 <validate_structure>
 8010df8:	e9d7 4000 	ldrd	r4, r0, [r7]
 8010dfc:	233c      	movs	r3, #60	; 0x3c
 8010dfe:	fb03 4400 	mla	r4, r3, r0, r4
 8010e02:	68b8      	ldr	r0, [r7, #8]
 8010e04:	4abc      	ldr	r2, [pc, #752]	; (80110f8 <mktime+0x314>)
 8010e06:	697e      	ldr	r6, [r7, #20]
 8010e08:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8010e0c:	fb03 4400 	mla	r4, r3, r0, r4
 8010e10:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 8010e14:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8010e18:	3d01      	subs	r5, #1
 8010e1a:	2b01      	cmp	r3, #1
 8010e1c:	4415      	add	r5, r2
 8010e1e:	dd11      	ble.n	8010e44 <mktime+0x60>
 8010e20:	07b1      	lsls	r1, r6, #30
 8010e22:	d10f      	bne.n	8010e44 <mktime+0x60>
 8010e24:	2264      	movs	r2, #100	; 0x64
 8010e26:	fb96 f3f2 	sdiv	r3, r6, r2
 8010e2a:	fb02 6313 	mls	r3, r2, r3, r6
 8010e2e:	b943      	cbnz	r3, 8010e42 <mktime+0x5e>
 8010e30:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8010e34:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8010e38:	fb93 f1f2 	sdiv	r1, r3, r2
 8010e3c:	fb02 3311 	mls	r3, r2, r1, r3
 8010e40:	b903      	cbnz	r3, 8010e44 <mktime+0x60>
 8010e42:	3501      	adds	r5, #1
 8010e44:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 8010e48:	3310      	adds	r3, #16
 8010e4a:	f644 6220 	movw	r2, #20000	; 0x4e20
 8010e4e:	4293      	cmp	r3, r2
 8010e50:	61fd      	str	r5, [r7, #28]
 8010e52:	f200 815d 	bhi.w	8011110 <mktime+0x32c>
 8010e56:	2e46      	cmp	r6, #70	; 0x46
 8010e58:	dd71      	ble.n	8010f3e <mktime+0x15a>
 8010e5a:	2346      	movs	r3, #70	; 0x46
 8010e5c:	f240 1c6d 	movw	ip, #365	; 0x16d
 8010e60:	2164      	movs	r1, #100	; 0x64
 8010e62:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8010e66:	079a      	lsls	r2, r3, #30
 8010e68:	d163      	bne.n	8010f32 <mktime+0x14e>
 8010e6a:	fb93 f2f1 	sdiv	r2, r3, r1
 8010e6e:	fb01 3212 	mls	r2, r1, r2, r3
 8010e72:	2a00      	cmp	r2, #0
 8010e74:	d160      	bne.n	8010f38 <mktime+0x154>
 8010e76:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8010e7a:	fb92 fef0 	sdiv	lr, r2, r0
 8010e7e:	fb00 221e 	mls	r2, r0, lr, r2
 8010e82:	2a00      	cmp	r2, #0
 8010e84:	bf14      	ite	ne
 8010e86:	4662      	movne	r2, ip
 8010e88:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8010e8c:	3301      	adds	r3, #1
 8010e8e:	429e      	cmp	r6, r3
 8010e90:	4415      	add	r5, r2
 8010e92:	d1e8      	bne.n	8010e66 <mktime+0x82>
 8010e94:	4b99      	ldr	r3, [pc, #612]	; (80110fc <mktime+0x318>)
 8010e96:	ea4f 78e4 	mov.w	r8, r4, asr #31
 8010e9a:	fbc5 4803 	smlal	r4, r8, r5, r3
 8010e9e:	f001 fda3 	bl	80129e8 <__tz_lock>
 8010ea2:	f001 fdad 	bl	8012a00 <_tzset_unlocked>
 8010ea6:	4b96      	ldr	r3, [pc, #600]	; (8011100 <mktime+0x31c>)
 8010ea8:	f8d3 b000 	ldr.w	fp, [r3]
 8010eac:	f1bb 0f00 	cmp.w	fp, #0
 8010eb0:	d039      	beq.n	8010f26 <mktime+0x142>
 8010eb2:	f8d7 b020 	ldr.w	fp, [r7, #32]
 8010eb6:	6978      	ldr	r0, [r7, #20]
 8010eb8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8010ebc:	f1bb 0f01 	cmp.w	fp, #1
 8010ec0:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8010ec4:	46da      	mov	sl, fp
 8010ec6:	bfa8      	it	ge
 8010ec8:	f04f 0a01 	movge.w	sl, #1
 8010ecc:	4283      	cmp	r3, r0
 8010ece:	d178      	bne.n	8010fc2 <mktime+0x1de>
 8010ed0:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 8010ed4:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 8010ed8:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 8010edc:	1a5b      	subs	r3, r3, r1
 8010ede:	9302      	str	r3, [sp, #8]
 8010ee0:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 8010ee4:	9303      	str	r3, [sp, #12]
 8010ee6:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 8010eea:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8010eee:	9301      	str	r3, [sp, #4]
 8010ef0:	ebb3 0c02 	subs.w	ip, r3, r2
 8010ef4:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 8010ef8:	4564      	cmp	r4, ip
 8010efa:	eb78 0300 	sbcs.w	r3, r8, r0
 8010efe:	da66      	bge.n	8010fce <mktime+0x1ea>
 8010f00:	f8d9 3000 	ldr.w	r3, [r9]
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d06f      	beq.n	8010fe8 <mktime+0x204>
 8010f08:	9b02      	ldr	r3, [sp, #8]
 8010f0a:	429c      	cmp	r4, r3
 8010f0c:	9b03      	ldr	r3, [sp, #12]
 8010f0e:	eb78 0303 	sbcs.w	r3, r8, r3
 8010f12:	db03      	blt.n	8010f1c <mktime+0x138>
 8010f14:	4564      	cmp	r4, ip
 8010f16:	eb78 0300 	sbcs.w	r3, r8, r0
 8010f1a:	db6b      	blt.n	8010ff4 <mktime+0x210>
 8010f1c:	f1bb 0f00 	cmp.w	fp, #0
 8010f20:	f04f 0b00 	mov.w	fp, #0
 8010f24:	da6b      	bge.n	8010ffe <mktime+0x21a>
 8010f26:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 8010f2a:	190c      	adds	r4, r1, r4
 8010f2c:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 8010f30:	e0a9      	b.n	8011086 <mktime+0x2a2>
 8010f32:	f240 126d 	movw	r2, #365	; 0x16d
 8010f36:	e7a9      	b.n	8010e8c <mktime+0xa8>
 8010f38:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8010f3c:	e7a6      	b.n	8010e8c <mktime+0xa8>
 8010f3e:	d0a9      	beq.n	8010e94 <mktime+0xb0>
 8010f40:	2345      	movs	r3, #69	; 0x45
 8010f42:	f240 1c6d 	movw	ip, #365	; 0x16d
 8010f46:	2164      	movs	r1, #100	; 0x64
 8010f48:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8010f4c:	e012      	b.n	8010f74 <mktime+0x190>
 8010f4e:	bb62      	cbnz	r2, 8010faa <mktime+0x1c6>
 8010f50:	fb93 f2f1 	sdiv	r2, r3, r1
 8010f54:	fb01 3212 	mls	r2, r1, r2, r3
 8010f58:	bb52      	cbnz	r2, 8010fb0 <mktime+0x1cc>
 8010f5a:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8010f5e:	fb92 fef0 	sdiv	lr, r2, r0
 8010f62:	fb00 221e 	mls	r2, r0, lr, r2
 8010f66:	2a00      	cmp	r2, #0
 8010f68:	bf14      	ite	ne
 8010f6a:	4662      	movne	r2, ip
 8010f6c:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8010f70:	1aad      	subs	r5, r5, r2
 8010f72:	3b01      	subs	r3, #1
 8010f74:	429e      	cmp	r6, r3
 8010f76:	f003 0203 	and.w	r2, r3, #3
 8010f7a:	dbe8      	blt.n	8010f4e <mktime+0x16a>
 8010f7c:	b9da      	cbnz	r2, 8010fb6 <mktime+0x1d2>
 8010f7e:	2264      	movs	r2, #100	; 0x64
 8010f80:	fb96 f3f2 	sdiv	r3, r6, r2
 8010f84:	fb02 6313 	mls	r3, r2, r3, r6
 8010f88:	b9c3      	cbnz	r3, 8010fbc <mktime+0x1d8>
 8010f8a:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8010f8e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8010f92:	fb93 f1f2 	sdiv	r1, r3, r2
 8010f96:	fb02 3311 	mls	r3, r2, r1, r3
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	f240 136d 	movw	r3, #365	; 0x16d
 8010fa0:	bf08      	it	eq
 8010fa2:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8010fa6:	1aed      	subs	r5, r5, r3
 8010fa8:	e774      	b.n	8010e94 <mktime+0xb0>
 8010faa:	f240 126d 	movw	r2, #365	; 0x16d
 8010fae:	e7df      	b.n	8010f70 <mktime+0x18c>
 8010fb0:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8010fb4:	e7dc      	b.n	8010f70 <mktime+0x18c>
 8010fb6:	f240 136d 	movw	r3, #365	; 0x16d
 8010fba:	e7f4      	b.n	8010fa6 <mktime+0x1c2>
 8010fbc:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8010fc0:	e7f1      	b.n	8010fa6 <mktime+0x1c2>
 8010fc2:	f001 fc67 	bl	8012894 <__tzcalc_limits>
 8010fc6:	2800      	cmp	r0, #0
 8010fc8:	d182      	bne.n	8010ed0 <mktime+0xec>
 8010fca:	46d3      	mov	fp, sl
 8010fcc:	e050      	b.n	8011070 <mktime+0x28c>
 8010fce:	9b01      	ldr	r3, [sp, #4]
 8010fd0:	1a5b      	subs	r3, r3, r1
 8010fd2:	9301      	str	r3, [sp, #4]
 8010fd4:	ea4f 73e1 	mov.w	r3, r1, asr #31
 8010fd8:	eb6e 0e03 	sbc.w	lr, lr, r3
 8010fdc:	9b01      	ldr	r3, [sp, #4]
 8010fde:	429c      	cmp	r4, r3
 8010fe0:	eb78 030e 	sbcs.w	r3, r8, lr
 8010fe4:	dbf1      	blt.n	8010fca <mktime+0x1e6>
 8010fe6:	e78b      	b.n	8010f00 <mktime+0x11c>
 8010fe8:	9b02      	ldr	r3, [sp, #8]
 8010fea:	429c      	cmp	r4, r3
 8010fec:	9b03      	ldr	r3, [sp, #12]
 8010fee:	eb78 0303 	sbcs.w	r3, r8, r3
 8010ff2:	db8f      	blt.n	8010f14 <mktime+0x130>
 8010ff4:	f1bb 0f00 	cmp.w	fp, #0
 8010ff8:	db3e      	blt.n	8011078 <mktime+0x294>
 8010ffa:	f04f 0b01 	mov.w	fp, #1
 8010ffe:	ea8a 0a0b 	eor.w	sl, sl, fp
 8011002:	f1ba 0f01 	cmp.w	sl, #1
 8011006:	d133      	bne.n	8011070 <mktime+0x28c>
 8011008:	f1bb 0f00 	cmp.w	fp, #0
 801100c:	d04e      	beq.n	80110ac <mktime+0x2c8>
 801100e:	1a52      	subs	r2, r2, r1
 8011010:	683b      	ldr	r3, [r7, #0]
 8011012:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 8011016:	4413      	add	r3, r2
 8011018:	1914      	adds	r4, r2, r4
 801101a:	603b      	str	r3, [r7, #0]
 801101c:	4638      	mov	r0, r7
 801101e:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 8011022:	f7ff fe07 	bl	8010c34 <validate_structure>
 8011026:	68fa      	ldr	r2, [r7, #12]
 8011028:	ebb2 020a 	subs.w	r2, r2, sl
 801102c:	d020      	beq.n	8011070 <mktime+0x28c>
 801102e:	2a01      	cmp	r2, #1
 8011030:	dc3e      	bgt.n	80110b0 <mktime+0x2cc>
 8011032:	1c90      	adds	r0, r2, #2
 8011034:	bfd8      	it	le
 8011036:	2201      	movle	r2, #1
 8011038:	69fb      	ldr	r3, [r7, #28]
 801103a:	18d3      	adds	r3, r2, r3
 801103c:	4415      	add	r5, r2
 801103e:	d540      	bpl.n	80110c2 <mktime+0x2de>
 8011040:	1e73      	subs	r3, r6, #1
 8011042:	0799      	lsls	r1, r3, #30
 8011044:	d137      	bne.n	80110b6 <mktime+0x2d2>
 8011046:	2264      	movs	r2, #100	; 0x64
 8011048:	fb93 f1f2 	sdiv	r1, r3, r2
 801104c:	fb02 3311 	mls	r3, r2, r1, r3
 8011050:	bba3      	cbnz	r3, 80110bc <mktime+0x2d8>
 8011052:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8011056:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 801105a:	fb96 f2f3 	sdiv	r2, r6, r3
 801105e:	fb03 6612 	mls	r6, r3, r2, r6
 8011062:	2e00      	cmp	r6, #0
 8011064:	f240 136d 	movw	r3, #365	; 0x16d
 8011068:	bf18      	it	ne
 801106a:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 801106e:	61fb      	str	r3, [r7, #28]
 8011070:	f1bb 0f01 	cmp.w	fp, #1
 8011074:	f47f af57 	bne.w	8010f26 <mktime+0x142>
 8011078:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 801107c:	190c      	adds	r4, r1, r4
 801107e:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 8011082:	f04f 0b01 	mov.w	fp, #1
 8011086:	f001 fcb5 	bl	80129f4 <__tz_unlock>
 801108a:	3504      	adds	r5, #4
 801108c:	2307      	movs	r3, #7
 801108e:	fb95 f3f3 	sdiv	r3, r5, r3
 8011092:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8011096:	1aed      	subs	r5, r5, r3
 8011098:	bf48      	it	mi
 801109a:	3507      	addmi	r5, #7
 801109c:	f8c7 b020 	str.w	fp, [r7, #32]
 80110a0:	61bd      	str	r5, [r7, #24]
 80110a2:	4620      	mov	r0, r4
 80110a4:	4641      	mov	r1, r8
 80110a6:	b005      	add	sp, #20
 80110a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110ac:	1a8a      	subs	r2, r1, r2
 80110ae:	e7af      	b.n	8011010 <mktime+0x22c>
 80110b0:	f04f 32ff 	mov.w	r2, #4294967295
 80110b4:	e7c0      	b.n	8011038 <mktime+0x254>
 80110b6:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 80110ba:	e7d8      	b.n	801106e <mktime+0x28a>
 80110bc:	f240 136d 	movw	r3, #365	; 0x16d
 80110c0:	e7d5      	b.n	801106e <mktime+0x28a>
 80110c2:	07b2      	lsls	r2, r6, #30
 80110c4:	d11e      	bne.n	8011104 <mktime+0x320>
 80110c6:	2164      	movs	r1, #100	; 0x64
 80110c8:	fb96 f2f1 	sdiv	r2, r6, r1
 80110cc:	fb01 6212 	mls	r2, r1, r2, r6
 80110d0:	b9da      	cbnz	r2, 801110a <mktime+0x326>
 80110d2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80110d6:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 80110da:	fb96 f1f2 	sdiv	r1, r6, r2
 80110de:	fb02 6611 	mls	r6, r2, r1, r6
 80110e2:	2e00      	cmp	r6, #0
 80110e4:	f240 126d 	movw	r2, #365	; 0x16d
 80110e8:	bf08      	it	eq
 80110ea:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80110ee:	4293      	cmp	r3, r2
 80110f0:	bfa8      	it	ge
 80110f2:	1a9b      	subge	r3, r3, r2
 80110f4:	e7bb      	b.n	801106e <mktime+0x28a>
 80110f6:	bf00      	nop
 80110f8:	08018fb0 	.word	0x08018fb0
 80110fc:	00015180 	.word	0x00015180
 8011100:	20007b20 	.word	0x20007b20
 8011104:	f240 126d 	movw	r2, #365	; 0x16d
 8011108:	e7f1      	b.n	80110ee <mktime+0x30a>
 801110a:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 801110e:	e7ee      	b.n	80110ee <mktime+0x30a>
 8011110:	f04f 34ff 	mov.w	r4, #4294967295
 8011114:	46a0      	mov	r8, r4
 8011116:	e7c4      	b.n	80110a2 <mktime+0x2be>

08011118 <_free_r>:
 8011118:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801111a:	2900      	cmp	r1, #0
 801111c:	d044      	beq.n	80111a8 <_free_r+0x90>
 801111e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011122:	9001      	str	r0, [sp, #4]
 8011124:	2b00      	cmp	r3, #0
 8011126:	f1a1 0404 	sub.w	r4, r1, #4
 801112a:	bfb8      	it	lt
 801112c:	18e4      	addlt	r4, r4, r3
 801112e:	f003 f88d 	bl	801424c <__malloc_lock>
 8011132:	4a1e      	ldr	r2, [pc, #120]	; (80111ac <_free_r+0x94>)
 8011134:	9801      	ldr	r0, [sp, #4]
 8011136:	6813      	ldr	r3, [r2, #0]
 8011138:	b933      	cbnz	r3, 8011148 <_free_r+0x30>
 801113a:	6063      	str	r3, [r4, #4]
 801113c:	6014      	str	r4, [r2, #0]
 801113e:	b003      	add	sp, #12
 8011140:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011144:	f003 b888 	b.w	8014258 <__malloc_unlock>
 8011148:	42a3      	cmp	r3, r4
 801114a:	d908      	bls.n	801115e <_free_r+0x46>
 801114c:	6825      	ldr	r5, [r4, #0]
 801114e:	1961      	adds	r1, r4, r5
 8011150:	428b      	cmp	r3, r1
 8011152:	bf01      	itttt	eq
 8011154:	6819      	ldreq	r1, [r3, #0]
 8011156:	685b      	ldreq	r3, [r3, #4]
 8011158:	1949      	addeq	r1, r1, r5
 801115a:	6021      	streq	r1, [r4, #0]
 801115c:	e7ed      	b.n	801113a <_free_r+0x22>
 801115e:	461a      	mov	r2, r3
 8011160:	685b      	ldr	r3, [r3, #4]
 8011162:	b10b      	cbz	r3, 8011168 <_free_r+0x50>
 8011164:	42a3      	cmp	r3, r4
 8011166:	d9fa      	bls.n	801115e <_free_r+0x46>
 8011168:	6811      	ldr	r1, [r2, #0]
 801116a:	1855      	adds	r5, r2, r1
 801116c:	42a5      	cmp	r5, r4
 801116e:	d10b      	bne.n	8011188 <_free_r+0x70>
 8011170:	6824      	ldr	r4, [r4, #0]
 8011172:	4421      	add	r1, r4
 8011174:	1854      	adds	r4, r2, r1
 8011176:	42a3      	cmp	r3, r4
 8011178:	6011      	str	r1, [r2, #0]
 801117a:	d1e0      	bne.n	801113e <_free_r+0x26>
 801117c:	681c      	ldr	r4, [r3, #0]
 801117e:	685b      	ldr	r3, [r3, #4]
 8011180:	6053      	str	r3, [r2, #4]
 8011182:	4421      	add	r1, r4
 8011184:	6011      	str	r1, [r2, #0]
 8011186:	e7da      	b.n	801113e <_free_r+0x26>
 8011188:	d902      	bls.n	8011190 <_free_r+0x78>
 801118a:	230c      	movs	r3, #12
 801118c:	6003      	str	r3, [r0, #0]
 801118e:	e7d6      	b.n	801113e <_free_r+0x26>
 8011190:	6825      	ldr	r5, [r4, #0]
 8011192:	1961      	adds	r1, r4, r5
 8011194:	428b      	cmp	r3, r1
 8011196:	bf04      	itt	eq
 8011198:	6819      	ldreq	r1, [r3, #0]
 801119a:	685b      	ldreq	r3, [r3, #4]
 801119c:	6063      	str	r3, [r4, #4]
 801119e:	bf04      	itt	eq
 80111a0:	1949      	addeq	r1, r1, r5
 80111a2:	6021      	streq	r1, [r4, #0]
 80111a4:	6054      	str	r4, [r2, #4]
 80111a6:	e7ca      	b.n	801113e <_free_r+0x26>
 80111a8:	b003      	add	sp, #12
 80111aa:	bd30      	pop	{r4, r5, pc}
 80111ac:	20007afc 	.word	0x20007afc

080111b0 <sbrk_aligned>:
 80111b0:	b570      	push	{r4, r5, r6, lr}
 80111b2:	4e0e      	ldr	r6, [pc, #56]	; (80111ec <sbrk_aligned+0x3c>)
 80111b4:	460c      	mov	r4, r1
 80111b6:	6831      	ldr	r1, [r6, #0]
 80111b8:	4605      	mov	r5, r0
 80111ba:	b911      	cbnz	r1, 80111c2 <sbrk_aligned+0x12>
 80111bc:	f000 fcf6 	bl	8011bac <_sbrk_r>
 80111c0:	6030      	str	r0, [r6, #0]
 80111c2:	4621      	mov	r1, r4
 80111c4:	4628      	mov	r0, r5
 80111c6:	f000 fcf1 	bl	8011bac <_sbrk_r>
 80111ca:	1c43      	adds	r3, r0, #1
 80111cc:	d00a      	beq.n	80111e4 <sbrk_aligned+0x34>
 80111ce:	1cc4      	adds	r4, r0, #3
 80111d0:	f024 0403 	bic.w	r4, r4, #3
 80111d4:	42a0      	cmp	r0, r4
 80111d6:	d007      	beq.n	80111e8 <sbrk_aligned+0x38>
 80111d8:	1a21      	subs	r1, r4, r0
 80111da:	4628      	mov	r0, r5
 80111dc:	f000 fce6 	bl	8011bac <_sbrk_r>
 80111e0:	3001      	adds	r0, #1
 80111e2:	d101      	bne.n	80111e8 <sbrk_aligned+0x38>
 80111e4:	f04f 34ff 	mov.w	r4, #4294967295
 80111e8:	4620      	mov	r0, r4
 80111ea:	bd70      	pop	{r4, r5, r6, pc}
 80111ec:	20007b00 	.word	0x20007b00

080111f0 <_malloc_r>:
 80111f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111f4:	1ccd      	adds	r5, r1, #3
 80111f6:	f025 0503 	bic.w	r5, r5, #3
 80111fa:	3508      	adds	r5, #8
 80111fc:	2d0c      	cmp	r5, #12
 80111fe:	bf38      	it	cc
 8011200:	250c      	movcc	r5, #12
 8011202:	2d00      	cmp	r5, #0
 8011204:	4607      	mov	r7, r0
 8011206:	db01      	blt.n	801120c <_malloc_r+0x1c>
 8011208:	42a9      	cmp	r1, r5
 801120a:	d905      	bls.n	8011218 <_malloc_r+0x28>
 801120c:	230c      	movs	r3, #12
 801120e:	603b      	str	r3, [r7, #0]
 8011210:	2600      	movs	r6, #0
 8011212:	4630      	mov	r0, r6
 8011214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011218:	4e2e      	ldr	r6, [pc, #184]	; (80112d4 <_malloc_r+0xe4>)
 801121a:	f003 f817 	bl	801424c <__malloc_lock>
 801121e:	6833      	ldr	r3, [r6, #0]
 8011220:	461c      	mov	r4, r3
 8011222:	bb34      	cbnz	r4, 8011272 <_malloc_r+0x82>
 8011224:	4629      	mov	r1, r5
 8011226:	4638      	mov	r0, r7
 8011228:	f7ff ffc2 	bl	80111b0 <sbrk_aligned>
 801122c:	1c43      	adds	r3, r0, #1
 801122e:	4604      	mov	r4, r0
 8011230:	d14d      	bne.n	80112ce <_malloc_r+0xde>
 8011232:	6834      	ldr	r4, [r6, #0]
 8011234:	4626      	mov	r6, r4
 8011236:	2e00      	cmp	r6, #0
 8011238:	d140      	bne.n	80112bc <_malloc_r+0xcc>
 801123a:	6823      	ldr	r3, [r4, #0]
 801123c:	4631      	mov	r1, r6
 801123e:	4638      	mov	r0, r7
 8011240:	eb04 0803 	add.w	r8, r4, r3
 8011244:	f000 fcb2 	bl	8011bac <_sbrk_r>
 8011248:	4580      	cmp	r8, r0
 801124a:	d13a      	bne.n	80112c2 <_malloc_r+0xd2>
 801124c:	6821      	ldr	r1, [r4, #0]
 801124e:	3503      	adds	r5, #3
 8011250:	1a6d      	subs	r5, r5, r1
 8011252:	f025 0503 	bic.w	r5, r5, #3
 8011256:	3508      	adds	r5, #8
 8011258:	2d0c      	cmp	r5, #12
 801125a:	bf38      	it	cc
 801125c:	250c      	movcc	r5, #12
 801125e:	4629      	mov	r1, r5
 8011260:	4638      	mov	r0, r7
 8011262:	f7ff ffa5 	bl	80111b0 <sbrk_aligned>
 8011266:	3001      	adds	r0, #1
 8011268:	d02b      	beq.n	80112c2 <_malloc_r+0xd2>
 801126a:	6823      	ldr	r3, [r4, #0]
 801126c:	442b      	add	r3, r5
 801126e:	6023      	str	r3, [r4, #0]
 8011270:	e00e      	b.n	8011290 <_malloc_r+0xa0>
 8011272:	6822      	ldr	r2, [r4, #0]
 8011274:	1b52      	subs	r2, r2, r5
 8011276:	d41e      	bmi.n	80112b6 <_malloc_r+0xc6>
 8011278:	2a0b      	cmp	r2, #11
 801127a:	d916      	bls.n	80112aa <_malloc_r+0xba>
 801127c:	1961      	adds	r1, r4, r5
 801127e:	42a3      	cmp	r3, r4
 8011280:	6025      	str	r5, [r4, #0]
 8011282:	bf18      	it	ne
 8011284:	6059      	strne	r1, [r3, #4]
 8011286:	6863      	ldr	r3, [r4, #4]
 8011288:	bf08      	it	eq
 801128a:	6031      	streq	r1, [r6, #0]
 801128c:	5162      	str	r2, [r4, r5]
 801128e:	604b      	str	r3, [r1, #4]
 8011290:	4638      	mov	r0, r7
 8011292:	f104 060b 	add.w	r6, r4, #11
 8011296:	f002 ffdf 	bl	8014258 <__malloc_unlock>
 801129a:	f026 0607 	bic.w	r6, r6, #7
 801129e:	1d23      	adds	r3, r4, #4
 80112a0:	1af2      	subs	r2, r6, r3
 80112a2:	d0b6      	beq.n	8011212 <_malloc_r+0x22>
 80112a4:	1b9b      	subs	r3, r3, r6
 80112a6:	50a3      	str	r3, [r4, r2]
 80112a8:	e7b3      	b.n	8011212 <_malloc_r+0x22>
 80112aa:	6862      	ldr	r2, [r4, #4]
 80112ac:	42a3      	cmp	r3, r4
 80112ae:	bf0c      	ite	eq
 80112b0:	6032      	streq	r2, [r6, #0]
 80112b2:	605a      	strne	r2, [r3, #4]
 80112b4:	e7ec      	b.n	8011290 <_malloc_r+0xa0>
 80112b6:	4623      	mov	r3, r4
 80112b8:	6864      	ldr	r4, [r4, #4]
 80112ba:	e7b2      	b.n	8011222 <_malloc_r+0x32>
 80112bc:	4634      	mov	r4, r6
 80112be:	6876      	ldr	r6, [r6, #4]
 80112c0:	e7b9      	b.n	8011236 <_malloc_r+0x46>
 80112c2:	230c      	movs	r3, #12
 80112c4:	603b      	str	r3, [r7, #0]
 80112c6:	4638      	mov	r0, r7
 80112c8:	f002 ffc6 	bl	8014258 <__malloc_unlock>
 80112cc:	e7a1      	b.n	8011212 <_malloc_r+0x22>
 80112ce:	6025      	str	r5, [r4, #0]
 80112d0:	e7de      	b.n	8011290 <_malloc_r+0xa0>
 80112d2:	bf00      	nop
 80112d4:	20007afc 	.word	0x20007afc

080112d8 <__cvt>:
 80112d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80112dc:	ec55 4b10 	vmov	r4, r5, d0
 80112e0:	2d00      	cmp	r5, #0
 80112e2:	460e      	mov	r6, r1
 80112e4:	4619      	mov	r1, r3
 80112e6:	462b      	mov	r3, r5
 80112e8:	bfbb      	ittet	lt
 80112ea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80112ee:	461d      	movlt	r5, r3
 80112f0:	2300      	movge	r3, #0
 80112f2:	232d      	movlt	r3, #45	; 0x2d
 80112f4:	700b      	strb	r3, [r1, #0]
 80112f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80112f8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80112fc:	4691      	mov	r9, r2
 80112fe:	f023 0820 	bic.w	r8, r3, #32
 8011302:	bfbc      	itt	lt
 8011304:	4622      	movlt	r2, r4
 8011306:	4614      	movlt	r4, r2
 8011308:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801130c:	d005      	beq.n	801131a <__cvt+0x42>
 801130e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8011312:	d100      	bne.n	8011316 <__cvt+0x3e>
 8011314:	3601      	adds	r6, #1
 8011316:	2102      	movs	r1, #2
 8011318:	e000      	b.n	801131c <__cvt+0x44>
 801131a:	2103      	movs	r1, #3
 801131c:	ab03      	add	r3, sp, #12
 801131e:	9301      	str	r3, [sp, #4]
 8011320:	ab02      	add	r3, sp, #8
 8011322:	9300      	str	r3, [sp, #0]
 8011324:	ec45 4b10 	vmov	d0, r4, r5
 8011328:	4653      	mov	r3, sl
 801132a:	4632      	mov	r2, r6
 801132c:	f001 fdac 	bl	8012e88 <_dtoa_r>
 8011330:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011334:	4607      	mov	r7, r0
 8011336:	d102      	bne.n	801133e <__cvt+0x66>
 8011338:	f019 0f01 	tst.w	r9, #1
 801133c:	d022      	beq.n	8011384 <__cvt+0xac>
 801133e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011342:	eb07 0906 	add.w	r9, r7, r6
 8011346:	d110      	bne.n	801136a <__cvt+0x92>
 8011348:	783b      	ldrb	r3, [r7, #0]
 801134a:	2b30      	cmp	r3, #48	; 0x30
 801134c:	d10a      	bne.n	8011364 <__cvt+0x8c>
 801134e:	2200      	movs	r2, #0
 8011350:	2300      	movs	r3, #0
 8011352:	4620      	mov	r0, r4
 8011354:	4629      	mov	r1, r5
 8011356:	f7ef fbcf 	bl	8000af8 <__aeabi_dcmpeq>
 801135a:	b918      	cbnz	r0, 8011364 <__cvt+0x8c>
 801135c:	f1c6 0601 	rsb	r6, r6, #1
 8011360:	f8ca 6000 	str.w	r6, [sl]
 8011364:	f8da 3000 	ldr.w	r3, [sl]
 8011368:	4499      	add	r9, r3
 801136a:	2200      	movs	r2, #0
 801136c:	2300      	movs	r3, #0
 801136e:	4620      	mov	r0, r4
 8011370:	4629      	mov	r1, r5
 8011372:	f7ef fbc1 	bl	8000af8 <__aeabi_dcmpeq>
 8011376:	b108      	cbz	r0, 801137c <__cvt+0xa4>
 8011378:	f8cd 900c 	str.w	r9, [sp, #12]
 801137c:	2230      	movs	r2, #48	; 0x30
 801137e:	9b03      	ldr	r3, [sp, #12]
 8011380:	454b      	cmp	r3, r9
 8011382:	d307      	bcc.n	8011394 <__cvt+0xbc>
 8011384:	9b03      	ldr	r3, [sp, #12]
 8011386:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011388:	1bdb      	subs	r3, r3, r7
 801138a:	4638      	mov	r0, r7
 801138c:	6013      	str	r3, [r2, #0]
 801138e:	b004      	add	sp, #16
 8011390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011394:	1c59      	adds	r1, r3, #1
 8011396:	9103      	str	r1, [sp, #12]
 8011398:	701a      	strb	r2, [r3, #0]
 801139a:	e7f0      	b.n	801137e <__cvt+0xa6>

0801139c <__exponent>:
 801139c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801139e:	4603      	mov	r3, r0
 80113a0:	2900      	cmp	r1, #0
 80113a2:	bfb8      	it	lt
 80113a4:	4249      	neglt	r1, r1
 80113a6:	f803 2b02 	strb.w	r2, [r3], #2
 80113aa:	bfb4      	ite	lt
 80113ac:	222d      	movlt	r2, #45	; 0x2d
 80113ae:	222b      	movge	r2, #43	; 0x2b
 80113b0:	2909      	cmp	r1, #9
 80113b2:	7042      	strb	r2, [r0, #1]
 80113b4:	dd2a      	ble.n	801140c <__exponent+0x70>
 80113b6:	f10d 0407 	add.w	r4, sp, #7
 80113ba:	46a4      	mov	ip, r4
 80113bc:	270a      	movs	r7, #10
 80113be:	46a6      	mov	lr, r4
 80113c0:	460a      	mov	r2, r1
 80113c2:	fb91 f6f7 	sdiv	r6, r1, r7
 80113c6:	fb07 1516 	mls	r5, r7, r6, r1
 80113ca:	3530      	adds	r5, #48	; 0x30
 80113cc:	2a63      	cmp	r2, #99	; 0x63
 80113ce:	f104 34ff 	add.w	r4, r4, #4294967295
 80113d2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80113d6:	4631      	mov	r1, r6
 80113d8:	dcf1      	bgt.n	80113be <__exponent+0x22>
 80113da:	3130      	adds	r1, #48	; 0x30
 80113dc:	f1ae 0502 	sub.w	r5, lr, #2
 80113e0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80113e4:	1c44      	adds	r4, r0, #1
 80113e6:	4629      	mov	r1, r5
 80113e8:	4561      	cmp	r1, ip
 80113ea:	d30a      	bcc.n	8011402 <__exponent+0x66>
 80113ec:	f10d 0209 	add.w	r2, sp, #9
 80113f0:	eba2 020e 	sub.w	r2, r2, lr
 80113f4:	4565      	cmp	r5, ip
 80113f6:	bf88      	it	hi
 80113f8:	2200      	movhi	r2, #0
 80113fa:	4413      	add	r3, r2
 80113fc:	1a18      	subs	r0, r3, r0
 80113fe:	b003      	add	sp, #12
 8011400:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011402:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011406:	f804 2f01 	strb.w	r2, [r4, #1]!
 801140a:	e7ed      	b.n	80113e8 <__exponent+0x4c>
 801140c:	2330      	movs	r3, #48	; 0x30
 801140e:	3130      	adds	r1, #48	; 0x30
 8011410:	7083      	strb	r3, [r0, #2]
 8011412:	70c1      	strb	r1, [r0, #3]
 8011414:	1d03      	adds	r3, r0, #4
 8011416:	e7f1      	b.n	80113fc <__exponent+0x60>

08011418 <_printf_float>:
 8011418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801141c:	ed2d 8b02 	vpush	{d8}
 8011420:	b08d      	sub	sp, #52	; 0x34
 8011422:	460c      	mov	r4, r1
 8011424:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8011428:	4616      	mov	r6, r2
 801142a:	461f      	mov	r7, r3
 801142c:	4605      	mov	r5, r0
 801142e:	f002 fee3 	bl	80141f8 <_localeconv_r>
 8011432:	f8d0 a000 	ldr.w	sl, [r0]
 8011436:	4650      	mov	r0, sl
 8011438:	f7ee fedc 	bl	80001f4 <strlen>
 801143c:	2300      	movs	r3, #0
 801143e:	930a      	str	r3, [sp, #40]	; 0x28
 8011440:	6823      	ldr	r3, [r4, #0]
 8011442:	9305      	str	r3, [sp, #20]
 8011444:	f8d8 3000 	ldr.w	r3, [r8]
 8011448:	f894 b018 	ldrb.w	fp, [r4, #24]
 801144c:	3307      	adds	r3, #7
 801144e:	f023 0307 	bic.w	r3, r3, #7
 8011452:	f103 0208 	add.w	r2, r3, #8
 8011456:	f8c8 2000 	str.w	r2, [r8]
 801145a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801145e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8011462:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8011466:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801146a:	9307      	str	r3, [sp, #28]
 801146c:	f8cd 8018 	str.w	r8, [sp, #24]
 8011470:	ee08 0a10 	vmov	s16, r0
 8011474:	4b9f      	ldr	r3, [pc, #636]	; (80116f4 <_printf_float+0x2dc>)
 8011476:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801147a:	f04f 32ff 	mov.w	r2, #4294967295
 801147e:	f7ef fb6d 	bl	8000b5c <__aeabi_dcmpun>
 8011482:	bb88      	cbnz	r0, 80114e8 <_printf_float+0xd0>
 8011484:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011488:	4b9a      	ldr	r3, [pc, #616]	; (80116f4 <_printf_float+0x2dc>)
 801148a:	f04f 32ff 	mov.w	r2, #4294967295
 801148e:	f7ef fb47 	bl	8000b20 <__aeabi_dcmple>
 8011492:	bb48      	cbnz	r0, 80114e8 <_printf_float+0xd0>
 8011494:	2200      	movs	r2, #0
 8011496:	2300      	movs	r3, #0
 8011498:	4640      	mov	r0, r8
 801149a:	4649      	mov	r1, r9
 801149c:	f7ef fb36 	bl	8000b0c <__aeabi_dcmplt>
 80114a0:	b110      	cbz	r0, 80114a8 <_printf_float+0x90>
 80114a2:	232d      	movs	r3, #45	; 0x2d
 80114a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80114a8:	4b93      	ldr	r3, [pc, #588]	; (80116f8 <_printf_float+0x2e0>)
 80114aa:	4894      	ldr	r0, [pc, #592]	; (80116fc <_printf_float+0x2e4>)
 80114ac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80114b0:	bf94      	ite	ls
 80114b2:	4698      	movls	r8, r3
 80114b4:	4680      	movhi	r8, r0
 80114b6:	2303      	movs	r3, #3
 80114b8:	6123      	str	r3, [r4, #16]
 80114ba:	9b05      	ldr	r3, [sp, #20]
 80114bc:	f023 0204 	bic.w	r2, r3, #4
 80114c0:	6022      	str	r2, [r4, #0]
 80114c2:	f04f 0900 	mov.w	r9, #0
 80114c6:	9700      	str	r7, [sp, #0]
 80114c8:	4633      	mov	r3, r6
 80114ca:	aa0b      	add	r2, sp, #44	; 0x2c
 80114cc:	4621      	mov	r1, r4
 80114ce:	4628      	mov	r0, r5
 80114d0:	f000 f9d8 	bl	8011884 <_printf_common>
 80114d4:	3001      	adds	r0, #1
 80114d6:	f040 8090 	bne.w	80115fa <_printf_float+0x1e2>
 80114da:	f04f 30ff 	mov.w	r0, #4294967295
 80114de:	b00d      	add	sp, #52	; 0x34
 80114e0:	ecbd 8b02 	vpop	{d8}
 80114e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114e8:	4642      	mov	r2, r8
 80114ea:	464b      	mov	r3, r9
 80114ec:	4640      	mov	r0, r8
 80114ee:	4649      	mov	r1, r9
 80114f0:	f7ef fb34 	bl	8000b5c <__aeabi_dcmpun>
 80114f4:	b140      	cbz	r0, 8011508 <_printf_float+0xf0>
 80114f6:	464b      	mov	r3, r9
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	bfbc      	itt	lt
 80114fc:	232d      	movlt	r3, #45	; 0x2d
 80114fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8011502:	487f      	ldr	r0, [pc, #508]	; (8011700 <_printf_float+0x2e8>)
 8011504:	4b7f      	ldr	r3, [pc, #508]	; (8011704 <_printf_float+0x2ec>)
 8011506:	e7d1      	b.n	80114ac <_printf_float+0x94>
 8011508:	6863      	ldr	r3, [r4, #4]
 801150a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801150e:	9206      	str	r2, [sp, #24]
 8011510:	1c5a      	adds	r2, r3, #1
 8011512:	d13f      	bne.n	8011594 <_printf_float+0x17c>
 8011514:	2306      	movs	r3, #6
 8011516:	6063      	str	r3, [r4, #4]
 8011518:	9b05      	ldr	r3, [sp, #20]
 801151a:	6861      	ldr	r1, [r4, #4]
 801151c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8011520:	2300      	movs	r3, #0
 8011522:	9303      	str	r3, [sp, #12]
 8011524:	ab0a      	add	r3, sp, #40	; 0x28
 8011526:	e9cd b301 	strd	fp, r3, [sp, #4]
 801152a:	ab09      	add	r3, sp, #36	; 0x24
 801152c:	ec49 8b10 	vmov	d0, r8, r9
 8011530:	9300      	str	r3, [sp, #0]
 8011532:	6022      	str	r2, [r4, #0]
 8011534:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011538:	4628      	mov	r0, r5
 801153a:	f7ff fecd 	bl	80112d8 <__cvt>
 801153e:	9b06      	ldr	r3, [sp, #24]
 8011540:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011542:	2b47      	cmp	r3, #71	; 0x47
 8011544:	4680      	mov	r8, r0
 8011546:	d108      	bne.n	801155a <_printf_float+0x142>
 8011548:	1cc8      	adds	r0, r1, #3
 801154a:	db02      	blt.n	8011552 <_printf_float+0x13a>
 801154c:	6863      	ldr	r3, [r4, #4]
 801154e:	4299      	cmp	r1, r3
 8011550:	dd41      	ble.n	80115d6 <_printf_float+0x1be>
 8011552:	f1ab 0b02 	sub.w	fp, fp, #2
 8011556:	fa5f fb8b 	uxtb.w	fp, fp
 801155a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801155e:	d820      	bhi.n	80115a2 <_printf_float+0x18a>
 8011560:	3901      	subs	r1, #1
 8011562:	465a      	mov	r2, fp
 8011564:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011568:	9109      	str	r1, [sp, #36]	; 0x24
 801156a:	f7ff ff17 	bl	801139c <__exponent>
 801156e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011570:	1813      	adds	r3, r2, r0
 8011572:	2a01      	cmp	r2, #1
 8011574:	4681      	mov	r9, r0
 8011576:	6123      	str	r3, [r4, #16]
 8011578:	dc02      	bgt.n	8011580 <_printf_float+0x168>
 801157a:	6822      	ldr	r2, [r4, #0]
 801157c:	07d2      	lsls	r2, r2, #31
 801157e:	d501      	bpl.n	8011584 <_printf_float+0x16c>
 8011580:	3301      	adds	r3, #1
 8011582:	6123      	str	r3, [r4, #16]
 8011584:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011588:	2b00      	cmp	r3, #0
 801158a:	d09c      	beq.n	80114c6 <_printf_float+0xae>
 801158c:	232d      	movs	r3, #45	; 0x2d
 801158e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011592:	e798      	b.n	80114c6 <_printf_float+0xae>
 8011594:	9a06      	ldr	r2, [sp, #24]
 8011596:	2a47      	cmp	r2, #71	; 0x47
 8011598:	d1be      	bne.n	8011518 <_printf_float+0x100>
 801159a:	2b00      	cmp	r3, #0
 801159c:	d1bc      	bne.n	8011518 <_printf_float+0x100>
 801159e:	2301      	movs	r3, #1
 80115a0:	e7b9      	b.n	8011516 <_printf_float+0xfe>
 80115a2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80115a6:	d118      	bne.n	80115da <_printf_float+0x1c2>
 80115a8:	2900      	cmp	r1, #0
 80115aa:	6863      	ldr	r3, [r4, #4]
 80115ac:	dd0b      	ble.n	80115c6 <_printf_float+0x1ae>
 80115ae:	6121      	str	r1, [r4, #16]
 80115b0:	b913      	cbnz	r3, 80115b8 <_printf_float+0x1a0>
 80115b2:	6822      	ldr	r2, [r4, #0]
 80115b4:	07d0      	lsls	r0, r2, #31
 80115b6:	d502      	bpl.n	80115be <_printf_float+0x1a6>
 80115b8:	3301      	adds	r3, #1
 80115ba:	440b      	add	r3, r1
 80115bc:	6123      	str	r3, [r4, #16]
 80115be:	65a1      	str	r1, [r4, #88]	; 0x58
 80115c0:	f04f 0900 	mov.w	r9, #0
 80115c4:	e7de      	b.n	8011584 <_printf_float+0x16c>
 80115c6:	b913      	cbnz	r3, 80115ce <_printf_float+0x1b6>
 80115c8:	6822      	ldr	r2, [r4, #0]
 80115ca:	07d2      	lsls	r2, r2, #31
 80115cc:	d501      	bpl.n	80115d2 <_printf_float+0x1ba>
 80115ce:	3302      	adds	r3, #2
 80115d0:	e7f4      	b.n	80115bc <_printf_float+0x1a4>
 80115d2:	2301      	movs	r3, #1
 80115d4:	e7f2      	b.n	80115bc <_printf_float+0x1a4>
 80115d6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80115da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80115dc:	4299      	cmp	r1, r3
 80115de:	db05      	blt.n	80115ec <_printf_float+0x1d4>
 80115e0:	6823      	ldr	r3, [r4, #0]
 80115e2:	6121      	str	r1, [r4, #16]
 80115e4:	07d8      	lsls	r0, r3, #31
 80115e6:	d5ea      	bpl.n	80115be <_printf_float+0x1a6>
 80115e8:	1c4b      	adds	r3, r1, #1
 80115ea:	e7e7      	b.n	80115bc <_printf_float+0x1a4>
 80115ec:	2900      	cmp	r1, #0
 80115ee:	bfd4      	ite	le
 80115f0:	f1c1 0202 	rsble	r2, r1, #2
 80115f4:	2201      	movgt	r2, #1
 80115f6:	4413      	add	r3, r2
 80115f8:	e7e0      	b.n	80115bc <_printf_float+0x1a4>
 80115fa:	6823      	ldr	r3, [r4, #0]
 80115fc:	055a      	lsls	r2, r3, #21
 80115fe:	d407      	bmi.n	8011610 <_printf_float+0x1f8>
 8011600:	6923      	ldr	r3, [r4, #16]
 8011602:	4642      	mov	r2, r8
 8011604:	4631      	mov	r1, r6
 8011606:	4628      	mov	r0, r5
 8011608:	47b8      	blx	r7
 801160a:	3001      	adds	r0, #1
 801160c:	d12c      	bne.n	8011668 <_printf_float+0x250>
 801160e:	e764      	b.n	80114da <_printf_float+0xc2>
 8011610:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011614:	f240 80e0 	bls.w	80117d8 <_printf_float+0x3c0>
 8011618:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801161c:	2200      	movs	r2, #0
 801161e:	2300      	movs	r3, #0
 8011620:	f7ef fa6a 	bl	8000af8 <__aeabi_dcmpeq>
 8011624:	2800      	cmp	r0, #0
 8011626:	d034      	beq.n	8011692 <_printf_float+0x27a>
 8011628:	4a37      	ldr	r2, [pc, #220]	; (8011708 <_printf_float+0x2f0>)
 801162a:	2301      	movs	r3, #1
 801162c:	4631      	mov	r1, r6
 801162e:	4628      	mov	r0, r5
 8011630:	47b8      	blx	r7
 8011632:	3001      	adds	r0, #1
 8011634:	f43f af51 	beq.w	80114da <_printf_float+0xc2>
 8011638:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801163c:	429a      	cmp	r2, r3
 801163e:	db02      	blt.n	8011646 <_printf_float+0x22e>
 8011640:	6823      	ldr	r3, [r4, #0]
 8011642:	07d8      	lsls	r0, r3, #31
 8011644:	d510      	bpl.n	8011668 <_printf_float+0x250>
 8011646:	ee18 3a10 	vmov	r3, s16
 801164a:	4652      	mov	r2, sl
 801164c:	4631      	mov	r1, r6
 801164e:	4628      	mov	r0, r5
 8011650:	47b8      	blx	r7
 8011652:	3001      	adds	r0, #1
 8011654:	f43f af41 	beq.w	80114da <_printf_float+0xc2>
 8011658:	f04f 0800 	mov.w	r8, #0
 801165c:	f104 091a 	add.w	r9, r4, #26
 8011660:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011662:	3b01      	subs	r3, #1
 8011664:	4543      	cmp	r3, r8
 8011666:	dc09      	bgt.n	801167c <_printf_float+0x264>
 8011668:	6823      	ldr	r3, [r4, #0]
 801166a:	079b      	lsls	r3, r3, #30
 801166c:	f100 8105 	bmi.w	801187a <_printf_float+0x462>
 8011670:	68e0      	ldr	r0, [r4, #12]
 8011672:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011674:	4298      	cmp	r0, r3
 8011676:	bfb8      	it	lt
 8011678:	4618      	movlt	r0, r3
 801167a:	e730      	b.n	80114de <_printf_float+0xc6>
 801167c:	2301      	movs	r3, #1
 801167e:	464a      	mov	r2, r9
 8011680:	4631      	mov	r1, r6
 8011682:	4628      	mov	r0, r5
 8011684:	47b8      	blx	r7
 8011686:	3001      	adds	r0, #1
 8011688:	f43f af27 	beq.w	80114da <_printf_float+0xc2>
 801168c:	f108 0801 	add.w	r8, r8, #1
 8011690:	e7e6      	b.n	8011660 <_printf_float+0x248>
 8011692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011694:	2b00      	cmp	r3, #0
 8011696:	dc39      	bgt.n	801170c <_printf_float+0x2f4>
 8011698:	4a1b      	ldr	r2, [pc, #108]	; (8011708 <_printf_float+0x2f0>)
 801169a:	2301      	movs	r3, #1
 801169c:	4631      	mov	r1, r6
 801169e:	4628      	mov	r0, r5
 80116a0:	47b8      	blx	r7
 80116a2:	3001      	adds	r0, #1
 80116a4:	f43f af19 	beq.w	80114da <_printf_float+0xc2>
 80116a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80116ac:	4313      	orrs	r3, r2
 80116ae:	d102      	bne.n	80116b6 <_printf_float+0x29e>
 80116b0:	6823      	ldr	r3, [r4, #0]
 80116b2:	07d9      	lsls	r1, r3, #31
 80116b4:	d5d8      	bpl.n	8011668 <_printf_float+0x250>
 80116b6:	ee18 3a10 	vmov	r3, s16
 80116ba:	4652      	mov	r2, sl
 80116bc:	4631      	mov	r1, r6
 80116be:	4628      	mov	r0, r5
 80116c0:	47b8      	blx	r7
 80116c2:	3001      	adds	r0, #1
 80116c4:	f43f af09 	beq.w	80114da <_printf_float+0xc2>
 80116c8:	f04f 0900 	mov.w	r9, #0
 80116cc:	f104 0a1a 	add.w	sl, r4, #26
 80116d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80116d2:	425b      	negs	r3, r3
 80116d4:	454b      	cmp	r3, r9
 80116d6:	dc01      	bgt.n	80116dc <_printf_float+0x2c4>
 80116d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80116da:	e792      	b.n	8011602 <_printf_float+0x1ea>
 80116dc:	2301      	movs	r3, #1
 80116de:	4652      	mov	r2, sl
 80116e0:	4631      	mov	r1, r6
 80116e2:	4628      	mov	r0, r5
 80116e4:	47b8      	blx	r7
 80116e6:	3001      	adds	r0, #1
 80116e8:	f43f aef7 	beq.w	80114da <_printf_float+0xc2>
 80116ec:	f109 0901 	add.w	r9, r9, #1
 80116f0:	e7ee      	b.n	80116d0 <_printf_float+0x2b8>
 80116f2:	bf00      	nop
 80116f4:	7fefffff 	.word	0x7fefffff
 80116f8:	08018fe0 	.word	0x08018fe0
 80116fc:	08018fe4 	.word	0x08018fe4
 8011700:	08018fec 	.word	0x08018fec
 8011704:	08018fe8 	.word	0x08018fe8
 8011708:	08019504 	.word	0x08019504
 801170c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801170e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011710:	429a      	cmp	r2, r3
 8011712:	bfa8      	it	ge
 8011714:	461a      	movge	r2, r3
 8011716:	2a00      	cmp	r2, #0
 8011718:	4691      	mov	r9, r2
 801171a:	dc37      	bgt.n	801178c <_printf_float+0x374>
 801171c:	f04f 0b00 	mov.w	fp, #0
 8011720:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011724:	f104 021a 	add.w	r2, r4, #26
 8011728:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801172a:	9305      	str	r3, [sp, #20]
 801172c:	eba3 0309 	sub.w	r3, r3, r9
 8011730:	455b      	cmp	r3, fp
 8011732:	dc33      	bgt.n	801179c <_printf_float+0x384>
 8011734:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011738:	429a      	cmp	r2, r3
 801173a:	db3b      	blt.n	80117b4 <_printf_float+0x39c>
 801173c:	6823      	ldr	r3, [r4, #0]
 801173e:	07da      	lsls	r2, r3, #31
 8011740:	d438      	bmi.n	80117b4 <_printf_float+0x39c>
 8011742:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011744:	9a05      	ldr	r2, [sp, #20]
 8011746:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011748:	1a9a      	subs	r2, r3, r2
 801174a:	eba3 0901 	sub.w	r9, r3, r1
 801174e:	4591      	cmp	r9, r2
 8011750:	bfa8      	it	ge
 8011752:	4691      	movge	r9, r2
 8011754:	f1b9 0f00 	cmp.w	r9, #0
 8011758:	dc35      	bgt.n	80117c6 <_printf_float+0x3ae>
 801175a:	f04f 0800 	mov.w	r8, #0
 801175e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011762:	f104 0a1a 	add.w	sl, r4, #26
 8011766:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801176a:	1a9b      	subs	r3, r3, r2
 801176c:	eba3 0309 	sub.w	r3, r3, r9
 8011770:	4543      	cmp	r3, r8
 8011772:	f77f af79 	ble.w	8011668 <_printf_float+0x250>
 8011776:	2301      	movs	r3, #1
 8011778:	4652      	mov	r2, sl
 801177a:	4631      	mov	r1, r6
 801177c:	4628      	mov	r0, r5
 801177e:	47b8      	blx	r7
 8011780:	3001      	adds	r0, #1
 8011782:	f43f aeaa 	beq.w	80114da <_printf_float+0xc2>
 8011786:	f108 0801 	add.w	r8, r8, #1
 801178a:	e7ec      	b.n	8011766 <_printf_float+0x34e>
 801178c:	4613      	mov	r3, r2
 801178e:	4631      	mov	r1, r6
 8011790:	4642      	mov	r2, r8
 8011792:	4628      	mov	r0, r5
 8011794:	47b8      	blx	r7
 8011796:	3001      	adds	r0, #1
 8011798:	d1c0      	bne.n	801171c <_printf_float+0x304>
 801179a:	e69e      	b.n	80114da <_printf_float+0xc2>
 801179c:	2301      	movs	r3, #1
 801179e:	4631      	mov	r1, r6
 80117a0:	4628      	mov	r0, r5
 80117a2:	9205      	str	r2, [sp, #20]
 80117a4:	47b8      	blx	r7
 80117a6:	3001      	adds	r0, #1
 80117a8:	f43f ae97 	beq.w	80114da <_printf_float+0xc2>
 80117ac:	9a05      	ldr	r2, [sp, #20]
 80117ae:	f10b 0b01 	add.w	fp, fp, #1
 80117b2:	e7b9      	b.n	8011728 <_printf_float+0x310>
 80117b4:	ee18 3a10 	vmov	r3, s16
 80117b8:	4652      	mov	r2, sl
 80117ba:	4631      	mov	r1, r6
 80117bc:	4628      	mov	r0, r5
 80117be:	47b8      	blx	r7
 80117c0:	3001      	adds	r0, #1
 80117c2:	d1be      	bne.n	8011742 <_printf_float+0x32a>
 80117c4:	e689      	b.n	80114da <_printf_float+0xc2>
 80117c6:	9a05      	ldr	r2, [sp, #20]
 80117c8:	464b      	mov	r3, r9
 80117ca:	4442      	add	r2, r8
 80117cc:	4631      	mov	r1, r6
 80117ce:	4628      	mov	r0, r5
 80117d0:	47b8      	blx	r7
 80117d2:	3001      	adds	r0, #1
 80117d4:	d1c1      	bne.n	801175a <_printf_float+0x342>
 80117d6:	e680      	b.n	80114da <_printf_float+0xc2>
 80117d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80117da:	2a01      	cmp	r2, #1
 80117dc:	dc01      	bgt.n	80117e2 <_printf_float+0x3ca>
 80117de:	07db      	lsls	r3, r3, #31
 80117e0:	d538      	bpl.n	8011854 <_printf_float+0x43c>
 80117e2:	2301      	movs	r3, #1
 80117e4:	4642      	mov	r2, r8
 80117e6:	4631      	mov	r1, r6
 80117e8:	4628      	mov	r0, r5
 80117ea:	47b8      	blx	r7
 80117ec:	3001      	adds	r0, #1
 80117ee:	f43f ae74 	beq.w	80114da <_printf_float+0xc2>
 80117f2:	ee18 3a10 	vmov	r3, s16
 80117f6:	4652      	mov	r2, sl
 80117f8:	4631      	mov	r1, r6
 80117fa:	4628      	mov	r0, r5
 80117fc:	47b8      	blx	r7
 80117fe:	3001      	adds	r0, #1
 8011800:	f43f ae6b 	beq.w	80114da <_printf_float+0xc2>
 8011804:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011808:	2200      	movs	r2, #0
 801180a:	2300      	movs	r3, #0
 801180c:	f7ef f974 	bl	8000af8 <__aeabi_dcmpeq>
 8011810:	b9d8      	cbnz	r0, 801184a <_printf_float+0x432>
 8011812:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011814:	f108 0201 	add.w	r2, r8, #1
 8011818:	3b01      	subs	r3, #1
 801181a:	4631      	mov	r1, r6
 801181c:	4628      	mov	r0, r5
 801181e:	47b8      	blx	r7
 8011820:	3001      	adds	r0, #1
 8011822:	d10e      	bne.n	8011842 <_printf_float+0x42a>
 8011824:	e659      	b.n	80114da <_printf_float+0xc2>
 8011826:	2301      	movs	r3, #1
 8011828:	4652      	mov	r2, sl
 801182a:	4631      	mov	r1, r6
 801182c:	4628      	mov	r0, r5
 801182e:	47b8      	blx	r7
 8011830:	3001      	adds	r0, #1
 8011832:	f43f ae52 	beq.w	80114da <_printf_float+0xc2>
 8011836:	f108 0801 	add.w	r8, r8, #1
 801183a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801183c:	3b01      	subs	r3, #1
 801183e:	4543      	cmp	r3, r8
 8011840:	dcf1      	bgt.n	8011826 <_printf_float+0x40e>
 8011842:	464b      	mov	r3, r9
 8011844:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011848:	e6dc      	b.n	8011604 <_printf_float+0x1ec>
 801184a:	f04f 0800 	mov.w	r8, #0
 801184e:	f104 0a1a 	add.w	sl, r4, #26
 8011852:	e7f2      	b.n	801183a <_printf_float+0x422>
 8011854:	2301      	movs	r3, #1
 8011856:	4642      	mov	r2, r8
 8011858:	e7df      	b.n	801181a <_printf_float+0x402>
 801185a:	2301      	movs	r3, #1
 801185c:	464a      	mov	r2, r9
 801185e:	4631      	mov	r1, r6
 8011860:	4628      	mov	r0, r5
 8011862:	47b8      	blx	r7
 8011864:	3001      	adds	r0, #1
 8011866:	f43f ae38 	beq.w	80114da <_printf_float+0xc2>
 801186a:	f108 0801 	add.w	r8, r8, #1
 801186e:	68e3      	ldr	r3, [r4, #12]
 8011870:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011872:	1a5b      	subs	r3, r3, r1
 8011874:	4543      	cmp	r3, r8
 8011876:	dcf0      	bgt.n	801185a <_printf_float+0x442>
 8011878:	e6fa      	b.n	8011670 <_printf_float+0x258>
 801187a:	f04f 0800 	mov.w	r8, #0
 801187e:	f104 0919 	add.w	r9, r4, #25
 8011882:	e7f4      	b.n	801186e <_printf_float+0x456>

08011884 <_printf_common>:
 8011884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011888:	4616      	mov	r6, r2
 801188a:	4699      	mov	r9, r3
 801188c:	688a      	ldr	r2, [r1, #8]
 801188e:	690b      	ldr	r3, [r1, #16]
 8011890:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011894:	4293      	cmp	r3, r2
 8011896:	bfb8      	it	lt
 8011898:	4613      	movlt	r3, r2
 801189a:	6033      	str	r3, [r6, #0]
 801189c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80118a0:	4607      	mov	r7, r0
 80118a2:	460c      	mov	r4, r1
 80118a4:	b10a      	cbz	r2, 80118aa <_printf_common+0x26>
 80118a6:	3301      	adds	r3, #1
 80118a8:	6033      	str	r3, [r6, #0]
 80118aa:	6823      	ldr	r3, [r4, #0]
 80118ac:	0699      	lsls	r1, r3, #26
 80118ae:	bf42      	ittt	mi
 80118b0:	6833      	ldrmi	r3, [r6, #0]
 80118b2:	3302      	addmi	r3, #2
 80118b4:	6033      	strmi	r3, [r6, #0]
 80118b6:	6825      	ldr	r5, [r4, #0]
 80118b8:	f015 0506 	ands.w	r5, r5, #6
 80118bc:	d106      	bne.n	80118cc <_printf_common+0x48>
 80118be:	f104 0a19 	add.w	sl, r4, #25
 80118c2:	68e3      	ldr	r3, [r4, #12]
 80118c4:	6832      	ldr	r2, [r6, #0]
 80118c6:	1a9b      	subs	r3, r3, r2
 80118c8:	42ab      	cmp	r3, r5
 80118ca:	dc26      	bgt.n	801191a <_printf_common+0x96>
 80118cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80118d0:	1e13      	subs	r3, r2, #0
 80118d2:	6822      	ldr	r2, [r4, #0]
 80118d4:	bf18      	it	ne
 80118d6:	2301      	movne	r3, #1
 80118d8:	0692      	lsls	r2, r2, #26
 80118da:	d42b      	bmi.n	8011934 <_printf_common+0xb0>
 80118dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80118e0:	4649      	mov	r1, r9
 80118e2:	4638      	mov	r0, r7
 80118e4:	47c0      	blx	r8
 80118e6:	3001      	adds	r0, #1
 80118e8:	d01e      	beq.n	8011928 <_printf_common+0xa4>
 80118ea:	6823      	ldr	r3, [r4, #0]
 80118ec:	68e5      	ldr	r5, [r4, #12]
 80118ee:	6832      	ldr	r2, [r6, #0]
 80118f0:	f003 0306 	and.w	r3, r3, #6
 80118f4:	2b04      	cmp	r3, #4
 80118f6:	bf08      	it	eq
 80118f8:	1aad      	subeq	r5, r5, r2
 80118fa:	68a3      	ldr	r3, [r4, #8]
 80118fc:	6922      	ldr	r2, [r4, #16]
 80118fe:	bf0c      	ite	eq
 8011900:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011904:	2500      	movne	r5, #0
 8011906:	4293      	cmp	r3, r2
 8011908:	bfc4      	itt	gt
 801190a:	1a9b      	subgt	r3, r3, r2
 801190c:	18ed      	addgt	r5, r5, r3
 801190e:	2600      	movs	r6, #0
 8011910:	341a      	adds	r4, #26
 8011912:	42b5      	cmp	r5, r6
 8011914:	d11a      	bne.n	801194c <_printf_common+0xc8>
 8011916:	2000      	movs	r0, #0
 8011918:	e008      	b.n	801192c <_printf_common+0xa8>
 801191a:	2301      	movs	r3, #1
 801191c:	4652      	mov	r2, sl
 801191e:	4649      	mov	r1, r9
 8011920:	4638      	mov	r0, r7
 8011922:	47c0      	blx	r8
 8011924:	3001      	adds	r0, #1
 8011926:	d103      	bne.n	8011930 <_printf_common+0xac>
 8011928:	f04f 30ff 	mov.w	r0, #4294967295
 801192c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011930:	3501      	adds	r5, #1
 8011932:	e7c6      	b.n	80118c2 <_printf_common+0x3e>
 8011934:	18e1      	adds	r1, r4, r3
 8011936:	1c5a      	adds	r2, r3, #1
 8011938:	2030      	movs	r0, #48	; 0x30
 801193a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801193e:	4422      	add	r2, r4
 8011940:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011944:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011948:	3302      	adds	r3, #2
 801194a:	e7c7      	b.n	80118dc <_printf_common+0x58>
 801194c:	2301      	movs	r3, #1
 801194e:	4622      	mov	r2, r4
 8011950:	4649      	mov	r1, r9
 8011952:	4638      	mov	r0, r7
 8011954:	47c0      	blx	r8
 8011956:	3001      	adds	r0, #1
 8011958:	d0e6      	beq.n	8011928 <_printf_common+0xa4>
 801195a:	3601      	adds	r6, #1
 801195c:	e7d9      	b.n	8011912 <_printf_common+0x8e>
	...

08011960 <_printf_i>:
 8011960:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011964:	7e0f      	ldrb	r7, [r1, #24]
 8011966:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011968:	2f78      	cmp	r7, #120	; 0x78
 801196a:	4691      	mov	r9, r2
 801196c:	4680      	mov	r8, r0
 801196e:	460c      	mov	r4, r1
 8011970:	469a      	mov	sl, r3
 8011972:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011976:	d807      	bhi.n	8011988 <_printf_i+0x28>
 8011978:	2f62      	cmp	r7, #98	; 0x62
 801197a:	d80a      	bhi.n	8011992 <_printf_i+0x32>
 801197c:	2f00      	cmp	r7, #0
 801197e:	f000 80d8 	beq.w	8011b32 <_printf_i+0x1d2>
 8011982:	2f58      	cmp	r7, #88	; 0x58
 8011984:	f000 80a3 	beq.w	8011ace <_printf_i+0x16e>
 8011988:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801198c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011990:	e03a      	b.n	8011a08 <_printf_i+0xa8>
 8011992:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011996:	2b15      	cmp	r3, #21
 8011998:	d8f6      	bhi.n	8011988 <_printf_i+0x28>
 801199a:	a101      	add	r1, pc, #4	; (adr r1, 80119a0 <_printf_i+0x40>)
 801199c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80119a0:	080119f9 	.word	0x080119f9
 80119a4:	08011a0d 	.word	0x08011a0d
 80119a8:	08011989 	.word	0x08011989
 80119ac:	08011989 	.word	0x08011989
 80119b0:	08011989 	.word	0x08011989
 80119b4:	08011989 	.word	0x08011989
 80119b8:	08011a0d 	.word	0x08011a0d
 80119bc:	08011989 	.word	0x08011989
 80119c0:	08011989 	.word	0x08011989
 80119c4:	08011989 	.word	0x08011989
 80119c8:	08011989 	.word	0x08011989
 80119cc:	08011b19 	.word	0x08011b19
 80119d0:	08011a3d 	.word	0x08011a3d
 80119d4:	08011afb 	.word	0x08011afb
 80119d8:	08011989 	.word	0x08011989
 80119dc:	08011989 	.word	0x08011989
 80119e0:	08011b3b 	.word	0x08011b3b
 80119e4:	08011989 	.word	0x08011989
 80119e8:	08011a3d 	.word	0x08011a3d
 80119ec:	08011989 	.word	0x08011989
 80119f0:	08011989 	.word	0x08011989
 80119f4:	08011b03 	.word	0x08011b03
 80119f8:	682b      	ldr	r3, [r5, #0]
 80119fa:	1d1a      	adds	r2, r3, #4
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	602a      	str	r2, [r5, #0]
 8011a00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011a04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011a08:	2301      	movs	r3, #1
 8011a0a:	e0a3      	b.n	8011b54 <_printf_i+0x1f4>
 8011a0c:	6820      	ldr	r0, [r4, #0]
 8011a0e:	6829      	ldr	r1, [r5, #0]
 8011a10:	0606      	lsls	r6, r0, #24
 8011a12:	f101 0304 	add.w	r3, r1, #4
 8011a16:	d50a      	bpl.n	8011a2e <_printf_i+0xce>
 8011a18:	680e      	ldr	r6, [r1, #0]
 8011a1a:	602b      	str	r3, [r5, #0]
 8011a1c:	2e00      	cmp	r6, #0
 8011a1e:	da03      	bge.n	8011a28 <_printf_i+0xc8>
 8011a20:	232d      	movs	r3, #45	; 0x2d
 8011a22:	4276      	negs	r6, r6
 8011a24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011a28:	485e      	ldr	r0, [pc, #376]	; (8011ba4 <_printf_i+0x244>)
 8011a2a:	230a      	movs	r3, #10
 8011a2c:	e019      	b.n	8011a62 <_printf_i+0x102>
 8011a2e:	680e      	ldr	r6, [r1, #0]
 8011a30:	602b      	str	r3, [r5, #0]
 8011a32:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011a36:	bf18      	it	ne
 8011a38:	b236      	sxthne	r6, r6
 8011a3a:	e7ef      	b.n	8011a1c <_printf_i+0xbc>
 8011a3c:	682b      	ldr	r3, [r5, #0]
 8011a3e:	6820      	ldr	r0, [r4, #0]
 8011a40:	1d19      	adds	r1, r3, #4
 8011a42:	6029      	str	r1, [r5, #0]
 8011a44:	0601      	lsls	r1, r0, #24
 8011a46:	d501      	bpl.n	8011a4c <_printf_i+0xec>
 8011a48:	681e      	ldr	r6, [r3, #0]
 8011a4a:	e002      	b.n	8011a52 <_printf_i+0xf2>
 8011a4c:	0646      	lsls	r6, r0, #25
 8011a4e:	d5fb      	bpl.n	8011a48 <_printf_i+0xe8>
 8011a50:	881e      	ldrh	r6, [r3, #0]
 8011a52:	4854      	ldr	r0, [pc, #336]	; (8011ba4 <_printf_i+0x244>)
 8011a54:	2f6f      	cmp	r7, #111	; 0x6f
 8011a56:	bf0c      	ite	eq
 8011a58:	2308      	moveq	r3, #8
 8011a5a:	230a      	movne	r3, #10
 8011a5c:	2100      	movs	r1, #0
 8011a5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011a62:	6865      	ldr	r5, [r4, #4]
 8011a64:	60a5      	str	r5, [r4, #8]
 8011a66:	2d00      	cmp	r5, #0
 8011a68:	bfa2      	ittt	ge
 8011a6a:	6821      	ldrge	r1, [r4, #0]
 8011a6c:	f021 0104 	bicge.w	r1, r1, #4
 8011a70:	6021      	strge	r1, [r4, #0]
 8011a72:	b90e      	cbnz	r6, 8011a78 <_printf_i+0x118>
 8011a74:	2d00      	cmp	r5, #0
 8011a76:	d04d      	beq.n	8011b14 <_printf_i+0x1b4>
 8011a78:	4615      	mov	r5, r2
 8011a7a:	fbb6 f1f3 	udiv	r1, r6, r3
 8011a7e:	fb03 6711 	mls	r7, r3, r1, r6
 8011a82:	5dc7      	ldrb	r7, [r0, r7]
 8011a84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011a88:	4637      	mov	r7, r6
 8011a8a:	42bb      	cmp	r3, r7
 8011a8c:	460e      	mov	r6, r1
 8011a8e:	d9f4      	bls.n	8011a7a <_printf_i+0x11a>
 8011a90:	2b08      	cmp	r3, #8
 8011a92:	d10b      	bne.n	8011aac <_printf_i+0x14c>
 8011a94:	6823      	ldr	r3, [r4, #0]
 8011a96:	07de      	lsls	r6, r3, #31
 8011a98:	d508      	bpl.n	8011aac <_printf_i+0x14c>
 8011a9a:	6923      	ldr	r3, [r4, #16]
 8011a9c:	6861      	ldr	r1, [r4, #4]
 8011a9e:	4299      	cmp	r1, r3
 8011aa0:	bfde      	ittt	le
 8011aa2:	2330      	movle	r3, #48	; 0x30
 8011aa4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011aa8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011aac:	1b52      	subs	r2, r2, r5
 8011aae:	6122      	str	r2, [r4, #16]
 8011ab0:	f8cd a000 	str.w	sl, [sp]
 8011ab4:	464b      	mov	r3, r9
 8011ab6:	aa03      	add	r2, sp, #12
 8011ab8:	4621      	mov	r1, r4
 8011aba:	4640      	mov	r0, r8
 8011abc:	f7ff fee2 	bl	8011884 <_printf_common>
 8011ac0:	3001      	adds	r0, #1
 8011ac2:	d14c      	bne.n	8011b5e <_printf_i+0x1fe>
 8011ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8011ac8:	b004      	add	sp, #16
 8011aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ace:	4835      	ldr	r0, [pc, #212]	; (8011ba4 <_printf_i+0x244>)
 8011ad0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011ad4:	6829      	ldr	r1, [r5, #0]
 8011ad6:	6823      	ldr	r3, [r4, #0]
 8011ad8:	f851 6b04 	ldr.w	r6, [r1], #4
 8011adc:	6029      	str	r1, [r5, #0]
 8011ade:	061d      	lsls	r5, r3, #24
 8011ae0:	d514      	bpl.n	8011b0c <_printf_i+0x1ac>
 8011ae2:	07df      	lsls	r7, r3, #31
 8011ae4:	bf44      	itt	mi
 8011ae6:	f043 0320 	orrmi.w	r3, r3, #32
 8011aea:	6023      	strmi	r3, [r4, #0]
 8011aec:	b91e      	cbnz	r6, 8011af6 <_printf_i+0x196>
 8011aee:	6823      	ldr	r3, [r4, #0]
 8011af0:	f023 0320 	bic.w	r3, r3, #32
 8011af4:	6023      	str	r3, [r4, #0]
 8011af6:	2310      	movs	r3, #16
 8011af8:	e7b0      	b.n	8011a5c <_printf_i+0xfc>
 8011afa:	6823      	ldr	r3, [r4, #0]
 8011afc:	f043 0320 	orr.w	r3, r3, #32
 8011b00:	6023      	str	r3, [r4, #0]
 8011b02:	2378      	movs	r3, #120	; 0x78
 8011b04:	4828      	ldr	r0, [pc, #160]	; (8011ba8 <_printf_i+0x248>)
 8011b06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011b0a:	e7e3      	b.n	8011ad4 <_printf_i+0x174>
 8011b0c:	0659      	lsls	r1, r3, #25
 8011b0e:	bf48      	it	mi
 8011b10:	b2b6      	uxthmi	r6, r6
 8011b12:	e7e6      	b.n	8011ae2 <_printf_i+0x182>
 8011b14:	4615      	mov	r5, r2
 8011b16:	e7bb      	b.n	8011a90 <_printf_i+0x130>
 8011b18:	682b      	ldr	r3, [r5, #0]
 8011b1a:	6826      	ldr	r6, [r4, #0]
 8011b1c:	6961      	ldr	r1, [r4, #20]
 8011b1e:	1d18      	adds	r0, r3, #4
 8011b20:	6028      	str	r0, [r5, #0]
 8011b22:	0635      	lsls	r5, r6, #24
 8011b24:	681b      	ldr	r3, [r3, #0]
 8011b26:	d501      	bpl.n	8011b2c <_printf_i+0x1cc>
 8011b28:	6019      	str	r1, [r3, #0]
 8011b2a:	e002      	b.n	8011b32 <_printf_i+0x1d2>
 8011b2c:	0670      	lsls	r0, r6, #25
 8011b2e:	d5fb      	bpl.n	8011b28 <_printf_i+0x1c8>
 8011b30:	8019      	strh	r1, [r3, #0]
 8011b32:	2300      	movs	r3, #0
 8011b34:	6123      	str	r3, [r4, #16]
 8011b36:	4615      	mov	r5, r2
 8011b38:	e7ba      	b.n	8011ab0 <_printf_i+0x150>
 8011b3a:	682b      	ldr	r3, [r5, #0]
 8011b3c:	1d1a      	adds	r2, r3, #4
 8011b3e:	602a      	str	r2, [r5, #0]
 8011b40:	681d      	ldr	r5, [r3, #0]
 8011b42:	6862      	ldr	r2, [r4, #4]
 8011b44:	2100      	movs	r1, #0
 8011b46:	4628      	mov	r0, r5
 8011b48:	f7ee fb62 	bl	8000210 <memchr>
 8011b4c:	b108      	cbz	r0, 8011b52 <_printf_i+0x1f2>
 8011b4e:	1b40      	subs	r0, r0, r5
 8011b50:	6060      	str	r0, [r4, #4]
 8011b52:	6863      	ldr	r3, [r4, #4]
 8011b54:	6123      	str	r3, [r4, #16]
 8011b56:	2300      	movs	r3, #0
 8011b58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011b5c:	e7a8      	b.n	8011ab0 <_printf_i+0x150>
 8011b5e:	6923      	ldr	r3, [r4, #16]
 8011b60:	462a      	mov	r2, r5
 8011b62:	4649      	mov	r1, r9
 8011b64:	4640      	mov	r0, r8
 8011b66:	47d0      	blx	sl
 8011b68:	3001      	adds	r0, #1
 8011b6a:	d0ab      	beq.n	8011ac4 <_printf_i+0x164>
 8011b6c:	6823      	ldr	r3, [r4, #0]
 8011b6e:	079b      	lsls	r3, r3, #30
 8011b70:	d413      	bmi.n	8011b9a <_printf_i+0x23a>
 8011b72:	68e0      	ldr	r0, [r4, #12]
 8011b74:	9b03      	ldr	r3, [sp, #12]
 8011b76:	4298      	cmp	r0, r3
 8011b78:	bfb8      	it	lt
 8011b7a:	4618      	movlt	r0, r3
 8011b7c:	e7a4      	b.n	8011ac8 <_printf_i+0x168>
 8011b7e:	2301      	movs	r3, #1
 8011b80:	4632      	mov	r2, r6
 8011b82:	4649      	mov	r1, r9
 8011b84:	4640      	mov	r0, r8
 8011b86:	47d0      	blx	sl
 8011b88:	3001      	adds	r0, #1
 8011b8a:	d09b      	beq.n	8011ac4 <_printf_i+0x164>
 8011b8c:	3501      	adds	r5, #1
 8011b8e:	68e3      	ldr	r3, [r4, #12]
 8011b90:	9903      	ldr	r1, [sp, #12]
 8011b92:	1a5b      	subs	r3, r3, r1
 8011b94:	42ab      	cmp	r3, r5
 8011b96:	dcf2      	bgt.n	8011b7e <_printf_i+0x21e>
 8011b98:	e7eb      	b.n	8011b72 <_printf_i+0x212>
 8011b9a:	2500      	movs	r5, #0
 8011b9c:	f104 0619 	add.w	r6, r4, #25
 8011ba0:	e7f5      	b.n	8011b8e <_printf_i+0x22e>
 8011ba2:	bf00      	nop
 8011ba4:	08018ff0 	.word	0x08018ff0
 8011ba8:	08019001 	.word	0x08019001

08011bac <_sbrk_r>:
 8011bac:	b538      	push	{r3, r4, r5, lr}
 8011bae:	4d06      	ldr	r5, [pc, #24]	; (8011bc8 <_sbrk_r+0x1c>)
 8011bb0:	2300      	movs	r3, #0
 8011bb2:	4604      	mov	r4, r0
 8011bb4:	4608      	mov	r0, r1
 8011bb6:	602b      	str	r3, [r5, #0]
 8011bb8:	f7f4 fa72 	bl	80060a0 <_sbrk>
 8011bbc:	1c43      	adds	r3, r0, #1
 8011bbe:	d102      	bne.n	8011bc6 <_sbrk_r+0x1a>
 8011bc0:	682b      	ldr	r3, [r5, #0]
 8011bc2:	b103      	cbz	r3, 8011bc6 <_sbrk_r+0x1a>
 8011bc4:	6023      	str	r3, [r4, #0]
 8011bc6:	bd38      	pop	{r3, r4, r5, pc}
 8011bc8:	20007b30 	.word	0x20007b30

08011bcc <siprintf>:
 8011bcc:	b40e      	push	{r1, r2, r3}
 8011bce:	b500      	push	{lr}
 8011bd0:	b09c      	sub	sp, #112	; 0x70
 8011bd2:	ab1d      	add	r3, sp, #116	; 0x74
 8011bd4:	9002      	str	r0, [sp, #8]
 8011bd6:	9006      	str	r0, [sp, #24]
 8011bd8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011bdc:	4809      	ldr	r0, [pc, #36]	; (8011c04 <siprintf+0x38>)
 8011bde:	9107      	str	r1, [sp, #28]
 8011be0:	9104      	str	r1, [sp, #16]
 8011be2:	4909      	ldr	r1, [pc, #36]	; (8011c08 <siprintf+0x3c>)
 8011be4:	f853 2b04 	ldr.w	r2, [r3], #4
 8011be8:	9105      	str	r1, [sp, #20]
 8011bea:	6800      	ldr	r0, [r0, #0]
 8011bec:	9301      	str	r3, [sp, #4]
 8011bee:	a902      	add	r1, sp, #8
 8011bf0:	f003 f86a 	bl	8014cc8 <_svfiprintf_r>
 8011bf4:	9b02      	ldr	r3, [sp, #8]
 8011bf6:	2200      	movs	r2, #0
 8011bf8:	701a      	strb	r2, [r3, #0]
 8011bfa:	b01c      	add	sp, #112	; 0x70
 8011bfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8011c00:	b003      	add	sp, #12
 8011c02:	4770      	bx	lr
 8011c04:	20000020 	.word	0x20000020
 8011c08:	ffff0208 	.word	0xffff0208

08011c0c <strncmp>:
 8011c0c:	b510      	push	{r4, lr}
 8011c0e:	b17a      	cbz	r2, 8011c30 <strncmp+0x24>
 8011c10:	4603      	mov	r3, r0
 8011c12:	3901      	subs	r1, #1
 8011c14:	1884      	adds	r4, r0, r2
 8011c16:	f813 0b01 	ldrb.w	r0, [r3], #1
 8011c1a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8011c1e:	4290      	cmp	r0, r2
 8011c20:	d101      	bne.n	8011c26 <strncmp+0x1a>
 8011c22:	42a3      	cmp	r3, r4
 8011c24:	d101      	bne.n	8011c2a <strncmp+0x1e>
 8011c26:	1a80      	subs	r0, r0, r2
 8011c28:	bd10      	pop	{r4, pc}
 8011c2a:	2800      	cmp	r0, #0
 8011c2c:	d1f3      	bne.n	8011c16 <strncmp+0xa>
 8011c2e:	e7fa      	b.n	8011c26 <strncmp+0x1a>
 8011c30:	4610      	mov	r0, r2
 8011c32:	e7f9      	b.n	8011c28 <strncmp+0x1c>

08011c34 <sulp>:
 8011c34:	b570      	push	{r4, r5, r6, lr}
 8011c36:	4604      	mov	r4, r0
 8011c38:	460d      	mov	r5, r1
 8011c3a:	ec45 4b10 	vmov	d0, r4, r5
 8011c3e:	4616      	mov	r6, r2
 8011c40:	f002 fe82 	bl	8014948 <__ulp>
 8011c44:	ec51 0b10 	vmov	r0, r1, d0
 8011c48:	b17e      	cbz	r6, 8011c6a <sulp+0x36>
 8011c4a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011c4e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	dd09      	ble.n	8011c6a <sulp+0x36>
 8011c56:	051b      	lsls	r3, r3, #20
 8011c58:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8011c5c:	2400      	movs	r4, #0
 8011c5e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8011c62:	4622      	mov	r2, r4
 8011c64:	462b      	mov	r3, r5
 8011c66:	f7ee fcdf 	bl	8000628 <__aeabi_dmul>
 8011c6a:	bd70      	pop	{r4, r5, r6, pc}
 8011c6c:	0000      	movs	r0, r0
	...

08011c70 <_strtod_l>:
 8011c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c74:	ed2d 8b02 	vpush	{d8}
 8011c78:	b09d      	sub	sp, #116	; 0x74
 8011c7a:	461f      	mov	r7, r3
 8011c7c:	2300      	movs	r3, #0
 8011c7e:	9318      	str	r3, [sp, #96]	; 0x60
 8011c80:	4ba2      	ldr	r3, [pc, #648]	; (8011f0c <_strtod_l+0x29c>)
 8011c82:	9213      	str	r2, [sp, #76]	; 0x4c
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	9305      	str	r3, [sp, #20]
 8011c88:	4604      	mov	r4, r0
 8011c8a:	4618      	mov	r0, r3
 8011c8c:	4688      	mov	r8, r1
 8011c8e:	f7ee fab1 	bl	80001f4 <strlen>
 8011c92:	f04f 0a00 	mov.w	sl, #0
 8011c96:	4605      	mov	r5, r0
 8011c98:	f04f 0b00 	mov.w	fp, #0
 8011c9c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8011ca0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011ca2:	781a      	ldrb	r2, [r3, #0]
 8011ca4:	2a2b      	cmp	r2, #43	; 0x2b
 8011ca6:	d04e      	beq.n	8011d46 <_strtod_l+0xd6>
 8011ca8:	d83b      	bhi.n	8011d22 <_strtod_l+0xb2>
 8011caa:	2a0d      	cmp	r2, #13
 8011cac:	d834      	bhi.n	8011d18 <_strtod_l+0xa8>
 8011cae:	2a08      	cmp	r2, #8
 8011cb0:	d834      	bhi.n	8011d1c <_strtod_l+0xac>
 8011cb2:	2a00      	cmp	r2, #0
 8011cb4:	d03e      	beq.n	8011d34 <_strtod_l+0xc4>
 8011cb6:	2300      	movs	r3, #0
 8011cb8:	930a      	str	r3, [sp, #40]	; 0x28
 8011cba:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8011cbc:	7833      	ldrb	r3, [r6, #0]
 8011cbe:	2b30      	cmp	r3, #48	; 0x30
 8011cc0:	f040 80b0 	bne.w	8011e24 <_strtod_l+0x1b4>
 8011cc4:	7873      	ldrb	r3, [r6, #1]
 8011cc6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011cca:	2b58      	cmp	r3, #88	; 0x58
 8011ccc:	d168      	bne.n	8011da0 <_strtod_l+0x130>
 8011cce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011cd0:	9301      	str	r3, [sp, #4]
 8011cd2:	ab18      	add	r3, sp, #96	; 0x60
 8011cd4:	9702      	str	r7, [sp, #8]
 8011cd6:	9300      	str	r3, [sp, #0]
 8011cd8:	4a8d      	ldr	r2, [pc, #564]	; (8011f10 <_strtod_l+0x2a0>)
 8011cda:	ab19      	add	r3, sp, #100	; 0x64
 8011cdc:	a917      	add	r1, sp, #92	; 0x5c
 8011cde:	4620      	mov	r0, r4
 8011ce0:	f001 ff3a 	bl	8013b58 <__gethex>
 8011ce4:	f010 0707 	ands.w	r7, r0, #7
 8011ce8:	4605      	mov	r5, r0
 8011cea:	d005      	beq.n	8011cf8 <_strtod_l+0x88>
 8011cec:	2f06      	cmp	r7, #6
 8011cee:	d12c      	bne.n	8011d4a <_strtod_l+0xda>
 8011cf0:	3601      	adds	r6, #1
 8011cf2:	2300      	movs	r3, #0
 8011cf4:	9617      	str	r6, [sp, #92]	; 0x5c
 8011cf6:	930a      	str	r3, [sp, #40]	; 0x28
 8011cf8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	f040 8590 	bne.w	8012820 <_strtod_l+0xbb0>
 8011d00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d02:	b1eb      	cbz	r3, 8011d40 <_strtod_l+0xd0>
 8011d04:	4652      	mov	r2, sl
 8011d06:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011d0a:	ec43 2b10 	vmov	d0, r2, r3
 8011d0e:	b01d      	add	sp, #116	; 0x74
 8011d10:	ecbd 8b02 	vpop	{d8}
 8011d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d18:	2a20      	cmp	r2, #32
 8011d1a:	d1cc      	bne.n	8011cb6 <_strtod_l+0x46>
 8011d1c:	3301      	adds	r3, #1
 8011d1e:	9317      	str	r3, [sp, #92]	; 0x5c
 8011d20:	e7be      	b.n	8011ca0 <_strtod_l+0x30>
 8011d22:	2a2d      	cmp	r2, #45	; 0x2d
 8011d24:	d1c7      	bne.n	8011cb6 <_strtod_l+0x46>
 8011d26:	2201      	movs	r2, #1
 8011d28:	920a      	str	r2, [sp, #40]	; 0x28
 8011d2a:	1c5a      	adds	r2, r3, #1
 8011d2c:	9217      	str	r2, [sp, #92]	; 0x5c
 8011d2e:	785b      	ldrb	r3, [r3, #1]
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d1c2      	bne.n	8011cba <_strtod_l+0x4a>
 8011d34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011d36:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	f040 856e 	bne.w	801281c <_strtod_l+0xbac>
 8011d40:	4652      	mov	r2, sl
 8011d42:	465b      	mov	r3, fp
 8011d44:	e7e1      	b.n	8011d0a <_strtod_l+0x9a>
 8011d46:	2200      	movs	r2, #0
 8011d48:	e7ee      	b.n	8011d28 <_strtod_l+0xb8>
 8011d4a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011d4c:	b13a      	cbz	r2, 8011d5e <_strtod_l+0xee>
 8011d4e:	2135      	movs	r1, #53	; 0x35
 8011d50:	a81a      	add	r0, sp, #104	; 0x68
 8011d52:	f002 ff04 	bl	8014b5e <__copybits>
 8011d56:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011d58:	4620      	mov	r0, r4
 8011d5a:	f002 fac3 	bl	80142e4 <_Bfree>
 8011d5e:	3f01      	subs	r7, #1
 8011d60:	2f04      	cmp	r7, #4
 8011d62:	d806      	bhi.n	8011d72 <_strtod_l+0x102>
 8011d64:	e8df f007 	tbb	[pc, r7]
 8011d68:	1714030a 	.word	0x1714030a
 8011d6c:	0a          	.byte	0x0a
 8011d6d:	00          	.byte	0x00
 8011d6e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8011d72:	0728      	lsls	r0, r5, #28
 8011d74:	d5c0      	bpl.n	8011cf8 <_strtod_l+0x88>
 8011d76:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8011d7a:	e7bd      	b.n	8011cf8 <_strtod_l+0x88>
 8011d7c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8011d80:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8011d82:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8011d86:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8011d8a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8011d8e:	e7f0      	b.n	8011d72 <_strtod_l+0x102>
 8011d90:	f8df b180 	ldr.w	fp, [pc, #384]	; 8011f14 <_strtod_l+0x2a4>
 8011d94:	e7ed      	b.n	8011d72 <_strtod_l+0x102>
 8011d96:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8011d9a:	f04f 3aff 	mov.w	sl, #4294967295
 8011d9e:	e7e8      	b.n	8011d72 <_strtod_l+0x102>
 8011da0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011da2:	1c5a      	adds	r2, r3, #1
 8011da4:	9217      	str	r2, [sp, #92]	; 0x5c
 8011da6:	785b      	ldrb	r3, [r3, #1]
 8011da8:	2b30      	cmp	r3, #48	; 0x30
 8011daa:	d0f9      	beq.n	8011da0 <_strtod_l+0x130>
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d0a3      	beq.n	8011cf8 <_strtod_l+0x88>
 8011db0:	2301      	movs	r3, #1
 8011db2:	f04f 0900 	mov.w	r9, #0
 8011db6:	9304      	str	r3, [sp, #16]
 8011db8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011dba:	9308      	str	r3, [sp, #32]
 8011dbc:	f8cd 901c 	str.w	r9, [sp, #28]
 8011dc0:	464f      	mov	r7, r9
 8011dc2:	220a      	movs	r2, #10
 8011dc4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8011dc6:	7806      	ldrb	r6, [r0, #0]
 8011dc8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8011dcc:	b2d9      	uxtb	r1, r3
 8011dce:	2909      	cmp	r1, #9
 8011dd0:	d92a      	bls.n	8011e28 <_strtod_l+0x1b8>
 8011dd2:	9905      	ldr	r1, [sp, #20]
 8011dd4:	462a      	mov	r2, r5
 8011dd6:	f7ff ff19 	bl	8011c0c <strncmp>
 8011dda:	b398      	cbz	r0, 8011e44 <_strtod_l+0x1d4>
 8011ddc:	2000      	movs	r0, #0
 8011dde:	4632      	mov	r2, r6
 8011de0:	463d      	mov	r5, r7
 8011de2:	9005      	str	r0, [sp, #20]
 8011de4:	4603      	mov	r3, r0
 8011de6:	2a65      	cmp	r2, #101	; 0x65
 8011de8:	d001      	beq.n	8011dee <_strtod_l+0x17e>
 8011dea:	2a45      	cmp	r2, #69	; 0x45
 8011dec:	d118      	bne.n	8011e20 <_strtod_l+0x1b0>
 8011dee:	b91d      	cbnz	r5, 8011df8 <_strtod_l+0x188>
 8011df0:	9a04      	ldr	r2, [sp, #16]
 8011df2:	4302      	orrs	r2, r0
 8011df4:	d09e      	beq.n	8011d34 <_strtod_l+0xc4>
 8011df6:	2500      	movs	r5, #0
 8011df8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8011dfc:	f108 0201 	add.w	r2, r8, #1
 8011e00:	9217      	str	r2, [sp, #92]	; 0x5c
 8011e02:	f898 2001 	ldrb.w	r2, [r8, #1]
 8011e06:	2a2b      	cmp	r2, #43	; 0x2b
 8011e08:	d075      	beq.n	8011ef6 <_strtod_l+0x286>
 8011e0a:	2a2d      	cmp	r2, #45	; 0x2d
 8011e0c:	d07b      	beq.n	8011f06 <_strtod_l+0x296>
 8011e0e:	f04f 0c00 	mov.w	ip, #0
 8011e12:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8011e16:	2909      	cmp	r1, #9
 8011e18:	f240 8082 	bls.w	8011f20 <_strtod_l+0x2b0>
 8011e1c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8011e20:	2600      	movs	r6, #0
 8011e22:	e09d      	b.n	8011f60 <_strtod_l+0x2f0>
 8011e24:	2300      	movs	r3, #0
 8011e26:	e7c4      	b.n	8011db2 <_strtod_l+0x142>
 8011e28:	2f08      	cmp	r7, #8
 8011e2a:	bfd8      	it	le
 8011e2c:	9907      	ldrle	r1, [sp, #28]
 8011e2e:	f100 0001 	add.w	r0, r0, #1
 8011e32:	bfda      	itte	le
 8011e34:	fb02 3301 	mlale	r3, r2, r1, r3
 8011e38:	9307      	strle	r3, [sp, #28]
 8011e3a:	fb02 3909 	mlagt	r9, r2, r9, r3
 8011e3e:	3701      	adds	r7, #1
 8011e40:	9017      	str	r0, [sp, #92]	; 0x5c
 8011e42:	e7bf      	b.n	8011dc4 <_strtod_l+0x154>
 8011e44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011e46:	195a      	adds	r2, r3, r5
 8011e48:	9217      	str	r2, [sp, #92]	; 0x5c
 8011e4a:	5d5a      	ldrb	r2, [r3, r5]
 8011e4c:	2f00      	cmp	r7, #0
 8011e4e:	d037      	beq.n	8011ec0 <_strtod_l+0x250>
 8011e50:	9005      	str	r0, [sp, #20]
 8011e52:	463d      	mov	r5, r7
 8011e54:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8011e58:	2b09      	cmp	r3, #9
 8011e5a:	d912      	bls.n	8011e82 <_strtod_l+0x212>
 8011e5c:	2301      	movs	r3, #1
 8011e5e:	e7c2      	b.n	8011de6 <_strtod_l+0x176>
 8011e60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011e62:	1c5a      	adds	r2, r3, #1
 8011e64:	9217      	str	r2, [sp, #92]	; 0x5c
 8011e66:	785a      	ldrb	r2, [r3, #1]
 8011e68:	3001      	adds	r0, #1
 8011e6a:	2a30      	cmp	r2, #48	; 0x30
 8011e6c:	d0f8      	beq.n	8011e60 <_strtod_l+0x1f0>
 8011e6e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8011e72:	2b08      	cmp	r3, #8
 8011e74:	f200 84d9 	bhi.w	801282a <_strtod_l+0xbba>
 8011e78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011e7a:	9005      	str	r0, [sp, #20]
 8011e7c:	2000      	movs	r0, #0
 8011e7e:	9308      	str	r3, [sp, #32]
 8011e80:	4605      	mov	r5, r0
 8011e82:	3a30      	subs	r2, #48	; 0x30
 8011e84:	f100 0301 	add.w	r3, r0, #1
 8011e88:	d014      	beq.n	8011eb4 <_strtod_l+0x244>
 8011e8a:	9905      	ldr	r1, [sp, #20]
 8011e8c:	4419      	add	r1, r3
 8011e8e:	9105      	str	r1, [sp, #20]
 8011e90:	462b      	mov	r3, r5
 8011e92:	eb00 0e05 	add.w	lr, r0, r5
 8011e96:	210a      	movs	r1, #10
 8011e98:	4573      	cmp	r3, lr
 8011e9a:	d113      	bne.n	8011ec4 <_strtod_l+0x254>
 8011e9c:	182b      	adds	r3, r5, r0
 8011e9e:	2b08      	cmp	r3, #8
 8011ea0:	f105 0501 	add.w	r5, r5, #1
 8011ea4:	4405      	add	r5, r0
 8011ea6:	dc1c      	bgt.n	8011ee2 <_strtod_l+0x272>
 8011ea8:	9907      	ldr	r1, [sp, #28]
 8011eaa:	230a      	movs	r3, #10
 8011eac:	fb03 2301 	mla	r3, r3, r1, r2
 8011eb0:	9307      	str	r3, [sp, #28]
 8011eb2:	2300      	movs	r3, #0
 8011eb4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011eb6:	1c51      	adds	r1, r2, #1
 8011eb8:	9117      	str	r1, [sp, #92]	; 0x5c
 8011eba:	7852      	ldrb	r2, [r2, #1]
 8011ebc:	4618      	mov	r0, r3
 8011ebe:	e7c9      	b.n	8011e54 <_strtod_l+0x1e4>
 8011ec0:	4638      	mov	r0, r7
 8011ec2:	e7d2      	b.n	8011e6a <_strtod_l+0x1fa>
 8011ec4:	2b08      	cmp	r3, #8
 8011ec6:	dc04      	bgt.n	8011ed2 <_strtod_l+0x262>
 8011ec8:	9e07      	ldr	r6, [sp, #28]
 8011eca:	434e      	muls	r6, r1
 8011ecc:	9607      	str	r6, [sp, #28]
 8011ece:	3301      	adds	r3, #1
 8011ed0:	e7e2      	b.n	8011e98 <_strtod_l+0x228>
 8011ed2:	f103 0c01 	add.w	ip, r3, #1
 8011ed6:	f1bc 0f10 	cmp.w	ip, #16
 8011eda:	bfd8      	it	le
 8011edc:	fb01 f909 	mulle.w	r9, r1, r9
 8011ee0:	e7f5      	b.n	8011ece <_strtod_l+0x25e>
 8011ee2:	2d10      	cmp	r5, #16
 8011ee4:	bfdc      	itt	le
 8011ee6:	230a      	movle	r3, #10
 8011ee8:	fb03 2909 	mlale	r9, r3, r9, r2
 8011eec:	e7e1      	b.n	8011eb2 <_strtod_l+0x242>
 8011eee:	2300      	movs	r3, #0
 8011ef0:	9305      	str	r3, [sp, #20]
 8011ef2:	2301      	movs	r3, #1
 8011ef4:	e77c      	b.n	8011df0 <_strtod_l+0x180>
 8011ef6:	f04f 0c00 	mov.w	ip, #0
 8011efa:	f108 0202 	add.w	r2, r8, #2
 8011efe:	9217      	str	r2, [sp, #92]	; 0x5c
 8011f00:	f898 2002 	ldrb.w	r2, [r8, #2]
 8011f04:	e785      	b.n	8011e12 <_strtod_l+0x1a2>
 8011f06:	f04f 0c01 	mov.w	ip, #1
 8011f0a:	e7f6      	b.n	8011efa <_strtod_l+0x28a>
 8011f0c:	080191c0 	.word	0x080191c0
 8011f10:	08019014 	.word	0x08019014
 8011f14:	7ff00000 	.word	0x7ff00000
 8011f18:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011f1a:	1c51      	adds	r1, r2, #1
 8011f1c:	9117      	str	r1, [sp, #92]	; 0x5c
 8011f1e:	7852      	ldrb	r2, [r2, #1]
 8011f20:	2a30      	cmp	r2, #48	; 0x30
 8011f22:	d0f9      	beq.n	8011f18 <_strtod_l+0x2a8>
 8011f24:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8011f28:	2908      	cmp	r1, #8
 8011f2a:	f63f af79 	bhi.w	8011e20 <_strtod_l+0x1b0>
 8011f2e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8011f32:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011f34:	9206      	str	r2, [sp, #24]
 8011f36:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011f38:	1c51      	adds	r1, r2, #1
 8011f3a:	9117      	str	r1, [sp, #92]	; 0x5c
 8011f3c:	7852      	ldrb	r2, [r2, #1]
 8011f3e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8011f42:	2e09      	cmp	r6, #9
 8011f44:	d937      	bls.n	8011fb6 <_strtod_l+0x346>
 8011f46:	9e06      	ldr	r6, [sp, #24]
 8011f48:	1b89      	subs	r1, r1, r6
 8011f4a:	2908      	cmp	r1, #8
 8011f4c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8011f50:	dc02      	bgt.n	8011f58 <_strtod_l+0x2e8>
 8011f52:	4576      	cmp	r6, lr
 8011f54:	bfa8      	it	ge
 8011f56:	4676      	movge	r6, lr
 8011f58:	f1bc 0f00 	cmp.w	ip, #0
 8011f5c:	d000      	beq.n	8011f60 <_strtod_l+0x2f0>
 8011f5e:	4276      	negs	r6, r6
 8011f60:	2d00      	cmp	r5, #0
 8011f62:	d14d      	bne.n	8012000 <_strtod_l+0x390>
 8011f64:	9904      	ldr	r1, [sp, #16]
 8011f66:	4301      	orrs	r1, r0
 8011f68:	f47f aec6 	bne.w	8011cf8 <_strtod_l+0x88>
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	f47f aee1 	bne.w	8011d34 <_strtod_l+0xc4>
 8011f72:	2a69      	cmp	r2, #105	; 0x69
 8011f74:	d027      	beq.n	8011fc6 <_strtod_l+0x356>
 8011f76:	dc24      	bgt.n	8011fc2 <_strtod_l+0x352>
 8011f78:	2a49      	cmp	r2, #73	; 0x49
 8011f7a:	d024      	beq.n	8011fc6 <_strtod_l+0x356>
 8011f7c:	2a4e      	cmp	r2, #78	; 0x4e
 8011f7e:	f47f aed9 	bne.w	8011d34 <_strtod_l+0xc4>
 8011f82:	499f      	ldr	r1, [pc, #636]	; (8012200 <_strtod_l+0x590>)
 8011f84:	a817      	add	r0, sp, #92	; 0x5c
 8011f86:	f002 f83f 	bl	8014008 <__match>
 8011f8a:	2800      	cmp	r0, #0
 8011f8c:	f43f aed2 	beq.w	8011d34 <_strtod_l+0xc4>
 8011f90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011f92:	781b      	ldrb	r3, [r3, #0]
 8011f94:	2b28      	cmp	r3, #40	; 0x28
 8011f96:	d12d      	bne.n	8011ff4 <_strtod_l+0x384>
 8011f98:	499a      	ldr	r1, [pc, #616]	; (8012204 <_strtod_l+0x594>)
 8011f9a:	aa1a      	add	r2, sp, #104	; 0x68
 8011f9c:	a817      	add	r0, sp, #92	; 0x5c
 8011f9e:	f002 f847 	bl	8014030 <__hexnan>
 8011fa2:	2805      	cmp	r0, #5
 8011fa4:	d126      	bne.n	8011ff4 <_strtod_l+0x384>
 8011fa6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011fa8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8011fac:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8011fb0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8011fb4:	e6a0      	b.n	8011cf8 <_strtod_l+0x88>
 8011fb6:	210a      	movs	r1, #10
 8011fb8:	fb01 2e0e 	mla	lr, r1, lr, r2
 8011fbc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8011fc0:	e7b9      	b.n	8011f36 <_strtod_l+0x2c6>
 8011fc2:	2a6e      	cmp	r2, #110	; 0x6e
 8011fc4:	e7db      	b.n	8011f7e <_strtod_l+0x30e>
 8011fc6:	4990      	ldr	r1, [pc, #576]	; (8012208 <_strtod_l+0x598>)
 8011fc8:	a817      	add	r0, sp, #92	; 0x5c
 8011fca:	f002 f81d 	bl	8014008 <__match>
 8011fce:	2800      	cmp	r0, #0
 8011fd0:	f43f aeb0 	beq.w	8011d34 <_strtod_l+0xc4>
 8011fd4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011fd6:	498d      	ldr	r1, [pc, #564]	; (801220c <_strtod_l+0x59c>)
 8011fd8:	3b01      	subs	r3, #1
 8011fda:	a817      	add	r0, sp, #92	; 0x5c
 8011fdc:	9317      	str	r3, [sp, #92]	; 0x5c
 8011fde:	f002 f813 	bl	8014008 <__match>
 8011fe2:	b910      	cbnz	r0, 8011fea <_strtod_l+0x37a>
 8011fe4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011fe6:	3301      	adds	r3, #1
 8011fe8:	9317      	str	r3, [sp, #92]	; 0x5c
 8011fea:	f8df b230 	ldr.w	fp, [pc, #560]	; 801221c <_strtod_l+0x5ac>
 8011fee:	f04f 0a00 	mov.w	sl, #0
 8011ff2:	e681      	b.n	8011cf8 <_strtod_l+0x88>
 8011ff4:	4886      	ldr	r0, [pc, #536]	; (8012210 <_strtod_l+0x5a0>)
 8011ff6:	f003 f8c3 	bl	8015180 <nan>
 8011ffa:	ec5b ab10 	vmov	sl, fp, d0
 8011ffe:	e67b      	b.n	8011cf8 <_strtod_l+0x88>
 8012000:	9b05      	ldr	r3, [sp, #20]
 8012002:	9807      	ldr	r0, [sp, #28]
 8012004:	1af3      	subs	r3, r6, r3
 8012006:	2f00      	cmp	r7, #0
 8012008:	bf08      	it	eq
 801200a:	462f      	moveq	r7, r5
 801200c:	2d10      	cmp	r5, #16
 801200e:	9306      	str	r3, [sp, #24]
 8012010:	46a8      	mov	r8, r5
 8012012:	bfa8      	it	ge
 8012014:	f04f 0810 	movge.w	r8, #16
 8012018:	f7ee fa8c 	bl	8000534 <__aeabi_ui2d>
 801201c:	2d09      	cmp	r5, #9
 801201e:	4682      	mov	sl, r0
 8012020:	468b      	mov	fp, r1
 8012022:	dd13      	ble.n	801204c <_strtod_l+0x3dc>
 8012024:	4b7b      	ldr	r3, [pc, #492]	; (8012214 <_strtod_l+0x5a4>)
 8012026:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801202a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801202e:	f7ee fafb 	bl	8000628 <__aeabi_dmul>
 8012032:	4682      	mov	sl, r0
 8012034:	4648      	mov	r0, r9
 8012036:	468b      	mov	fp, r1
 8012038:	f7ee fa7c 	bl	8000534 <__aeabi_ui2d>
 801203c:	4602      	mov	r2, r0
 801203e:	460b      	mov	r3, r1
 8012040:	4650      	mov	r0, sl
 8012042:	4659      	mov	r1, fp
 8012044:	f7ee f93a 	bl	80002bc <__adddf3>
 8012048:	4682      	mov	sl, r0
 801204a:	468b      	mov	fp, r1
 801204c:	2d0f      	cmp	r5, #15
 801204e:	dc38      	bgt.n	80120c2 <_strtod_l+0x452>
 8012050:	9b06      	ldr	r3, [sp, #24]
 8012052:	2b00      	cmp	r3, #0
 8012054:	f43f ae50 	beq.w	8011cf8 <_strtod_l+0x88>
 8012058:	dd24      	ble.n	80120a4 <_strtod_l+0x434>
 801205a:	2b16      	cmp	r3, #22
 801205c:	dc0b      	bgt.n	8012076 <_strtod_l+0x406>
 801205e:	496d      	ldr	r1, [pc, #436]	; (8012214 <_strtod_l+0x5a4>)
 8012060:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012064:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012068:	4652      	mov	r2, sl
 801206a:	465b      	mov	r3, fp
 801206c:	f7ee fadc 	bl	8000628 <__aeabi_dmul>
 8012070:	4682      	mov	sl, r0
 8012072:	468b      	mov	fp, r1
 8012074:	e640      	b.n	8011cf8 <_strtod_l+0x88>
 8012076:	9a06      	ldr	r2, [sp, #24]
 8012078:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801207c:	4293      	cmp	r3, r2
 801207e:	db20      	blt.n	80120c2 <_strtod_l+0x452>
 8012080:	4c64      	ldr	r4, [pc, #400]	; (8012214 <_strtod_l+0x5a4>)
 8012082:	f1c5 050f 	rsb	r5, r5, #15
 8012086:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801208a:	4652      	mov	r2, sl
 801208c:	465b      	mov	r3, fp
 801208e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012092:	f7ee fac9 	bl	8000628 <__aeabi_dmul>
 8012096:	9b06      	ldr	r3, [sp, #24]
 8012098:	1b5d      	subs	r5, r3, r5
 801209a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801209e:	e9d4 2300 	ldrd	r2, r3, [r4]
 80120a2:	e7e3      	b.n	801206c <_strtod_l+0x3fc>
 80120a4:	9b06      	ldr	r3, [sp, #24]
 80120a6:	3316      	adds	r3, #22
 80120a8:	db0b      	blt.n	80120c2 <_strtod_l+0x452>
 80120aa:	9b05      	ldr	r3, [sp, #20]
 80120ac:	1b9e      	subs	r6, r3, r6
 80120ae:	4b59      	ldr	r3, [pc, #356]	; (8012214 <_strtod_l+0x5a4>)
 80120b0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80120b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80120b8:	4650      	mov	r0, sl
 80120ba:	4659      	mov	r1, fp
 80120bc:	f7ee fbde 	bl	800087c <__aeabi_ddiv>
 80120c0:	e7d6      	b.n	8012070 <_strtod_l+0x400>
 80120c2:	9b06      	ldr	r3, [sp, #24]
 80120c4:	eba5 0808 	sub.w	r8, r5, r8
 80120c8:	4498      	add	r8, r3
 80120ca:	f1b8 0f00 	cmp.w	r8, #0
 80120ce:	dd74      	ble.n	80121ba <_strtod_l+0x54a>
 80120d0:	f018 030f 	ands.w	r3, r8, #15
 80120d4:	d00a      	beq.n	80120ec <_strtod_l+0x47c>
 80120d6:	494f      	ldr	r1, [pc, #316]	; (8012214 <_strtod_l+0x5a4>)
 80120d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80120dc:	4652      	mov	r2, sl
 80120de:	465b      	mov	r3, fp
 80120e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80120e4:	f7ee faa0 	bl	8000628 <__aeabi_dmul>
 80120e8:	4682      	mov	sl, r0
 80120ea:	468b      	mov	fp, r1
 80120ec:	f038 080f 	bics.w	r8, r8, #15
 80120f0:	d04f      	beq.n	8012192 <_strtod_l+0x522>
 80120f2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80120f6:	dd22      	ble.n	801213e <_strtod_l+0x4ce>
 80120f8:	2500      	movs	r5, #0
 80120fa:	462e      	mov	r6, r5
 80120fc:	9507      	str	r5, [sp, #28]
 80120fe:	9505      	str	r5, [sp, #20]
 8012100:	2322      	movs	r3, #34	; 0x22
 8012102:	f8df b118 	ldr.w	fp, [pc, #280]	; 801221c <_strtod_l+0x5ac>
 8012106:	6023      	str	r3, [r4, #0]
 8012108:	f04f 0a00 	mov.w	sl, #0
 801210c:	9b07      	ldr	r3, [sp, #28]
 801210e:	2b00      	cmp	r3, #0
 8012110:	f43f adf2 	beq.w	8011cf8 <_strtod_l+0x88>
 8012114:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012116:	4620      	mov	r0, r4
 8012118:	f002 f8e4 	bl	80142e4 <_Bfree>
 801211c:	9905      	ldr	r1, [sp, #20]
 801211e:	4620      	mov	r0, r4
 8012120:	f002 f8e0 	bl	80142e4 <_Bfree>
 8012124:	4631      	mov	r1, r6
 8012126:	4620      	mov	r0, r4
 8012128:	f002 f8dc 	bl	80142e4 <_Bfree>
 801212c:	9907      	ldr	r1, [sp, #28]
 801212e:	4620      	mov	r0, r4
 8012130:	f002 f8d8 	bl	80142e4 <_Bfree>
 8012134:	4629      	mov	r1, r5
 8012136:	4620      	mov	r0, r4
 8012138:	f002 f8d4 	bl	80142e4 <_Bfree>
 801213c:	e5dc      	b.n	8011cf8 <_strtod_l+0x88>
 801213e:	4b36      	ldr	r3, [pc, #216]	; (8012218 <_strtod_l+0x5a8>)
 8012140:	9304      	str	r3, [sp, #16]
 8012142:	2300      	movs	r3, #0
 8012144:	ea4f 1828 	mov.w	r8, r8, asr #4
 8012148:	4650      	mov	r0, sl
 801214a:	4659      	mov	r1, fp
 801214c:	4699      	mov	r9, r3
 801214e:	f1b8 0f01 	cmp.w	r8, #1
 8012152:	dc21      	bgt.n	8012198 <_strtod_l+0x528>
 8012154:	b10b      	cbz	r3, 801215a <_strtod_l+0x4ea>
 8012156:	4682      	mov	sl, r0
 8012158:	468b      	mov	fp, r1
 801215a:	4b2f      	ldr	r3, [pc, #188]	; (8012218 <_strtod_l+0x5a8>)
 801215c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8012160:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8012164:	4652      	mov	r2, sl
 8012166:	465b      	mov	r3, fp
 8012168:	e9d9 0100 	ldrd	r0, r1, [r9]
 801216c:	f7ee fa5c 	bl	8000628 <__aeabi_dmul>
 8012170:	4b2a      	ldr	r3, [pc, #168]	; (801221c <_strtod_l+0x5ac>)
 8012172:	460a      	mov	r2, r1
 8012174:	400b      	ands	r3, r1
 8012176:	492a      	ldr	r1, [pc, #168]	; (8012220 <_strtod_l+0x5b0>)
 8012178:	428b      	cmp	r3, r1
 801217a:	4682      	mov	sl, r0
 801217c:	d8bc      	bhi.n	80120f8 <_strtod_l+0x488>
 801217e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8012182:	428b      	cmp	r3, r1
 8012184:	bf86      	itte	hi
 8012186:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8012224 <_strtod_l+0x5b4>
 801218a:	f04f 3aff 	movhi.w	sl, #4294967295
 801218e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8012192:	2300      	movs	r3, #0
 8012194:	9304      	str	r3, [sp, #16]
 8012196:	e084      	b.n	80122a2 <_strtod_l+0x632>
 8012198:	f018 0f01 	tst.w	r8, #1
 801219c:	d005      	beq.n	80121aa <_strtod_l+0x53a>
 801219e:	9b04      	ldr	r3, [sp, #16]
 80121a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121a4:	f7ee fa40 	bl	8000628 <__aeabi_dmul>
 80121a8:	2301      	movs	r3, #1
 80121aa:	9a04      	ldr	r2, [sp, #16]
 80121ac:	3208      	adds	r2, #8
 80121ae:	f109 0901 	add.w	r9, r9, #1
 80121b2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80121b6:	9204      	str	r2, [sp, #16]
 80121b8:	e7c9      	b.n	801214e <_strtod_l+0x4de>
 80121ba:	d0ea      	beq.n	8012192 <_strtod_l+0x522>
 80121bc:	f1c8 0800 	rsb	r8, r8, #0
 80121c0:	f018 020f 	ands.w	r2, r8, #15
 80121c4:	d00a      	beq.n	80121dc <_strtod_l+0x56c>
 80121c6:	4b13      	ldr	r3, [pc, #76]	; (8012214 <_strtod_l+0x5a4>)
 80121c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80121cc:	4650      	mov	r0, sl
 80121ce:	4659      	mov	r1, fp
 80121d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121d4:	f7ee fb52 	bl	800087c <__aeabi_ddiv>
 80121d8:	4682      	mov	sl, r0
 80121da:	468b      	mov	fp, r1
 80121dc:	ea5f 1828 	movs.w	r8, r8, asr #4
 80121e0:	d0d7      	beq.n	8012192 <_strtod_l+0x522>
 80121e2:	f1b8 0f1f 	cmp.w	r8, #31
 80121e6:	dd1f      	ble.n	8012228 <_strtod_l+0x5b8>
 80121e8:	2500      	movs	r5, #0
 80121ea:	462e      	mov	r6, r5
 80121ec:	9507      	str	r5, [sp, #28]
 80121ee:	9505      	str	r5, [sp, #20]
 80121f0:	2322      	movs	r3, #34	; 0x22
 80121f2:	f04f 0a00 	mov.w	sl, #0
 80121f6:	f04f 0b00 	mov.w	fp, #0
 80121fa:	6023      	str	r3, [r4, #0]
 80121fc:	e786      	b.n	801210c <_strtod_l+0x49c>
 80121fe:	bf00      	nop
 8012200:	08018fed 	.word	0x08018fed
 8012204:	08019028 	.word	0x08019028
 8012208:	08018fe5 	.word	0x08018fe5
 801220c:	080190e3 	.word	0x080190e3
 8012210:	080190df 	.word	0x080190df
 8012214:	080192b8 	.word	0x080192b8
 8012218:	08019290 	.word	0x08019290
 801221c:	7ff00000 	.word	0x7ff00000
 8012220:	7ca00000 	.word	0x7ca00000
 8012224:	7fefffff 	.word	0x7fefffff
 8012228:	f018 0310 	ands.w	r3, r8, #16
 801222c:	bf18      	it	ne
 801222e:	236a      	movne	r3, #106	; 0x6a
 8012230:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80125e0 <_strtod_l+0x970>
 8012234:	9304      	str	r3, [sp, #16]
 8012236:	4650      	mov	r0, sl
 8012238:	4659      	mov	r1, fp
 801223a:	2300      	movs	r3, #0
 801223c:	f018 0f01 	tst.w	r8, #1
 8012240:	d004      	beq.n	801224c <_strtod_l+0x5dc>
 8012242:	e9d9 2300 	ldrd	r2, r3, [r9]
 8012246:	f7ee f9ef 	bl	8000628 <__aeabi_dmul>
 801224a:	2301      	movs	r3, #1
 801224c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8012250:	f109 0908 	add.w	r9, r9, #8
 8012254:	d1f2      	bne.n	801223c <_strtod_l+0x5cc>
 8012256:	b10b      	cbz	r3, 801225c <_strtod_l+0x5ec>
 8012258:	4682      	mov	sl, r0
 801225a:	468b      	mov	fp, r1
 801225c:	9b04      	ldr	r3, [sp, #16]
 801225e:	b1c3      	cbz	r3, 8012292 <_strtod_l+0x622>
 8012260:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8012264:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8012268:	2b00      	cmp	r3, #0
 801226a:	4659      	mov	r1, fp
 801226c:	dd11      	ble.n	8012292 <_strtod_l+0x622>
 801226e:	2b1f      	cmp	r3, #31
 8012270:	f340 8124 	ble.w	80124bc <_strtod_l+0x84c>
 8012274:	2b34      	cmp	r3, #52	; 0x34
 8012276:	bfde      	ittt	le
 8012278:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801227c:	f04f 33ff 	movle.w	r3, #4294967295
 8012280:	fa03 f202 	lslle.w	r2, r3, r2
 8012284:	f04f 0a00 	mov.w	sl, #0
 8012288:	bfcc      	ite	gt
 801228a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801228e:	ea02 0b01 	andle.w	fp, r2, r1
 8012292:	2200      	movs	r2, #0
 8012294:	2300      	movs	r3, #0
 8012296:	4650      	mov	r0, sl
 8012298:	4659      	mov	r1, fp
 801229a:	f7ee fc2d 	bl	8000af8 <__aeabi_dcmpeq>
 801229e:	2800      	cmp	r0, #0
 80122a0:	d1a2      	bne.n	80121e8 <_strtod_l+0x578>
 80122a2:	9b07      	ldr	r3, [sp, #28]
 80122a4:	9300      	str	r3, [sp, #0]
 80122a6:	9908      	ldr	r1, [sp, #32]
 80122a8:	462b      	mov	r3, r5
 80122aa:	463a      	mov	r2, r7
 80122ac:	4620      	mov	r0, r4
 80122ae:	f002 f881 	bl	80143b4 <__s2b>
 80122b2:	9007      	str	r0, [sp, #28]
 80122b4:	2800      	cmp	r0, #0
 80122b6:	f43f af1f 	beq.w	80120f8 <_strtod_l+0x488>
 80122ba:	9b05      	ldr	r3, [sp, #20]
 80122bc:	1b9e      	subs	r6, r3, r6
 80122be:	9b06      	ldr	r3, [sp, #24]
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	bfb4      	ite	lt
 80122c4:	4633      	movlt	r3, r6
 80122c6:	2300      	movge	r3, #0
 80122c8:	930c      	str	r3, [sp, #48]	; 0x30
 80122ca:	9b06      	ldr	r3, [sp, #24]
 80122cc:	2500      	movs	r5, #0
 80122ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80122d2:	9312      	str	r3, [sp, #72]	; 0x48
 80122d4:	462e      	mov	r6, r5
 80122d6:	9b07      	ldr	r3, [sp, #28]
 80122d8:	4620      	mov	r0, r4
 80122da:	6859      	ldr	r1, [r3, #4]
 80122dc:	f001 ffc2 	bl	8014264 <_Balloc>
 80122e0:	9005      	str	r0, [sp, #20]
 80122e2:	2800      	cmp	r0, #0
 80122e4:	f43f af0c 	beq.w	8012100 <_strtod_l+0x490>
 80122e8:	9b07      	ldr	r3, [sp, #28]
 80122ea:	691a      	ldr	r2, [r3, #16]
 80122ec:	3202      	adds	r2, #2
 80122ee:	f103 010c 	add.w	r1, r3, #12
 80122f2:	0092      	lsls	r2, r2, #2
 80122f4:	300c      	adds	r0, #12
 80122f6:	f001 ff9a 	bl	801422e <memcpy>
 80122fa:	ec4b ab10 	vmov	d0, sl, fp
 80122fe:	aa1a      	add	r2, sp, #104	; 0x68
 8012300:	a919      	add	r1, sp, #100	; 0x64
 8012302:	4620      	mov	r0, r4
 8012304:	f002 fb9c 	bl	8014a40 <__d2b>
 8012308:	ec4b ab18 	vmov	d8, sl, fp
 801230c:	9018      	str	r0, [sp, #96]	; 0x60
 801230e:	2800      	cmp	r0, #0
 8012310:	f43f aef6 	beq.w	8012100 <_strtod_l+0x490>
 8012314:	2101      	movs	r1, #1
 8012316:	4620      	mov	r0, r4
 8012318:	f002 f8e6 	bl	80144e8 <__i2b>
 801231c:	4606      	mov	r6, r0
 801231e:	2800      	cmp	r0, #0
 8012320:	f43f aeee 	beq.w	8012100 <_strtod_l+0x490>
 8012324:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012326:	9904      	ldr	r1, [sp, #16]
 8012328:	2b00      	cmp	r3, #0
 801232a:	bfab      	itete	ge
 801232c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801232e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8012330:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8012332:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8012336:	bfac      	ite	ge
 8012338:	eb03 0902 	addge.w	r9, r3, r2
 801233c:	1ad7      	sublt	r7, r2, r3
 801233e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8012340:	eba3 0801 	sub.w	r8, r3, r1
 8012344:	4490      	add	r8, r2
 8012346:	4ba1      	ldr	r3, [pc, #644]	; (80125cc <_strtod_l+0x95c>)
 8012348:	f108 38ff 	add.w	r8, r8, #4294967295
 801234c:	4598      	cmp	r8, r3
 801234e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8012352:	f280 80c7 	bge.w	80124e4 <_strtod_l+0x874>
 8012356:	eba3 0308 	sub.w	r3, r3, r8
 801235a:	2b1f      	cmp	r3, #31
 801235c:	eba2 0203 	sub.w	r2, r2, r3
 8012360:	f04f 0101 	mov.w	r1, #1
 8012364:	f300 80b1 	bgt.w	80124ca <_strtod_l+0x85a>
 8012368:	fa01 f303 	lsl.w	r3, r1, r3
 801236c:	930d      	str	r3, [sp, #52]	; 0x34
 801236e:	2300      	movs	r3, #0
 8012370:	9308      	str	r3, [sp, #32]
 8012372:	eb09 0802 	add.w	r8, r9, r2
 8012376:	9b04      	ldr	r3, [sp, #16]
 8012378:	45c1      	cmp	r9, r8
 801237a:	4417      	add	r7, r2
 801237c:	441f      	add	r7, r3
 801237e:	464b      	mov	r3, r9
 8012380:	bfa8      	it	ge
 8012382:	4643      	movge	r3, r8
 8012384:	42bb      	cmp	r3, r7
 8012386:	bfa8      	it	ge
 8012388:	463b      	movge	r3, r7
 801238a:	2b00      	cmp	r3, #0
 801238c:	bfc2      	ittt	gt
 801238e:	eba8 0803 	subgt.w	r8, r8, r3
 8012392:	1aff      	subgt	r7, r7, r3
 8012394:	eba9 0903 	subgt.w	r9, r9, r3
 8012398:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801239a:	2b00      	cmp	r3, #0
 801239c:	dd17      	ble.n	80123ce <_strtod_l+0x75e>
 801239e:	4631      	mov	r1, r6
 80123a0:	461a      	mov	r2, r3
 80123a2:	4620      	mov	r0, r4
 80123a4:	f002 f960 	bl	8014668 <__pow5mult>
 80123a8:	4606      	mov	r6, r0
 80123aa:	2800      	cmp	r0, #0
 80123ac:	f43f aea8 	beq.w	8012100 <_strtod_l+0x490>
 80123b0:	4601      	mov	r1, r0
 80123b2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80123b4:	4620      	mov	r0, r4
 80123b6:	f002 f8ad 	bl	8014514 <__multiply>
 80123ba:	900b      	str	r0, [sp, #44]	; 0x2c
 80123bc:	2800      	cmp	r0, #0
 80123be:	f43f ae9f 	beq.w	8012100 <_strtod_l+0x490>
 80123c2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80123c4:	4620      	mov	r0, r4
 80123c6:	f001 ff8d 	bl	80142e4 <_Bfree>
 80123ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80123cc:	9318      	str	r3, [sp, #96]	; 0x60
 80123ce:	f1b8 0f00 	cmp.w	r8, #0
 80123d2:	f300 808c 	bgt.w	80124ee <_strtod_l+0x87e>
 80123d6:	9b06      	ldr	r3, [sp, #24]
 80123d8:	2b00      	cmp	r3, #0
 80123da:	dd08      	ble.n	80123ee <_strtod_l+0x77e>
 80123dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80123de:	9905      	ldr	r1, [sp, #20]
 80123e0:	4620      	mov	r0, r4
 80123e2:	f002 f941 	bl	8014668 <__pow5mult>
 80123e6:	9005      	str	r0, [sp, #20]
 80123e8:	2800      	cmp	r0, #0
 80123ea:	f43f ae89 	beq.w	8012100 <_strtod_l+0x490>
 80123ee:	2f00      	cmp	r7, #0
 80123f0:	dd08      	ble.n	8012404 <_strtod_l+0x794>
 80123f2:	9905      	ldr	r1, [sp, #20]
 80123f4:	463a      	mov	r2, r7
 80123f6:	4620      	mov	r0, r4
 80123f8:	f002 f990 	bl	801471c <__lshift>
 80123fc:	9005      	str	r0, [sp, #20]
 80123fe:	2800      	cmp	r0, #0
 8012400:	f43f ae7e 	beq.w	8012100 <_strtod_l+0x490>
 8012404:	f1b9 0f00 	cmp.w	r9, #0
 8012408:	dd08      	ble.n	801241c <_strtod_l+0x7ac>
 801240a:	4631      	mov	r1, r6
 801240c:	464a      	mov	r2, r9
 801240e:	4620      	mov	r0, r4
 8012410:	f002 f984 	bl	801471c <__lshift>
 8012414:	4606      	mov	r6, r0
 8012416:	2800      	cmp	r0, #0
 8012418:	f43f ae72 	beq.w	8012100 <_strtod_l+0x490>
 801241c:	9a05      	ldr	r2, [sp, #20]
 801241e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012420:	4620      	mov	r0, r4
 8012422:	f002 fa07 	bl	8014834 <__mdiff>
 8012426:	4605      	mov	r5, r0
 8012428:	2800      	cmp	r0, #0
 801242a:	f43f ae69 	beq.w	8012100 <_strtod_l+0x490>
 801242e:	68c3      	ldr	r3, [r0, #12]
 8012430:	930b      	str	r3, [sp, #44]	; 0x2c
 8012432:	2300      	movs	r3, #0
 8012434:	60c3      	str	r3, [r0, #12]
 8012436:	4631      	mov	r1, r6
 8012438:	f002 f9e0 	bl	80147fc <__mcmp>
 801243c:	2800      	cmp	r0, #0
 801243e:	da60      	bge.n	8012502 <_strtod_l+0x892>
 8012440:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012442:	ea53 030a 	orrs.w	r3, r3, sl
 8012446:	f040 8082 	bne.w	801254e <_strtod_l+0x8de>
 801244a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801244e:	2b00      	cmp	r3, #0
 8012450:	d17d      	bne.n	801254e <_strtod_l+0x8de>
 8012452:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012456:	0d1b      	lsrs	r3, r3, #20
 8012458:	051b      	lsls	r3, r3, #20
 801245a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801245e:	d976      	bls.n	801254e <_strtod_l+0x8de>
 8012460:	696b      	ldr	r3, [r5, #20]
 8012462:	b913      	cbnz	r3, 801246a <_strtod_l+0x7fa>
 8012464:	692b      	ldr	r3, [r5, #16]
 8012466:	2b01      	cmp	r3, #1
 8012468:	dd71      	ble.n	801254e <_strtod_l+0x8de>
 801246a:	4629      	mov	r1, r5
 801246c:	2201      	movs	r2, #1
 801246e:	4620      	mov	r0, r4
 8012470:	f002 f954 	bl	801471c <__lshift>
 8012474:	4631      	mov	r1, r6
 8012476:	4605      	mov	r5, r0
 8012478:	f002 f9c0 	bl	80147fc <__mcmp>
 801247c:	2800      	cmp	r0, #0
 801247e:	dd66      	ble.n	801254e <_strtod_l+0x8de>
 8012480:	9904      	ldr	r1, [sp, #16]
 8012482:	4a53      	ldr	r2, [pc, #332]	; (80125d0 <_strtod_l+0x960>)
 8012484:	465b      	mov	r3, fp
 8012486:	2900      	cmp	r1, #0
 8012488:	f000 8081 	beq.w	801258e <_strtod_l+0x91e>
 801248c:	ea02 010b 	and.w	r1, r2, fp
 8012490:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8012494:	dc7b      	bgt.n	801258e <_strtod_l+0x91e>
 8012496:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801249a:	f77f aea9 	ble.w	80121f0 <_strtod_l+0x580>
 801249e:	4b4d      	ldr	r3, [pc, #308]	; (80125d4 <_strtod_l+0x964>)
 80124a0:	4650      	mov	r0, sl
 80124a2:	4659      	mov	r1, fp
 80124a4:	2200      	movs	r2, #0
 80124a6:	f7ee f8bf 	bl	8000628 <__aeabi_dmul>
 80124aa:	460b      	mov	r3, r1
 80124ac:	4303      	orrs	r3, r0
 80124ae:	bf08      	it	eq
 80124b0:	2322      	moveq	r3, #34	; 0x22
 80124b2:	4682      	mov	sl, r0
 80124b4:	468b      	mov	fp, r1
 80124b6:	bf08      	it	eq
 80124b8:	6023      	streq	r3, [r4, #0]
 80124ba:	e62b      	b.n	8012114 <_strtod_l+0x4a4>
 80124bc:	f04f 32ff 	mov.w	r2, #4294967295
 80124c0:	fa02 f303 	lsl.w	r3, r2, r3
 80124c4:	ea03 0a0a 	and.w	sl, r3, sl
 80124c8:	e6e3      	b.n	8012292 <_strtod_l+0x622>
 80124ca:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80124ce:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80124d2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80124d6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80124da:	fa01 f308 	lsl.w	r3, r1, r8
 80124de:	9308      	str	r3, [sp, #32]
 80124e0:	910d      	str	r1, [sp, #52]	; 0x34
 80124e2:	e746      	b.n	8012372 <_strtod_l+0x702>
 80124e4:	2300      	movs	r3, #0
 80124e6:	9308      	str	r3, [sp, #32]
 80124e8:	2301      	movs	r3, #1
 80124ea:	930d      	str	r3, [sp, #52]	; 0x34
 80124ec:	e741      	b.n	8012372 <_strtod_l+0x702>
 80124ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 80124f0:	4642      	mov	r2, r8
 80124f2:	4620      	mov	r0, r4
 80124f4:	f002 f912 	bl	801471c <__lshift>
 80124f8:	9018      	str	r0, [sp, #96]	; 0x60
 80124fa:	2800      	cmp	r0, #0
 80124fc:	f47f af6b 	bne.w	80123d6 <_strtod_l+0x766>
 8012500:	e5fe      	b.n	8012100 <_strtod_l+0x490>
 8012502:	465f      	mov	r7, fp
 8012504:	d16e      	bne.n	80125e4 <_strtod_l+0x974>
 8012506:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012508:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801250c:	b342      	cbz	r2, 8012560 <_strtod_l+0x8f0>
 801250e:	4a32      	ldr	r2, [pc, #200]	; (80125d8 <_strtod_l+0x968>)
 8012510:	4293      	cmp	r3, r2
 8012512:	d128      	bne.n	8012566 <_strtod_l+0x8f6>
 8012514:	9b04      	ldr	r3, [sp, #16]
 8012516:	4651      	mov	r1, sl
 8012518:	b1eb      	cbz	r3, 8012556 <_strtod_l+0x8e6>
 801251a:	4b2d      	ldr	r3, [pc, #180]	; (80125d0 <_strtod_l+0x960>)
 801251c:	403b      	ands	r3, r7
 801251e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8012522:	f04f 32ff 	mov.w	r2, #4294967295
 8012526:	d819      	bhi.n	801255c <_strtod_l+0x8ec>
 8012528:	0d1b      	lsrs	r3, r3, #20
 801252a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801252e:	fa02 f303 	lsl.w	r3, r2, r3
 8012532:	4299      	cmp	r1, r3
 8012534:	d117      	bne.n	8012566 <_strtod_l+0x8f6>
 8012536:	4b29      	ldr	r3, [pc, #164]	; (80125dc <_strtod_l+0x96c>)
 8012538:	429f      	cmp	r7, r3
 801253a:	d102      	bne.n	8012542 <_strtod_l+0x8d2>
 801253c:	3101      	adds	r1, #1
 801253e:	f43f addf 	beq.w	8012100 <_strtod_l+0x490>
 8012542:	4b23      	ldr	r3, [pc, #140]	; (80125d0 <_strtod_l+0x960>)
 8012544:	403b      	ands	r3, r7
 8012546:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801254a:	f04f 0a00 	mov.w	sl, #0
 801254e:	9b04      	ldr	r3, [sp, #16]
 8012550:	2b00      	cmp	r3, #0
 8012552:	d1a4      	bne.n	801249e <_strtod_l+0x82e>
 8012554:	e5de      	b.n	8012114 <_strtod_l+0x4a4>
 8012556:	f04f 33ff 	mov.w	r3, #4294967295
 801255a:	e7ea      	b.n	8012532 <_strtod_l+0x8c2>
 801255c:	4613      	mov	r3, r2
 801255e:	e7e8      	b.n	8012532 <_strtod_l+0x8c2>
 8012560:	ea53 030a 	orrs.w	r3, r3, sl
 8012564:	d08c      	beq.n	8012480 <_strtod_l+0x810>
 8012566:	9b08      	ldr	r3, [sp, #32]
 8012568:	b1db      	cbz	r3, 80125a2 <_strtod_l+0x932>
 801256a:	423b      	tst	r3, r7
 801256c:	d0ef      	beq.n	801254e <_strtod_l+0x8de>
 801256e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012570:	9a04      	ldr	r2, [sp, #16]
 8012572:	4650      	mov	r0, sl
 8012574:	4659      	mov	r1, fp
 8012576:	b1c3      	cbz	r3, 80125aa <_strtod_l+0x93a>
 8012578:	f7ff fb5c 	bl	8011c34 <sulp>
 801257c:	4602      	mov	r2, r0
 801257e:	460b      	mov	r3, r1
 8012580:	ec51 0b18 	vmov	r0, r1, d8
 8012584:	f7ed fe9a 	bl	80002bc <__adddf3>
 8012588:	4682      	mov	sl, r0
 801258a:	468b      	mov	fp, r1
 801258c:	e7df      	b.n	801254e <_strtod_l+0x8de>
 801258e:	4013      	ands	r3, r2
 8012590:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8012594:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8012598:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801259c:	f04f 3aff 	mov.w	sl, #4294967295
 80125a0:	e7d5      	b.n	801254e <_strtod_l+0x8de>
 80125a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80125a4:	ea13 0f0a 	tst.w	r3, sl
 80125a8:	e7e0      	b.n	801256c <_strtod_l+0x8fc>
 80125aa:	f7ff fb43 	bl	8011c34 <sulp>
 80125ae:	4602      	mov	r2, r0
 80125b0:	460b      	mov	r3, r1
 80125b2:	ec51 0b18 	vmov	r0, r1, d8
 80125b6:	f7ed fe7f 	bl	80002b8 <__aeabi_dsub>
 80125ba:	2200      	movs	r2, #0
 80125bc:	2300      	movs	r3, #0
 80125be:	4682      	mov	sl, r0
 80125c0:	468b      	mov	fp, r1
 80125c2:	f7ee fa99 	bl	8000af8 <__aeabi_dcmpeq>
 80125c6:	2800      	cmp	r0, #0
 80125c8:	d0c1      	beq.n	801254e <_strtod_l+0x8de>
 80125ca:	e611      	b.n	80121f0 <_strtod_l+0x580>
 80125cc:	fffffc02 	.word	0xfffffc02
 80125d0:	7ff00000 	.word	0x7ff00000
 80125d4:	39500000 	.word	0x39500000
 80125d8:	000fffff 	.word	0x000fffff
 80125dc:	7fefffff 	.word	0x7fefffff
 80125e0:	08019040 	.word	0x08019040
 80125e4:	4631      	mov	r1, r6
 80125e6:	4628      	mov	r0, r5
 80125e8:	f002 fa86 	bl	8014af8 <__ratio>
 80125ec:	ec59 8b10 	vmov	r8, r9, d0
 80125f0:	ee10 0a10 	vmov	r0, s0
 80125f4:	2200      	movs	r2, #0
 80125f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80125fa:	4649      	mov	r1, r9
 80125fc:	f7ee fa90 	bl	8000b20 <__aeabi_dcmple>
 8012600:	2800      	cmp	r0, #0
 8012602:	d07a      	beq.n	80126fa <_strtod_l+0xa8a>
 8012604:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012606:	2b00      	cmp	r3, #0
 8012608:	d04a      	beq.n	80126a0 <_strtod_l+0xa30>
 801260a:	4b95      	ldr	r3, [pc, #596]	; (8012860 <_strtod_l+0xbf0>)
 801260c:	2200      	movs	r2, #0
 801260e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012612:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8012860 <_strtod_l+0xbf0>
 8012616:	f04f 0800 	mov.w	r8, #0
 801261a:	4b92      	ldr	r3, [pc, #584]	; (8012864 <_strtod_l+0xbf4>)
 801261c:	403b      	ands	r3, r7
 801261e:	930d      	str	r3, [sp, #52]	; 0x34
 8012620:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012622:	4b91      	ldr	r3, [pc, #580]	; (8012868 <_strtod_l+0xbf8>)
 8012624:	429a      	cmp	r2, r3
 8012626:	f040 80b0 	bne.w	801278a <_strtod_l+0xb1a>
 801262a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801262e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8012632:	ec4b ab10 	vmov	d0, sl, fp
 8012636:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801263a:	f002 f985 	bl	8014948 <__ulp>
 801263e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012642:	ec53 2b10 	vmov	r2, r3, d0
 8012646:	f7ed ffef 	bl	8000628 <__aeabi_dmul>
 801264a:	4652      	mov	r2, sl
 801264c:	465b      	mov	r3, fp
 801264e:	f7ed fe35 	bl	80002bc <__adddf3>
 8012652:	460b      	mov	r3, r1
 8012654:	4983      	ldr	r1, [pc, #524]	; (8012864 <_strtod_l+0xbf4>)
 8012656:	4a85      	ldr	r2, [pc, #532]	; (801286c <_strtod_l+0xbfc>)
 8012658:	4019      	ands	r1, r3
 801265a:	4291      	cmp	r1, r2
 801265c:	4682      	mov	sl, r0
 801265e:	d960      	bls.n	8012722 <_strtod_l+0xab2>
 8012660:	ee18 3a90 	vmov	r3, s17
 8012664:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8012668:	4293      	cmp	r3, r2
 801266a:	d104      	bne.n	8012676 <_strtod_l+0xa06>
 801266c:	ee18 3a10 	vmov	r3, s16
 8012670:	3301      	adds	r3, #1
 8012672:	f43f ad45 	beq.w	8012100 <_strtod_l+0x490>
 8012676:	f8df b200 	ldr.w	fp, [pc, #512]	; 8012878 <_strtod_l+0xc08>
 801267a:	f04f 3aff 	mov.w	sl, #4294967295
 801267e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012680:	4620      	mov	r0, r4
 8012682:	f001 fe2f 	bl	80142e4 <_Bfree>
 8012686:	9905      	ldr	r1, [sp, #20]
 8012688:	4620      	mov	r0, r4
 801268a:	f001 fe2b 	bl	80142e4 <_Bfree>
 801268e:	4631      	mov	r1, r6
 8012690:	4620      	mov	r0, r4
 8012692:	f001 fe27 	bl	80142e4 <_Bfree>
 8012696:	4629      	mov	r1, r5
 8012698:	4620      	mov	r0, r4
 801269a:	f001 fe23 	bl	80142e4 <_Bfree>
 801269e:	e61a      	b.n	80122d6 <_strtod_l+0x666>
 80126a0:	f1ba 0f00 	cmp.w	sl, #0
 80126a4:	d11b      	bne.n	80126de <_strtod_l+0xa6e>
 80126a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80126aa:	b9f3      	cbnz	r3, 80126ea <_strtod_l+0xa7a>
 80126ac:	4b6c      	ldr	r3, [pc, #432]	; (8012860 <_strtod_l+0xbf0>)
 80126ae:	2200      	movs	r2, #0
 80126b0:	4640      	mov	r0, r8
 80126b2:	4649      	mov	r1, r9
 80126b4:	f7ee fa2a 	bl	8000b0c <__aeabi_dcmplt>
 80126b8:	b9d0      	cbnz	r0, 80126f0 <_strtod_l+0xa80>
 80126ba:	4640      	mov	r0, r8
 80126bc:	4649      	mov	r1, r9
 80126be:	4b6c      	ldr	r3, [pc, #432]	; (8012870 <_strtod_l+0xc00>)
 80126c0:	2200      	movs	r2, #0
 80126c2:	f7ed ffb1 	bl	8000628 <__aeabi_dmul>
 80126c6:	4680      	mov	r8, r0
 80126c8:	4689      	mov	r9, r1
 80126ca:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80126ce:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80126d2:	9315      	str	r3, [sp, #84]	; 0x54
 80126d4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80126d8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80126dc:	e79d      	b.n	801261a <_strtod_l+0x9aa>
 80126de:	f1ba 0f01 	cmp.w	sl, #1
 80126e2:	d102      	bne.n	80126ea <_strtod_l+0xa7a>
 80126e4:	2f00      	cmp	r7, #0
 80126e6:	f43f ad83 	beq.w	80121f0 <_strtod_l+0x580>
 80126ea:	4b62      	ldr	r3, [pc, #392]	; (8012874 <_strtod_l+0xc04>)
 80126ec:	2200      	movs	r2, #0
 80126ee:	e78e      	b.n	801260e <_strtod_l+0x99e>
 80126f0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8012870 <_strtod_l+0xc00>
 80126f4:	f04f 0800 	mov.w	r8, #0
 80126f8:	e7e7      	b.n	80126ca <_strtod_l+0xa5a>
 80126fa:	4b5d      	ldr	r3, [pc, #372]	; (8012870 <_strtod_l+0xc00>)
 80126fc:	4640      	mov	r0, r8
 80126fe:	4649      	mov	r1, r9
 8012700:	2200      	movs	r2, #0
 8012702:	f7ed ff91 	bl	8000628 <__aeabi_dmul>
 8012706:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012708:	4680      	mov	r8, r0
 801270a:	4689      	mov	r9, r1
 801270c:	b933      	cbnz	r3, 801271c <_strtod_l+0xaac>
 801270e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012712:	900e      	str	r0, [sp, #56]	; 0x38
 8012714:	930f      	str	r3, [sp, #60]	; 0x3c
 8012716:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801271a:	e7dd      	b.n	80126d8 <_strtod_l+0xa68>
 801271c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8012720:	e7f9      	b.n	8012716 <_strtod_l+0xaa6>
 8012722:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8012726:	9b04      	ldr	r3, [sp, #16]
 8012728:	2b00      	cmp	r3, #0
 801272a:	d1a8      	bne.n	801267e <_strtod_l+0xa0e>
 801272c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012730:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012732:	0d1b      	lsrs	r3, r3, #20
 8012734:	051b      	lsls	r3, r3, #20
 8012736:	429a      	cmp	r2, r3
 8012738:	d1a1      	bne.n	801267e <_strtod_l+0xa0e>
 801273a:	4640      	mov	r0, r8
 801273c:	4649      	mov	r1, r9
 801273e:	f7ee fb23 	bl	8000d88 <__aeabi_d2lz>
 8012742:	f7ed ff43 	bl	80005cc <__aeabi_l2d>
 8012746:	4602      	mov	r2, r0
 8012748:	460b      	mov	r3, r1
 801274a:	4640      	mov	r0, r8
 801274c:	4649      	mov	r1, r9
 801274e:	f7ed fdb3 	bl	80002b8 <__aeabi_dsub>
 8012752:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012754:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012758:	ea43 030a 	orr.w	r3, r3, sl
 801275c:	4313      	orrs	r3, r2
 801275e:	4680      	mov	r8, r0
 8012760:	4689      	mov	r9, r1
 8012762:	d055      	beq.n	8012810 <_strtod_l+0xba0>
 8012764:	a336      	add	r3, pc, #216	; (adr r3, 8012840 <_strtod_l+0xbd0>)
 8012766:	e9d3 2300 	ldrd	r2, r3, [r3]
 801276a:	f7ee f9cf 	bl	8000b0c <__aeabi_dcmplt>
 801276e:	2800      	cmp	r0, #0
 8012770:	f47f acd0 	bne.w	8012114 <_strtod_l+0x4a4>
 8012774:	a334      	add	r3, pc, #208	; (adr r3, 8012848 <_strtod_l+0xbd8>)
 8012776:	e9d3 2300 	ldrd	r2, r3, [r3]
 801277a:	4640      	mov	r0, r8
 801277c:	4649      	mov	r1, r9
 801277e:	f7ee f9e3 	bl	8000b48 <__aeabi_dcmpgt>
 8012782:	2800      	cmp	r0, #0
 8012784:	f43f af7b 	beq.w	801267e <_strtod_l+0xa0e>
 8012788:	e4c4      	b.n	8012114 <_strtod_l+0x4a4>
 801278a:	9b04      	ldr	r3, [sp, #16]
 801278c:	b333      	cbz	r3, 80127dc <_strtod_l+0xb6c>
 801278e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012790:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8012794:	d822      	bhi.n	80127dc <_strtod_l+0xb6c>
 8012796:	a32e      	add	r3, pc, #184	; (adr r3, 8012850 <_strtod_l+0xbe0>)
 8012798:	e9d3 2300 	ldrd	r2, r3, [r3]
 801279c:	4640      	mov	r0, r8
 801279e:	4649      	mov	r1, r9
 80127a0:	f7ee f9be 	bl	8000b20 <__aeabi_dcmple>
 80127a4:	b1a0      	cbz	r0, 80127d0 <_strtod_l+0xb60>
 80127a6:	4649      	mov	r1, r9
 80127a8:	4640      	mov	r0, r8
 80127aa:	f7ee fa15 	bl	8000bd8 <__aeabi_d2uiz>
 80127ae:	2801      	cmp	r0, #1
 80127b0:	bf38      	it	cc
 80127b2:	2001      	movcc	r0, #1
 80127b4:	f7ed febe 	bl	8000534 <__aeabi_ui2d>
 80127b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80127ba:	4680      	mov	r8, r0
 80127bc:	4689      	mov	r9, r1
 80127be:	bb23      	cbnz	r3, 801280a <_strtod_l+0xb9a>
 80127c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80127c4:	9010      	str	r0, [sp, #64]	; 0x40
 80127c6:	9311      	str	r3, [sp, #68]	; 0x44
 80127c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80127cc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80127d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80127d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80127d4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80127d8:	1a9b      	subs	r3, r3, r2
 80127da:	9309      	str	r3, [sp, #36]	; 0x24
 80127dc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80127e0:	eeb0 0a48 	vmov.f32	s0, s16
 80127e4:	eef0 0a68 	vmov.f32	s1, s17
 80127e8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80127ec:	f002 f8ac 	bl	8014948 <__ulp>
 80127f0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80127f4:	ec53 2b10 	vmov	r2, r3, d0
 80127f8:	f7ed ff16 	bl	8000628 <__aeabi_dmul>
 80127fc:	ec53 2b18 	vmov	r2, r3, d8
 8012800:	f7ed fd5c 	bl	80002bc <__adddf3>
 8012804:	4682      	mov	sl, r0
 8012806:	468b      	mov	fp, r1
 8012808:	e78d      	b.n	8012726 <_strtod_l+0xab6>
 801280a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 801280e:	e7db      	b.n	80127c8 <_strtod_l+0xb58>
 8012810:	a311      	add	r3, pc, #68	; (adr r3, 8012858 <_strtod_l+0xbe8>)
 8012812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012816:	f7ee f979 	bl	8000b0c <__aeabi_dcmplt>
 801281a:	e7b2      	b.n	8012782 <_strtod_l+0xb12>
 801281c:	2300      	movs	r3, #0
 801281e:	930a      	str	r3, [sp, #40]	; 0x28
 8012820:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012822:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012824:	6013      	str	r3, [r2, #0]
 8012826:	f7ff ba6b 	b.w	8011d00 <_strtod_l+0x90>
 801282a:	2a65      	cmp	r2, #101	; 0x65
 801282c:	f43f ab5f 	beq.w	8011eee <_strtod_l+0x27e>
 8012830:	2a45      	cmp	r2, #69	; 0x45
 8012832:	f43f ab5c 	beq.w	8011eee <_strtod_l+0x27e>
 8012836:	2301      	movs	r3, #1
 8012838:	f7ff bb94 	b.w	8011f64 <_strtod_l+0x2f4>
 801283c:	f3af 8000 	nop.w
 8012840:	94a03595 	.word	0x94a03595
 8012844:	3fdfffff 	.word	0x3fdfffff
 8012848:	35afe535 	.word	0x35afe535
 801284c:	3fe00000 	.word	0x3fe00000
 8012850:	ffc00000 	.word	0xffc00000
 8012854:	41dfffff 	.word	0x41dfffff
 8012858:	94a03595 	.word	0x94a03595
 801285c:	3fcfffff 	.word	0x3fcfffff
 8012860:	3ff00000 	.word	0x3ff00000
 8012864:	7ff00000 	.word	0x7ff00000
 8012868:	7fe00000 	.word	0x7fe00000
 801286c:	7c9fffff 	.word	0x7c9fffff
 8012870:	3fe00000 	.word	0x3fe00000
 8012874:	bff00000 	.word	0xbff00000
 8012878:	7fefffff 	.word	0x7fefffff

0801287c <strtod>:
 801287c:	460a      	mov	r2, r1
 801287e:	4601      	mov	r1, r0
 8012880:	4802      	ldr	r0, [pc, #8]	; (801288c <strtod+0x10>)
 8012882:	4b03      	ldr	r3, [pc, #12]	; (8012890 <strtod+0x14>)
 8012884:	6800      	ldr	r0, [r0, #0]
 8012886:	f7ff b9f3 	b.w	8011c70 <_strtod_l>
 801288a:	bf00      	nop
 801288c:	20000020 	.word	0x20000020
 8012890:	200000ec 	.word	0x200000ec

08012894 <__tzcalc_limits>:
 8012894:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012898:	4605      	mov	r5, r0
 801289a:	f001 fca9 	bl	80141f0 <__gettzinfo>
 801289e:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80128a2:	429d      	cmp	r5, r3
 80128a4:	f340 8099 	ble.w	80129da <__tzcalc_limits+0x146>
 80128a8:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 80128ac:	18ac      	adds	r4, r5, r2
 80128ae:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 80128b2:	f240 126d 	movw	r2, #365	; 0x16d
 80128b6:	10a4      	asrs	r4, r4, #2
 80128b8:	fb02 4403 	mla	r4, r2, r3, r4
 80128bc:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80128c0:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 80128c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80128c8:	441c      	add	r4, r3
 80128ca:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80128ce:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 80128d2:	fb95 fcf3 	sdiv	ip, r5, r3
 80128d6:	fb03 5c1c 	mls	ip, r3, ip, r5
 80128da:	186a      	adds	r2, r5, r1
 80128dc:	fabc f68c 	clz	r6, ip
 80128e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80128e4:	f005 0303 	and.w	r3, r5, #3
 80128e8:	4414      	add	r4, r2
 80128ea:	2264      	movs	r2, #100	; 0x64
 80128ec:	6045      	str	r5, [r0, #4]
 80128ee:	fb95 f7f2 	sdiv	r7, r5, r2
 80128f2:	0976      	lsrs	r6, r6, #5
 80128f4:	fb02 5717 	mls	r7, r2, r7, r5
 80128f8:	4601      	mov	r1, r0
 80128fa:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 80128fe:	9300      	str	r3, [sp, #0]
 8012900:	f04f 0a07 	mov.w	sl, #7
 8012904:	7a0d      	ldrb	r5, [r1, #8]
 8012906:	694b      	ldr	r3, [r1, #20]
 8012908:	2d4a      	cmp	r5, #74	; 0x4a
 801290a:	d12d      	bne.n	8012968 <__tzcalc_limits+0xd4>
 801290c:	9a00      	ldr	r2, [sp, #0]
 801290e:	eb04 0e03 	add.w	lr, r4, r3
 8012912:	b902      	cbnz	r2, 8012916 <__tzcalc_limits+0x82>
 8012914:	b917      	cbnz	r7, 801291c <__tzcalc_limits+0x88>
 8012916:	f1bc 0f00 	cmp.w	ip, #0
 801291a:	d123      	bne.n	8012964 <__tzcalc_limits+0xd0>
 801291c:	2b3b      	cmp	r3, #59	; 0x3b
 801291e:	bfd4      	ite	le
 8012920:	2300      	movle	r3, #0
 8012922:	2301      	movgt	r3, #1
 8012924:	4473      	add	r3, lr
 8012926:	3b01      	subs	r3, #1
 8012928:	698d      	ldr	r5, [r1, #24]
 801292a:	4a2d      	ldr	r2, [pc, #180]	; (80129e0 <__tzcalc_limits+0x14c>)
 801292c:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 8012930:	fbc3 5e02 	smlal	r5, lr, r3, r2
 8012934:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8012936:	18ed      	adds	r5, r5, r3
 8012938:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 801293c:	e9c1 5308 	strd	r5, r3, [r1, #32]
 8012940:	3128      	adds	r1, #40	; 0x28
 8012942:	458b      	cmp	fp, r1
 8012944:	d1de      	bne.n	8012904 <__tzcalc_limits+0x70>
 8012946:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 801294a:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 801294e:	428c      	cmp	r4, r1
 8012950:	eb72 0303 	sbcs.w	r3, r2, r3
 8012954:	bfb4      	ite	lt
 8012956:	2301      	movlt	r3, #1
 8012958:	2300      	movge	r3, #0
 801295a:	6003      	str	r3, [r0, #0]
 801295c:	2001      	movs	r0, #1
 801295e:	b003      	add	sp, #12
 8012960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012964:	2300      	movs	r3, #0
 8012966:	e7dd      	b.n	8012924 <__tzcalc_limits+0x90>
 8012968:	2d44      	cmp	r5, #68	; 0x44
 801296a:	d101      	bne.n	8012970 <__tzcalc_limits+0xdc>
 801296c:	4423      	add	r3, r4
 801296e:	e7db      	b.n	8012928 <__tzcalc_limits+0x94>
 8012970:	9a00      	ldr	r2, [sp, #0]
 8012972:	bb62      	cbnz	r2, 80129ce <__tzcalc_limits+0x13a>
 8012974:	2f00      	cmp	r7, #0
 8012976:	bf0c      	ite	eq
 8012978:	4635      	moveq	r5, r6
 801297a:	2501      	movne	r5, #1
 801297c:	68ca      	ldr	r2, [r1, #12]
 801297e:	9201      	str	r2, [sp, #4]
 8012980:	4a18      	ldr	r2, [pc, #96]	; (80129e4 <__tzcalc_limits+0x150>)
 8012982:	f04f 0930 	mov.w	r9, #48	; 0x30
 8012986:	fb09 2505 	mla	r5, r9, r5, r2
 801298a:	46a6      	mov	lr, r4
 801298c:	f04f 0800 	mov.w	r8, #0
 8012990:	3d04      	subs	r5, #4
 8012992:	9a01      	ldr	r2, [sp, #4]
 8012994:	f108 0801 	add.w	r8, r8, #1
 8012998:	4542      	cmp	r2, r8
 801299a:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 801299e:	dc18      	bgt.n	80129d2 <__tzcalc_limits+0x13e>
 80129a0:	f10e 0504 	add.w	r5, lr, #4
 80129a4:	fb95 f8fa 	sdiv	r8, r5, sl
 80129a8:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 80129ac:	eba5 0808 	sub.w	r8, r5, r8
 80129b0:	ebb3 0808 	subs.w	r8, r3, r8
 80129b4:	690b      	ldr	r3, [r1, #16]
 80129b6:	f103 33ff 	add.w	r3, r3, #4294967295
 80129ba:	bf48      	it	mi
 80129bc:	f108 0807 	addmi.w	r8, r8, #7
 80129c0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80129c4:	4443      	add	r3, r8
 80129c6:	454b      	cmp	r3, r9
 80129c8:	da05      	bge.n	80129d6 <__tzcalc_limits+0x142>
 80129ca:	4473      	add	r3, lr
 80129cc:	e7ac      	b.n	8012928 <__tzcalc_limits+0x94>
 80129ce:	4635      	mov	r5, r6
 80129d0:	e7d4      	b.n	801297c <__tzcalc_limits+0xe8>
 80129d2:	44ce      	add	lr, r9
 80129d4:	e7dd      	b.n	8012992 <__tzcalc_limits+0xfe>
 80129d6:	3b07      	subs	r3, #7
 80129d8:	e7f5      	b.n	80129c6 <__tzcalc_limits+0x132>
 80129da:	2000      	movs	r0, #0
 80129dc:	e7bf      	b.n	801295e <__tzcalc_limits+0xca>
 80129de:	bf00      	nop
 80129e0:	00015180 	.word	0x00015180
 80129e4:	080191d4 	.word	0x080191d4

080129e8 <__tz_lock>:
 80129e8:	4801      	ldr	r0, [pc, #4]	; (80129f0 <__tz_lock+0x8>)
 80129ea:	f001 bc0a 	b.w	8014202 <__retarget_lock_acquire>
 80129ee:	bf00      	nop
 80129f0:	20007b2c 	.word	0x20007b2c

080129f4 <__tz_unlock>:
 80129f4:	4801      	ldr	r0, [pc, #4]	; (80129fc <__tz_unlock+0x8>)
 80129f6:	f001 bc06 	b.w	8014206 <__retarget_lock_release>
 80129fa:	bf00      	nop
 80129fc:	20007b2c 	.word	0x20007b2c

08012a00 <_tzset_unlocked>:
 8012a00:	4b01      	ldr	r3, [pc, #4]	; (8012a08 <_tzset_unlocked+0x8>)
 8012a02:	6818      	ldr	r0, [r3, #0]
 8012a04:	f000 b802 	b.w	8012a0c <_tzset_unlocked_r>
 8012a08:	20000020 	.word	0x20000020

08012a0c <_tzset_unlocked_r>:
 8012a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a10:	b08d      	sub	sp, #52	; 0x34
 8012a12:	4607      	mov	r7, r0
 8012a14:	f001 fbec 	bl	80141f0 <__gettzinfo>
 8012a18:	49b0      	ldr	r1, [pc, #704]	; (8012cdc <_tzset_unlocked_r+0x2d0>)
 8012a1a:	4eb1      	ldr	r6, [pc, #708]	; (8012ce0 <_tzset_unlocked_r+0x2d4>)
 8012a1c:	4605      	mov	r5, r0
 8012a1e:	4638      	mov	r0, r7
 8012a20:	f001 fbde 	bl	80141e0 <_getenv_r>
 8012a24:	4604      	mov	r4, r0
 8012a26:	b970      	cbnz	r0, 8012a46 <_tzset_unlocked_r+0x3a>
 8012a28:	4bae      	ldr	r3, [pc, #696]	; (8012ce4 <_tzset_unlocked_r+0x2d8>)
 8012a2a:	4aaf      	ldr	r2, [pc, #700]	; (8012ce8 <_tzset_unlocked_r+0x2dc>)
 8012a2c:	6018      	str	r0, [r3, #0]
 8012a2e:	4baf      	ldr	r3, [pc, #700]	; (8012cec <_tzset_unlocked_r+0x2e0>)
 8012a30:	6018      	str	r0, [r3, #0]
 8012a32:	4baf      	ldr	r3, [pc, #700]	; (8012cf0 <_tzset_unlocked_r+0x2e4>)
 8012a34:	6830      	ldr	r0, [r6, #0]
 8012a36:	e9c3 2200 	strd	r2, r2, [r3]
 8012a3a:	f7fe f8eb 	bl	8010c14 <free>
 8012a3e:	6034      	str	r4, [r6, #0]
 8012a40:	b00d      	add	sp, #52	; 0x34
 8012a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a46:	6831      	ldr	r1, [r6, #0]
 8012a48:	2900      	cmp	r1, #0
 8012a4a:	d162      	bne.n	8012b12 <_tzset_unlocked_r+0x106>
 8012a4c:	6830      	ldr	r0, [r6, #0]
 8012a4e:	f7fe f8e1 	bl	8010c14 <free>
 8012a52:	4620      	mov	r0, r4
 8012a54:	f7ed fbce 	bl	80001f4 <strlen>
 8012a58:	1c41      	adds	r1, r0, #1
 8012a5a:	4638      	mov	r0, r7
 8012a5c:	f7fe fbc8 	bl	80111f0 <_malloc_r>
 8012a60:	6030      	str	r0, [r6, #0]
 8012a62:	2800      	cmp	r0, #0
 8012a64:	d15a      	bne.n	8012b1c <_tzset_unlocked_r+0x110>
 8012a66:	7823      	ldrb	r3, [r4, #0]
 8012a68:	4aa2      	ldr	r2, [pc, #648]	; (8012cf4 <_tzset_unlocked_r+0x2e8>)
 8012a6a:	49a3      	ldr	r1, [pc, #652]	; (8012cf8 <_tzset_unlocked_r+0x2ec>)
 8012a6c:	2b3a      	cmp	r3, #58	; 0x3a
 8012a6e:	bf08      	it	eq
 8012a70:	3401      	addeq	r4, #1
 8012a72:	ae0a      	add	r6, sp, #40	; 0x28
 8012a74:	4633      	mov	r3, r6
 8012a76:	4620      	mov	r0, r4
 8012a78:	f002 fb8a 	bl	8015190 <siscanf>
 8012a7c:	2800      	cmp	r0, #0
 8012a7e:	dddf      	ble.n	8012a40 <_tzset_unlocked_r+0x34>
 8012a80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012a82:	18e7      	adds	r7, r4, r3
 8012a84:	5ce3      	ldrb	r3, [r4, r3]
 8012a86:	2b2d      	cmp	r3, #45	; 0x2d
 8012a88:	d14c      	bne.n	8012b24 <_tzset_unlocked_r+0x118>
 8012a8a:	3701      	adds	r7, #1
 8012a8c:	f04f 38ff 	mov.w	r8, #4294967295
 8012a90:	f10d 0a20 	add.w	sl, sp, #32
 8012a94:	f10d 0b1e 	add.w	fp, sp, #30
 8012a98:	2400      	movs	r4, #0
 8012a9a:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8012a9e:	4997      	ldr	r1, [pc, #604]	; (8012cfc <_tzset_unlocked_r+0x2f0>)
 8012aa0:	9603      	str	r6, [sp, #12]
 8012aa2:	f8cd b000 	str.w	fp, [sp]
 8012aa6:	4633      	mov	r3, r6
 8012aa8:	aa07      	add	r2, sp, #28
 8012aaa:	4638      	mov	r0, r7
 8012aac:	f8ad 401e 	strh.w	r4, [sp, #30]
 8012ab0:	f8ad 4020 	strh.w	r4, [sp, #32]
 8012ab4:	f002 fb6c 	bl	8015190 <siscanf>
 8012ab8:	42a0      	cmp	r0, r4
 8012aba:	ddc1      	ble.n	8012a40 <_tzset_unlocked_r+0x34>
 8012abc:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8012ac0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8012ac4:	f8df 9240 	ldr.w	r9, [pc, #576]	; 8012d08 <_tzset_unlocked_r+0x2fc>
 8012ac8:	213c      	movs	r1, #60	; 0x3c
 8012aca:	fb01 3302 	mla	r3, r1, r2, r3
 8012ace:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8012ad2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8012ad6:	fb01 3302 	mla	r3, r1, r2, r3
 8012ada:	fb08 f303 	mul.w	r3, r8, r3
 8012ade:	f8df 8210 	ldr.w	r8, [pc, #528]	; 8012cf0 <_tzset_unlocked_r+0x2e4>
 8012ae2:	62ab      	str	r3, [r5, #40]	; 0x28
 8012ae4:	4b83      	ldr	r3, [pc, #524]	; (8012cf4 <_tzset_unlocked_r+0x2e8>)
 8012ae6:	f8c8 3000 	str.w	r3, [r8]
 8012aea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012aec:	4982      	ldr	r1, [pc, #520]	; (8012cf8 <_tzset_unlocked_r+0x2ec>)
 8012aee:	441f      	add	r7, r3
 8012af0:	464a      	mov	r2, r9
 8012af2:	4633      	mov	r3, r6
 8012af4:	4638      	mov	r0, r7
 8012af6:	f002 fb4b 	bl	8015190 <siscanf>
 8012afa:	42a0      	cmp	r0, r4
 8012afc:	dc18      	bgt.n	8012b30 <_tzset_unlocked_r+0x124>
 8012afe:	f8d8 3000 	ldr.w	r3, [r8]
 8012b02:	f8c8 3004 	str.w	r3, [r8, #4]
 8012b06:	4b77      	ldr	r3, [pc, #476]	; (8012ce4 <_tzset_unlocked_r+0x2d8>)
 8012b08:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8012b0a:	601a      	str	r2, [r3, #0]
 8012b0c:	4b77      	ldr	r3, [pc, #476]	; (8012cec <_tzset_unlocked_r+0x2e0>)
 8012b0e:	601c      	str	r4, [r3, #0]
 8012b10:	e796      	b.n	8012a40 <_tzset_unlocked_r+0x34>
 8012b12:	f7ed fb65 	bl	80001e0 <strcmp>
 8012b16:	2800      	cmp	r0, #0
 8012b18:	d198      	bne.n	8012a4c <_tzset_unlocked_r+0x40>
 8012b1a:	e791      	b.n	8012a40 <_tzset_unlocked_r+0x34>
 8012b1c:	4621      	mov	r1, r4
 8012b1e:	f002 fba8 	bl	8015272 <strcpy>
 8012b22:	e7a0      	b.n	8012a66 <_tzset_unlocked_r+0x5a>
 8012b24:	2b2b      	cmp	r3, #43	; 0x2b
 8012b26:	bf08      	it	eq
 8012b28:	3701      	addeq	r7, #1
 8012b2a:	f04f 0801 	mov.w	r8, #1
 8012b2e:	e7af      	b.n	8012a90 <_tzset_unlocked_r+0x84>
 8012b30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b32:	f8c8 9004 	str.w	r9, [r8, #4]
 8012b36:	18fc      	adds	r4, r7, r3
 8012b38:	5cfb      	ldrb	r3, [r7, r3]
 8012b3a:	2b2d      	cmp	r3, #45	; 0x2d
 8012b3c:	f040 808b 	bne.w	8012c56 <_tzset_unlocked_r+0x24a>
 8012b40:	3401      	adds	r4, #1
 8012b42:	f04f 37ff 	mov.w	r7, #4294967295
 8012b46:	2300      	movs	r3, #0
 8012b48:	f8ad 301c 	strh.w	r3, [sp, #28]
 8012b4c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8012b50:	f8ad 3020 	strh.w	r3, [sp, #32]
 8012b54:	930a      	str	r3, [sp, #40]	; 0x28
 8012b56:	e9cd a602 	strd	sl, r6, [sp, #8]
 8012b5a:	e9cd b600 	strd	fp, r6, [sp]
 8012b5e:	4967      	ldr	r1, [pc, #412]	; (8012cfc <_tzset_unlocked_r+0x2f0>)
 8012b60:	4633      	mov	r3, r6
 8012b62:	aa07      	add	r2, sp, #28
 8012b64:	4620      	mov	r0, r4
 8012b66:	f002 fb13 	bl	8015190 <siscanf>
 8012b6a:	2800      	cmp	r0, #0
 8012b6c:	dc78      	bgt.n	8012c60 <_tzset_unlocked_r+0x254>
 8012b6e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8012b70:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8012b74:	652b      	str	r3, [r5, #80]	; 0x50
 8012b76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b78:	462f      	mov	r7, r5
 8012b7a:	441c      	add	r4, r3
 8012b7c:	f04f 0900 	mov.w	r9, #0
 8012b80:	7823      	ldrb	r3, [r4, #0]
 8012b82:	2b2c      	cmp	r3, #44	; 0x2c
 8012b84:	bf08      	it	eq
 8012b86:	3401      	addeq	r4, #1
 8012b88:	f894 8000 	ldrb.w	r8, [r4]
 8012b8c:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8012b90:	d178      	bne.n	8012c84 <_tzset_unlocked_r+0x278>
 8012b92:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8012b96:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8012b9a:	ab09      	add	r3, sp, #36	; 0x24
 8012b9c:	9300      	str	r3, [sp, #0]
 8012b9e:	4958      	ldr	r1, [pc, #352]	; (8012d00 <_tzset_unlocked_r+0x2f4>)
 8012ba0:	9603      	str	r6, [sp, #12]
 8012ba2:	4633      	mov	r3, r6
 8012ba4:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8012ba8:	4620      	mov	r0, r4
 8012baa:	f002 faf1 	bl	8015190 <siscanf>
 8012bae:	2803      	cmp	r0, #3
 8012bb0:	f47f af46 	bne.w	8012a40 <_tzset_unlocked_r+0x34>
 8012bb4:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8012bb8:	1e4b      	subs	r3, r1, #1
 8012bba:	2b0b      	cmp	r3, #11
 8012bbc:	f63f af40 	bhi.w	8012a40 <_tzset_unlocked_r+0x34>
 8012bc0:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8012bc4:	1e53      	subs	r3, r2, #1
 8012bc6:	2b04      	cmp	r3, #4
 8012bc8:	f63f af3a 	bhi.w	8012a40 <_tzset_unlocked_r+0x34>
 8012bcc:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8012bd0:	2b06      	cmp	r3, #6
 8012bd2:	f63f af35 	bhi.w	8012a40 <_tzset_unlocked_r+0x34>
 8012bd6:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8012bda:	f887 8008 	strb.w	r8, [r7, #8]
 8012bde:	617b      	str	r3, [r7, #20]
 8012be0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012be2:	eb04 0803 	add.w	r8, r4, r3
 8012be6:	2302      	movs	r3, #2
 8012be8:	f8ad 301c 	strh.w	r3, [sp, #28]
 8012bec:	2300      	movs	r3, #0
 8012bee:	f8ad 301e 	strh.w	r3, [sp, #30]
 8012bf2:	f8ad 3020 	strh.w	r3, [sp, #32]
 8012bf6:	930a      	str	r3, [sp, #40]	; 0x28
 8012bf8:	f898 3000 	ldrb.w	r3, [r8]
 8012bfc:	2b2f      	cmp	r3, #47	; 0x2f
 8012bfe:	d109      	bne.n	8012c14 <_tzset_unlocked_r+0x208>
 8012c00:	e9cd a602 	strd	sl, r6, [sp, #8]
 8012c04:	e9cd b600 	strd	fp, r6, [sp]
 8012c08:	493e      	ldr	r1, [pc, #248]	; (8012d04 <_tzset_unlocked_r+0x2f8>)
 8012c0a:	4633      	mov	r3, r6
 8012c0c:	aa07      	add	r2, sp, #28
 8012c0e:	4640      	mov	r0, r8
 8012c10:	f002 fabe 	bl	8015190 <siscanf>
 8012c14:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8012c18:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8012c1c:	213c      	movs	r1, #60	; 0x3c
 8012c1e:	fb01 3302 	mla	r3, r1, r2, r3
 8012c22:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8012c26:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8012c2a:	fb01 3302 	mla	r3, r1, r2, r3
 8012c2e:	61bb      	str	r3, [r7, #24]
 8012c30:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8012c32:	3728      	adds	r7, #40	; 0x28
 8012c34:	4444      	add	r4, r8
 8012c36:	f1b9 0f00 	cmp.w	r9, #0
 8012c3a:	d020      	beq.n	8012c7e <_tzset_unlocked_r+0x272>
 8012c3c:	6868      	ldr	r0, [r5, #4]
 8012c3e:	f7ff fe29 	bl	8012894 <__tzcalc_limits>
 8012c42:	4b28      	ldr	r3, [pc, #160]	; (8012ce4 <_tzset_unlocked_r+0x2d8>)
 8012c44:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8012c46:	601a      	str	r2, [r3, #0]
 8012c48:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8012c4a:	1a9b      	subs	r3, r3, r2
 8012c4c:	4a27      	ldr	r2, [pc, #156]	; (8012cec <_tzset_unlocked_r+0x2e0>)
 8012c4e:	bf18      	it	ne
 8012c50:	2301      	movne	r3, #1
 8012c52:	6013      	str	r3, [r2, #0]
 8012c54:	e6f4      	b.n	8012a40 <_tzset_unlocked_r+0x34>
 8012c56:	2b2b      	cmp	r3, #43	; 0x2b
 8012c58:	bf08      	it	eq
 8012c5a:	3401      	addeq	r4, #1
 8012c5c:	2701      	movs	r7, #1
 8012c5e:	e772      	b.n	8012b46 <_tzset_unlocked_r+0x13a>
 8012c60:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8012c64:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8012c68:	213c      	movs	r1, #60	; 0x3c
 8012c6a:	fb01 3302 	mla	r3, r1, r2, r3
 8012c6e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8012c72:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8012c76:	fb01 3302 	mla	r3, r1, r2, r3
 8012c7a:	437b      	muls	r3, r7
 8012c7c:	e77a      	b.n	8012b74 <_tzset_unlocked_r+0x168>
 8012c7e:	f04f 0901 	mov.w	r9, #1
 8012c82:	e77d      	b.n	8012b80 <_tzset_unlocked_r+0x174>
 8012c84:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8012c88:	bf06      	itte	eq
 8012c8a:	3401      	addeq	r4, #1
 8012c8c:	4643      	moveq	r3, r8
 8012c8e:	2344      	movne	r3, #68	; 0x44
 8012c90:	220a      	movs	r2, #10
 8012c92:	a90b      	add	r1, sp, #44	; 0x2c
 8012c94:	4620      	mov	r0, r4
 8012c96:	9305      	str	r3, [sp, #20]
 8012c98:	f002 fb68 	bl	801536c <strtoul>
 8012c9c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8012ca0:	9b05      	ldr	r3, [sp, #20]
 8012ca2:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8012ca6:	45a0      	cmp	r8, r4
 8012ca8:	d114      	bne.n	8012cd4 <_tzset_unlocked_r+0x2c8>
 8012caa:	234d      	movs	r3, #77	; 0x4d
 8012cac:	f1b9 0f00 	cmp.w	r9, #0
 8012cb0:	d107      	bne.n	8012cc2 <_tzset_unlocked_r+0x2b6>
 8012cb2:	722b      	strb	r3, [r5, #8]
 8012cb4:	2103      	movs	r1, #3
 8012cb6:	2302      	movs	r3, #2
 8012cb8:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8012cbc:	f8c5 9014 	str.w	r9, [r5, #20]
 8012cc0:	e791      	b.n	8012be6 <_tzset_unlocked_r+0x1da>
 8012cc2:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8012cc6:	220b      	movs	r2, #11
 8012cc8:	2301      	movs	r3, #1
 8012cca:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8012cce:	2300      	movs	r3, #0
 8012cd0:	63eb      	str	r3, [r5, #60]	; 0x3c
 8012cd2:	e788      	b.n	8012be6 <_tzset_unlocked_r+0x1da>
 8012cd4:	b280      	uxth	r0, r0
 8012cd6:	723b      	strb	r3, [r7, #8]
 8012cd8:	6178      	str	r0, [r7, #20]
 8012cda:	e784      	b.n	8012be6 <_tzset_unlocked_r+0x1da>
 8012cdc:	08019068 	.word	0x08019068
 8012ce0:	20007b1c 	.word	0x20007b1c
 8012ce4:	20007b24 	.word	0x20007b24
 8012ce8:	0801906b 	.word	0x0801906b
 8012cec:	20007b20 	.word	0x20007b20
 8012cf0:	20000084 	.word	0x20000084
 8012cf4:	20007b0f 	.word	0x20007b0f
 8012cf8:	0801906f 	.word	0x0801906f
 8012cfc:	08019092 	.word	0x08019092
 8012d00:	0801907e 	.word	0x0801907e
 8012d04:	08019091 	.word	0x08019091
 8012d08:	20007b04 	.word	0x20007b04

08012d0c <__assert_func>:
 8012d0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012d0e:	4614      	mov	r4, r2
 8012d10:	461a      	mov	r2, r3
 8012d12:	4b09      	ldr	r3, [pc, #36]	; (8012d38 <__assert_func+0x2c>)
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	4605      	mov	r5, r0
 8012d18:	68d8      	ldr	r0, [r3, #12]
 8012d1a:	b14c      	cbz	r4, 8012d30 <__assert_func+0x24>
 8012d1c:	4b07      	ldr	r3, [pc, #28]	; (8012d3c <__assert_func+0x30>)
 8012d1e:	9100      	str	r1, [sp, #0]
 8012d20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012d24:	4906      	ldr	r1, [pc, #24]	; (8012d40 <__assert_func+0x34>)
 8012d26:	462b      	mov	r3, r5
 8012d28:	f000 fe9c 	bl	8013a64 <fiprintf>
 8012d2c:	f002 fc08 	bl	8015540 <abort>
 8012d30:	4b04      	ldr	r3, [pc, #16]	; (8012d44 <__assert_func+0x38>)
 8012d32:	461c      	mov	r4, r3
 8012d34:	e7f3      	b.n	8012d1e <__assert_func+0x12>
 8012d36:	bf00      	nop
 8012d38:	20000020 	.word	0x20000020
 8012d3c:	080190a4 	.word	0x080190a4
 8012d40:	080190b1 	.word	0x080190b1
 8012d44:	080190df 	.word	0x080190df

08012d48 <div>:
 8012d48:	2900      	cmp	r1, #0
 8012d4a:	b510      	push	{r4, lr}
 8012d4c:	fb91 f4f2 	sdiv	r4, r1, r2
 8012d50:	fb02 1314 	mls	r3, r2, r4, r1
 8012d54:	db06      	blt.n	8012d64 <div+0x1c>
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	da01      	bge.n	8012d5e <div+0x16>
 8012d5a:	3401      	adds	r4, #1
 8012d5c:	1a9b      	subs	r3, r3, r2
 8012d5e:	e9c0 4300 	strd	r4, r3, [r0]
 8012d62:	bd10      	pop	{r4, pc}
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	bfc4      	itt	gt
 8012d68:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8012d6c:	189b      	addgt	r3, r3, r2
 8012d6e:	e7f6      	b.n	8012d5e <div+0x16>

08012d70 <quorem>:
 8012d70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d74:	6903      	ldr	r3, [r0, #16]
 8012d76:	690c      	ldr	r4, [r1, #16]
 8012d78:	42a3      	cmp	r3, r4
 8012d7a:	4607      	mov	r7, r0
 8012d7c:	f2c0 8081 	blt.w	8012e82 <quorem+0x112>
 8012d80:	3c01      	subs	r4, #1
 8012d82:	f101 0814 	add.w	r8, r1, #20
 8012d86:	f100 0514 	add.w	r5, r0, #20
 8012d8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012d8e:	9301      	str	r3, [sp, #4]
 8012d90:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012d94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012d98:	3301      	adds	r3, #1
 8012d9a:	429a      	cmp	r2, r3
 8012d9c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012da0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012da4:	fbb2 f6f3 	udiv	r6, r2, r3
 8012da8:	d331      	bcc.n	8012e0e <quorem+0x9e>
 8012daa:	f04f 0e00 	mov.w	lr, #0
 8012dae:	4640      	mov	r0, r8
 8012db0:	46ac      	mov	ip, r5
 8012db2:	46f2      	mov	sl, lr
 8012db4:	f850 2b04 	ldr.w	r2, [r0], #4
 8012db8:	b293      	uxth	r3, r2
 8012dba:	fb06 e303 	mla	r3, r6, r3, lr
 8012dbe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8012dc2:	b29b      	uxth	r3, r3
 8012dc4:	ebaa 0303 	sub.w	r3, sl, r3
 8012dc8:	f8dc a000 	ldr.w	sl, [ip]
 8012dcc:	0c12      	lsrs	r2, r2, #16
 8012dce:	fa13 f38a 	uxtah	r3, r3, sl
 8012dd2:	fb06 e202 	mla	r2, r6, r2, lr
 8012dd6:	9300      	str	r3, [sp, #0]
 8012dd8:	9b00      	ldr	r3, [sp, #0]
 8012dda:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012dde:	b292      	uxth	r2, r2
 8012de0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8012de4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012de8:	f8bd 3000 	ldrh.w	r3, [sp]
 8012dec:	4581      	cmp	r9, r0
 8012dee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012df2:	f84c 3b04 	str.w	r3, [ip], #4
 8012df6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8012dfa:	d2db      	bcs.n	8012db4 <quorem+0x44>
 8012dfc:	f855 300b 	ldr.w	r3, [r5, fp]
 8012e00:	b92b      	cbnz	r3, 8012e0e <quorem+0x9e>
 8012e02:	9b01      	ldr	r3, [sp, #4]
 8012e04:	3b04      	subs	r3, #4
 8012e06:	429d      	cmp	r5, r3
 8012e08:	461a      	mov	r2, r3
 8012e0a:	d32e      	bcc.n	8012e6a <quorem+0xfa>
 8012e0c:	613c      	str	r4, [r7, #16]
 8012e0e:	4638      	mov	r0, r7
 8012e10:	f001 fcf4 	bl	80147fc <__mcmp>
 8012e14:	2800      	cmp	r0, #0
 8012e16:	db24      	blt.n	8012e62 <quorem+0xf2>
 8012e18:	3601      	adds	r6, #1
 8012e1a:	4628      	mov	r0, r5
 8012e1c:	f04f 0c00 	mov.w	ip, #0
 8012e20:	f858 2b04 	ldr.w	r2, [r8], #4
 8012e24:	f8d0 e000 	ldr.w	lr, [r0]
 8012e28:	b293      	uxth	r3, r2
 8012e2a:	ebac 0303 	sub.w	r3, ip, r3
 8012e2e:	0c12      	lsrs	r2, r2, #16
 8012e30:	fa13 f38e 	uxtah	r3, r3, lr
 8012e34:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012e38:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012e3c:	b29b      	uxth	r3, r3
 8012e3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012e42:	45c1      	cmp	r9, r8
 8012e44:	f840 3b04 	str.w	r3, [r0], #4
 8012e48:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012e4c:	d2e8      	bcs.n	8012e20 <quorem+0xb0>
 8012e4e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012e52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012e56:	b922      	cbnz	r2, 8012e62 <quorem+0xf2>
 8012e58:	3b04      	subs	r3, #4
 8012e5a:	429d      	cmp	r5, r3
 8012e5c:	461a      	mov	r2, r3
 8012e5e:	d30a      	bcc.n	8012e76 <quorem+0x106>
 8012e60:	613c      	str	r4, [r7, #16]
 8012e62:	4630      	mov	r0, r6
 8012e64:	b003      	add	sp, #12
 8012e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e6a:	6812      	ldr	r2, [r2, #0]
 8012e6c:	3b04      	subs	r3, #4
 8012e6e:	2a00      	cmp	r2, #0
 8012e70:	d1cc      	bne.n	8012e0c <quorem+0x9c>
 8012e72:	3c01      	subs	r4, #1
 8012e74:	e7c7      	b.n	8012e06 <quorem+0x96>
 8012e76:	6812      	ldr	r2, [r2, #0]
 8012e78:	3b04      	subs	r3, #4
 8012e7a:	2a00      	cmp	r2, #0
 8012e7c:	d1f0      	bne.n	8012e60 <quorem+0xf0>
 8012e7e:	3c01      	subs	r4, #1
 8012e80:	e7eb      	b.n	8012e5a <quorem+0xea>
 8012e82:	2000      	movs	r0, #0
 8012e84:	e7ee      	b.n	8012e64 <quorem+0xf4>
	...

08012e88 <_dtoa_r>:
 8012e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e8c:	ed2d 8b04 	vpush	{d8-d9}
 8012e90:	ec57 6b10 	vmov	r6, r7, d0
 8012e94:	b093      	sub	sp, #76	; 0x4c
 8012e96:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012e98:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8012e9c:	9106      	str	r1, [sp, #24]
 8012e9e:	ee10 aa10 	vmov	sl, s0
 8012ea2:	4604      	mov	r4, r0
 8012ea4:	9209      	str	r2, [sp, #36]	; 0x24
 8012ea6:	930c      	str	r3, [sp, #48]	; 0x30
 8012ea8:	46bb      	mov	fp, r7
 8012eaa:	b975      	cbnz	r5, 8012eca <_dtoa_r+0x42>
 8012eac:	2010      	movs	r0, #16
 8012eae:	f7fd fea9 	bl	8010c04 <malloc>
 8012eb2:	4602      	mov	r2, r0
 8012eb4:	6260      	str	r0, [r4, #36]	; 0x24
 8012eb6:	b920      	cbnz	r0, 8012ec2 <_dtoa_r+0x3a>
 8012eb8:	4ba7      	ldr	r3, [pc, #668]	; (8013158 <_dtoa_r+0x2d0>)
 8012eba:	21ea      	movs	r1, #234	; 0xea
 8012ebc:	48a7      	ldr	r0, [pc, #668]	; (801315c <_dtoa_r+0x2d4>)
 8012ebe:	f7ff ff25 	bl	8012d0c <__assert_func>
 8012ec2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012ec6:	6005      	str	r5, [r0, #0]
 8012ec8:	60c5      	str	r5, [r0, #12]
 8012eca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012ecc:	6819      	ldr	r1, [r3, #0]
 8012ece:	b151      	cbz	r1, 8012ee6 <_dtoa_r+0x5e>
 8012ed0:	685a      	ldr	r2, [r3, #4]
 8012ed2:	604a      	str	r2, [r1, #4]
 8012ed4:	2301      	movs	r3, #1
 8012ed6:	4093      	lsls	r3, r2
 8012ed8:	608b      	str	r3, [r1, #8]
 8012eda:	4620      	mov	r0, r4
 8012edc:	f001 fa02 	bl	80142e4 <_Bfree>
 8012ee0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012ee2:	2200      	movs	r2, #0
 8012ee4:	601a      	str	r2, [r3, #0]
 8012ee6:	1e3b      	subs	r3, r7, #0
 8012ee8:	bfaa      	itet	ge
 8012eea:	2300      	movge	r3, #0
 8012eec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8012ef0:	f8c8 3000 	strge.w	r3, [r8]
 8012ef4:	4b9a      	ldr	r3, [pc, #616]	; (8013160 <_dtoa_r+0x2d8>)
 8012ef6:	bfbc      	itt	lt
 8012ef8:	2201      	movlt	r2, #1
 8012efa:	f8c8 2000 	strlt.w	r2, [r8]
 8012efe:	ea33 030b 	bics.w	r3, r3, fp
 8012f02:	d11b      	bne.n	8012f3c <_dtoa_r+0xb4>
 8012f04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012f06:	f242 730f 	movw	r3, #9999	; 0x270f
 8012f0a:	6013      	str	r3, [r2, #0]
 8012f0c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012f10:	4333      	orrs	r3, r6
 8012f12:	f000 8592 	beq.w	8013a3a <_dtoa_r+0xbb2>
 8012f16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012f18:	b963      	cbnz	r3, 8012f34 <_dtoa_r+0xac>
 8012f1a:	4b92      	ldr	r3, [pc, #584]	; (8013164 <_dtoa_r+0x2dc>)
 8012f1c:	e022      	b.n	8012f64 <_dtoa_r+0xdc>
 8012f1e:	4b92      	ldr	r3, [pc, #584]	; (8013168 <_dtoa_r+0x2e0>)
 8012f20:	9301      	str	r3, [sp, #4]
 8012f22:	3308      	adds	r3, #8
 8012f24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012f26:	6013      	str	r3, [r2, #0]
 8012f28:	9801      	ldr	r0, [sp, #4]
 8012f2a:	b013      	add	sp, #76	; 0x4c
 8012f2c:	ecbd 8b04 	vpop	{d8-d9}
 8012f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f34:	4b8b      	ldr	r3, [pc, #556]	; (8013164 <_dtoa_r+0x2dc>)
 8012f36:	9301      	str	r3, [sp, #4]
 8012f38:	3303      	adds	r3, #3
 8012f3a:	e7f3      	b.n	8012f24 <_dtoa_r+0x9c>
 8012f3c:	2200      	movs	r2, #0
 8012f3e:	2300      	movs	r3, #0
 8012f40:	4650      	mov	r0, sl
 8012f42:	4659      	mov	r1, fp
 8012f44:	f7ed fdd8 	bl	8000af8 <__aeabi_dcmpeq>
 8012f48:	ec4b ab19 	vmov	d9, sl, fp
 8012f4c:	4680      	mov	r8, r0
 8012f4e:	b158      	cbz	r0, 8012f68 <_dtoa_r+0xe0>
 8012f50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012f52:	2301      	movs	r3, #1
 8012f54:	6013      	str	r3, [r2, #0]
 8012f56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	f000 856b 	beq.w	8013a34 <_dtoa_r+0xbac>
 8012f5e:	4883      	ldr	r0, [pc, #524]	; (801316c <_dtoa_r+0x2e4>)
 8012f60:	6018      	str	r0, [r3, #0]
 8012f62:	1e43      	subs	r3, r0, #1
 8012f64:	9301      	str	r3, [sp, #4]
 8012f66:	e7df      	b.n	8012f28 <_dtoa_r+0xa0>
 8012f68:	ec4b ab10 	vmov	d0, sl, fp
 8012f6c:	aa10      	add	r2, sp, #64	; 0x40
 8012f6e:	a911      	add	r1, sp, #68	; 0x44
 8012f70:	4620      	mov	r0, r4
 8012f72:	f001 fd65 	bl	8014a40 <__d2b>
 8012f76:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8012f7a:	ee08 0a10 	vmov	s16, r0
 8012f7e:	2d00      	cmp	r5, #0
 8012f80:	f000 8084 	beq.w	801308c <_dtoa_r+0x204>
 8012f84:	ee19 3a90 	vmov	r3, s19
 8012f88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012f8c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8012f90:	4656      	mov	r6, sl
 8012f92:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8012f96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8012f9a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8012f9e:	4b74      	ldr	r3, [pc, #464]	; (8013170 <_dtoa_r+0x2e8>)
 8012fa0:	2200      	movs	r2, #0
 8012fa2:	4630      	mov	r0, r6
 8012fa4:	4639      	mov	r1, r7
 8012fa6:	f7ed f987 	bl	80002b8 <__aeabi_dsub>
 8012faa:	a365      	add	r3, pc, #404	; (adr r3, 8013140 <_dtoa_r+0x2b8>)
 8012fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fb0:	f7ed fb3a 	bl	8000628 <__aeabi_dmul>
 8012fb4:	a364      	add	r3, pc, #400	; (adr r3, 8013148 <_dtoa_r+0x2c0>)
 8012fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fba:	f7ed f97f 	bl	80002bc <__adddf3>
 8012fbe:	4606      	mov	r6, r0
 8012fc0:	4628      	mov	r0, r5
 8012fc2:	460f      	mov	r7, r1
 8012fc4:	f7ed fac6 	bl	8000554 <__aeabi_i2d>
 8012fc8:	a361      	add	r3, pc, #388	; (adr r3, 8013150 <_dtoa_r+0x2c8>)
 8012fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fce:	f7ed fb2b 	bl	8000628 <__aeabi_dmul>
 8012fd2:	4602      	mov	r2, r0
 8012fd4:	460b      	mov	r3, r1
 8012fd6:	4630      	mov	r0, r6
 8012fd8:	4639      	mov	r1, r7
 8012fda:	f7ed f96f 	bl	80002bc <__adddf3>
 8012fde:	4606      	mov	r6, r0
 8012fe0:	460f      	mov	r7, r1
 8012fe2:	f7ed fdd1 	bl	8000b88 <__aeabi_d2iz>
 8012fe6:	2200      	movs	r2, #0
 8012fe8:	9000      	str	r0, [sp, #0]
 8012fea:	2300      	movs	r3, #0
 8012fec:	4630      	mov	r0, r6
 8012fee:	4639      	mov	r1, r7
 8012ff0:	f7ed fd8c 	bl	8000b0c <__aeabi_dcmplt>
 8012ff4:	b150      	cbz	r0, 801300c <_dtoa_r+0x184>
 8012ff6:	9800      	ldr	r0, [sp, #0]
 8012ff8:	f7ed faac 	bl	8000554 <__aeabi_i2d>
 8012ffc:	4632      	mov	r2, r6
 8012ffe:	463b      	mov	r3, r7
 8013000:	f7ed fd7a 	bl	8000af8 <__aeabi_dcmpeq>
 8013004:	b910      	cbnz	r0, 801300c <_dtoa_r+0x184>
 8013006:	9b00      	ldr	r3, [sp, #0]
 8013008:	3b01      	subs	r3, #1
 801300a:	9300      	str	r3, [sp, #0]
 801300c:	9b00      	ldr	r3, [sp, #0]
 801300e:	2b16      	cmp	r3, #22
 8013010:	d85a      	bhi.n	80130c8 <_dtoa_r+0x240>
 8013012:	9a00      	ldr	r2, [sp, #0]
 8013014:	4b57      	ldr	r3, [pc, #348]	; (8013174 <_dtoa_r+0x2ec>)
 8013016:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801301a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801301e:	ec51 0b19 	vmov	r0, r1, d9
 8013022:	f7ed fd73 	bl	8000b0c <__aeabi_dcmplt>
 8013026:	2800      	cmp	r0, #0
 8013028:	d050      	beq.n	80130cc <_dtoa_r+0x244>
 801302a:	9b00      	ldr	r3, [sp, #0]
 801302c:	3b01      	subs	r3, #1
 801302e:	9300      	str	r3, [sp, #0]
 8013030:	2300      	movs	r3, #0
 8013032:	930b      	str	r3, [sp, #44]	; 0x2c
 8013034:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013036:	1b5d      	subs	r5, r3, r5
 8013038:	1e6b      	subs	r3, r5, #1
 801303a:	9305      	str	r3, [sp, #20]
 801303c:	bf45      	ittet	mi
 801303e:	f1c5 0301 	rsbmi	r3, r5, #1
 8013042:	9304      	strmi	r3, [sp, #16]
 8013044:	2300      	movpl	r3, #0
 8013046:	2300      	movmi	r3, #0
 8013048:	bf4c      	ite	mi
 801304a:	9305      	strmi	r3, [sp, #20]
 801304c:	9304      	strpl	r3, [sp, #16]
 801304e:	9b00      	ldr	r3, [sp, #0]
 8013050:	2b00      	cmp	r3, #0
 8013052:	db3d      	blt.n	80130d0 <_dtoa_r+0x248>
 8013054:	9b05      	ldr	r3, [sp, #20]
 8013056:	9a00      	ldr	r2, [sp, #0]
 8013058:	920a      	str	r2, [sp, #40]	; 0x28
 801305a:	4413      	add	r3, r2
 801305c:	9305      	str	r3, [sp, #20]
 801305e:	2300      	movs	r3, #0
 8013060:	9307      	str	r3, [sp, #28]
 8013062:	9b06      	ldr	r3, [sp, #24]
 8013064:	2b09      	cmp	r3, #9
 8013066:	f200 8089 	bhi.w	801317c <_dtoa_r+0x2f4>
 801306a:	2b05      	cmp	r3, #5
 801306c:	bfc4      	itt	gt
 801306e:	3b04      	subgt	r3, #4
 8013070:	9306      	strgt	r3, [sp, #24]
 8013072:	9b06      	ldr	r3, [sp, #24]
 8013074:	f1a3 0302 	sub.w	r3, r3, #2
 8013078:	bfcc      	ite	gt
 801307a:	2500      	movgt	r5, #0
 801307c:	2501      	movle	r5, #1
 801307e:	2b03      	cmp	r3, #3
 8013080:	f200 8087 	bhi.w	8013192 <_dtoa_r+0x30a>
 8013084:	e8df f003 	tbb	[pc, r3]
 8013088:	59383a2d 	.word	0x59383a2d
 801308c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8013090:	441d      	add	r5, r3
 8013092:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8013096:	2b20      	cmp	r3, #32
 8013098:	bfc1      	itttt	gt
 801309a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801309e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80130a2:	fa0b f303 	lslgt.w	r3, fp, r3
 80130a6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80130aa:	bfda      	itte	le
 80130ac:	f1c3 0320 	rsble	r3, r3, #32
 80130b0:	fa06 f003 	lslle.w	r0, r6, r3
 80130b4:	4318      	orrgt	r0, r3
 80130b6:	f7ed fa3d 	bl	8000534 <__aeabi_ui2d>
 80130ba:	2301      	movs	r3, #1
 80130bc:	4606      	mov	r6, r0
 80130be:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80130c2:	3d01      	subs	r5, #1
 80130c4:	930e      	str	r3, [sp, #56]	; 0x38
 80130c6:	e76a      	b.n	8012f9e <_dtoa_r+0x116>
 80130c8:	2301      	movs	r3, #1
 80130ca:	e7b2      	b.n	8013032 <_dtoa_r+0x1aa>
 80130cc:	900b      	str	r0, [sp, #44]	; 0x2c
 80130ce:	e7b1      	b.n	8013034 <_dtoa_r+0x1ac>
 80130d0:	9b04      	ldr	r3, [sp, #16]
 80130d2:	9a00      	ldr	r2, [sp, #0]
 80130d4:	1a9b      	subs	r3, r3, r2
 80130d6:	9304      	str	r3, [sp, #16]
 80130d8:	4253      	negs	r3, r2
 80130da:	9307      	str	r3, [sp, #28]
 80130dc:	2300      	movs	r3, #0
 80130de:	930a      	str	r3, [sp, #40]	; 0x28
 80130e0:	e7bf      	b.n	8013062 <_dtoa_r+0x1da>
 80130e2:	2300      	movs	r3, #0
 80130e4:	9308      	str	r3, [sp, #32]
 80130e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	dc55      	bgt.n	8013198 <_dtoa_r+0x310>
 80130ec:	2301      	movs	r3, #1
 80130ee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80130f2:	461a      	mov	r2, r3
 80130f4:	9209      	str	r2, [sp, #36]	; 0x24
 80130f6:	e00c      	b.n	8013112 <_dtoa_r+0x28a>
 80130f8:	2301      	movs	r3, #1
 80130fa:	e7f3      	b.n	80130e4 <_dtoa_r+0x25c>
 80130fc:	2300      	movs	r3, #0
 80130fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013100:	9308      	str	r3, [sp, #32]
 8013102:	9b00      	ldr	r3, [sp, #0]
 8013104:	4413      	add	r3, r2
 8013106:	9302      	str	r3, [sp, #8]
 8013108:	3301      	adds	r3, #1
 801310a:	2b01      	cmp	r3, #1
 801310c:	9303      	str	r3, [sp, #12]
 801310e:	bfb8      	it	lt
 8013110:	2301      	movlt	r3, #1
 8013112:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8013114:	2200      	movs	r2, #0
 8013116:	6042      	str	r2, [r0, #4]
 8013118:	2204      	movs	r2, #4
 801311a:	f102 0614 	add.w	r6, r2, #20
 801311e:	429e      	cmp	r6, r3
 8013120:	6841      	ldr	r1, [r0, #4]
 8013122:	d93d      	bls.n	80131a0 <_dtoa_r+0x318>
 8013124:	4620      	mov	r0, r4
 8013126:	f001 f89d 	bl	8014264 <_Balloc>
 801312a:	9001      	str	r0, [sp, #4]
 801312c:	2800      	cmp	r0, #0
 801312e:	d13b      	bne.n	80131a8 <_dtoa_r+0x320>
 8013130:	4b11      	ldr	r3, [pc, #68]	; (8013178 <_dtoa_r+0x2f0>)
 8013132:	4602      	mov	r2, r0
 8013134:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8013138:	e6c0      	b.n	8012ebc <_dtoa_r+0x34>
 801313a:	2301      	movs	r3, #1
 801313c:	e7df      	b.n	80130fe <_dtoa_r+0x276>
 801313e:	bf00      	nop
 8013140:	636f4361 	.word	0x636f4361
 8013144:	3fd287a7 	.word	0x3fd287a7
 8013148:	8b60c8b3 	.word	0x8b60c8b3
 801314c:	3fc68a28 	.word	0x3fc68a28
 8013150:	509f79fb 	.word	0x509f79fb
 8013154:	3fd34413 	.word	0x3fd34413
 8013158:	08018f08 	.word	0x08018f08
 801315c:	080190ed 	.word	0x080190ed
 8013160:	7ff00000 	.word	0x7ff00000
 8013164:	080190e9 	.word	0x080190e9
 8013168:	080190e0 	.word	0x080190e0
 801316c:	08019505 	.word	0x08019505
 8013170:	3ff80000 	.word	0x3ff80000
 8013174:	080192b8 	.word	0x080192b8
 8013178:	08019148 	.word	0x08019148
 801317c:	2501      	movs	r5, #1
 801317e:	2300      	movs	r3, #0
 8013180:	9306      	str	r3, [sp, #24]
 8013182:	9508      	str	r5, [sp, #32]
 8013184:	f04f 33ff 	mov.w	r3, #4294967295
 8013188:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801318c:	2200      	movs	r2, #0
 801318e:	2312      	movs	r3, #18
 8013190:	e7b0      	b.n	80130f4 <_dtoa_r+0x26c>
 8013192:	2301      	movs	r3, #1
 8013194:	9308      	str	r3, [sp, #32]
 8013196:	e7f5      	b.n	8013184 <_dtoa_r+0x2fc>
 8013198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801319a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801319e:	e7b8      	b.n	8013112 <_dtoa_r+0x28a>
 80131a0:	3101      	adds	r1, #1
 80131a2:	6041      	str	r1, [r0, #4]
 80131a4:	0052      	lsls	r2, r2, #1
 80131a6:	e7b8      	b.n	801311a <_dtoa_r+0x292>
 80131a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80131aa:	9a01      	ldr	r2, [sp, #4]
 80131ac:	601a      	str	r2, [r3, #0]
 80131ae:	9b03      	ldr	r3, [sp, #12]
 80131b0:	2b0e      	cmp	r3, #14
 80131b2:	f200 809d 	bhi.w	80132f0 <_dtoa_r+0x468>
 80131b6:	2d00      	cmp	r5, #0
 80131b8:	f000 809a 	beq.w	80132f0 <_dtoa_r+0x468>
 80131bc:	9b00      	ldr	r3, [sp, #0]
 80131be:	2b00      	cmp	r3, #0
 80131c0:	dd32      	ble.n	8013228 <_dtoa_r+0x3a0>
 80131c2:	4ab7      	ldr	r2, [pc, #732]	; (80134a0 <_dtoa_r+0x618>)
 80131c4:	f003 030f 	and.w	r3, r3, #15
 80131c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80131cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80131d0:	9b00      	ldr	r3, [sp, #0]
 80131d2:	05d8      	lsls	r0, r3, #23
 80131d4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80131d8:	d516      	bpl.n	8013208 <_dtoa_r+0x380>
 80131da:	4bb2      	ldr	r3, [pc, #712]	; (80134a4 <_dtoa_r+0x61c>)
 80131dc:	ec51 0b19 	vmov	r0, r1, d9
 80131e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80131e4:	f7ed fb4a 	bl	800087c <__aeabi_ddiv>
 80131e8:	f007 070f 	and.w	r7, r7, #15
 80131ec:	4682      	mov	sl, r0
 80131ee:	468b      	mov	fp, r1
 80131f0:	2503      	movs	r5, #3
 80131f2:	4eac      	ldr	r6, [pc, #688]	; (80134a4 <_dtoa_r+0x61c>)
 80131f4:	b957      	cbnz	r7, 801320c <_dtoa_r+0x384>
 80131f6:	4642      	mov	r2, r8
 80131f8:	464b      	mov	r3, r9
 80131fa:	4650      	mov	r0, sl
 80131fc:	4659      	mov	r1, fp
 80131fe:	f7ed fb3d 	bl	800087c <__aeabi_ddiv>
 8013202:	4682      	mov	sl, r0
 8013204:	468b      	mov	fp, r1
 8013206:	e028      	b.n	801325a <_dtoa_r+0x3d2>
 8013208:	2502      	movs	r5, #2
 801320a:	e7f2      	b.n	80131f2 <_dtoa_r+0x36a>
 801320c:	07f9      	lsls	r1, r7, #31
 801320e:	d508      	bpl.n	8013222 <_dtoa_r+0x39a>
 8013210:	4640      	mov	r0, r8
 8013212:	4649      	mov	r1, r9
 8013214:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013218:	f7ed fa06 	bl	8000628 <__aeabi_dmul>
 801321c:	3501      	adds	r5, #1
 801321e:	4680      	mov	r8, r0
 8013220:	4689      	mov	r9, r1
 8013222:	107f      	asrs	r7, r7, #1
 8013224:	3608      	adds	r6, #8
 8013226:	e7e5      	b.n	80131f4 <_dtoa_r+0x36c>
 8013228:	f000 809b 	beq.w	8013362 <_dtoa_r+0x4da>
 801322c:	9b00      	ldr	r3, [sp, #0]
 801322e:	4f9d      	ldr	r7, [pc, #628]	; (80134a4 <_dtoa_r+0x61c>)
 8013230:	425e      	negs	r6, r3
 8013232:	4b9b      	ldr	r3, [pc, #620]	; (80134a0 <_dtoa_r+0x618>)
 8013234:	f006 020f 	and.w	r2, r6, #15
 8013238:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801323c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013240:	ec51 0b19 	vmov	r0, r1, d9
 8013244:	f7ed f9f0 	bl	8000628 <__aeabi_dmul>
 8013248:	1136      	asrs	r6, r6, #4
 801324a:	4682      	mov	sl, r0
 801324c:	468b      	mov	fp, r1
 801324e:	2300      	movs	r3, #0
 8013250:	2502      	movs	r5, #2
 8013252:	2e00      	cmp	r6, #0
 8013254:	d17a      	bne.n	801334c <_dtoa_r+0x4c4>
 8013256:	2b00      	cmp	r3, #0
 8013258:	d1d3      	bne.n	8013202 <_dtoa_r+0x37a>
 801325a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801325c:	2b00      	cmp	r3, #0
 801325e:	f000 8082 	beq.w	8013366 <_dtoa_r+0x4de>
 8013262:	4b91      	ldr	r3, [pc, #580]	; (80134a8 <_dtoa_r+0x620>)
 8013264:	2200      	movs	r2, #0
 8013266:	4650      	mov	r0, sl
 8013268:	4659      	mov	r1, fp
 801326a:	f7ed fc4f 	bl	8000b0c <__aeabi_dcmplt>
 801326e:	2800      	cmp	r0, #0
 8013270:	d079      	beq.n	8013366 <_dtoa_r+0x4de>
 8013272:	9b03      	ldr	r3, [sp, #12]
 8013274:	2b00      	cmp	r3, #0
 8013276:	d076      	beq.n	8013366 <_dtoa_r+0x4de>
 8013278:	9b02      	ldr	r3, [sp, #8]
 801327a:	2b00      	cmp	r3, #0
 801327c:	dd36      	ble.n	80132ec <_dtoa_r+0x464>
 801327e:	9b00      	ldr	r3, [sp, #0]
 8013280:	4650      	mov	r0, sl
 8013282:	4659      	mov	r1, fp
 8013284:	1e5f      	subs	r7, r3, #1
 8013286:	2200      	movs	r2, #0
 8013288:	4b88      	ldr	r3, [pc, #544]	; (80134ac <_dtoa_r+0x624>)
 801328a:	f7ed f9cd 	bl	8000628 <__aeabi_dmul>
 801328e:	9e02      	ldr	r6, [sp, #8]
 8013290:	4682      	mov	sl, r0
 8013292:	468b      	mov	fp, r1
 8013294:	3501      	adds	r5, #1
 8013296:	4628      	mov	r0, r5
 8013298:	f7ed f95c 	bl	8000554 <__aeabi_i2d>
 801329c:	4652      	mov	r2, sl
 801329e:	465b      	mov	r3, fp
 80132a0:	f7ed f9c2 	bl	8000628 <__aeabi_dmul>
 80132a4:	4b82      	ldr	r3, [pc, #520]	; (80134b0 <_dtoa_r+0x628>)
 80132a6:	2200      	movs	r2, #0
 80132a8:	f7ed f808 	bl	80002bc <__adddf3>
 80132ac:	46d0      	mov	r8, sl
 80132ae:	46d9      	mov	r9, fp
 80132b0:	4682      	mov	sl, r0
 80132b2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80132b6:	2e00      	cmp	r6, #0
 80132b8:	d158      	bne.n	801336c <_dtoa_r+0x4e4>
 80132ba:	4b7e      	ldr	r3, [pc, #504]	; (80134b4 <_dtoa_r+0x62c>)
 80132bc:	2200      	movs	r2, #0
 80132be:	4640      	mov	r0, r8
 80132c0:	4649      	mov	r1, r9
 80132c2:	f7ec fff9 	bl	80002b8 <__aeabi_dsub>
 80132c6:	4652      	mov	r2, sl
 80132c8:	465b      	mov	r3, fp
 80132ca:	4680      	mov	r8, r0
 80132cc:	4689      	mov	r9, r1
 80132ce:	f7ed fc3b 	bl	8000b48 <__aeabi_dcmpgt>
 80132d2:	2800      	cmp	r0, #0
 80132d4:	f040 8295 	bne.w	8013802 <_dtoa_r+0x97a>
 80132d8:	4652      	mov	r2, sl
 80132da:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80132de:	4640      	mov	r0, r8
 80132e0:	4649      	mov	r1, r9
 80132e2:	f7ed fc13 	bl	8000b0c <__aeabi_dcmplt>
 80132e6:	2800      	cmp	r0, #0
 80132e8:	f040 8289 	bne.w	80137fe <_dtoa_r+0x976>
 80132ec:	ec5b ab19 	vmov	sl, fp, d9
 80132f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	f2c0 8148 	blt.w	8013588 <_dtoa_r+0x700>
 80132f8:	9a00      	ldr	r2, [sp, #0]
 80132fa:	2a0e      	cmp	r2, #14
 80132fc:	f300 8144 	bgt.w	8013588 <_dtoa_r+0x700>
 8013300:	4b67      	ldr	r3, [pc, #412]	; (80134a0 <_dtoa_r+0x618>)
 8013302:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013306:	e9d3 8900 	ldrd	r8, r9, [r3]
 801330a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801330c:	2b00      	cmp	r3, #0
 801330e:	f280 80d5 	bge.w	80134bc <_dtoa_r+0x634>
 8013312:	9b03      	ldr	r3, [sp, #12]
 8013314:	2b00      	cmp	r3, #0
 8013316:	f300 80d1 	bgt.w	80134bc <_dtoa_r+0x634>
 801331a:	f040 826f 	bne.w	80137fc <_dtoa_r+0x974>
 801331e:	4b65      	ldr	r3, [pc, #404]	; (80134b4 <_dtoa_r+0x62c>)
 8013320:	2200      	movs	r2, #0
 8013322:	4640      	mov	r0, r8
 8013324:	4649      	mov	r1, r9
 8013326:	f7ed f97f 	bl	8000628 <__aeabi_dmul>
 801332a:	4652      	mov	r2, sl
 801332c:	465b      	mov	r3, fp
 801332e:	f7ed fc01 	bl	8000b34 <__aeabi_dcmpge>
 8013332:	9e03      	ldr	r6, [sp, #12]
 8013334:	4637      	mov	r7, r6
 8013336:	2800      	cmp	r0, #0
 8013338:	f040 8245 	bne.w	80137c6 <_dtoa_r+0x93e>
 801333c:	9d01      	ldr	r5, [sp, #4]
 801333e:	2331      	movs	r3, #49	; 0x31
 8013340:	f805 3b01 	strb.w	r3, [r5], #1
 8013344:	9b00      	ldr	r3, [sp, #0]
 8013346:	3301      	adds	r3, #1
 8013348:	9300      	str	r3, [sp, #0]
 801334a:	e240      	b.n	80137ce <_dtoa_r+0x946>
 801334c:	07f2      	lsls	r2, r6, #31
 801334e:	d505      	bpl.n	801335c <_dtoa_r+0x4d4>
 8013350:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013354:	f7ed f968 	bl	8000628 <__aeabi_dmul>
 8013358:	3501      	adds	r5, #1
 801335a:	2301      	movs	r3, #1
 801335c:	1076      	asrs	r6, r6, #1
 801335e:	3708      	adds	r7, #8
 8013360:	e777      	b.n	8013252 <_dtoa_r+0x3ca>
 8013362:	2502      	movs	r5, #2
 8013364:	e779      	b.n	801325a <_dtoa_r+0x3d2>
 8013366:	9f00      	ldr	r7, [sp, #0]
 8013368:	9e03      	ldr	r6, [sp, #12]
 801336a:	e794      	b.n	8013296 <_dtoa_r+0x40e>
 801336c:	9901      	ldr	r1, [sp, #4]
 801336e:	4b4c      	ldr	r3, [pc, #304]	; (80134a0 <_dtoa_r+0x618>)
 8013370:	4431      	add	r1, r6
 8013372:	910d      	str	r1, [sp, #52]	; 0x34
 8013374:	9908      	ldr	r1, [sp, #32]
 8013376:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801337a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801337e:	2900      	cmp	r1, #0
 8013380:	d043      	beq.n	801340a <_dtoa_r+0x582>
 8013382:	494d      	ldr	r1, [pc, #308]	; (80134b8 <_dtoa_r+0x630>)
 8013384:	2000      	movs	r0, #0
 8013386:	f7ed fa79 	bl	800087c <__aeabi_ddiv>
 801338a:	4652      	mov	r2, sl
 801338c:	465b      	mov	r3, fp
 801338e:	f7ec ff93 	bl	80002b8 <__aeabi_dsub>
 8013392:	9d01      	ldr	r5, [sp, #4]
 8013394:	4682      	mov	sl, r0
 8013396:	468b      	mov	fp, r1
 8013398:	4649      	mov	r1, r9
 801339a:	4640      	mov	r0, r8
 801339c:	f7ed fbf4 	bl	8000b88 <__aeabi_d2iz>
 80133a0:	4606      	mov	r6, r0
 80133a2:	f7ed f8d7 	bl	8000554 <__aeabi_i2d>
 80133a6:	4602      	mov	r2, r0
 80133a8:	460b      	mov	r3, r1
 80133aa:	4640      	mov	r0, r8
 80133ac:	4649      	mov	r1, r9
 80133ae:	f7ec ff83 	bl	80002b8 <__aeabi_dsub>
 80133b2:	3630      	adds	r6, #48	; 0x30
 80133b4:	f805 6b01 	strb.w	r6, [r5], #1
 80133b8:	4652      	mov	r2, sl
 80133ba:	465b      	mov	r3, fp
 80133bc:	4680      	mov	r8, r0
 80133be:	4689      	mov	r9, r1
 80133c0:	f7ed fba4 	bl	8000b0c <__aeabi_dcmplt>
 80133c4:	2800      	cmp	r0, #0
 80133c6:	d163      	bne.n	8013490 <_dtoa_r+0x608>
 80133c8:	4642      	mov	r2, r8
 80133ca:	464b      	mov	r3, r9
 80133cc:	4936      	ldr	r1, [pc, #216]	; (80134a8 <_dtoa_r+0x620>)
 80133ce:	2000      	movs	r0, #0
 80133d0:	f7ec ff72 	bl	80002b8 <__aeabi_dsub>
 80133d4:	4652      	mov	r2, sl
 80133d6:	465b      	mov	r3, fp
 80133d8:	f7ed fb98 	bl	8000b0c <__aeabi_dcmplt>
 80133dc:	2800      	cmp	r0, #0
 80133de:	f040 80b5 	bne.w	801354c <_dtoa_r+0x6c4>
 80133e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80133e4:	429d      	cmp	r5, r3
 80133e6:	d081      	beq.n	80132ec <_dtoa_r+0x464>
 80133e8:	4b30      	ldr	r3, [pc, #192]	; (80134ac <_dtoa_r+0x624>)
 80133ea:	2200      	movs	r2, #0
 80133ec:	4650      	mov	r0, sl
 80133ee:	4659      	mov	r1, fp
 80133f0:	f7ed f91a 	bl	8000628 <__aeabi_dmul>
 80133f4:	4b2d      	ldr	r3, [pc, #180]	; (80134ac <_dtoa_r+0x624>)
 80133f6:	4682      	mov	sl, r0
 80133f8:	468b      	mov	fp, r1
 80133fa:	4640      	mov	r0, r8
 80133fc:	4649      	mov	r1, r9
 80133fe:	2200      	movs	r2, #0
 8013400:	f7ed f912 	bl	8000628 <__aeabi_dmul>
 8013404:	4680      	mov	r8, r0
 8013406:	4689      	mov	r9, r1
 8013408:	e7c6      	b.n	8013398 <_dtoa_r+0x510>
 801340a:	4650      	mov	r0, sl
 801340c:	4659      	mov	r1, fp
 801340e:	f7ed f90b 	bl	8000628 <__aeabi_dmul>
 8013412:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013414:	9d01      	ldr	r5, [sp, #4]
 8013416:	930f      	str	r3, [sp, #60]	; 0x3c
 8013418:	4682      	mov	sl, r0
 801341a:	468b      	mov	fp, r1
 801341c:	4649      	mov	r1, r9
 801341e:	4640      	mov	r0, r8
 8013420:	f7ed fbb2 	bl	8000b88 <__aeabi_d2iz>
 8013424:	4606      	mov	r6, r0
 8013426:	f7ed f895 	bl	8000554 <__aeabi_i2d>
 801342a:	3630      	adds	r6, #48	; 0x30
 801342c:	4602      	mov	r2, r0
 801342e:	460b      	mov	r3, r1
 8013430:	4640      	mov	r0, r8
 8013432:	4649      	mov	r1, r9
 8013434:	f7ec ff40 	bl	80002b8 <__aeabi_dsub>
 8013438:	f805 6b01 	strb.w	r6, [r5], #1
 801343c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801343e:	429d      	cmp	r5, r3
 8013440:	4680      	mov	r8, r0
 8013442:	4689      	mov	r9, r1
 8013444:	f04f 0200 	mov.w	r2, #0
 8013448:	d124      	bne.n	8013494 <_dtoa_r+0x60c>
 801344a:	4b1b      	ldr	r3, [pc, #108]	; (80134b8 <_dtoa_r+0x630>)
 801344c:	4650      	mov	r0, sl
 801344e:	4659      	mov	r1, fp
 8013450:	f7ec ff34 	bl	80002bc <__adddf3>
 8013454:	4602      	mov	r2, r0
 8013456:	460b      	mov	r3, r1
 8013458:	4640      	mov	r0, r8
 801345a:	4649      	mov	r1, r9
 801345c:	f7ed fb74 	bl	8000b48 <__aeabi_dcmpgt>
 8013460:	2800      	cmp	r0, #0
 8013462:	d173      	bne.n	801354c <_dtoa_r+0x6c4>
 8013464:	4652      	mov	r2, sl
 8013466:	465b      	mov	r3, fp
 8013468:	4913      	ldr	r1, [pc, #76]	; (80134b8 <_dtoa_r+0x630>)
 801346a:	2000      	movs	r0, #0
 801346c:	f7ec ff24 	bl	80002b8 <__aeabi_dsub>
 8013470:	4602      	mov	r2, r0
 8013472:	460b      	mov	r3, r1
 8013474:	4640      	mov	r0, r8
 8013476:	4649      	mov	r1, r9
 8013478:	f7ed fb48 	bl	8000b0c <__aeabi_dcmplt>
 801347c:	2800      	cmp	r0, #0
 801347e:	f43f af35 	beq.w	80132ec <_dtoa_r+0x464>
 8013482:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8013484:	1e6b      	subs	r3, r5, #1
 8013486:	930f      	str	r3, [sp, #60]	; 0x3c
 8013488:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801348c:	2b30      	cmp	r3, #48	; 0x30
 801348e:	d0f8      	beq.n	8013482 <_dtoa_r+0x5fa>
 8013490:	9700      	str	r7, [sp, #0]
 8013492:	e049      	b.n	8013528 <_dtoa_r+0x6a0>
 8013494:	4b05      	ldr	r3, [pc, #20]	; (80134ac <_dtoa_r+0x624>)
 8013496:	f7ed f8c7 	bl	8000628 <__aeabi_dmul>
 801349a:	4680      	mov	r8, r0
 801349c:	4689      	mov	r9, r1
 801349e:	e7bd      	b.n	801341c <_dtoa_r+0x594>
 80134a0:	080192b8 	.word	0x080192b8
 80134a4:	08019290 	.word	0x08019290
 80134a8:	3ff00000 	.word	0x3ff00000
 80134ac:	40240000 	.word	0x40240000
 80134b0:	401c0000 	.word	0x401c0000
 80134b4:	40140000 	.word	0x40140000
 80134b8:	3fe00000 	.word	0x3fe00000
 80134bc:	9d01      	ldr	r5, [sp, #4]
 80134be:	4656      	mov	r6, sl
 80134c0:	465f      	mov	r7, fp
 80134c2:	4642      	mov	r2, r8
 80134c4:	464b      	mov	r3, r9
 80134c6:	4630      	mov	r0, r6
 80134c8:	4639      	mov	r1, r7
 80134ca:	f7ed f9d7 	bl	800087c <__aeabi_ddiv>
 80134ce:	f7ed fb5b 	bl	8000b88 <__aeabi_d2iz>
 80134d2:	4682      	mov	sl, r0
 80134d4:	f7ed f83e 	bl	8000554 <__aeabi_i2d>
 80134d8:	4642      	mov	r2, r8
 80134da:	464b      	mov	r3, r9
 80134dc:	f7ed f8a4 	bl	8000628 <__aeabi_dmul>
 80134e0:	4602      	mov	r2, r0
 80134e2:	460b      	mov	r3, r1
 80134e4:	4630      	mov	r0, r6
 80134e6:	4639      	mov	r1, r7
 80134e8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80134ec:	f7ec fee4 	bl	80002b8 <__aeabi_dsub>
 80134f0:	f805 6b01 	strb.w	r6, [r5], #1
 80134f4:	9e01      	ldr	r6, [sp, #4]
 80134f6:	9f03      	ldr	r7, [sp, #12]
 80134f8:	1bae      	subs	r6, r5, r6
 80134fa:	42b7      	cmp	r7, r6
 80134fc:	4602      	mov	r2, r0
 80134fe:	460b      	mov	r3, r1
 8013500:	d135      	bne.n	801356e <_dtoa_r+0x6e6>
 8013502:	f7ec fedb 	bl	80002bc <__adddf3>
 8013506:	4642      	mov	r2, r8
 8013508:	464b      	mov	r3, r9
 801350a:	4606      	mov	r6, r0
 801350c:	460f      	mov	r7, r1
 801350e:	f7ed fb1b 	bl	8000b48 <__aeabi_dcmpgt>
 8013512:	b9d0      	cbnz	r0, 801354a <_dtoa_r+0x6c2>
 8013514:	4642      	mov	r2, r8
 8013516:	464b      	mov	r3, r9
 8013518:	4630      	mov	r0, r6
 801351a:	4639      	mov	r1, r7
 801351c:	f7ed faec 	bl	8000af8 <__aeabi_dcmpeq>
 8013520:	b110      	cbz	r0, 8013528 <_dtoa_r+0x6a0>
 8013522:	f01a 0f01 	tst.w	sl, #1
 8013526:	d110      	bne.n	801354a <_dtoa_r+0x6c2>
 8013528:	4620      	mov	r0, r4
 801352a:	ee18 1a10 	vmov	r1, s16
 801352e:	f000 fed9 	bl	80142e4 <_Bfree>
 8013532:	2300      	movs	r3, #0
 8013534:	9800      	ldr	r0, [sp, #0]
 8013536:	702b      	strb	r3, [r5, #0]
 8013538:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801353a:	3001      	adds	r0, #1
 801353c:	6018      	str	r0, [r3, #0]
 801353e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013540:	2b00      	cmp	r3, #0
 8013542:	f43f acf1 	beq.w	8012f28 <_dtoa_r+0xa0>
 8013546:	601d      	str	r5, [r3, #0]
 8013548:	e4ee      	b.n	8012f28 <_dtoa_r+0xa0>
 801354a:	9f00      	ldr	r7, [sp, #0]
 801354c:	462b      	mov	r3, r5
 801354e:	461d      	mov	r5, r3
 8013550:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013554:	2a39      	cmp	r2, #57	; 0x39
 8013556:	d106      	bne.n	8013566 <_dtoa_r+0x6de>
 8013558:	9a01      	ldr	r2, [sp, #4]
 801355a:	429a      	cmp	r2, r3
 801355c:	d1f7      	bne.n	801354e <_dtoa_r+0x6c6>
 801355e:	9901      	ldr	r1, [sp, #4]
 8013560:	2230      	movs	r2, #48	; 0x30
 8013562:	3701      	adds	r7, #1
 8013564:	700a      	strb	r2, [r1, #0]
 8013566:	781a      	ldrb	r2, [r3, #0]
 8013568:	3201      	adds	r2, #1
 801356a:	701a      	strb	r2, [r3, #0]
 801356c:	e790      	b.n	8013490 <_dtoa_r+0x608>
 801356e:	4ba6      	ldr	r3, [pc, #664]	; (8013808 <_dtoa_r+0x980>)
 8013570:	2200      	movs	r2, #0
 8013572:	f7ed f859 	bl	8000628 <__aeabi_dmul>
 8013576:	2200      	movs	r2, #0
 8013578:	2300      	movs	r3, #0
 801357a:	4606      	mov	r6, r0
 801357c:	460f      	mov	r7, r1
 801357e:	f7ed fabb 	bl	8000af8 <__aeabi_dcmpeq>
 8013582:	2800      	cmp	r0, #0
 8013584:	d09d      	beq.n	80134c2 <_dtoa_r+0x63a>
 8013586:	e7cf      	b.n	8013528 <_dtoa_r+0x6a0>
 8013588:	9a08      	ldr	r2, [sp, #32]
 801358a:	2a00      	cmp	r2, #0
 801358c:	f000 80d7 	beq.w	801373e <_dtoa_r+0x8b6>
 8013590:	9a06      	ldr	r2, [sp, #24]
 8013592:	2a01      	cmp	r2, #1
 8013594:	f300 80ba 	bgt.w	801370c <_dtoa_r+0x884>
 8013598:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801359a:	2a00      	cmp	r2, #0
 801359c:	f000 80b2 	beq.w	8013704 <_dtoa_r+0x87c>
 80135a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80135a4:	9e07      	ldr	r6, [sp, #28]
 80135a6:	9d04      	ldr	r5, [sp, #16]
 80135a8:	9a04      	ldr	r2, [sp, #16]
 80135aa:	441a      	add	r2, r3
 80135ac:	9204      	str	r2, [sp, #16]
 80135ae:	9a05      	ldr	r2, [sp, #20]
 80135b0:	2101      	movs	r1, #1
 80135b2:	441a      	add	r2, r3
 80135b4:	4620      	mov	r0, r4
 80135b6:	9205      	str	r2, [sp, #20]
 80135b8:	f000 ff96 	bl	80144e8 <__i2b>
 80135bc:	4607      	mov	r7, r0
 80135be:	2d00      	cmp	r5, #0
 80135c0:	dd0c      	ble.n	80135dc <_dtoa_r+0x754>
 80135c2:	9b05      	ldr	r3, [sp, #20]
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	dd09      	ble.n	80135dc <_dtoa_r+0x754>
 80135c8:	42ab      	cmp	r3, r5
 80135ca:	9a04      	ldr	r2, [sp, #16]
 80135cc:	bfa8      	it	ge
 80135ce:	462b      	movge	r3, r5
 80135d0:	1ad2      	subs	r2, r2, r3
 80135d2:	9204      	str	r2, [sp, #16]
 80135d4:	9a05      	ldr	r2, [sp, #20]
 80135d6:	1aed      	subs	r5, r5, r3
 80135d8:	1ad3      	subs	r3, r2, r3
 80135da:	9305      	str	r3, [sp, #20]
 80135dc:	9b07      	ldr	r3, [sp, #28]
 80135de:	b31b      	cbz	r3, 8013628 <_dtoa_r+0x7a0>
 80135e0:	9b08      	ldr	r3, [sp, #32]
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	f000 80af 	beq.w	8013746 <_dtoa_r+0x8be>
 80135e8:	2e00      	cmp	r6, #0
 80135ea:	dd13      	ble.n	8013614 <_dtoa_r+0x78c>
 80135ec:	4639      	mov	r1, r7
 80135ee:	4632      	mov	r2, r6
 80135f0:	4620      	mov	r0, r4
 80135f2:	f001 f839 	bl	8014668 <__pow5mult>
 80135f6:	ee18 2a10 	vmov	r2, s16
 80135fa:	4601      	mov	r1, r0
 80135fc:	4607      	mov	r7, r0
 80135fe:	4620      	mov	r0, r4
 8013600:	f000 ff88 	bl	8014514 <__multiply>
 8013604:	ee18 1a10 	vmov	r1, s16
 8013608:	4680      	mov	r8, r0
 801360a:	4620      	mov	r0, r4
 801360c:	f000 fe6a 	bl	80142e4 <_Bfree>
 8013610:	ee08 8a10 	vmov	s16, r8
 8013614:	9b07      	ldr	r3, [sp, #28]
 8013616:	1b9a      	subs	r2, r3, r6
 8013618:	d006      	beq.n	8013628 <_dtoa_r+0x7a0>
 801361a:	ee18 1a10 	vmov	r1, s16
 801361e:	4620      	mov	r0, r4
 8013620:	f001 f822 	bl	8014668 <__pow5mult>
 8013624:	ee08 0a10 	vmov	s16, r0
 8013628:	2101      	movs	r1, #1
 801362a:	4620      	mov	r0, r4
 801362c:	f000 ff5c 	bl	80144e8 <__i2b>
 8013630:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013632:	2b00      	cmp	r3, #0
 8013634:	4606      	mov	r6, r0
 8013636:	f340 8088 	ble.w	801374a <_dtoa_r+0x8c2>
 801363a:	461a      	mov	r2, r3
 801363c:	4601      	mov	r1, r0
 801363e:	4620      	mov	r0, r4
 8013640:	f001 f812 	bl	8014668 <__pow5mult>
 8013644:	9b06      	ldr	r3, [sp, #24]
 8013646:	2b01      	cmp	r3, #1
 8013648:	4606      	mov	r6, r0
 801364a:	f340 8081 	ble.w	8013750 <_dtoa_r+0x8c8>
 801364e:	f04f 0800 	mov.w	r8, #0
 8013652:	6933      	ldr	r3, [r6, #16]
 8013654:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8013658:	6918      	ldr	r0, [r3, #16]
 801365a:	f000 fef5 	bl	8014448 <__hi0bits>
 801365e:	f1c0 0020 	rsb	r0, r0, #32
 8013662:	9b05      	ldr	r3, [sp, #20]
 8013664:	4418      	add	r0, r3
 8013666:	f010 001f 	ands.w	r0, r0, #31
 801366a:	f000 8092 	beq.w	8013792 <_dtoa_r+0x90a>
 801366e:	f1c0 0320 	rsb	r3, r0, #32
 8013672:	2b04      	cmp	r3, #4
 8013674:	f340 808a 	ble.w	801378c <_dtoa_r+0x904>
 8013678:	f1c0 001c 	rsb	r0, r0, #28
 801367c:	9b04      	ldr	r3, [sp, #16]
 801367e:	4403      	add	r3, r0
 8013680:	9304      	str	r3, [sp, #16]
 8013682:	9b05      	ldr	r3, [sp, #20]
 8013684:	4403      	add	r3, r0
 8013686:	4405      	add	r5, r0
 8013688:	9305      	str	r3, [sp, #20]
 801368a:	9b04      	ldr	r3, [sp, #16]
 801368c:	2b00      	cmp	r3, #0
 801368e:	dd07      	ble.n	80136a0 <_dtoa_r+0x818>
 8013690:	ee18 1a10 	vmov	r1, s16
 8013694:	461a      	mov	r2, r3
 8013696:	4620      	mov	r0, r4
 8013698:	f001 f840 	bl	801471c <__lshift>
 801369c:	ee08 0a10 	vmov	s16, r0
 80136a0:	9b05      	ldr	r3, [sp, #20]
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	dd05      	ble.n	80136b2 <_dtoa_r+0x82a>
 80136a6:	4631      	mov	r1, r6
 80136a8:	461a      	mov	r2, r3
 80136aa:	4620      	mov	r0, r4
 80136ac:	f001 f836 	bl	801471c <__lshift>
 80136b0:	4606      	mov	r6, r0
 80136b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	d06e      	beq.n	8013796 <_dtoa_r+0x90e>
 80136b8:	ee18 0a10 	vmov	r0, s16
 80136bc:	4631      	mov	r1, r6
 80136be:	f001 f89d 	bl	80147fc <__mcmp>
 80136c2:	2800      	cmp	r0, #0
 80136c4:	da67      	bge.n	8013796 <_dtoa_r+0x90e>
 80136c6:	9b00      	ldr	r3, [sp, #0]
 80136c8:	3b01      	subs	r3, #1
 80136ca:	ee18 1a10 	vmov	r1, s16
 80136ce:	9300      	str	r3, [sp, #0]
 80136d0:	220a      	movs	r2, #10
 80136d2:	2300      	movs	r3, #0
 80136d4:	4620      	mov	r0, r4
 80136d6:	f000 fe27 	bl	8014328 <__multadd>
 80136da:	9b08      	ldr	r3, [sp, #32]
 80136dc:	ee08 0a10 	vmov	s16, r0
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	f000 81b1 	beq.w	8013a48 <_dtoa_r+0xbc0>
 80136e6:	2300      	movs	r3, #0
 80136e8:	4639      	mov	r1, r7
 80136ea:	220a      	movs	r2, #10
 80136ec:	4620      	mov	r0, r4
 80136ee:	f000 fe1b 	bl	8014328 <__multadd>
 80136f2:	9b02      	ldr	r3, [sp, #8]
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	4607      	mov	r7, r0
 80136f8:	f300 808e 	bgt.w	8013818 <_dtoa_r+0x990>
 80136fc:	9b06      	ldr	r3, [sp, #24]
 80136fe:	2b02      	cmp	r3, #2
 8013700:	dc51      	bgt.n	80137a6 <_dtoa_r+0x91e>
 8013702:	e089      	b.n	8013818 <_dtoa_r+0x990>
 8013704:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013706:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801370a:	e74b      	b.n	80135a4 <_dtoa_r+0x71c>
 801370c:	9b03      	ldr	r3, [sp, #12]
 801370e:	1e5e      	subs	r6, r3, #1
 8013710:	9b07      	ldr	r3, [sp, #28]
 8013712:	42b3      	cmp	r3, r6
 8013714:	bfbf      	itttt	lt
 8013716:	9b07      	ldrlt	r3, [sp, #28]
 8013718:	9607      	strlt	r6, [sp, #28]
 801371a:	1af2      	sublt	r2, r6, r3
 801371c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801371e:	bfb6      	itet	lt
 8013720:	189b      	addlt	r3, r3, r2
 8013722:	1b9e      	subge	r6, r3, r6
 8013724:	930a      	strlt	r3, [sp, #40]	; 0x28
 8013726:	9b03      	ldr	r3, [sp, #12]
 8013728:	bfb8      	it	lt
 801372a:	2600      	movlt	r6, #0
 801372c:	2b00      	cmp	r3, #0
 801372e:	bfb7      	itett	lt
 8013730:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8013734:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8013738:	1a9d      	sublt	r5, r3, r2
 801373a:	2300      	movlt	r3, #0
 801373c:	e734      	b.n	80135a8 <_dtoa_r+0x720>
 801373e:	9e07      	ldr	r6, [sp, #28]
 8013740:	9d04      	ldr	r5, [sp, #16]
 8013742:	9f08      	ldr	r7, [sp, #32]
 8013744:	e73b      	b.n	80135be <_dtoa_r+0x736>
 8013746:	9a07      	ldr	r2, [sp, #28]
 8013748:	e767      	b.n	801361a <_dtoa_r+0x792>
 801374a:	9b06      	ldr	r3, [sp, #24]
 801374c:	2b01      	cmp	r3, #1
 801374e:	dc18      	bgt.n	8013782 <_dtoa_r+0x8fa>
 8013750:	f1ba 0f00 	cmp.w	sl, #0
 8013754:	d115      	bne.n	8013782 <_dtoa_r+0x8fa>
 8013756:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801375a:	b993      	cbnz	r3, 8013782 <_dtoa_r+0x8fa>
 801375c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013760:	0d1b      	lsrs	r3, r3, #20
 8013762:	051b      	lsls	r3, r3, #20
 8013764:	b183      	cbz	r3, 8013788 <_dtoa_r+0x900>
 8013766:	9b04      	ldr	r3, [sp, #16]
 8013768:	3301      	adds	r3, #1
 801376a:	9304      	str	r3, [sp, #16]
 801376c:	9b05      	ldr	r3, [sp, #20]
 801376e:	3301      	adds	r3, #1
 8013770:	9305      	str	r3, [sp, #20]
 8013772:	f04f 0801 	mov.w	r8, #1
 8013776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013778:	2b00      	cmp	r3, #0
 801377a:	f47f af6a 	bne.w	8013652 <_dtoa_r+0x7ca>
 801377e:	2001      	movs	r0, #1
 8013780:	e76f      	b.n	8013662 <_dtoa_r+0x7da>
 8013782:	f04f 0800 	mov.w	r8, #0
 8013786:	e7f6      	b.n	8013776 <_dtoa_r+0x8ee>
 8013788:	4698      	mov	r8, r3
 801378a:	e7f4      	b.n	8013776 <_dtoa_r+0x8ee>
 801378c:	f43f af7d 	beq.w	801368a <_dtoa_r+0x802>
 8013790:	4618      	mov	r0, r3
 8013792:	301c      	adds	r0, #28
 8013794:	e772      	b.n	801367c <_dtoa_r+0x7f4>
 8013796:	9b03      	ldr	r3, [sp, #12]
 8013798:	2b00      	cmp	r3, #0
 801379a:	dc37      	bgt.n	801380c <_dtoa_r+0x984>
 801379c:	9b06      	ldr	r3, [sp, #24]
 801379e:	2b02      	cmp	r3, #2
 80137a0:	dd34      	ble.n	801380c <_dtoa_r+0x984>
 80137a2:	9b03      	ldr	r3, [sp, #12]
 80137a4:	9302      	str	r3, [sp, #8]
 80137a6:	9b02      	ldr	r3, [sp, #8]
 80137a8:	b96b      	cbnz	r3, 80137c6 <_dtoa_r+0x93e>
 80137aa:	4631      	mov	r1, r6
 80137ac:	2205      	movs	r2, #5
 80137ae:	4620      	mov	r0, r4
 80137b0:	f000 fdba 	bl	8014328 <__multadd>
 80137b4:	4601      	mov	r1, r0
 80137b6:	4606      	mov	r6, r0
 80137b8:	ee18 0a10 	vmov	r0, s16
 80137bc:	f001 f81e 	bl	80147fc <__mcmp>
 80137c0:	2800      	cmp	r0, #0
 80137c2:	f73f adbb 	bgt.w	801333c <_dtoa_r+0x4b4>
 80137c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80137c8:	9d01      	ldr	r5, [sp, #4]
 80137ca:	43db      	mvns	r3, r3
 80137cc:	9300      	str	r3, [sp, #0]
 80137ce:	f04f 0800 	mov.w	r8, #0
 80137d2:	4631      	mov	r1, r6
 80137d4:	4620      	mov	r0, r4
 80137d6:	f000 fd85 	bl	80142e4 <_Bfree>
 80137da:	2f00      	cmp	r7, #0
 80137dc:	f43f aea4 	beq.w	8013528 <_dtoa_r+0x6a0>
 80137e0:	f1b8 0f00 	cmp.w	r8, #0
 80137e4:	d005      	beq.n	80137f2 <_dtoa_r+0x96a>
 80137e6:	45b8      	cmp	r8, r7
 80137e8:	d003      	beq.n	80137f2 <_dtoa_r+0x96a>
 80137ea:	4641      	mov	r1, r8
 80137ec:	4620      	mov	r0, r4
 80137ee:	f000 fd79 	bl	80142e4 <_Bfree>
 80137f2:	4639      	mov	r1, r7
 80137f4:	4620      	mov	r0, r4
 80137f6:	f000 fd75 	bl	80142e4 <_Bfree>
 80137fa:	e695      	b.n	8013528 <_dtoa_r+0x6a0>
 80137fc:	2600      	movs	r6, #0
 80137fe:	4637      	mov	r7, r6
 8013800:	e7e1      	b.n	80137c6 <_dtoa_r+0x93e>
 8013802:	9700      	str	r7, [sp, #0]
 8013804:	4637      	mov	r7, r6
 8013806:	e599      	b.n	801333c <_dtoa_r+0x4b4>
 8013808:	40240000 	.word	0x40240000
 801380c:	9b08      	ldr	r3, [sp, #32]
 801380e:	2b00      	cmp	r3, #0
 8013810:	f000 80ca 	beq.w	80139a8 <_dtoa_r+0xb20>
 8013814:	9b03      	ldr	r3, [sp, #12]
 8013816:	9302      	str	r3, [sp, #8]
 8013818:	2d00      	cmp	r5, #0
 801381a:	dd05      	ble.n	8013828 <_dtoa_r+0x9a0>
 801381c:	4639      	mov	r1, r7
 801381e:	462a      	mov	r2, r5
 8013820:	4620      	mov	r0, r4
 8013822:	f000 ff7b 	bl	801471c <__lshift>
 8013826:	4607      	mov	r7, r0
 8013828:	f1b8 0f00 	cmp.w	r8, #0
 801382c:	d05b      	beq.n	80138e6 <_dtoa_r+0xa5e>
 801382e:	6879      	ldr	r1, [r7, #4]
 8013830:	4620      	mov	r0, r4
 8013832:	f000 fd17 	bl	8014264 <_Balloc>
 8013836:	4605      	mov	r5, r0
 8013838:	b928      	cbnz	r0, 8013846 <_dtoa_r+0x9be>
 801383a:	4b87      	ldr	r3, [pc, #540]	; (8013a58 <_dtoa_r+0xbd0>)
 801383c:	4602      	mov	r2, r0
 801383e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8013842:	f7ff bb3b 	b.w	8012ebc <_dtoa_r+0x34>
 8013846:	693a      	ldr	r2, [r7, #16]
 8013848:	3202      	adds	r2, #2
 801384a:	0092      	lsls	r2, r2, #2
 801384c:	f107 010c 	add.w	r1, r7, #12
 8013850:	300c      	adds	r0, #12
 8013852:	f000 fcec 	bl	801422e <memcpy>
 8013856:	2201      	movs	r2, #1
 8013858:	4629      	mov	r1, r5
 801385a:	4620      	mov	r0, r4
 801385c:	f000 ff5e 	bl	801471c <__lshift>
 8013860:	9b01      	ldr	r3, [sp, #4]
 8013862:	f103 0901 	add.w	r9, r3, #1
 8013866:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801386a:	4413      	add	r3, r2
 801386c:	9305      	str	r3, [sp, #20]
 801386e:	f00a 0301 	and.w	r3, sl, #1
 8013872:	46b8      	mov	r8, r7
 8013874:	9304      	str	r3, [sp, #16]
 8013876:	4607      	mov	r7, r0
 8013878:	4631      	mov	r1, r6
 801387a:	ee18 0a10 	vmov	r0, s16
 801387e:	f7ff fa77 	bl	8012d70 <quorem>
 8013882:	4641      	mov	r1, r8
 8013884:	9002      	str	r0, [sp, #8]
 8013886:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801388a:	ee18 0a10 	vmov	r0, s16
 801388e:	f000 ffb5 	bl	80147fc <__mcmp>
 8013892:	463a      	mov	r2, r7
 8013894:	9003      	str	r0, [sp, #12]
 8013896:	4631      	mov	r1, r6
 8013898:	4620      	mov	r0, r4
 801389a:	f000 ffcb 	bl	8014834 <__mdiff>
 801389e:	68c2      	ldr	r2, [r0, #12]
 80138a0:	f109 3bff 	add.w	fp, r9, #4294967295
 80138a4:	4605      	mov	r5, r0
 80138a6:	bb02      	cbnz	r2, 80138ea <_dtoa_r+0xa62>
 80138a8:	4601      	mov	r1, r0
 80138aa:	ee18 0a10 	vmov	r0, s16
 80138ae:	f000 ffa5 	bl	80147fc <__mcmp>
 80138b2:	4602      	mov	r2, r0
 80138b4:	4629      	mov	r1, r5
 80138b6:	4620      	mov	r0, r4
 80138b8:	9207      	str	r2, [sp, #28]
 80138ba:	f000 fd13 	bl	80142e4 <_Bfree>
 80138be:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80138c2:	ea43 0102 	orr.w	r1, r3, r2
 80138c6:	9b04      	ldr	r3, [sp, #16]
 80138c8:	430b      	orrs	r3, r1
 80138ca:	464d      	mov	r5, r9
 80138cc:	d10f      	bne.n	80138ee <_dtoa_r+0xa66>
 80138ce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80138d2:	d02a      	beq.n	801392a <_dtoa_r+0xaa2>
 80138d4:	9b03      	ldr	r3, [sp, #12]
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	dd02      	ble.n	80138e0 <_dtoa_r+0xa58>
 80138da:	9b02      	ldr	r3, [sp, #8]
 80138dc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80138e0:	f88b a000 	strb.w	sl, [fp]
 80138e4:	e775      	b.n	80137d2 <_dtoa_r+0x94a>
 80138e6:	4638      	mov	r0, r7
 80138e8:	e7ba      	b.n	8013860 <_dtoa_r+0x9d8>
 80138ea:	2201      	movs	r2, #1
 80138ec:	e7e2      	b.n	80138b4 <_dtoa_r+0xa2c>
 80138ee:	9b03      	ldr	r3, [sp, #12]
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	db04      	blt.n	80138fe <_dtoa_r+0xa76>
 80138f4:	9906      	ldr	r1, [sp, #24]
 80138f6:	430b      	orrs	r3, r1
 80138f8:	9904      	ldr	r1, [sp, #16]
 80138fa:	430b      	orrs	r3, r1
 80138fc:	d122      	bne.n	8013944 <_dtoa_r+0xabc>
 80138fe:	2a00      	cmp	r2, #0
 8013900:	ddee      	ble.n	80138e0 <_dtoa_r+0xa58>
 8013902:	ee18 1a10 	vmov	r1, s16
 8013906:	2201      	movs	r2, #1
 8013908:	4620      	mov	r0, r4
 801390a:	f000 ff07 	bl	801471c <__lshift>
 801390e:	4631      	mov	r1, r6
 8013910:	ee08 0a10 	vmov	s16, r0
 8013914:	f000 ff72 	bl	80147fc <__mcmp>
 8013918:	2800      	cmp	r0, #0
 801391a:	dc03      	bgt.n	8013924 <_dtoa_r+0xa9c>
 801391c:	d1e0      	bne.n	80138e0 <_dtoa_r+0xa58>
 801391e:	f01a 0f01 	tst.w	sl, #1
 8013922:	d0dd      	beq.n	80138e0 <_dtoa_r+0xa58>
 8013924:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8013928:	d1d7      	bne.n	80138da <_dtoa_r+0xa52>
 801392a:	2339      	movs	r3, #57	; 0x39
 801392c:	f88b 3000 	strb.w	r3, [fp]
 8013930:	462b      	mov	r3, r5
 8013932:	461d      	mov	r5, r3
 8013934:	3b01      	subs	r3, #1
 8013936:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801393a:	2a39      	cmp	r2, #57	; 0x39
 801393c:	d071      	beq.n	8013a22 <_dtoa_r+0xb9a>
 801393e:	3201      	adds	r2, #1
 8013940:	701a      	strb	r2, [r3, #0]
 8013942:	e746      	b.n	80137d2 <_dtoa_r+0x94a>
 8013944:	2a00      	cmp	r2, #0
 8013946:	dd07      	ble.n	8013958 <_dtoa_r+0xad0>
 8013948:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801394c:	d0ed      	beq.n	801392a <_dtoa_r+0xaa2>
 801394e:	f10a 0301 	add.w	r3, sl, #1
 8013952:	f88b 3000 	strb.w	r3, [fp]
 8013956:	e73c      	b.n	80137d2 <_dtoa_r+0x94a>
 8013958:	9b05      	ldr	r3, [sp, #20]
 801395a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801395e:	4599      	cmp	r9, r3
 8013960:	d047      	beq.n	80139f2 <_dtoa_r+0xb6a>
 8013962:	ee18 1a10 	vmov	r1, s16
 8013966:	2300      	movs	r3, #0
 8013968:	220a      	movs	r2, #10
 801396a:	4620      	mov	r0, r4
 801396c:	f000 fcdc 	bl	8014328 <__multadd>
 8013970:	45b8      	cmp	r8, r7
 8013972:	ee08 0a10 	vmov	s16, r0
 8013976:	f04f 0300 	mov.w	r3, #0
 801397a:	f04f 020a 	mov.w	r2, #10
 801397e:	4641      	mov	r1, r8
 8013980:	4620      	mov	r0, r4
 8013982:	d106      	bne.n	8013992 <_dtoa_r+0xb0a>
 8013984:	f000 fcd0 	bl	8014328 <__multadd>
 8013988:	4680      	mov	r8, r0
 801398a:	4607      	mov	r7, r0
 801398c:	f109 0901 	add.w	r9, r9, #1
 8013990:	e772      	b.n	8013878 <_dtoa_r+0x9f0>
 8013992:	f000 fcc9 	bl	8014328 <__multadd>
 8013996:	4639      	mov	r1, r7
 8013998:	4680      	mov	r8, r0
 801399a:	2300      	movs	r3, #0
 801399c:	220a      	movs	r2, #10
 801399e:	4620      	mov	r0, r4
 80139a0:	f000 fcc2 	bl	8014328 <__multadd>
 80139a4:	4607      	mov	r7, r0
 80139a6:	e7f1      	b.n	801398c <_dtoa_r+0xb04>
 80139a8:	9b03      	ldr	r3, [sp, #12]
 80139aa:	9302      	str	r3, [sp, #8]
 80139ac:	9d01      	ldr	r5, [sp, #4]
 80139ae:	ee18 0a10 	vmov	r0, s16
 80139b2:	4631      	mov	r1, r6
 80139b4:	f7ff f9dc 	bl	8012d70 <quorem>
 80139b8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80139bc:	9b01      	ldr	r3, [sp, #4]
 80139be:	f805 ab01 	strb.w	sl, [r5], #1
 80139c2:	1aea      	subs	r2, r5, r3
 80139c4:	9b02      	ldr	r3, [sp, #8]
 80139c6:	4293      	cmp	r3, r2
 80139c8:	dd09      	ble.n	80139de <_dtoa_r+0xb56>
 80139ca:	ee18 1a10 	vmov	r1, s16
 80139ce:	2300      	movs	r3, #0
 80139d0:	220a      	movs	r2, #10
 80139d2:	4620      	mov	r0, r4
 80139d4:	f000 fca8 	bl	8014328 <__multadd>
 80139d8:	ee08 0a10 	vmov	s16, r0
 80139dc:	e7e7      	b.n	80139ae <_dtoa_r+0xb26>
 80139de:	9b02      	ldr	r3, [sp, #8]
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	bfc8      	it	gt
 80139e4:	461d      	movgt	r5, r3
 80139e6:	9b01      	ldr	r3, [sp, #4]
 80139e8:	bfd8      	it	le
 80139ea:	2501      	movle	r5, #1
 80139ec:	441d      	add	r5, r3
 80139ee:	f04f 0800 	mov.w	r8, #0
 80139f2:	ee18 1a10 	vmov	r1, s16
 80139f6:	2201      	movs	r2, #1
 80139f8:	4620      	mov	r0, r4
 80139fa:	f000 fe8f 	bl	801471c <__lshift>
 80139fe:	4631      	mov	r1, r6
 8013a00:	ee08 0a10 	vmov	s16, r0
 8013a04:	f000 fefa 	bl	80147fc <__mcmp>
 8013a08:	2800      	cmp	r0, #0
 8013a0a:	dc91      	bgt.n	8013930 <_dtoa_r+0xaa8>
 8013a0c:	d102      	bne.n	8013a14 <_dtoa_r+0xb8c>
 8013a0e:	f01a 0f01 	tst.w	sl, #1
 8013a12:	d18d      	bne.n	8013930 <_dtoa_r+0xaa8>
 8013a14:	462b      	mov	r3, r5
 8013a16:	461d      	mov	r5, r3
 8013a18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013a1c:	2a30      	cmp	r2, #48	; 0x30
 8013a1e:	d0fa      	beq.n	8013a16 <_dtoa_r+0xb8e>
 8013a20:	e6d7      	b.n	80137d2 <_dtoa_r+0x94a>
 8013a22:	9a01      	ldr	r2, [sp, #4]
 8013a24:	429a      	cmp	r2, r3
 8013a26:	d184      	bne.n	8013932 <_dtoa_r+0xaaa>
 8013a28:	9b00      	ldr	r3, [sp, #0]
 8013a2a:	3301      	adds	r3, #1
 8013a2c:	9300      	str	r3, [sp, #0]
 8013a2e:	2331      	movs	r3, #49	; 0x31
 8013a30:	7013      	strb	r3, [r2, #0]
 8013a32:	e6ce      	b.n	80137d2 <_dtoa_r+0x94a>
 8013a34:	4b09      	ldr	r3, [pc, #36]	; (8013a5c <_dtoa_r+0xbd4>)
 8013a36:	f7ff ba95 	b.w	8012f64 <_dtoa_r+0xdc>
 8013a3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	f47f aa6e 	bne.w	8012f1e <_dtoa_r+0x96>
 8013a42:	4b07      	ldr	r3, [pc, #28]	; (8013a60 <_dtoa_r+0xbd8>)
 8013a44:	f7ff ba8e 	b.w	8012f64 <_dtoa_r+0xdc>
 8013a48:	9b02      	ldr	r3, [sp, #8]
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	dcae      	bgt.n	80139ac <_dtoa_r+0xb24>
 8013a4e:	9b06      	ldr	r3, [sp, #24]
 8013a50:	2b02      	cmp	r3, #2
 8013a52:	f73f aea8 	bgt.w	80137a6 <_dtoa_r+0x91e>
 8013a56:	e7a9      	b.n	80139ac <_dtoa_r+0xb24>
 8013a58:	08019148 	.word	0x08019148
 8013a5c:	08019504 	.word	0x08019504
 8013a60:	080190e0 	.word	0x080190e0

08013a64 <fiprintf>:
 8013a64:	b40e      	push	{r1, r2, r3}
 8013a66:	b503      	push	{r0, r1, lr}
 8013a68:	4601      	mov	r1, r0
 8013a6a:	ab03      	add	r3, sp, #12
 8013a6c:	4805      	ldr	r0, [pc, #20]	; (8013a84 <fiprintf+0x20>)
 8013a6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013a72:	6800      	ldr	r0, [r0, #0]
 8013a74:	9301      	str	r3, [sp, #4]
 8013a76:	f001 fa51 	bl	8014f1c <_vfiprintf_r>
 8013a7a:	b002      	add	sp, #8
 8013a7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013a80:	b003      	add	sp, #12
 8013a82:	4770      	bx	lr
 8013a84:	20000020 	.word	0x20000020

08013a88 <rshift>:
 8013a88:	6903      	ldr	r3, [r0, #16]
 8013a8a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8013a8e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013a92:	ea4f 1261 	mov.w	r2, r1, asr #5
 8013a96:	f100 0414 	add.w	r4, r0, #20
 8013a9a:	dd45      	ble.n	8013b28 <rshift+0xa0>
 8013a9c:	f011 011f 	ands.w	r1, r1, #31
 8013aa0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8013aa4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8013aa8:	d10c      	bne.n	8013ac4 <rshift+0x3c>
 8013aaa:	f100 0710 	add.w	r7, r0, #16
 8013aae:	4629      	mov	r1, r5
 8013ab0:	42b1      	cmp	r1, r6
 8013ab2:	d334      	bcc.n	8013b1e <rshift+0x96>
 8013ab4:	1a9b      	subs	r3, r3, r2
 8013ab6:	009b      	lsls	r3, r3, #2
 8013ab8:	1eea      	subs	r2, r5, #3
 8013aba:	4296      	cmp	r6, r2
 8013abc:	bf38      	it	cc
 8013abe:	2300      	movcc	r3, #0
 8013ac0:	4423      	add	r3, r4
 8013ac2:	e015      	b.n	8013af0 <rshift+0x68>
 8013ac4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8013ac8:	f1c1 0820 	rsb	r8, r1, #32
 8013acc:	40cf      	lsrs	r7, r1
 8013ace:	f105 0e04 	add.w	lr, r5, #4
 8013ad2:	46a1      	mov	r9, r4
 8013ad4:	4576      	cmp	r6, lr
 8013ad6:	46f4      	mov	ip, lr
 8013ad8:	d815      	bhi.n	8013b06 <rshift+0x7e>
 8013ada:	1a9a      	subs	r2, r3, r2
 8013adc:	0092      	lsls	r2, r2, #2
 8013ade:	3a04      	subs	r2, #4
 8013ae0:	3501      	adds	r5, #1
 8013ae2:	42ae      	cmp	r6, r5
 8013ae4:	bf38      	it	cc
 8013ae6:	2200      	movcc	r2, #0
 8013ae8:	18a3      	adds	r3, r4, r2
 8013aea:	50a7      	str	r7, [r4, r2]
 8013aec:	b107      	cbz	r7, 8013af0 <rshift+0x68>
 8013aee:	3304      	adds	r3, #4
 8013af0:	1b1a      	subs	r2, r3, r4
 8013af2:	42a3      	cmp	r3, r4
 8013af4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8013af8:	bf08      	it	eq
 8013afa:	2300      	moveq	r3, #0
 8013afc:	6102      	str	r2, [r0, #16]
 8013afe:	bf08      	it	eq
 8013b00:	6143      	streq	r3, [r0, #20]
 8013b02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013b06:	f8dc c000 	ldr.w	ip, [ip]
 8013b0a:	fa0c fc08 	lsl.w	ip, ip, r8
 8013b0e:	ea4c 0707 	orr.w	r7, ip, r7
 8013b12:	f849 7b04 	str.w	r7, [r9], #4
 8013b16:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013b1a:	40cf      	lsrs	r7, r1
 8013b1c:	e7da      	b.n	8013ad4 <rshift+0x4c>
 8013b1e:	f851 cb04 	ldr.w	ip, [r1], #4
 8013b22:	f847 cf04 	str.w	ip, [r7, #4]!
 8013b26:	e7c3      	b.n	8013ab0 <rshift+0x28>
 8013b28:	4623      	mov	r3, r4
 8013b2a:	e7e1      	b.n	8013af0 <rshift+0x68>

08013b2c <__hexdig_fun>:
 8013b2c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8013b30:	2b09      	cmp	r3, #9
 8013b32:	d802      	bhi.n	8013b3a <__hexdig_fun+0xe>
 8013b34:	3820      	subs	r0, #32
 8013b36:	b2c0      	uxtb	r0, r0
 8013b38:	4770      	bx	lr
 8013b3a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8013b3e:	2b05      	cmp	r3, #5
 8013b40:	d801      	bhi.n	8013b46 <__hexdig_fun+0x1a>
 8013b42:	3847      	subs	r0, #71	; 0x47
 8013b44:	e7f7      	b.n	8013b36 <__hexdig_fun+0xa>
 8013b46:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8013b4a:	2b05      	cmp	r3, #5
 8013b4c:	d801      	bhi.n	8013b52 <__hexdig_fun+0x26>
 8013b4e:	3827      	subs	r0, #39	; 0x27
 8013b50:	e7f1      	b.n	8013b36 <__hexdig_fun+0xa>
 8013b52:	2000      	movs	r0, #0
 8013b54:	4770      	bx	lr
	...

08013b58 <__gethex>:
 8013b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b5c:	ed2d 8b02 	vpush	{d8}
 8013b60:	b089      	sub	sp, #36	; 0x24
 8013b62:	ee08 0a10 	vmov	s16, r0
 8013b66:	9304      	str	r3, [sp, #16]
 8013b68:	4bb4      	ldr	r3, [pc, #720]	; (8013e3c <__gethex+0x2e4>)
 8013b6a:	681b      	ldr	r3, [r3, #0]
 8013b6c:	9301      	str	r3, [sp, #4]
 8013b6e:	4618      	mov	r0, r3
 8013b70:	468b      	mov	fp, r1
 8013b72:	4690      	mov	r8, r2
 8013b74:	f7ec fb3e 	bl	80001f4 <strlen>
 8013b78:	9b01      	ldr	r3, [sp, #4]
 8013b7a:	f8db 2000 	ldr.w	r2, [fp]
 8013b7e:	4403      	add	r3, r0
 8013b80:	4682      	mov	sl, r0
 8013b82:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8013b86:	9305      	str	r3, [sp, #20]
 8013b88:	1c93      	adds	r3, r2, #2
 8013b8a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8013b8e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8013b92:	32fe      	adds	r2, #254	; 0xfe
 8013b94:	18d1      	adds	r1, r2, r3
 8013b96:	461f      	mov	r7, r3
 8013b98:	f813 0b01 	ldrb.w	r0, [r3], #1
 8013b9c:	9100      	str	r1, [sp, #0]
 8013b9e:	2830      	cmp	r0, #48	; 0x30
 8013ba0:	d0f8      	beq.n	8013b94 <__gethex+0x3c>
 8013ba2:	f7ff ffc3 	bl	8013b2c <__hexdig_fun>
 8013ba6:	4604      	mov	r4, r0
 8013ba8:	2800      	cmp	r0, #0
 8013baa:	d13a      	bne.n	8013c22 <__gethex+0xca>
 8013bac:	9901      	ldr	r1, [sp, #4]
 8013bae:	4652      	mov	r2, sl
 8013bb0:	4638      	mov	r0, r7
 8013bb2:	f7fe f82b 	bl	8011c0c <strncmp>
 8013bb6:	4605      	mov	r5, r0
 8013bb8:	2800      	cmp	r0, #0
 8013bba:	d168      	bne.n	8013c8e <__gethex+0x136>
 8013bbc:	f817 000a 	ldrb.w	r0, [r7, sl]
 8013bc0:	eb07 060a 	add.w	r6, r7, sl
 8013bc4:	f7ff ffb2 	bl	8013b2c <__hexdig_fun>
 8013bc8:	2800      	cmp	r0, #0
 8013bca:	d062      	beq.n	8013c92 <__gethex+0x13a>
 8013bcc:	4633      	mov	r3, r6
 8013bce:	7818      	ldrb	r0, [r3, #0]
 8013bd0:	2830      	cmp	r0, #48	; 0x30
 8013bd2:	461f      	mov	r7, r3
 8013bd4:	f103 0301 	add.w	r3, r3, #1
 8013bd8:	d0f9      	beq.n	8013bce <__gethex+0x76>
 8013bda:	f7ff ffa7 	bl	8013b2c <__hexdig_fun>
 8013bde:	2301      	movs	r3, #1
 8013be0:	fab0 f480 	clz	r4, r0
 8013be4:	0964      	lsrs	r4, r4, #5
 8013be6:	4635      	mov	r5, r6
 8013be8:	9300      	str	r3, [sp, #0]
 8013bea:	463a      	mov	r2, r7
 8013bec:	4616      	mov	r6, r2
 8013bee:	3201      	adds	r2, #1
 8013bf0:	7830      	ldrb	r0, [r6, #0]
 8013bf2:	f7ff ff9b 	bl	8013b2c <__hexdig_fun>
 8013bf6:	2800      	cmp	r0, #0
 8013bf8:	d1f8      	bne.n	8013bec <__gethex+0x94>
 8013bfa:	9901      	ldr	r1, [sp, #4]
 8013bfc:	4652      	mov	r2, sl
 8013bfe:	4630      	mov	r0, r6
 8013c00:	f7fe f804 	bl	8011c0c <strncmp>
 8013c04:	b980      	cbnz	r0, 8013c28 <__gethex+0xd0>
 8013c06:	b94d      	cbnz	r5, 8013c1c <__gethex+0xc4>
 8013c08:	eb06 050a 	add.w	r5, r6, sl
 8013c0c:	462a      	mov	r2, r5
 8013c0e:	4616      	mov	r6, r2
 8013c10:	3201      	adds	r2, #1
 8013c12:	7830      	ldrb	r0, [r6, #0]
 8013c14:	f7ff ff8a 	bl	8013b2c <__hexdig_fun>
 8013c18:	2800      	cmp	r0, #0
 8013c1a:	d1f8      	bne.n	8013c0e <__gethex+0xb6>
 8013c1c:	1bad      	subs	r5, r5, r6
 8013c1e:	00ad      	lsls	r5, r5, #2
 8013c20:	e004      	b.n	8013c2c <__gethex+0xd4>
 8013c22:	2400      	movs	r4, #0
 8013c24:	4625      	mov	r5, r4
 8013c26:	e7e0      	b.n	8013bea <__gethex+0x92>
 8013c28:	2d00      	cmp	r5, #0
 8013c2a:	d1f7      	bne.n	8013c1c <__gethex+0xc4>
 8013c2c:	7833      	ldrb	r3, [r6, #0]
 8013c2e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013c32:	2b50      	cmp	r3, #80	; 0x50
 8013c34:	d13b      	bne.n	8013cae <__gethex+0x156>
 8013c36:	7873      	ldrb	r3, [r6, #1]
 8013c38:	2b2b      	cmp	r3, #43	; 0x2b
 8013c3a:	d02c      	beq.n	8013c96 <__gethex+0x13e>
 8013c3c:	2b2d      	cmp	r3, #45	; 0x2d
 8013c3e:	d02e      	beq.n	8013c9e <__gethex+0x146>
 8013c40:	1c71      	adds	r1, r6, #1
 8013c42:	f04f 0900 	mov.w	r9, #0
 8013c46:	7808      	ldrb	r0, [r1, #0]
 8013c48:	f7ff ff70 	bl	8013b2c <__hexdig_fun>
 8013c4c:	1e43      	subs	r3, r0, #1
 8013c4e:	b2db      	uxtb	r3, r3
 8013c50:	2b18      	cmp	r3, #24
 8013c52:	d82c      	bhi.n	8013cae <__gethex+0x156>
 8013c54:	f1a0 0210 	sub.w	r2, r0, #16
 8013c58:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8013c5c:	f7ff ff66 	bl	8013b2c <__hexdig_fun>
 8013c60:	1e43      	subs	r3, r0, #1
 8013c62:	b2db      	uxtb	r3, r3
 8013c64:	2b18      	cmp	r3, #24
 8013c66:	d91d      	bls.n	8013ca4 <__gethex+0x14c>
 8013c68:	f1b9 0f00 	cmp.w	r9, #0
 8013c6c:	d000      	beq.n	8013c70 <__gethex+0x118>
 8013c6e:	4252      	negs	r2, r2
 8013c70:	4415      	add	r5, r2
 8013c72:	f8cb 1000 	str.w	r1, [fp]
 8013c76:	b1e4      	cbz	r4, 8013cb2 <__gethex+0x15a>
 8013c78:	9b00      	ldr	r3, [sp, #0]
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	bf14      	ite	ne
 8013c7e:	2700      	movne	r7, #0
 8013c80:	2706      	moveq	r7, #6
 8013c82:	4638      	mov	r0, r7
 8013c84:	b009      	add	sp, #36	; 0x24
 8013c86:	ecbd 8b02 	vpop	{d8}
 8013c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c8e:	463e      	mov	r6, r7
 8013c90:	4625      	mov	r5, r4
 8013c92:	2401      	movs	r4, #1
 8013c94:	e7ca      	b.n	8013c2c <__gethex+0xd4>
 8013c96:	f04f 0900 	mov.w	r9, #0
 8013c9a:	1cb1      	adds	r1, r6, #2
 8013c9c:	e7d3      	b.n	8013c46 <__gethex+0xee>
 8013c9e:	f04f 0901 	mov.w	r9, #1
 8013ca2:	e7fa      	b.n	8013c9a <__gethex+0x142>
 8013ca4:	230a      	movs	r3, #10
 8013ca6:	fb03 0202 	mla	r2, r3, r2, r0
 8013caa:	3a10      	subs	r2, #16
 8013cac:	e7d4      	b.n	8013c58 <__gethex+0x100>
 8013cae:	4631      	mov	r1, r6
 8013cb0:	e7df      	b.n	8013c72 <__gethex+0x11a>
 8013cb2:	1bf3      	subs	r3, r6, r7
 8013cb4:	3b01      	subs	r3, #1
 8013cb6:	4621      	mov	r1, r4
 8013cb8:	2b07      	cmp	r3, #7
 8013cba:	dc0b      	bgt.n	8013cd4 <__gethex+0x17c>
 8013cbc:	ee18 0a10 	vmov	r0, s16
 8013cc0:	f000 fad0 	bl	8014264 <_Balloc>
 8013cc4:	4604      	mov	r4, r0
 8013cc6:	b940      	cbnz	r0, 8013cda <__gethex+0x182>
 8013cc8:	4b5d      	ldr	r3, [pc, #372]	; (8013e40 <__gethex+0x2e8>)
 8013cca:	4602      	mov	r2, r0
 8013ccc:	21de      	movs	r1, #222	; 0xde
 8013cce:	485d      	ldr	r0, [pc, #372]	; (8013e44 <__gethex+0x2ec>)
 8013cd0:	f7ff f81c 	bl	8012d0c <__assert_func>
 8013cd4:	3101      	adds	r1, #1
 8013cd6:	105b      	asrs	r3, r3, #1
 8013cd8:	e7ee      	b.n	8013cb8 <__gethex+0x160>
 8013cda:	f100 0914 	add.w	r9, r0, #20
 8013cde:	f04f 0b00 	mov.w	fp, #0
 8013ce2:	f1ca 0301 	rsb	r3, sl, #1
 8013ce6:	f8cd 9008 	str.w	r9, [sp, #8]
 8013cea:	f8cd b000 	str.w	fp, [sp]
 8013cee:	9306      	str	r3, [sp, #24]
 8013cf0:	42b7      	cmp	r7, r6
 8013cf2:	d340      	bcc.n	8013d76 <__gethex+0x21e>
 8013cf4:	9802      	ldr	r0, [sp, #8]
 8013cf6:	9b00      	ldr	r3, [sp, #0]
 8013cf8:	f840 3b04 	str.w	r3, [r0], #4
 8013cfc:	eba0 0009 	sub.w	r0, r0, r9
 8013d00:	1080      	asrs	r0, r0, #2
 8013d02:	0146      	lsls	r6, r0, #5
 8013d04:	6120      	str	r0, [r4, #16]
 8013d06:	4618      	mov	r0, r3
 8013d08:	f000 fb9e 	bl	8014448 <__hi0bits>
 8013d0c:	1a30      	subs	r0, r6, r0
 8013d0e:	f8d8 6000 	ldr.w	r6, [r8]
 8013d12:	42b0      	cmp	r0, r6
 8013d14:	dd63      	ble.n	8013dde <__gethex+0x286>
 8013d16:	1b87      	subs	r7, r0, r6
 8013d18:	4639      	mov	r1, r7
 8013d1a:	4620      	mov	r0, r4
 8013d1c:	f000 ff42 	bl	8014ba4 <__any_on>
 8013d20:	4682      	mov	sl, r0
 8013d22:	b1a8      	cbz	r0, 8013d50 <__gethex+0x1f8>
 8013d24:	1e7b      	subs	r3, r7, #1
 8013d26:	1159      	asrs	r1, r3, #5
 8013d28:	f003 021f 	and.w	r2, r3, #31
 8013d2c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8013d30:	f04f 0a01 	mov.w	sl, #1
 8013d34:	fa0a f202 	lsl.w	r2, sl, r2
 8013d38:	420a      	tst	r2, r1
 8013d3a:	d009      	beq.n	8013d50 <__gethex+0x1f8>
 8013d3c:	4553      	cmp	r3, sl
 8013d3e:	dd05      	ble.n	8013d4c <__gethex+0x1f4>
 8013d40:	1eb9      	subs	r1, r7, #2
 8013d42:	4620      	mov	r0, r4
 8013d44:	f000 ff2e 	bl	8014ba4 <__any_on>
 8013d48:	2800      	cmp	r0, #0
 8013d4a:	d145      	bne.n	8013dd8 <__gethex+0x280>
 8013d4c:	f04f 0a02 	mov.w	sl, #2
 8013d50:	4639      	mov	r1, r7
 8013d52:	4620      	mov	r0, r4
 8013d54:	f7ff fe98 	bl	8013a88 <rshift>
 8013d58:	443d      	add	r5, r7
 8013d5a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013d5e:	42ab      	cmp	r3, r5
 8013d60:	da4c      	bge.n	8013dfc <__gethex+0x2a4>
 8013d62:	ee18 0a10 	vmov	r0, s16
 8013d66:	4621      	mov	r1, r4
 8013d68:	f000 fabc 	bl	80142e4 <_Bfree>
 8013d6c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013d6e:	2300      	movs	r3, #0
 8013d70:	6013      	str	r3, [r2, #0]
 8013d72:	27a3      	movs	r7, #163	; 0xa3
 8013d74:	e785      	b.n	8013c82 <__gethex+0x12a>
 8013d76:	1e73      	subs	r3, r6, #1
 8013d78:	9a05      	ldr	r2, [sp, #20]
 8013d7a:	9303      	str	r3, [sp, #12]
 8013d7c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013d80:	4293      	cmp	r3, r2
 8013d82:	d019      	beq.n	8013db8 <__gethex+0x260>
 8013d84:	f1bb 0f20 	cmp.w	fp, #32
 8013d88:	d107      	bne.n	8013d9a <__gethex+0x242>
 8013d8a:	9b02      	ldr	r3, [sp, #8]
 8013d8c:	9a00      	ldr	r2, [sp, #0]
 8013d8e:	f843 2b04 	str.w	r2, [r3], #4
 8013d92:	9302      	str	r3, [sp, #8]
 8013d94:	2300      	movs	r3, #0
 8013d96:	9300      	str	r3, [sp, #0]
 8013d98:	469b      	mov	fp, r3
 8013d9a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8013d9e:	f7ff fec5 	bl	8013b2c <__hexdig_fun>
 8013da2:	9b00      	ldr	r3, [sp, #0]
 8013da4:	f000 000f 	and.w	r0, r0, #15
 8013da8:	fa00 f00b 	lsl.w	r0, r0, fp
 8013dac:	4303      	orrs	r3, r0
 8013dae:	9300      	str	r3, [sp, #0]
 8013db0:	f10b 0b04 	add.w	fp, fp, #4
 8013db4:	9b03      	ldr	r3, [sp, #12]
 8013db6:	e00d      	b.n	8013dd4 <__gethex+0x27c>
 8013db8:	9b03      	ldr	r3, [sp, #12]
 8013dba:	9a06      	ldr	r2, [sp, #24]
 8013dbc:	4413      	add	r3, r2
 8013dbe:	42bb      	cmp	r3, r7
 8013dc0:	d3e0      	bcc.n	8013d84 <__gethex+0x22c>
 8013dc2:	4618      	mov	r0, r3
 8013dc4:	9901      	ldr	r1, [sp, #4]
 8013dc6:	9307      	str	r3, [sp, #28]
 8013dc8:	4652      	mov	r2, sl
 8013dca:	f7fd ff1f 	bl	8011c0c <strncmp>
 8013dce:	9b07      	ldr	r3, [sp, #28]
 8013dd0:	2800      	cmp	r0, #0
 8013dd2:	d1d7      	bne.n	8013d84 <__gethex+0x22c>
 8013dd4:	461e      	mov	r6, r3
 8013dd6:	e78b      	b.n	8013cf0 <__gethex+0x198>
 8013dd8:	f04f 0a03 	mov.w	sl, #3
 8013ddc:	e7b8      	b.n	8013d50 <__gethex+0x1f8>
 8013dde:	da0a      	bge.n	8013df6 <__gethex+0x29e>
 8013de0:	1a37      	subs	r7, r6, r0
 8013de2:	4621      	mov	r1, r4
 8013de4:	ee18 0a10 	vmov	r0, s16
 8013de8:	463a      	mov	r2, r7
 8013dea:	f000 fc97 	bl	801471c <__lshift>
 8013dee:	1bed      	subs	r5, r5, r7
 8013df0:	4604      	mov	r4, r0
 8013df2:	f100 0914 	add.w	r9, r0, #20
 8013df6:	f04f 0a00 	mov.w	sl, #0
 8013dfa:	e7ae      	b.n	8013d5a <__gethex+0x202>
 8013dfc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8013e00:	42a8      	cmp	r0, r5
 8013e02:	dd72      	ble.n	8013eea <__gethex+0x392>
 8013e04:	1b45      	subs	r5, r0, r5
 8013e06:	42ae      	cmp	r6, r5
 8013e08:	dc36      	bgt.n	8013e78 <__gethex+0x320>
 8013e0a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013e0e:	2b02      	cmp	r3, #2
 8013e10:	d02a      	beq.n	8013e68 <__gethex+0x310>
 8013e12:	2b03      	cmp	r3, #3
 8013e14:	d02c      	beq.n	8013e70 <__gethex+0x318>
 8013e16:	2b01      	cmp	r3, #1
 8013e18:	d11c      	bne.n	8013e54 <__gethex+0x2fc>
 8013e1a:	42ae      	cmp	r6, r5
 8013e1c:	d11a      	bne.n	8013e54 <__gethex+0x2fc>
 8013e1e:	2e01      	cmp	r6, #1
 8013e20:	d112      	bne.n	8013e48 <__gethex+0x2f0>
 8013e22:	9a04      	ldr	r2, [sp, #16]
 8013e24:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013e28:	6013      	str	r3, [r2, #0]
 8013e2a:	2301      	movs	r3, #1
 8013e2c:	6123      	str	r3, [r4, #16]
 8013e2e:	f8c9 3000 	str.w	r3, [r9]
 8013e32:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013e34:	2762      	movs	r7, #98	; 0x62
 8013e36:	601c      	str	r4, [r3, #0]
 8013e38:	e723      	b.n	8013c82 <__gethex+0x12a>
 8013e3a:	bf00      	nop
 8013e3c:	080191c0 	.word	0x080191c0
 8013e40:	08019148 	.word	0x08019148
 8013e44:	08019159 	.word	0x08019159
 8013e48:	1e71      	subs	r1, r6, #1
 8013e4a:	4620      	mov	r0, r4
 8013e4c:	f000 feaa 	bl	8014ba4 <__any_on>
 8013e50:	2800      	cmp	r0, #0
 8013e52:	d1e6      	bne.n	8013e22 <__gethex+0x2ca>
 8013e54:	ee18 0a10 	vmov	r0, s16
 8013e58:	4621      	mov	r1, r4
 8013e5a:	f000 fa43 	bl	80142e4 <_Bfree>
 8013e5e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013e60:	2300      	movs	r3, #0
 8013e62:	6013      	str	r3, [r2, #0]
 8013e64:	2750      	movs	r7, #80	; 0x50
 8013e66:	e70c      	b.n	8013c82 <__gethex+0x12a>
 8013e68:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d1f2      	bne.n	8013e54 <__gethex+0x2fc>
 8013e6e:	e7d8      	b.n	8013e22 <__gethex+0x2ca>
 8013e70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d1d5      	bne.n	8013e22 <__gethex+0x2ca>
 8013e76:	e7ed      	b.n	8013e54 <__gethex+0x2fc>
 8013e78:	1e6f      	subs	r7, r5, #1
 8013e7a:	f1ba 0f00 	cmp.w	sl, #0
 8013e7e:	d131      	bne.n	8013ee4 <__gethex+0x38c>
 8013e80:	b127      	cbz	r7, 8013e8c <__gethex+0x334>
 8013e82:	4639      	mov	r1, r7
 8013e84:	4620      	mov	r0, r4
 8013e86:	f000 fe8d 	bl	8014ba4 <__any_on>
 8013e8a:	4682      	mov	sl, r0
 8013e8c:	117b      	asrs	r3, r7, #5
 8013e8e:	2101      	movs	r1, #1
 8013e90:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8013e94:	f007 071f 	and.w	r7, r7, #31
 8013e98:	fa01 f707 	lsl.w	r7, r1, r7
 8013e9c:	421f      	tst	r7, r3
 8013e9e:	4629      	mov	r1, r5
 8013ea0:	4620      	mov	r0, r4
 8013ea2:	bf18      	it	ne
 8013ea4:	f04a 0a02 	orrne.w	sl, sl, #2
 8013ea8:	1b76      	subs	r6, r6, r5
 8013eaa:	f7ff fded 	bl	8013a88 <rshift>
 8013eae:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8013eb2:	2702      	movs	r7, #2
 8013eb4:	f1ba 0f00 	cmp.w	sl, #0
 8013eb8:	d048      	beq.n	8013f4c <__gethex+0x3f4>
 8013eba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013ebe:	2b02      	cmp	r3, #2
 8013ec0:	d015      	beq.n	8013eee <__gethex+0x396>
 8013ec2:	2b03      	cmp	r3, #3
 8013ec4:	d017      	beq.n	8013ef6 <__gethex+0x39e>
 8013ec6:	2b01      	cmp	r3, #1
 8013ec8:	d109      	bne.n	8013ede <__gethex+0x386>
 8013eca:	f01a 0f02 	tst.w	sl, #2
 8013ece:	d006      	beq.n	8013ede <__gethex+0x386>
 8013ed0:	f8d9 0000 	ldr.w	r0, [r9]
 8013ed4:	ea4a 0a00 	orr.w	sl, sl, r0
 8013ed8:	f01a 0f01 	tst.w	sl, #1
 8013edc:	d10e      	bne.n	8013efc <__gethex+0x3a4>
 8013ede:	f047 0710 	orr.w	r7, r7, #16
 8013ee2:	e033      	b.n	8013f4c <__gethex+0x3f4>
 8013ee4:	f04f 0a01 	mov.w	sl, #1
 8013ee8:	e7d0      	b.n	8013e8c <__gethex+0x334>
 8013eea:	2701      	movs	r7, #1
 8013eec:	e7e2      	b.n	8013eb4 <__gethex+0x35c>
 8013eee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013ef0:	f1c3 0301 	rsb	r3, r3, #1
 8013ef4:	9315      	str	r3, [sp, #84]	; 0x54
 8013ef6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d0f0      	beq.n	8013ede <__gethex+0x386>
 8013efc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8013f00:	f104 0314 	add.w	r3, r4, #20
 8013f04:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8013f08:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8013f0c:	f04f 0c00 	mov.w	ip, #0
 8013f10:	4618      	mov	r0, r3
 8013f12:	f853 2b04 	ldr.w	r2, [r3], #4
 8013f16:	f1b2 3fff 	cmp.w	r2, #4294967295
 8013f1a:	d01c      	beq.n	8013f56 <__gethex+0x3fe>
 8013f1c:	3201      	adds	r2, #1
 8013f1e:	6002      	str	r2, [r0, #0]
 8013f20:	2f02      	cmp	r7, #2
 8013f22:	f104 0314 	add.w	r3, r4, #20
 8013f26:	d13f      	bne.n	8013fa8 <__gethex+0x450>
 8013f28:	f8d8 2000 	ldr.w	r2, [r8]
 8013f2c:	3a01      	subs	r2, #1
 8013f2e:	42b2      	cmp	r2, r6
 8013f30:	d10a      	bne.n	8013f48 <__gethex+0x3f0>
 8013f32:	1171      	asrs	r1, r6, #5
 8013f34:	2201      	movs	r2, #1
 8013f36:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013f3a:	f006 061f 	and.w	r6, r6, #31
 8013f3e:	fa02 f606 	lsl.w	r6, r2, r6
 8013f42:	421e      	tst	r6, r3
 8013f44:	bf18      	it	ne
 8013f46:	4617      	movne	r7, r2
 8013f48:	f047 0720 	orr.w	r7, r7, #32
 8013f4c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013f4e:	601c      	str	r4, [r3, #0]
 8013f50:	9b04      	ldr	r3, [sp, #16]
 8013f52:	601d      	str	r5, [r3, #0]
 8013f54:	e695      	b.n	8013c82 <__gethex+0x12a>
 8013f56:	4299      	cmp	r1, r3
 8013f58:	f843 cc04 	str.w	ip, [r3, #-4]
 8013f5c:	d8d8      	bhi.n	8013f10 <__gethex+0x3b8>
 8013f5e:	68a3      	ldr	r3, [r4, #8]
 8013f60:	459b      	cmp	fp, r3
 8013f62:	db19      	blt.n	8013f98 <__gethex+0x440>
 8013f64:	6861      	ldr	r1, [r4, #4]
 8013f66:	ee18 0a10 	vmov	r0, s16
 8013f6a:	3101      	adds	r1, #1
 8013f6c:	f000 f97a 	bl	8014264 <_Balloc>
 8013f70:	4681      	mov	r9, r0
 8013f72:	b918      	cbnz	r0, 8013f7c <__gethex+0x424>
 8013f74:	4b1a      	ldr	r3, [pc, #104]	; (8013fe0 <__gethex+0x488>)
 8013f76:	4602      	mov	r2, r0
 8013f78:	2184      	movs	r1, #132	; 0x84
 8013f7a:	e6a8      	b.n	8013cce <__gethex+0x176>
 8013f7c:	6922      	ldr	r2, [r4, #16]
 8013f7e:	3202      	adds	r2, #2
 8013f80:	f104 010c 	add.w	r1, r4, #12
 8013f84:	0092      	lsls	r2, r2, #2
 8013f86:	300c      	adds	r0, #12
 8013f88:	f000 f951 	bl	801422e <memcpy>
 8013f8c:	4621      	mov	r1, r4
 8013f8e:	ee18 0a10 	vmov	r0, s16
 8013f92:	f000 f9a7 	bl	80142e4 <_Bfree>
 8013f96:	464c      	mov	r4, r9
 8013f98:	6923      	ldr	r3, [r4, #16]
 8013f9a:	1c5a      	adds	r2, r3, #1
 8013f9c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013fa0:	6122      	str	r2, [r4, #16]
 8013fa2:	2201      	movs	r2, #1
 8013fa4:	615a      	str	r2, [r3, #20]
 8013fa6:	e7bb      	b.n	8013f20 <__gethex+0x3c8>
 8013fa8:	6922      	ldr	r2, [r4, #16]
 8013faa:	455a      	cmp	r2, fp
 8013fac:	dd0b      	ble.n	8013fc6 <__gethex+0x46e>
 8013fae:	2101      	movs	r1, #1
 8013fb0:	4620      	mov	r0, r4
 8013fb2:	f7ff fd69 	bl	8013a88 <rshift>
 8013fb6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013fba:	3501      	adds	r5, #1
 8013fbc:	42ab      	cmp	r3, r5
 8013fbe:	f6ff aed0 	blt.w	8013d62 <__gethex+0x20a>
 8013fc2:	2701      	movs	r7, #1
 8013fc4:	e7c0      	b.n	8013f48 <__gethex+0x3f0>
 8013fc6:	f016 061f 	ands.w	r6, r6, #31
 8013fca:	d0fa      	beq.n	8013fc2 <__gethex+0x46a>
 8013fcc:	4453      	add	r3, sl
 8013fce:	f1c6 0620 	rsb	r6, r6, #32
 8013fd2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8013fd6:	f000 fa37 	bl	8014448 <__hi0bits>
 8013fda:	42b0      	cmp	r0, r6
 8013fdc:	dbe7      	blt.n	8013fae <__gethex+0x456>
 8013fde:	e7f0      	b.n	8013fc2 <__gethex+0x46a>
 8013fe0:	08019148 	.word	0x08019148

08013fe4 <L_shift>:
 8013fe4:	f1c2 0208 	rsb	r2, r2, #8
 8013fe8:	0092      	lsls	r2, r2, #2
 8013fea:	b570      	push	{r4, r5, r6, lr}
 8013fec:	f1c2 0620 	rsb	r6, r2, #32
 8013ff0:	6843      	ldr	r3, [r0, #4]
 8013ff2:	6804      	ldr	r4, [r0, #0]
 8013ff4:	fa03 f506 	lsl.w	r5, r3, r6
 8013ff8:	432c      	orrs	r4, r5
 8013ffa:	40d3      	lsrs	r3, r2
 8013ffc:	6004      	str	r4, [r0, #0]
 8013ffe:	f840 3f04 	str.w	r3, [r0, #4]!
 8014002:	4288      	cmp	r0, r1
 8014004:	d3f4      	bcc.n	8013ff0 <L_shift+0xc>
 8014006:	bd70      	pop	{r4, r5, r6, pc}

08014008 <__match>:
 8014008:	b530      	push	{r4, r5, lr}
 801400a:	6803      	ldr	r3, [r0, #0]
 801400c:	3301      	adds	r3, #1
 801400e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014012:	b914      	cbnz	r4, 801401a <__match+0x12>
 8014014:	6003      	str	r3, [r0, #0]
 8014016:	2001      	movs	r0, #1
 8014018:	bd30      	pop	{r4, r5, pc}
 801401a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801401e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8014022:	2d19      	cmp	r5, #25
 8014024:	bf98      	it	ls
 8014026:	3220      	addls	r2, #32
 8014028:	42a2      	cmp	r2, r4
 801402a:	d0f0      	beq.n	801400e <__match+0x6>
 801402c:	2000      	movs	r0, #0
 801402e:	e7f3      	b.n	8014018 <__match+0x10>

08014030 <__hexnan>:
 8014030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014034:	680b      	ldr	r3, [r1, #0]
 8014036:	115e      	asrs	r6, r3, #5
 8014038:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801403c:	f013 031f 	ands.w	r3, r3, #31
 8014040:	b087      	sub	sp, #28
 8014042:	bf18      	it	ne
 8014044:	3604      	addne	r6, #4
 8014046:	2500      	movs	r5, #0
 8014048:	1f37      	subs	r7, r6, #4
 801404a:	4690      	mov	r8, r2
 801404c:	6802      	ldr	r2, [r0, #0]
 801404e:	9301      	str	r3, [sp, #4]
 8014050:	4682      	mov	sl, r0
 8014052:	f846 5c04 	str.w	r5, [r6, #-4]
 8014056:	46b9      	mov	r9, r7
 8014058:	463c      	mov	r4, r7
 801405a:	9502      	str	r5, [sp, #8]
 801405c:	46ab      	mov	fp, r5
 801405e:	7851      	ldrb	r1, [r2, #1]
 8014060:	1c53      	adds	r3, r2, #1
 8014062:	9303      	str	r3, [sp, #12]
 8014064:	b341      	cbz	r1, 80140b8 <__hexnan+0x88>
 8014066:	4608      	mov	r0, r1
 8014068:	9205      	str	r2, [sp, #20]
 801406a:	9104      	str	r1, [sp, #16]
 801406c:	f7ff fd5e 	bl	8013b2c <__hexdig_fun>
 8014070:	2800      	cmp	r0, #0
 8014072:	d14f      	bne.n	8014114 <__hexnan+0xe4>
 8014074:	9904      	ldr	r1, [sp, #16]
 8014076:	9a05      	ldr	r2, [sp, #20]
 8014078:	2920      	cmp	r1, #32
 801407a:	d818      	bhi.n	80140ae <__hexnan+0x7e>
 801407c:	9b02      	ldr	r3, [sp, #8]
 801407e:	459b      	cmp	fp, r3
 8014080:	dd13      	ble.n	80140aa <__hexnan+0x7a>
 8014082:	454c      	cmp	r4, r9
 8014084:	d206      	bcs.n	8014094 <__hexnan+0x64>
 8014086:	2d07      	cmp	r5, #7
 8014088:	dc04      	bgt.n	8014094 <__hexnan+0x64>
 801408a:	462a      	mov	r2, r5
 801408c:	4649      	mov	r1, r9
 801408e:	4620      	mov	r0, r4
 8014090:	f7ff ffa8 	bl	8013fe4 <L_shift>
 8014094:	4544      	cmp	r4, r8
 8014096:	d950      	bls.n	801413a <__hexnan+0x10a>
 8014098:	2300      	movs	r3, #0
 801409a:	f1a4 0904 	sub.w	r9, r4, #4
 801409e:	f844 3c04 	str.w	r3, [r4, #-4]
 80140a2:	f8cd b008 	str.w	fp, [sp, #8]
 80140a6:	464c      	mov	r4, r9
 80140a8:	461d      	mov	r5, r3
 80140aa:	9a03      	ldr	r2, [sp, #12]
 80140ac:	e7d7      	b.n	801405e <__hexnan+0x2e>
 80140ae:	2929      	cmp	r1, #41	; 0x29
 80140b0:	d156      	bne.n	8014160 <__hexnan+0x130>
 80140b2:	3202      	adds	r2, #2
 80140b4:	f8ca 2000 	str.w	r2, [sl]
 80140b8:	f1bb 0f00 	cmp.w	fp, #0
 80140bc:	d050      	beq.n	8014160 <__hexnan+0x130>
 80140be:	454c      	cmp	r4, r9
 80140c0:	d206      	bcs.n	80140d0 <__hexnan+0xa0>
 80140c2:	2d07      	cmp	r5, #7
 80140c4:	dc04      	bgt.n	80140d0 <__hexnan+0xa0>
 80140c6:	462a      	mov	r2, r5
 80140c8:	4649      	mov	r1, r9
 80140ca:	4620      	mov	r0, r4
 80140cc:	f7ff ff8a 	bl	8013fe4 <L_shift>
 80140d0:	4544      	cmp	r4, r8
 80140d2:	d934      	bls.n	801413e <__hexnan+0x10e>
 80140d4:	f1a8 0204 	sub.w	r2, r8, #4
 80140d8:	4623      	mov	r3, r4
 80140da:	f853 1b04 	ldr.w	r1, [r3], #4
 80140de:	f842 1f04 	str.w	r1, [r2, #4]!
 80140e2:	429f      	cmp	r7, r3
 80140e4:	d2f9      	bcs.n	80140da <__hexnan+0xaa>
 80140e6:	1b3b      	subs	r3, r7, r4
 80140e8:	f023 0303 	bic.w	r3, r3, #3
 80140ec:	3304      	adds	r3, #4
 80140ee:	3401      	adds	r4, #1
 80140f0:	3e03      	subs	r6, #3
 80140f2:	42b4      	cmp	r4, r6
 80140f4:	bf88      	it	hi
 80140f6:	2304      	movhi	r3, #4
 80140f8:	4443      	add	r3, r8
 80140fa:	2200      	movs	r2, #0
 80140fc:	f843 2b04 	str.w	r2, [r3], #4
 8014100:	429f      	cmp	r7, r3
 8014102:	d2fb      	bcs.n	80140fc <__hexnan+0xcc>
 8014104:	683b      	ldr	r3, [r7, #0]
 8014106:	b91b      	cbnz	r3, 8014110 <__hexnan+0xe0>
 8014108:	4547      	cmp	r7, r8
 801410a:	d127      	bne.n	801415c <__hexnan+0x12c>
 801410c:	2301      	movs	r3, #1
 801410e:	603b      	str	r3, [r7, #0]
 8014110:	2005      	movs	r0, #5
 8014112:	e026      	b.n	8014162 <__hexnan+0x132>
 8014114:	3501      	adds	r5, #1
 8014116:	2d08      	cmp	r5, #8
 8014118:	f10b 0b01 	add.w	fp, fp, #1
 801411c:	dd06      	ble.n	801412c <__hexnan+0xfc>
 801411e:	4544      	cmp	r4, r8
 8014120:	d9c3      	bls.n	80140aa <__hexnan+0x7a>
 8014122:	2300      	movs	r3, #0
 8014124:	f844 3c04 	str.w	r3, [r4, #-4]
 8014128:	2501      	movs	r5, #1
 801412a:	3c04      	subs	r4, #4
 801412c:	6822      	ldr	r2, [r4, #0]
 801412e:	f000 000f 	and.w	r0, r0, #15
 8014132:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8014136:	6022      	str	r2, [r4, #0]
 8014138:	e7b7      	b.n	80140aa <__hexnan+0x7a>
 801413a:	2508      	movs	r5, #8
 801413c:	e7b5      	b.n	80140aa <__hexnan+0x7a>
 801413e:	9b01      	ldr	r3, [sp, #4]
 8014140:	2b00      	cmp	r3, #0
 8014142:	d0df      	beq.n	8014104 <__hexnan+0xd4>
 8014144:	f04f 32ff 	mov.w	r2, #4294967295
 8014148:	f1c3 0320 	rsb	r3, r3, #32
 801414c:	fa22 f303 	lsr.w	r3, r2, r3
 8014150:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8014154:	401a      	ands	r2, r3
 8014156:	f846 2c04 	str.w	r2, [r6, #-4]
 801415a:	e7d3      	b.n	8014104 <__hexnan+0xd4>
 801415c:	3f04      	subs	r7, #4
 801415e:	e7d1      	b.n	8014104 <__hexnan+0xd4>
 8014160:	2004      	movs	r0, #4
 8014162:	b007      	add	sp, #28
 8014164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014168 <_findenv_r>:
 8014168:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801416c:	f8df a06c 	ldr.w	sl, [pc, #108]	; 80141dc <_findenv_r+0x74>
 8014170:	4607      	mov	r7, r0
 8014172:	4689      	mov	r9, r1
 8014174:	4616      	mov	r6, r2
 8014176:	f001 f9fb 	bl	8015570 <__env_lock>
 801417a:	f8da 4000 	ldr.w	r4, [sl]
 801417e:	b134      	cbz	r4, 801418e <_findenv_r+0x26>
 8014180:	464b      	mov	r3, r9
 8014182:	4698      	mov	r8, r3
 8014184:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014188:	b13a      	cbz	r2, 801419a <_findenv_r+0x32>
 801418a:	2a3d      	cmp	r2, #61	; 0x3d
 801418c:	d1f9      	bne.n	8014182 <_findenv_r+0x1a>
 801418e:	4638      	mov	r0, r7
 8014190:	f001 f9f4 	bl	801557c <__env_unlock>
 8014194:	2000      	movs	r0, #0
 8014196:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801419a:	eba8 0809 	sub.w	r8, r8, r9
 801419e:	46a3      	mov	fp, r4
 80141a0:	f854 0b04 	ldr.w	r0, [r4], #4
 80141a4:	2800      	cmp	r0, #0
 80141a6:	d0f2      	beq.n	801418e <_findenv_r+0x26>
 80141a8:	4642      	mov	r2, r8
 80141aa:	4649      	mov	r1, r9
 80141ac:	f7fd fd2e 	bl	8011c0c <strncmp>
 80141b0:	2800      	cmp	r0, #0
 80141b2:	d1f4      	bne.n	801419e <_findenv_r+0x36>
 80141b4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80141b8:	eb03 0508 	add.w	r5, r3, r8
 80141bc:	f813 3008 	ldrb.w	r3, [r3, r8]
 80141c0:	2b3d      	cmp	r3, #61	; 0x3d
 80141c2:	d1ec      	bne.n	801419e <_findenv_r+0x36>
 80141c4:	f8da 3000 	ldr.w	r3, [sl]
 80141c8:	ebab 0303 	sub.w	r3, fp, r3
 80141cc:	109b      	asrs	r3, r3, #2
 80141ce:	4638      	mov	r0, r7
 80141d0:	6033      	str	r3, [r6, #0]
 80141d2:	f001 f9d3 	bl	801557c <__env_unlock>
 80141d6:	1c68      	adds	r0, r5, #1
 80141d8:	e7dd      	b.n	8014196 <_findenv_r+0x2e>
 80141da:	bf00      	nop
 80141dc:	20000010 	.word	0x20000010

080141e0 <_getenv_r>:
 80141e0:	b507      	push	{r0, r1, r2, lr}
 80141e2:	aa01      	add	r2, sp, #4
 80141e4:	f7ff ffc0 	bl	8014168 <_findenv_r>
 80141e8:	b003      	add	sp, #12
 80141ea:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080141f0 <__gettzinfo>:
 80141f0:	4800      	ldr	r0, [pc, #0]	; (80141f4 <__gettzinfo+0x4>)
 80141f2:	4770      	bx	lr
 80141f4:	20000090 	.word	0x20000090

080141f8 <_localeconv_r>:
 80141f8:	4800      	ldr	r0, [pc, #0]	; (80141fc <_localeconv_r+0x4>)
 80141fa:	4770      	bx	lr
 80141fc:	200001dc 	.word	0x200001dc

08014200 <__retarget_lock_init_recursive>:
 8014200:	4770      	bx	lr

08014202 <__retarget_lock_acquire>:
 8014202:	4770      	bx	lr

08014204 <__retarget_lock_acquire_recursive>:
 8014204:	4770      	bx	lr

08014206 <__retarget_lock_release>:
 8014206:	4770      	bx	lr

08014208 <__retarget_lock_release_recursive>:
 8014208:	4770      	bx	lr

0801420a <__ascii_mbtowc>:
 801420a:	b082      	sub	sp, #8
 801420c:	b901      	cbnz	r1, 8014210 <__ascii_mbtowc+0x6>
 801420e:	a901      	add	r1, sp, #4
 8014210:	b142      	cbz	r2, 8014224 <__ascii_mbtowc+0x1a>
 8014212:	b14b      	cbz	r3, 8014228 <__ascii_mbtowc+0x1e>
 8014214:	7813      	ldrb	r3, [r2, #0]
 8014216:	600b      	str	r3, [r1, #0]
 8014218:	7812      	ldrb	r2, [r2, #0]
 801421a:	1e10      	subs	r0, r2, #0
 801421c:	bf18      	it	ne
 801421e:	2001      	movne	r0, #1
 8014220:	b002      	add	sp, #8
 8014222:	4770      	bx	lr
 8014224:	4610      	mov	r0, r2
 8014226:	e7fb      	b.n	8014220 <__ascii_mbtowc+0x16>
 8014228:	f06f 0001 	mvn.w	r0, #1
 801422c:	e7f8      	b.n	8014220 <__ascii_mbtowc+0x16>

0801422e <memcpy>:
 801422e:	440a      	add	r2, r1
 8014230:	4291      	cmp	r1, r2
 8014232:	f100 33ff 	add.w	r3, r0, #4294967295
 8014236:	d100      	bne.n	801423a <memcpy+0xc>
 8014238:	4770      	bx	lr
 801423a:	b510      	push	{r4, lr}
 801423c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014240:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014244:	4291      	cmp	r1, r2
 8014246:	d1f9      	bne.n	801423c <memcpy+0xe>
 8014248:	bd10      	pop	{r4, pc}
	...

0801424c <__malloc_lock>:
 801424c:	4801      	ldr	r0, [pc, #4]	; (8014254 <__malloc_lock+0x8>)
 801424e:	f7ff bfd9 	b.w	8014204 <__retarget_lock_acquire_recursive>
 8014252:	bf00      	nop
 8014254:	20007b29 	.word	0x20007b29

08014258 <__malloc_unlock>:
 8014258:	4801      	ldr	r0, [pc, #4]	; (8014260 <__malloc_unlock+0x8>)
 801425a:	f7ff bfd5 	b.w	8014208 <__retarget_lock_release_recursive>
 801425e:	bf00      	nop
 8014260:	20007b29 	.word	0x20007b29

08014264 <_Balloc>:
 8014264:	b570      	push	{r4, r5, r6, lr}
 8014266:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014268:	4604      	mov	r4, r0
 801426a:	460d      	mov	r5, r1
 801426c:	b976      	cbnz	r6, 801428c <_Balloc+0x28>
 801426e:	2010      	movs	r0, #16
 8014270:	f7fc fcc8 	bl	8010c04 <malloc>
 8014274:	4602      	mov	r2, r0
 8014276:	6260      	str	r0, [r4, #36]	; 0x24
 8014278:	b920      	cbnz	r0, 8014284 <_Balloc+0x20>
 801427a:	4b18      	ldr	r3, [pc, #96]	; (80142dc <_Balloc+0x78>)
 801427c:	4818      	ldr	r0, [pc, #96]	; (80142e0 <_Balloc+0x7c>)
 801427e:	2166      	movs	r1, #102	; 0x66
 8014280:	f7fe fd44 	bl	8012d0c <__assert_func>
 8014284:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014288:	6006      	str	r6, [r0, #0]
 801428a:	60c6      	str	r6, [r0, #12]
 801428c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801428e:	68f3      	ldr	r3, [r6, #12]
 8014290:	b183      	cbz	r3, 80142b4 <_Balloc+0x50>
 8014292:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014294:	68db      	ldr	r3, [r3, #12]
 8014296:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801429a:	b9b8      	cbnz	r0, 80142cc <_Balloc+0x68>
 801429c:	2101      	movs	r1, #1
 801429e:	fa01 f605 	lsl.w	r6, r1, r5
 80142a2:	1d72      	adds	r2, r6, #5
 80142a4:	0092      	lsls	r2, r2, #2
 80142a6:	4620      	mov	r0, r4
 80142a8:	f000 fc9d 	bl	8014be6 <_calloc_r>
 80142ac:	b160      	cbz	r0, 80142c8 <_Balloc+0x64>
 80142ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80142b2:	e00e      	b.n	80142d2 <_Balloc+0x6e>
 80142b4:	2221      	movs	r2, #33	; 0x21
 80142b6:	2104      	movs	r1, #4
 80142b8:	4620      	mov	r0, r4
 80142ba:	f000 fc94 	bl	8014be6 <_calloc_r>
 80142be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80142c0:	60f0      	str	r0, [r6, #12]
 80142c2:	68db      	ldr	r3, [r3, #12]
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	d1e4      	bne.n	8014292 <_Balloc+0x2e>
 80142c8:	2000      	movs	r0, #0
 80142ca:	bd70      	pop	{r4, r5, r6, pc}
 80142cc:	6802      	ldr	r2, [r0, #0]
 80142ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80142d2:	2300      	movs	r3, #0
 80142d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80142d8:	e7f7      	b.n	80142ca <_Balloc+0x66>
 80142da:	bf00      	nop
 80142dc:	08018f08 	.word	0x08018f08
 80142e0:	08019234 	.word	0x08019234

080142e4 <_Bfree>:
 80142e4:	b570      	push	{r4, r5, r6, lr}
 80142e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80142e8:	4605      	mov	r5, r0
 80142ea:	460c      	mov	r4, r1
 80142ec:	b976      	cbnz	r6, 801430c <_Bfree+0x28>
 80142ee:	2010      	movs	r0, #16
 80142f0:	f7fc fc88 	bl	8010c04 <malloc>
 80142f4:	4602      	mov	r2, r0
 80142f6:	6268      	str	r0, [r5, #36]	; 0x24
 80142f8:	b920      	cbnz	r0, 8014304 <_Bfree+0x20>
 80142fa:	4b09      	ldr	r3, [pc, #36]	; (8014320 <_Bfree+0x3c>)
 80142fc:	4809      	ldr	r0, [pc, #36]	; (8014324 <_Bfree+0x40>)
 80142fe:	218a      	movs	r1, #138	; 0x8a
 8014300:	f7fe fd04 	bl	8012d0c <__assert_func>
 8014304:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014308:	6006      	str	r6, [r0, #0]
 801430a:	60c6      	str	r6, [r0, #12]
 801430c:	b13c      	cbz	r4, 801431e <_Bfree+0x3a>
 801430e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8014310:	6862      	ldr	r2, [r4, #4]
 8014312:	68db      	ldr	r3, [r3, #12]
 8014314:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014318:	6021      	str	r1, [r4, #0]
 801431a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801431e:	bd70      	pop	{r4, r5, r6, pc}
 8014320:	08018f08 	.word	0x08018f08
 8014324:	08019234 	.word	0x08019234

08014328 <__multadd>:
 8014328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801432c:	690d      	ldr	r5, [r1, #16]
 801432e:	4607      	mov	r7, r0
 8014330:	460c      	mov	r4, r1
 8014332:	461e      	mov	r6, r3
 8014334:	f101 0c14 	add.w	ip, r1, #20
 8014338:	2000      	movs	r0, #0
 801433a:	f8dc 3000 	ldr.w	r3, [ip]
 801433e:	b299      	uxth	r1, r3
 8014340:	fb02 6101 	mla	r1, r2, r1, r6
 8014344:	0c1e      	lsrs	r6, r3, #16
 8014346:	0c0b      	lsrs	r3, r1, #16
 8014348:	fb02 3306 	mla	r3, r2, r6, r3
 801434c:	b289      	uxth	r1, r1
 801434e:	3001      	adds	r0, #1
 8014350:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014354:	4285      	cmp	r5, r0
 8014356:	f84c 1b04 	str.w	r1, [ip], #4
 801435a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801435e:	dcec      	bgt.n	801433a <__multadd+0x12>
 8014360:	b30e      	cbz	r6, 80143a6 <__multadd+0x7e>
 8014362:	68a3      	ldr	r3, [r4, #8]
 8014364:	42ab      	cmp	r3, r5
 8014366:	dc19      	bgt.n	801439c <__multadd+0x74>
 8014368:	6861      	ldr	r1, [r4, #4]
 801436a:	4638      	mov	r0, r7
 801436c:	3101      	adds	r1, #1
 801436e:	f7ff ff79 	bl	8014264 <_Balloc>
 8014372:	4680      	mov	r8, r0
 8014374:	b928      	cbnz	r0, 8014382 <__multadd+0x5a>
 8014376:	4602      	mov	r2, r0
 8014378:	4b0c      	ldr	r3, [pc, #48]	; (80143ac <__multadd+0x84>)
 801437a:	480d      	ldr	r0, [pc, #52]	; (80143b0 <__multadd+0x88>)
 801437c:	21b5      	movs	r1, #181	; 0xb5
 801437e:	f7fe fcc5 	bl	8012d0c <__assert_func>
 8014382:	6922      	ldr	r2, [r4, #16]
 8014384:	3202      	adds	r2, #2
 8014386:	f104 010c 	add.w	r1, r4, #12
 801438a:	0092      	lsls	r2, r2, #2
 801438c:	300c      	adds	r0, #12
 801438e:	f7ff ff4e 	bl	801422e <memcpy>
 8014392:	4621      	mov	r1, r4
 8014394:	4638      	mov	r0, r7
 8014396:	f7ff ffa5 	bl	80142e4 <_Bfree>
 801439a:	4644      	mov	r4, r8
 801439c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80143a0:	3501      	adds	r5, #1
 80143a2:	615e      	str	r6, [r3, #20]
 80143a4:	6125      	str	r5, [r4, #16]
 80143a6:	4620      	mov	r0, r4
 80143a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143ac:	08019148 	.word	0x08019148
 80143b0:	08019234 	.word	0x08019234

080143b4 <__s2b>:
 80143b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80143b8:	460c      	mov	r4, r1
 80143ba:	4615      	mov	r5, r2
 80143bc:	461f      	mov	r7, r3
 80143be:	2209      	movs	r2, #9
 80143c0:	3308      	adds	r3, #8
 80143c2:	4606      	mov	r6, r0
 80143c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80143c8:	2100      	movs	r1, #0
 80143ca:	2201      	movs	r2, #1
 80143cc:	429a      	cmp	r2, r3
 80143ce:	db09      	blt.n	80143e4 <__s2b+0x30>
 80143d0:	4630      	mov	r0, r6
 80143d2:	f7ff ff47 	bl	8014264 <_Balloc>
 80143d6:	b940      	cbnz	r0, 80143ea <__s2b+0x36>
 80143d8:	4602      	mov	r2, r0
 80143da:	4b19      	ldr	r3, [pc, #100]	; (8014440 <__s2b+0x8c>)
 80143dc:	4819      	ldr	r0, [pc, #100]	; (8014444 <__s2b+0x90>)
 80143de:	21ce      	movs	r1, #206	; 0xce
 80143e0:	f7fe fc94 	bl	8012d0c <__assert_func>
 80143e4:	0052      	lsls	r2, r2, #1
 80143e6:	3101      	adds	r1, #1
 80143e8:	e7f0      	b.n	80143cc <__s2b+0x18>
 80143ea:	9b08      	ldr	r3, [sp, #32]
 80143ec:	6143      	str	r3, [r0, #20]
 80143ee:	2d09      	cmp	r5, #9
 80143f0:	f04f 0301 	mov.w	r3, #1
 80143f4:	6103      	str	r3, [r0, #16]
 80143f6:	dd16      	ble.n	8014426 <__s2b+0x72>
 80143f8:	f104 0909 	add.w	r9, r4, #9
 80143fc:	46c8      	mov	r8, r9
 80143fe:	442c      	add	r4, r5
 8014400:	f818 3b01 	ldrb.w	r3, [r8], #1
 8014404:	4601      	mov	r1, r0
 8014406:	3b30      	subs	r3, #48	; 0x30
 8014408:	220a      	movs	r2, #10
 801440a:	4630      	mov	r0, r6
 801440c:	f7ff ff8c 	bl	8014328 <__multadd>
 8014410:	45a0      	cmp	r8, r4
 8014412:	d1f5      	bne.n	8014400 <__s2b+0x4c>
 8014414:	f1a5 0408 	sub.w	r4, r5, #8
 8014418:	444c      	add	r4, r9
 801441a:	1b2d      	subs	r5, r5, r4
 801441c:	1963      	adds	r3, r4, r5
 801441e:	42bb      	cmp	r3, r7
 8014420:	db04      	blt.n	801442c <__s2b+0x78>
 8014422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014426:	340a      	adds	r4, #10
 8014428:	2509      	movs	r5, #9
 801442a:	e7f6      	b.n	801441a <__s2b+0x66>
 801442c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014430:	4601      	mov	r1, r0
 8014432:	3b30      	subs	r3, #48	; 0x30
 8014434:	220a      	movs	r2, #10
 8014436:	4630      	mov	r0, r6
 8014438:	f7ff ff76 	bl	8014328 <__multadd>
 801443c:	e7ee      	b.n	801441c <__s2b+0x68>
 801443e:	bf00      	nop
 8014440:	08019148 	.word	0x08019148
 8014444:	08019234 	.word	0x08019234

08014448 <__hi0bits>:
 8014448:	0c03      	lsrs	r3, r0, #16
 801444a:	041b      	lsls	r3, r3, #16
 801444c:	b9d3      	cbnz	r3, 8014484 <__hi0bits+0x3c>
 801444e:	0400      	lsls	r0, r0, #16
 8014450:	2310      	movs	r3, #16
 8014452:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8014456:	bf04      	itt	eq
 8014458:	0200      	lsleq	r0, r0, #8
 801445a:	3308      	addeq	r3, #8
 801445c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8014460:	bf04      	itt	eq
 8014462:	0100      	lsleq	r0, r0, #4
 8014464:	3304      	addeq	r3, #4
 8014466:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801446a:	bf04      	itt	eq
 801446c:	0080      	lsleq	r0, r0, #2
 801446e:	3302      	addeq	r3, #2
 8014470:	2800      	cmp	r0, #0
 8014472:	db05      	blt.n	8014480 <__hi0bits+0x38>
 8014474:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8014478:	f103 0301 	add.w	r3, r3, #1
 801447c:	bf08      	it	eq
 801447e:	2320      	moveq	r3, #32
 8014480:	4618      	mov	r0, r3
 8014482:	4770      	bx	lr
 8014484:	2300      	movs	r3, #0
 8014486:	e7e4      	b.n	8014452 <__hi0bits+0xa>

08014488 <__lo0bits>:
 8014488:	6803      	ldr	r3, [r0, #0]
 801448a:	f013 0207 	ands.w	r2, r3, #7
 801448e:	4601      	mov	r1, r0
 8014490:	d00b      	beq.n	80144aa <__lo0bits+0x22>
 8014492:	07da      	lsls	r2, r3, #31
 8014494:	d423      	bmi.n	80144de <__lo0bits+0x56>
 8014496:	0798      	lsls	r0, r3, #30
 8014498:	bf49      	itett	mi
 801449a:	085b      	lsrmi	r3, r3, #1
 801449c:	089b      	lsrpl	r3, r3, #2
 801449e:	2001      	movmi	r0, #1
 80144a0:	600b      	strmi	r3, [r1, #0]
 80144a2:	bf5c      	itt	pl
 80144a4:	600b      	strpl	r3, [r1, #0]
 80144a6:	2002      	movpl	r0, #2
 80144a8:	4770      	bx	lr
 80144aa:	b298      	uxth	r0, r3
 80144ac:	b9a8      	cbnz	r0, 80144da <__lo0bits+0x52>
 80144ae:	0c1b      	lsrs	r3, r3, #16
 80144b0:	2010      	movs	r0, #16
 80144b2:	b2da      	uxtb	r2, r3
 80144b4:	b90a      	cbnz	r2, 80144ba <__lo0bits+0x32>
 80144b6:	3008      	adds	r0, #8
 80144b8:	0a1b      	lsrs	r3, r3, #8
 80144ba:	071a      	lsls	r2, r3, #28
 80144bc:	bf04      	itt	eq
 80144be:	091b      	lsreq	r3, r3, #4
 80144c0:	3004      	addeq	r0, #4
 80144c2:	079a      	lsls	r2, r3, #30
 80144c4:	bf04      	itt	eq
 80144c6:	089b      	lsreq	r3, r3, #2
 80144c8:	3002      	addeq	r0, #2
 80144ca:	07da      	lsls	r2, r3, #31
 80144cc:	d403      	bmi.n	80144d6 <__lo0bits+0x4e>
 80144ce:	085b      	lsrs	r3, r3, #1
 80144d0:	f100 0001 	add.w	r0, r0, #1
 80144d4:	d005      	beq.n	80144e2 <__lo0bits+0x5a>
 80144d6:	600b      	str	r3, [r1, #0]
 80144d8:	4770      	bx	lr
 80144da:	4610      	mov	r0, r2
 80144dc:	e7e9      	b.n	80144b2 <__lo0bits+0x2a>
 80144de:	2000      	movs	r0, #0
 80144e0:	4770      	bx	lr
 80144e2:	2020      	movs	r0, #32
 80144e4:	4770      	bx	lr
	...

080144e8 <__i2b>:
 80144e8:	b510      	push	{r4, lr}
 80144ea:	460c      	mov	r4, r1
 80144ec:	2101      	movs	r1, #1
 80144ee:	f7ff feb9 	bl	8014264 <_Balloc>
 80144f2:	4602      	mov	r2, r0
 80144f4:	b928      	cbnz	r0, 8014502 <__i2b+0x1a>
 80144f6:	4b05      	ldr	r3, [pc, #20]	; (801450c <__i2b+0x24>)
 80144f8:	4805      	ldr	r0, [pc, #20]	; (8014510 <__i2b+0x28>)
 80144fa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80144fe:	f7fe fc05 	bl	8012d0c <__assert_func>
 8014502:	2301      	movs	r3, #1
 8014504:	6144      	str	r4, [r0, #20]
 8014506:	6103      	str	r3, [r0, #16]
 8014508:	bd10      	pop	{r4, pc}
 801450a:	bf00      	nop
 801450c:	08019148 	.word	0x08019148
 8014510:	08019234 	.word	0x08019234

08014514 <__multiply>:
 8014514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014518:	4691      	mov	r9, r2
 801451a:	690a      	ldr	r2, [r1, #16]
 801451c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014520:	429a      	cmp	r2, r3
 8014522:	bfb8      	it	lt
 8014524:	460b      	movlt	r3, r1
 8014526:	460c      	mov	r4, r1
 8014528:	bfbc      	itt	lt
 801452a:	464c      	movlt	r4, r9
 801452c:	4699      	movlt	r9, r3
 801452e:	6927      	ldr	r7, [r4, #16]
 8014530:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8014534:	68a3      	ldr	r3, [r4, #8]
 8014536:	6861      	ldr	r1, [r4, #4]
 8014538:	eb07 060a 	add.w	r6, r7, sl
 801453c:	42b3      	cmp	r3, r6
 801453e:	b085      	sub	sp, #20
 8014540:	bfb8      	it	lt
 8014542:	3101      	addlt	r1, #1
 8014544:	f7ff fe8e 	bl	8014264 <_Balloc>
 8014548:	b930      	cbnz	r0, 8014558 <__multiply+0x44>
 801454a:	4602      	mov	r2, r0
 801454c:	4b44      	ldr	r3, [pc, #272]	; (8014660 <__multiply+0x14c>)
 801454e:	4845      	ldr	r0, [pc, #276]	; (8014664 <__multiply+0x150>)
 8014550:	f240 115d 	movw	r1, #349	; 0x15d
 8014554:	f7fe fbda 	bl	8012d0c <__assert_func>
 8014558:	f100 0514 	add.w	r5, r0, #20
 801455c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8014560:	462b      	mov	r3, r5
 8014562:	2200      	movs	r2, #0
 8014564:	4543      	cmp	r3, r8
 8014566:	d321      	bcc.n	80145ac <__multiply+0x98>
 8014568:	f104 0314 	add.w	r3, r4, #20
 801456c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8014570:	f109 0314 	add.w	r3, r9, #20
 8014574:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8014578:	9202      	str	r2, [sp, #8]
 801457a:	1b3a      	subs	r2, r7, r4
 801457c:	3a15      	subs	r2, #21
 801457e:	f022 0203 	bic.w	r2, r2, #3
 8014582:	3204      	adds	r2, #4
 8014584:	f104 0115 	add.w	r1, r4, #21
 8014588:	428f      	cmp	r7, r1
 801458a:	bf38      	it	cc
 801458c:	2204      	movcc	r2, #4
 801458e:	9201      	str	r2, [sp, #4]
 8014590:	9a02      	ldr	r2, [sp, #8]
 8014592:	9303      	str	r3, [sp, #12]
 8014594:	429a      	cmp	r2, r3
 8014596:	d80c      	bhi.n	80145b2 <__multiply+0x9e>
 8014598:	2e00      	cmp	r6, #0
 801459a:	dd03      	ble.n	80145a4 <__multiply+0x90>
 801459c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80145a0:	2b00      	cmp	r3, #0
 80145a2:	d05a      	beq.n	801465a <__multiply+0x146>
 80145a4:	6106      	str	r6, [r0, #16]
 80145a6:	b005      	add	sp, #20
 80145a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145ac:	f843 2b04 	str.w	r2, [r3], #4
 80145b0:	e7d8      	b.n	8014564 <__multiply+0x50>
 80145b2:	f8b3 a000 	ldrh.w	sl, [r3]
 80145b6:	f1ba 0f00 	cmp.w	sl, #0
 80145ba:	d024      	beq.n	8014606 <__multiply+0xf2>
 80145bc:	f104 0e14 	add.w	lr, r4, #20
 80145c0:	46a9      	mov	r9, r5
 80145c2:	f04f 0c00 	mov.w	ip, #0
 80145c6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80145ca:	f8d9 1000 	ldr.w	r1, [r9]
 80145ce:	fa1f fb82 	uxth.w	fp, r2
 80145d2:	b289      	uxth	r1, r1
 80145d4:	fb0a 110b 	mla	r1, sl, fp, r1
 80145d8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80145dc:	f8d9 2000 	ldr.w	r2, [r9]
 80145e0:	4461      	add	r1, ip
 80145e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80145e6:	fb0a c20b 	mla	r2, sl, fp, ip
 80145ea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80145ee:	b289      	uxth	r1, r1
 80145f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80145f4:	4577      	cmp	r7, lr
 80145f6:	f849 1b04 	str.w	r1, [r9], #4
 80145fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80145fe:	d8e2      	bhi.n	80145c6 <__multiply+0xb2>
 8014600:	9a01      	ldr	r2, [sp, #4]
 8014602:	f845 c002 	str.w	ip, [r5, r2]
 8014606:	9a03      	ldr	r2, [sp, #12]
 8014608:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801460c:	3304      	adds	r3, #4
 801460e:	f1b9 0f00 	cmp.w	r9, #0
 8014612:	d020      	beq.n	8014656 <__multiply+0x142>
 8014614:	6829      	ldr	r1, [r5, #0]
 8014616:	f104 0c14 	add.w	ip, r4, #20
 801461a:	46ae      	mov	lr, r5
 801461c:	f04f 0a00 	mov.w	sl, #0
 8014620:	f8bc b000 	ldrh.w	fp, [ip]
 8014624:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8014628:	fb09 220b 	mla	r2, r9, fp, r2
 801462c:	4492      	add	sl, r2
 801462e:	b289      	uxth	r1, r1
 8014630:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8014634:	f84e 1b04 	str.w	r1, [lr], #4
 8014638:	f85c 2b04 	ldr.w	r2, [ip], #4
 801463c:	f8be 1000 	ldrh.w	r1, [lr]
 8014640:	0c12      	lsrs	r2, r2, #16
 8014642:	fb09 1102 	mla	r1, r9, r2, r1
 8014646:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801464a:	4567      	cmp	r7, ip
 801464c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8014650:	d8e6      	bhi.n	8014620 <__multiply+0x10c>
 8014652:	9a01      	ldr	r2, [sp, #4]
 8014654:	50a9      	str	r1, [r5, r2]
 8014656:	3504      	adds	r5, #4
 8014658:	e79a      	b.n	8014590 <__multiply+0x7c>
 801465a:	3e01      	subs	r6, #1
 801465c:	e79c      	b.n	8014598 <__multiply+0x84>
 801465e:	bf00      	nop
 8014660:	08019148 	.word	0x08019148
 8014664:	08019234 	.word	0x08019234

08014668 <__pow5mult>:
 8014668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801466c:	4615      	mov	r5, r2
 801466e:	f012 0203 	ands.w	r2, r2, #3
 8014672:	4606      	mov	r6, r0
 8014674:	460f      	mov	r7, r1
 8014676:	d007      	beq.n	8014688 <__pow5mult+0x20>
 8014678:	4c25      	ldr	r4, [pc, #148]	; (8014710 <__pow5mult+0xa8>)
 801467a:	3a01      	subs	r2, #1
 801467c:	2300      	movs	r3, #0
 801467e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014682:	f7ff fe51 	bl	8014328 <__multadd>
 8014686:	4607      	mov	r7, r0
 8014688:	10ad      	asrs	r5, r5, #2
 801468a:	d03d      	beq.n	8014708 <__pow5mult+0xa0>
 801468c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801468e:	b97c      	cbnz	r4, 80146b0 <__pow5mult+0x48>
 8014690:	2010      	movs	r0, #16
 8014692:	f7fc fab7 	bl	8010c04 <malloc>
 8014696:	4602      	mov	r2, r0
 8014698:	6270      	str	r0, [r6, #36]	; 0x24
 801469a:	b928      	cbnz	r0, 80146a8 <__pow5mult+0x40>
 801469c:	4b1d      	ldr	r3, [pc, #116]	; (8014714 <__pow5mult+0xac>)
 801469e:	481e      	ldr	r0, [pc, #120]	; (8014718 <__pow5mult+0xb0>)
 80146a0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80146a4:	f7fe fb32 	bl	8012d0c <__assert_func>
 80146a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80146ac:	6004      	str	r4, [r0, #0]
 80146ae:	60c4      	str	r4, [r0, #12]
 80146b0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80146b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80146b8:	b94c      	cbnz	r4, 80146ce <__pow5mult+0x66>
 80146ba:	f240 2171 	movw	r1, #625	; 0x271
 80146be:	4630      	mov	r0, r6
 80146c0:	f7ff ff12 	bl	80144e8 <__i2b>
 80146c4:	2300      	movs	r3, #0
 80146c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80146ca:	4604      	mov	r4, r0
 80146cc:	6003      	str	r3, [r0, #0]
 80146ce:	f04f 0900 	mov.w	r9, #0
 80146d2:	07eb      	lsls	r3, r5, #31
 80146d4:	d50a      	bpl.n	80146ec <__pow5mult+0x84>
 80146d6:	4639      	mov	r1, r7
 80146d8:	4622      	mov	r2, r4
 80146da:	4630      	mov	r0, r6
 80146dc:	f7ff ff1a 	bl	8014514 <__multiply>
 80146e0:	4639      	mov	r1, r7
 80146e2:	4680      	mov	r8, r0
 80146e4:	4630      	mov	r0, r6
 80146e6:	f7ff fdfd 	bl	80142e4 <_Bfree>
 80146ea:	4647      	mov	r7, r8
 80146ec:	106d      	asrs	r5, r5, #1
 80146ee:	d00b      	beq.n	8014708 <__pow5mult+0xa0>
 80146f0:	6820      	ldr	r0, [r4, #0]
 80146f2:	b938      	cbnz	r0, 8014704 <__pow5mult+0x9c>
 80146f4:	4622      	mov	r2, r4
 80146f6:	4621      	mov	r1, r4
 80146f8:	4630      	mov	r0, r6
 80146fa:	f7ff ff0b 	bl	8014514 <__multiply>
 80146fe:	6020      	str	r0, [r4, #0]
 8014700:	f8c0 9000 	str.w	r9, [r0]
 8014704:	4604      	mov	r4, r0
 8014706:	e7e4      	b.n	80146d2 <__pow5mult+0x6a>
 8014708:	4638      	mov	r0, r7
 801470a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801470e:	bf00      	nop
 8014710:	08019380 	.word	0x08019380
 8014714:	08018f08 	.word	0x08018f08
 8014718:	08019234 	.word	0x08019234

0801471c <__lshift>:
 801471c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014720:	460c      	mov	r4, r1
 8014722:	6849      	ldr	r1, [r1, #4]
 8014724:	6923      	ldr	r3, [r4, #16]
 8014726:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801472a:	68a3      	ldr	r3, [r4, #8]
 801472c:	4607      	mov	r7, r0
 801472e:	4691      	mov	r9, r2
 8014730:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014734:	f108 0601 	add.w	r6, r8, #1
 8014738:	42b3      	cmp	r3, r6
 801473a:	db0b      	blt.n	8014754 <__lshift+0x38>
 801473c:	4638      	mov	r0, r7
 801473e:	f7ff fd91 	bl	8014264 <_Balloc>
 8014742:	4605      	mov	r5, r0
 8014744:	b948      	cbnz	r0, 801475a <__lshift+0x3e>
 8014746:	4602      	mov	r2, r0
 8014748:	4b2a      	ldr	r3, [pc, #168]	; (80147f4 <__lshift+0xd8>)
 801474a:	482b      	ldr	r0, [pc, #172]	; (80147f8 <__lshift+0xdc>)
 801474c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8014750:	f7fe fadc 	bl	8012d0c <__assert_func>
 8014754:	3101      	adds	r1, #1
 8014756:	005b      	lsls	r3, r3, #1
 8014758:	e7ee      	b.n	8014738 <__lshift+0x1c>
 801475a:	2300      	movs	r3, #0
 801475c:	f100 0114 	add.w	r1, r0, #20
 8014760:	f100 0210 	add.w	r2, r0, #16
 8014764:	4618      	mov	r0, r3
 8014766:	4553      	cmp	r3, sl
 8014768:	db37      	blt.n	80147da <__lshift+0xbe>
 801476a:	6920      	ldr	r0, [r4, #16]
 801476c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014770:	f104 0314 	add.w	r3, r4, #20
 8014774:	f019 091f 	ands.w	r9, r9, #31
 8014778:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801477c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8014780:	d02f      	beq.n	80147e2 <__lshift+0xc6>
 8014782:	f1c9 0e20 	rsb	lr, r9, #32
 8014786:	468a      	mov	sl, r1
 8014788:	f04f 0c00 	mov.w	ip, #0
 801478c:	681a      	ldr	r2, [r3, #0]
 801478e:	fa02 f209 	lsl.w	r2, r2, r9
 8014792:	ea42 020c 	orr.w	r2, r2, ip
 8014796:	f84a 2b04 	str.w	r2, [sl], #4
 801479a:	f853 2b04 	ldr.w	r2, [r3], #4
 801479e:	4298      	cmp	r0, r3
 80147a0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80147a4:	d8f2      	bhi.n	801478c <__lshift+0x70>
 80147a6:	1b03      	subs	r3, r0, r4
 80147a8:	3b15      	subs	r3, #21
 80147aa:	f023 0303 	bic.w	r3, r3, #3
 80147ae:	3304      	adds	r3, #4
 80147b0:	f104 0215 	add.w	r2, r4, #21
 80147b4:	4290      	cmp	r0, r2
 80147b6:	bf38      	it	cc
 80147b8:	2304      	movcc	r3, #4
 80147ba:	f841 c003 	str.w	ip, [r1, r3]
 80147be:	f1bc 0f00 	cmp.w	ip, #0
 80147c2:	d001      	beq.n	80147c8 <__lshift+0xac>
 80147c4:	f108 0602 	add.w	r6, r8, #2
 80147c8:	3e01      	subs	r6, #1
 80147ca:	4638      	mov	r0, r7
 80147cc:	612e      	str	r6, [r5, #16]
 80147ce:	4621      	mov	r1, r4
 80147d0:	f7ff fd88 	bl	80142e4 <_Bfree>
 80147d4:	4628      	mov	r0, r5
 80147d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80147da:	f842 0f04 	str.w	r0, [r2, #4]!
 80147de:	3301      	adds	r3, #1
 80147e0:	e7c1      	b.n	8014766 <__lshift+0x4a>
 80147e2:	3904      	subs	r1, #4
 80147e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80147e8:	f841 2f04 	str.w	r2, [r1, #4]!
 80147ec:	4298      	cmp	r0, r3
 80147ee:	d8f9      	bhi.n	80147e4 <__lshift+0xc8>
 80147f0:	e7ea      	b.n	80147c8 <__lshift+0xac>
 80147f2:	bf00      	nop
 80147f4:	08019148 	.word	0x08019148
 80147f8:	08019234 	.word	0x08019234

080147fc <__mcmp>:
 80147fc:	b530      	push	{r4, r5, lr}
 80147fe:	6902      	ldr	r2, [r0, #16]
 8014800:	690c      	ldr	r4, [r1, #16]
 8014802:	1b12      	subs	r2, r2, r4
 8014804:	d10e      	bne.n	8014824 <__mcmp+0x28>
 8014806:	f100 0314 	add.w	r3, r0, #20
 801480a:	3114      	adds	r1, #20
 801480c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8014810:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8014814:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8014818:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801481c:	42a5      	cmp	r5, r4
 801481e:	d003      	beq.n	8014828 <__mcmp+0x2c>
 8014820:	d305      	bcc.n	801482e <__mcmp+0x32>
 8014822:	2201      	movs	r2, #1
 8014824:	4610      	mov	r0, r2
 8014826:	bd30      	pop	{r4, r5, pc}
 8014828:	4283      	cmp	r3, r0
 801482a:	d3f3      	bcc.n	8014814 <__mcmp+0x18>
 801482c:	e7fa      	b.n	8014824 <__mcmp+0x28>
 801482e:	f04f 32ff 	mov.w	r2, #4294967295
 8014832:	e7f7      	b.n	8014824 <__mcmp+0x28>

08014834 <__mdiff>:
 8014834:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014838:	460c      	mov	r4, r1
 801483a:	4606      	mov	r6, r0
 801483c:	4611      	mov	r1, r2
 801483e:	4620      	mov	r0, r4
 8014840:	4690      	mov	r8, r2
 8014842:	f7ff ffdb 	bl	80147fc <__mcmp>
 8014846:	1e05      	subs	r5, r0, #0
 8014848:	d110      	bne.n	801486c <__mdiff+0x38>
 801484a:	4629      	mov	r1, r5
 801484c:	4630      	mov	r0, r6
 801484e:	f7ff fd09 	bl	8014264 <_Balloc>
 8014852:	b930      	cbnz	r0, 8014862 <__mdiff+0x2e>
 8014854:	4b3a      	ldr	r3, [pc, #232]	; (8014940 <__mdiff+0x10c>)
 8014856:	4602      	mov	r2, r0
 8014858:	f240 2132 	movw	r1, #562	; 0x232
 801485c:	4839      	ldr	r0, [pc, #228]	; (8014944 <__mdiff+0x110>)
 801485e:	f7fe fa55 	bl	8012d0c <__assert_func>
 8014862:	2301      	movs	r3, #1
 8014864:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014868:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801486c:	bfa4      	itt	ge
 801486e:	4643      	movge	r3, r8
 8014870:	46a0      	movge	r8, r4
 8014872:	4630      	mov	r0, r6
 8014874:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014878:	bfa6      	itte	ge
 801487a:	461c      	movge	r4, r3
 801487c:	2500      	movge	r5, #0
 801487e:	2501      	movlt	r5, #1
 8014880:	f7ff fcf0 	bl	8014264 <_Balloc>
 8014884:	b920      	cbnz	r0, 8014890 <__mdiff+0x5c>
 8014886:	4b2e      	ldr	r3, [pc, #184]	; (8014940 <__mdiff+0x10c>)
 8014888:	4602      	mov	r2, r0
 801488a:	f44f 7110 	mov.w	r1, #576	; 0x240
 801488e:	e7e5      	b.n	801485c <__mdiff+0x28>
 8014890:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8014894:	6926      	ldr	r6, [r4, #16]
 8014896:	60c5      	str	r5, [r0, #12]
 8014898:	f104 0914 	add.w	r9, r4, #20
 801489c:	f108 0514 	add.w	r5, r8, #20
 80148a0:	f100 0e14 	add.w	lr, r0, #20
 80148a4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80148a8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80148ac:	f108 0210 	add.w	r2, r8, #16
 80148b0:	46f2      	mov	sl, lr
 80148b2:	2100      	movs	r1, #0
 80148b4:	f859 3b04 	ldr.w	r3, [r9], #4
 80148b8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80148bc:	fa1f f883 	uxth.w	r8, r3
 80148c0:	fa11 f18b 	uxtah	r1, r1, fp
 80148c4:	0c1b      	lsrs	r3, r3, #16
 80148c6:	eba1 0808 	sub.w	r8, r1, r8
 80148ca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80148ce:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80148d2:	fa1f f888 	uxth.w	r8, r8
 80148d6:	1419      	asrs	r1, r3, #16
 80148d8:	454e      	cmp	r6, r9
 80148da:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80148de:	f84a 3b04 	str.w	r3, [sl], #4
 80148e2:	d8e7      	bhi.n	80148b4 <__mdiff+0x80>
 80148e4:	1b33      	subs	r3, r6, r4
 80148e6:	3b15      	subs	r3, #21
 80148e8:	f023 0303 	bic.w	r3, r3, #3
 80148ec:	3304      	adds	r3, #4
 80148ee:	3415      	adds	r4, #21
 80148f0:	42a6      	cmp	r6, r4
 80148f2:	bf38      	it	cc
 80148f4:	2304      	movcc	r3, #4
 80148f6:	441d      	add	r5, r3
 80148f8:	4473      	add	r3, lr
 80148fa:	469e      	mov	lr, r3
 80148fc:	462e      	mov	r6, r5
 80148fe:	4566      	cmp	r6, ip
 8014900:	d30e      	bcc.n	8014920 <__mdiff+0xec>
 8014902:	f10c 0203 	add.w	r2, ip, #3
 8014906:	1b52      	subs	r2, r2, r5
 8014908:	f022 0203 	bic.w	r2, r2, #3
 801490c:	3d03      	subs	r5, #3
 801490e:	45ac      	cmp	ip, r5
 8014910:	bf38      	it	cc
 8014912:	2200      	movcc	r2, #0
 8014914:	441a      	add	r2, r3
 8014916:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801491a:	b17b      	cbz	r3, 801493c <__mdiff+0x108>
 801491c:	6107      	str	r7, [r0, #16]
 801491e:	e7a3      	b.n	8014868 <__mdiff+0x34>
 8014920:	f856 8b04 	ldr.w	r8, [r6], #4
 8014924:	fa11 f288 	uxtah	r2, r1, r8
 8014928:	1414      	asrs	r4, r2, #16
 801492a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801492e:	b292      	uxth	r2, r2
 8014930:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8014934:	f84e 2b04 	str.w	r2, [lr], #4
 8014938:	1421      	asrs	r1, r4, #16
 801493a:	e7e0      	b.n	80148fe <__mdiff+0xca>
 801493c:	3f01      	subs	r7, #1
 801493e:	e7ea      	b.n	8014916 <__mdiff+0xe2>
 8014940:	08019148 	.word	0x08019148
 8014944:	08019234 	.word	0x08019234

08014948 <__ulp>:
 8014948:	b082      	sub	sp, #8
 801494a:	ed8d 0b00 	vstr	d0, [sp]
 801494e:	9b01      	ldr	r3, [sp, #4]
 8014950:	4912      	ldr	r1, [pc, #72]	; (801499c <__ulp+0x54>)
 8014952:	4019      	ands	r1, r3
 8014954:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8014958:	2900      	cmp	r1, #0
 801495a:	dd05      	ble.n	8014968 <__ulp+0x20>
 801495c:	2200      	movs	r2, #0
 801495e:	460b      	mov	r3, r1
 8014960:	ec43 2b10 	vmov	d0, r2, r3
 8014964:	b002      	add	sp, #8
 8014966:	4770      	bx	lr
 8014968:	4249      	negs	r1, r1
 801496a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801496e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8014972:	f04f 0200 	mov.w	r2, #0
 8014976:	f04f 0300 	mov.w	r3, #0
 801497a:	da04      	bge.n	8014986 <__ulp+0x3e>
 801497c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8014980:	fa41 f300 	asr.w	r3, r1, r0
 8014984:	e7ec      	b.n	8014960 <__ulp+0x18>
 8014986:	f1a0 0114 	sub.w	r1, r0, #20
 801498a:	291e      	cmp	r1, #30
 801498c:	bfda      	itte	le
 801498e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8014992:	fa20 f101 	lsrle.w	r1, r0, r1
 8014996:	2101      	movgt	r1, #1
 8014998:	460a      	mov	r2, r1
 801499a:	e7e1      	b.n	8014960 <__ulp+0x18>
 801499c:	7ff00000 	.word	0x7ff00000

080149a0 <__b2d>:
 80149a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149a2:	6905      	ldr	r5, [r0, #16]
 80149a4:	f100 0714 	add.w	r7, r0, #20
 80149a8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80149ac:	1f2e      	subs	r6, r5, #4
 80149ae:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80149b2:	4620      	mov	r0, r4
 80149b4:	f7ff fd48 	bl	8014448 <__hi0bits>
 80149b8:	f1c0 0320 	rsb	r3, r0, #32
 80149bc:	280a      	cmp	r0, #10
 80149be:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8014a3c <__b2d+0x9c>
 80149c2:	600b      	str	r3, [r1, #0]
 80149c4:	dc14      	bgt.n	80149f0 <__b2d+0x50>
 80149c6:	f1c0 0e0b 	rsb	lr, r0, #11
 80149ca:	fa24 f10e 	lsr.w	r1, r4, lr
 80149ce:	42b7      	cmp	r7, r6
 80149d0:	ea41 030c 	orr.w	r3, r1, ip
 80149d4:	bf34      	ite	cc
 80149d6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80149da:	2100      	movcs	r1, #0
 80149dc:	3015      	adds	r0, #21
 80149de:	fa04 f000 	lsl.w	r0, r4, r0
 80149e2:	fa21 f10e 	lsr.w	r1, r1, lr
 80149e6:	ea40 0201 	orr.w	r2, r0, r1
 80149ea:	ec43 2b10 	vmov	d0, r2, r3
 80149ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80149f0:	42b7      	cmp	r7, r6
 80149f2:	bf3a      	itte	cc
 80149f4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80149f8:	f1a5 0608 	subcc.w	r6, r5, #8
 80149fc:	2100      	movcs	r1, #0
 80149fe:	380b      	subs	r0, #11
 8014a00:	d017      	beq.n	8014a32 <__b2d+0x92>
 8014a02:	f1c0 0c20 	rsb	ip, r0, #32
 8014a06:	fa04 f500 	lsl.w	r5, r4, r0
 8014a0a:	42be      	cmp	r6, r7
 8014a0c:	fa21 f40c 	lsr.w	r4, r1, ip
 8014a10:	ea45 0504 	orr.w	r5, r5, r4
 8014a14:	bf8c      	ite	hi
 8014a16:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8014a1a:	2400      	movls	r4, #0
 8014a1c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8014a20:	fa01 f000 	lsl.w	r0, r1, r0
 8014a24:	fa24 f40c 	lsr.w	r4, r4, ip
 8014a28:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8014a2c:	ea40 0204 	orr.w	r2, r0, r4
 8014a30:	e7db      	b.n	80149ea <__b2d+0x4a>
 8014a32:	ea44 030c 	orr.w	r3, r4, ip
 8014a36:	460a      	mov	r2, r1
 8014a38:	e7d7      	b.n	80149ea <__b2d+0x4a>
 8014a3a:	bf00      	nop
 8014a3c:	3ff00000 	.word	0x3ff00000

08014a40 <__d2b>:
 8014a40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014a44:	4689      	mov	r9, r1
 8014a46:	2101      	movs	r1, #1
 8014a48:	ec57 6b10 	vmov	r6, r7, d0
 8014a4c:	4690      	mov	r8, r2
 8014a4e:	f7ff fc09 	bl	8014264 <_Balloc>
 8014a52:	4604      	mov	r4, r0
 8014a54:	b930      	cbnz	r0, 8014a64 <__d2b+0x24>
 8014a56:	4602      	mov	r2, r0
 8014a58:	4b25      	ldr	r3, [pc, #148]	; (8014af0 <__d2b+0xb0>)
 8014a5a:	4826      	ldr	r0, [pc, #152]	; (8014af4 <__d2b+0xb4>)
 8014a5c:	f240 310a 	movw	r1, #778	; 0x30a
 8014a60:	f7fe f954 	bl	8012d0c <__assert_func>
 8014a64:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8014a68:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014a6c:	bb35      	cbnz	r5, 8014abc <__d2b+0x7c>
 8014a6e:	2e00      	cmp	r6, #0
 8014a70:	9301      	str	r3, [sp, #4]
 8014a72:	d028      	beq.n	8014ac6 <__d2b+0x86>
 8014a74:	4668      	mov	r0, sp
 8014a76:	9600      	str	r6, [sp, #0]
 8014a78:	f7ff fd06 	bl	8014488 <__lo0bits>
 8014a7c:	9900      	ldr	r1, [sp, #0]
 8014a7e:	b300      	cbz	r0, 8014ac2 <__d2b+0x82>
 8014a80:	9a01      	ldr	r2, [sp, #4]
 8014a82:	f1c0 0320 	rsb	r3, r0, #32
 8014a86:	fa02 f303 	lsl.w	r3, r2, r3
 8014a8a:	430b      	orrs	r3, r1
 8014a8c:	40c2      	lsrs	r2, r0
 8014a8e:	6163      	str	r3, [r4, #20]
 8014a90:	9201      	str	r2, [sp, #4]
 8014a92:	9b01      	ldr	r3, [sp, #4]
 8014a94:	61a3      	str	r3, [r4, #24]
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	bf14      	ite	ne
 8014a9a:	2202      	movne	r2, #2
 8014a9c:	2201      	moveq	r2, #1
 8014a9e:	6122      	str	r2, [r4, #16]
 8014aa0:	b1d5      	cbz	r5, 8014ad8 <__d2b+0x98>
 8014aa2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014aa6:	4405      	add	r5, r0
 8014aa8:	f8c9 5000 	str.w	r5, [r9]
 8014aac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014ab0:	f8c8 0000 	str.w	r0, [r8]
 8014ab4:	4620      	mov	r0, r4
 8014ab6:	b003      	add	sp, #12
 8014ab8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014abc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014ac0:	e7d5      	b.n	8014a6e <__d2b+0x2e>
 8014ac2:	6161      	str	r1, [r4, #20]
 8014ac4:	e7e5      	b.n	8014a92 <__d2b+0x52>
 8014ac6:	a801      	add	r0, sp, #4
 8014ac8:	f7ff fcde 	bl	8014488 <__lo0bits>
 8014acc:	9b01      	ldr	r3, [sp, #4]
 8014ace:	6163      	str	r3, [r4, #20]
 8014ad0:	2201      	movs	r2, #1
 8014ad2:	6122      	str	r2, [r4, #16]
 8014ad4:	3020      	adds	r0, #32
 8014ad6:	e7e3      	b.n	8014aa0 <__d2b+0x60>
 8014ad8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014adc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014ae0:	f8c9 0000 	str.w	r0, [r9]
 8014ae4:	6918      	ldr	r0, [r3, #16]
 8014ae6:	f7ff fcaf 	bl	8014448 <__hi0bits>
 8014aea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014aee:	e7df      	b.n	8014ab0 <__d2b+0x70>
 8014af0:	08019148 	.word	0x08019148
 8014af4:	08019234 	.word	0x08019234

08014af8 <__ratio>:
 8014af8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014afc:	4688      	mov	r8, r1
 8014afe:	4669      	mov	r1, sp
 8014b00:	4681      	mov	r9, r0
 8014b02:	f7ff ff4d 	bl	80149a0 <__b2d>
 8014b06:	a901      	add	r1, sp, #4
 8014b08:	4640      	mov	r0, r8
 8014b0a:	ec55 4b10 	vmov	r4, r5, d0
 8014b0e:	f7ff ff47 	bl	80149a0 <__b2d>
 8014b12:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014b16:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8014b1a:	eba3 0c02 	sub.w	ip, r3, r2
 8014b1e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8014b22:	1a9b      	subs	r3, r3, r2
 8014b24:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8014b28:	ec51 0b10 	vmov	r0, r1, d0
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	bfd6      	itet	le
 8014b30:	460a      	movle	r2, r1
 8014b32:	462a      	movgt	r2, r5
 8014b34:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8014b38:	468b      	mov	fp, r1
 8014b3a:	462f      	mov	r7, r5
 8014b3c:	bfd4      	ite	le
 8014b3e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8014b42:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8014b46:	4620      	mov	r0, r4
 8014b48:	ee10 2a10 	vmov	r2, s0
 8014b4c:	465b      	mov	r3, fp
 8014b4e:	4639      	mov	r1, r7
 8014b50:	f7eb fe94 	bl	800087c <__aeabi_ddiv>
 8014b54:	ec41 0b10 	vmov	d0, r0, r1
 8014b58:	b003      	add	sp, #12
 8014b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014b5e <__copybits>:
 8014b5e:	3901      	subs	r1, #1
 8014b60:	b570      	push	{r4, r5, r6, lr}
 8014b62:	1149      	asrs	r1, r1, #5
 8014b64:	6914      	ldr	r4, [r2, #16]
 8014b66:	3101      	adds	r1, #1
 8014b68:	f102 0314 	add.w	r3, r2, #20
 8014b6c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8014b70:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014b74:	1f05      	subs	r5, r0, #4
 8014b76:	42a3      	cmp	r3, r4
 8014b78:	d30c      	bcc.n	8014b94 <__copybits+0x36>
 8014b7a:	1aa3      	subs	r3, r4, r2
 8014b7c:	3b11      	subs	r3, #17
 8014b7e:	f023 0303 	bic.w	r3, r3, #3
 8014b82:	3211      	adds	r2, #17
 8014b84:	42a2      	cmp	r2, r4
 8014b86:	bf88      	it	hi
 8014b88:	2300      	movhi	r3, #0
 8014b8a:	4418      	add	r0, r3
 8014b8c:	2300      	movs	r3, #0
 8014b8e:	4288      	cmp	r0, r1
 8014b90:	d305      	bcc.n	8014b9e <__copybits+0x40>
 8014b92:	bd70      	pop	{r4, r5, r6, pc}
 8014b94:	f853 6b04 	ldr.w	r6, [r3], #4
 8014b98:	f845 6f04 	str.w	r6, [r5, #4]!
 8014b9c:	e7eb      	b.n	8014b76 <__copybits+0x18>
 8014b9e:	f840 3b04 	str.w	r3, [r0], #4
 8014ba2:	e7f4      	b.n	8014b8e <__copybits+0x30>

08014ba4 <__any_on>:
 8014ba4:	f100 0214 	add.w	r2, r0, #20
 8014ba8:	6900      	ldr	r0, [r0, #16]
 8014baa:	114b      	asrs	r3, r1, #5
 8014bac:	4298      	cmp	r0, r3
 8014bae:	b510      	push	{r4, lr}
 8014bb0:	db11      	blt.n	8014bd6 <__any_on+0x32>
 8014bb2:	dd0a      	ble.n	8014bca <__any_on+0x26>
 8014bb4:	f011 011f 	ands.w	r1, r1, #31
 8014bb8:	d007      	beq.n	8014bca <__any_on+0x26>
 8014bba:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8014bbe:	fa24 f001 	lsr.w	r0, r4, r1
 8014bc2:	fa00 f101 	lsl.w	r1, r0, r1
 8014bc6:	428c      	cmp	r4, r1
 8014bc8:	d10b      	bne.n	8014be2 <__any_on+0x3e>
 8014bca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014bce:	4293      	cmp	r3, r2
 8014bd0:	d803      	bhi.n	8014bda <__any_on+0x36>
 8014bd2:	2000      	movs	r0, #0
 8014bd4:	bd10      	pop	{r4, pc}
 8014bd6:	4603      	mov	r3, r0
 8014bd8:	e7f7      	b.n	8014bca <__any_on+0x26>
 8014bda:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014bde:	2900      	cmp	r1, #0
 8014be0:	d0f5      	beq.n	8014bce <__any_on+0x2a>
 8014be2:	2001      	movs	r0, #1
 8014be4:	e7f6      	b.n	8014bd4 <__any_on+0x30>

08014be6 <_calloc_r>:
 8014be6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014be8:	fba1 2402 	umull	r2, r4, r1, r2
 8014bec:	b94c      	cbnz	r4, 8014c02 <_calloc_r+0x1c>
 8014bee:	4611      	mov	r1, r2
 8014bf0:	9201      	str	r2, [sp, #4]
 8014bf2:	f7fc fafd 	bl	80111f0 <_malloc_r>
 8014bf6:	9a01      	ldr	r2, [sp, #4]
 8014bf8:	4605      	mov	r5, r0
 8014bfa:	b930      	cbnz	r0, 8014c0a <_calloc_r+0x24>
 8014bfc:	4628      	mov	r0, r5
 8014bfe:	b003      	add	sp, #12
 8014c00:	bd30      	pop	{r4, r5, pc}
 8014c02:	220c      	movs	r2, #12
 8014c04:	6002      	str	r2, [r0, #0]
 8014c06:	2500      	movs	r5, #0
 8014c08:	e7f8      	b.n	8014bfc <_calloc_r+0x16>
 8014c0a:	4621      	mov	r1, r4
 8014c0c:	f7fc f80a 	bl	8010c24 <memset>
 8014c10:	e7f4      	b.n	8014bfc <_calloc_r+0x16>

08014c12 <__ssputs_r>:
 8014c12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014c16:	688e      	ldr	r6, [r1, #8]
 8014c18:	429e      	cmp	r6, r3
 8014c1a:	4682      	mov	sl, r0
 8014c1c:	460c      	mov	r4, r1
 8014c1e:	4690      	mov	r8, r2
 8014c20:	461f      	mov	r7, r3
 8014c22:	d838      	bhi.n	8014c96 <__ssputs_r+0x84>
 8014c24:	898a      	ldrh	r2, [r1, #12]
 8014c26:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014c2a:	d032      	beq.n	8014c92 <__ssputs_r+0x80>
 8014c2c:	6825      	ldr	r5, [r4, #0]
 8014c2e:	6909      	ldr	r1, [r1, #16]
 8014c30:	eba5 0901 	sub.w	r9, r5, r1
 8014c34:	6965      	ldr	r5, [r4, #20]
 8014c36:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014c3a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014c3e:	3301      	adds	r3, #1
 8014c40:	444b      	add	r3, r9
 8014c42:	106d      	asrs	r5, r5, #1
 8014c44:	429d      	cmp	r5, r3
 8014c46:	bf38      	it	cc
 8014c48:	461d      	movcc	r5, r3
 8014c4a:	0553      	lsls	r3, r2, #21
 8014c4c:	d531      	bpl.n	8014cb2 <__ssputs_r+0xa0>
 8014c4e:	4629      	mov	r1, r5
 8014c50:	f7fc face 	bl	80111f0 <_malloc_r>
 8014c54:	4606      	mov	r6, r0
 8014c56:	b950      	cbnz	r0, 8014c6e <__ssputs_r+0x5c>
 8014c58:	230c      	movs	r3, #12
 8014c5a:	f8ca 3000 	str.w	r3, [sl]
 8014c5e:	89a3      	ldrh	r3, [r4, #12]
 8014c60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014c64:	81a3      	strh	r3, [r4, #12]
 8014c66:	f04f 30ff 	mov.w	r0, #4294967295
 8014c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014c6e:	6921      	ldr	r1, [r4, #16]
 8014c70:	464a      	mov	r2, r9
 8014c72:	f7ff fadc 	bl	801422e <memcpy>
 8014c76:	89a3      	ldrh	r3, [r4, #12]
 8014c78:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014c80:	81a3      	strh	r3, [r4, #12]
 8014c82:	6126      	str	r6, [r4, #16]
 8014c84:	6165      	str	r5, [r4, #20]
 8014c86:	444e      	add	r6, r9
 8014c88:	eba5 0509 	sub.w	r5, r5, r9
 8014c8c:	6026      	str	r6, [r4, #0]
 8014c8e:	60a5      	str	r5, [r4, #8]
 8014c90:	463e      	mov	r6, r7
 8014c92:	42be      	cmp	r6, r7
 8014c94:	d900      	bls.n	8014c98 <__ssputs_r+0x86>
 8014c96:	463e      	mov	r6, r7
 8014c98:	6820      	ldr	r0, [r4, #0]
 8014c9a:	4632      	mov	r2, r6
 8014c9c:	4641      	mov	r1, r8
 8014c9e:	f000 fea3 	bl	80159e8 <memmove>
 8014ca2:	68a3      	ldr	r3, [r4, #8]
 8014ca4:	1b9b      	subs	r3, r3, r6
 8014ca6:	60a3      	str	r3, [r4, #8]
 8014ca8:	6823      	ldr	r3, [r4, #0]
 8014caa:	4433      	add	r3, r6
 8014cac:	6023      	str	r3, [r4, #0]
 8014cae:	2000      	movs	r0, #0
 8014cb0:	e7db      	b.n	8014c6a <__ssputs_r+0x58>
 8014cb2:	462a      	mov	r2, r5
 8014cb4:	f000 feb2 	bl	8015a1c <_realloc_r>
 8014cb8:	4606      	mov	r6, r0
 8014cba:	2800      	cmp	r0, #0
 8014cbc:	d1e1      	bne.n	8014c82 <__ssputs_r+0x70>
 8014cbe:	6921      	ldr	r1, [r4, #16]
 8014cc0:	4650      	mov	r0, sl
 8014cc2:	f7fc fa29 	bl	8011118 <_free_r>
 8014cc6:	e7c7      	b.n	8014c58 <__ssputs_r+0x46>

08014cc8 <_svfiprintf_r>:
 8014cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ccc:	4698      	mov	r8, r3
 8014cce:	898b      	ldrh	r3, [r1, #12]
 8014cd0:	061b      	lsls	r3, r3, #24
 8014cd2:	b09d      	sub	sp, #116	; 0x74
 8014cd4:	4607      	mov	r7, r0
 8014cd6:	460d      	mov	r5, r1
 8014cd8:	4614      	mov	r4, r2
 8014cda:	d50e      	bpl.n	8014cfa <_svfiprintf_r+0x32>
 8014cdc:	690b      	ldr	r3, [r1, #16]
 8014cde:	b963      	cbnz	r3, 8014cfa <_svfiprintf_r+0x32>
 8014ce0:	2140      	movs	r1, #64	; 0x40
 8014ce2:	f7fc fa85 	bl	80111f0 <_malloc_r>
 8014ce6:	6028      	str	r0, [r5, #0]
 8014ce8:	6128      	str	r0, [r5, #16]
 8014cea:	b920      	cbnz	r0, 8014cf6 <_svfiprintf_r+0x2e>
 8014cec:	230c      	movs	r3, #12
 8014cee:	603b      	str	r3, [r7, #0]
 8014cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8014cf4:	e0d1      	b.n	8014e9a <_svfiprintf_r+0x1d2>
 8014cf6:	2340      	movs	r3, #64	; 0x40
 8014cf8:	616b      	str	r3, [r5, #20]
 8014cfa:	2300      	movs	r3, #0
 8014cfc:	9309      	str	r3, [sp, #36]	; 0x24
 8014cfe:	2320      	movs	r3, #32
 8014d00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014d04:	f8cd 800c 	str.w	r8, [sp, #12]
 8014d08:	2330      	movs	r3, #48	; 0x30
 8014d0a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014eb4 <_svfiprintf_r+0x1ec>
 8014d0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014d12:	f04f 0901 	mov.w	r9, #1
 8014d16:	4623      	mov	r3, r4
 8014d18:	469a      	mov	sl, r3
 8014d1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014d1e:	b10a      	cbz	r2, 8014d24 <_svfiprintf_r+0x5c>
 8014d20:	2a25      	cmp	r2, #37	; 0x25
 8014d22:	d1f9      	bne.n	8014d18 <_svfiprintf_r+0x50>
 8014d24:	ebba 0b04 	subs.w	fp, sl, r4
 8014d28:	d00b      	beq.n	8014d42 <_svfiprintf_r+0x7a>
 8014d2a:	465b      	mov	r3, fp
 8014d2c:	4622      	mov	r2, r4
 8014d2e:	4629      	mov	r1, r5
 8014d30:	4638      	mov	r0, r7
 8014d32:	f7ff ff6e 	bl	8014c12 <__ssputs_r>
 8014d36:	3001      	adds	r0, #1
 8014d38:	f000 80aa 	beq.w	8014e90 <_svfiprintf_r+0x1c8>
 8014d3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014d3e:	445a      	add	r2, fp
 8014d40:	9209      	str	r2, [sp, #36]	; 0x24
 8014d42:	f89a 3000 	ldrb.w	r3, [sl]
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	f000 80a2 	beq.w	8014e90 <_svfiprintf_r+0x1c8>
 8014d4c:	2300      	movs	r3, #0
 8014d4e:	f04f 32ff 	mov.w	r2, #4294967295
 8014d52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014d56:	f10a 0a01 	add.w	sl, sl, #1
 8014d5a:	9304      	str	r3, [sp, #16]
 8014d5c:	9307      	str	r3, [sp, #28]
 8014d5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014d62:	931a      	str	r3, [sp, #104]	; 0x68
 8014d64:	4654      	mov	r4, sl
 8014d66:	2205      	movs	r2, #5
 8014d68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014d6c:	4851      	ldr	r0, [pc, #324]	; (8014eb4 <_svfiprintf_r+0x1ec>)
 8014d6e:	f7eb fa4f 	bl	8000210 <memchr>
 8014d72:	9a04      	ldr	r2, [sp, #16]
 8014d74:	b9d8      	cbnz	r0, 8014dae <_svfiprintf_r+0xe6>
 8014d76:	06d0      	lsls	r0, r2, #27
 8014d78:	bf44      	itt	mi
 8014d7a:	2320      	movmi	r3, #32
 8014d7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014d80:	0711      	lsls	r1, r2, #28
 8014d82:	bf44      	itt	mi
 8014d84:	232b      	movmi	r3, #43	; 0x2b
 8014d86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014d8a:	f89a 3000 	ldrb.w	r3, [sl]
 8014d8e:	2b2a      	cmp	r3, #42	; 0x2a
 8014d90:	d015      	beq.n	8014dbe <_svfiprintf_r+0xf6>
 8014d92:	9a07      	ldr	r2, [sp, #28]
 8014d94:	4654      	mov	r4, sl
 8014d96:	2000      	movs	r0, #0
 8014d98:	f04f 0c0a 	mov.w	ip, #10
 8014d9c:	4621      	mov	r1, r4
 8014d9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014da2:	3b30      	subs	r3, #48	; 0x30
 8014da4:	2b09      	cmp	r3, #9
 8014da6:	d94e      	bls.n	8014e46 <_svfiprintf_r+0x17e>
 8014da8:	b1b0      	cbz	r0, 8014dd8 <_svfiprintf_r+0x110>
 8014daa:	9207      	str	r2, [sp, #28]
 8014dac:	e014      	b.n	8014dd8 <_svfiprintf_r+0x110>
 8014dae:	eba0 0308 	sub.w	r3, r0, r8
 8014db2:	fa09 f303 	lsl.w	r3, r9, r3
 8014db6:	4313      	orrs	r3, r2
 8014db8:	9304      	str	r3, [sp, #16]
 8014dba:	46a2      	mov	sl, r4
 8014dbc:	e7d2      	b.n	8014d64 <_svfiprintf_r+0x9c>
 8014dbe:	9b03      	ldr	r3, [sp, #12]
 8014dc0:	1d19      	adds	r1, r3, #4
 8014dc2:	681b      	ldr	r3, [r3, #0]
 8014dc4:	9103      	str	r1, [sp, #12]
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	bfbb      	ittet	lt
 8014dca:	425b      	neglt	r3, r3
 8014dcc:	f042 0202 	orrlt.w	r2, r2, #2
 8014dd0:	9307      	strge	r3, [sp, #28]
 8014dd2:	9307      	strlt	r3, [sp, #28]
 8014dd4:	bfb8      	it	lt
 8014dd6:	9204      	strlt	r2, [sp, #16]
 8014dd8:	7823      	ldrb	r3, [r4, #0]
 8014dda:	2b2e      	cmp	r3, #46	; 0x2e
 8014ddc:	d10c      	bne.n	8014df8 <_svfiprintf_r+0x130>
 8014dde:	7863      	ldrb	r3, [r4, #1]
 8014de0:	2b2a      	cmp	r3, #42	; 0x2a
 8014de2:	d135      	bne.n	8014e50 <_svfiprintf_r+0x188>
 8014de4:	9b03      	ldr	r3, [sp, #12]
 8014de6:	1d1a      	adds	r2, r3, #4
 8014de8:	681b      	ldr	r3, [r3, #0]
 8014dea:	9203      	str	r2, [sp, #12]
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	bfb8      	it	lt
 8014df0:	f04f 33ff 	movlt.w	r3, #4294967295
 8014df4:	3402      	adds	r4, #2
 8014df6:	9305      	str	r3, [sp, #20]
 8014df8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014ec4 <_svfiprintf_r+0x1fc>
 8014dfc:	7821      	ldrb	r1, [r4, #0]
 8014dfe:	2203      	movs	r2, #3
 8014e00:	4650      	mov	r0, sl
 8014e02:	f7eb fa05 	bl	8000210 <memchr>
 8014e06:	b140      	cbz	r0, 8014e1a <_svfiprintf_r+0x152>
 8014e08:	2340      	movs	r3, #64	; 0x40
 8014e0a:	eba0 000a 	sub.w	r0, r0, sl
 8014e0e:	fa03 f000 	lsl.w	r0, r3, r0
 8014e12:	9b04      	ldr	r3, [sp, #16]
 8014e14:	4303      	orrs	r3, r0
 8014e16:	3401      	adds	r4, #1
 8014e18:	9304      	str	r3, [sp, #16]
 8014e1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e1e:	4826      	ldr	r0, [pc, #152]	; (8014eb8 <_svfiprintf_r+0x1f0>)
 8014e20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014e24:	2206      	movs	r2, #6
 8014e26:	f7eb f9f3 	bl	8000210 <memchr>
 8014e2a:	2800      	cmp	r0, #0
 8014e2c:	d038      	beq.n	8014ea0 <_svfiprintf_r+0x1d8>
 8014e2e:	4b23      	ldr	r3, [pc, #140]	; (8014ebc <_svfiprintf_r+0x1f4>)
 8014e30:	bb1b      	cbnz	r3, 8014e7a <_svfiprintf_r+0x1b2>
 8014e32:	9b03      	ldr	r3, [sp, #12]
 8014e34:	3307      	adds	r3, #7
 8014e36:	f023 0307 	bic.w	r3, r3, #7
 8014e3a:	3308      	adds	r3, #8
 8014e3c:	9303      	str	r3, [sp, #12]
 8014e3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e40:	4433      	add	r3, r6
 8014e42:	9309      	str	r3, [sp, #36]	; 0x24
 8014e44:	e767      	b.n	8014d16 <_svfiprintf_r+0x4e>
 8014e46:	fb0c 3202 	mla	r2, ip, r2, r3
 8014e4a:	460c      	mov	r4, r1
 8014e4c:	2001      	movs	r0, #1
 8014e4e:	e7a5      	b.n	8014d9c <_svfiprintf_r+0xd4>
 8014e50:	2300      	movs	r3, #0
 8014e52:	3401      	adds	r4, #1
 8014e54:	9305      	str	r3, [sp, #20]
 8014e56:	4619      	mov	r1, r3
 8014e58:	f04f 0c0a 	mov.w	ip, #10
 8014e5c:	4620      	mov	r0, r4
 8014e5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014e62:	3a30      	subs	r2, #48	; 0x30
 8014e64:	2a09      	cmp	r2, #9
 8014e66:	d903      	bls.n	8014e70 <_svfiprintf_r+0x1a8>
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	d0c5      	beq.n	8014df8 <_svfiprintf_r+0x130>
 8014e6c:	9105      	str	r1, [sp, #20]
 8014e6e:	e7c3      	b.n	8014df8 <_svfiprintf_r+0x130>
 8014e70:	fb0c 2101 	mla	r1, ip, r1, r2
 8014e74:	4604      	mov	r4, r0
 8014e76:	2301      	movs	r3, #1
 8014e78:	e7f0      	b.n	8014e5c <_svfiprintf_r+0x194>
 8014e7a:	ab03      	add	r3, sp, #12
 8014e7c:	9300      	str	r3, [sp, #0]
 8014e7e:	462a      	mov	r2, r5
 8014e80:	4b0f      	ldr	r3, [pc, #60]	; (8014ec0 <_svfiprintf_r+0x1f8>)
 8014e82:	a904      	add	r1, sp, #16
 8014e84:	4638      	mov	r0, r7
 8014e86:	f7fc fac7 	bl	8011418 <_printf_float>
 8014e8a:	1c42      	adds	r2, r0, #1
 8014e8c:	4606      	mov	r6, r0
 8014e8e:	d1d6      	bne.n	8014e3e <_svfiprintf_r+0x176>
 8014e90:	89ab      	ldrh	r3, [r5, #12]
 8014e92:	065b      	lsls	r3, r3, #25
 8014e94:	f53f af2c 	bmi.w	8014cf0 <_svfiprintf_r+0x28>
 8014e98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014e9a:	b01d      	add	sp, #116	; 0x74
 8014e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ea0:	ab03      	add	r3, sp, #12
 8014ea2:	9300      	str	r3, [sp, #0]
 8014ea4:	462a      	mov	r2, r5
 8014ea6:	4b06      	ldr	r3, [pc, #24]	; (8014ec0 <_svfiprintf_r+0x1f8>)
 8014ea8:	a904      	add	r1, sp, #16
 8014eaa:	4638      	mov	r0, r7
 8014eac:	f7fc fd58 	bl	8011960 <_printf_i>
 8014eb0:	e7eb      	b.n	8014e8a <_svfiprintf_r+0x1c2>
 8014eb2:	bf00      	nop
 8014eb4:	0801938c 	.word	0x0801938c
 8014eb8:	08019396 	.word	0x08019396
 8014ebc:	08011419 	.word	0x08011419
 8014ec0:	08014c13 	.word	0x08014c13
 8014ec4:	08019392 	.word	0x08019392

08014ec8 <__sfputc_r>:
 8014ec8:	6893      	ldr	r3, [r2, #8]
 8014eca:	3b01      	subs	r3, #1
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	b410      	push	{r4}
 8014ed0:	6093      	str	r3, [r2, #8]
 8014ed2:	da08      	bge.n	8014ee6 <__sfputc_r+0x1e>
 8014ed4:	6994      	ldr	r4, [r2, #24]
 8014ed6:	42a3      	cmp	r3, r4
 8014ed8:	db01      	blt.n	8014ede <__sfputc_r+0x16>
 8014eda:	290a      	cmp	r1, #10
 8014edc:	d103      	bne.n	8014ee6 <__sfputc_r+0x1e>
 8014ede:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014ee2:	f000 ba4d 	b.w	8015380 <__swbuf_r>
 8014ee6:	6813      	ldr	r3, [r2, #0]
 8014ee8:	1c58      	adds	r0, r3, #1
 8014eea:	6010      	str	r0, [r2, #0]
 8014eec:	7019      	strb	r1, [r3, #0]
 8014eee:	4608      	mov	r0, r1
 8014ef0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014ef4:	4770      	bx	lr

08014ef6 <__sfputs_r>:
 8014ef6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ef8:	4606      	mov	r6, r0
 8014efa:	460f      	mov	r7, r1
 8014efc:	4614      	mov	r4, r2
 8014efe:	18d5      	adds	r5, r2, r3
 8014f00:	42ac      	cmp	r4, r5
 8014f02:	d101      	bne.n	8014f08 <__sfputs_r+0x12>
 8014f04:	2000      	movs	r0, #0
 8014f06:	e007      	b.n	8014f18 <__sfputs_r+0x22>
 8014f08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014f0c:	463a      	mov	r2, r7
 8014f0e:	4630      	mov	r0, r6
 8014f10:	f7ff ffda 	bl	8014ec8 <__sfputc_r>
 8014f14:	1c43      	adds	r3, r0, #1
 8014f16:	d1f3      	bne.n	8014f00 <__sfputs_r+0xa>
 8014f18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014f1c <_vfiprintf_r>:
 8014f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f20:	460d      	mov	r5, r1
 8014f22:	b09d      	sub	sp, #116	; 0x74
 8014f24:	4614      	mov	r4, r2
 8014f26:	4698      	mov	r8, r3
 8014f28:	4606      	mov	r6, r0
 8014f2a:	b118      	cbz	r0, 8014f34 <_vfiprintf_r+0x18>
 8014f2c:	6983      	ldr	r3, [r0, #24]
 8014f2e:	b90b      	cbnz	r3, 8014f34 <_vfiprintf_r+0x18>
 8014f30:	f000 fc44 	bl	80157bc <__sinit>
 8014f34:	4b89      	ldr	r3, [pc, #548]	; (801515c <_vfiprintf_r+0x240>)
 8014f36:	429d      	cmp	r5, r3
 8014f38:	d11b      	bne.n	8014f72 <_vfiprintf_r+0x56>
 8014f3a:	6875      	ldr	r5, [r6, #4]
 8014f3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014f3e:	07d9      	lsls	r1, r3, #31
 8014f40:	d405      	bmi.n	8014f4e <_vfiprintf_r+0x32>
 8014f42:	89ab      	ldrh	r3, [r5, #12]
 8014f44:	059a      	lsls	r2, r3, #22
 8014f46:	d402      	bmi.n	8014f4e <_vfiprintf_r+0x32>
 8014f48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014f4a:	f7ff f95b 	bl	8014204 <__retarget_lock_acquire_recursive>
 8014f4e:	89ab      	ldrh	r3, [r5, #12]
 8014f50:	071b      	lsls	r3, r3, #28
 8014f52:	d501      	bpl.n	8014f58 <_vfiprintf_r+0x3c>
 8014f54:	692b      	ldr	r3, [r5, #16]
 8014f56:	b9eb      	cbnz	r3, 8014f94 <_vfiprintf_r+0x78>
 8014f58:	4629      	mov	r1, r5
 8014f5a:	4630      	mov	r0, r6
 8014f5c:	f000 fa82 	bl	8015464 <__swsetup_r>
 8014f60:	b1c0      	cbz	r0, 8014f94 <_vfiprintf_r+0x78>
 8014f62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014f64:	07dc      	lsls	r4, r3, #31
 8014f66:	d50e      	bpl.n	8014f86 <_vfiprintf_r+0x6a>
 8014f68:	f04f 30ff 	mov.w	r0, #4294967295
 8014f6c:	b01d      	add	sp, #116	; 0x74
 8014f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f72:	4b7b      	ldr	r3, [pc, #492]	; (8015160 <_vfiprintf_r+0x244>)
 8014f74:	429d      	cmp	r5, r3
 8014f76:	d101      	bne.n	8014f7c <_vfiprintf_r+0x60>
 8014f78:	68b5      	ldr	r5, [r6, #8]
 8014f7a:	e7df      	b.n	8014f3c <_vfiprintf_r+0x20>
 8014f7c:	4b79      	ldr	r3, [pc, #484]	; (8015164 <_vfiprintf_r+0x248>)
 8014f7e:	429d      	cmp	r5, r3
 8014f80:	bf08      	it	eq
 8014f82:	68f5      	ldreq	r5, [r6, #12]
 8014f84:	e7da      	b.n	8014f3c <_vfiprintf_r+0x20>
 8014f86:	89ab      	ldrh	r3, [r5, #12]
 8014f88:	0598      	lsls	r0, r3, #22
 8014f8a:	d4ed      	bmi.n	8014f68 <_vfiprintf_r+0x4c>
 8014f8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014f8e:	f7ff f93b 	bl	8014208 <__retarget_lock_release_recursive>
 8014f92:	e7e9      	b.n	8014f68 <_vfiprintf_r+0x4c>
 8014f94:	2300      	movs	r3, #0
 8014f96:	9309      	str	r3, [sp, #36]	; 0x24
 8014f98:	2320      	movs	r3, #32
 8014f9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014f9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8014fa2:	2330      	movs	r3, #48	; 0x30
 8014fa4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8015168 <_vfiprintf_r+0x24c>
 8014fa8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014fac:	f04f 0901 	mov.w	r9, #1
 8014fb0:	4623      	mov	r3, r4
 8014fb2:	469a      	mov	sl, r3
 8014fb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014fb8:	b10a      	cbz	r2, 8014fbe <_vfiprintf_r+0xa2>
 8014fba:	2a25      	cmp	r2, #37	; 0x25
 8014fbc:	d1f9      	bne.n	8014fb2 <_vfiprintf_r+0x96>
 8014fbe:	ebba 0b04 	subs.w	fp, sl, r4
 8014fc2:	d00b      	beq.n	8014fdc <_vfiprintf_r+0xc0>
 8014fc4:	465b      	mov	r3, fp
 8014fc6:	4622      	mov	r2, r4
 8014fc8:	4629      	mov	r1, r5
 8014fca:	4630      	mov	r0, r6
 8014fcc:	f7ff ff93 	bl	8014ef6 <__sfputs_r>
 8014fd0:	3001      	adds	r0, #1
 8014fd2:	f000 80aa 	beq.w	801512a <_vfiprintf_r+0x20e>
 8014fd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014fd8:	445a      	add	r2, fp
 8014fda:	9209      	str	r2, [sp, #36]	; 0x24
 8014fdc:	f89a 3000 	ldrb.w	r3, [sl]
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	f000 80a2 	beq.w	801512a <_vfiprintf_r+0x20e>
 8014fe6:	2300      	movs	r3, #0
 8014fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8014fec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014ff0:	f10a 0a01 	add.w	sl, sl, #1
 8014ff4:	9304      	str	r3, [sp, #16]
 8014ff6:	9307      	str	r3, [sp, #28]
 8014ff8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014ffc:	931a      	str	r3, [sp, #104]	; 0x68
 8014ffe:	4654      	mov	r4, sl
 8015000:	2205      	movs	r2, #5
 8015002:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015006:	4858      	ldr	r0, [pc, #352]	; (8015168 <_vfiprintf_r+0x24c>)
 8015008:	f7eb f902 	bl	8000210 <memchr>
 801500c:	9a04      	ldr	r2, [sp, #16]
 801500e:	b9d8      	cbnz	r0, 8015048 <_vfiprintf_r+0x12c>
 8015010:	06d1      	lsls	r1, r2, #27
 8015012:	bf44      	itt	mi
 8015014:	2320      	movmi	r3, #32
 8015016:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801501a:	0713      	lsls	r3, r2, #28
 801501c:	bf44      	itt	mi
 801501e:	232b      	movmi	r3, #43	; 0x2b
 8015020:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015024:	f89a 3000 	ldrb.w	r3, [sl]
 8015028:	2b2a      	cmp	r3, #42	; 0x2a
 801502a:	d015      	beq.n	8015058 <_vfiprintf_r+0x13c>
 801502c:	9a07      	ldr	r2, [sp, #28]
 801502e:	4654      	mov	r4, sl
 8015030:	2000      	movs	r0, #0
 8015032:	f04f 0c0a 	mov.w	ip, #10
 8015036:	4621      	mov	r1, r4
 8015038:	f811 3b01 	ldrb.w	r3, [r1], #1
 801503c:	3b30      	subs	r3, #48	; 0x30
 801503e:	2b09      	cmp	r3, #9
 8015040:	d94e      	bls.n	80150e0 <_vfiprintf_r+0x1c4>
 8015042:	b1b0      	cbz	r0, 8015072 <_vfiprintf_r+0x156>
 8015044:	9207      	str	r2, [sp, #28]
 8015046:	e014      	b.n	8015072 <_vfiprintf_r+0x156>
 8015048:	eba0 0308 	sub.w	r3, r0, r8
 801504c:	fa09 f303 	lsl.w	r3, r9, r3
 8015050:	4313      	orrs	r3, r2
 8015052:	9304      	str	r3, [sp, #16]
 8015054:	46a2      	mov	sl, r4
 8015056:	e7d2      	b.n	8014ffe <_vfiprintf_r+0xe2>
 8015058:	9b03      	ldr	r3, [sp, #12]
 801505a:	1d19      	adds	r1, r3, #4
 801505c:	681b      	ldr	r3, [r3, #0]
 801505e:	9103      	str	r1, [sp, #12]
 8015060:	2b00      	cmp	r3, #0
 8015062:	bfbb      	ittet	lt
 8015064:	425b      	neglt	r3, r3
 8015066:	f042 0202 	orrlt.w	r2, r2, #2
 801506a:	9307      	strge	r3, [sp, #28]
 801506c:	9307      	strlt	r3, [sp, #28]
 801506e:	bfb8      	it	lt
 8015070:	9204      	strlt	r2, [sp, #16]
 8015072:	7823      	ldrb	r3, [r4, #0]
 8015074:	2b2e      	cmp	r3, #46	; 0x2e
 8015076:	d10c      	bne.n	8015092 <_vfiprintf_r+0x176>
 8015078:	7863      	ldrb	r3, [r4, #1]
 801507a:	2b2a      	cmp	r3, #42	; 0x2a
 801507c:	d135      	bne.n	80150ea <_vfiprintf_r+0x1ce>
 801507e:	9b03      	ldr	r3, [sp, #12]
 8015080:	1d1a      	adds	r2, r3, #4
 8015082:	681b      	ldr	r3, [r3, #0]
 8015084:	9203      	str	r2, [sp, #12]
 8015086:	2b00      	cmp	r3, #0
 8015088:	bfb8      	it	lt
 801508a:	f04f 33ff 	movlt.w	r3, #4294967295
 801508e:	3402      	adds	r4, #2
 8015090:	9305      	str	r3, [sp, #20]
 8015092:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015178 <_vfiprintf_r+0x25c>
 8015096:	7821      	ldrb	r1, [r4, #0]
 8015098:	2203      	movs	r2, #3
 801509a:	4650      	mov	r0, sl
 801509c:	f7eb f8b8 	bl	8000210 <memchr>
 80150a0:	b140      	cbz	r0, 80150b4 <_vfiprintf_r+0x198>
 80150a2:	2340      	movs	r3, #64	; 0x40
 80150a4:	eba0 000a 	sub.w	r0, r0, sl
 80150a8:	fa03 f000 	lsl.w	r0, r3, r0
 80150ac:	9b04      	ldr	r3, [sp, #16]
 80150ae:	4303      	orrs	r3, r0
 80150b0:	3401      	adds	r4, #1
 80150b2:	9304      	str	r3, [sp, #16]
 80150b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80150b8:	482c      	ldr	r0, [pc, #176]	; (801516c <_vfiprintf_r+0x250>)
 80150ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80150be:	2206      	movs	r2, #6
 80150c0:	f7eb f8a6 	bl	8000210 <memchr>
 80150c4:	2800      	cmp	r0, #0
 80150c6:	d03f      	beq.n	8015148 <_vfiprintf_r+0x22c>
 80150c8:	4b29      	ldr	r3, [pc, #164]	; (8015170 <_vfiprintf_r+0x254>)
 80150ca:	bb1b      	cbnz	r3, 8015114 <_vfiprintf_r+0x1f8>
 80150cc:	9b03      	ldr	r3, [sp, #12]
 80150ce:	3307      	adds	r3, #7
 80150d0:	f023 0307 	bic.w	r3, r3, #7
 80150d4:	3308      	adds	r3, #8
 80150d6:	9303      	str	r3, [sp, #12]
 80150d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80150da:	443b      	add	r3, r7
 80150dc:	9309      	str	r3, [sp, #36]	; 0x24
 80150de:	e767      	b.n	8014fb0 <_vfiprintf_r+0x94>
 80150e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80150e4:	460c      	mov	r4, r1
 80150e6:	2001      	movs	r0, #1
 80150e8:	e7a5      	b.n	8015036 <_vfiprintf_r+0x11a>
 80150ea:	2300      	movs	r3, #0
 80150ec:	3401      	adds	r4, #1
 80150ee:	9305      	str	r3, [sp, #20]
 80150f0:	4619      	mov	r1, r3
 80150f2:	f04f 0c0a 	mov.w	ip, #10
 80150f6:	4620      	mov	r0, r4
 80150f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80150fc:	3a30      	subs	r2, #48	; 0x30
 80150fe:	2a09      	cmp	r2, #9
 8015100:	d903      	bls.n	801510a <_vfiprintf_r+0x1ee>
 8015102:	2b00      	cmp	r3, #0
 8015104:	d0c5      	beq.n	8015092 <_vfiprintf_r+0x176>
 8015106:	9105      	str	r1, [sp, #20]
 8015108:	e7c3      	b.n	8015092 <_vfiprintf_r+0x176>
 801510a:	fb0c 2101 	mla	r1, ip, r1, r2
 801510e:	4604      	mov	r4, r0
 8015110:	2301      	movs	r3, #1
 8015112:	e7f0      	b.n	80150f6 <_vfiprintf_r+0x1da>
 8015114:	ab03      	add	r3, sp, #12
 8015116:	9300      	str	r3, [sp, #0]
 8015118:	462a      	mov	r2, r5
 801511a:	4b16      	ldr	r3, [pc, #88]	; (8015174 <_vfiprintf_r+0x258>)
 801511c:	a904      	add	r1, sp, #16
 801511e:	4630      	mov	r0, r6
 8015120:	f7fc f97a 	bl	8011418 <_printf_float>
 8015124:	4607      	mov	r7, r0
 8015126:	1c78      	adds	r0, r7, #1
 8015128:	d1d6      	bne.n	80150d8 <_vfiprintf_r+0x1bc>
 801512a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801512c:	07d9      	lsls	r1, r3, #31
 801512e:	d405      	bmi.n	801513c <_vfiprintf_r+0x220>
 8015130:	89ab      	ldrh	r3, [r5, #12]
 8015132:	059a      	lsls	r2, r3, #22
 8015134:	d402      	bmi.n	801513c <_vfiprintf_r+0x220>
 8015136:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015138:	f7ff f866 	bl	8014208 <__retarget_lock_release_recursive>
 801513c:	89ab      	ldrh	r3, [r5, #12]
 801513e:	065b      	lsls	r3, r3, #25
 8015140:	f53f af12 	bmi.w	8014f68 <_vfiprintf_r+0x4c>
 8015144:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015146:	e711      	b.n	8014f6c <_vfiprintf_r+0x50>
 8015148:	ab03      	add	r3, sp, #12
 801514a:	9300      	str	r3, [sp, #0]
 801514c:	462a      	mov	r2, r5
 801514e:	4b09      	ldr	r3, [pc, #36]	; (8015174 <_vfiprintf_r+0x258>)
 8015150:	a904      	add	r1, sp, #16
 8015152:	4630      	mov	r0, r6
 8015154:	f7fc fc04 	bl	8011960 <_printf_i>
 8015158:	e7e4      	b.n	8015124 <_vfiprintf_r+0x208>
 801515a:	bf00      	nop
 801515c:	080194c0 	.word	0x080194c0
 8015160:	080194e0 	.word	0x080194e0
 8015164:	080194a0 	.word	0x080194a0
 8015168:	0801938c 	.word	0x0801938c
 801516c:	08019396 	.word	0x08019396
 8015170:	08011419 	.word	0x08011419
 8015174:	08014ef7 	.word	0x08014ef7
 8015178:	08019392 	.word	0x08019392
 801517c:	00000000 	.word	0x00000000

08015180 <nan>:
 8015180:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8015188 <nan+0x8>
 8015184:	4770      	bx	lr
 8015186:	bf00      	nop
 8015188:	00000000 	.word	0x00000000
 801518c:	7ff80000 	.word	0x7ff80000

08015190 <siscanf>:
 8015190:	b40e      	push	{r1, r2, r3}
 8015192:	b510      	push	{r4, lr}
 8015194:	b09f      	sub	sp, #124	; 0x7c
 8015196:	ac21      	add	r4, sp, #132	; 0x84
 8015198:	f44f 7101 	mov.w	r1, #516	; 0x204
 801519c:	f854 2b04 	ldr.w	r2, [r4], #4
 80151a0:	9201      	str	r2, [sp, #4]
 80151a2:	f8ad 101c 	strh.w	r1, [sp, #28]
 80151a6:	9004      	str	r0, [sp, #16]
 80151a8:	9008      	str	r0, [sp, #32]
 80151aa:	f7eb f823 	bl	80001f4 <strlen>
 80151ae:	4b0c      	ldr	r3, [pc, #48]	; (80151e0 <siscanf+0x50>)
 80151b0:	9005      	str	r0, [sp, #20]
 80151b2:	9009      	str	r0, [sp, #36]	; 0x24
 80151b4:	930d      	str	r3, [sp, #52]	; 0x34
 80151b6:	480b      	ldr	r0, [pc, #44]	; (80151e4 <siscanf+0x54>)
 80151b8:	9a01      	ldr	r2, [sp, #4]
 80151ba:	6800      	ldr	r0, [r0, #0]
 80151bc:	9403      	str	r4, [sp, #12]
 80151be:	2300      	movs	r3, #0
 80151c0:	9311      	str	r3, [sp, #68]	; 0x44
 80151c2:	9316      	str	r3, [sp, #88]	; 0x58
 80151c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80151c8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80151cc:	a904      	add	r1, sp, #16
 80151ce:	4623      	mov	r3, r4
 80151d0:	f000 fcae 	bl	8015b30 <__ssvfiscanf_r>
 80151d4:	b01f      	add	sp, #124	; 0x7c
 80151d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80151da:	b003      	add	sp, #12
 80151dc:	4770      	bx	lr
 80151de:	bf00      	nop
 80151e0:	0801520b 	.word	0x0801520b
 80151e4:	20000020 	.word	0x20000020

080151e8 <__sread>:
 80151e8:	b510      	push	{r4, lr}
 80151ea:	460c      	mov	r4, r1
 80151ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80151f0:	f000 ff68 	bl	80160c4 <_read_r>
 80151f4:	2800      	cmp	r0, #0
 80151f6:	bfab      	itete	ge
 80151f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80151fa:	89a3      	ldrhlt	r3, [r4, #12]
 80151fc:	181b      	addge	r3, r3, r0
 80151fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015202:	bfac      	ite	ge
 8015204:	6563      	strge	r3, [r4, #84]	; 0x54
 8015206:	81a3      	strhlt	r3, [r4, #12]
 8015208:	bd10      	pop	{r4, pc}

0801520a <__seofread>:
 801520a:	2000      	movs	r0, #0
 801520c:	4770      	bx	lr

0801520e <__swrite>:
 801520e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015212:	461f      	mov	r7, r3
 8015214:	898b      	ldrh	r3, [r1, #12]
 8015216:	05db      	lsls	r3, r3, #23
 8015218:	4605      	mov	r5, r0
 801521a:	460c      	mov	r4, r1
 801521c:	4616      	mov	r6, r2
 801521e:	d505      	bpl.n	801522c <__swrite+0x1e>
 8015220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015224:	2302      	movs	r3, #2
 8015226:	2200      	movs	r2, #0
 8015228:	f000 fb66 	bl	80158f8 <_lseek_r>
 801522c:	89a3      	ldrh	r3, [r4, #12]
 801522e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015232:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015236:	81a3      	strh	r3, [r4, #12]
 8015238:	4632      	mov	r2, r6
 801523a:	463b      	mov	r3, r7
 801523c:	4628      	mov	r0, r5
 801523e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015242:	f000 b8fd 	b.w	8015440 <_write_r>

08015246 <__sseek>:
 8015246:	b510      	push	{r4, lr}
 8015248:	460c      	mov	r4, r1
 801524a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801524e:	f000 fb53 	bl	80158f8 <_lseek_r>
 8015252:	1c43      	adds	r3, r0, #1
 8015254:	89a3      	ldrh	r3, [r4, #12]
 8015256:	bf15      	itete	ne
 8015258:	6560      	strne	r0, [r4, #84]	; 0x54
 801525a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801525e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015262:	81a3      	strheq	r3, [r4, #12]
 8015264:	bf18      	it	ne
 8015266:	81a3      	strhne	r3, [r4, #12]
 8015268:	bd10      	pop	{r4, pc}

0801526a <__sclose>:
 801526a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801526e:	f000 b96f 	b.w	8015550 <_close_r>

08015272 <strcpy>:
 8015272:	4603      	mov	r3, r0
 8015274:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015278:	f803 2b01 	strb.w	r2, [r3], #1
 801527c:	2a00      	cmp	r2, #0
 801527e:	d1f9      	bne.n	8015274 <strcpy+0x2>
 8015280:	4770      	bx	lr
	...

08015284 <_strtoul_l.constprop.0>:
 8015284:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015288:	4f36      	ldr	r7, [pc, #216]	; (8015364 <_strtoul_l.constprop.0+0xe0>)
 801528a:	4686      	mov	lr, r0
 801528c:	460d      	mov	r5, r1
 801528e:	4628      	mov	r0, r5
 8015290:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015294:	5de6      	ldrb	r6, [r4, r7]
 8015296:	f016 0608 	ands.w	r6, r6, #8
 801529a:	d1f8      	bne.n	801528e <_strtoul_l.constprop.0+0xa>
 801529c:	2c2d      	cmp	r4, #45	; 0x2d
 801529e:	d12f      	bne.n	8015300 <_strtoul_l.constprop.0+0x7c>
 80152a0:	782c      	ldrb	r4, [r5, #0]
 80152a2:	2601      	movs	r6, #1
 80152a4:	1c85      	adds	r5, r0, #2
 80152a6:	2b00      	cmp	r3, #0
 80152a8:	d057      	beq.n	801535a <_strtoul_l.constprop.0+0xd6>
 80152aa:	2b10      	cmp	r3, #16
 80152ac:	d109      	bne.n	80152c2 <_strtoul_l.constprop.0+0x3e>
 80152ae:	2c30      	cmp	r4, #48	; 0x30
 80152b0:	d107      	bne.n	80152c2 <_strtoul_l.constprop.0+0x3e>
 80152b2:	7828      	ldrb	r0, [r5, #0]
 80152b4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80152b8:	2858      	cmp	r0, #88	; 0x58
 80152ba:	d149      	bne.n	8015350 <_strtoul_l.constprop.0+0xcc>
 80152bc:	786c      	ldrb	r4, [r5, #1]
 80152be:	2310      	movs	r3, #16
 80152c0:	3502      	adds	r5, #2
 80152c2:	f04f 38ff 	mov.w	r8, #4294967295
 80152c6:	2700      	movs	r7, #0
 80152c8:	fbb8 f8f3 	udiv	r8, r8, r3
 80152cc:	fb03 f908 	mul.w	r9, r3, r8
 80152d0:	ea6f 0909 	mvn.w	r9, r9
 80152d4:	4638      	mov	r0, r7
 80152d6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80152da:	f1bc 0f09 	cmp.w	ip, #9
 80152de:	d814      	bhi.n	801530a <_strtoul_l.constprop.0+0x86>
 80152e0:	4664      	mov	r4, ip
 80152e2:	42a3      	cmp	r3, r4
 80152e4:	dd22      	ble.n	801532c <_strtoul_l.constprop.0+0xa8>
 80152e6:	2f00      	cmp	r7, #0
 80152e8:	db1d      	blt.n	8015326 <_strtoul_l.constprop.0+0xa2>
 80152ea:	4580      	cmp	r8, r0
 80152ec:	d31b      	bcc.n	8015326 <_strtoul_l.constprop.0+0xa2>
 80152ee:	d101      	bne.n	80152f4 <_strtoul_l.constprop.0+0x70>
 80152f0:	45a1      	cmp	r9, r4
 80152f2:	db18      	blt.n	8015326 <_strtoul_l.constprop.0+0xa2>
 80152f4:	fb00 4003 	mla	r0, r0, r3, r4
 80152f8:	2701      	movs	r7, #1
 80152fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80152fe:	e7ea      	b.n	80152d6 <_strtoul_l.constprop.0+0x52>
 8015300:	2c2b      	cmp	r4, #43	; 0x2b
 8015302:	bf04      	itt	eq
 8015304:	782c      	ldrbeq	r4, [r5, #0]
 8015306:	1c85      	addeq	r5, r0, #2
 8015308:	e7cd      	b.n	80152a6 <_strtoul_l.constprop.0+0x22>
 801530a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801530e:	f1bc 0f19 	cmp.w	ip, #25
 8015312:	d801      	bhi.n	8015318 <_strtoul_l.constprop.0+0x94>
 8015314:	3c37      	subs	r4, #55	; 0x37
 8015316:	e7e4      	b.n	80152e2 <_strtoul_l.constprop.0+0x5e>
 8015318:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801531c:	f1bc 0f19 	cmp.w	ip, #25
 8015320:	d804      	bhi.n	801532c <_strtoul_l.constprop.0+0xa8>
 8015322:	3c57      	subs	r4, #87	; 0x57
 8015324:	e7dd      	b.n	80152e2 <_strtoul_l.constprop.0+0x5e>
 8015326:	f04f 37ff 	mov.w	r7, #4294967295
 801532a:	e7e6      	b.n	80152fa <_strtoul_l.constprop.0+0x76>
 801532c:	2f00      	cmp	r7, #0
 801532e:	da07      	bge.n	8015340 <_strtoul_l.constprop.0+0xbc>
 8015330:	2322      	movs	r3, #34	; 0x22
 8015332:	f8ce 3000 	str.w	r3, [lr]
 8015336:	f04f 30ff 	mov.w	r0, #4294967295
 801533a:	b932      	cbnz	r2, 801534a <_strtoul_l.constprop.0+0xc6>
 801533c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015340:	b106      	cbz	r6, 8015344 <_strtoul_l.constprop.0+0xc0>
 8015342:	4240      	negs	r0, r0
 8015344:	2a00      	cmp	r2, #0
 8015346:	d0f9      	beq.n	801533c <_strtoul_l.constprop.0+0xb8>
 8015348:	b107      	cbz	r7, 801534c <_strtoul_l.constprop.0+0xc8>
 801534a:	1e69      	subs	r1, r5, #1
 801534c:	6011      	str	r1, [r2, #0]
 801534e:	e7f5      	b.n	801533c <_strtoul_l.constprop.0+0xb8>
 8015350:	2430      	movs	r4, #48	; 0x30
 8015352:	2b00      	cmp	r3, #0
 8015354:	d1b5      	bne.n	80152c2 <_strtoul_l.constprop.0+0x3e>
 8015356:	2308      	movs	r3, #8
 8015358:	e7b3      	b.n	80152c2 <_strtoul_l.constprop.0+0x3e>
 801535a:	2c30      	cmp	r4, #48	; 0x30
 801535c:	d0a9      	beq.n	80152b2 <_strtoul_l.constprop.0+0x2e>
 801535e:	230a      	movs	r3, #10
 8015360:	e7af      	b.n	80152c2 <_strtoul_l.constprop.0+0x3e>
 8015362:	bf00      	nop
 8015364:	0801939e 	.word	0x0801939e

08015368 <_strtoul_r>:
 8015368:	f7ff bf8c 	b.w	8015284 <_strtoul_l.constprop.0>

0801536c <strtoul>:
 801536c:	4613      	mov	r3, r2
 801536e:	460a      	mov	r2, r1
 8015370:	4601      	mov	r1, r0
 8015372:	4802      	ldr	r0, [pc, #8]	; (801537c <strtoul+0x10>)
 8015374:	6800      	ldr	r0, [r0, #0]
 8015376:	f7ff bf85 	b.w	8015284 <_strtoul_l.constprop.0>
 801537a:	bf00      	nop
 801537c:	20000020 	.word	0x20000020

08015380 <__swbuf_r>:
 8015380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015382:	460e      	mov	r6, r1
 8015384:	4614      	mov	r4, r2
 8015386:	4605      	mov	r5, r0
 8015388:	b118      	cbz	r0, 8015392 <__swbuf_r+0x12>
 801538a:	6983      	ldr	r3, [r0, #24]
 801538c:	b90b      	cbnz	r3, 8015392 <__swbuf_r+0x12>
 801538e:	f000 fa15 	bl	80157bc <__sinit>
 8015392:	4b21      	ldr	r3, [pc, #132]	; (8015418 <__swbuf_r+0x98>)
 8015394:	429c      	cmp	r4, r3
 8015396:	d12b      	bne.n	80153f0 <__swbuf_r+0x70>
 8015398:	686c      	ldr	r4, [r5, #4]
 801539a:	69a3      	ldr	r3, [r4, #24]
 801539c:	60a3      	str	r3, [r4, #8]
 801539e:	89a3      	ldrh	r3, [r4, #12]
 80153a0:	071a      	lsls	r2, r3, #28
 80153a2:	d52f      	bpl.n	8015404 <__swbuf_r+0x84>
 80153a4:	6923      	ldr	r3, [r4, #16]
 80153a6:	b36b      	cbz	r3, 8015404 <__swbuf_r+0x84>
 80153a8:	6923      	ldr	r3, [r4, #16]
 80153aa:	6820      	ldr	r0, [r4, #0]
 80153ac:	1ac0      	subs	r0, r0, r3
 80153ae:	6963      	ldr	r3, [r4, #20]
 80153b0:	b2f6      	uxtb	r6, r6
 80153b2:	4283      	cmp	r3, r0
 80153b4:	4637      	mov	r7, r6
 80153b6:	dc04      	bgt.n	80153c2 <__swbuf_r+0x42>
 80153b8:	4621      	mov	r1, r4
 80153ba:	4628      	mov	r0, r5
 80153bc:	f000 f96a 	bl	8015694 <_fflush_r>
 80153c0:	bb30      	cbnz	r0, 8015410 <__swbuf_r+0x90>
 80153c2:	68a3      	ldr	r3, [r4, #8]
 80153c4:	3b01      	subs	r3, #1
 80153c6:	60a3      	str	r3, [r4, #8]
 80153c8:	6823      	ldr	r3, [r4, #0]
 80153ca:	1c5a      	adds	r2, r3, #1
 80153cc:	6022      	str	r2, [r4, #0]
 80153ce:	701e      	strb	r6, [r3, #0]
 80153d0:	6963      	ldr	r3, [r4, #20]
 80153d2:	3001      	adds	r0, #1
 80153d4:	4283      	cmp	r3, r0
 80153d6:	d004      	beq.n	80153e2 <__swbuf_r+0x62>
 80153d8:	89a3      	ldrh	r3, [r4, #12]
 80153da:	07db      	lsls	r3, r3, #31
 80153dc:	d506      	bpl.n	80153ec <__swbuf_r+0x6c>
 80153de:	2e0a      	cmp	r6, #10
 80153e0:	d104      	bne.n	80153ec <__swbuf_r+0x6c>
 80153e2:	4621      	mov	r1, r4
 80153e4:	4628      	mov	r0, r5
 80153e6:	f000 f955 	bl	8015694 <_fflush_r>
 80153ea:	b988      	cbnz	r0, 8015410 <__swbuf_r+0x90>
 80153ec:	4638      	mov	r0, r7
 80153ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80153f0:	4b0a      	ldr	r3, [pc, #40]	; (801541c <__swbuf_r+0x9c>)
 80153f2:	429c      	cmp	r4, r3
 80153f4:	d101      	bne.n	80153fa <__swbuf_r+0x7a>
 80153f6:	68ac      	ldr	r4, [r5, #8]
 80153f8:	e7cf      	b.n	801539a <__swbuf_r+0x1a>
 80153fa:	4b09      	ldr	r3, [pc, #36]	; (8015420 <__swbuf_r+0xa0>)
 80153fc:	429c      	cmp	r4, r3
 80153fe:	bf08      	it	eq
 8015400:	68ec      	ldreq	r4, [r5, #12]
 8015402:	e7ca      	b.n	801539a <__swbuf_r+0x1a>
 8015404:	4621      	mov	r1, r4
 8015406:	4628      	mov	r0, r5
 8015408:	f000 f82c 	bl	8015464 <__swsetup_r>
 801540c:	2800      	cmp	r0, #0
 801540e:	d0cb      	beq.n	80153a8 <__swbuf_r+0x28>
 8015410:	f04f 37ff 	mov.w	r7, #4294967295
 8015414:	e7ea      	b.n	80153ec <__swbuf_r+0x6c>
 8015416:	bf00      	nop
 8015418:	080194c0 	.word	0x080194c0
 801541c:	080194e0 	.word	0x080194e0
 8015420:	080194a0 	.word	0x080194a0

08015424 <__ascii_wctomb>:
 8015424:	b149      	cbz	r1, 801543a <__ascii_wctomb+0x16>
 8015426:	2aff      	cmp	r2, #255	; 0xff
 8015428:	bf85      	ittet	hi
 801542a:	238a      	movhi	r3, #138	; 0x8a
 801542c:	6003      	strhi	r3, [r0, #0]
 801542e:	700a      	strbls	r2, [r1, #0]
 8015430:	f04f 30ff 	movhi.w	r0, #4294967295
 8015434:	bf98      	it	ls
 8015436:	2001      	movls	r0, #1
 8015438:	4770      	bx	lr
 801543a:	4608      	mov	r0, r1
 801543c:	4770      	bx	lr
	...

08015440 <_write_r>:
 8015440:	b538      	push	{r3, r4, r5, lr}
 8015442:	4d07      	ldr	r5, [pc, #28]	; (8015460 <_write_r+0x20>)
 8015444:	4604      	mov	r4, r0
 8015446:	4608      	mov	r0, r1
 8015448:	4611      	mov	r1, r2
 801544a:	2200      	movs	r2, #0
 801544c:	602a      	str	r2, [r5, #0]
 801544e:	461a      	mov	r2, r3
 8015450:	f7f0 fdd5 	bl	8005ffe <_write>
 8015454:	1c43      	adds	r3, r0, #1
 8015456:	d102      	bne.n	801545e <_write_r+0x1e>
 8015458:	682b      	ldr	r3, [r5, #0]
 801545a:	b103      	cbz	r3, 801545e <_write_r+0x1e>
 801545c:	6023      	str	r3, [r4, #0]
 801545e:	bd38      	pop	{r3, r4, r5, pc}
 8015460:	20007b30 	.word	0x20007b30

08015464 <__swsetup_r>:
 8015464:	4b32      	ldr	r3, [pc, #200]	; (8015530 <__swsetup_r+0xcc>)
 8015466:	b570      	push	{r4, r5, r6, lr}
 8015468:	681d      	ldr	r5, [r3, #0]
 801546a:	4606      	mov	r6, r0
 801546c:	460c      	mov	r4, r1
 801546e:	b125      	cbz	r5, 801547a <__swsetup_r+0x16>
 8015470:	69ab      	ldr	r3, [r5, #24]
 8015472:	b913      	cbnz	r3, 801547a <__swsetup_r+0x16>
 8015474:	4628      	mov	r0, r5
 8015476:	f000 f9a1 	bl	80157bc <__sinit>
 801547a:	4b2e      	ldr	r3, [pc, #184]	; (8015534 <__swsetup_r+0xd0>)
 801547c:	429c      	cmp	r4, r3
 801547e:	d10f      	bne.n	80154a0 <__swsetup_r+0x3c>
 8015480:	686c      	ldr	r4, [r5, #4]
 8015482:	89a3      	ldrh	r3, [r4, #12]
 8015484:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015488:	0719      	lsls	r1, r3, #28
 801548a:	d42c      	bmi.n	80154e6 <__swsetup_r+0x82>
 801548c:	06dd      	lsls	r5, r3, #27
 801548e:	d411      	bmi.n	80154b4 <__swsetup_r+0x50>
 8015490:	2309      	movs	r3, #9
 8015492:	6033      	str	r3, [r6, #0]
 8015494:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015498:	81a3      	strh	r3, [r4, #12]
 801549a:	f04f 30ff 	mov.w	r0, #4294967295
 801549e:	e03e      	b.n	801551e <__swsetup_r+0xba>
 80154a0:	4b25      	ldr	r3, [pc, #148]	; (8015538 <__swsetup_r+0xd4>)
 80154a2:	429c      	cmp	r4, r3
 80154a4:	d101      	bne.n	80154aa <__swsetup_r+0x46>
 80154a6:	68ac      	ldr	r4, [r5, #8]
 80154a8:	e7eb      	b.n	8015482 <__swsetup_r+0x1e>
 80154aa:	4b24      	ldr	r3, [pc, #144]	; (801553c <__swsetup_r+0xd8>)
 80154ac:	429c      	cmp	r4, r3
 80154ae:	bf08      	it	eq
 80154b0:	68ec      	ldreq	r4, [r5, #12]
 80154b2:	e7e6      	b.n	8015482 <__swsetup_r+0x1e>
 80154b4:	0758      	lsls	r0, r3, #29
 80154b6:	d512      	bpl.n	80154de <__swsetup_r+0x7a>
 80154b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80154ba:	b141      	cbz	r1, 80154ce <__swsetup_r+0x6a>
 80154bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80154c0:	4299      	cmp	r1, r3
 80154c2:	d002      	beq.n	80154ca <__swsetup_r+0x66>
 80154c4:	4630      	mov	r0, r6
 80154c6:	f7fb fe27 	bl	8011118 <_free_r>
 80154ca:	2300      	movs	r3, #0
 80154cc:	6363      	str	r3, [r4, #52]	; 0x34
 80154ce:	89a3      	ldrh	r3, [r4, #12]
 80154d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80154d4:	81a3      	strh	r3, [r4, #12]
 80154d6:	2300      	movs	r3, #0
 80154d8:	6063      	str	r3, [r4, #4]
 80154da:	6923      	ldr	r3, [r4, #16]
 80154dc:	6023      	str	r3, [r4, #0]
 80154de:	89a3      	ldrh	r3, [r4, #12]
 80154e0:	f043 0308 	orr.w	r3, r3, #8
 80154e4:	81a3      	strh	r3, [r4, #12]
 80154e6:	6923      	ldr	r3, [r4, #16]
 80154e8:	b94b      	cbnz	r3, 80154fe <__swsetup_r+0x9a>
 80154ea:	89a3      	ldrh	r3, [r4, #12]
 80154ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80154f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80154f4:	d003      	beq.n	80154fe <__swsetup_r+0x9a>
 80154f6:	4621      	mov	r1, r4
 80154f8:	4630      	mov	r0, r6
 80154fa:	f000 fa35 	bl	8015968 <__smakebuf_r>
 80154fe:	89a0      	ldrh	r0, [r4, #12]
 8015500:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015504:	f010 0301 	ands.w	r3, r0, #1
 8015508:	d00a      	beq.n	8015520 <__swsetup_r+0xbc>
 801550a:	2300      	movs	r3, #0
 801550c:	60a3      	str	r3, [r4, #8]
 801550e:	6963      	ldr	r3, [r4, #20]
 8015510:	425b      	negs	r3, r3
 8015512:	61a3      	str	r3, [r4, #24]
 8015514:	6923      	ldr	r3, [r4, #16]
 8015516:	b943      	cbnz	r3, 801552a <__swsetup_r+0xc6>
 8015518:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801551c:	d1ba      	bne.n	8015494 <__swsetup_r+0x30>
 801551e:	bd70      	pop	{r4, r5, r6, pc}
 8015520:	0781      	lsls	r1, r0, #30
 8015522:	bf58      	it	pl
 8015524:	6963      	ldrpl	r3, [r4, #20]
 8015526:	60a3      	str	r3, [r4, #8]
 8015528:	e7f4      	b.n	8015514 <__swsetup_r+0xb0>
 801552a:	2000      	movs	r0, #0
 801552c:	e7f7      	b.n	801551e <__swsetup_r+0xba>
 801552e:	bf00      	nop
 8015530:	20000020 	.word	0x20000020
 8015534:	080194c0 	.word	0x080194c0
 8015538:	080194e0 	.word	0x080194e0
 801553c:	080194a0 	.word	0x080194a0

08015540 <abort>:
 8015540:	b508      	push	{r3, lr}
 8015542:	2006      	movs	r0, #6
 8015544:	f000 fe30 	bl	80161a8 <raise>
 8015548:	2001      	movs	r0, #1
 801554a:	f7f0 fd31 	bl	8005fb0 <_exit>
	...

08015550 <_close_r>:
 8015550:	b538      	push	{r3, r4, r5, lr}
 8015552:	4d06      	ldr	r5, [pc, #24]	; (801556c <_close_r+0x1c>)
 8015554:	2300      	movs	r3, #0
 8015556:	4604      	mov	r4, r0
 8015558:	4608      	mov	r0, r1
 801555a:	602b      	str	r3, [r5, #0]
 801555c:	f7f0 fd6b 	bl	8006036 <_close>
 8015560:	1c43      	adds	r3, r0, #1
 8015562:	d102      	bne.n	801556a <_close_r+0x1a>
 8015564:	682b      	ldr	r3, [r5, #0]
 8015566:	b103      	cbz	r3, 801556a <_close_r+0x1a>
 8015568:	6023      	str	r3, [r4, #0]
 801556a:	bd38      	pop	{r3, r4, r5, pc}
 801556c:	20007b30 	.word	0x20007b30

08015570 <__env_lock>:
 8015570:	4801      	ldr	r0, [pc, #4]	; (8015578 <__env_lock+0x8>)
 8015572:	f7fe be47 	b.w	8014204 <__retarget_lock_acquire_recursive>
 8015576:	bf00      	nop
 8015578:	20007b28 	.word	0x20007b28

0801557c <__env_unlock>:
 801557c:	4801      	ldr	r0, [pc, #4]	; (8015584 <__env_unlock+0x8>)
 801557e:	f7fe be43 	b.w	8014208 <__retarget_lock_release_recursive>
 8015582:	bf00      	nop
 8015584:	20007b28 	.word	0x20007b28

08015588 <__sflush_r>:
 8015588:	898a      	ldrh	r2, [r1, #12]
 801558a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801558e:	4605      	mov	r5, r0
 8015590:	0710      	lsls	r0, r2, #28
 8015592:	460c      	mov	r4, r1
 8015594:	d458      	bmi.n	8015648 <__sflush_r+0xc0>
 8015596:	684b      	ldr	r3, [r1, #4]
 8015598:	2b00      	cmp	r3, #0
 801559a:	dc05      	bgt.n	80155a8 <__sflush_r+0x20>
 801559c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801559e:	2b00      	cmp	r3, #0
 80155a0:	dc02      	bgt.n	80155a8 <__sflush_r+0x20>
 80155a2:	2000      	movs	r0, #0
 80155a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80155a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80155aa:	2e00      	cmp	r6, #0
 80155ac:	d0f9      	beq.n	80155a2 <__sflush_r+0x1a>
 80155ae:	2300      	movs	r3, #0
 80155b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80155b4:	682f      	ldr	r7, [r5, #0]
 80155b6:	602b      	str	r3, [r5, #0]
 80155b8:	d032      	beq.n	8015620 <__sflush_r+0x98>
 80155ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80155bc:	89a3      	ldrh	r3, [r4, #12]
 80155be:	075a      	lsls	r2, r3, #29
 80155c0:	d505      	bpl.n	80155ce <__sflush_r+0x46>
 80155c2:	6863      	ldr	r3, [r4, #4]
 80155c4:	1ac0      	subs	r0, r0, r3
 80155c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80155c8:	b10b      	cbz	r3, 80155ce <__sflush_r+0x46>
 80155ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80155cc:	1ac0      	subs	r0, r0, r3
 80155ce:	2300      	movs	r3, #0
 80155d0:	4602      	mov	r2, r0
 80155d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80155d4:	6a21      	ldr	r1, [r4, #32]
 80155d6:	4628      	mov	r0, r5
 80155d8:	47b0      	blx	r6
 80155da:	1c43      	adds	r3, r0, #1
 80155dc:	89a3      	ldrh	r3, [r4, #12]
 80155de:	d106      	bne.n	80155ee <__sflush_r+0x66>
 80155e0:	6829      	ldr	r1, [r5, #0]
 80155e2:	291d      	cmp	r1, #29
 80155e4:	d82c      	bhi.n	8015640 <__sflush_r+0xb8>
 80155e6:	4a2a      	ldr	r2, [pc, #168]	; (8015690 <__sflush_r+0x108>)
 80155e8:	40ca      	lsrs	r2, r1
 80155ea:	07d6      	lsls	r6, r2, #31
 80155ec:	d528      	bpl.n	8015640 <__sflush_r+0xb8>
 80155ee:	2200      	movs	r2, #0
 80155f0:	6062      	str	r2, [r4, #4]
 80155f2:	04d9      	lsls	r1, r3, #19
 80155f4:	6922      	ldr	r2, [r4, #16]
 80155f6:	6022      	str	r2, [r4, #0]
 80155f8:	d504      	bpl.n	8015604 <__sflush_r+0x7c>
 80155fa:	1c42      	adds	r2, r0, #1
 80155fc:	d101      	bne.n	8015602 <__sflush_r+0x7a>
 80155fe:	682b      	ldr	r3, [r5, #0]
 8015600:	b903      	cbnz	r3, 8015604 <__sflush_r+0x7c>
 8015602:	6560      	str	r0, [r4, #84]	; 0x54
 8015604:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015606:	602f      	str	r7, [r5, #0]
 8015608:	2900      	cmp	r1, #0
 801560a:	d0ca      	beq.n	80155a2 <__sflush_r+0x1a>
 801560c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015610:	4299      	cmp	r1, r3
 8015612:	d002      	beq.n	801561a <__sflush_r+0x92>
 8015614:	4628      	mov	r0, r5
 8015616:	f7fb fd7f 	bl	8011118 <_free_r>
 801561a:	2000      	movs	r0, #0
 801561c:	6360      	str	r0, [r4, #52]	; 0x34
 801561e:	e7c1      	b.n	80155a4 <__sflush_r+0x1c>
 8015620:	6a21      	ldr	r1, [r4, #32]
 8015622:	2301      	movs	r3, #1
 8015624:	4628      	mov	r0, r5
 8015626:	47b0      	blx	r6
 8015628:	1c41      	adds	r1, r0, #1
 801562a:	d1c7      	bne.n	80155bc <__sflush_r+0x34>
 801562c:	682b      	ldr	r3, [r5, #0]
 801562e:	2b00      	cmp	r3, #0
 8015630:	d0c4      	beq.n	80155bc <__sflush_r+0x34>
 8015632:	2b1d      	cmp	r3, #29
 8015634:	d001      	beq.n	801563a <__sflush_r+0xb2>
 8015636:	2b16      	cmp	r3, #22
 8015638:	d101      	bne.n	801563e <__sflush_r+0xb6>
 801563a:	602f      	str	r7, [r5, #0]
 801563c:	e7b1      	b.n	80155a2 <__sflush_r+0x1a>
 801563e:	89a3      	ldrh	r3, [r4, #12]
 8015640:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015644:	81a3      	strh	r3, [r4, #12]
 8015646:	e7ad      	b.n	80155a4 <__sflush_r+0x1c>
 8015648:	690f      	ldr	r7, [r1, #16]
 801564a:	2f00      	cmp	r7, #0
 801564c:	d0a9      	beq.n	80155a2 <__sflush_r+0x1a>
 801564e:	0793      	lsls	r3, r2, #30
 8015650:	680e      	ldr	r6, [r1, #0]
 8015652:	bf08      	it	eq
 8015654:	694b      	ldreq	r3, [r1, #20]
 8015656:	600f      	str	r7, [r1, #0]
 8015658:	bf18      	it	ne
 801565a:	2300      	movne	r3, #0
 801565c:	eba6 0807 	sub.w	r8, r6, r7
 8015660:	608b      	str	r3, [r1, #8]
 8015662:	f1b8 0f00 	cmp.w	r8, #0
 8015666:	dd9c      	ble.n	80155a2 <__sflush_r+0x1a>
 8015668:	6a21      	ldr	r1, [r4, #32]
 801566a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801566c:	4643      	mov	r3, r8
 801566e:	463a      	mov	r2, r7
 8015670:	4628      	mov	r0, r5
 8015672:	47b0      	blx	r6
 8015674:	2800      	cmp	r0, #0
 8015676:	dc06      	bgt.n	8015686 <__sflush_r+0xfe>
 8015678:	89a3      	ldrh	r3, [r4, #12]
 801567a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801567e:	81a3      	strh	r3, [r4, #12]
 8015680:	f04f 30ff 	mov.w	r0, #4294967295
 8015684:	e78e      	b.n	80155a4 <__sflush_r+0x1c>
 8015686:	4407      	add	r7, r0
 8015688:	eba8 0800 	sub.w	r8, r8, r0
 801568c:	e7e9      	b.n	8015662 <__sflush_r+0xda>
 801568e:	bf00      	nop
 8015690:	20400001 	.word	0x20400001

08015694 <_fflush_r>:
 8015694:	b538      	push	{r3, r4, r5, lr}
 8015696:	690b      	ldr	r3, [r1, #16]
 8015698:	4605      	mov	r5, r0
 801569a:	460c      	mov	r4, r1
 801569c:	b913      	cbnz	r3, 80156a4 <_fflush_r+0x10>
 801569e:	2500      	movs	r5, #0
 80156a0:	4628      	mov	r0, r5
 80156a2:	bd38      	pop	{r3, r4, r5, pc}
 80156a4:	b118      	cbz	r0, 80156ae <_fflush_r+0x1a>
 80156a6:	6983      	ldr	r3, [r0, #24]
 80156a8:	b90b      	cbnz	r3, 80156ae <_fflush_r+0x1a>
 80156aa:	f000 f887 	bl	80157bc <__sinit>
 80156ae:	4b14      	ldr	r3, [pc, #80]	; (8015700 <_fflush_r+0x6c>)
 80156b0:	429c      	cmp	r4, r3
 80156b2:	d11b      	bne.n	80156ec <_fflush_r+0x58>
 80156b4:	686c      	ldr	r4, [r5, #4]
 80156b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	d0ef      	beq.n	801569e <_fflush_r+0xa>
 80156be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80156c0:	07d0      	lsls	r0, r2, #31
 80156c2:	d404      	bmi.n	80156ce <_fflush_r+0x3a>
 80156c4:	0599      	lsls	r1, r3, #22
 80156c6:	d402      	bmi.n	80156ce <_fflush_r+0x3a>
 80156c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80156ca:	f7fe fd9b 	bl	8014204 <__retarget_lock_acquire_recursive>
 80156ce:	4628      	mov	r0, r5
 80156d0:	4621      	mov	r1, r4
 80156d2:	f7ff ff59 	bl	8015588 <__sflush_r>
 80156d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80156d8:	07da      	lsls	r2, r3, #31
 80156da:	4605      	mov	r5, r0
 80156dc:	d4e0      	bmi.n	80156a0 <_fflush_r+0xc>
 80156de:	89a3      	ldrh	r3, [r4, #12]
 80156e0:	059b      	lsls	r3, r3, #22
 80156e2:	d4dd      	bmi.n	80156a0 <_fflush_r+0xc>
 80156e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80156e6:	f7fe fd8f 	bl	8014208 <__retarget_lock_release_recursive>
 80156ea:	e7d9      	b.n	80156a0 <_fflush_r+0xc>
 80156ec:	4b05      	ldr	r3, [pc, #20]	; (8015704 <_fflush_r+0x70>)
 80156ee:	429c      	cmp	r4, r3
 80156f0:	d101      	bne.n	80156f6 <_fflush_r+0x62>
 80156f2:	68ac      	ldr	r4, [r5, #8]
 80156f4:	e7df      	b.n	80156b6 <_fflush_r+0x22>
 80156f6:	4b04      	ldr	r3, [pc, #16]	; (8015708 <_fflush_r+0x74>)
 80156f8:	429c      	cmp	r4, r3
 80156fa:	bf08      	it	eq
 80156fc:	68ec      	ldreq	r4, [r5, #12]
 80156fe:	e7da      	b.n	80156b6 <_fflush_r+0x22>
 8015700:	080194c0 	.word	0x080194c0
 8015704:	080194e0 	.word	0x080194e0
 8015708:	080194a0 	.word	0x080194a0

0801570c <std>:
 801570c:	2300      	movs	r3, #0
 801570e:	b510      	push	{r4, lr}
 8015710:	4604      	mov	r4, r0
 8015712:	e9c0 3300 	strd	r3, r3, [r0]
 8015716:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801571a:	6083      	str	r3, [r0, #8]
 801571c:	8181      	strh	r1, [r0, #12]
 801571e:	6643      	str	r3, [r0, #100]	; 0x64
 8015720:	81c2      	strh	r2, [r0, #14]
 8015722:	6183      	str	r3, [r0, #24]
 8015724:	4619      	mov	r1, r3
 8015726:	2208      	movs	r2, #8
 8015728:	305c      	adds	r0, #92	; 0x5c
 801572a:	f7fb fa7b 	bl	8010c24 <memset>
 801572e:	4b05      	ldr	r3, [pc, #20]	; (8015744 <std+0x38>)
 8015730:	6263      	str	r3, [r4, #36]	; 0x24
 8015732:	4b05      	ldr	r3, [pc, #20]	; (8015748 <std+0x3c>)
 8015734:	62a3      	str	r3, [r4, #40]	; 0x28
 8015736:	4b05      	ldr	r3, [pc, #20]	; (801574c <std+0x40>)
 8015738:	62e3      	str	r3, [r4, #44]	; 0x2c
 801573a:	4b05      	ldr	r3, [pc, #20]	; (8015750 <std+0x44>)
 801573c:	6224      	str	r4, [r4, #32]
 801573e:	6323      	str	r3, [r4, #48]	; 0x30
 8015740:	bd10      	pop	{r4, pc}
 8015742:	bf00      	nop
 8015744:	080151e9 	.word	0x080151e9
 8015748:	0801520f 	.word	0x0801520f
 801574c:	08015247 	.word	0x08015247
 8015750:	0801526b 	.word	0x0801526b

08015754 <_cleanup_r>:
 8015754:	4901      	ldr	r1, [pc, #4]	; (801575c <_cleanup_r+0x8>)
 8015756:	f000 b8af 	b.w	80158b8 <_fwalk_reent>
 801575a:	bf00      	nop
 801575c:	08015695 	.word	0x08015695

08015760 <__sfmoreglue>:
 8015760:	b570      	push	{r4, r5, r6, lr}
 8015762:	2268      	movs	r2, #104	; 0x68
 8015764:	1e4d      	subs	r5, r1, #1
 8015766:	4355      	muls	r5, r2
 8015768:	460e      	mov	r6, r1
 801576a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801576e:	f7fb fd3f 	bl	80111f0 <_malloc_r>
 8015772:	4604      	mov	r4, r0
 8015774:	b140      	cbz	r0, 8015788 <__sfmoreglue+0x28>
 8015776:	2100      	movs	r1, #0
 8015778:	e9c0 1600 	strd	r1, r6, [r0]
 801577c:	300c      	adds	r0, #12
 801577e:	60a0      	str	r0, [r4, #8]
 8015780:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015784:	f7fb fa4e 	bl	8010c24 <memset>
 8015788:	4620      	mov	r0, r4
 801578a:	bd70      	pop	{r4, r5, r6, pc}

0801578c <__sfp_lock_acquire>:
 801578c:	4801      	ldr	r0, [pc, #4]	; (8015794 <__sfp_lock_acquire+0x8>)
 801578e:	f7fe bd39 	b.w	8014204 <__retarget_lock_acquire_recursive>
 8015792:	bf00      	nop
 8015794:	20007b2a 	.word	0x20007b2a

08015798 <__sfp_lock_release>:
 8015798:	4801      	ldr	r0, [pc, #4]	; (80157a0 <__sfp_lock_release+0x8>)
 801579a:	f7fe bd35 	b.w	8014208 <__retarget_lock_release_recursive>
 801579e:	bf00      	nop
 80157a0:	20007b2a 	.word	0x20007b2a

080157a4 <__sinit_lock_acquire>:
 80157a4:	4801      	ldr	r0, [pc, #4]	; (80157ac <__sinit_lock_acquire+0x8>)
 80157a6:	f7fe bd2d 	b.w	8014204 <__retarget_lock_acquire_recursive>
 80157aa:	bf00      	nop
 80157ac:	20007b2b 	.word	0x20007b2b

080157b0 <__sinit_lock_release>:
 80157b0:	4801      	ldr	r0, [pc, #4]	; (80157b8 <__sinit_lock_release+0x8>)
 80157b2:	f7fe bd29 	b.w	8014208 <__retarget_lock_release_recursive>
 80157b6:	bf00      	nop
 80157b8:	20007b2b 	.word	0x20007b2b

080157bc <__sinit>:
 80157bc:	b510      	push	{r4, lr}
 80157be:	4604      	mov	r4, r0
 80157c0:	f7ff fff0 	bl	80157a4 <__sinit_lock_acquire>
 80157c4:	69a3      	ldr	r3, [r4, #24]
 80157c6:	b11b      	cbz	r3, 80157d0 <__sinit+0x14>
 80157c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80157cc:	f7ff bff0 	b.w	80157b0 <__sinit_lock_release>
 80157d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80157d4:	6523      	str	r3, [r4, #80]	; 0x50
 80157d6:	4b13      	ldr	r3, [pc, #76]	; (8015824 <__sinit+0x68>)
 80157d8:	4a13      	ldr	r2, [pc, #76]	; (8015828 <__sinit+0x6c>)
 80157da:	681b      	ldr	r3, [r3, #0]
 80157dc:	62a2      	str	r2, [r4, #40]	; 0x28
 80157de:	42a3      	cmp	r3, r4
 80157e0:	bf04      	itt	eq
 80157e2:	2301      	moveq	r3, #1
 80157e4:	61a3      	streq	r3, [r4, #24]
 80157e6:	4620      	mov	r0, r4
 80157e8:	f000 f820 	bl	801582c <__sfp>
 80157ec:	6060      	str	r0, [r4, #4]
 80157ee:	4620      	mov	r0, r4
 80157f0:	f000 f81c 	bl	801582c <__sfp>
 80157f4:	60a0      	str	r0, [r4, #8]
 80157f6:	4620      	mov	r0, r4
 80157f8:	f000 f818 	bl	801582c <__sfp>
 80157fc:	2200      	movs	r2, #0
 80157fe:	60e0      	str	r0, [r4, #12]
 8015800:	2104      	movs	r1, #4
 8015802:	6860      	ldr	r0, [r4, #4]
 8015804:	f7ff ff82 	bl	801570c <std>
 8015808:	68a0      	ldr	r0, [r4, #8]
 801580a:	2201      	movs	r2, #1
 801580c:	2109      	movs	r1, #9
 801580e:	f7ff ff7d 	bl	801570c <std>
 8015812:	68e0      	ldr	r0, [r4, #12]
 8015814:	2202      	movs	r2, #2
 8015816:	2112      	movs	r1, #18
 8015818:	f7ff ff78 	bl	801570c <std>
 801581c:	2301      	movs	r3, #1
 801581e:	61a3      	str	r3, [r4, #24]
 8015820:	e7d2      	b.n	80157c8 <__sinit+0xc>
 8015822:	bf00      	nop
 8015824:	08018f7c 	.word	0x08018f7c
 8015828:	08015755 	.word	0x08015755

0801582c <__sfp>:
 801582c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801582e:	4607      	mov	r7, r0
 8015830:	f7ff ffac 	bl	801578c <__sfp_lock_acquire>
 8015834:	4b1e      	ldr	r3, [pc, #120]	; (80158b0 <__sfp+0x84>)
 8015836:	681e      	ldr	r6, [r3, #0]
 8015838:	69b3      	ldr	r3, [r6, #24]
 801583a:	b913      	cbnz	r3, 8015842 <__sfp+0x16>
 801583c:	4630      	mov	r0, r6
 801583e:	f7ff ffbd 	bl	80157bc <__sinit>
 8015842:	3648      	adds	r6, #72	; 0x48
 8015844:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015848:	3b01      	subs	r3, #1
 801584a:	d503      	bpl.n	8015854 <__sfp+0x28>
 801584c:	6833      	ldr	r3, [r6, #0]
 801584e:	b30b      	cbz	r3, 8015894 <__sfp+0x68>
 8015850:	6836      	ldr	r6, [r6, #0]
 8015852:	e7f7      	b.n	8015844 <__sfp+0x18>
 8015854:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015858:	b9d5      	cbnz	r5, 8015890 <__sfp+0x64>
 801585a:	4b16      	ldr	r3, [pc, #88]	; (80158b4 <__sfp+0x88>)
 801585c:	60e3      	str	r3, [r4, #12]
 801585e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015862:	6665      	str	r5, [r4, #100]	; 0x64
 8015864:	f7fe fccc 	bl	8014200 <__retarget_lock_init_recursive>
 8015868:	f7ff ff96 	bl	8015798 <__sfp_lock_release>
 801586c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8015870:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8015874:	6025      	str	r5, [r4, #0]
 8015876:	61a5      	str	r5, [r4, #24]
 8015878:	2208      	movs	r2, #8
 801587a:	4629      	mov	r1, r5
 801587c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015880:	f7fb f9d0 	bl	8010c24 <memset>
 8015884:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015888:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801588c:	4620      	mov	r0, r4
 801588e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015890:	3468      	adds	r4, #104	; 0x68
 8015892:	e7d9      	b.n	8015848 <__sfp+0x1c>
 8015894:	2104      	movs	r1, #4
 8015896:	4638      	mov	r0, r7
 8015898:	f7ff ff62 	bl	8015760 <__sfmoreglue>
 801589c:	4604      	mov	r4, r0
 801589e:	6030      	str	r0, [r6, #0]
 80158a0:	2800      	cmp	r0, #0
 80158a2:	d1d5      	bne.n	8015850 <__sfp+0x24>
 80158a4:	f7ff ff78 	bl	8015798 <__sfp_lock_release>
 80158a8:	230c      	movs	r3, #12
 80158aa:	603b      	str	r3, [r7, #0]
 80158ac:	e7ee      	b.n	801588c <__sfp+0x60>
 80158ae:	bf00      	nop
 80158b0:	08018f7c 	.word	0x08018f7c
 80158b4:	ffff0001 	.word	0xffff0001

080158b8 <_fwalk_reent>:
 80158b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80158bc:	4606      	mov	r6, r0
 80158be:	4688      	mov	r8, r1
 80158c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80158c4:	2700      	movs	r7, #0
 80158c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80158ca:	f1b9 0901 	subs.w	r9, r9, #1
 80158ce:	d505      	bpl.n	80158dc <_fwalk_reent+0x24>
 80158d0:	6824      	ldr	r4, [r4, #0]
 80158d2:	2c00      	cmp	r4, #0
 80158d4:	d1f7      	bne.n	80158c6 <_fwalk_reent+0xe>
 80158d6:	4638      	mov	r0, r7
 80158d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80158dc:	89ab      	ldrh	r3, [r5, #12]
 80158de:	2b01      	cmp	r3, #1
 80158e0:	d907      	bls.n	80158f2 <_fwalk_reent+0x3a>
 80158e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80158e6:	3301      	adds	r3, #1
 80158e8:	d003      	beq.n	80158f2 <_fwalk_reent+0x3a>
 80158ea:	4629      	mov	r1, r5
 80158ec:	4630      	mov	r0, r6
 80158ee:	47c0      	blx	r8
 80158f0:	4307      	orrs	r7, r0
 80158f2:	3568      	adds	r5, #104	; 0x68
 80158f4:	e7e9      	b.n	80158ca <_fwalk_reent+0x12>
	...

080158f8 <_lseek_r>:
 80158f8:	b538      	push	{r3, r4, r5, lr}
 80158fa:	4d07      	ldr	r5, [pc, #28]	; (8015918 <_lseek_r+0x20>)
 80158fc:	4604      	mov	r4, r0
 80158fe:	4608      	mov	r0, r1
 8015900:	4611      	mov	r1, r2
 8015902:	2200      	movs	r2, #0
 8015904:	602a      	str	r2, [r5, #0]
 8015906:	461a      	mov	r2, r3
 8015908:	f7f0 fbbc 	bl	8006084 <_lseek>
 801590c:	1c43      	adds	r3, r0, #1
 801590e:	d102      	bne.n	8015916 <_lseek_r+0x1e>
 8015910:	682b      	ldr	r3, [r5, #0]
 8015912:	b103      	cbz	r3, 8015916 <_lseek_r+0x1e>
 8015914:	6023      	str	r3, [r4, #0]
 8015916:	bd38      	pop	{r3, r4, r5, pc}
 8015918:	20007b30 	.word	0x20007b30

0801591c <__swhatbuf_r>:
 801591c:	b570      	push	{r4, r5, r6, lr}
 801591e:	460e      	mov	r6, r1
 8015920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015924:	2900      	cmp	r1, #0
 8015926:	b096      	sub	sp, #88	; 0x58
 8015928:	4614      	mov	r4, r2
 801592a:	461d      	mov	r5, r3
 801592c:	da08      	bge.n	8015940 <__swhatbuf_r+0x24>
 801592e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8015932:	2200      	movs	r2, #0
 8015934:	602a      	str	r2, [r5, #0]
 8015936:	061a      	lsls	r2, r3, #24
 8015938:	d410      	bmi.n	801595c <__swhatbuf_r+0x40>
 801593a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801593e:	e00e      	b.n	801595e <__swhatbuf_r+0x42>
 8015940:	466a      	mov	r2, sp
 8015942:	f000 fd0b 	bl	801635c <_fstat_r>
 8015946:	2800      	cmp	r0, #0
 8015948:	dbf1      	blt.n	801592e <__swhatbuf_r+0x12>
 801594a:	9a01      	ldr	r2, [sp, #4]
 801594c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015950:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015954:	425a      	negs	r2, r3
 8015956:	415a      	adcs	r2, r3
 8015958:	602a      	str	r2, [r5, #0]
 801595a:	e7ee      	b.n	801593a <__swhatbuf_r+0x1e>
 801595c:	2340      	movs	r3, #64	; 0x40
 801595e:	2000      	movs	r0, #0
 8015960:	6023      	str	r3, [r4, #0]
 8015962:	b016      	add	sp, #88	; 0x58
 8015964:	bd70      	pop	{r4, r5, r6, pc}
	...

08015968 <__smakebuf_r>:
 8015968:	898b      	ldrh	r3, [r1, #12]
 801596a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801596c:	079d      	lsls	r5, r3, #30
 801596e:	4606      	mov	r6, r0
 8015970:	460c      	mov	r4, r1
 8015972:	d507      	bpl.n	8015984 <__smakebuf_r+0x1c>
 8015974:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015978:	6023      	str	r3, [r4, #0]
 801597a:	6123      	str	r3, [r4, #16]
 801597c:	2301      	movs	r3, #1
 801597e:	6163      	str	r3, [r4, #20]
 8015980:	b002      	add	sp, #8
 8015982:	bd70      	pop	{r4, r5, r6, pc}
 8015984:	ab01      	add	r3, sp, #4
 8015986:	466a      	mov	r2, sp
 8015988:	f7ff ffc8 	bl	801591c <__swhatbuf_r>
 801598c:	9900      	ldr	r1, [sp, #0]
 801598e:	4605      	mov	r5, r0
 8015990:	4630      	mov	r0, r6
 8015992:	f7fb fc2d 	bl	80111f0 <_malloc_r>
 8015996:	b948      	cbnz	r0, 80159ac <__smakebuf_r+0x44>
 8015998:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801599c:	059a      	lsls	r2, r3, #22
 801599e:	d4ef      	bmi.n	8015980 <__smakebuf_r+0x18>
 80159a0:	f023 0303 	bic.w	r3, r3, #3
 80159a4:	f043 0302 	orr.w	r3, r3, #2
 80159a8:	81a3      	strh	r3, [r4, #12]
 80159aa:	e7e3      	b.n	8015974 <__smakebuf_r+0xc>
 80159ac:	4b0d      	ldr	r3, [pc, #52]	; (80159e4 <__smakebuf_r+0x7c>)
 80159ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80159b0:	89a3      	ldrh	r3, [r4, #12]
 80159b2:	6020      	str	r0, [r4, #0]
 80159b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80159b8:	81a3      	strh	r3, [r4, #12]
 80159ba:	9b00      	ldr	r3, [sp, #0]
 80159bc:	6163      	str	r3, [r4, #20]
 80159be:	9b01      	ldr	r3, [sp, #4]
 80159c0:	6120      	str	r0, [r4, #16]
 80159c2:	b15b      	cbz	r3, 80159dc <__smakebuf_r+0x74>
 80159c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80159c8:	4630      	mov	r0, r6
 80159ca:	f000 fcd9 	bl	8016380 <_isatty_r>
 80159ce:	b128      	cbz	r0, 80159dc <__smakebuf_r+0x74>
 80159d0:	89a3      	ldrh	r3, [r4, #12]
 80159d2:	f023 0303 	bic.w	r3, r3, #3
 80159d6:	f043 0301 	orr.w	r3, r3, #1
 80159da:	81a3      	strh	r3, [r4, #12]
 80159dc:	89a0      	ldrh	r0, [r4, #12]
 80159de:	4305      	orrs	r5, r0
 80159e0:	81a5      	strh	r5, [r4, #12]
 80159e2:	e7cd      	b.n	8015980 <__smakebuf_r+0x18>
 80159e4:	08015755 	.word	0x08015755

080159e8 <memmove>:
 80159e8:	4288      	cmp	r0, r1
 80159ea:	b510      	push	{r4, lr}
 80159ec:	eb01 0402 	add.w	r4, r1, r2
 80159f0:	d902      	bls.n	80159f8 <memmove+0x10>
 80159f2:	4284      	cmp	r4, r0
 80159f4:	4623      	mov	r3, r4
 80159f6:	d807      	bhi.n	8015a08 <memmove+0x20>
 80159f8:	1e43      	subs	r3, r0, #1
 80159fa:	42a1      	cmp	r1, r4
 80159fc:	d008      	beq.n	8015a10 <memmove+0x28>
 80159fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015a02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015a06:	e7f8      	b.n	80159fa <memmove+0x12>
 8015a08:	4402      	add	r2, r0
 8015a0a:	4601      	mov	r1, r0
 8015a0c:	428a      	cmp	r2, r1
 8015a0e:	d100      	bne.n	8015a12 <memmove+0x2a>
 8015a10:	bd10      	pop	{r4, pc}
 8015a12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015a16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015a1a:	e7f7      	b.n	8015a0c <memmove+0x24>

08015a1c <_realloc_r>:
 8015a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a20:	4680      	mov	r8, r0
 8015a22:	4614      	mov	r4, r2
 8015a24:	460e      	mov	r6, r1
 8015a26:	b921      	cbnz	r1, 8015a32 <_realloc_r+0x16>
 8015a28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015a2c:	4611      	mov	r1, r2
 8015a2e:	f7fb bbdf 	b.w	80111f0 <_malloc_r>
 8015a32:	b92a      	cbnz	r2, 8015a40 <_realloc_r+0x24>
 8015a34:	f7fb fb70 	bl	8011118 <_free_r>
 8015a38:	4625      	mov	r5, r4
 8015a3a:	4628      	mov	r0, r5
 8015a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a40:	f000 fcae 	bl	80163a0 <_malloc_usable_size_r>
 8015a44:	4284      	cmp	r4, r0
 8015a46:	4607      	mov	r7, r0
 8015a48:	d802      	bhi.n	8015a50 <_realloc_r+0x34>
 8015a4a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015a4e:	d812      	bhi.n	8015a76 <_realloc_r+0x5a>
 8015a50:	4621      	mov	r1, r4
 8015a52:	4640      	mov	r0, r8
 8015a54:	f7fb fbcc 	bl	80111f0 <_malloc_r>
 8015a58:	4605      	mov	r5, r0
 8015a5a:	2800      	cmp	r0, #0
 8015a5c:	d0ed      	beq.n	8015a3a <_realloc_r+0x1e>
 8015a5e:	42bc      	cmp	r4, r7
 8015a60:	4622      	mov	r2, r4
 8015a62:	4631      	mov	r1, r6
 8015a64:	bf28      	it	cs
 8015a66:	463a      	movcs	r2, r7
 8015a68:	f7fe fbe1 	bl	801422e <memcpy>
 8015a6c:	4631      	mov	r1, r6
 8015a6e:	4640      	mov	r0, r8
 8015a70:	f7fb fb52 	bl	8011118 <_free_r>
 8015a74:	e7e1      	b.n	8015a3a <_realloc_r+0x1e>
 8015a76:	4635      	mov	r5, r6
 8015a78:	e7df      	b.n	8015a3a <_realloc_r+0x1e>

08015a7a <_sungetc_r>:
 8015a7a:	b538      	push	{r3, r4, r5, lr}
 8015a7c:	1c4b      	adds	r3, r1, #1
 8015a7e:	4614      	mov	r4, r2
 8015a80:	d103      	bne.n	8015a8a <_sungetc_r+0x10>
 8015a82:	f04f 35ff 	mov.w	r5, #4294967295
 8015a86:	4628      	mov	r0, r5
 8015a88:	bd38      	pop	{r3, r4, r5, pc}
 8015a8a:	8993      	ldrh	r3, [r2, #12]
 8015a8c:	f023 0320 	bic.w	r3, r3, #32
 8015a90:	8193      	strh	r3, [r2, #12]
 8015a92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015a94:	6852      	ldr	r2, [r2, #4]
 8015a96:	b2cd      	uxtb	r5, r1
 8015a98:	b18b      	cbz	r3, 8015abe <_sungetc_r+0x44>
 8015a9a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015a9c:	4293      	cmp	r3, r2
 8015a9e:	dd08      	ble.n	8015ab2 <_sungetc_r+0x38>
 8015aa0:	6823      	ldr	r3, [r4, #0]
 8015aa2:	1e5a      	subs	r2, r3, #1
 8015aa4:	6022      	str	r2, [r4, #0]
 8015aa6:	f803 5c01 	strb.w	r5, [r3, #-1]
 8015aaa:	6863      	ldr	r3, [r4, #4]
 8015aac:	3301      	adds	r3, #1
 8015aae:	6063      	str	r3, [r4, #4]
 8015ab0:	e7e9      	b.n	8015a86 <_sungetc_r+0xc>
 8015ab2:	4621      	mov	r1, r4
 8015ab4:	f000 fc18 	bl	80162e8 <__submore>
 8015ab8:	2800      	cmp	r0, #0
 8015aba:	d0f1      	beq.n	8015aa0 <_sungetc_r+0x26>
 8015abc:	e7e1      	b.n	8015a82 <_sungetc_r+0x8>
 8015abe:	6921      	ldr	r1, [r4, #16]
 8015ac0:	6823      	ldr	r3, [r4, #0]
 8015ac2:	b151      	cbz	r1, 8015ada <_sungetc_r+0x60>
 8015ac4:	4299      	cmp	r1, r3
 8015ac6:	d208      	bcs.n	8015ada <_sungetc_r+0x60>
 8015ac8:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8015acc:	42a9      	cmp	r1, r5
 8015ace:	d104      	bne.n	8015ada <_sungetc_r+0x60>
 8015ad0:	3b01      	subs	r3, #1
 8015ad2:	3201      	adds	r2, #1
 8015ad4:	6023      	str	r3, [r4, #0]
 8015ad6:	6062      	str	r2, [r4, #4]
 8015ad8:	e7d5      	b.n	8015a86 <_sungetc_r+0xc>
 8015ada:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8015ade:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015ae2:	6363      	str	r3, [r4, #52]	; 0x34
 8015ae4:	2303      	movs	r3, #3
 8015ae6:	63a3      	str	r3, [r4, #56]	; 0x38
 8015ae8:	4623      	mov	r3, r4
 8015aea:	f803 5f46 	strb.w	r5, [r3, #70]!
 8015aee:	6023      	str	r3, [r4, #0]
 8015af0:	2301      	movs	r3, #1
 8015af2:	e7dc      	b.n	8015aae <_sungetc_r+0x34>

08015af4 <__ssrefill_r>:
 8015af4:	b510      	push	{r4, lr}
 8015af6:	460c      	mov	r4, r1
 8015af8:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8015afa:	b169      	cbz	r1, 8015b18 <__ssrefill_r+0x24>
 8015afc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015b00:	4299      	cmp	r1, r3
 8015b02:	d001      	beq.n	8015b08 <__ssrefill_r+0x14>
 8015b04:	f7fb fb08 	bl	8011118 <_free_r>
 8015b08:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015b0a:	6063      	str	r3, [r4, #4]
 8015b0c:	2000      	movs	r0, #0
 8015b0e:	6360      	str	r0, [r4, #52]	; 0x34
 8015b10:	b113      	cbz	r3, 8015b18 <__ssrefill_r+0x24>
 8015b12:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8015b14:	6023      	str	r3, [r4, #0]
 8015b16:	bd10      	pop	{r4, pc}
 8015b18:	6923      	ldr	r3, [r4, #16]
 8015b1a:	6023      	str	r3, [r4, #0]
 8015b1c:	2300      	movs	r3, #0
 8015b1e:	6063      	str	r3, [r4, #4]
 8015b20:	89a3      	ldrh	r3, [r4, #12]
 8015b22:	f043 0320 	orr.w	r3, r3, #32
 8015b26:	81a3      	strh	r3, [r4, #12]
 8015b28:	f04f 30ff 	mov.w	r0, #4294967295
 8015b2c:	e7f3      	b.n	8015b16 <__ssrefill_r+0x22>
	...

08015b30 <__ssvfiscanf_r>:
 8015b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015b34:	460c      	mov	r4, r1
 8015b36:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8015b3a:	2100      	movs	r1, #0
 8015b3c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8015b40:	49a6      	ldr	r1, [pc, #664]	; (8015ddc <__ssvfiscanf_r+0x2ac>)
 8015b42:	91a0      	str	r1, [sp, #640]	; 0x280
 8015b44:	f10d 0804 	add.w	r8, sp, #4
 8015b48:	49a5      	ldr	r1, [pc, #660]	; (8015de0 <__ssvfiscanf_r+0x2b0>)
 8015b4a:	4fa6      	ldr	r7, [pc, #664]	; (8015de4 <__ssvfiscanf_r+0x2b4>)
 8015b4c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8015de8 <__ssvfiscanf_r+0x2b8>
 8015b50:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8015b54:	4606      	mov	r6, r0
 8015b56:	91a1      	str	r1, [sp, #644]	; 0x284
 8015b58:	9300      	str	r3, [sp, #0]
 8015b5a:	7813      	ldrb	r3, [r2, #0]
 8015b5c:	2b00      	cmp	r3, #0
 8015b5e:	f000 815a 	beq.w	8015e16 <__ssvfiscanf_r+0x2e6>
 8015b62:	5dd9      	ldrb	r1, [r3, r7]
 8015b64:	f011 0108 	ands.w	r1, r1, #8
 8015b68:	f102 0501 	add.w	r5, r2, #1
 8015b6c:	d019      	beq.n	8015ba2 <__ssvfiscanf_r+0x72>
 8015b6e:	6863      	ldr	r3, [r4, #4]
 8015b70:	2b00      	cmp	r3, #0
 8015b72:	dd0f      	ble.n	8015b94 <__ssvfiscanf_r+0x64>
 8015b74:	6823      	ldr	r3, [r4, #0]
 8015b76:	781a      	ldrb	r2, [r3, #0]
 8015b78:	5cba      	ldrb	r2, [r7, r2]
 8015b7a:	0712      	lsls	r2, r2, #28
 8015b7c:	d401      	bmi.n	8015b82 <__ssvfiscanf_r+0x52>
 8015b7e:	462a      	mov	r2, r5
 8015b80:	e7eb      	b.n	8015b5a <__ssvfiscanf_r+0x2a>
 8015b82:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8015b84:	3201      	adds	r2, #1
 8015b86:	9245      	str	r2, [sp, #276]	; 0x114
 8015b88:	6862      	ldr	r2, [r4, #4]
 8015b8a:	3301      	adds	r3, #1
 8015b8c:	3a01      	subs	r2, #1
 8015b8e:	6062      	str	r2, [r4, #4]
 8015b90:	6023      	str	r3, [r4, #0]
 8015b92:	e7ec      	b.n	8015b6e <__ssvfiscanf_r+0x3e>
 8015b94:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015b96:	4621      	mov	r1, r4
 8015b98:	4630      	mov	r0, r6
 8015b9a:	4798      	blx	r3
 8015b9c:	2800      	cmp	r0, #0
 8015b9e:	d0e9      	beq.n	8015b74 <__ssvfiscanf_r+0x44>
 8015ba0:	e7ed      	b.n	8015b7e <__ssvfiscanf_r+0x4e>
 8015ba2:	2b25      	cmp	r3, #37	; 0x25
 8015ba4:	d012      	beq.n	8015bcc <__ssvfiscanf_r+0x9c>
 8015ba6:	469a      	mov	sl, r3
 8015ba8:	6863      	ldr	r3, [r4, #4]
 8015baa:	2b00      	cmp	r3, #0
 8015bac:	f340 8091 	ble.w	8015cd2 <__ssvfiscanf_r+0x1a2>
 8015bb0:	6822      	ldr	r2, [r4, #0]
 8015bb2:	7813      	ldrb	r3, [r2, #0]
 8015bb4:	4553      	cmp	r3, sl
 8015bb6:	f040 812e 	bne.w	8015e16 <__ssvfiscanf_r+0x2e6>
 8015bba:	6863      	ldr	r3, [r4, #4]
 8015bbc:	3b01      	subs	r3, #1
 8015bbe:	6063      	str	r3, [r4, #4]
 8015bc0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8015bc2:	3201      	adds	r2, #1
 8015bc4:	3301      	adds	r3, #1
 8015bc6:	6022      	str	r2, [r4, #0]
 8015bc8:	9345      	str	r3, [sp, #276]	; 0x114
 8015bca:	e7d8      	b.n	8015b7e <__ssvfiscanf_r+0x4e>
 8015bcc:	9141      	str	r1, [sp, #260]	; 0x104
 8015bce:	9143      	str	r1, [sp, #268]	; 0x10c
 8015bd0:	7853      	ldrb	r3, [r2, #1]
 8015bd2:	2b2a      	cmp	r3, #42	; 0x2a
 8015bd4:	bf02      	ittt	eq
 8015bd6:	2310      	moveq	r3, #16
 8015bd8:	1c95      	addeq	r5, r2, #2
 8015bda:	9341      	streq	r3, [sp, #260]	; 0x104
 8015bdc:	220a      	movs	r2, #10
 8015bde:	46aa      	mov	sl, r5
 8015be0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8015be4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8015be8:	2b09      	cmp	r3, #9
 8015bea:	d91d      	bls.n	8015c28 <__ssvfiscanf_r+0xf8>
 8015bec:	487e      	ldr	r0, [pc, #504]	; (8015de8 <__ssvfiscanf_r+0x2b8>)
 8015bee:	2203      	movs	r2, #3
 8015bf0:	f7ea fb0e 	bl	8000210 <memchr>
 8015bf4:	b140      	cbz	r0, 8015c08 <__ssvfiscanf_r+0xd8>
 8015bf6:	2301      	movs	r3, #1
 8015bf8:	eba0 0009 	sub.w	r0, r0, r9
 8015bfc:	fa03 f000 	lsl.w	r0, r3, r0
 8015c00:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8015c02:	4318      	orrs	r0, r3
 8015c04:	9041      	str	r0, [sp, #260]	; 0x104
 8015c06:	4655      	mov	r5, sl
 8015c08:	f815 3b01 	ldrb.w	r3, [r5], #1
 8015c0c:	2b78      	cmp	r3, #120	; 0x78
 8015c0e:	d806      	bhi.n	8015c1e <__ssvfiscanf_r+0xee>
 8015c10:	2b57      	cmp	r3, #87	; 0x57
 8015c12:	d810      	bhi.n	8015c36 <__ssvfiscanf_r+0x106>
 8015c14:	2b25      	cmp	r3, #37	; 0x25
 8015c16:	d0c6      	beq.n	8015ba6 <__ssvfiscanf_r+0x76>
 8015c18:	d856      	bhi.n	8015cc8 <__ssvfiscanf_r+0x198>
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d064      	beq.n	8015ce8 <__ssvfiscanf_r+0x1b8>
 8015c1e:	2303      	movs	r3, #3
 8015c20:	9347      	str	r3, [sp, #284]	; 0x11c
 8015c22:	230a      	movs	r3, #10
 8015c24:	9342      	str	r3, [sp, #264]	; 0x108
 8015c26:	e071      	b.n	8015d0c <__ssvfiscanf_r+0x1dc>
 8015c28:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8015c2a:	fb02 1103 	mla	r1, r2, r3, r1
 8015c2e:	3930      	subs	r1, #48	; 0x30
 8015c30:	9143      	str	r1, [sp, #268]	; 0x10c
 8015c32:	4655      	mov	r5, sl
 8015c34:	e7d3      	b.n	8015bde <__ssvfiscanf_r+0xae>
 8015c36:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8015c3a:	2a20      	cmp	r2, #32
 8015c3c:	d8ef      	bhi.n	8015c1e <__ssvfiscanf_r+0xee>
 8015c3e:	a101      	add	r1, pc, #4	; (adr r1, 8015c44 <__ssvfiscanf_r+0x114>)
 8015c40:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8015c44:	08015cf7 	.word	0x08015cf7
 8015c48:	08015c1f 	.word	0x08015c1f
 8015c4c:	08015c1f 	.word	0x08015c1f
 8015c50:	08015d55 	.word	0x08015d55
 8015c54:	08015c1f 	.word	0x08015c1f
 8015c58:	08015c1f 	.word	0x08015c1f
 8015c5c:	08015c1f 	.word	0x08015c1f
 8015c60:	08015c1f 	.word	0x08015c1f
 8015c64:	08015c1f 	.word	0x08015c1f
 8015c68:	08015c1f 	.word	0x08015c1f
 8015c6c:	08015c1f 	.word	0x08015c1f
 8015c70:	08015d6b 	.word	0x08015d6b
 8015c74:	08015d41 	.word	0x08015d41
 8015c78:	08015ccf 	.word	0x08015ccf
 8015c7c:	08015ccf 	.word	0x08015ccf
 8015c80:	08015ccf 	.word	0x08015ccf
 8015c84:	08015c1f 	.word	0x08015c1f
 8015c88:	08015d45 	.word	0x08015d45
 8015c8c:	08015c1f 	.word	0x08015c1f
 8015c90:	08015c1f 	.word	0x08015c1f
 8015c94:	08015c1f 	.word	0x08015c1f
 8015c98:	08015c1f 	.word	0x08015c1f
 8015c9c:	08015d7b 	.word	0x08015d7b
 8015ca0:	08015d4d 	.word	0x08015d4d
 8015ca4:	08015cef 	.word	0x08015cef
 8015ca8:	08015c1f 	.word	0x08015c1f
 8015cac:	08015c1f 	.word	0x08015c1f
 8015cb0:	08015d77 	.word	0x08015d77
 8015cb4:	08015c1f 	.word	0x08015c1f
 8015cb8:	08015d41 	.word	0x08015d41
 8015cbc:	08015c1f 	.word	0x08015c1f
 8015cc0:	08015c1f 	.word	0x08015c1f
 8015cc4:	08015cf7 	.word	0x08015cf7
 8015cc8:	3b45      	subs	r3, #69	; 0x45
 8015cca:	2b02      	cmp	r3, #2
 8015ccc:	d8a7      	bhi.n	8015c1e <__ssvfiscanf_r+0xee>
 8015cce:	2305      	movs	r3, #5
 8015cd0:	e01b      	b.n	8015d0a <__ssvfiscanf_r+0x1da>
 8015cd2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015cd4:	4621      	mov	r1, r4
 8015cd6:	4630      	mov	r0, r6
 8015cd8:	4798      	blx	r3
 8015cda:	2800      	cmp	r0, #0
 8015cdc:	f43f af68 	beq.w	8015bb0 <__ssvfiscanf_r+0x80>
 8015ce0:	9844      	ldr	r0, [sp, #272]	; 0x110
 8015ce2:	2800      	cmp	r0, #0
 8015ce4:	f040 808d 	bne.w	8015e02 <__ssvfiscanf_r+0x2d2>
 8015ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8015cec:	e08f      	b.n	8015e0e <__ssvfiscanf_r+0x2de>
 8015cee:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8015cf0:	f042 0220 	orr.w	r2, r2, #32
 8015cf4:	9241      	str	r2, [sp, #260]	; 0x104
 8015cf6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8015cf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8015cfc:	9241      	str	r2, [sp, #260]	; 0x104
 8015cfe:	2210      	movs	r2, #16
 8015d00:	2b6f      	cmp	r3, #111	; 0x6f
 8015d02:	9242      	str	r2, [sp, #264]	; 0x108
 8015d04:	bf34      	ite	cc
 8015d06:	2303      	movcc	r3, #3
 8015d08:	2304      	movcs	r3, #4
 8015d0a:	9347      	str	r3, [sp, #284]	; 0x11c
 8015d0c:	6863      	ldr	r3, [r4, #4]
 8015d0e:	2b00      	cmp	r3, #0
 8015d10:	dd42      	ble.n	8015d98 <__ssvfiscanf_r+0x268>
 8015d12:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8015d14:	0659      	lsls	r1, r3, #25
 8015d16:	d404      	bmi.n	8015d22 <__ssvfiscanf_r+0x1f2>
 8015d18:	6823      	ldr	r3, [r4, #0]
 8015d1a:	781a      	ldrb	r2, [r3, #0]
 8015d1c:	5cba      	ldrb	r2, [r7, r2]
 8015d1e:	0712      	lsls	r2, r2, #28
 8015d20:	d441      	bmi.n	8015da6 <__ssvfiscanf_r+0x276>
 8015d22:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8015d24:	2b02      	cmp	r3, #2
 8015d26:	dc50      	bgt.n	8015dca <__ssvfiscanf_r+0x29a>
 8015d28:	466b      	mov	r3, sp
 8015d2a:	4622      	mov	r2, r4
 8015d2c:	a941      	add	r1, sp, #260	; 0x104
 8015d2e:	4630      	mov	r0, r6
 8015d30:	f000 f876 	bl	8015e20 <_scanf_chars>
 8015d34:	2801      	cmp	r0, #1
 8015d36:	d06e      	beq.n	8015e16 <__ssvfiscanf_r+0x2e6>
 8015d38:	2802      	cmp	r0, #2
 8015d3a:	f47f af20 	bne.w	8015b7e <__ssvfiscanf_r+0x4e>
 8015d3e:	e7cf      	b.n	8015ce0 <__ssvfiscanf_r+0x1b0>
 8015d40:	220a      	movs	r2, #10
 8015d42:	e7dd      	b.n	8015d00 <__ssvfiscanf_r+0x1d0>
 8015d44:	2300      	movs	r3, #0
 8015d46:	9342      	str	r3, [sp, #264]	; 0x108
 8015d48:	2303      	movs	r3, #3
 8015d4a:	e7de      	b.n	8015d0a <__ssvfiscanf_r+0x1da>
 8015d4c:	2308      	movs	r3, #8
 8015d4e:	9342      	str	r3, [sp, #264]	; 0x108
 8015d50:	2304      	movs	r3, #4
 8015d52:	e7da      	b.n	8015d0a <__ssvfiscanf_r+0x1da>
 8015d54:	4629      	mov	r1, r5
 8015d56:	4640      	mov	r0, r8
 8015d58:	f000 f9c6 	bl	80160e8 <__sccl>
 8015d5c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8015d5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015d62:	9341      	str	r3, [sp, #260]	; 0x104
 8015d64:	4605      	mov	r5, r0
 8015d66:	2301      	movs	r3, #1
 8015d68:	e7cf      	b.n	8015d0a <__ssvfiscanf_r+0x1da>
 8015d6a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8015d6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015d70:	9341      	str	r3, [sp, #260]	; 0x104
 8015d72:	2300      	movs	r3, #0
 8015d74:	e7c9      	b.n	8015d0a <__ssvfiscanf_r+0x1da>
 8015d76:	2302      	movs	r3, #2
 8015d78:	e7c7      	b.n	8015d0a <__ssvfiscanf_r+0x1da>
 8015d7a:	9841      	ldr	r0, [sp, #260]	; 0x104
 8015d7c:	06c3      	lsls	r3, r0, #27
 8015d7e:	f53f aefe 	bmi.w	8015b7e <__ssvfiscanf_r+0x4e>
 8015d82:	9b00      	ldr	r3, [sp, #0]
 8015d84:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8015d86:	1d19      	adds	r1, r3, #4
 8015d88:	9100      	str	r1, [sp, #0]
 8015d8a:	681b      	ldr	r3, [r3, #0]
 8015d8c:	f010 0f01 	tst.w	r0, #1
 8015d90:	bf14      	ite	ne
 8015d92:	801a      	strhne	r2, [r3, #0]
 8015d94:	601a      	streq	r2, [r3, #0]
 8015d96:	e6f2      	b.n	8015b7e <__ssvfiscanf_r+0x4e>
 8015d98:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015d9a:	4621      	mov	r1, r4
 8015d9c:	4630      	mov	r0, r6
 8015d9e:	4798      	blx	r3
 8015da0:	2800      	cmp	r0, #0
 8015da2:	d0b6      	beq.n	8015d12 <__ssvfiscanf_r+0x1e2>
 8015da4:	e79c      	b.n	8015ce0 <__ssvfiscanf_r+0x1b0>
 8015da6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8015da8:	3201      	adds	r2, #1
 8015daa:	9245      	str	r2, [sp, #276]	; 0x114
 8015dac:	6862      	ldr	r2, [r4, #4]
 8015dae:	3a01      	subs	r2, #1
 8015db0:	2a00      	cmp	r2, #0
 8015db2:	6062      	str	r2, [r4, #4]
 8015db4:	dd02      	ble.n	8015dbc <__ssvfiscanf_r+0x28c>
 8015db6:	3301      	adds	r3, #1
 8015db8:	6023      	str	r3, [r4, #0]
 8015dba:	e7ad      	b.n	8015d18 <__ssvfiscanf_r+0x1e8>
 8015dbc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015dbe:	4621      	mov	r1, r4
 8015dc0:	4630      	mov	r0, r6
 8015dc2:	4798      	blx	r3
 8015dc4:	2800      	cmp	r0, #0
 8015dc6:	d0a7      	beq.n	8015d18 <__ssvfiscanf_r+0x1e8>
 8015dc8:	e78a      	b.n	8015ce0 <__ssvfiscanf_r+0x1b0>
 8015dca:	2b04      	cmp	r3, #4
 8015dcc:	dc0e      	bgt.n	8015dec <__ssvfiscanf_r+0x2bc>
 8015dce:	466b      	mov	r3, sp
 8015dd0:	4622      	mov	r2, r4
 8015dd2:	a941      	add	r1, sp, #260	; 0x104
 8015dd4:	4630      	mov	r0, r6
 8015dd6:	f000 f87d 	bl	8015ed4 <_scanf_i>
 8015dda:	e7ab      	b.n	8015d34 <__ssvfiscanf_r+0x204>
 8015ddc:	08015a7b 	.word	0x08015a7b
 8015de0:	08015af5 	.word	0x08015af5
 8015de4:	0801939e 	.word	0x0801939e
 8015de8:	08019392 	.word	0x08019392
 8015dec:	4b0b      	ldr	r3, [pc, #44]	; (8015e1c <__ssvfiscanf_r+0x2ec>)
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	f43f aec5 	beq.w	8015b7e <__ssvfiscanf_r+0x4e>
 8015df4:	466b      	mov	r3, sp
 8015df6:	4622      	mov	r2, r4
 8015df8:	a941      	add	r1, sp, #260	; 0x104
 8015dfa:	4630      	mov	r0, r6
 8015dfc:	f3af 8000 	nop.w
 8015e00:	e798      	b.n	8015d34 <__ssvfiscanf_r+0x204>
 8015e02:	89a3      	ldrh	r3, [r4, #12]
 8015e04:	f013 0f40 	tst.w	r3, #64	; 0x40
 8015e08:	bf18      	it	ne
 8015e0a:	f04f 30ff 	movne.w	r0, #4294967295
 8015e0e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8015e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e16:	9844      	ldr	r0, [sp, #272]	; 0x110
 8015e18:	e7f9      	b.n	8015e0e <__ssvfiscanf_r+0x2de>
 8015e1a:	bf00      	nop
 8015e1c:	00000000 	.word	0x00000000

08015e20 <_scanf_chars>:
 8015e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015e24:	4615      	mov	r5, r2
 8015e26:	688a      	ldr	r2, [r1, #8]
 8015e28:	4680      	mov	r8, r0
 8015e2a:	460c      	mov	r4, r1
 8015e2c:	b932      	cbnz	r2, 8015e3c <_scanf_chars+0x1c>
 8015e2e:	698a      	ldr	r2, [r1, #24]
 8015e30:	2a00      	cmp	r2, #0
 8015e32:	bf0c      	ite	eq
 8015e34:	2201      	moveq	r2, #1
 8015e36:	f04f 32ff 	movne.w	r2, #4294967295
 8015e3a:	608a      	str	r2, [r1, #8]
 8015e3c:	6822      	ldr	r2, [r4, #0]
 8015e3e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8015ed0 <_scanf_chars+0xb0>
 8015e42:	06d1      	lsls	r1, r2, #27
 8015e44:	bf5f      	itttt	pl
 8015e46:	681a      	ldrpl	r2, [r3, #0]
 8015e48:	1d11      	addpl	r1, r2, #4
 8015e4a:	6019      	strpl	r1, [r3, #0]
 8015e4c:	6816      	ldrpl	r6, [r2, #0]
 8015e4e:	2700      	movs	r7, #0
 8015e50:	69a0      	ldr	r0, [r4, #24]
 8015e52:	b188      	cbz	r0, 8015e78 <_scanf_chars+0x58>
 8015e54:	2801      	cmp	r0, #1
 8015e56:	d107      	bne.n	8015e68 <_scanf_chars+0x48>
 8015e58:	682a      	ldr	r2, [r5, #0]
 8015e5a:	7811      	ldrb	r1, [r2, #0]
 8015e5c:	6962      	ldr	r2, [r4, #20]
 8015e5e:	5c52      	ldrb	r2, [r2, r1]
 8015e60:	b952      	cbnz	r2, 8015e78 <_scanf_chars+0x58>
 8015e62:	2f00      	cmp	r7, #0
 8015e64:	d031      	beq.n	8015eca <_scanf_chars+0xaa>
 8015e66:	e022      	b.n	8015eae <_scanf_chars+0x8e>
 8015e68:	2802      	cmp	r0, #2
 8015e6a:	d120      	bne.n	8015eae <_scanf_chars+0x8e>
 8015e6c:	682b      	ldr	r3, [r5, #0]
 8015e6e:	781b      	ldrb	r3, [r3, #0]
 8015e70:	f813 3009 	ldrb.w	r3, [r3, r9]
 8015e74:	071b      	lsls	r3, r3, #28
 8015e76:	d41a      	bmi.n	8015eae <_scanf_chars+0x8e>
 8015e78:	6823      	ldr	r3, [r4, #0]
 8015e7a:	06da      	lsls	r2, r3, #27
 8015e7c:	bf5e      	ittt	pl
 8015e7e:	682b      	ldrpl	r3, [r5, #0]
 8015e80:	781b      	ldrbpl	r3, [r3, #0]
 8015e82:	f806 3b01 	strbpl.w	r3, [r6], #1
 8015e86:	682a      	ldr	r2, [r5, #0]
 8015e88:	686b      	ldr	r3, [r5, #4]
 8015e8a:	3201      	adds	r2, #1
 8015e8c:	602a      	str	r2, [r5, #0]
 8015e8e:	68a2      	ldr	r2, [r4, #8]
 8015e90:	3b01      	subs	r3, #1
 8015e92:	3a01      	subs	r2, #1
 8015e94:	606b      	str	r3, [r5, #4]
 8015e96:	3701      	adds	r7, #1
 8015e98:	60a2      	str	r2, [r4, #8]
 8015e9a:	b142      	cbz	r2, 8015eae <_scanf_chars+0x8e>
 8015e9c:	2b00      	cmp	r3, #0
 8015e9e:	dcd7      	bgt.n	8015e50 <_scanf_chars+0x30>
 8015ea0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015ea4:	4629      	mov	r1, r5
 8015ea6:	4640      	mov	r0, r8
 8015ea8:	4798      	blx	r3
 8015eaa:	2800      	cmp	r0, #0
 8015eac:	d0d0      	beq.n	8015e50 <_scanf_chars+0x30>
 8015eae:	6823      	ldr	r3, [r4, #0]
 8015eb0:	f013 0310 	ands.w	r3, r3, #16
 8015eb4:	d105      	bne.n	8015ec2 <_scanf_chars+0xa2>
 8015eb6:	68e2      	ldr	r2, [r4, #12]
 8015eb8:	3201      	adds	r2, #1
 8015eba:	60e2      	str	r2, [r4, #12]
 8015ebc:	69a2      	ldr	r2, [r4, #24]
 8015ebe:	b102      	cbz	r2, 8015ec2 <_scanf_chars+0xa2>
 8015ec0:	7033      	strb	r3, [r6, #0]
 8015ec2:	6923      	ldr	r3, [r4, #16]
 8015ec4:	443b      	add	r3, r7
 8015ec6:	6123      	str	r3, [r4, #16]
 8015ec8:	2000      	movs	r0, #0
 8015eca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015ece:	bf00      	nop
 8015ed0:	0801939e 	.word	0x0801939e

08015ed4 <_scanf_i>:
 8015ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ed8:	4698      	mov	r8, r3
 8015eda:	4b76      	ldr	r3, [pc, #472]	; (80160b4 <_scanf_i+0x1e0>)
 8015edc:	460c      	mov	r4, r1
 8015ede:	4682      	mov	sl, r0
 8015ee0:	4616      	mov	r6, r2
 8015ee2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015ee6:	b087      	sub	sp, #28
 8015ee8:	ab03      	add	r3, sp, #12
 8015eea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8015eee:	4b72      	ldr	r3, [pc, #456]	; (80160b8 <_scanf_i+0x1e4>)
 8015ef0:	69a1      	ldr	r1, [r4, #24]
 8015ef2:	4a72      	ldr	r2, [pc, #456]	; (80160bc <_scanf_i+0x1e8>)
 8015ef4:	2903      	cmp	r1, #3
 8015ef6:	bf18      	it	ne
 8015ef8:	461a      	movne	r2, r3
 8015efa:	68a3      	ldr	r3, [r4, #8]
 8015efc:	9201      	str	r2, [sp, #4]
 8015efe:	1e5a      	subs	r2, r3, #1
 8015f00:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8015f04:	bf88      	it	hi
 8015f06:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8015f0a:	4627      	mov	r7, r4
 8015f0c:	bf82      	ittt	hi
 8015f0e:	eb03 0905 	addhi.w	r9, r3, r5
 8015f12:	f240 135d 	movwhi	r3, #349	; 0x15d
 8015f16:	60a3      	strhi	r3, [r4, #8]
 8015f18:	f857 3b1c 	ldr.w	r3, [r7], #28
 8015f1c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8015f20:	bf98      	it	ls
 8015f22:	f04f 0900 	movls.w	r9, #0
 8015f26:	6023      	str	r3, [r4, #0]
 8015f28:	463d      	mov	r5, r7
 8015f2a:	f04f 0b00 	mov.w	fp, #0
 8015f2e:	6831      	ldr	r1, [r6, #0]
 8015f30:	ab03      	add	r3, sp, #12
 8015f32:	7809      	ldrb	r1, [r1, #0]
 8015f34:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8015f38:	2202      	movs	r2, #2
 8015f3a:	f7ea f969 	bl	8000210 <memchr>
 8015f3e:	b328      	cbz	r0, 8015f8c <_scanf_i+0xb8>
 8015f40:	f1bb 0f01 	cmp.w	fp, #1
 8015f44:	d159      	bne.n	8015ffa <_scanf_i+0x126>
 8015f46:	6862      	ldr	r2, [r4, #4]
 8015f48:	b92a      	cbnz	r2, 8015f56 <_scanf_i+0x82>
 8015f4a:	6822      	ldr	r2, [r4, #0]
 8015f4c:	2308      	movs	r3, #8
 8015f4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8015f52:	6063      	str	r3, [r4, #4]
 8015f54:	6022      	str	r2, [r4, #0]
 8015f56:	6822      	ldr	r2, [r4, #0]
 8015f58:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8015f5c:	6022      	str	r2, [r4, #0]
 8015f5e:	68a2      	ldr	r2, [r4, #8]
 8015f60:	1e51      	subs	r1, r2, #1
 8015f62:	60a1      	str	r1, [r4, #8]
 8015f64:	b192      	cbz	r2, 8015f8c <_scanf_i+0xb8>
 8015f66:	6832      	ldr	r2, [r6, #0]
 8015f68:	1c51      	adds	r1, r2, #1
 8015f6a:	6031      	str	r1, [r6, #0]
 8015f6c:	7812      	ldrb	r2, [r2, #0]
 8015f6e:	f805 2b01 	strb.w	r2, [r5], #1
 8015f72:	6872      	ldr	r2, [r6, #4]
 8015f74:	3a01      	subs	r2, #1
 8015f76:	2a00      	cmp	r2, #0
 8015f78:	6072      	str	r2, [r6, #4]
 8015f7a:	dc07      	bgt.n	8015f8c <_scanf_i+0xb8>
 8015f7c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8015f80:	4631      	mov	r1, r6
 8015f82:	4650      	mov	r0, sl
 8015f84:	4790      	blx	r2
 8015f86:	2800      	cmp	r0, #0
 8015f88:	f040 8085 	bne.w	8016096 <_scanf_i+0x1c2>
 8015f8c:	f10b 0b01 	add.w	fp, fp, #1
 8015f90:	f1bb 0f03 	cmp.w	fp, #3
 8015f94:	d1cb      	bne.n	8015f2e <_scanf_i+0x5a>
 8015f96:	6863      	ldr	r3, [r4, #4]
 8015f98:	b90b      	cbnz	r3, 8015f9e <_scanf_i+0xca>
 8015f9a:	230a      	movs	r3, #10
 8015f9c:	6063      	str	r3, [r4, #4]
 8015f9e:	6863      	ldr	r3, [r4, #4]
 8015fa0:	4947      	ldr	r1, [pc, #284]	; (80160c0 <_scanf_i+0x1ec>)
 8015fa2:	6960      	ldr	r0, [r4, #20]
 8015fa4:	1ac9      	subs	r1, r1, r3
 8015fa6:	f000 f89f 	bl	80160e8 <__sccl>
 8015faa:	f04f 0b00 	mov.w	fp, #0
 8015fae:	68a3      	ldr	r3, [r4, #8]
 8015fb0:	6822      	ldr	r2, [r4, #0]
 8015fb2:	2b00      	cmp	r3, #0
 8015fb4:	d03d      	beq.n	8016032 <_scanf_i+0x15e>
 8015fb6:	6831      	ldr	r1, [r6, #0]
 8015fb8:	6960      	ldr	r0, [r4, #20]
 8015fba:	f891 c000 	ldrb.w	ip, [r1]
 8015fbe:	f810 000c 	ldrb.w	r0, [r0, ip]
 8015fc2:	2800      	cmp	r0, #0
 8015fc4:	d035      	beq.n	8016032 <_scanf_i+0x15e>
 8015fc6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8015fca:	d124      	bne.n	8016016 <_scanf_i+0x142>
 8015fcc:	0510      	lsls	r0, r2, #20
 8015fce:	d522      	bpl.n	8016016 <_scanf_i+0x142>
 8015fd0:	f10b 0b01 	add.w	fp, fp, #1
 8015fd4:	f1b9 0f00 	cmp.w	r9, #0
 8015fd8:	d003      	beq.n	8015fe2 <_scanf_i+0x10e>
 8015fda:	3301      	adds	r3, #1
 8015fdc:	f109 39ff 	add.w	r9, r9, #4294967295
 8015fe0:	60a3      	str	r3, [r4, #8]
 8015fe2:	6873      	ldr	r3, [r6, #4]
 8015fe4:	3b01      	subs	r3, #1
 8015fe6:	2b00      	cmp	r3, #0
 8015fe8:	6073      	str	r3, [r6, #4]
 8015fea:	dd1b      	ble.n	8016024 <_scanf_i+0x150>
 8015fec:	6833      	ldr	r3, [r6, #0]
 8015fee:	3301      	adds	r3, #1
 8015ff0:	6033      	str	r3, [r6, #0]
 8015ff2:	68a3      	ldr	r3, [r4, #8]
 8015ff4:	3b01      	subs	r3, #1
 8015ff6:	60a3      	str	r3, [r4, #8]
 8015ff8:	e7d9      	b.n	8015fae <_scanf_i+0xda>
 8015ffa:	f1bb 0f02 	cmp.w	fp, #2
 8015ffe:	d1ae      	bne.n	8015f5e <_scanf_i+0x8a>
 8016000:	6822      	ldr	r2, [r4, #0]
 8016002:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8016006:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801600a:	d1bf      	bne.n	8015f8c <_scanf_i+0xb8>
 801600c:	2310      	movs	r3, #16
 801600e:	6063      	str	r3, [r4, #4]
 8016010:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8016014:	e7a2      	b.n	8015f5c <_scanf_i+0x88>
 8016016:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801601a:	6022      	str	r2, [r4, #0]
 801601c:	780b      	ldrb	r3, [r1, #0]
 801601e:	f805 3b01 	strb.w	r3, [r5], #1
 8016022:	e7de      	b.n	8015fe2 <_scanf_i+0x10e>
 8016024:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016028:	4631      	mov	r1, r6
 801602a:	4650      	mov	r0, sl
 801602c:	4798      	blx	r3
 801602e:	2800      	cmp	r0, #0
 8016030:	d0df      	beq.n	8015ff2 <_scanf_i+0x11e>
 8016032:	6823      	ldr	r3, [r4, #0]
 8016034:	05db      	lsls	r3, r3, #23
 8016036:	d50d      	bpl.n	8016054 <_scanf_i+0x180>
 8016038:	42bd      	cmp	r5, r7
 801603a:	d909      	bls.n	8016050 <_scanf_i+0x17c>
 801603c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8016040:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016044:	4632      	mov	r2, r6
 8016046:	4650      	mov	r0, sl
 8016048:	4798      	blx	r3
 801604a:	f105 39ff 	add.w	r9, r5, #4294967295
 801604e:	464d      	mov	r5, r9
 8016050:	42bd      	cmp	r5, r7
 8016052:	d02d      	beq.n	80160b0 <_scanf_i+0x1dc>
 8016054:	6822      	ldr	r2, [r4, #0]
 8016056:	f012 0210 	ands.w	r2, r2, #16
 801605a:	d113      	bne.n	8016084 <_scanf_i+0x1b0>
 801605c:	702a      	strb	r2, [r5, #0]
 801605e:	6863      	ldr	r3, [r4, #4]
 8016060:	9e01      	ldr	r6, [sp, #4]
 8016062:	4639      	mov	r1, r7
 8016064:	4650      	mov	r0, sl
 8016066:	47b0      	blx	r6
 8016068:	6821      	ldr	r1, [r4, #0]
 801606a:	f8d8 3000 	ldr.w	r3, [r8]
 801606e:	f011 0f20 	tst.w	r1, #32
 8016072:	d013      	beq.n	801609c <_scanf_i+0x1c8>
 8016074:	1d1a      	adds	r2, r3, #4
 8016076:	f8c8 2000 	str.w	r2, [r8]
 801607a:	681b      	ldr	r3, [r3, #0]
 801607c:	6018      	str	r0, [r3, #0]
 801607e:	68e3      	ldr	r3, [r4, #12]
 8016080:	3301      	adds	r3, #1
 8016082:	60e3      	str	r3, [r4, #12]
 8016084:	1bed      	subs	r5, r5, r7
 8016086:	44ab      	add	fp, r5
 8016088:	6925      	ldr	r5, [r4, #16]
 801608a:	445d      	add	r5, fp
 801608c:	6125      	str	r5, [r4, #16]
 801608e:	2000      	movs	r0, #0
 8016090:	b007      	add	sp, #28
 8016092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016096:	f04f 0b00 	mov.w	fp, #0
 801609a:	e7ca      	b.n	8016032 <_scanf_i+0x15e>
 801609c:	1d1a      	adds	r2, r3, #4
 801609e:	f8c8 2000 	str.w	r2, [r8]
 80160a2:	681b      	ldr	r3, [r3, #0]
 80160a4:	f011 0f01 	tst.w	r1, #1
 80160a8:	bf14      	ite	ne
 80160aa:	8018      	strhne	r0, [r3, #0]
 80160ac:	6018      	streq	r0, [r3, #0]
 80160ae:	e7e6      	b.n	801607e <_scanf_i+0x1aa>
 80160b0:	2001      	movs	r0, #1
 80160b2:	e7ed      	b.n	8016090 <_scanf_i+0x1bc>
 80160b4:	08018e48 	.word	0x08018e48
 80160b8:	08015369 	.word	0x08015369
 80160bc:	080162e5 	.word	0x080162e5
 80160c0:	08019519 	.word	0x08019519

080160c4 <_read_r>:
 80160c4:	b538      	push	{r3, r4, r5, lr}
 80160c6:	4d07      	ldr	r5, [pc, #28]	; (80160e4 <_read_r+0x20>)
 80160c8:	4604      	mov	r4, r0
 80160ca:	4608      	mov	r0, r1
 80160cc:	4611      	mov	r1, r2
 80160ce:	2200      	movs	r2, #0
 80160d0:	602a      	str	r2, [r5, #0]
 80160d2:	461a      	mov	r2, r3
 80160d4:	f7ef ff76 	bl	8005fc4 <_read>
 80160d8:	1c43      	adds	r3, r0, #1
 80160da:	d102      	bne.n	80160e2 <_read_r+0x1e>
 80160dc:	682b      	ldr	r3, [r5, #0]
 80160de:	b103      	cbz	r3, 80160e2 <_read_r+0x1e>
 80160e0:	6023      	str	r3, [r4, #0]
 80160e2:	bd38      	pop	{r3, r4, r5, pc}
 80160e4:	20007b30 	.word	0x20007b30

080160e8 <__sccl>:
 80160e8:	b570      	push	{r4, r5, r6, lr}
 80160ea:	780b      	ldrb	r3, [r1, #0]
 80160ec:	4604      	mov	r4, r0
 80160ee:	2b5e      	cmp	r3, #94	; 0x5e
 80160f0:	bf0b      	itete	eq
 80160f2:	784b      	ldrbeq	r3, [r1, #1]
 80160f4:	1c48      	addne	r0, r1, #1
 80160f6:	1c88      	addeq	r0, r1, #2
 80160f8:	2200      	movne	r2, #0
 80160fa:	bf08      	it	eq
 80160fc:	2201      	moveq	r2, #1
 80160fe:	1e61      	subs	r1, r4, #1
 8016100:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8016104:	f801 2f01 	strb.w	r2, [r1, #1]!
 8016108:	42a9      	cmp	r1, r5
 801610a:	d1fb      	bne.n	8016104 <__sccl+0x1c>
 801610c:	b90b      	cbnz	r3, 8016112 <__sccl+0x2a>
 801610e:	3801      	subs	r0, #1
 8016110:	bd70      	pop	{r4, r5, r6, pc}
 8016112:	f082 0201 	eor.w	r2, r2, #1
 8016116:	54e2      	strb	r2, [r4, r3]
 8016118:	4605      	mov	r5, r0
 801611a:	4628      	mov	r0, r5
 801611c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8016120:	292d      	cmp	r1, #45	; 0x2d
 8016122:	d006      	beq.n	8016132 <__sccl+0x4a>
 8016124:	295d      	cmp	r1, #93	; 0x5d
 8016126:	d0f3      	beq.n	8016110 <__sccl+0x28>
 8016128:	b909      	cbnz	r1, 801612e <__sccl+0x46>
 801612a:	4628      	mov	r0, r5
 801612c:	e7f0      	b.n	8016110 <__sccl+0x28>
 801612e:	460b      	mov	r3, r1
 8016130:	e7f1      	b.n	8016116 <__sccl+0x2e>
 8016132:	786e      	ldrb	r6, [r5, #1]
 8016134:	2e5d      	cmp	r6, #93	; 0x5d
 8016136:	d0fa      	beq.n	801612e <__sccl+0x46>
 8016138:	42b3      	cmp	r3, r6
 801613a:	dcf8      	bgt.n	801612e <__sccl+0x46>
 801613c:	3502      	adds	r5, #2
 801613e:	4619      	mov	r1, r3
 8016140:	3101      	adds	r1, #1
 8016142:	428e      	cmp	r6, r1
 8016144:	5462      	strb	r2, [r4, r1]
 8016146:	dcfb      	bgt.n	8016140 <__sccl+0x58>
 8016148:	1af1      	subs	r1, r6, r3
 801614a:	3901      	subs	r1, #1
 801614c:	1c58      	adds	r0, r3, #1
 801614e:	42b3      	cmp	r3, r6
 8016150:	bfa8      	it	ge
 8016152:	2100      	movge	r1, #0
 8016154:	1843      	adds	r3, r0, r1
 8016156:	e7e0      	b.n	801611a <__sccl+0x32>

08016158 <_raise_r>:
 8016158:	291f      	cmp	r1, #31
 801615a:	b538      	push	{r3, r4, r5, lr}
 801615c:	4604      	mov	r4, r0
 801615e:	460d      	mov	r5, r1
 8016160:	d904      	bls.n	801616c <_raise_r+0x14>
 8016162:	2316      	movs	r3, #22
 8016164:	6003      	str	r3, [r0, #0]
 8016166:	f04f 30ff 	mov.w	r0, #4294967295
 801616a:	bd38      	pop	{r3, r4, r5, pc}
 801616c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801616e:	b112      	cbz	r2, 8016176 <_raise_r+0x1e>
 8016170:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016174:	b94b      	cbnz	r3, 801618a <_raise_r+0x32>
 8016176:	4620      	mov	r0, r4
 8016178:	f000 f830 	bl	80161dc <_getpid_r>
 801617c:	462a      	mov	r2, r5
 801617e:	4601      	mov	r1, r0
 8016180:	4620      	mov	r0, r4
 8016182:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016186:	f000 b817 	b.w	80161b8 <_kill_r>
 801618a:	2b01      	cmp	r3, #1
 801618c:	d00a      	beq.n	80161a4 <_raise_r+0x4c>
 801618e:	1c59      	adds	r1, r3, #1
 8016190:	d103      	bne.n	801619a <_raise_r+0x42>
 8016192:	2316      	movs	r3, #22
 8016194:	6003      	str	r3, [r0, #0]
 8016196:	2001      	movs	r0, #1
 8016198:	e7e7      	b.n	801616a <_raise_r+0x12>
 801619a:	2400      	movs	r4, #0
 801619c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80161a0:	4628      	mov	r0, r5
 80161a2:	4798      	blx	r3
 80161a4:	2000      	movs	r0, #0
 80161a6:	e7e0      	b.n	801616a <_raise_r+0x12>

080161a8 <raise>:
 80161a8:	4b02      	ldr	r3, [pc, #8]	; (80161b4 <raise+0xc>)
 80161aa:	4601      	mov	r1, r0
 80161ac:	6818      	ldr	r0, [r3, #0]
 80161ae:	f7ff bfd3 	b.w	8016158 <_raise_r>
 80161b2:	bf00      	nop
 80161b4:	20000020 	.word	0x20000020

080161b8 <_kill_r>:
 80161b8:	b538      	push	{r3, r4, r5, lr}
 80161ba:	4d07      	ldr	r5, [pc, #28]	; (80161d8 <_kill_r+0x20>)
 80161bc:	2300      	movs	r3, #0
 80161be:	4604      	mov	r4, r0
 80161c0:	4608      	mov	r0, r1
 80161c2:	4611      	mov	r1, r2
 80161c4:	602b      	str	r3, [r5, #0]
 80161c6:	f7ef fee3 	bl	8005f90 <_kill>
 80161ca:	1c43      	adds	r3, r0, #1
 80161cc:	d102      	bne.n	80161d4 <_kill_r+0x1c>
 80161ce:	682b      	ldr	r3, [r5, #0]
 80161d0:	b103      	cbz	r3, 80161d4 <_kill_r+0x1c>
 80161d2:	6023      	str	r3, [r4, #0]
 80161d4:	bd38      	pop	{r3, r4, r5, pc}
 80161d6:	bf00      	nop
 80161d8:	20007b30 	.word	0x20007b30

080161dc <_getpid_r>:
 80161dc:	f7ef bed0 	b.w	8005f80 <_getpid>

080161e0 <_strtol_l.constprop.0>:
 80161e0:	2b01      	cmp	r3, #1
 80161e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80161e6:	d001      	beq.n	80161ec <_strtol_l.constprop.0+0xc>
 80161e8:	2b24      	cmp	r3, #36	; 0x24
 80161ea:	d906      	bls.n	80161fa <_strtol_l.constprop.0+0x1a>
 80161ec:	f7fa fc16 	bl	8010a1c <__errno>
 80161f0:	2316      	movs	r3, #22
 80161f2:	6003      	str	r3, [r0, #0]
 80161f4:	2000      	movs	r0, #0
 80161f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80161fa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80162e0 <_strtol_l.constprop.0+0x100>
 80161fe:	460d      	mov	r5, r1
 8016200:	462e      	mov	r6, r5
 8016202:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016206:	f814 700c 	ldrb.w	r7, [r4, ip]
 801620a:	f017 0708 	ands.w	r7, r7, #8
 801620e:	d1f7      	bne.n	8016200 <_strtol_l.constprop.0+0x20>
 8016210:	2c2d      	cmp	r4, #45	; 0x2d
 8016212:	d132      	bne.n	801627a <_strtol_l.constprop.0+0x9a>
 8016214:	782c      	ldrb	r4, [r5, #0]
 8016216:	2701      	movs	r7, #1
 8016218:	1cb5      	adds	r5, r6, #2
 801621a:	2b00      	cmp	r3, #0
 801621c:	d05b      	beq.n	80162d6 <_strtol_l.constprop.0+0xf6>
 801621e:	2b10      	cmp	r3, #16
 8016220:	d109      	bne.n	8016236 <_strtol_l.constprop.0+0x56>
 8016222:	2c30      	cmp	r4, #48	; 0x30
 8016224:	d107      	bne.n	8016236 <_strtol_l.constprop.0+0x56>
 8016226:	782c      	ldrb	r4, [r5, #0]
 8016228:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801622c:	2c58      	cmp	r4, #88	; 0x58
 801622e:	d14d      	bne.n	80162cc <_strtol_l.constprop.0+0xec>
 8016230:	786c      	ldrb	r4, [r5, #1]
 8016232:	2310      	movs	r3, #16
 8016234:	3502      	adds	r5, #2
 8016236:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801623a:	f108 38ff 	add.w	r8, r8, #4294967295
 801623e:	f04f 0c00 	mov.w	ip, #0
 8016242:	fbb8 f9f3 	udiv	r9, r8, r3
 8016246:	4666      	mov	r6, ip
 8016248:	fb03 8a19 	mls	sl, r3, r9, r8
 801624c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8016250:	f1be 0f09 	cmp.w	lr, #9
 8016254:	d816      	bhi.n	8016284 <_strtol_l.constprop.0+0xa4>
 8016256:	4674      	mov	r4, lr
 8016258:	42a3      	cmp	r3, r4
 801625a:	dd24      	ble.n	80162a6 <_strtol_l.constprop.0+0xc6>
 801625c:	f1bc 0f00 	cmp.w	ip, #0
 8016260:	db1e      	blt.n	80162a0 <_strtol_l.constprop.0+0xc0>
 8016262:	45b1      	cmp	r9, r6
 8016264:	d31c      	bcc.n	80162a0 <_strtol_l.constprop.0+0xc0>
 8016266:	d101      	bne.n	801626c <_strtol_l.constprop.0+0x8c>
 8016268:	45a2      	cmp	sl, r4
 801626a:	db19      	blt.n	80162a0 <_strtol_l.constprop.0+0xc0>
 801626c:	fb06 4603 	mla	r6, r6, r3, r4
 8016270:	f04f 0c01 	mov.w	ip, #1
 8016274:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016278:	e7e8      	b.n	801624c <_strtol_l.constprop.0+0x6c>
 801627a:	2c2b      	cmp	r4, #43	; 0x2b
 801627c:	bf04      	itt	eq
 801627e:	782c      	ldrbeq	r4, [r5, #0]
 8016280:	1cb5      	addeq	r5, r6, #2
 8016282:	e7ca      	b.n	801621a <_strtol_l.constprop.0+0x3a>
 8016284:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8016288:	f1be 0f19 	cmp.w	lr, #25
 801628c:	d801      	bhi.n	8016292 <_strtol_l.constprop.0+0xb2>
 801628e:	3c37      	subs	r4, #55	; 0x37
 8016290:	e7e2      	b.n	8016258 <_strtol_l.constprop.0+0x78>
 8016292:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8016296:	f1be 0f19 	cmp.w	lr, #25
 801629a:	d804      	bhi.n	80162a6 <_strtol_l.constprop.0+0xc6>
 801629c:	3c57      	subs	r4, #87	; 0x57
 801629e:	e7db      	b.n	8016258 <_strtol_l.constprop.0+0x78>
 80162a0:	f04f 3cff 	mov.w	ip, #4294967295
 80162a4:	e7e6      	b.n	8016274 <_strtol_l.constprop.0+0x94>
 80162a6:	f1bc 0f00 	cmp.w	ip, #0
 80162aa:	da05      	bge.n	80162b8 <_strtol_l.constprop.0+0xd8>
 80162ac:	2322      	movs	r3, #34	; 0x22
 80162ae:	6003      	str	r3, [r0, #0]
 80162b0:	4646      	mov	r6, r8
 80162b2:	b942      	cbnz	r2, 80162c6 <_strtol_l.constprop.0+0xe6>
 80162b4:	4630      	mov	r0, r6
 80162b6:	e79e      	b.n	80161f6 <_strtol_l.constprop.0+0x16>
 80162b8:	b107      	cbz	r7, 80162bc <_strtol_l.constprop.0+0xdc>
 80162ba:	4276      	negs	r6, r6
 80162bc:	2a00      	cmp	r2, #0
 80162be:	d0f9      	beq.n	80162b4 <_strtol_l.constprop.0+0xd4>
 80162c0:	f1bc 0f00 	cmp.w	ip, #0
 80162c4:	d000      	beq.n	80162c8 <_strtol_l.constprop.0+0xe8>
 80162c6:	1e69      	subs	r1, r5, #1
 80162c8:	6011      	str	r1, [r2, #0]
 80162ca:	e7f3      	b.n	80162b4 <_strtol_l.constprop.0+0xd4>
 80162cc:	2430      	movs	r4, #48	; 0x30
 80162ce:	2b00      	cmp	r3, #0
 80162d0:	d1b1      	bne.n	8016236 <_strtol_l.constprop.0+0x56>
 80162d2:	2308      	movs	r3, #8
 80162d4:	e7af      	b.n	8016236 <_strtol_l.constprop.0+0x56>
 80162d6:	2c30      	cmp	r4, #48	; 0x30
 80162d8:	d0a5      	beq.n	8016226 <_strtol_l.constprop.0+0x46>
 80162da:	230a      	movs	r3, #10
 80162dc:	e7ab      	b.n	8016236 <_strtol_l.constprop.0+0x56>
 80162de:	bf00      	nop
 80162e0:	0801939e 	.word	0x0801939e

080162e4 <_strtol_r>:
 80162e4:	f7ff bf7c 	b.w	80161e0 <_strtol_l.constprop.0>

080162e8 <__submore>:
 80162e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80162ec:	460c      	mov	r4, r1
 80162ee:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80162f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80162f4:	4299      	cmp	r1, r3
 80162f6:	d11d      	bne.n	8016334 <__submore+0x4c>
 80162f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80162fc:	f7fa ff78 	bl	80111f0 <_malloc_r>
 8016300:	b918      	cbnz	r0, 801630a <__submore+0x22>
 8016302:	f04f 30ff 	mov.w	r0, #4294967295
 8016306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801630a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801630e:	63a3      	str	r3, [r4, #56]	; 0x38
 8016310:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8016314:	6360      	str	r0, [r4, #52]	; 0x34
 8016316:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801631a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801631e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8016322:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8016326:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801632a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801632e:	6020      	str	r0, [r4, #0]
 8016330:	2000      	movs	r0, #0
 8016332:	e7e8      	b.n	8016306 <__submore+0x1e>
 8016334:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8016336:	0077      	lsls	r7, r6, #1
 8016338:	463a      	mov	r2, r7
 801633a:	f7ff fb6f 	bl	8015a1c <_realloc_r>
 801633e:	4605      	mov	r5, r0
 8016340:	2800      	cmp	r0, #0
 8016342:	d0de      	beq.n	8016302 <__submore+0x1a>
 8016344:	eb00 0806 	add.w	r8, r0, r6
 8016348:	4601      	mov	r1, r0
 801634a:	4632      	mov	r2, r6
 801634c:	4640      	mov	r0, r8
 801634e:	f7fd ff6e 	bl	801422e <memcpy>
 8016352:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8016356:	f8c4 8000 	str.w	r8, [r4]
 801635a:	e7e9      	b.n	8016330 <__submore+0x48>

0801635c <_fstat_r>:
 801635c:	b538      	push	{r3, r4, r5, lr}
 801635e:	4d07      	ldr	r5, [pc, #28]	; (801637c <_fstat_r+0x20>)
 8016360:	2300      	movs	r3, #0
 8016362:	4604      	mov	r4, r0
 8016364:	4608      	mov	r0, r1
 8016366:	4611      	mov	r1, r2
 8016368:	602b      	str	r3, [r5, #0]
 801636a:	f7ef fe70 	bl	800604e <_fstat>
 801636e:	1c43      	adds	r3, r0, #1
 8016370:	d102      	bne.n	8016378 <_fstat_r+0x1c>
 8016372:	682b      	ldr	r3, [r5, #0]
 8016374:	b103      	cbz	r3, 8016378 <_fstat_r+0x1c>
 8016376:	6023      	str	r3, [r4, #0]
 8016378:	bd38      	pop	{r3, r4, r5, pc}
 801637a:	bf00      	nop
 801637c:	20007b30 	.word	0x20007b30

08016380 <_isatty_r>:
 8016380:	b538      	push	{r3, r4, r5, lr}
 8016382:	4d06      	ldr	r5, [pc, #24]	; (801639c <_isatty_r+0x1c>)
 8016384:	2300      	movs	r3, #0
 8016386:	4604      	mov	r4, r0
 8016388:	4608      	mov	r0, r1
 801638a:	602b      	str	r3, [r5, #0]
 801638c:	f7ef fe6f 	bl	800606e <_isatty>
 8016390:	1c43      	adds	r3, r0, #1
 8016392:	d102      	bne.n	801639a <_isatty_r+0x1a>
 8016394:	682b      	ldr	r3, [r5, #0]
 8016396:	b103      	cbz	r3, 801639a <_isatty_r+0x1a>
 8016398:	6023      	str	r3, [r4, #0]
 801639a:	bd38      	pop	{r3, r4, r5, pc}
 801639c:	20007b30 	.word	0x20007b30

080163a0 <_malloc_usable_size_r>:
 80163a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80163a4:	1f18      	subs	r0, r3, #4
 80163a6:	2b00      	cmp	r3, #0
 80163a8:	bfbc      	itt	lt
 80163aa:	580b      	ldrlt	r3, [r1, r0]
 80163ac:	18c0      	addlt	r0, r0, r3
 80163ae:	4770      	bx	lr

080163b0 <cos>:
 80163b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80163b2:	ec53 2b10 	vmov	r2, r3, d0
 80163b6:	4826      	ldr	r0, [pc, #152]	; (8016450 <cos+0xa0>)
 80163b8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80163bc:	4281      	cmp	r1, r0
 80163be:	dc06      	bgt.n	80163ce <cos+0x1e>
 80163c0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8016448 <cos+0x98>
 80163c4:	b005      	add	sp, #20
 80163c6:	f85d eb04 	ldr.w	lr, [sp], #4
 80163ca:	f000 bc59 	b.w	8016c80 <__kernel_cos>
 80163ce:	4821      	ldr	r0, [pc, #132]	; (8016454 <cos+0xa4>)
 80163d0:	4281      	cmp	r1, r0
 80163d2:	dd09      	ble.n	80163e8 <cos+0x38>
 80163d4:	ee10 0a10 	vmov	r0, s0
 80163d8:	4619      	mov	r1, r3
 80163da:	f7e9 ff6d 	bl	80002b8 <__aeabi_dsub>
 80163de:	ec41 0b10 	vmov	d0, r0, r1
 80163e2:	b005      	add	sp, #20
 80163e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80163e8:	4668      	mov	r0, sp
 80163ea:	f000 f989 	bl	8016700 <__ieee754_rem_pio2>
 80163ee:	f000 0003 	and.w	r0, r0, #3
 80163f2:	2801      	cmp	r0, #1
 80163f4:	d00b      	beq.n	801640e <cos+0x5e>
 80163f6:	2802      	cmp	r0, #2
 80163f8:	d016      	beq.n	8016428 <cos+0x78>
 80163fa:	b9e0      	cbnz	r0, 8016436 <cos+0x86>
 80163fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8016400:	ed9d 0b00 	vldr	d0, [sp]
 8016404:	f000 fc3c 	bl	8016c80 <__kernel_cos>
 8016408:	ec51 0b10 	vmov	r0, r1, d0
 801640c:	e7e7      	b.n	80163de <cos+0x2e>
 801640e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8016412:	ed9d 0b00 	vldr	d0, [sp]
 8016416:	f001 f84b 	bl	80174b0 <__kernel_sin>
 801641a:	ec53 2b10 	vmov	r2, r3, d0
 801641e:	ee10 0a10 	vmov	r0, s0
 8016422:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8016426:	e7da      	b.n	80163de <cos+0x2e>
 8016428:	ed9d 1b02 	vldr	d1, [sp, #8]
 801642c:	ed9d 0b00 	vldr	d0, [sp]
 8016430:	f000 fc26 	bl	8016c80 <__kernel_cos>
 8016434:	e7f1      	b.n	801641a <cos+0x6a>
 8016436:	ed9d 1b02 	vldr	d1, [sp, #8]
 801643a:	ed9d 0b00 	vldr	d0, [sp]
 801643e:	2001      	movs	r0, #1
 8016440:	f001 f836 	bl	80174b0 <__kernel_sin>
 8016444:	e7e0      	b.n	8016408 <cos+0x58>
 8016446:	bf00      	nop
	...
 8016450:	3fe921fb 	.word	0x3fe921fb
 8016454:	7fefffff 	.word	0x7fefffff

08016458 <sin>:
 8016458:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801645a:	ec53 2b10 	vmov	r2, r3, d0
 801645e:	4828      	ldr	r0, [pc, #160]	; (8016500 <sin+0xa8>)
 8016460:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8016464:	4281      	cmp	r1, r0
 8016466:	dc07      	bgt.n	8016478 <sin+0x20>
 8016468:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80164f8 <sin+0xa0>
 801646c:	2000      	movs	r0, #0
 801646e:	b005      	add	sp, #20
 8016470:	f85d eb04 	ldr.w	lr, [sp], #4
 8016474:	f001 b81c 	b.w	80174b0 <__kernel_sin>
 8016478:	4822      	ldr	r0, [pc, #136]	; (8016504 <sin+0xac>)
 801647a:	4281      	cmp	r1, r0
 801647c:	dd09      	ble.n	8016492 <sin+0x3a>
 801647e:	ee10 0a10 	vmov	r0, s0
 8016482:	4619      	mov	r1, r3
 8016484:	f7e9 ff18 	bl	80002b8 <__aeabi_dsub>
 8016488:	ec41 0b10 	vmov	d0, r0, r1
 801648c:	b005      	add	sp, #20
 801648e:	f85d fb04 	ldr.w	pc, [sp], #4
 8016492:	4668      	mov	r0, sp
 8016494:	f000 f934 	bl	8016700 <__ieee754_rem_pio2>
 8016498:	f000 0003 	and.w	r0, r0, #3
 801649c:	2801      	cmp	r0, #1
 801649e:	d00c      	beq.n	80164ba <sin+0x62>
 80164a0:	2802      	cmp	r0, #2
 80164a2:	d011      	beq.n	80164c8 <sin+0x70>
 80164a4:	b9f0      	cbnz	r0, 80164e4 <sin+0x8c>
 80164a6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80164aa:	ed9d 0b00 	vldr	d0, [sp]
 80164ae:	2001      	movs	r0, #1
 80164b0:	f000 fffe 	bl	80174b0 <__kernel_sin>
 80164b4:	ec51 0b10 	vmov	r0, r1, d0
 80164b8:	e7e6      	b.n	8016488 <sin+0x30>
 80164ba:	ed9d 1b02 	vldr	d1, [sp, #8]
 80164be:	ed9d 0b00 	vldr	d0, [sp]
 80164c2:	f000 fbdd 	bl	8016c80 <__kernel_cos>
 80164c6:	e7f5      	b.n	80164b4 <sin+0x5c>
 80164c8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80164cc:	ed9d 0b00 	vldr	d0, [sp]
 80164d0:	2001      	movs	r0, #1
 80164d2:	f000 ffed 	bl	80174b0 <__kernel_sin>
 80164d6:	ec53 2b10 	vmov	r2, r3, d0
 80164da:	ee10 0a10 	vmov	r0, s0
 80164de:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80164e2:	e7d1      	b.n	8016488 <sin+0x30>
 80164e4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80164e8:	ed9d 0b00 	vldr	d0, [sp]
 80164ec:	f000 fbc8 	bl	8016c80 <__kernel_cos>
 80164f0:	e7f1      	b.n	80164d6 <sin+0x7e>
 80164f2:	bf00      	nop
 80164f4:	f3af 8000 	nop.w
	...
 8016500:	3fe921fb 	.word	0x3fe921fb
 8016504:	7fefffff 	.word	0x7fefffff

08016508 <atan2>:
 8016508:	f000 b82e 	b.w	8016568 <__ieee754_atan2>

0801650c <sqrt>:
 801650c:	b538      	push	{r3, r4, r5, lr}
 801650e:	ed2d 8b02 	vpush	{d8}
 8016512:	ec55 4b10 	vmov	r4, r5, d0
 8016516:	f000 faff 	bl	8016b18 <__ieee754_sqrt>
 801651a:	4622      	mov	r2, r4
 801651c:	462b      	mov	r3, r5
 801651e:	4620      	mov	r0, r4
 8016520:	4629      	mov	r1, r5
 8016522:	eeb0 8a40 	vmov.f32	s16, s0
 8016526:	eef0 8a60 	vmov.f32	s17, s1
 801652a:	f7ea fb17 	bl	8000b5c <__aeabi_dcmpun>
 801652e:	b990      	cbnz	r0, 8016556 <sqrt+0x4a>
 8016530:	2200      	movs	r2, #0
 8016532:	2300      	movs	r3, #0
 8016534:	4620      	mov	r0, r4
 8016536:	4629      	mov	r1, r5
 8016538:	f7ea fae8 	bl	8000b0c <__aeabi_dcmplt>
 801653c:	b158      	cbz	r0, 8016556 <sqrt+0x4a>
 801653e:	f7fa fa6d 	bl	8010a1c <__errno>
 8016542:	2321      	movs	r3, #33	; 0x21
 8016544:	6003      	str	r3, [r0, #0]
 8016546:	2200      	movs	r2, #0
 8016548:	2300      	movs	r3, #0
 801654a:	4610      	mov	r0, r2
 801654c:	4619      	mov	r1, r3
 801654e:	f7ea f995 	bl	800087c <__aeabi_ddiv>
 8016552:	ec41 0b18 	vmov	d8, r0, r1
 8016556:	eeb0 0a48 	vmov.f32	s0, s16
 801655a:	eef0 0a68 	vmov.f32	s1, s17
 801655e:	ecbd 8b02 	vpop	{d8}
 8016562:	bd38      	pop	{r3, r4, r5, pc}
 8016564:	0000      	movs	r0, r0
	...

08016568 <__ieee754_atan2>:
 8016568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801656c:	ec57 6b11 	vmov	r6, r7, d1
 8016570:	4273      	negs	r3, r6
 8016572:	f8df e184 	ldr.w	lr, [pc, #388]	; 80166f8 <__ieee754_atan2+0x190>
 8016576:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801657a:	4333      	orrs	r3, r6
 801657c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8016580:	4573      	cmp	r3, lr
 8016582:	ec51 0b10 	vmov	r0, r1, d0
 8016586:	ee11 8a10 	vmov	r8, s2
 801658a:	d80a      	bhi.n	80165a2 <__ieee754_atan2+0x3a>
 801658c:	4244      	negs	r4, r0
 801658e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016592:	4304      	orrs	r4, r0
 8016594:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8016598:	4574      	cmp	r4, lr
 801659a:	ee10 9a10 	vmov	r9, s0
 801659e:	468c      	mov	ip, r1
 80165a0:	d907      	bls.n	80165b2 <__ieee754_atan2+0x4a>
 80165a2:	4632      	mov	r2, r6
 80165a4:	463b      	mov	r3, r7
 80165a6:	f7e9 fe89 	bl	80002bc <__adddf3>
 80165aa:	ec41 0b10 	vmov	d0, r0, r1
 80165ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80165b2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80165b6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80165ba:	4334      	orrs	r4, r6
 80165bc:	d103      	bne.n	80165c6 <__ieee754_atan2+0x5e>
 80165be:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80165c2:	f001 b835 	b.w	8017630 <atan>
 80165c6:	17bc      	asrs	r4, r7, #30
 80165c8:	f004 0402 	and.w	r4, r4, #2
 80165cc:	ea53 0909 	orrs.w	r9, r3, r9
 80165d0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80165d4:	d107      	bne.n	80165e6 <__ieee754_atan2+0x7e>
 80165d6:	2c02      	cmp	r4, #2
 80165d8:	d060      	beq.n	801669c <__ieee754_atan2+0x134>
 80165da:	2c03      	cmp	r4, #3
 80165dc:	d1e5      	bne.n	80165aa <__ieee754_atan2+0x42>
 80165de:	a142      	add	r1, pc, #264	; (adr r1, 80166e8 <__ieee754_atan2+0x180>)
 80165e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80165e4:	e7e1      	b.n	80165aa <__ieee754_atan2+0x42>
 80165e6:	ea52 0808 	orrs.w	r8, r2, r8
 80165ea:	d106      	bne.n	80165fa <__ieee754_atan2+0x92>
 80165ec:	f1bc 0f00 	cmp.w	ip, #0
 80165f0:	da5f      	bge.n	80166b2 <__ieee754_atan2+0x14a>
 80165f2:	a13f      	add	r1, pc, #252	; (adr r1, 80166f0 <__ieee754_atan2+0x188>)
 80165f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80165f8:	e7d7      	b.n	80165aa <__ieee754_atan2+0x42>
 80165fa:	4572      	cmp	r2, lr
 80165fc:	d10f      	bne.n	801661e <__ieee754_atan2+0xb6>
 80165fe:	4293      	cmp	r3, r2
 8016600:	f104 34ff 	add.w	r4, r4, #4294967295
 8016604:	d107      	bne.n	8016616 <__ieee754_atan2+0xae>
 8016606:	2c02      	cmp	r4, #2
 8016608:	d84c      	bhi.n	80166a4 <__ieee754_atan2+0x13c>
 801660a:	4b35      	ldr	r3, [pc, #212]	; (80166e0 <__ieee754_atan2+0x178>)
 801660c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8016610:	e9d4 0100 	ldrd	r0, r1, [r4]
 8016614:	e7c9      	b.n	80165aa <__ieee754_atan2+0x42>
 8016616:	2c02      	cmp	r4, #2
 8016618:	d848      	bhi.n	80166ac <__ieee754_atan2+0x144>
 801661a:	4b32      	ldr	r3, [pc, #200]	; (80166e4 <__ieee754_atan2+0x17c>)
 801661c:	e7f6      	b.n	801660c <__ieee754_atan2+0xa4>
 801661e:	4573      	cmp	r3, lr
 8016620:	d0e4      	beq.n	80165ec <__ieee754_atan2+0x84>
 8016622:	1a9b      	subs	r3, r3, r2
 8016624:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8016628:	ea4f 5223 	mov.w	r2, r3, asr #20
 801662c:	da1e      	bge.n	801666c <__ieee754_atan2+0x104>
 801662e:	2f00      	cmp	r7, #0
 8016630:	da01      	bge.n	8016636 <__ieee754_atan2+0xce>
 8016632:	323c      	adds	r2, #60	; 0x3c
 8016634:	db1e      	blt.n	8016674 <__ieee754_atan2+0x10c>
 8016636:	4632      	mov	r2, r6
 8016638:	463b      	mov	r3, r7
 801663a:	f7ea f91f 	bl	800087c <__aeabi_ddiv>
 801663e:	ec41 0b10 	vmov	d0, r0, r1
 8016642:	f001 f995 	bl	8017970 <fabs>
 8016646:	f000 fff3 	bl	8017630 <atan>
 801664a:	ec51 0b10 	vmov	r0, r1, d0
 801664e:	2c01      	cmp	r4, #1
 8016650:	d013      	beq.n	801667a <__ieee754_atan2+0x112>
 8016652:	2c02      	cmp	r4, #2
 8016654:	d015      	beq.n	8016682 <__ieee754_atan2+0x11a>
 8016656:	2c00      	cmp	r4, #0
 8016658:	d0a7      	beq.n	80165aa <__ieee754_atan2+0x42>
 801665a:	a319      	add	r3, pc, #100	; (adr r3, 80166c0 <__ieee754_atan2+0x158>)
 801665c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016660:	f7e9 fe2a 	bl	80002b8 <__aeabi_dsub>
 8016664:	a318      	add	r3, pc, #96	; (adr r3, 80166c8 <__ieee754_atan2+0x160>)
 8016666:	e9d3 2300 	ldrd	r2, r3, [r3]
 801666a:	e014      	b.n	8016696 <__ieee754_atan2+0x12e>
 801666c:	a118      	add	r1, pc, #96	; (adr r1, 80166d0 <__ieee754_atan2+0x168>)
 801666e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016672:	e7ec      	b.n	801664e <__ieee754_atan2+0xe6>
 8016674:	2000      	movs	r0, #0
 8016676:	2100      	movs	r1, #0
 8016678:	e7e9      	b.n	801664e <__ieee754_atan2+0xe6>
 801667a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801667e:	4619      	mov	r1, r3
 8016680:	e793      	b.n	80165aa <__ieee754_atan2+0x42>
 8016682:	a30f      	add	r3, pc, #60	; (adr r3, 80166c0 <__ieee754_atan2+0x158>)
 8016684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016688:	f7e9 fe16 	bl	80002b8 <__aeabi_dsub>
 801668c:	4602      	mov	r2, r0
 801668e:	460b      	mov	r3, r1
 8016690:	a10d      	add	r1, pc, #52	; (adr r1, 80166c8 <__ieee754_atan2+0x160>)
 8016692:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016696:	f7e9 fe0f 	bl	80002b8 <__aeabi_dsub>
 801669a:	e786      	b.n	80165aa <__ieee754_atan2+0x42>
 801669c:	a10a      	add	r1, pc, #40	; (adr r1, 80166c8 <__ieee754_atan2+0x160>)
 801669e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80166a2:	e782      	b.n	80165aa <__ieee754_atan2+0x42>
 80166a4:	a10c      	add	r1, pc, #48	; (adr r1, 80166d8 <__ieee754_atan2+0x170>)
 80166a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80166aa:	e77e      	b.n	80165aa <__ieee754_atan2+0x42>
 80166ac:	2000      	movs	r0, #0
 80166ae:	2100      	movs	r1, #0
 80166b0:	e77b      	b.n	80165aa <__ieee754_atan2+0x42>
 80166b2:	a107      	add	r1, pc, #28	; (adr r1, 80166d0 <__ieee754_atan2+0x168>)
 80166b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80166b8:	e777      	b.n	80165aa <__ieee754_atan2+0x42>
 80166ba:	bf00      	nop
 80166bc:	f3af 8000 	nop.w
 80166c0:	33145c07 	.word	0x33145c07
 80166c4:	3ca1a626 	.word	0x3ca1a626
 80166c8:	54442d18 	.word	0x54442d18
 80166cc:	400921fb 	.word	0x400921fb
 80166d0:	54442d18 	.word	0x54442d18
 80166d4:	3ff921fb 	.word	0x3ff921fb
 80166d8:	54442d18 	.word	0x54442d18
 80166dc:	3fe921fb 	.word	0x3fe921fb
 80166e0:	08019520 	.word	0x08019520
 80166e4:	08019538 	.word	0x08019538
 80166e8:	54442d18 	.word	0x54442d18
 80166ec:	c00921fb 	.word	0xc00921fb
 80166f0:	54442d18 	.word	0x54442d18
 80166f4:	bff921fb 	.word	0xbff921fb
 80166f8:	7ff00000 	.word	0x7ff00000
 80166fc:	00000000 	.word	0x00000000

08016700 <__ieee754_rem_pio2>:
 8016700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016704:	ed2d 8b02 	vpush	{d8}
 8016708:	ec55 4b10 	vmov	r4, r5, d0
 801670c:	4bca      	ldr	r3, [pc, #808]	; (8016a38 <__ieee754_rem_pio2+0x338>)
 801670e:	b08b      	sub	sp, #44	; 0x2c
 8016710:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8016714:	4598      	cmp	r8, r3
 8016716:	4682      	mov	sl, r0
 8016718:	9502      	str	r5, [sp, #8]
 801671a:	dc08      	bgt.n	801672e <__ieee754_rem_pio2+0x2e>
 801671c:	2200      	movs	r2, #0
 801671e:	2300      	movs	r3, #0
 8016720:	ed80 0b00 	vstr	d0, [r0]
 8016724:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8016728:	f04f 0b00 	mov.w	fp, #0
 801672c:	e028      	b.n	8016780 <__ieee754_rem_pio2+0x80>
 801672e:	4bc3      	ldr	r3, [pc, #780]	; (8016a3c <__ieee754_rem_pio2+0x33c>)
 8016730:	4598      	cmp	r8, r3
 8016732:	dc78      	bgt.n	8016826 <__ieee754_rem_pio2+0x126>
 8016734:	9b02      	ldr	r3, [sp, #8]
 8016736:	4ec2      	ldr	r6, [pc, #776]	; (8016a40 <__ieee754_rem_pio2+0x340>)
 8016738:	2b00      	cmp	r3, #0
 801673a:	ee10 0a10 	vmov	r0, s0
 801673e:	a3b0      	add	r3, pc, #704	; (adr r3, 8016a00 <__ieee754_rem_pio2+0x300>)
 8016740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016744:	4629      	mov	r1, r5
 8016746:	dd39      	ble.n	80167bc <__ieee754_rem_pio2+0xbc>
 8016748:	f7e9 fdb6 	bl	80002b8 <__aeabi_dsub>
 801674c:	45b0      	cmp	r8, r6
 801674e:	4604      	mov	r4, r0
 8016750:	460d      	mov	r5, r1
 8016752:	d01b      	beq.n	801678c <__ieee754_rem_pio2+0x8c>
 8016754:	a3ac      	add	r3, pc, #688	; (adr r3, 8016a08 <__ieee754_rem_pio2+0x308>)
 8016756:	e9d3 2300 	ldrd	r2, r3, [r3]
 801675a:	f7e9 fdad 	bl	80002b8 <__aeabi_dsub>
 801675e:	4602      	mov	r2, r0
 8016760:	460b      	mov	r3, r1
 8016762:	e9ca 2300 	strd	r2, r3, [sl]
 8016766:	4620      	mov	r0, r4
 8016768:	4629      	mov	r1, r5
 801676a:	f7e9 fda5 	bl	80002b8 <__aeabi_dsub>
 801676e:	a3a6      	add	r3, pc, #664	; (adr r3, 8016a08 <__ieee754_rem_pio2+0x308>)
 8016770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016774:	f7e9 fda0 	bl	80002b8 <__aeabi_dsub>
 8016778:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801677c:	f04f 0b01 	mov.w	fp, #1
 8016780:	4658      	mov	r0, fp
 8016782:	b00b      	add	sp, #44	; 0x2c
 8016784:	ecbd 8b02 	vpop	{d8}
 8016788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801678c:	a3a0      	add	r3, pc, #640	; (adr r3, 8016a10 <__ieee754_rem_pio2+0x310>)
 801678e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016792:	f7e9 fd91 	bl	80002b8 <__aeabi_dsub>
 8016796:	a3a0      	add	r3, pc, #640	; (adr r3, 8016a18 <__ieee754_rem_pio2+0x318>)
 8016798:	e9d3 2300 	ldrd	r2, r3, [r3]
 801679c:	4604      	mov	r4, r0
 801679e:	460d      	mov	r5, r1
 80167a0:	f7e9 fd8a 	bl	80002b8 <__aeabi_dsub>
 80167a4:	4602      	mov	r2, r0
 80167a6:	460b      	mov	r3, r1
 80167a8:	e9ca 2300 	strd	r2, r3, [sl]
 80167ac:	4620      	mov	r0, r4
 80167ae:	4629      	mov	r1, r5
 80167b0:	f7e9 fd82 	bl	80002b8 <__aeabi_dsub>
 80167b4:	a398      	add	r3, pc, #608	; (adr r3, 8016a18 <__ieee754_rem_pio2+0x318>)
 80167b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167ba:	e7db      	b.n	8016774 <__ieee754_rem_pio2+0x74>
 80167bc:	f7e9 fd7e 	bl	80002bc <__adddf3>
 80167c0:	45b0      	cmp	r8, r6
 80167c2:	4604      	mov	r4, r0
 80167c4:	460d      	mov	r5, r1
 80167c6:	d016      	beq.n	80167f6 <__ieee754_rem_pio2+0xf6>
 80167c8:	a38f      	add	r3, pc, #572	; (adr r3, 8016a08 <__ieee754_rem_pio2+0x308>)
 80167ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167ce:	f7e9 fd75 	bl	80002bc <__adddf3>
 80167d2:	4602      	mov	r2, r0
 80167d4:	460b      	mov	r3, r1
 80167d6:	e9ca 2300 	strd	r2, r3, [sl]
 80167da:	4620      	mov	r0, r4
 80167dc:	4629      	mov	r1, r5
 80167de:	f7e9 fd6b 	bl	80002b8 <__aeabi_dsub>
 80167e2:	a389      	add	r3, pc, #548	; (adr r3, 8016a08 <__ieee754_rem_pio2+0x308>)
 80167e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167e8:	f7e9 fd68 	bl	80002bc <__adddf3>
 80167ec:	f04f 3bff 	mov.w	fp, #4294967295
 80167f0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80167f4:	e7c4      	b.n	8016780 <__ieee754_rem_pio2+0x80>
 80167f6:	a386      	add	r3, pc, #536	; (adr r3, 8016a10 <__ieee754_rem_pio2+0x310>)
 80167f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167fc:	f7e9 fd5e 	bl	80002bc <__adddf3>
 8016800:	a385      	add	r3, pc, #532	; (adr r3, 8016a18 <__ieee754_rem_pio2+0x318>)
 8016802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016806:	4604      	mov	r4, r0
 8016808:	460d      	mov	r5, r1
 801680a:	f7e9 fd57 	bl	80002bc <__adddf3>
 801680e:	4602      	mov	r2, r0
 8016810:	460b      	mov	r3, r1
 8016812:	e9ca 2300 	strd	r2, r3, [sl]
 8016816:	4620      	mov	r0, r4
 8016818:	4629      	mov	r1, r5
 801681a:	f7e9 fd4d 	bl	80002b8 <__aeabi_dsub>
 801681e:	a37e      	add	r3, pc, #504	; (adr r3, 8016a18 <__ieee754_rem_pio2+0x318>)
 8016820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016824:	e7e0      	b.n	80167e8 <__ieee754_rem_pio2+0xe8>
 8016826:	4b87      	ldr	r3, [pc, #540]	; (8016a44 <__ieee754_rem_pio2+0x344>)
 8016828:	4598      	cmp	r8, r3
 801682a:	f300 80d9 	bgt.w	80169e0 <__ieee754_rem_pio2+0x2e0>
 801682e:	f001 f89f 	bl	8017970 <fabs>
 8016832:	ec55 4b10 	vmov	r4, r5, d0
 8016836:	ee10 0a10 	vmov	r0, s0
 801683a:	a379      	add	r3, pc, #484	; (adr r3, 8016a20 <__ieee754_rem_pio2+0x320>)
 801683c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016840:	4629      	mov	r1, r5
 8016842:	f7e9 fef1 	bl	8000628 <__aeabi_dmul>
 8016846:	4b80      	ldr	r3, [pc, #512]	; (8016a48 <__ieee754_rem_pio2+0x348>)
 8016848:	2200      	movs	r2, #0
 801684a:	f7e9 fd37 	bl	80002bc <__adddf3>
 801684e:	f7ea f99b 	bl	8000b88 <__aeabi_d2iz>
 8016852:	4683      	mov	fp, r0
 8016854:	f7e9 fe7e 	bl	8000554 <__aeabi_i2d>
 8016858:	4602      	mov	r2, r0
 801685a:	460b      	mov	r3, r1
 801685c:	ec43 2b18 	vmov	d8, r2, r3
 8016860:	a367      	add	r3, pc, #412	; (adr r3, 8016a00 <__ieee754_rem_pio2+0x300>)
 8016862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016866:	f7e9 fedf 	bl	8000628 <__aeabi_dmul>
 801686a:	4602      	mov	r2, r0
 801686c:	460b      	mov	r3, r1
 801686e:	4620      	mov	r0, r4
 8016870:	4629      	mov	r1, r5
 8016872:	f7e9 fd21 	bl	80002b8 <__aeabi_dsub>
 8016876:	a364      	add	r3, pc, #400	; (adr r3, 8016a08 <__ieee754_rem_pio2+0x308>)
 8016878:	e9d3 2300 	ldrd	r2, r3, [r3]
 801687c:	4606      	mov	r6, r0
 801687e:	460f      	mov	r7, r1
 8016880:	ec51 0b18 	vmov	r0, r1, d8
 8016884:	f7e9 fed0 	bl	8000628 <__aeabi_dmul>
 8016888:	f1bb 0f1f 	cmp.w	fp, #31
 801688c:	4604      	mov	r4, r0
 801688e:	460d      	mov	r5, r1
 8016890:	dc0d      	bgt.n	80168ae <__ieee754_rem_pio2+0x1ae>
 8016892:	4b6e      	ldr	r3, [pc, #440]	; (8016a4c <__ieee754_rem_pio2+0x34c>)
 8016894:	f10b 32ff 	add.w	r2, fp, #4294967295
 8016898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801689c:	4543      	cmp	r3, r8
 801689e:	d006      	beq.n	80168ae <__ieee754_rem_pio2+0x1ae>
 80168a0:	4622      	mov	r2, r4
 80168a2:	462b      	mov	r3, r5
 80168a4:	4630      	mov	r0, r6
 80168a6:	4639      	mov	r1, r7
 80168a8:	f7e9 fd06 	bl	80002b8 <__aeabi_dsub>
 80168ac:	e00f      	b.n	80168ce <__ieee754_rem_pio2+0x1ce>
 80168ae:	462b      	mov	r3, r5
 80168b0:	4622      	mov	r2, r4
 80168b2:	4630      	mov	r0, r6
 80168b4:	4639      	mov	r1, r7
 80168b6:	f7e9 fcff 	bl	80002b8 <__aeabi_dsub>
 80168ba:	ea4f 5328 	mov.w	r3, r8, asr #20
 80168be:	9303      	str	r3, [sp, #12]
 80168c0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80168c4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80168c8:	f1b8 0f10 	cmp.w	r8, #16
 80168cc:	dc02      	bgt.n	80168d4 <__ieee754_rem_pio2+0x1d4>
 80168ce:	e9ca 0100 	strd	r0, r1, [sl]
 80168d2:	e039      	b.n	8016948 <__ieee754_rem_pio2+0x248>
 80168d4:	a34e      	add	r3, pc, #312	; (adr r3, 8016a10 <__ieee754_rem_pio2+0x310>)
 80168d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168da:	ec51 0b18 	vmov	r0, r1, d8
 80168de:	f7e9 fea3 	bl	8000628 <__aeabi_dmul>
 80168e2:	4604      	mov	r4, r0
 80168e4:	460d      	mov	r5, r1
 80168e6:	4602      	mov	r2, r0
 80168e8:	460b      	mov	r3, r1
 80168ea:	4630      	mov	r0, r6
 80168ec:	4639      	mov	r1, r7
 80168ee:	f7e9 fce3 	bl	80002b8 <__aeabi_dsub>
 80168f2:	4602      	mov	r2, r0
 80168f4:	460b      	mov	r3, r1
 80168f6:	4680      	mov	r8, r0
 80168f8:	4689      	mov	r9, r1
 80168fa:	4630      	mov	r0, r6
 80168fc:	4639      	mov	r1, r7
 80168fe:	f7e9 fcdb 	bl	80002b8 <__aeabi_dsub>
 8016902:	4622      	mov	r2, r4
 8016904:	462b      	mov	r3, r5
 8016906:	f7e9 fcd7 	bl	80002b8 <__aeabi_dsub>
 801690a:	a343      	add	r3, pc, #268	; (adr r3, 8016a18 <__ieee754_rem_pio2+0x318>)
 801690c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016910:	4604      	mov	r4, r0
 8016912:	460d      	mov	r5, r1
 8016914:	ec51 0b18 	vmov	r0, r1, d8
 8016918:	f7e9 fe86 	bl	8000628 <__aeabi_dmul>
 801691c:	4622      	mov	r2, r4
 801691e:	462b      	mov	r3, r5
 8016920:	f7e9 fcca 	bl	80002b8 <__aeabi_dsub>
 8016924:	4602      	mov	r2, r0
 8016926:	460b      	mov	r3, r1
 8016928:	4604      	mov	r4, r0
 801692a:	460d      	mov	r5, r1
 801692c:	4640      	mov	r0, r8
 801692e:	4649      	mov	r1, r9
 8016930:	f7e9 fcc2 	bl	80002b8 <__aeabi_dsub>
 8016934:	9a03      	ldr	r2, [sp, #12]
 8016936:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801693a:	1ad3      	subs	r3, r2, r3
 801693c:	2b31      	cmp	r3, #49	; 0x31
 801693e:	dc24      	bgt.n	801698a <__ieee754_rem_pio2+0x28a>
 8016940:	e9ca 0100 	strd	r0, r1, [sl]
 8016944:	4646      	mov	r6, r8
 8016946:	464f      	mov	r7, r9
 8016948:	e9da 8900 	ldrd	r8, r9, [sl]
 801694c:	4630      	mov	r0, r6
 801694e:	4642      	mov	r2, r8
 8016950:	464b      	mov	r3, r9
 8016952:	4639      	mov	r1, r7
 8016954:	f7e9 fcb0 	bl	80002b8 <__aeabi_dsub>
 8016958:	462b      	mov	r3, r5
 801695a:	4622      	mov	r2, r4
 801695c:	f7e9 fcac 	bl	80002b8 <__aeabi_dsub>
 8016960:	9b02      	ldr	r3, [sp, #8]
 8016962:	2b00      	cmp	r3, #0
 8016964:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8016968:	f6bf af0a 	bge.w	8016780 <__ieee754_rem_pio2+0x80>
 801696c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8016970:	f8ca 3004 	str.w	r3, [sl, #4]
 8016974:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016978:	f8ca 8000 	str.w	r8, [sl]
 801697c:	f8ca 0008 	str.w	r0, [sl, #8]
 8016980:	f8ca 300c 	str.w	r3, [sl, #12]
 8016984:	f1cb 0b00 	rsb	fp, fp, #0
 8016988:	e6fa      	b.n	8016780 <__ieee754_rem_pio2+0x80>
 801698a:	a327      	add	r3, pc, #156	; (adr r3, 8016a28 <__ieee754_rem_pio2+0x328>)
 801698c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016990:	ec51 0b18 	vmov	r0, r1, d8
 8016994:	f7e9 fe48 	bl	8000628 <__aeabi_dmul>
 8016998:	4604      	mov	r4, r0
 801699a:	460d      	mov	r5, r1
 801699c:	4602      	mov	r2, r0
 801699e:	460b      	mov	r3, r1
 80169a0:	4640      	mov	r0, r8
 80169a2:	4649      	mov	r1, r9
 80169a4:	f7e9 fc88 	bl	80002b8 <__aeabi_dsub>
 80169a8:	4602      	mov	r2, r0
 80169aa:	460b      	mov	r3, r1
 80169ac:	4606      	mov	r6, r0
 80169ae:	460f      	mov	r7, r1
 80169b0:	4640      	mov	r0, r8
 80169b2:	4649      	mov	r1, r9
 80169b4:	f7e9 fc80 	bl	80002b8 <__aeabi_dsub>
 80169b8:	4622      	mov	r2, r4
 80169ba:	462b      	mov	r3, r5
 80169bc:	f7e9 fc7c 	bl	80002b8 <__aeabi_dsub>
 80169c0:	a31b      	add	r3, pc, #108	; (adr r3, 8016a30 <__ieee754_rem_pio2+0x330>)
 80169c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169c6:	4604      	mov	r4, r0
 80169c8:	460d      	mov	r5, r1
 80169ca:	ec51 0b18 	vmov	r0, r1, d8
 80169ce:	f7e9 fe2b 	bl	8000628 <__aeabi_dmul>
 80169d2:	4622      	mov	r2, r4
 80169d4:	462b      	mov	r3, r5
 80169d6:	f7e9 fc6f 	bl	80002b8 <__aeabi_dsub>
 80169da:	4604      	mov	r4, r0
 80169dc:	460d      	mov	r5, r1
 80169de:	e75f      	b.n	80168a0 <__ieee754_rem_pio2+0x1a0>
 80169e0:	4b1b      	ldr	r3, [pc, #108]	; (8016a50 <__ieee754_rem_pio2+0x350>)
 80169e2:	4598      	cmp	r8, r3
 80169e4:	dd36      	ble.n	8016a54 <__ieee754_rem_pio2+0x354>
 80169e6:	ee10 2a10 	vmov	r2, s0
 80169ea:	462b      	mov	r3, r5
 80169ec:	4620      	mov	r0, r4
 80169ee:	4629      	mov	r1, r5
 80169f0:	f7e9 fc62 	bl	80002b8 <__aeabi_dsub>
 80169f4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80169f8:	e9ca 0100 	strd	r0, r1, [sl]
 80169fc:	e694      	b.n	8016728 <__ieee754_rem_pio2+0x28>
 80169fe:	bf00      	nop
 8016a00:	54400000 	.word	0x54400000
 8016a04:	3ff921fb 	.word	0x3ff921fb
 8016a08:	1a626331 	.word	0x1a626331
 8016a0c:	3dd0b461 	.word	0x3dd0b461
 8016a10:	1a600000 	.word	0x1a600000
 8016a14:	3dd0b461 	.word	0x3dd0b461
 8016a18:	2e037073 	.word	0x2e037073
 8016a1c:	3ba3198a 	.word	0x3ba3198a
 8016a20:	6dc9c883 	.word	0x6dc9c883
 8016a24:	3fe45f30 	.word	0x3fe45f30
 8016a28:	2e000000 	.word	0x2e000000
 8016a2c:	3ba3198a 	.word	0x3ba3198a
 8016a30:	252049c1 	.word	0x252049c1
 8016a34:	397b839a 	.word	0x397b839a
 8016a38:	3fe921fb 	.word	0x3fe921fb
 8016a3c:	4002d97b 	.word	0x4002d97b
 8016a40:	3ff921fb 	.word	0x3ff921fb
 8016a44:	413921fb 	.word	0x413921fb
 8016a48:	3fe00000 	.word	0x3fe00000
 8016a4c:	08019550 	.word	0x08019550
 8016a50:	7fefffff 	.word	0x7fefffff
 8016a54:	ea4f 5428 	mov.w	r4, r8, asr #20
 8016a58:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8016a5c:	ee10 0a10 	vmov	r0, s0
 8016a60:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8016a64:	ee10 6a10 	vmov	r6, s0
 8016a68:	460f      	mov	r7, r1
 8016a6a:	f7ea f88d 	bl	8000b88 <__aeabi_d2iz>
 8016a6e:	f7e9 fd71 	bl	8000554 <__aeabi_i2d>
 8016a72:	4602      	mov	r2, r0
 8016a74:	460b      	mov	r3, r1
 8016a76:	4630      	mov	r0, r6
 8016a78:	4639      	mov	r1, r7
 8016a7a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8016a7e:	f7e9 fc1b 	bl	80002b8 <__aeabi_dsub>
 8016a82:	4b23      	ldr	r3, [pc, #140]	; (8016b10 <__ieee754_rem_pio2+0x410>)
 8016a84:	2200      	movs	r2, #0
 8016a86:	f7e9 fdcf 	bl	8000628 <__aeabi_dmul>
 8016a8a:	460f      	mov	r7, r1
 8016a8c:	4606      	mov	r6, r0
 8016a8e:	f7ea f87b 	bl	8000b88 <__aeabi_d2iz>
 8016a92:	f7e9 fd5f 	bl	8000554 <__aeabi_i2d>
 8016a96:	4602      	mov	r2, r0
 8016a98:	460b      	mov	r3, r1
 8016a9a:	4630      	mov	r0, r6
 8016a9c:	4639      	mov	r1, r7
 8016a9e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8016aa2:	f7e9 fc09 	bl	80002b8 <__aeabi_dsub>
 8016aa6:	4b1a      	ldr	r3, [pc, #104]	; (8016b10 <__ieee754_rem_pio2+0x410>)
 8016aa8:	2200      	movs	r2, #0
 8016aaa:	f7e9 fdbd 	bl	8000628 <__aeabi_dmul>
 8016aae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016ab2:	ad04      	add	r5, sp, #16
 8016ab4:	f04f 0803 	mov.w	r8, #3
 8016ab8:	46a9      	mov	r9, r5
 8016aba:	2600      	movs	r6, #0
 8016abc:	2700      	movs	r7, #0
 8016abe:	4632      	mov	r2, r6
 8016ac0:	463b      	mov	r3, r7
 8016ac2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8016ac6:	46c3      	mov	fp, r8
 8016ac8:	3d08      	subs	r5, #8
 8016aca:	f108 38ff 	add.w	r8, r8, #4294967295
 8016ace:	f7ea f813 	bl	8000af8 <__aeabi_dcmpeq>
 8016ad2:	2800      	cmp	r0, #0
 8016ad4:	d1f3      	bne.n	8016abe <__ieee754_rem_pio2+0x3be>
 8016ad6:	4b0f      	ldr	r3, [pc, #60]	; (8016b14 <__ieee754_rem_pio2+0x414>)
 8016ad8:	9301      	str	r3, [sp, #4]
 8016ada:	2302      	movs	r3, #2
 8016adc:	9300      	str	r3, [sp, #0]
 8016ade:	4622      	mov	r2, r4
 8016ae0:	465b      	mov	r3, fp
 8016ae2:	4651      	mov	r1, sl
 8016ae4:	4648      	mov	r0, r9
 8016ae6:	f000 f993 	bl	8016e10 <__kernel_rem_pio2>
 8016aea:	9b02      	ldr	r3, [sp, #8]
 8016aec:	2b00      	cmp	r3, #0
 8016aee:	4683      	mov	fp, r0
 8016af0:	f6bf ae46 	bge.w	8016780 <__ieee754_rem_pio2+0x80>
 8016af4:	e9da 2100 	ldrd	r2, r1, [sl]
 8016af8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016afc:	e9ca 2300 	strd	r2, r3, [sl]
 8016b00:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8016b04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016b08:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8016b0c:	e73a      	b.n	8016984 <__ieee754_rem_pio2+0x284>
 8016b0e:	bf00      	nop
 8016b10:	41700000 	.word	0x41700000
 8016b14:	080195d0 	.word	0x080195d0

08016b18 <__ieee754_sqrt>:
 8016b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b1c:	ec55 4b10 	vmov	r4, r5, d0
 8016b20:	4e55      	ldr	r6, [pc, #340]	; (8016c78 <__ieee754_sqrt+0x160>)
 8016b22:	43ae      	bics	r6, r5
 8016b24:	ee10 0a10 	vmov	r0, s0
 8016b28:	ee10 3a10 	vmov	r3, s0
 8016b2c:	462a      	mov	r2, r5
 8016b2e:	4629      	mov	r1, r5
 8016b30:	d110      	bne.n	8016b54 <__ieee754_sqrt+0x3c>
 8016b32:	ee10 2a10 	vmov	r2, s0
 8016b36:	462b      	mov	r3, r5
 8016b38:	f7e9 fd76 	bl	8000628 <__aeabi_dmul>
 8016b3c:	4602      	mov	r2, r0
 8016b3e:	460b      	mov	r3, r1
 8016b40:	4620      	mov	r0, r4
 8016b42:	4629      	mov	r1, r5
 8016b44:	f7e9 fbba 	bl	80002bc <__adddf3>
 8016b48:	4604      	mov	r4, r0
 8016b4a:	460d      	mov	r5, r1
 8016b4c:	ec45 4b10 	vmov	d0, r4, r5
 8016b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b54:	2d00      	cmp	r5, #0
 8016b56:	dc10      	bgt.n	8016b7a <__ieee754_sqrt+0x62>
 8016b58:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8016b5c:	4330      	orrs	r0, r6
 8016b5e:	d0f5      	beq.n	8016b4c <__ieee754_sqrt+0x34>
 8016b60:	b15d      	cbz	r5, 8016b7a <__ieee754_sqrt+0x62>
 8016b62:	ee10 2a10 	vmov	r2, s0
 8016b66:	462b      	mov	r3, r5
 8016b68:	ee10 0a10 	vmov	r0, s0
 8016b6c:	f7e9 fba4 	bl	80002b8 <__aeabi_dsub>
 8016b70:	4602      	mov	r2, r0
 8016b72:	460b      	mov	r3, r1
 8016b74:	f7e9 fe82 	bl	800087c <__aeabi_ddiv>
 8016b78:	e7e6      	b.n	8016b48 <__ieee754_sqrt+0x30>
 8016b7a:	1512      	asrs	r2, r2, #20
 8016b7c:	d074      	beq.n	8016c68 <__ieee754_sqrt+0x150>
 8016b7e:	07d4      	lsls	r4, r2, #31
 8016b80:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8016b84:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8016b88:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8016b8c:	bf5e      	ittt	pl
 8016b8e:	0fda      	lsrpl	r2, r3, #31
 8016b90:	005b      	lslpl	r3, r3, #1
 8016b92:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8016b96:	2400      	movs	r4, #0
 8016b98:	0fda      	lsrs	r2, r3, #31
 8016b9a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8016b9e:	107f      	asrs	r7, r7, #1
 8016ba0:	005b      	lsls	r3, r3, #1
 8016ba2:	2516      	movs	r5, #22
 8016ba4:	4620      	mov	r0, r4
 8016ba6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8016baa:	1886      	adds	r6, r0, r2
 8016bac:	428e      	cmp	r6, r1
 8016bae:	bfde      	ittt	le
 8016bb0:	1b89      	suble	r1, r1, r6
 8016bb2:	18b0      	addle	r0, r6, r2
 8016bb4:	18a4      	addle	r4, r4, r2
 8016bb6:	0049      	lsls	r1, r1, #1
 8016bb8:	3d01      	subs	r5, #1
 8016bba:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8016bbe:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8016bc2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8016bc6:	d1f0      	bne.n	8016baa <__ieee754_sqrt+0x92>
 8016bc8:	462a      	mov	r2, r5
 8016bca:	f04f 0e20 	mov.w	lr, #32
 8016bce:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8016bd2:	4281      	cmp	r1, r0
 8016bd4:	eb06 0c05 	add.w	ip, r6, r5
 8016bd8:	dc02      	bgt.n	8016be0 <__ieee754_sqrt+0xc8>
 8016bda:	d113      	bne.n	8016c04 <__ieee754_sqrt+0xec>
 8016bdc:	459c      	cmp	ip, r3
 8016bde:	d811      	bhi.n	8016c04 <__ieee754_sqrt+0xec>
 8016be0:	f1bc 0f00 	cmp.w	ip, #0
 8016be4:	eb0c 0506 	add.w	r5, ip, r6
 8016be8:	da43      	bge.n	8016c72 <__ieee754_sqrt+0x15a>
 8016bea:	2d00      	cmp	r5, #0
 8016bec:	db41      	blt.n	8016c72 <__ieee754_sqrt+0x15a>
 8016bee:	f100 0801 	add.w	r8, r0, #1
 8016bf2:	1a09      	subs	r1, r1, r0
 8016bf4:	459c      	cmp	ip, r3
 8016bf6:	bf88      	it	hi
 8016bf8:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8016bfc:	eba3 030c 	sub.w	r3, r3, ip
 8016c00:	4432      	add	r2, r6
 8016c02:	4640      	mov	r0, r8
 8016c04:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8016c08:	f1be 0e01 	subs.w	lr, lr, #1
 8016c0c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8016c10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8016c14:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8016c18:	d1db      	bne.n	8016bd2 <__ieee754_sqrt+0xba>
 8016c1a:	430b      	orrs	r3, r1
 8016c1c:	d006      	beq.n	8016c2c <__ieee754_sqrt+0x114>
 8016c1e:	1c50      	adds	r0, r2, #1
 8016c20:	bf13      	iteet	ne
 8016c22:	3201      	addne	r2, #1
 8016c24:	3401      	addeq	r4, #1
 8016c26:	4672      	moveq	r2, lr
 8016c28:	f022 0201 	bicne.w	r2, r2, #1
 8016c2c:	1063      	asrs	r3, r4, #1
 8016c2e:	0852      	lsrs	r2, r2, #1
 8016c30:	07e1      	lsls	r1, r4, #31
 8016c32:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8016c36:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8016c3a:	bf48      	it	mi
 8016c3c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8016c40:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8016c44:	4614      	mov	r4, r2
 8016c46:	e781      	b.n	8016b4c <__ieee754_sqrt+0x34>
 8016c48:	0ad9      	lsrs	r1, r3, #11
 8016c4a:	3815      	subs	r0, #21
 8016c4c:	055b      	lsls	r3, r3, #21
 8016c4e:	2900      	cmp	r1, #0
 8016c50:	d0fa      	beq.n	8016c48 <__ieee754_sqrt+0x130>
 8016c52:	02cd      	lsls	r5, r1, #11
 8016c54:	d50a      	bpl.n	8016c6c <__ieee754_sqrt+0x154>
 8016c56:	f1c2 0420 	rsb	r4, r2, #32
 8016c5a:	fa23 f404 	lsr.w	r4, r3, r4
 8016c5e:	1e55      	subs	r5, r2, #1
 8016c60:	4093      	lsls	r3, r2
 8016c62:	4321      	orrs	r1, r4
 8016c64:	1b42      	subs	r2, r0, r5
 8016c66:	e78a      	b.n	8016b7e <__ieee754_sqrt+0x66>
 8016c68:	4610      	mov	r0, r2
 8016c6a:	e7f0      	b.n	8016c4e <__ieee754_sqrt+0x136>
 8016c6c:	0049      	lsls	r1, r1, #1
 8016c6e:	3201      	adds	r2, #1
 8016c70:	e7ef      	b.n	8016c52 <__ieee754_sqrt+0x13a>
 8016c72:	4680      	mov	r8, r0
 8016c74:	e7bd      	b.n	8016bf2 <__ieee754_sqrt+0xda>
 8016c76:	bf00      	nop
 8016c78:	7ff00000 	.word	0x7ff00000
 8016c7c:	00000000 	.word	0x00000000

08016c80 <__kernel_cos>:
 8016c80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c84:	ec57 6b10 	vmov	r6, r7, d0
 8016c88:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8016c8c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8016c90:	ed8d 1b00 	vstr	d1, [sp]
 8016c94:	da07      	bge.n	8016ca6 <__kernel_cos+0x26>
 8016c96:	ee10 0a10 	vmov	r0, s0
 8016c9a:	4639      	mov	r1, r7
 8016c9c:	f7e9 ff74 	bl	8000b88 <__aeabi_d2iz>
 8016ca0:	2800      	cmp	r0, #0
 8016ca2:	f000 8088 	beq.w	8016db6 <__kernel_cos+0x136>
 8016ca6:	4632      	mov	r2, r6
 8016ca8:	463b      	mov	r3, r7
 8016caa:	4630      	mov	r0, r6
 8016cac:	4639      	mov	r1, r7
 8016cae:	f7e9 fcbb 	bl	8000628 <__aeabi_dmul>
 8016cb2:	4b51      	ldr	r3, [pc, #324]	; (8016df8 <__kernel_cos+0x178>)
 8016cb4:	2200      	movs	r2, #0
 8016cb6:	4604      	mov	r4, r0
 8016cb8:	460d      	mov	r5, r1
 8016cba:	f7e9 fcb5 	bl	8000628 <__aeabi_dmul>
 8016cbe:	a340      	add	r3, pc, #256	; (adr r3, 8016dc0 <__kernel_cos+0x140>)
 8016cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cc4:	4682      	mov	sl, r0
 8016cc6:	468b      	mov	fp, r1
 8016cc8:	4620      	mov	r0, r4
 8016cca:	4629      	mov	r1, r5
 8016ccc:	f7e9 fcac 	bl	8000628 <__aeabi_dmul>
 8016cd0:	a33d      	add	r3, pc, #244	; (adr r3, 8016dc8 <__kernel_cos+0x148>)
 8016cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cd6:	f7e9 faf1 	bl	80002bc <__adddf3>
 8016cda:	4622      	mov	r2, r4
 8016cdc:	462b      	mov	r3, r5
 8016cde:	f7e9 fca3 	bl	8000628 <__aeabi_dmul>
 8016ce2:	a33b      	add	r3, pc, #236	; (adr r3, 8016dd0 <__kernel_cos+0x150>)
 8016ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ce8:	f7e9 fae6 	bl	80002b8 <__aeabi_dsub>
 8016cec:	4622      	mov	r2, r4
 8016cee:	462b      	mov	r3, r5
 8016cf0:	f7e9 fc9a 	bl	8000628 <__aeabi_dmul>
 8016cf4:	a338      	add	r3, pc, #224	; (adr r3, 8016dd8 <__kernel_cos+0x158>)
 8016cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cfa:	f7e9 fadf 	bl	80002bc <__adddf3>
 8016cfe:	4622      	mov	r2, r4
 8016d00:	462b      	mov	r3, r5
 8016d02:	f7e9 fc91 	bl	8000628 <__aeabi_dmul>
 8016d06:	a336      	add	r3, pc, #216	; (adr r3, 8016de0 <__kernel_cos+0x160>)
 8016d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d0c:	f7e9 fad4 	bl	80002b8 <__aeabi_dsub>
 8016d10:	4622      	mov	r2, r4
 8016d12:	462b      	mov	r3, r5
 8016d14:	f7e9 fc88 	bl	8000628 <__aeabi_dmul>
 8016d18:	a333      	add	r3, pc, #204	; (adr r3, 8016de8 <__kernel_cos+0x168>)
 8016d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d1e:	f7e9 facd 	bl	80002bc <__adddf3>
 8016d22:	4622      	mov	r2, r4
 8016d24:	462b      	mov	r3, r5
 8016d26:	f7e9 fc7f 	bl	8000628 <__aeabi_dmul>
 8016d2a:	4622      	mov	r2, r4
 8016d2c:	462b      	mov	r3, r5
 8016d2e:	f7e9 fc7b 	bl	8000628 <__aeabi_dmul>
 8016d32:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016d36:	4604      	mov	r4, r0
 8016d38:	460d      	mov	r5, r1
 8016d3a:	4630      	mov	r0, r6
 8016d3c:	4639      	mov	r1, r7
 8016d3e:	f7e9 fc73 	bl	8000628 <__aeabi_dmul>
 8016d42:	460b      	mov	r3, r1
 8016d44:	4602      	mov	r2, r0
 8016d46:	4629      	mov	r1, r5
 8016d48:	4620      	mov	r0, r4
 8016d4a:	f7e9 fab5 	bl	80002b8 <__aeabi_dsub>
 8016d4e:	4b2b      	ldr	r3, [pc, #172]	; (8016dfc <__kernel_cos+0x17c>)
 8016d50:	4598      	cmp	r8, r3
 8016d52:	4606      	mov	r6, r0
 8016d54:	460f      	mov	r7, r1
 8016d56:	dc10      	bgt.n	8016d7a <__kernel_cos+0xfa>
 8016d58:	4602      	mov	r2, r0
 8016d5a:	460b      	mov	r3, r1
 8016d5c:	4650      	mov	r0, sl
 8016d5e:	4659      	mov	r1, fp
 8016d60:	f7e9 faaa 	bl	80002b8 <__aeabi_dsub>
 8016d64:	460b      	mov	r3, r1
 8016d66:	4926      	ldr	r1, [pc, #152]	; (8016e00 <__kernel_cos+0x180>)
 8016d68:	4602      	mov	r2, r0
 8016d6a:	2000      	movs	r0, #0
 8016d6c:	f7e9 faa4 	bl	80002b8 <__aeabi_dsub>
 8016d70:	ec41 0b10 	vmov	d0, r0, r1
 8016d74:	b003      	add	sp, #12
 8016d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d7a:	4b22      	ldr	r3, [pc, #136]	; (8016e04 <__kernel_cos+0x184>)
 8016d7c:	4920      	ldr	r1, [pc, #128]	; (8016e00 <__kernel_cos+0x180>)
 8016d7e:	4598      	cmp	r8, r3
 8016d80:	bfcc      	ite	gt
 8016d82:	4d21      	ldrgt	r5, [pc, #132]	; (8016e08 <__kernel_cos+0x188>)
 8016d84:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8016d88:	2400      	movs	r4, #0
 8016d8a:	4622      	mov	r2, r4
 8016d8c:	462b      	mov	r3, r5
 8016d8e:	2000      	movs	r0, #0
 8016d90:	f7e9 fa92 	bl	80002b8 <__aeabi_dsub>
 8016d94:	4622      	mov	r2, r4
 8016d96:	4680      	mov	r8, r0
 8016d98:	4689      	mov	r9, r1
 8016d9a:	462b      	mov	r3, r5
 8016d9c:	4650      	mov	r0, sl
 8016d9e:	4659      	mov	r1, fp
 8016da0:	f7e9 fa8a 	bl	80002b8 <__aeabi_dsub>
 8016da4:	4632      	mov	r2, r6
 8016da6:	463b      	mov	r3, r7
 8016da8:	f7e9 fa86 	bl	80002b8 <__aeabi_dsub>
 8016dac:	4602      	mov	r2, r0
 8016dae:	460b      	mov	r3, r1
 8016db0:	4640      	mov	r0, r8
 8016db2:	4649      	mov	r1, r9
 8016db4:	e7da      	b.n	8016d6c <__kernel_cos+0xec>
 8016db6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8016df0 <__kernel_cos+0x170>
 8016dba:	e7db      	b.n	8016d74 <__kernel_cos+0xf4>
 8016dbc:	f3af 8000 	nop.w
 8016dc0:	be8838d4 	.word	0xbe8838d4
 8016dc4:	bda8fae9 	.word	0xbda8fae9
 8016dc8:	bdb4b1c4 	.word	0xbdb4b1c4
 8016dcc:	3e21ee9e 	.word	0x3e21ee9e
 8016dd0:	809c52ad 	.word	0x809c52ad
 8016dd4:	3e927e4f 	.word	0x3e927e4f
 8016dd8:	19cb1590 	.word	0x19cb1590
 8016ddc:	3efa01a0 	.word	0x3efa01a0
 8016de0:	16c15177 	.word	0x16c15177
 8016de4:	3f56c16c 	.word	0x3f56c16c
 8016de8:	5555554c 	.word	0x5555554c
 8016dec:	3fa55555 	.word	0x3fa55555
 8016df0:	00000000 	.word	0x00000000
 8016df4:	3ff00000 	.word	0x3ff00000
 8016df8:	3fe00000 	.word	0x3fe00000
 8016dfc:	3fd33332 	.word	0x3fd33332
 8016e00:	3ff00000 	.word	0x3ff00000
 8016e04:	3fe90000 	.word	0x3fe90000
 8016e08:	3fd20000 	.word	0x3fd20000
 8016e0c:	00000000 	.word	0x00000000

08016e10 <__kernel_rem_pio2>:
 8016e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e14:	ed2d 8b02 	vpush	{d8}
 8016e18:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8016e1c:	f112 0f14 	cmn.w	r2, #20
 8016e20:	9308      	str	r3, [sp, #32]
 8016e22:	9101      	str	r1, [sp, #4]
 8016e24:	4bc4      	ldr	r3, [pc, #784]	; (8017138 <__kernel_rem_pio2+0x328>)
 8016e26:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8016e28:	900b      	str	r0, [sp, #44]	; 0x2c
 8016e2a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016e2e:	9302      	str	r3, [sp, #8]
 8016e30:	9b08      	ldr	r3, [sp, #32]
 8016e32:	f103 33ff 	add.w	r3, r3, #4294967295
 8016e36:	bfa8      	it	ge
 8016e38:	1ed4      	subge	r4, r2, #3
 8016e3a:	9306      	str	r3, [sp, #24]
 8016e3c:	bfb2      	itee	lt
 8016e3e:	2400      	movlt	r4, #0
 8016e40:	2318      	movge	r3, #24
 8016e42:	fb94 f4f3 	sdivge	r4, r4, r3
 8016e46:	f06f 0317 	mvn.w	r3, #23
 8016e4a:	fb04 3303 	mla	r3, r4, r3, r3
 8016e4e:	eb03 0a02 	add.w	sl, r3, r2
 8016e52:	9b02      	ldr	r3, [sp, #8]
 8016e54:	9a06      	ldr	r2, [sp, #24]
 8016e56:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8017128 <__kernel_rem_pio2+0x318>
 8016e5a:	eb03 0802 	add.w	r8, r3, r2
 8016e5e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8016e60:	1aa7      	subs	r7, r4, r2
 8016e62:	ae22      	add	r6, sp, #136	; 0x88
 8016e64:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8016e68:	2500      	movs	r5, #0
 8016e6a:	4545      	cmp	r5, r8
 8016e6c:	dd13      	ble.n	8016e96 <__kernel_rem_pio2+0x86>
 8016e6e:	9b08      	ldr	r3, [sp, #32]
 8016e70:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8017128 <__kernel_rem_pio2+0x318>
 8016e74:	aa22      	add	r2, sp, #136	; 0x88
 8016e76:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8016e7a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8016e7e:	f04f 0800 	mov.w	r8, #0
 8016e82:	9b02      	ldr	r3, [sp, #8]
 8016e84:	4598      	cmp	r8, r3
 8016e86:	dc2f      	bgt.n	8016ee8 <__kernel_rem_pio2+0xd8>
 8016e88:	ed8d 8b04 	vstr	d8, [sp, #16]
 8016e8c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8016e90:	462f      	mov	r7, r5
 8016e92:	2600      	movs	r6, #0
 8016e94:	e01b      	b.n	8016ece <__kernel_rem_pio2+0xbe>
 8016e96:	42ef      	cmn	r7, r5
 8016e98:	d407      	bmi.n	8016eaa <__kernel_rem_pio2+0x9a>
 8016e9a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8016e9e:	f7e9 fb59 	bl	8000554 <__aeabi_i2d>
 8016ea2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8016ea6:	3501      	adds	r5, #1
 8016ea8:	e7df      	b.n	8016e6a <__kernel_rem_pio2+0x5a>
 8016eaa:	ec51 0b18 	vmov	r0, r1, d8
 8016eae:	e7f8      	b.n	8016ea2 <__kernel_rem_pio2+0x92>
 8016eb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016eb4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8016eb8:	f7e9 fbb6 	bl	8000628 <__aeabi_dmul>
 8016ebc:	4602      	mov	r2, r0
 8016ebe:	460b      	mov	r3, r1
 8016ec0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016ec4:	f7e9 f9fa 	bl	80002bc <__adddf3>
 8016ec8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016ecc:	3601      	adds	r6, #1
 8016ece:	9b06      	ldr	r3, [sp, #24]
 8016ed0:	429e      	cmp	r6, r3
 8016ed2:	f1a7 0708 	sub.w	r7, r7, #8
 8016ed6:	ddeb      	ble.n	8016eb0 <__kernel_rem_pio2+0xa0>
 8016ed8:	ed9d 7b04 	vldr	d7, [sp, #16]
 8016edc:	f108 0801 	add.w	r8, r8, #1
 8016ee0:	ecab 7b02 	vstmia	fp!, {d7}
 8016ee4:	3508      	adds	r5, #8
 8016ee6:	e7cc      	b.n	8016e82 <__kernel_rem_pio2+0x72>
 8016ee8:	9b02      	ldr	r3, [sp, #8]
 8016eea:	aa0e      	add	r2, sp, #56	; 0x38
 8016eec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016ef0:	930d      	str	r3, [sp, #52]	; 0x34
 8016ef2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8016ef4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8016ef8:	9c02      	ldr	r4, [sp, #8]
 8016efa:	930c      	str	r3, [sp, #48]	; 0x30
 8016efc:	00e3      	lsls	r3, r4, #3
 8016efe:	930a      	str	r3, [sp, #40]	; 0x28
 8016f00:	ab9a      	add	r3, sp, #616	; 0x268
 8016f02:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8016f06:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8016f0a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8016f0e:	ab72      	add	r3, sp, #456	; 0x1c8
 8016f10:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8016f14:	46c3      	mov	fp, r8
 8016f16:	46a1      	mov	r9, r4
 8016f18:	f1b9 0f00 	cmp.w	r9, #0
 8016f1c:	f1a5 0508 	sub.w	r5, r5, #8
 8016f20:	dc77      	bgt.n	8017012 <__kernel_rem_pio2+0x202>
 8016f22:	ec47 6b10 	vmov	d0, r6, r7
 8016f26:	4650      	mov	r0, sl
 8016f28:	f000 fdae 	bl	8017a88 <scalbn>
 8016f2c:	ec57 6b10 	vmov	r6, r7, d0
 8016f30:	2200      	movs	r2, #0
 8016f32:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8016f36:	ee10 0a10 	vmov	r0, s0
 8016f3a:	4639      	mov	r1, r7
 8016f3c:	f7e9 fb74 	bl	8000628 <__aeabi_dmul>
 8016f40:	ec41 0b10 	vmov	d0, r0, r1
 8016f44:	f000 fd20 	bl	8017988 <floor>
 8016f48:	4b7c      	ldr	r3, [pc, #496]	; (801713c <__kernel_rem_pio2+0x32c>)
 8016f4a:	ec51 0b10 	vmov	r0, r1, d0
 8016f4e:	2200      	movs	r2, #0
 8016f50:	f7e9 fb6a 	bl	8000628 <__aeabi_dmul>
 8016f54:	4602      	mov	r2, r0
 8016f56:	460b      	mov	r3, r1
 8016f58:	4630      	mov	r0, r6
 8016f5a:	4639      	mov	r1, r7
 8016f5c:	f7e9 f9ac 	bl	80002b8 <__aeabi_dsub>
 8016f60:	460f      	mov	r7, r1
 8016f62:	4606      	mov	r6, r0
 8016f64:	f7e9 fe10 	bl	8000b88 <__aeabi_d2iz>
 8016f68:	9004      	str	r0, [sp, #16]
 8016f6a:	f7e9 faf3 	bl	8000554 <__aeabi_i2d>
 8016f6e:	4602      	mov	r2, r0
 8016f70:	460b      	mov	r3, r1
 8016f72:	4630      	mov	r0, r6
 8016f74:	4639      	mov	r1, r7
 8016f76:	f7e9 f99f 	bl	80002b8 <__aeabi_dsub>
 8016f7a:	f1ba 0f00 	cmp.w	sl, #0
 8016f7e:	4606      	mov	r6, r0
 8016f80:	460f      	mov	r7, r1
 8016f82:	dd6d      	ble.n	8017060 <__kernel_rem_pio2+0x250>
 8016f84:	1e62      	subs	r2, r4, #1
 8016f86:	ab0e      	add	r3, sp, #56	; 0x38
 8016f88:	9d04      	ldr	r5, [sp, #16]
 8016f8a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8016f8e:	f1ca 0118 	rsb	r1, sl, #24
 8016f92:	fa40 f301 	asr.w	r3, r0, r1
 8016f96:	441d      	add	r5, r3
 8016f98:	408b      	lsls	r3, r1
 8016f9a:	1ac0      	subs	r0, r0, r3
 8016f9c:	ab0e      	add	r3, sp, #56	; 0x38
 8016f9e:	9504      	str	r5, [sp, #16]
 8016fa0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8016fa4:	f1ca 0317 	rsb	r3, sl, #23
 8016fa8:	fa40 fb03 	asr.w	fp, r0, r3
 8016fac:	f1bb 0f00 	cmp.w	fp, #0
 8016fb0:	dd65      	ble.n	801707e <__kernel_rem_pio2+0x26e>
 8016fb2:	9b04      	ldr	r3, [sp, #16]
 8016fb4:	2200      	movs	r2, #0
 8016fb6:	3301      	adds	r3, #1
 8016fb8:	9304      	str	r3, [sp, #16]
 8016fba:	4615      	mov	r5, r2
 8016fbc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8016fc0:	4294      	cmp	r4, r2
 8016fc2:	f300 809c 	bgt.w	80170fe <__kernel_rem_pio2+0x2ee>
 8016fc6:	f1ba 0f00 	cmp.w	sl, #0
 8016fca:	dd07      	ble.n	8016fdc <__kernel_rem_pio2+0x1cc>
 8016fcc:	f1ba 0f01 	cmp.w	sl, #1
 8016fd0:	f000 80c0 	beq.w	8017154 <__kernel_rem_pio2+0x344>
 8016fd4:	f1ba 0f02 	cmp.w	sl, #2
 8016fd8:	f000 80c6 	beq.w	8017168 <__kernel_rem_pio2+0x358>
 8016fdc:	f1bb 0f02 	cmp.w	fp, #2
 8016fe0:	d14d      	bne.n	801707e <__kernel_rem_pio2+0x26e>
 8016fe2:	4632      	mov	r2, r6
 8016fe4:	463b      	mov	r3, r7
 8016fe6:	4956      	ldr	r1, [pc, #344]	; (8017140 <__kernel_rem_pio2+0x330>)
 8016fe8:	2000      	movs	r0, #0
 8016fea:	f7e9 f965 	bl	80002b8 <__aeabi_dsub>
 8016fee:	4606      	mov	r6, r0
 8016ff0:	460f      	mov	r7, r1
 8016ff2:	2d00      	cmp	r5, #0
 8016ff4:	d043      	beq.n	801707e <__kernel_rem_pio2+0x26e>
 8016ff6:	4650      	mov	r0, sl
 8016ff8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8017130 <__kernel_rem_pio2+0x320>
 8016ffc:	f000 fd44 	bl	8017a88 <scalbn>
 8017000:	4630      	mov	r0, r6
 8017002:	4639      	mov	r1, r7
 8017004:	ec53 2b10 	vmov	r2, r3, d0
 8017008:	f7e9 f956 	bl	80002b8 <__aeabi_dsub>
 801700c:	4606      	mov	r6, r0
 801700e:	460f      	mov	r7, r1
 8017010:	e035      	b.n	801707e <__kernel_rem_pio2+0x26e>
 8017012:	4b4c      	ldr	r3, [pc, #304]	; (8017144 <__kernel_rem_pio2+0x334>)
 8017014:	2200      	movs	r2, #0
 8017016:	4630      	mov	r0, r6
 8017018:	4639      	mov	r1, r7
 801701a:	f7e9 fb05 	bl	8000628 <__aeabi_dmul>
 801701e:	f7e9 fdb3 	bl	8000b88 <__aeabi_d2iz>
 8017022:	f7e9 fa97 	bl	8000554 <__aeabi_i2d>
 8017026:	4602      	mov	r2, r0
 8017028:	460b      	mov	r3, r1
 801702a:	ec43 2b18 	vmov	d8, r2, r3
 801702e:	4b46      	ldr	r3, [pc, #280]	; (8017148 <__kernel_rem_pio2+0x338>)
 8017030:	2200      	movs	r2, #0
 8017032:	f7e9 faf9 	bl	8000628 <__aeabi_dmul>
 8017036:	4602      	mov	r2, r0
 8017038:	460b      	mov	r3, r1
 801703a:	4630      	mov	r0, r6
 801703c:	4639      	mov	r1, r7
 801703e:	f7e9 f93b 	bl	80002b8 <__aeabi_dsub>
 8017042:	f7e9 fda1 	bl	8000b88 <__aeabi_d2iz>
 8017046:	e9d5 2300 	ldrd	r2, r3, [r5]
 801704a:	f84b 0b04 	str.w	r0, [fp], #4
 801704e:	ec51 0b18 	vmov	r0, r1, d8
 8017052:	f7e9 f933 	bl	80002bc <__adddf3>
 8017056:	f109 39ff 	add.w	r9, r9, #4294967295
 801705a:	4606      	mov	r6, r0
 801705c:	460f      	mov	r7, r1
 801705e:	e75b      	b.n	8016f18 <__kernel_rem_pio2+0x108>
 8017060:	d106      	bne.n	8017070 <__kernel_rem_pio2+0x260>
 8017062:	1e63      	subs	r3, r4, #1
 8017064:	aa0e      	add	r2, sp, #56	; 0x38
 8017066:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801706a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 801706e:	e79d      	b.n	8016fac <__kernel_rem_pio2+0x19c>
 8017070:	4b36      	ldr	r3, [pc, #216]	; (801714c <__kernel_rem_pio2+0x33c>)
 8017072:	2200      	movs	r2, #0
 8017074:	f7e9 fd5e 	bl	8000b34 <__aeabi_dcmpge>
 8017078:	2800      	cmp	r0, #0
 801707a:	d13d      	bne.n	80170f8 <__kernel_rem_pio2+0x2e8>
 801707c:	4683      	mov	fp, r0
 801707e:	2200      	movs	r2, #0
 8017080:	2300      	movs	r3, #0
 8017082:	4630      	mov	r0, r6
 8017084:	4639      	mov	r1, r7
 8017086:	f7e9 fd37 	bl	8000af8 <__aeabi_dcmpeq>
 801708a:	2800      	cmp	r0, #0
 801708c:	f000 80c0 	beq.w	8017210 <__kernel_rem_pio2+0x400>
 8017090:	1e65      	subs	r5, r4, #1
 8017092:	462b      	mov	r3, r5
 8017094:	2200      	movs	r2, #0
 8017096:	9902      	ldr	r1, [sp, #8]
 8017098:	428b      	cmp	r3, r1
 801709a:	da6c      	bge.n	8017176 <__kernel_rem_pio2+0x366>
 801709c:	2a00      	cmp	r2, #0
 801709e:	f000 8089 	beq.w	80171b4 <__kernel_rem_pio2+0x3a4>
 80170a2:	ab0e      	add	r3, sp, #56	; 0x38
 80170a4:	f1aa 0a18 	sub.w	sl, sl, #24
 80170a8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80170ac:	2b00      	cmp	r3, #0
 80170ae:	f000 80ad 	beq.w	801720c <__kernel_rem_pio2+0x3fc>
 80170b2:	4650      	mov	r0, sl
 80170b4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8017130 <__kernel_rem_pio2+0x320>
 80170b8:	f000 fce6 	bl	8017a88 <scalbn>
 80170bc:	ab9a      	add	r3, sp, #616	; 0x268
 80170be:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80170c2:	ec57 6b10 	vmov	r6, r7, d0
 80170c6:	00ec      	lsls	r4, r5, #3
 80170c8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 80170cc:	46aa      	mov	sl, r5
 80170ce:	f1ba 0f00 	cmp.w	sl, #0
 80170d2:	f280 80d6 	bge.w	8017282 <__kernel_rem_pio2+0x472>
 80170d6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8017128 <__kernel_rem_pio2+0x318>
 80170da:	462e      	mov	r6, r5
 80170dc:	2e00      	cmp	r6, #0
 80170de:	f2c0 8104 	blt.w	80172ea <__kernel_rem_pio2+0x4da>
 80170e2:	ab72      	add	r3, sp, #456	; 0x1c8
 80170e4:	ed8d 8b06 	vstr	d8, [sp, #24]
 80170e8:	f8df a064 	ldr.w	sl, [pc, #100]	; 8017150 <__kernel_rem_pio2+0x340>
 80170ec:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80170f0:	f04f 0800 	mov.w	r8, #0
 80170f4:	1baf      	subs	r7, r5, r6
 80170f6:	e0ea      	b.n	80172ce <__kernel_rem_pio2+0x4be>
 80170f8:	f04f 0b02 	mov.w	fp, #2
 80170fc:	e759      	b.n	8016fb2 <__kernel_rem_pio2+0x1a2>
 80170fe:	f8d8 3000 	ldr.w	r3, [r8]
 8017102:	b955      	cbnz	r5, 801711a <__kernel_rem_pio2+0x30a>
 8017104:	b123      	cbz	r3, 8017110 <__kernel_rem_pio2+0x300>
 8017106:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801710a:	f8c8 3000 	str.w	r3, [r8]
 801710e:	2301      	movs	r3, #1
 8017110:	3201      	adds	r2, #1
 8017112:	f108 0804 	add.w	r8, r8, #4
 8017116:	461d      	mov	r5, r3
 8017118:	e752      	b.n	8016fc0 <__kernel_rem_pio2+0x1b0>
 801711a:	1acb      	subs	r3, r1, r3
 801711c:	f8c8 3000 	str.w	r3, [r8]
 8017120:	462b      	mov	r3, r5
 8017122:	e7f5      	b.n	8017110 <__kernel_rem_pio2+0x300>
 8017124:	f3af 8000 	nop.w
	...
 8017134:	3ff00000 	.word	0x3ff00000
 8017138:	08019718 	.word	0x08019718
 801713c:	40200000 	.word	0x40200000
 8017140:	3ff00000 	.word	0x3ff00000
 8017144:	3e700000 	.word	0x3e700000
 8017148:	41700000 	.word	0x41700000
 801714c:	3fe00000 	.word	0x3fe00000
 8017150:	080196d8 	.word	0x080196d8
 8017154:	1e62      	subs	r2, r4, #1
 8017156:	ab0e      	add	r3, sp, #56	; 0x38
 8017158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801715c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8017160:	a90e      	add	r1, sp, #56	; 0x38
 8017162:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8017166:	e739      	b.n	8016fdc <__kernel_rem_pio2+0x1cc>
 8017168:	1e62      	subs	r2, r4, #1
 801716a:	ab0e      	add	r3, sp, #56	; 0x38
 801716c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017170:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8017174:	e7f4      	b.n	8017160 <__kernel_rem_pio2+0x350>
 8017176:	a90e      	add	r1, sp, #56	; 0x38
 8017178:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801717c:	3b01      	subs	r3, #1
 801717e:	430a      	orrs	r2, r1
 8017180:	e789      	b.n	8017096 <__kernel_rem_pio2+0x286>
 8017182:	3301      	adds	r3, #1
 8017184:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8017188:	2900      	cmp	r1, #0
 801718a:	d0fa      	beq.n	8017182 <__kernel_rem_pio2+0x372>
 801718c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801718e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8017192:	446a      	add	r2, sp
 8017194:	3a98      	subs	r2, #152	; 0x98
 8017196:	920a      	str	r2, [sp, #40]	; 0x28
 8017198:	9a08      	ldr	r2, [sp, #32]
 801719a:	18e3      	adds	r3, r4, r3
 801719c:	18a5      	adds	r5, r4, r2
 801719e:	aa22      	add	r2, sp, #136	; 0x88
 80171a0:	f104 0801 	add.w	r8, r4, #1
 80171a4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80171a8:	9304      	str	r3, [sp, #16]
 80171aa:	9b04      	ldr	r3, [sp, #16]
 80171ac:	4543      	cmp	r3, r8
 80171ae:	da04      	bge.n	80171ba <__kernel_rem_pio2+0x3aa>
 80171b0:	461c      	mov	r4, r3
 80171b2:	e6a3      	b.n	8016efc <__kernel_rem_pio2+0xec>
 80171b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80171b6:	2301      	movs	r3, #1
 80171b8:	e7e4      	b.n	8017184 <__kernel_rem_pio2+0x374>
 80171ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80171bc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80171c0:	f7e9 f9c8 	bl	8000554 <__aeabi_i2d>
 80171c4:	e8e5 0102 	strd	r0, r1, [r5], #8
 80171c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80171ca:	46ab      	mov	fp, r5
 80171cc:	461c      	mov	r4, r3
 80171ce:	f04f 0900 	mov.w	r9, #0
 80171d2:	2600      	movs	r6, #0
 80171d4:	2700      	movs	r7, #0
 80171d6:	9b06      	ldr	r3, [sp, #24]
 80171d8:	4599      	cmp	r9, r3
 80171da:	dd06      	ble.n	80171ea <__kernel_rem_pio2+0x3da>
 80171dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80171de:	e8e3 6702 	strd	r6, r7, [r3], #8
 80171e2:	f108 0801 	add.w	r8, r8, #1
 80171e6:	930a      	str	r3, [sp, #40]	; 0x28
 80171e8:	e7df      	b.n	80171aa <__kernel_rem_pio2+0x39a>
 80171ea:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80171ee:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80171f2:	f7e9 fa19 	bl	8000628 <__aeabi_dmul>
 80171f6:	4602      	mov	r2, r0
 80171f8:	460b      	mov	r3, r1
 80171fa:	4630      	mov	r0, r6
 80171fc:	4639      	mov	r1, r7
 80171fe:	f7e9 f85d 	bl	80002bc <__adddf3>
 8017202:	f109 0901 	add.w	r9, r9, #1
 8017206:	4606      	mov	r6, r0
 8017208:	460f      	mov	r7, r1
 801720a:	e7e4      	b.n	80171d6 <__kernel_rem_pio2+0x3c6>
 801720c:	3d01      	subs	r5, #1
 801720e:	e748      	b.n	80170a2 <__kernel_rem_pio2+0x292>
 8017210:	ec47 6b10 	vmov	d0, r6, r7
 8017214:	f1ca 0000 	rsb	r0, sl, #0
 8017218:	f000 fc36 	bl	8017a88 <scalbn>
 801721c:	ec57 6b10 	vmov	r6, r7, d0
 8017220:	4ba0      	ldr	r3, [pc, #640]	; (80174a4 <__kernel_rem_pio2+0x694>)
 8017222:	ee10 0a10 	vmov	r0, s0
 8017226:	2200      	movs	r2, #0
 8017228:	4639      	mov	r1, r7
 801722a:	f7e9 fc83 	bl	8000b34 <__aeabi_dcmpge>
 801722e:	b1f8      	cbz	r0, 8017270 <__kernel_rem_pio2+0x460>
 8017230:	4b9d      	ldr	r3, [pc, #628]	; (80174a8 <__kernel_rem_pio2+0x698>)
 8017232:	2200      	movs	r2, #0
 8017234:	4630      	mov	r0, r6
 8017236:	4639      	mov	r1, r7
 8017238:	f7e9 f9f6 	bl	8000628 <__aeabi_dmul>
 801723c:	f7e9 fca4 	bl	8000b88 <__aeabi_d2iz>
 8017240:	4680      	mov	r8, r0
 8017242:	f7e9 f987 	bl	8000554 <__aeabi_i2d>
 8017246:	4b97      	ldr	r3, [pc, #604]	; (80174a4 <__kernel_rem_pio2+0x694>)
 8017248:	2200      	movs	r2, #0
 801724a:	f7e9 f9ed 	bl	8000628 <__aeabi_dmul>
 801724e:	460b      	mov	r3, r1
 8017250:	4602      	mov	r2, r0
 8017252:	4639      	mov	r1, r7
 8017254:	4630      	mov	r0, r6
 8017256:	f7e9 f82f 	bl	80002b8 <__aeabi_dsub>
 801725a:	f7e9 fc95 	bl	8000b88 <__aeabi_d2iz>
 801725e:	1c65      	adds	r5, r4, #1
 8017260:	ab0e      	add	r3, sp, #56	; 0x38
 8017262:	f10a 0a18 	add.w	sl, sl, #24
 8017266:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801726a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801726e:	e720      	b.n	80170b2 <__kernel_rem_pio2+0x2a2>
 8017270:	4630      	mov	r0, r6
 8017272:	4639      	mov	r1, r7
 8017274:	f7e9 fc88 	bl	8000b88 <__aeabi_d2iz>
 8017278:	ab0e      	add	r3, sp, #56	; 0x38
 801727a:	4625      	mov	r5, r4
 801727c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8017280:	e717      	b.n	80170b2 <__kernel_rem_pio2+0x2a2>
 8017282:	ab0e      	add	r3, sp, #56	; 0x38
 8017284:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8017288:	f7e9 f964 	bl	8000554 <__aeabi_i2d>
 801728c:	4632      	mov	r2, r6
 801728e:	463b      	mov	r3, r7
 8017290:	f7e9 f9ca 	bl	8000628 <__aeabi_dmul>
 8017294:	4b84      	ldr	r3, [pc, #528]	; (80174a8 <__kernel_rem_pio2+0x698>)
 8017296:	e968 0102 	strd	r0, r1, [r8, #-8]!
 801729a:	2200      	movs	r2, #0
 801729c:	4630      	mov	r0, r6
 801729e:	4639      	mov	r1, r7
 80172a0:	f7e9 f9c2 	bl	8000628 <__aeabi_dmul>
 80172a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80172a8:	4606      	mov	r6, r0
 80172aa:	460f      	mov	r7, r1
 80172ac:	e70f      	b.n	80170ce <__kernel_rem_pio2+0x2be>
 80172ae:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80172b2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80172b6:	f7e9 f9b7 	bl	8000628 <__aeabi_dmul>
 80172ba:	4602      	mov	r2, r0
 80172bc:	460b      	mov	r3, r1
 80172be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80172c2:	f7e8 fffb 	bl	80002bc <__adddf3>
 80172c6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80172ca:	f108 0801 	add.w	r8, r8, #1
 80172ce:	9b02      	ldr	r3, [sp, #8]
 80172d0:	4598      	cmp	r8, r3
 80172d2:	dc01      	bgt.n	80172d8 <__kernel_rem_pio2+0x4c8>
 80172d4:	45b8      	cmp	r8, r7
 80172d6:	ddea      	ble.n	80172ae <__kernel_rem_pio2+0x49e>
 80172d8:	ed9d 7b06 	vldr	d7, [sp, #24]
 80172dc:	ab4a      	add	r3, sp, #296	; 0x128
 80172de:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80172e2:	ed87 7b00 	vstr	d7, [r7]
 80172e6:	3e01      	subs	r6, #1
 80172e8:	e6f8      	b.n	80170dc <__kernel_rem_pio2+0x2cc>
 80172ea:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80172ec:	2b02      	cmp	r3, #2
 80172ee:	dc0b      	bgt.n	8017308 <__kernel_rem_pio2+0x4f8>
 80172f0:	2b00      	cmp	r3, #0
 80172f2:	dc35      	bgt.n	8017360 <__kernel_rem_pio2+0x550>
 80172f4:	d059      	beq.n	80173aa <__kernel_rem_pio2+0x59a>
 80172f6:	9b04      	ldr	r3, [sp, #16]
 80172f8:	f003 0007 	and.w	r0, r3, #7
 80172fc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8017300:	ecbd 8b02 	vpop	{d8}
 8017304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017308:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801730a:	2b03      	cmp	r3, #3
 801730c:	d1f3      	bne.n	80172f6 <__kernel_rem_pio2+0x4e6>
 801730e:	ab4a      	add	r3, sp, #296	; 0x128
 8017310:	4423      	add	r3, r4
 8017312:	9306      	str	r3, [sp, #24]
 8017314:	461c      	mov	r4, r3
 8017316:	469a      	mov	sl, r3
 8017318:	9502      	str	r5, [sp, #8]
 801731a:	9b02      	ldr	r3, [sp, #8]
 801731c:	2b00      	cmp	r3, #0
 801731e:	f1aa 0a08 	sub.w	sl, sl, #8
 8017322:	dc6b      	bgt.n	80173fc <__kernel_rem_pio2+0x5ec>
 8017324:	46aa      	mov	sl, r5
 8017326:	f1ba 0f01 	cmp.w	sl, #1
 801732a:	f1a4 0408 	sub.w	r4, r4, #8
 801732e:	f300 8085 	bgt.w	801743c <__kernel_rem_pio2+0x62c>
 8017332:	9c06      	ldr	r4, [sp, #24]
 8017334:	2000      	movs	r0, #0
 8017336:	3408      	adds	r4, #8
 8017338:	2100      	movs	r1, #0
 801733a:	2d01      	cmp	r5, #1
 801733c:	f300 809d 	bgt.w	801747a <__kernel_rem_pio2+0x66a>
 8017340:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8017344:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8017348:	f1bb 0f00 	cmp.w	fp, #0
 801734c:	f040 809b 	bne.w	8017486 <__kernel_rem_pio2+0x676>
 8017350:	9b01      	ldr	r3, [sp, #4]
 8017352:	e9c3 5600 	strd	r5, r6, [r3]
 8017356:	e9c3 7802 	strd	r7, r8, [r3, #8]
 801735a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801735e:	e7ca      	b.n	80172f6 <__kernel_rem_pio2+0x4e6>
 8017360:	3408      	adds	r4, #8
 8017362:	ab4a      	add	r3, sp, #296	; 0x128
 8017364:	441c      	add	r4, r3
 8017366:	462e      	mov	r6, r5
 8017368:	2000      	movs	r0, #0
 801736a:	2100      	movs	r1, #0
 801736c:	2e00      	cmp	r6, #0
 801736e:	da36      	bge.n	80173de <__kernel_rem_pio2+0x5ce>
 8017370:	f1bb 0f00 	cmp.w	fp, #0
 8017374:	d039      	beq.n	80173ea <__kernel_rem_pio2+0x5da>
 8017376:	4602      	mov	r2, r0
 8017378:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801737c:	9c01      	ldr	r4, [sp, #4]
 801737e:	e9c4 2300 	strd	r2, r3, [r4]
 8017382:	4602      	mov	r2, r0
 8017384:	460b      	mov	r3, r1
 8017386:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 801738a:	f7e8 ff95 	bl	80002b8 <__aeabi_dsub>
 801738e:	ae4c      	add	r6, sp, #304	; 0x130
 8017390:	2401      	movs	r4, #1
 8017392:	42a5      	cmp	r5, r4
 8017394:	da2c      	bge.n	80173f0 <__kernel_rem_pio2+0x5e0>
 8017396:	f1bb 0f00 	cmp.w	fp, #0
 801739a:	d002      	beq.n	80173a2 <__kernel_rem_pio2+0x592>
 801739c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80173a0:	4619      	mov	r1, r3
 80173a2:	9b01      	ldr	r3, [sp, #4]
 80173a4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80173a8:	e7a5      	b.n	80172f6 <__kernel_rem_pio2+0x4e6>
 80173aa:	f504 731a 	add.w	r3, r4, #616	; 0x268
 80173ae:	eb0d 0403 	add.w	r4, sp, r3
 80173b2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80173b6:	2000      	movs	r0, #0
 80173b8:	2100      	movs	r1, #0
 80173ba:	2d00      	cmp	r5, #0
 80173bc:	da09      	bge.n	80173d2 <__kernel_rem_pio2+0x5c2>
 80173be:	f1bb 0f00 	cmp.w	fp, #0
 80173c2:	d002      	beq.n	80173ca <__kernel_rem_pio2+0x5ba>
 80173c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80173c8:	4619      	mov	r1, r3
 80173ca:	9b01      	ldr	r3, [sp, #4]
 80173cc:	e9c3 0100 	strd	r0, r1, [r3]
 80173d0:	e791      	b.n	80172f6 <__kernel_rem_pio2+0x4e6>
 80173d2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80173d6:	f7e8 ff71 	bl	80002bc <__adddf3>
 80173da:	3d01      	subs	r5, #1
 80173dc:	e7ed      	b.n	80173ba <__kernel_rem_pio2+0x5aa>
 80173de:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80173e2:	f7e8 ff6b 	bl	80002bc <__adddf3>
 80173e6:	3e01      	subs	r6, #1
 80173e8:	e7c0      	b.n	801736c <__kernel_rem_pio2+0x55c>
 80173ea:	4602      	mov	r2, r0
 80173ec:	460b      	mov	r3, r1
 80173ee:	e7c5      	b.n	801737c <__kernel_rem_pio2+0x56c>
 80173f0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80173f4:	f7e8 ff62 	bl	80002bc <__adddf3>
 80173f8:	3401      	adds	r4, #1
 80173fa:	e7ca      	b.n	8017392 <__kernel_rem_pio2+0x582>
 80173fc:	e9da 8900 	ldrd	r8, r9, [sl]
 8017400:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8017404:	9b02      	ldr	r3, [sp, #8]
 8017406:	3b01      	subs	r3, #1
 8017408:	9302      	str	r3, [sp, #8]
 801740a:	4632      	mov	r2, r6
 801740c:	463b      	mov	r3, r7
 801740e:	4640      	mov	r0, r8
 8017410:	4649      	mov	r1, r9
 8017412:	f7e8 ff53 	bl	80002bc <__adddf3>
 8017416:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801741a:	4602      	mov	r2, r0
 801741c:	460b      	mov	r3, r1
 801741e:	4640      	mov	r0, r8
 8017420:	4649      	mov	r1, r9
 8017422:	f7e8 ff49 	bl	80002b8 <__aeabi_dsub>
 8017426:	4632      	mov	r2, r6
 8017428:	463b      	mov	r3, r7
 801742a:	f7e8 ff47 	bl	80002bc <__adddf3>
 801742e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8017432:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8017436:	ed8a 7b00 	vstr	d7, [sl]
 801743a:	e76e      	b.n	801731a <__kernel_rem_pio2+0x50a>
 801743c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8017440:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8017444:	4640      	mov	r0, r8
 8017446:	4632      	mov	r2, r6
 8017448:	463b      	mov	r3, r7
 801744a:	4649      	mov	r1, r9
 801744c:	f7e8 ff36 	bl	80002bc <__adddf3>
 8017450:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017454:	4602      	mov	r2, r0
 8017456:	460b      	mov	r3, r1
 8017458:	4640      	mov	r0, r8
 801745a:	4649      	mov	r1, r9
 801745c:	f7e8 ff2c 	bl	80002b8 <__aeabi_dsub>
 8017460:	4632      	mov	r2, r6
 8017462:	463b      	mov	r3, r7
 8017464:	f7e8 ff2a 	bl	80002bc <__adddf3>
 8017468:	ed9d 7b02 	vldr	d7, [sp, #8]
 801746c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8017470:	ed84 7b00 	vstr	d7, [r4]
 8017474:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017478:	e755      	b.n	8017326 <__kernel_rem_pio2+0x516>
 801747a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801747e:	f7e8 ff1d 	bl	80002bc <__adddf3>
 8017482:	3d01      	subs	r5, #1
 8017484:	e759      	b.n	801733a <__kernel_rem_pio2+0x52a>
 8017486:	9b01      	ldr	r3, [sp, #4]
 8017488:	9a01      	ldr	r2, [sp, #4]
 801748a:	601d      	str	r5, [r3, #0]
 801748c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8017490:	605c      	str	r4, [r3, #4]
 8017492:	609f      	str	r7, [r3, #8]
 8017494:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8017498:	60d3      	str	r3, [r2, #12]
 801749a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801749e:	6110      	str	r0, [r2, #16]
 80174a0:	6153      	str	r3, [r2, #20]
 80174a2:	e728      	b.n	80172f6 <__kernel_rem_pio2+0x4e6>
 80174a4:	41700000 	.word	0x41700000
 80174a8:	3e700000 	.word	0x3e700000
 80174ac:	00000000 	.word	0x00000000

080174b0 <__kernel_sin>:
 80174b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174b4:	ed2d 8b04 	vpush	{d8-d9}
 80174b8:	eeb0 8a41 	vmov.f32	s16, s2
 80174bc:	eef0 8a61 	vmov.f32	s17, s3
 80174c0:	ec55 4b10 	vmov	r4, r5, d0
 80174c4:	b083      	sub	sp, #12
 80174c6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80174ca:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80174ce:	9001      	str	r0, [sp, #4]
 80174d0:	da06      	bge.n	80174e0 <__kernel_sin+0x30>
 80174d2:	ee10 0a10 	vmov	r0, s0
 80174d6:	4629      	mov	r1, r5
 80174d8:	f7e9 fb56 	bl	8000b88 <__aeabi_d2iz>
 80174dc:	2800      	cmp	r0, #0
 80174de:	d051      	beq.n	8017584 <__kernel_sin+0xd4>
 80174e0:	4622      	mov	r2, r4
 80174e2:	462b      	mov	r3, r5
 80174e4:	4620      	mov	r0, r4
 80174e6:	4629      	mov	r1, r5
 80174e8:	f7e9 f89e 	bl	8000628 <__aeabi_dmul>
 80174ec:	4682      	mov	sl, r0
 80174ee:	468b      	mov	fp, r1
 80174f0:	4602      	mov	r2, r0
 80174f2:	460b      	mov	r3, r1
 80174f4:	4620      	mov	r0, r4
 80174f6:	4629      	mov	r1, r5
 80174f8:	f7e9 f896 	bl	8000628 <__aeabi_dmul>
 80174fc:	a341      	add	r3, pc, #260	; (adr r3, 8017604 <__kernel_sin+0x154>)
 80174fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017502:	4680      	mov	r8, r0
 8017504:	4689      	mov	r9, r1
 8017506:	4650      	mov	r0, sl
 8017508:	4659      	mov	r1, fp
 801750a:	f7e9 f88d 	bl	8000628 <__aeabi_dmul>
 801750e:	a33f      	add	r3, pc, #252	; (adr r3, 801760c <__kernel_sin+0x15c>)
 8017510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017514:	f7e8 fed0 	bl	80002b8 <__aeabi_dsub>
 8017518:	4652      	mov	r2, sl
 801751a:	465b      	mov	r3, fp
 801751c:	f7e9 f884 	bl	8000628 <__aeabi_dmul>
 8017520:	a33c      	add	r3, pc, #240	; (adr r3, 8017614 <__kernel_sin+0x164>)
 8017522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017526:	f7e8 fec9 	bl	80002bc <__adddf3>
 801752a:	4652      	mov	r2, sl
 801752c:	465b      	mov	r3, fp
 801752e:	f7e9 f87b 	bl	8000628 <__aeabi_dmul>
 8017532:	a33a      	add	r3, pc, #232	; (adr r3, 801761c <__kernel_sin+0x16c>)
 8017534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017538:	f7e8 febe 	bl	80002b8 <__aeabi_dsub>
 801753c:	4652      	mov	r2, sl
 801753e:	465b      	mov	r3, fp
 8017540:	f7e9 f872 	bl	8000628 <__aeabi_dmul>
 8017544:	a337      	add	r3, pc, #220	; (adr r3, 8017624 <__kernel_sin+0x174>)
 8017546:	e9d3 2300 	ldrd	r2, r3, [r3]
 801754a:	f7e8 feb7 	bl	80002bc <__adddf3>
 801754e:	9b01      	ldr	r3, [sp, #4]
 8017550:	4606      	mov	r6, r0
 8017552:	460f      	mov	r7, r1
 8017554:	b9eb      	cbnz	r3, 8017592 <__kernel_sin+0xe2>
 8017556:	4602      	mov	r2, r0
 8017558:	460b      	mov	r3, r1
 801755a:	4650      	mov	r0, sl
 801755c:	4659      	mov	r1, fp
 801755e:	f7e9 f863 	bl	8000628 <__aeabi_dmul>
 8017562:	a325      	add	r3, pc, #148	; (adr r3, 80175f8 <__kernel_sin+0x148>)
 8017564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017568:	f7e8 fea6 	bl	80002b8 <__aeabi_dsub>
 801756c:	4642      	mov	r2, r8
 801756e:	464b      	mov	r3, r9
 8017570:	f7e9 f85a 	bl	8000628 <__aeabi_dmul>
 8017574:	4602      	mov	r2, r0
 8017576:	460b      	mov	r3, r1
 8017578:	4620      	mov	r0, r4
 801757a:	4629      	mov	r1, r5
 801757c:	f7e8 fe9e 	bl	80002bc <__adddf3>
 8017580:	4604      	mov	r4, r0
 8017582:	460d      	mov	r5, r1
 8017584:	ec45 4b10 	vmov	d0, r4, r5
 8017588:	b003      	add	sp, #12
 801758a:	ecbd 8b04 	vpop	{d8-d9}
 801758e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017592:	4b1b      	ldr	r3, [pc, #108]	; (8017600 <__kernel_sin+0x150>)
 8017594:	ec51 0b18 	vmov	r0, r1, d8
 8017598:	2200      	movs	r2, #0
 801759a:	f7e9 f845 	bl	8000628 <__aeabi_dmul>
 801759e:	4632      	mov	r2, r6
 80175a0:	ec41 0b19 	vmov	d9, r0, r1
 80175a4:	463b      	mov	r3, r7
 80175a6:	4640      	mov	r0, r8
 80175a8:	4649      	mov	r1, r9
 80175aa:	f7e9 f83d 	bl	8000628 <__aeabi_dmul>
 80175ae:	4602      	mov	r2, r0
 80175b0:	460b      	mov	r3, r1
 80175b2:	ec51 0b19 	vmov	r0, r1, d9
 80175b6:	f7e8 fe7f 	bl	80002b8 <__aeabi_dsub>
 80175ba:	4652      	mov	r2, sl
 80175bc:	465b      	mov	r3, fp
 80175be:	f7e9 f833 	bl	8000628 <__aeabi_dmul>
 80175c2:	ec53 2b18 	vmov	r2, r3, d8
 80175c6:	f7e8 fe77 	bl	80002b8 <__aeabi_dsub>
 80175ca:	a30b      	add	r3, pc, #44	; (adr r3, 80175f8 <__kernel_sin+0x148>)
 80175cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175d0:	4606      	mov	r6, r0
 80175d2:	460f      	mov	r7, r1
 80175d4:	4640      	mov	r0, r8
 80175d6:	4649      	mov	r1, r9
 80175d8:	f7e9 f826 	bl	8000628 <__aeabi_dmul>
 80175dc:	4602      	mov	r2, r0
 80175de:	460b      	mov	r3, r1
 80175e0:	4630      	mov	r0, r6
 80175e2:	4639      	mov	r1, r7
 80175e4:	f7e8 fe6a 	bl	80002bc <__adddf3>
 80175e8:	4602      	mov	r2, r0
 80175ea:	460b      	mov	r3, r1
 80175ec:	4620      	mov	r0, r4
 80175ee:	4629      	mov	r1, r5
 80175f0:	f7e8 fe62 	bl	80002b8 <__aeabi_dsub>
 80175f4:	e7c4      	b.n	8017580 <__kernel_sin+0xd0>
 80175f6:	bf00      	nop
 80175f8:	55555549 	.word	0x55555549
 80175fc:	3fc55555 	.word	0x3fc55555
 8017600:	3fe00000 	.word	0x3fe00000
 8017604:	5acfd57c 	.word	0x5acfd57c
 8017608:	3de5d93a 	.word	0x3de5d93a
 801760c:	8a2b9ceb 	.word	0x8a2b9ceb
 8017610:	3e5ae5e6 	.word	0x3e5ae5e6
 8017614:	57b1fe7d 	.word	0x57b1fe7d
 8017618:	3ec71de3 	.word	0x3ec71de3
 801761c:	19c161d5 	.word	0x19c161d5
 8017620:	3f2a01a0 	.word	0x3f2a01a0
 8017624:	1110f8a6 	.word	0x1110f8a6
 8017628:	3f811111 	.word	0x3f811111
 801762c:	00000000 	.word	0x00000000

08017630 <atan>:
 8017630:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017634:	ec55 4b10 	vmov	r4, r5, d0
 8017638:	4bc3      	ldr	r3, [pc, #780]	; (8017948 <atan+0x318>)
 801763a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801763e:	429e      	cmp	r6, r3
 8017640:	46ab      	mov	fp, r5
 8017642:	dd18      	ble.n	8017676 <atan+0x46>
 8017644:	4bc1      	ldr	r3, [pc, #772]	; (801794c <atan+0x31c>)
 8017646:	429e      	cmp	r6, r3
 8017648:	dc01      	bgt.n	801764e <atan+0x1e>
 801764a:	d109      	bne.n	8017660 <atan+0x30>
 801764c:	b144      	cbz	r4, 8017660 <atan+0x30>
 801764e:	4622      	mov	r2, r4
 8017650:	462b      	mov	r3, r5
 8017652:	4620      	mov	r0, r4
 8017654:	4629      	mov	r1, r5
 8017656:	f7e8 fe31 	bl	80002bc <__adddf3>
 801765a:	4604      	mov	r4, r0
 801765c:	460d      	mov	r5, r1
 801765e:	e006      	b.n	801766e <atan+0x3e>
 8017660:	f1bb 0f00 	cmp.w	fp, #0
 8017664:	f300 8131 	bgt.w	80178ca <atan+0x29a>
 8017668:	a59b      	add	r5, pc, #620	; (adr r5, 80178d8 <atan+0x2a8>)
 801766a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801766e:	ec45 4b10 	vmov	d0, r4, r5
 8017672:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017676:	4bb6      	ldr	r3, [pc, #728]	; (8017950 <atan+0x320>)
 8017678:	429e      	cmp	r6, r3
 801767a:	dc14      	bgt.n	80176a6 <atan+0x76>
 801767c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8017680:	429e      	cmp	r6, r3
 8017682:	dc0d      	bgt.n	80176a0 <atan+0x70>
 8017684:	a396      	add	r3, pc, #600	; (adr r3, 80178e0 <atan+0x2b0>)
 8017686:	e9d3 2300 	ldrd	r2, r3, [r3]
 801768a:	ee10 0a10 	vmov	r0, s0
 801768e:	4629      	mov	r1, r5
 8017690:	f7e8 fe14 	bl	80002bc <__adddf3>
 8017694:	4baf      	ldr	r3, [pc, #700]	; (8017954 <atan+0x324>)
 8017696:	2200      	movs	r2, #0
 8017698:	f7e9 fa56 	bl	8000b48 <__aeabi_dcmpgt>
 801769c:	2800      	cmp	r0, #0
 801769e:	d1e6      	bne.n	801766e <atan+0x3e>
 80176a0:	f04f 3aff 	mov.w	sl, #4294967295
 80176a4:	e02b      	b.n	80176fe <atan+0xce>
 80176a6:	f000 f963 	bl	8017970 <fabs>
 80176aa:	4bab      	ldr	r3, [pc, #684]	; (8017958 <atan+0x328>)
 80176ac:	429e      	cmp	r6, r3
 80176ae:	ec55 4b10 	vmov	r4, r5, d0
 80176b2:	f300 80bf 	bgt.w	8017834 <atan+0x204>
 80176b6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80176ba:	429e      	cmp	r6, r3
 80176bc:	f300 80a0 	bgt.w	8017800 <atan+0x1d0>
 80176c0:	ee10 2a10 	vmov	r2, s0
 80176c4:	ee10 0a10 	vmov	r0, s0
 80176c8:	462b      	mov	r3, r5
 80176ca:	4629      	mov	r1, r5
 80176cc:	f7e8 fdf6 	bl	80002bc <__adddf3>
 80176d0:	4ba0      	ldr	r3, [pc, #640]	; (8017954 <atan+0x324>)
 80176d2:	2200      	movs	r2, #0
 80176d4:	f7e8 fdf0 	bl	80002b8 <__aeabi_dsub>
 80176d8:	2200      	movs	r2, #0
 80176da:	4606      	mov	r6, r0
 80176dc:	460f      	mov	r7, r1
 80176de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80176e2:	4620      	mov	r0, r4
 80176e4:	4629      	mov	r1, r5
 80176e6:	f7e8 fde9 	bl	80002bc <__adddf3>
 80176ea:	4602      	mov	r2, r0
 80176ec:	460b      	mov	r3, r1
 80176ee:	4630      	mov	r0, r6
 80176f0:	4639      	mov	r1, r7
 80176f2:	f7e9 f8c3 	bl	800087c <__aeabi_ddiv>
 80176f6:	f04f 0a00 	mov.w	sl, #0
 80176fa:	4604      	mov	r4, r0
 80176fc:	460d      	mov	r5, r1
 80176fe:	4622      	mov	r2, r4
 8017700:	462b      	mov	r3, r5
 8017702:	4620      	mov	r0, r4
 8017704:	4629      	mov	r1, r5
 8017706:	f7e8 ff8f 	bl	8000628 <__aeabi_dmul>
 801770a:	4602      	mov	r2, r0
 801770c:	460b      	mov	r3, r1
 801770e:	4680      	mov	r8, r0
 8017710:	4689      	mov	r9, r1
 8017712:	f7e8 ff89 	bl	8000628 <__aeabi_dmul>
 8017716:	a374      	add	r3, pc, #464	; (adr r3, 80178e8 <atan+0x2b8>)
 8017718:	e9d3 2300 	ldrd	r2, r3, [r3]
 801771c:	4606      	mov	r6, r0
 801771e:	460f      	mov	r7, r1
 8017720:	f7e8 ff82 	bl	8000628 <__aeabi_dmul>
 8017724:	a372      	add	r3, pc, #456	; (adr r3, 80178f0 <atan+0x2c0>)
 8017726:	e9d3 2300 	ldrd	r2, r3, [r3]
 801772a:	f7e8 fdc7 	bl	80002bc <__adddf3>
 801772e:	4632      	mov	r2, r6
 8017730:	463b      	mov	r3, r7
 8017732:	f7e8 ff79 	bl	8000628 <__aeabi_dmul>
 8017736:	a370      	add	r3, pc, #448	; (adr r3, 80178f8 <atan+0x2c8>)
 8017738:	e9d3 2300 	ldrd	r2, r3, [r3]
 801773c:	f7e8 fdbe 	bl	80002bc <__adddf3>
 8017740:	4632      	mov	r2, r6
 8017742:	463b      	mov	r3, r7
 8017744:	f7e8 ff70 	bl	8000628 <__aeabi_dmul>
 8017748:	a36d      	add	r3, pc, #436	; (adr r3, 8017900 <atan+0x2d0>)
 801774a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801774e:	f7e8 fdb5 	bl	80002bc <__adddf3>
 8017752:	4632      	mov	r2, r6
 8017754:	463b      	mov	r3, r7
 8017756:	f7e8 ff67 	bl	8000628 <__aeabi_dmul>
 801775a:	a36b      	add	r3, pc, #428	; (adr r3, 8017908 <atan+0x2d8>)
 801775c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017760:	f7e8 fdac 	bl	80002bc <__adddf3>
 8017764:	4632      	mov	r2, r6
 8017766:	463b      	mov	r3, r7
 8017768:	f7e8 ff5e 	bl	8000628 <__aeabi_dmul>
 801776c:	a368      	add	r3, pc, #416	; (adr r3, 8017910 <atan+0x2e0>)
 801776e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017772:	f7e8 fda3 	bl	80002bc <__adddf3>
 8017776:	4642      	mov	r2, r8
 8017778:	464b      	mov	r3, r9
 801777a:	f7e8 ff55 	bl	8000628 <__aeabi_dmul>
 801777e:	a366      	add	r3, pc, #408	; (adr r3, 8017918 <atan+0x2e8>)
 8017780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017784:	4680      	mov	r8, r0
 8017786:	4689      	mov	r9, r1
 8017788:	4630      	mov	r0, r6
 801778a:	4639      	mov	r1, r7
 801778c:	f7e8 ff4c 	bl	8000628 <__aeabi_dmul>
 8017790:	a363      	add	r3, pc, #396	; (adr r3, 8017920 <atan+0x2f0>)
 8017792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017796:	f7e8 fd8f 	bl	80002b8 <__aeabi_dsub>
 801779a:	4632      	mov	r2, r6
 801779c:	463b      	mov	r3, r7
 801779e:	f7e8 ff43 	bl	8000628 <__aeabi_dmul>
 80177a2:	a361      	add	r3, pc, #388	; (adr r3, 8017928 <atan+0x2f8>)
 80177a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177a8:	f7e8 fd86 	bl	80002b8 <__aeabi_dsub>
 80177ac:	4632      	mov	r2, r6
 80177ae:	463b      	mov	r3, r7
 80177b0:	f7e8 ff3a 	bl	8000628 <__aeabi_dmul>
 80177b4:	a35e      	add	r3, pc, #376	; (adr r3, 8017930 <atan+0x300>)
 80177b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177ba:	f7e8 fd7d 	bl	80002b8 <__aeabi_dsub>
 80177be:	4632      	mov	r2, r6
 80177c0:	463b      	mov	r3, r7
 80177c2:	f7e8 ff31 	bl	8000628 <__aeabi_dmul>
 80177c6:	a35c      	add	r3, pc, #368	; (adr r3, 8017938 <atan+0x308>)
 80177c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177cc:	f7e8 fd74 	bl	80002b8 <__aeabi_dsub>
 80177d0:	4632      	mov	r2, r6
 80177d2:	463b      	mov	r3, r7
 80177d4:	f7e8 ff28 	bl	8000628 <__aeabi_dmul>
 80177d8:	4602      	mov	r2, r0
 80177da:	460b      	mov	r3, r1
 80177dc:	4640      	mov	r0, r8
 80177de:	4649      	mov	r1, r9
 80177e0:	f7e8 fd6c 	bl	80002bc <__adddf3>
 80177e4:	4622      	mov	r2, r4
 80177e6:	462b      	mov	r3, r5
 80177e8:	f7e8 ff1e 	bl	8000628 <__aeabi_dmul>
 80177ec:	f1ba 3fff 	cmp.w	sl, #4294967295
 80177f0:	4602      	mov	r2, r0
 80177f2:	460b      	mov	r3, r1
 80177f4:	d14b      	bne.n	801788e <atan+0x25e>
 80177f6:	4620      	mov	r0, r4
 80177f8:	4629      	mov	r1, r5
 80177fa:	f7e8 fd5d 	bl	80002b8 <__aeabi_dsub>
 80177fe:	e72c      	b.n	801765a <atan+0x2a>
 8017800:	ee10 0a10 	vmov	r0, s0
 8017804:	4b53      	ldr	r3, [pc, #332]	; (8017954 <atan+0x324>)
 8017806:	2200      	movs	r2, #0
 8017808:	4629      	mov	r1, r5
 801780a:	f7e8 fd55 	bl	80002b8 <__aeabi_dsub>
 801780e:	4b51      	ldr	r3, [pc, #324]	; (8017954 <atan+0x324>)
 8017810:	4606      	mov	r6, r0
 8017812:	460f      	mov	r7, r1
 8017814:	2200      	movs	r2, #0
 8017816:	4620      	mov	r0, r4
 8017818:	4629      	mov	r1, r5
 801781a:	f7e8 fd4f 	bl	80002bc <__adddf3>
 801781e:	4602      	mov	r2, r0
 8017820:	460b      	mov	r3, r1
 8017822:	4630      	mov	r0, r6
 8017824:	4639      	mov	r1, r7
 8017826:	f7e9 f829 	bl	800087c <__aeabi_ddiv>
 801782a:	f04f 0a01 	mov.w	sl, #1
 801782e:	4604      	mov	r4, r0
 8017830:	460d      	mov	r5, r1
 8017832:	e764      	b.n	80176fe <atan+0xce>
 8017834:	4b49      	ldr	r3, [pc, #292]	; (801795c <atan+0x32c>)
 8017836:	429e      	cmp	r6, r3
 8017838:	da1d      	bge.n	8017876 <atan+0x246>
 801783a:	ee10 0a10 	vmov	r0, s0
 801783e:	4b48      	ldr	r3, [pc, #288]	; (8017960 <atan+0x330>)
 8017840:	2200      	movs	r2, #0
 8017842:	4629      	mov	r1, r5
 8017844:	f7e8 fd38 	bl	80002b8 <__aeabi_dsub>
 8017848:	4b45      	ldr	r3, [pc, #276]	; (8017960 <atan+0x330>)
 801784a:	4606      	mov	r6, r0
 801784c:	460f      	mov	r7, r1
 801784e:	2200      	movs	r2, #0
 8017850:	4620      	mov	r0, r4
 8017852:	4629      	mov	r1, r5
 8017854:	f7e8 fee8 	bl	8000628 <__aeabi_dmul>
 8017858:	4b3e      	ldr	r3, [pc, #248]	; (8017954 <atan+0x324>)
 801785a:	2200      	movs	r2, #0
 801785c:	f7e8 fd2e 	bl	80002bc <__adddf3>
 8017860:	4602      	mov	r2, r0
 8017862:	460b      	mov	r3, r1
 8017864:	4630      	mov	r0, r6
 8017866:	4639      	mov	r1, r7
 8017868:	f7e9 f808 	bl	800087c <__aeabi_ddiv>
 801786c:	f04f 0a02 	mov.w	sl, #2
 8017870:	4604      	mov	r4, r0
 8017872:	460d      	mov	r5, r1
 8017874:	e743      	b.n	80176fe <atan+0xce>
 8017876:	462b      	mov	r3, r5
 8017878:	ee10 2a10 	vmov	r2, s0
 801787c:	4939      	ldr	r1, [pc, #228]	; (8017964 <atan+0x334>)
 801787e:	2000      	movs	r0, #0
 8017880:	f7e8 fffc 	bl	800087c <__aeabi_ddiv>
 8017884:	f04f 0a03 	mov.w	sl, #3
 8017888:	4604      	mov	r4, r0
 801788a:	460d      	mov	r5, r1
 801788c:	e737      	b.n	80176fe <atan+0xce>
 801788e:	4b36      	ldr	r3, [pc, #216]	; (8017968 <atan+0x338>)
 8017890:	4e36      	ldr	r6, [pc, #216]	; (801796c <atan+0x33c>)
 8017892:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8017896:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 801789a:	e9da 2300 	ldrd	r2, r3, [sl]
 801789e:	f7e8 fd0b 	bl	80002b8 <__aeabi_dsub>
 80178a2:	4622      	mov	r2, r4
 80178a4:	462b      	mov	r3, r5
 80178a6:	f7e8 fd07 	bl	80002b8 <__aeabi_dsub>
 80178aa:	4602      	mov	r2, r0
 80178ac:	460b      	mov	r3, r1
 80178ae:	e9d6 0100 	ldrd	r0, r1, [r6]
 80178b2:	f7e8 fd01 	bl	80002b8 <__aeabi_dsub>
 80178b6:	f1bb 0f00 	cmp.w	fp, #0
 80178ba:	4604      	mov	r4, r0
 80178bc:	460d      	mov	r5, r1
 80178be:	f6bf aed6 	bge.w	801766e <atan+0x3e>
 80178c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80178c6:	461d      	mov	r5, r3
 80178c8:	e6d1      	b.n	801766e <atan+0x3e>
 80178ca:	a51d      	add	r5, pc, #116	; (adr r5, 8017940 <atan+0x310>)
 80178cc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80178d0:	e6cd      	b.n	801766e <atan+0x3e>
 80178d2:	bf00      	nop
 80178d4:	f3af 8000 	nop.w
 80178d8:	54442d18 	.word	0x54442d18
 80178dc:	bff921fb 	.word	0xbff921fb
 80178e0:	8800759c 	.word	0x8800759c
 80178e4:	7e37e43c 	.word	0x7e37e43c
 80178e8:	e322da11 	.word	0xe322da11
 80178ec:	3f90ad3a 	.word	0x3f90ad3a
 80178f0:	24760deb 	.word	0x24760deb
 80178f4:	3fa97b4b 	.word	0x3fa97b4b
 80178f8:	a0d03d51 	.word	0xa0d03d51
 80178fc:	3fb10d66 	.word	0x3fb10d66
 8017900:	c54c206e 	.word	0xc54c206e
 8017904:	3fb745cd 	.word	0x3fb745cd
 8017908:	920083ff 	.word	0x920083ff
 801790c:	3fc24924 	.word	0x3fc24924
 8017910:	5555550d 	.word	0x5555550d
 8017914:	3fd55555 	.word	0x3fd55555
 8017918:	2c6a6c2f 	.word	0x2c6a6c2f
 801791c:	bfa2b444 	.word	0xbfa2b444
 8017920:	52defd9a 	.word	0x52defd9a
 8017924:	3fadde2d 	.word	0x3fadde2d
 8017928:	af749a6d 	.word	0xaf749a6d
 801792c:	3fb3b0f2 	.word	0x3fb3b0f2
 8017930:	fe231671 	.word	0xfe231671
 8017934:	3fbc71c6 	.word	0x3fbc71c6
 8017938:	9998ebc4 	.word	0x9998ebc4
 801793c:	3fc99999 	.word	0x3fc99999
 8017940:	54442d18 	.word	0x54442d18
 8017944:	3ff921fb 	.word	0x3ff921fb
 8017948:	440fffff 	.word	0x440fffff
 801794c:	7ff00000 	.word	0x7ff00000
 8017950:	3fdbffff 	.word	0x3fdbffff
 8017954:	3ff00000 	.word	0x3ff00000
 8017958:	3ff2ffff 	.word	0x3ff2ffff
 801795c:	40038000 	.word	0x40038000
 8017960:	3ff80000 	.word	0x3ff80000
 8017964:	bff00000 	.word	0xbff00000
 8017968:	08019748 	.word	0x08019748
 801796c:	08019728 	.word	0x08019728

08017970 <fabs>:
 8017970:	ec51 0b10 	vmov	r0, r1, d0
 8017974:	ee10 2a10 	vmov	r2, s0
 8017978:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801797c:	ec43 2b10 	vmov	d0, r2, r3
 8017980:	4770      	bx	lr
 8017982:	0000      	movs	r0, r0
 8017984:	0000      	movs	r0, r0
	...

08017988 <floor>:
 8017988:	ec51 0b10 	vmov	r0, r1, d0
 801798c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017990:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8017994:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8017998:	2e13      	cmp	r6, #19
 801799a:	ee10 5a10 	vmov	r5, s0
 801799e:	ee10 8a10 	vmov	r8, s0
 80179a2:	460c      	mov	r4, r1
 80179a4:	dc32      	bgt.n	8017a0c <floor+0x84>
 80179a6:	2e00      	cmp	r6, #0
 80179a8:	da14      	bge.n	80179d4 <floor+0x4c>
 80179aa:	a333      	add	r3, pc, #204	; (adr r3, 8017a78 <floor+0xf0>)
 80179ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179b0:	f7e8 fc84 	bl	80002bc <__adddf3>
 80179b4:	2200      	movs	r2, #0
 80179b6:	2300      	movs	r3, #0
 80179b8:	f7e9 f8c6 	bl	8000b48 <__aeabi_dcmpgt>
 80179bc:	b138      	cbz	r0, 80179ce <floor+0x46>
 80179be:	2c00      	cmp	r4, #0
 80179c0:	da57      	bge.n	8017a72 <floor+0xea>
 80179c2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80179c6:	431d      	orrs	r5, r3
 80179c8:	d001      	beq.n	80179ce <floor+0x46>
 80179ca:	4c2d      	ldr	r4, [pc, #180]	; (8017a80 <floor+0xf8>)
 80179cc:	2500      	movs	r5, #0
 80179ce:	4621      	mov	r1, r4
 80179d0:	4628      	mov	r0, r5
 80179d2:	e025      	b.n	8017a20 <floor+0x98>
 80179d4:	4f2b      	ldr	r7, [pc, #172]	; (8017a84 <floor+0xfc>)
 80179d6:	4137      	asrs	r7, r6
 80179d8:	ea01 0307 	and.w	r3, r1, r7
 80179dc:	4303      	orrs	r3, r0
 80179de:	d01f      	beq.n	8017a20 <floor+0x98>
 80179e0:	a325      	add	r3, pc, #148	; (adr r3, 8017a78 <floor+0xf0>)
 80179e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179e6:	f7e8 fc69 	bl	80002bc <__adddf3>
 80179ea:	2200      	movs	r2, #0
 80179ec:	2300      	movs	r3, #0
 80179ee:	f7e9 f8ab 	bl	8000b48 <__aeabi_dcmpgt>
 80179f2:	2800      	cmp	r0, #0
 80179f4:	d0eb      	beq.n	80179ce <floor+0x46>
 80179f6:	2c00      	cmp	r4, #0
 80179f8:	bfbe      	ittt	lt
 80179fa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80179fe:	fa43 f606 	asrlt.w	r6, r3, r6
 8017a02:	19a4      	addlt	r4, r4, r6
 8017a04:	ea24 0407 	bic.w	r4, r4, r7
 8017a08:	2500      	movs	r5, #0
 8017a0a:	e7e0      	b.n	80179ce <floor+0x46>
 8017a0c:	2e33      	cmp	r6, #51	; 0x33
 8017a0e:	dd0b      	ble.n	8017a28 <floor+0xa0>
 8017a10:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8017a14:	d104      	bne.n	8017a20 <floor+0x98>
 8017a16:	ee10 2a10 	vmov	r2, s0
 8017a1a:	460b      	mov	r3, r1
 8017a1c:	f7e8 fc4e 	bl	80002bc <__adddf3>
 8017a20:	ec41 0b10 	vmov	d0, r0, r1
 8017a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a28:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8017a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8017a30:	fa23 f707 	lsr.w	r7, r3, r7
 8017a34:	4207      	tst	r7, r0
 8017a36:	d0f3      	beq.n	8017a20 <floor+0x98>
 8017a38:	a30f      	add	r3, pc, #60	; (adr r3, 8017a78 <floor+0xf0>)
 8017a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a3e:	f7e8 fc3d 	bl	80002bc <__adddf3>
 8017a42:	2200      	movs	r2, #0
 8017a44:	2300      	movs	r3, #0
 8017a46:	f7e9 f87f 	bl	8000b48 <__aeabi_dcmpgt>
 8017a4a:	2800      	cmp	r0, #0
 8017a4c:	d0bf      	beq.n	80179ce <floor+0x46>
 8017a4e:	2c00      	cmp	r4, #0
 8017a50:	da02      	bge.n	8017a58 <floor+0xd0>
 8017a52:	2e14      	cmp	r6, #20
 8017a54:	d103      	bne.n	8017a5e <floor+0xd6>
 8017a56:	3401      	adds	r4, #1
 8017a58:	ea25 0507 	bic.w	r5, r5, r7
 8017a5c:	e7b7      	b.n	80179ce <floor+0x46>
 8017a5e:	2301      	movs	r3, #1
 8017a60:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8017a64:	fa03 f606 	lsl.w	r6, r3, r6
 8017a68:	4435      	add	r5, r6
 8017a6a:	4545      	cmp	r5, r8
 8017a6c:	bf38      	it	cc
 8017a6e:	18e4      	addcc	r4, r4, r3
 8017a70:	e7f2      	b.n	8017a58 <floor+0xd0>
 8017a72:	2500      	movs	r5, #0
 8017a74:	462c      	mov	r4, r5
 8017a76:	e7aa      	b.n	80179ce <floor+0x46>
 8017a78:	8800759c 	.word	0x8800759c
 8017a7c:	7e37e43c 	.word	0x7e37e43c
 8017a80:	bff00000 	.word	0xbff00000
 8017a84:	000fffff 	.word	0x000fffff

08017a88 <scalbn>:
 8017a88:	b570      	push	{r4, r5, r6, lr}
 8017a8a:	ec55 4b10 	vmov	r4, r5, d0
 8017a8e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8017a92:	4606      	mov	r6, r0
 8017a94:	462b      	mov	r3, r5
 8017a96:	b99a      	cbnz	r2, 8017ac0 <scalbn+0x38>
 8017a98:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8017a9c:	4323      	orrs	r3, r4
 8017a9e:	d036      	beq.n	8017b0e <scalbn+0x86>
 8017aa0:	4b39      	ldr	r3, [pc, #228]	; (8017b88 <scalbn+0x100>)
 8017aa2:	4629      	mov	r1, r5
 8017aa4:	ee10 0a10 	vmov	r0, s0
 8017aa8:	2200      	movs	r2, #0
 8017aaa:	f7e8 fdbd 	bl	8000628 <__aeabi_dmul>
 8017aae:	4b37      	ldr	r3, [pc, #220]	; (8017b8c <scalbn+0x104>)
 8017ab0:	429e      	cmp	r6, r3
 8017ab2:	4604      	mov	r4, r0
 8017ab4:	460d      	mov	r5, r1
 8017ab6:	da10      	bge.n	8017ada <scalbn+0x52>
 8017ab8:	a32b      	add	r3, pc, #172	; (adr r3, 8017b68 <scalbn+0xe0>)
 8017aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017abe:	e03a      	b.n	8017b36 <scalbn+0xae>
 8017ac0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8017ac4:	428a      	cmp	r2, r1
 8017ac6:	d10c      	bne.n	8017ae2 <scalbn+0x5a>
 8017ac8:	ee10 2a10 	vmov	r2, s0
 8017acc:	4620      	mov	r0, r4
 8017ace:	4629      	mov	r1, r5
 8017ad0:	f7e8 fbf4 	bl	80002bc <__adddf3>
 8017ad4:	4604      	mov	r4, r0
 8017ad6:	460d      	mov	r5, r1
 8017ad8:	e019      	b.n	8017b0e <scalbn+0x86>
 8017ada:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8017ade:	460b      	mov	r3, r1
 8017ae0:	3a36      	subs	r2, #54	; 0x36
 8017ae2:	4432      	add	r2, r6
 8017ae4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8017ae8:	428a      	cmp	r2, r1
 8017aea:	dd08      	ble.n	8017afe <scalbn+0x76>
 8017aec:	2d00      	cmp	r5, #0
 8017aee:	a120      	add	r1, pc, #128	; (adr r1, 8017b70 <scalbn+0xe8>)
 8017af0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017af4:	da1c      	bge.n	8017b30 <scalbn+0xa8>
 8017af6:	a120      	add	r1, pc, #128	; (adr r1, 8017b78 <scalbn+0xf0>)
 8017af8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017afc:	e018      	b.n	8017b30 <scalbn+0xa8>
 8017afe:	2a00      	cmp	r2, #0
 8017b00:	dd08      	ble.n	8017b14 <scalbn+0x8c>
 8017b02:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017b06:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8017b0a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8017b0e:	ec45 4b10 	vmov	d0, r4, r5
 8017b12:	bd70      	pop	{r4, r5, r6, pc}
 8017b14:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8017b18:	da19      	bge.n	8017b4e <scalbn+0xc6>
 8017b1a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8017b1e:	429e      	cmp	r6, r3
 8017b20:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8017b24:	dd0a      	ble.n	8017b3c <scalbn+0xb4>
 8017b26:	a112      	add	r1, pc, #72	; (adr r1, 8017b70 <scalbn+0xe8>)
 8017b28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017b2c:	2b00      	cmp	r3, #0
 8017b2e:	d1e2      	bne.n	8017af6 <scalbn+0x6e>
 8017b30:	a30f      	add	r3, pc, #60	; (adr r3, 8017b70 <scalbn+0xe8>)
 8017b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b36:	f7e8 fd77 	bl	8000628 <__aeabi_dmul>
 8017b3a:	e7cb      	b.n	8017ad4 <scalbn+0x4c>
 8017b3c:	a10a      	add	r1, pc, #40	; (adr r1, 8017b68 <scalbn+0xe0>)
 8017b3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017b42:	2b00      	cmp	r3, #0
 8017b44:	d0b8      	beq.n	8017ab8 <scalbn+0x30>
 8017b46:	a10e      	add	r1, pc, #56	; (adr r1, 8017b80 <scalbn+0xf8>)
 8017b48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017b4c:	e7b4      	b.n	8017ab8 <scalbn+0x30>
 8017b4e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017b52:	3236      	adds	r2, #54	; 0x36
 8017b54:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8017b58:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8017b5c:	4620      	mov	r0, r4
 8017b5e:	4b0c      	ldr	r3, [pc, #48]	; (8017b90 <scalbn+0x108>)
 8017b60:	2200      	movs	r2, #0
 8017b62:	e7e8      	b.n	8017b36 <scalbn+0xae>
 8017b64:	f3af 8000 	nop.w
 8017b68:	c2f8f359 	.word	0xc2f8f359
 8017b6c:	01a56e1f 	.word	0x01a56e1f
 8017b70:	8800759c 	.word	0x8800759c
 8017b74:	7e37e43c 	.word	0x7e37e43c
 8017b78:	8800759c 	.word	0x8800759c
 8017b7c:	fe37e43c 	.word	0xfe37e43c
 8017b80:	c2f8f359 	.word	0xc2f8f359
 8017b84:	81a56e1f 	.word	0x81a56e1f
 8017b88:	43500000 	.word	0x43500000
 8017b8c:	ffff3cb0 	.word	0xffff3cb0
 8017b90:	3c900000 	.word	0x3c900000

08017b94 <_init>:
 8017b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b96:	bf00      	nop
 8017b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017b9a:	bc08      	pop	{r3}
 8017b9c:	469e      	mov	lr, r3
 8017b9e:	4770      	bx	lr

08017ba0 <_fini>:
 8017ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ba2:	bf00      	nop
 8017ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017ba6:	bc08      	pop	{r3}
 8017ba8:	469e      	mov	lr, r3
 8017baa:	4770      	bx	lr
